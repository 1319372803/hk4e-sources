// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_gcg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_gcg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class GCGAttackCostInfo_CostMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGAttackCostInfo::GCGAttackCostInfo_CostMapEntry>
     _instance;
} _GCGAttackCostInfo_CostMapEntry_default_instance_;
class GCGAttackCostInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGAttackCostInfo>
     _instance;
} _GCGAttackCostInfo_default_instance_;
class GCGPlayCardCostInfo_CostMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayCardCostInfo::GCGPlayCardCostInfo_CostMapEntry>
     _instance;
} _GCGPlayCardCostInfo_CostMapEntry_default_instance_;
class GCGPlayCardCostInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayCardCostInfo>
     _instance;
} _GCGPlayCardCostInfo_default_instance_;
class GCGSelectOnStageCostInfo_CostMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo_CostMapEntry>
     _instance;
} _GCGSelectOnStageCostInfo_CostMapEntry_default_instance_;
class GCGSelectOnStageCostInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSelectOnStageCostInfo>
     _instance;
} _GCGSelectOnStageCostInfo_default_instance_;
class GCGCostReviseInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGCostReviseInfo>
     _instance;
} _GCGCostReviseInfo_default_instance_;
class GCGMsgTokenChangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgTokenChange>
     _instance;
} _GCGMsgTokenChange_default_instance_;
class GCGMsgPhaseChange_AllowControllerMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPhaseChange::GCGMsgPhaseChange_AllowControllerMapEntry>
     _instance;
} _GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_;
class GCGMsgPhaseChangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPhaseChange>
     _instance;
} _GCGMsgPhaseChange_default_instance_;
class GCGMsgAddCardsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgAddCards>
     _instance;
} _GCGMsgAddCards_default_instance_;
class GCGMsgRemoveCardsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgRemoveCards>
     _instance;
} _GCGMsgRemoveCards_default_instance_;
class GCGMsgMoveCardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgMoveCard>
     _instance;
} _GCGMsgMoveCard_default_instance_;
class GCGMsgSelectOnStageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgSelectOnStage>
     _instance;
} _GCGMsgSelectOnStage_default_instance_;
class GCGMsgSelectOnStageByEffectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgSelectOnStageByEffect>
     _instance;
} _GCGMsgSelectOnStageByEffect_default_instance_;
class GCGMsgDiceRollDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgDiceRoll>
     _instance;
} _GCGMsgDiceRoll_default_instance_;
class GCGMsgDiceRerollDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgDiceReroll>
     _instance;
} _GCGMsgDiceReroll_default_instance_;
class GCGMsgPassDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPass>
     _instance;
} _GCGMsgPass_default_instance_;
class GCGMsgCharDieDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgCharDie>
     _instance;
} _GCGMsgCharDie_default_instance_;
class GCGMsgUseSkillDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgUseSkill>
     _instance;
} _GCGMsgUseSkill_default_instance_;
class GCGMsgUseSkillEndDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgUseSkillEnd>
     _instance;
} _GCGMsgUseSkillEnd_default_instance_;
class GCGDamageDetailDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDamageDetail>
     _instance;
} _GCGDamageDetail_default_instance_;
class GCGMsgSkillResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgSkillResult>
     _instance;
} _GCGMsgSkillResult_default_instance_;
class GCGLimitsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGLimitsInfo>
     _instance;
} _GCGLimitsInfo_default_instance_;
class GCGSkillLimitsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillLimitsInfo>
     _instance;
} _GCGSkillLimitsInfo_default_instance_;
class GCGCardSkillLimitsInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGCardSkillLimitsInfo>
     _instance;
} _GCGCardSkillLimitsInfo_default_instance_;
class GCGMsgSkillLimitsChange_CardLimitsChangeMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry>
     _instance;
} _GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_;
class GCGMsgSkillLimitsChangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgSkillLimitsChange>
     _instance;
} _GCGMsgSkillLimitsChange_default_instance_;
class GCGMsgCostDiceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgCostDice>
     _instance;
} _GCGMsgCostDice_default_instance_;
class GCGMsgAddDice_BeforeDiceMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgAddDice::GCGMsgAddDice_BeforeDiceMapEntry>
     _instance;
} _GCGMsgAddDice_BeforeDiceMapEntry_default_instance_;
class GCGMsgAddDice_DiceMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgAddDice::GCGMsgAddDice_DiceMapEntry>
     _instance;
} _GCGMsgAddDice_DiceMapEntry_default_instance_;
class GCGMsgAddDiceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgAddDice>
     _instance;
} _GCGMsgAddDice_default_instance_;
class GCGMsgNewCardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgNewCard>
     _instance;
} _GCGMsgNewCard_default_instance_;
class GCGMsgUpdateController_AllowControllerMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgUpdateController::GCGMsgUpdateController_AllowControllerMapEntry>
     _instance;
} _GCGMsgUpdateController_AllowControllerMapEntry_default_instance_;
class GCGMsgUpdateControllerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgUpdateController>
     _instance;
} _GCGMsgUpdateController_default_instance_;
class GCGMsgModifyAddDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgModifyAdd>
     _instance;
} _GCGMsgModifyAdd_default_instance_;
class GCGMsgModifyRemoveDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgModifyRemove>
     _instance;
} _GCGMsgModifyRemove_default_instance_;
class GCGMsgPVEIntentionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPVEIntention>
     _instance;
} _GCGMsgPVEIntention_default_instance_;
class GCGMsgPVEIntentionInfo_IntentionMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo_IntentionMapEntry>
     _instance;
} _GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_;
class GCGMsgPVEIntentionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPVEIntentionInfo>
     _instance;
} _GCGMsgPVEIntentionInfo_default_instance_;
class GCGMsgPVEIntentionChangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPVEIntentionChange>
     _instance;
} _GCGMsgPVEIntentionChange_default_instance_;
class GCGMsgDuelDataChangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgDuelDataChange>
     _instance;
} _GCGMsgDuelDataChange_default_instance_;
class GCGMsgClientPerformDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgClientPerform>
     _instance;
} _GCGMsgClientPerform_default_instance_;
class GCGMsgGameOverDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgGameOver>
     _instance;
} _GCGMsgGameOver_default_instance_;
class GCGMsgOpTimerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgOpTimer>
     _instance;
} _GCGMsgOpTimer_default_instance_;
class GCGMsgWaitingListChangeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgWaitingListChange>
     _instance;
} _GCGMsgWaitingListChange_default_instance_;
class GCGMsgCardUpdateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgCardUpdate>
     _instance;
} _GCGMsgCardUpdate_default_instance_;
class GCGMsgCostReviseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgCostRevise>
     _instance;
} _GCGMsgCostRevise_default_instance_;
class GCGMsgPhaseContinueDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgPhaseContinue>
     _instance;
} _GCGMsgPhaseContinue_default_instance_;
class GCGMsgNoDamageSkillResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgNoDamageSkillResult>
     _instance;
} _GCGMsgNoDamageSkillResult_default_instance_;
class GCGMsgReactionBeginDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgReactionBegin>
     _instance;
} _GCGMsgReactionBegin_default_instance_;
class GCGMsgReactionEndDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMsgReactionEnd>
     _instance;
} _GCGMsgReactionEnd_default_instance_;
class GCGMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMessage>
     _instance;
  const ::proto::GCGMsgTokenChange* token_change_;
  const ::proto::GCGMsgPhaseChange* phase_change_;
  const ::proto::GCGMsgAddCards* add_cards_;
  const ::proto::GCGMsgRemoveCards* remove_cards_;
  const ::proto::GCGMsgSelectOnStage* select_on_stage_;
  const ::proto::GCGMsgDiceRoll* dice_roll_;
  const ::proto::GCGMsgDiceReroll* dice_reroll_;
  const ::proto::GCGMsgPass* pass_;
  const ::proto::GCGMsgCharDie* char_die_;
  const ::proto::GCGMsgSkillResult* skill_result_;
  const ::proto::GCGMsgCostDice* cost_dice_;
  const ::proto::GCGMsgAddDice* add_dice_;
  const ::proto::GCGMsgMoveCard* move_card_;
  const ::proto::GCGMsgUseSkill* use_skill_;
  const ::proto::GCGMsgNewCard* new_card_;
  const ::proto::GCGMsgUpdateController* update_controller_;
  const ::proto::GCGMsgModifyAdd* modify_add_;
  const ::proto::GCGMsgModifyRemove* modify_remove_;
  const ::proto::GCGMsgUseSkillEnd* use_skill_end_;
  const ::proto::GCGMsgDuelDataChange* duel_data_change_;
  const ::proto::GCGMsgClientPerform* client_perform_;
  const ::proto::GCGMsgGameOver* game_over_;
  const ::proto::GCGMsgOpTimer* op_timer_;
  const ::proto::GCGMsgWaitingListChange* waiting_list_change_;
  const ::proto::GCGMsgCardUpdate* card_update_;
  const ::proto::GCGMsgSelectOnStageByEffect* select_on_stage_by_effect_;
  const ::proto::GCGMsgCostRevise* cost_revise_;
  const ::proto::GCGMsgPhaseContinue* phase_continue_;
  const ::proto::GCGMsgPVEIntentionInfo* pve_intention_info_;
  const ::proto::GCGMsgPVEIntentionChange* pve_intention_change_;
  const ::proto::GCGMsgSkillLimitsChange* skill_limits_change_;
  const ::proto::GCGMsgNoDamageSkillResult* no_damage_skill_result_;
  const ::proto::GCGMsgReactionBegin* reaction_begin_;
  const ::proto::GCGMsgReactionEnd* reaction_end_;
} _GCGMessage_default_instance_;
class GCGMessagePackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMessagePack>
     _instance;
} _GCGMessagePack_default_instance_;
class GCGOperationRedrawDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationRedraw>
     _instance;
} _GCGOperationRedraw_default_instance_;
class GCGOperationOnStageSelectDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationOnStageSelect>
     _instance;
} _GCGOperationOnStageSelect_default_instance_;
class GCGOperationRerollDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationReroll>
     _instance;
} _GCGOperationReroll_default_instance_;
class GCGOperationAttackDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationAttack>
     _instance;
} _GCGOperationAttack_default_instance_;
class GCGOperationPassDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationPass>
     _instance;
} _GCGOperationPass_default_instance_;
class GCGOperationPlayCardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationPlayCard>
     _instance;
} _GCGOperationPlayCard_default_instance_;
class GCGOperationRebootDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationReboot>
     _instance;
} _GCGOperationReboot_default_instance_;
class GCGOperationSurrenderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationSurrender>
     _instance;
} _GCGOperationSurrender_default_instance_;
class GCGOperationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperation>
     _instance;
  const ::proto::GCGOperationRedraw* op_redraw_;
  const ::proto::GCGOperationOnStageSelect* op_select_on_stage_;
  const ::proto::GCGOperationReroll* op_reroll_;
  const ::proto::GCGOperationAttack* op_attack_;
  const ::proto::GCGOperationPass* op_pass_;
  const ::proto::GCGOperationPlayCard* op_play_card_;
  const ::proto::GCGOperationReboot* op_reboot_;
  const ::proto::GCGOperationSurrender* op_surrender_;
} _GCGOperation_default_instance_;
class GCGReplayOperationDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGReplayOperationData>
     _instance;
} _GCGReplayOperationData_default_instance_;
class GCGReplayControllerDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGReplayControllerData>
     _instance;
} _GCGReplayControllerData_default_instance_;
class GCGOperationReplayDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationReplay>
     _instance;
} _GCGOperationReplay_default_instance_;
class GCGTokenDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGToken>
     _instance;
} _GCGToken_default_instance_;
class GCGCardDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGCard>
     _instance;
} _GCGCard_default_instance_;
class GCGZoneDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGZone>
     _instance;
} _GCGZone_default_instance_;
class GCGWaitingCharacterDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGWaitingCharacter>
     _instance;
} _GCGWaitingCharacter_default_instance_;
class GCGPlayerField_ModifyZoneMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayerField::GCGPlayerField_ModifyZoneMapEntry>
     _instance;
} _GCGPlayerField_ModifyZoneMapEntry_default_instance_;
class GCGPlayerFieldDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayerField>
     _instance;
} _GCGPlayerField_default_instance_;
class GCGPhase_AllowControllerMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPhase::GCGPhase_AllowControllerMapEntry>
     _instance;
} _GCGPhase_AllowControllerMapEntry_default_instance_;
class GCGPhaseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPhase>
     _instance;
} _GCGPhase_default_instance_;
class GCGControllerShowInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGControllerShowInfo>
     _instance;
} _GCGControllerShowInfo_default_instance_;
class GCGPVEIntentionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPVEIntention>
     _instance;
} _GCGPVEIntention_default_instance_;
class GCGDuelChallengeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDuelChallenge>
     _instance;
} _GCGDuelChallenge_default_instance_;
class GCGDuelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDuel>
     _instance;
} _GCGDuel_default_instance_;
class GCGOperationReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationReq>
     _instance;
} _GCGOperationReq_default_instance_;
class GCGOperationRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGOperationRsp>
     _instance;
} _GCGOperationRsp_default_instance_;
class GCGMessagePackNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGMessagePackNotify>
     _instance;
} _GCGMessagePackNotify_default_instance_;
class GCGAskDuelReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGAskDuelReq>
     _instance;
} _GCGAskDuelReq_default_instance_;
class GCGAskDuelRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGAskDuelRsp>
     _instance;
} _GCGAskDuelRsp_default_instance_;
class GCGPlayerBriefData_CardFaceMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayerBriefData::GCGPlayerBriefData_CardFaceMapEntry>
     _instance;
} _GCGPlayerBriefData_CardFaceMapEntry_default_instance_;
class GCGPlayerBriefDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayerBriefData>
     _instance;
} _GCGPlayerBriefData_default_instance_;
class GCGGameBriefDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGameBriefData>
     _instance;
} _GCGGameBriefData_default_instance_;
class GCGGameBriefDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGameBriefDataNotify>
     _instance;
} _GCGGameBriefDataNotify_default_instance_;
class GCGInitFinishReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGInitFinishReq>
     _instance;
} _GCGInitFinishReq_default_instance_;
class GCGInitFinishRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGInitFinishRsp>
     _instance;
} _GCGInitFinishRsp_default_instance_;
class GCGHeartBeatNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGHeartBeatNotify>
     _instance;
} _GCGHeartBeatNotify_default_instance_;
class GCGSkillPreviewHpInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewHpInfo>
     _instance;
} _GCGSkillPreviewHpInfo_default_instance_;
class GCGSkillPreviewReactionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewReactionInfo>
     _instance;
} _GCGSkillPreviewReactionInfo_default_instance_;
class GCGSkillPreviewElementReactionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewElementReactionInfo>
     _instance;
} _GCGSkillPreviewElementReactionInfo_default_instance_;
class GCGSkillPreviewCardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewCardInfo>
     _instance;
} _GCGSkillPreviewCardInfo_default_instance_;
class GCGSkillPreviewOnstageChangeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewOnstageChangeInfo>
     _instance;
} _GCGSkillPreviewOnstageChangeInfo_default_instance_;
class GCGSkillPreviewTokenInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewTokenInfo>
     _instance;
} _GCGSkillPreviewTokenInfo_default_instance_;
class GCGSkillPreviewTokenChangeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewTokenChangeInfo>
     _instance;
} _GCGSkillPreviewTokenChangeInfo_default_instance_;
class GCGSkillPreviewExtraInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewExtraInfo>
     _instance;
} _GCGSkillPreviewExtraInfo_default_instance_;
class GCGSkillPreviewInfo_CardTokenChangeMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewInfo::GCGSkillPreviewInfo_CardTokenChangeMapEntry>
     _instance;
} _GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_;
class GCGSkillPreviewInfo_ReactionInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewInfo::GCGSkillPreviewInfo_ReactionInfoMapEntry>
     _instance;
} _GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_;
class GCGSkillPreviewInfo_HpInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewInfo::GCGSkillPreviewInfo_HpInfoMapEntry>
     _instance;
} _GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_;
class GCGSkillPreviewInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewInfo>
     _instance;
} _GCGSkillPreviewInfo_default_instance_;
class GCGChangeOnstageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGChangeOnstageInfo>
     _instance;
} _GCGChangeOnstageInfo_default_instance_;
class GCGSkillPreviewPlayCardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewPlayCardInfo>
     _instance;
} _GCGSkillPreviewPlayCardInfo_default_instance_;
class GCGSkillPreviewNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewNotify>
     _instance;
} _GCGSkillPreviewNotify_default_instance_;
class GCGSkillPreviewAskReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewAskReq>
     _instance;
} _GCGSkillPreviewAskReq_default_instance_;
class GCGSkillPreviewAskRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSkillPreviewAskRsp>
     _instance;
} _GCGSkillPreviewAskRsp_default_instance_;
class GCGChallengeUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGChallengeUpdateNotify>
     _instance;
} _GCGChallengeUpdateNotify_default_instance_;
class GCGBackToDuelReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGBackToDuelReq>
     _instance;
} _GCGBackToDuelReq_default_instance_;
class GCGBackToDuelRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGBackToDuelRsp>
     _instance;
} _GCGBackToDuelRsp_default_instance_;
class GCGDebugReplayNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDebugReplayNotify>
     _instance;
} _GCGDebugReplayNotify_default_instance_;
class GCGGameMaxNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGameMaxNotify>
     _instance;
} _GCGGameMaxNotify_default_instance_;
class GCGGameCreateFailReasonNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGameCreateFailReasonNotify>
     _instance;
} _GCGGameCreateFailReasonNotify_default_instance_;
class GCGDSDeckDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDeckData>
     _instance;
} _GCGDSDeckData_default_instance_;
class GCGDSCardDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSCardData>
     _instance;
} _GCGDSCardData_default_instance_;
class GCGDSDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDataNotify>
     _instance;
} _GCGDSDataNotify_default_instance_;
class GCGDSCardBackUnlockNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSCardBackUnlockNotify>
     _instance;
} _GCGDSCardBackUnlockNotify_default_instance_;
class GCGDSFieldUnlockNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSFieldUnlockNotify>
     _instance;
} _GCGDSFieldUnlockNotify_default_instance_;
class GCGDSCardFaceUnlockNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSCardFaceUnlockNotify>
     _instance;
} _GCGDSCardFaceUnlockNotify_default_instance_;
class GCGDSCardNumChangeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSCardNumChangeNotify>
     _instance;
} _GCGDSCardNumChangeNotify_default_instance_;
class GCGDSChangeCardFaceReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeCardFaceReq>
     _instance;
} _GCGDSChangeCardFaceReq_default_instance_;
class GCGDSChangeCardFaceRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeCardFaceRsp>
     _instance;
} _GCGDSChangeCardFaceRsp_default_instance_;
class GCGDSChangeCardBackReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeCardBackReq>
     _instance;
} _GCGDSChangeCardBackReq_default_instance_;
class GCGDSChangeCardBackRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeCardBackRsp>
     _instance;
} _GCGDSChangeCardBackRsp_default_instance_;
class GCGDSChangeFieldReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeFieldReq>
     _instance;
} _GCGDSChangeFieldReq_default_instance_;
class GCGDSChangeFieldRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeFieldRsp>
     _instance;
} _GCGDSChangeFieldRsp_default_instance_;
class GCGDSChangeDeckNameReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeDeckNameReq>
     _instance;
} _GCGDSChangeDeckNameReq_default_instance_;
class GCGDSChangeDeckNameRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeDeckNameRsp>
     _instance;
} _GCGDSChangeDeckNameRsp_default_instance_;
class GCGDSDeckSaveReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDeckSaveReq>
     _instance;
} _GCGDSDeckSaveReq_default_instance_;
class GCGDSDeckSaveRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDeckSaveRsp>
     _instance;
} _GCGDSDeckSaveRsp_default_instance_;
class GCGDSChangeCurDeckReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeCurDeckReq>
     _instance;
} _GCGDSChangeCurDeckReq_default_instance_;
class GCGDSChangeCurDeckRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSChangeCurDeckRsp>
     _instance;
} _GCGDSChangeCurDeckRsp_default_instance_;
class GCGDSCurDeckChangeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSCurDeckChangeNotify>
     _instance;
} _GCGDSCurDeckChangeNotify_default_instance_;
class GCGDSDeleteDeckReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDeleteDeckReq>
     _instance;
} _GCGDSDeleteDeckReq_default_instance_;
class GCGDSDeleteDeckRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDeleteDeckRsp>
     _instance;
} _GCGDSDeleteDeckRsp_default_instance_;
class GCGDSDeckUnlockNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDeckUnlockNotify>
     _instance;
} _GCGDSDeckUnlockNotify_default_instance_;
class GCGDSCardProficiencyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSCardProficiencyNotify>
     _instance;
} _GCGDSCardProficiencyNotify_default_instance_;
class GCGDSDeckUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSDeckUpdateNotify>
     _instance;
} _GCGDSDeckUpdateNotify_default_instance_;
class GCGDSCardFaceUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSCardFaceUpdateNotify>
     _instance;
} _GCGDSCardFaceUpdateNotify_default_instance_;
class GCGDSTakeCardProficiencyRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSTakeCardProficiencyRewardReq>
     _instance;
} _GCGDSTakeCardProficiencyRewardReq_default_instance_;
class GCGDSTakeCardProficiencyRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSTakeCardProficiencyRewardRsp>
     _instance;
} _GCGDSTakeCardProficiencyRewardRsp_default_instance_;
class GCGDSBanCardNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGDSBanCardNotify>
     _instance;
} _GCGDSBanCardNotify_default_instance_;
class GCGTCTavernInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTCTavernInfoNotify>
     _instance;
} _GCGTCTavernInfoNotify_default_instance_;
class GCGTCInviteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTCInviteReq>
     _instance;
} _GCGTCInviteReq_default_instance_;
class GCGTCInviteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTCInviteRsp>
     _instance;
} _GCGTCInviteRsp_default_instance_;
class GCGTCTavernChallengeDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTCTavernChallengeData>
     _instance;
} _GCGTCTavernChallengeData_default_instance_;
class GCGTCTavernChallengeDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTCTavernChallengeDataNotify>
     _instance;
} _GCGTCTavernChallengeDataNotify_default_instance_;
class GCGTCTavernChallengeUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTCTavernChallengeUpdateNotify>
     _instance;
} _GCGTCTavernChallengeUpdateNotify_default_instance_;
class GCGGrowthLevelNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGrowthLevelNotify>
     _instance;
} _GCGGrowthLevelNotify_default_instance_;
class GCGGrowthLevelRewardNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGrowthLevelRewardNotify>
     _instance;
} _GCGGrowthLevelRewardNotify_default_instance_;
class GCGGrowthLevelTakeRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGrowthLevelTakeRewardReq>
     _instance;
} _GCGGrowthLevelTakeRewardReq_default_instance_;
class GCGGrowthLevelTakeRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGGrowthLevelTakeRewardRsp>
     _instance;
} _GCGGrowthLevelTakeRewardRsp_default_instance_;
class GCGInviteGuestBattleReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGInviteGuestBattleReq>
     _instance;
} _GCGInviteGuestBattleReq_default_instance_;
class GCGInviteGuestBattleRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGInviteGuestBattleRsp>
     _instance;
} _GCGInviteGuestBattleRsp_default_instance_;
class GCGInviteBattleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGInviteBattleNotify>
     _instance;
} _GCGInviteBattleNotify_default_instance_;
class GCGApplyInviteBattleReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGApplyInviteBattleReq>
     _instance;
} _GCGApplyInviteBattleReq_default_instance_;
class GCGApplyInviteBattleRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGApplyInviteBattleRsp>
     _instance;
} _GCGApplyInviteBattleRsp_default_instance_;
class GCGApplyInviteBattleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGApplyInviteBattleNotify>
     _instance;
} _GCGApplyInviteBattleNotify_default_instance_;
class GCGWorldPlayerGCGStateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGWorldPlayerGCGStateReq>
     _instance;
} _GCGWorldPlayerGCGStateReq_default_instance_;
class GCGPlayerGCGStateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGPlayerGCGState>
     _instance;
} _GCGPlayerGCGState_default_instance_;
class GCGWorldPlayerGCGStateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGWorldPlayerGCGStateRsp>
     _instance;
} _GCGWorldPlayerGCGStateRsp_default_instance_;
class GCGSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSettleNotify>
     _instance;
} _GCGSettleNotify_default_instance_;
class GCGResourceStateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGResourceStateNotify>
     _instance;
} _GCGResourceStateNotify_default_instance_;
class GCGClientSettleReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGClientSettleReq>
     _instance;
} _GCGClientSettleReq_default_instance_;
class GCGClientSettleRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGClientSettleRsp>
     _instance;
} _GCGClientSettleRsp_default_instance_;
class GCGSettleOptionReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSettleOptionReq>
     _instance;
} _GCGSettleOptionReq_default_instance_;
class GCGSettleOptionRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGSettleOptionRsp>
     _instance;
} _GCGSettleOptionRsp_default_instance_;
class GCGBasicDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGBasicDataNotify>
     _instance;
} _GCGBasicDataNotify_default_instance_;
class GCGTavernNpcInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTavernNpcInfo>
     _instance;
} _GCGTavernNpcInfo_default_instance_;
class GCGTavernNpcInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGTavernNpcInfoNotify>
     _instance;
} _GCGTavernNpcInfoNotify_default_instance_;
class GCGStartChallengeReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGStartChallengeReq>
     _instance;
} _GCGStartChallengeReq_default_instance_;
class GCGStartChallengeRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGStartChallengeRsp>
     _instance;
} _GCGStartChallengeRsp_default_instance_;
class GCGWeekChallengeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGWeekChallengeInfo>
     _instance;
} _GCGWeekChallengeInfo_default_instance_;
class GCGWeekChallengeInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGWeekChallengeInfoNotify>
     _instance;
} _GCGWeekChallengeInfoNotify_default_instance_;
class GCGStartChallengeByCheckRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGStartChallengeByCheckRewardReq>
     _instance;
} _GCGStartChallengeByCheckRewardReq_default_instance_;
class GCGStartChallengeByCheckRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGStartChallengeByCheckRewardRsp>
     _instance;
} _GCGStartChallengeByCheckRewardRsp_default_instance_;
class GCGLevelDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGLevelData>
     _instance;
} _GCGLevelData_default_instance_;
class GCGBossChallengeDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGBossChallengeData>
     _instance;
} _GCGBossChallengeData_default_instance_;
class GCGLevelChallengeNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGLevelChallengeNotify>
     _instance;
} _GCGLevelChallengeNotify_default_instance_;
class GCGLevelChallengeFinishNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGLevelChallengeFinishNotify>
     _instance;
} _GCGLevelChallengeFinishNotify_default_instance_;
class GCGWorldChallengeUnlockNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGWorldChallengeUnlockNotify>
     _instance;
} _GCGWorldChallengeUnlockNotify_default_instance_;
class GCGBossChallengeUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGBossChallengeUpdateNotify>
     _instance;
} _GCGBossChallengeUpdateNotify_default_instance_;
class GCGLevelChallengeDeleteNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GCGLevelChallengeDeleteNotify>
     _instance;
} _GCGLevelChallengeDeleteNotify_default_instance_;

namespace protobuf_cmd_2fcmd_5fgcg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[183];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGAttackCostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGAttackCostInfo, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGAttackCostInfo, cost_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayCardCostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayCardCostInfo, cost_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayCardCostInfo, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSelectOnStageCostInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSelectOnStageCostInfo, cost_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSelectOnStageCostInfo, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCostReviseInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCostReviseInfo, is_can_attack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCostReviseInfo, can_use_hand_card_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCostReviseInfo, play_card_cost_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCostReviseInfo, select_on_stage_cost_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCostReviseInfo, attack_cost_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgTokenChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgTokenChange, before_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgTokenChange, token_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgTokenChange, card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgTokenChange, after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgTokenChange, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPhaseChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPhaseChange, allow_controller_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPhaseChange, before_phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPhaseChange, after_phase_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddCards, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddCards, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddCards, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddCards, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddCards, card_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgRemoveCards, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgRemoveCards, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgRemoveCards, zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgRemoveCards, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgRemoveCards, card_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgMoveCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgMoveCard, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgMoveCard, to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgMoveCard, from_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgMoveCard, card_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgMoveCard, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgMoveCard, fail_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStage, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStage, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStage, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStageByEffect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStageByEffect, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStageByEffect, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSelectOnStageByEffect, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceRoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceRoll, dice_side_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceRoll, dice_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceRoll, controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceReroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceReroll, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceReroll, select_dice_index_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDiceReroll, dice_side_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPass, controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCharDie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCharDie, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCharDie, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUseSkill, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUseSkill, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUseSkillEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUseSkillEnd, card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUseSkillEnd, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDamageDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDamageDetail, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDamageDetail, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, last_hp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, detail_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, target_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, effect_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, from_result_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, result_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillResult, src_card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLimitsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLimitsInfo, limit_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLimitsInfo, limit_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillLimitsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillLimitsInfo, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillLimitsInfo, limits_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCardSkillLimitsInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCardSkillLimitsInfo, skill_limits_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillLimitsChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgSkillLimitsChange, card_limits_change_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCostDice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCostDice, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCostDice, select_dice_index_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCostDice, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddDice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddDice, before_dice_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddDice, change_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddDice, dice_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddDice, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgAddDice, controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNewCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNewCard, card_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUpdateController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgUpdateController, allow_controller_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyAdd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyAdd, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyAdd, owner_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyAdd, card_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyAdd, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyAdd, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyRemove, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyRemove, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyRemove, owner_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgModifyRemove, card_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntention, skill_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntention, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntentionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntentionInfo, intention_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntentionChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntentionChange, change_intention_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPVEIntentionChange, change_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDuelDataChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgDuelDataChange, round_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgClientPerform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgClientPerform, param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgClientPerform, perform_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgGameOver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgGameOver, end_reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgGameOver, win_controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgOpTimer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgOpTimer, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgOpTimer, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgOpTimer, time_stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgOpTimer, controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgWaitingListChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgWaitingListChange, cur_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgWaitingListChange, controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCardUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCardUpdate, card_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCostRevise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCostRevise, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgCostRevise, cost_revise_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgPhaseContinue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, result_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, from_result_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, effect_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, target_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, detail_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgNoDamageSkillResult, src_card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgReactionBegin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgReactionBegin, card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgReactionBegin, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgReactionEnd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMsgReactionEnd, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(GCGMessageDefaultTypeInternal, token_change_),
  offsetof(GCGMessageDefaultTypeInternal, phase_change_),
  offsetof(GCGMessageDefaultTypeInternal, add_cards_),
  offsetof(GCGMessageDefaultTypeInternal, remove_cards_),
  offsetof(GCGMessageDefaultTypeInternal, select_on_stage_),
  offsetof(GCGMessageDefaultTypeInternal, dice_roll_),
  offsetof(GCGMessageDefaultTypeInternal, dice_reroll_),
  offsetof(GCGMessageDefaultTypeInternal, pass_),
  offsetof(GCGMessageDefaultTypeInternal, char_die_),
  offsetof(GCGMessageDefaultTypeInternal, skill_result_),
  offsetof(GCGMessageDefaultTypeInternal, cost_dice_),
  offsetof(GCGMessageDefaultTypeInternal, add_dice_),
  offsetof(GCGMessageDefaultTypeInternal, move_card_),
  offsetof(GCGMessageDefaultTypeInternal, use_skill_),
  offsetof(GCGMessageDefaultTypeInternal, new_card_),
  offsetof(GCGMessageDefaultTypeInternal, update_controller_),
  offsetof(GCGMessageDefaultTypeInternal, modify_add_),
  offsetof(GCGMessageDefaultTypeInternal, modify_remove_),
  offsetof(GCGMessageDefaultTypeInternal, use_skill_end_),
  offsetof(GCGMessageDefaultTypeInternal, duel_data_change_),
  offsetof(GCGMessageDefaultTypeInternal, client_perform_),
  offsetof(GCGMessageDefaultTypeInternal, game_over_),
  offsetof(GCGMessageDefaultTypeInternal, op_timer_),
  offsetof(GCGMessageDefaultTypeInternal, waiting_list_change_),
  offsetof(GCGMessageDefaultTypeInternal, card_update_),
  offsetof(GCGMessageDefaultTypeInternal, select_on_stage_by_effect_),
  offsetof(GCGMessageDefaultTypeInternal, cost_revise_),
  offsetof(GCGMessageDefaultTypeInternal, phase_continue_),
  offsetof(GCGMessageDefaultTypeInternal, pve_intention_info_),
  offsetof(GCGMessageDefaultTypeInternal, pve_intention_change_),
  offsetof(GCGMessageDefaultTypeInternal, skill_limits_change_),
  offsetof(GCGMessageDefaultTypeInternal, no_damage_skill_result_),
  offsetof(GCGMessageDefaultTypeInternal, reaction_begin_),
  offsetof(GCGMessageDefaultTypeInternal, reaction_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessagePack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessagePack, action_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessagePack, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessagePack, msg_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationRedraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationRedraw, card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationOnStageSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationOnStageSelect, card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationOnStageSelect, cost_dice_index_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReroll, dice_index_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationAttack, cost_dice_index_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationAttack, skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationPlayCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationPlayCard, card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationPlayCard, cost_dice_index_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationPlayCard, target_card_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationPlayCard, replace_card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReboot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReboot, cost_card_guid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReboot, dice_index_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationSurrender, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(GCGOperationDefaultTypeInternal, op_redraw_),
  offsetof(GCGOperationDefaultTypeInternal, op_select_on_stage_),
  offsetof(GCGOperationDefaultTypeInternal, op_reroll_),
  offsetof(GCGOperationDefaultTypeInternal, op_attack_),
  offsetof(GCGOperationDefaultTypeInternal, op_pass_),
  offsetof(GCGOperationDefaultTypeInternal, op_play_card_),
  offsetof(GCGOperationDefaultTypeInternal, op_reboot_),
  offsetof(GCGOperationDefaultTypeInternal, op_surrender_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperation, op_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGReplayOperationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGReplayOperationData, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGReplayOperationData, op_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGReplayControllerData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGReplayControllerData, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGReplayControllerData, card_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReplay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReplay, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReplay, operation_data_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReplay, controller_data_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReplay, game_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGToken, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGToken, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, is_show_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, face_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, token_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, skill_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, skill_limits_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, tag_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGCard, controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGZone, card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWaitingCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWaitingCharacter, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWaitingCharacter, cond_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, modify_zone_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, cur_waiting_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, summon_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, field_show_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, card_back_show_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, dice_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, on_stage_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, is_passed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, character_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, on_stage_character_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, assist_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, deck_card_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, dice_side_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, hand_zone_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, intention_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerField, waiting_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPhase, phase_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPhase, allow_controller_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGControllerShowInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGControllerShowInfo, profile_picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGControllerShowInfo, nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGControllerShowInfo, controller_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPVEIntention, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPVEIntention, card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPVEIntention, skill_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelChallenge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelChallenge, total_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelChallenge, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuelChallenge, cur_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, cost_revise_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, business_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, history_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, operation_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, game_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, server_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, history_msg_pack_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, field_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, phase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, card_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, intetion_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, forbid_finish_challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, cur_controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDuel, show_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReq, op_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReq, redirect_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationReq, op_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGOperationRsp, op_seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessagePackNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessagePackNotify, msg_pack_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGMessagePackNotify, server_seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGAskDuelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGAskDuelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGAskDuelRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGAskDuelRsp, duel_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerBriefData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerBriefData, card_face_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerBriefData, nick_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerBriefData, profile_picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerBriefData, card_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerBriefData, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerBriefData, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefData, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefData, game_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefData, business_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefData, verify_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefData, player_brief_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefDataNotify, is_new_game_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameBriefDataNotify, gcg_brief_data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInitFinishReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInitFinishRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInitFinishRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGHeartBeatNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGHeartBeatNotify, server_seq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewHpInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewHpInfo, change_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewHpInfo, hp_change_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewReactionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewReactionInfo, source_element_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewReactionInfo, target_element_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewElementReactionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewElementReactionInfo, fresh_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewElementReactionInfo, source_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewElementReactionInfo, reaction_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewCardInfo, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewCardInfo, owner_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewCardInfo, zone_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewCardInfo, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewCardInfo, card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewOnstageChangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewOnstageChangeInfo, target_onstage_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewOnstageChangeInfo, source_onstage_card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewTokenInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewTokenInfo, token_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewTokenInfo, after_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewTokenInfo, before_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewTokenChangeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewTokenChangeInfo, token_change_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewExtraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewExtraInfo, fail_added_when_full_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewExtraInfo, refresh_card_when_exist_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, card_token_change_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, reaction_info_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, hp_info_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, add_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, extra_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, skill_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, change_onstage_character_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewInfo, rm_card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChangeOnstageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChangeOnstageInfo, card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChangeOnstageInfo, is_quick_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChangeOnstageInfo, change_onstage_preview_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewPlayCardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewPlayCardInfo, target_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewPlayCardInfo, hand_card_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewPlayCardInfo, play_card_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewNotify, controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewNotify, play_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewNotify, skill_preview_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewNotify, change_onstage_preview_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewNotify, onstage_card_guid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewAskReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewAskRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSkillPreviewAskRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeUpdateNotify, server_seq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGChallengeUpdateNotify, challenge_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBackToDuelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBackToDuelReq, is_back_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBackToDuelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBackToDuelRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDebugReplayNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDebugReplayNotify, json_str_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameMaxNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameCreateFailReasonNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGameCreateFailReasonNotify, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, card_back_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, character_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckData, field_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardData, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardData, face_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardData, num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardData, unlock_face_type_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardData, proficiency_reward_taken_idx_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardData, proficiency_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDataNotify, deck_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDataNotify, unlock_card_back_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDataNotify, unlock_field_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDataNotify, cur_deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDataNotify, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDataNotify, unlock_deck_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardBackUnlockNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardBackUnlockNotify, card_back_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSFieldUnlockNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSFieldUnlockNotify, field_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardFaceUnlockNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardFaceUnlockNotify, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardFaceUnlockNotify, face_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardNumChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardNumChangeNotify, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardNumChangeNotify, num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardFaceReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardFaceReq, face_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardFaceReq, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardFaceRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardFaceRsp, face_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardFaceRsp, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardFaceRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardBackReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardBackReq, deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardBackReq, card_back_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardBackRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardBackRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardBackRsp, card_back_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCardBackRsp, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeFieldReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeFieldReq, field_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeFieldReq, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeFieldRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeFieldRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeFieldRsp, field_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeFieldRsp, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeDeckNameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeDeckNameReq, deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeDeckNameReq, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeDeckNameRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeDeckNameRsp, deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeDeckNameRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeDeckNameRsp, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveReq, deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveReq, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveReq, character_card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveReq, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveRsp, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveRsp, deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckSaveRsp, is_valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCurDeckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCurDeckReq, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCurDeckRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCurDeckRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSChangeCurDeckRsp, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCurDeckChangeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCurDeckChangeNotify, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeleteDeckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeleteDeckReq, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeleteDeckRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeleteDeckRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeleteDeckRsp, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckUnlockNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckUnlockNotify, deck_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardProficiencyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardProficiencyNotify, proficiency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardProficiencyNotify, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckUpdateNotify, deck_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSDeckUpdateNotify, is_valid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardFaceUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardFaceUpdateNotify, card_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSCardFaceUpdateNotify, face_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSTakeCardProficiencyRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSTakeCardProficiencyRewardReq, reward_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSTakeCardProficiencyRewardReq, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSTakeCardProficiencyRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSTakeCardProficiencyRewardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSTakeCardProficiencyRewardRsp, reward_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSTakeCardProficiencyRewardRsp, card_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSBanCardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGDSBanCardNotify, card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, is_last_duel_win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, is_owner_in_duel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, avatar_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, character_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernInfoNotify, element_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCInviteReq, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCInviteReq, character_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCInviteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCInviteRsp, character_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCInviteRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernChallengeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernChallengeData, unlock_level_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernChallengeData, character_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernChallengeDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernChallengeDataNotify, tavern_challenge_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernChallengeUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTCTavernChallengeUpdateNotify, tavern_challenge_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelNotify, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelNotify, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelRewardNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelRewardNotify, level_reward_taken_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelTakeRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelTakeRewardReq, level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelTakeRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelTakeRewardRsp, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGGrowthLevelTakeRewardRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteGuestBattleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteGuestBattleReq, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteGuestBattleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteGuestBattleRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteGuestBattleRsp, confirm_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteGuestBattleRsp, punish_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteGuestBattleRsp, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteBattleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGInviteBattleNotify, confirm_end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleReq, is_agree_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleRsp, punish_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleNotify, is_agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGApplyInviteBattleNotify, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWorldPlayerGCGStateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerGCGState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerGCGState, is_reasouce_complete_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerGCGState, is_gcg_state_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGPlayerGCGState, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWorldPlayerGCGStateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWorldPlayerGCGStateRsp, player_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWorldPlayerGCGStateRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, is_win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, game_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, business_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, finished_challenge_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, win_controller_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, forbid_finish_challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleNotify, reward_item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGResourceStateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGResourceStateNotify, is_complete_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGClientSettleReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGClientSettleRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGClientSettleRsp, close_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGClientSettleRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleOptionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleOptionReq, option_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleOptionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleOptionRsp, option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGSettleOptionRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBasicDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBasicDataNotify, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBasicDataNotify, exp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBasicDataNotify, level_reward_taken_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfo, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfo, scene_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfoNotify, week_npc_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfoNotify, character_npc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGTavernNpcInfoNotify, const_npc_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeReq, level_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeReq, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeReq, level_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeRsp, level_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeRsp, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeRsp, level_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfo, npc_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfo, is_finished_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfo, unlock_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfoNotify, challenge_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfoNotify, next_refresh_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWeekChallengeInfoNotify, is_notify_npc_change_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardReq, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardReq, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardReq, level_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardRsp, level_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardRsp, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardRsp, exceeded_item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardRsp, config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGStartChallengeByCheckRewardRsp, exceeded_item_type_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelData, finished_challenge_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelData, level_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBossChallengeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBossChallengeData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBossChallengeData, unlock_level_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeNotify, unlock_boss_challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeNotify, unlock_world_challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeNotify, level_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeFinishNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeFinishNotify, finished_challenge_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeFinishNotify, level_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWorldChallengeUnlockNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGWorldChallengeUnlockNotify, unlock_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBossChallengeUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGBossChallengeUpdateNotify, boss_challenge_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeDeleteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCGLevelChallengeDeleteNotify, level_id_list_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(GCGAttackCostInfo)},
  { 7, -1, sizeof(GCGPlayCardCostInfo)},
  { 14, -1, sizeof(GCGSelectOnStageCostInfo)},
  { 21, -1, sizeof(GCGCostReviseInfo)},
  { 31, -1, sizeof(GCGMsgTokenChange)},
  { 41, -1, sizeof(GCGMsgPhaseChange)},
  { 49, -1, sizeof(GCGMsgAddCards)},
  { 59, -1, sizeof(GCGMsgRemoveCards)},
  { 68, -1, sizeof(GCGMsgMoveCard)},
  { 79, -1, sizeof(GCGMsgSelectOnStage)},
  { 87, -1, sizeof(GCGMsgSelectOnStageByEffect)},
  { 95, -1, sizeof(GCGMsgDiceRoll)},
  { 103, -1, sizeof(GCGMsgDiceReroll)},
  { 111, -1, sizeof(GCGMsgPass)},
  { 117, -1, sizeof(GCGMsgCharDie)},
  { 124, -1, sizeof(GCGMsgUseSkill)},
  { 131, -1, sizeof(GCGMsgUseSkillEnd)},
  { 138, -1, sizeof(GCGDamageDetail)},
  { 145, -1, sizeof(GCGMsgSkillResult)},
  { 159, -1, sizeof(GCGLimitsInfo)},
  { 166, -1, sizeof(GCGSkillLimitsInfo)},
  { 173, -1, sizeof(GCGCardSkillLimitsInfo)},
  { 179, -1, sizeof(GCGMsgSkillLimitsChange)},
  { 185, -1, sizeof(GCGMsgCostDice)},
  { 193, -1, sizeof(GCGMsgAddDice)},
  { 203, -1, sizeof(GCGMsgNewCard)},
  { 209, -1, sizeof(GCGMsgUpdateController)},
  { 215, -1, sizeof(GCGMsgModifyAdd)},
  { 225, -1, sizeof(GCGMsgModifyRemove)},
  { 234, -1, sizeof(GCGMsgPVEIntention)},
  { 241, -1, sizeof(GCGMsgPVEIntentionInfo)},
  { 247, -1, sizeof(GCGMsgPVEIntentionChange)},
  { 254, -1, sizeof(GCGMsgDuelDataChange)},
  { 260, -1, sizeof(GCGMsgClientPerform)},
  { 267, -1, sizeof(GCGMsgGameOver)},
  { 274, -1, sizeof(GCGMsgOpTimer)},
  { 283, -1, sizeof(GCGMsgWaitingListChange)},
  { 290, -1, sizeof(GCGMsgCardUpdate)},
  { 296, -1, sizeof(GCGMsgCostRevise)},
  { 303, -1, sizeof(GCGMsgPhaseContinue)},
  { 308, -1, sizeof(GCGMsgNoDamageSkillResult)},
  { 320, -1, sizeof(GCGMsgReactionBegin)},
  { 327, -1, sizeof(GCGMsgReactionEnd)},
  { 333, -1, sizeof(GCGMessage)},
  { 373, -1, sizeof(GCGMessagePack)},
  { 381, -1, sizeof(GCGOperationRedraw)},
  { 387, -1, sizeof(GCGOperationOnStageSelect)},
  { 394, -1, sizeof(GCGOperationReroll)},
  { 400, -1, sizeof(GCGOperationAttack)},
  { 407, -1, sizeof(GCGOperationPass)},
  { 412, -1, sizeof(GCGOperationPlayCard)},
  { 421, -1, sizeof(GCGOperationReboot)},
  { 428, -1, sizeof(GCGOperationSurrender)},
  { 433, -1, sizeof(GCGOperation)},
  { 447, -1, sizeof(GCGReplayOperationData)},
  { 454, -1, sizeof(GCGReplayControllerData)},
  { 461, -1, sizeof(GCGOperationReplay)},
  { 470, -1, sizeof(GCGToken)},
  { 477, -1, sizeof(GCGCard)},
  { 491, -1, sizeof(GCGZone)},
  { 497, -1, sizeof(GCGWaitingCharacter)},
  { 504, -1, sizeof(GCGPlayerField)},
  { 526, -1, sizeof(GCGPhase)},
  { 533, -1, sizeof(GCGControllerShowInfo)},
  { 541, -1, sizeof(GCGPVEIntention)},
  { 548, -1, sizeof(GCGDuelChallenge)},
  { 556, -1, sizeof(GCGDuel)},
  { 580, -1, sizeof(GCGOperationReq)},
  { 588, -1, sizeof(GCGOperationRsp)},
  { 595, -1, sizeof(GCGMessagePackNotify)},
  { 602, -1, sizeof(GCGAskDuelReq)},
  { 607, -1, sizeof(GCGAskDuelRsp)},
  { 614, -1, sizeof(GCGPlayerBriefData)},
  { 625, -1, sizeof(GCGGameBriefData)},
  { 635, -1, sizeof(GCGGameBriefDataNotify)},
  { 642, -1, sizeof(GCGInitFinishReq)},
  { 647, -1, sizeof(GCGInitFinishRsp)},
  { 653, -1, sizeof(GCGHeartBeatNotify)},
  { 659, -1, sizeof(GCGSkillPreviewHpInfo)},
  { 666, -1, sizeof(GCGSkillPreviewReactionInfo)},
  { 673, -1, sizeof(GCGSkillPreviewElementReactionInfo)},
  { 681, -1, sizeof(GCGSkillPreviewCardInfo)},
  { 691, -1, sizeof(GCGSkillPreviewOnstageChangeInfo)},
  { 698, -1, sizeof(GCGSkillPreviewTokenInfo)},
  { 706, -1, sizeof(GCGSkillPreviewTokenChangeInfo)},
  { 712, -1, sizeof(GCGSkillPreviewExtraInfo)},
  { 719, -1, sizeof(GCGSkillPreviewInfo)},
  { 732, -1, sizeof(GCGChangeOnstageInfo)},
  { 740, -1, sizeof(GCGSkillPreviewPlayCardInfo)},
  { 748, -1, sizeof(GCGSkillPreviewNotify)},
  { 758, -1, sizeof(GCGSkillPreviewAskReq)},
  { 763, -1, sizeof(GCGSkillPreviewAskRsp)},
  { 769, -1, sizeof(GCGChallengeUpdateNotify)},
  { 776, -1, sizeof(GCGBackToDuelReq)},
  { 782, -1, sizeof(GCGBackToDuelRsp)},
  { 788, -1, sizeof(GCGDebugReplayNotify)},
  { 794, -1, sizeof(GCGGameMaxNotify)},
  { 799, -1, sizeof(GCGGameCreateFailReasonNotify)},
  { 805, -1, sizeof(GCGDSDeckData)},
  { 818, -1, sizeof(GCGDSCardData)},
  { 829, -1, sizeof(GCGDSDataNotify)},
  { 840, -1, sizeof(GCGDSCardBackUnlockNotify)},
  { 846, -1, sizeof(GCGDSFieldUnlockNotify)},
  { 852, -1, sizeof(GCGDSCardFaceUnlockNotify)},
  { 859, -1, sizeof(GCGDSCardNumChangeNotify)},
  { 866, -1, sizeof(GCGDSChangeCardFaceReq)},
  { 873, -1, sizeof(GCGDSChangeCardFaceRsp)},
  { 881, -1, sizeof(GCGDSChangeCardBackReq)},
  { 888, -1, sizeof(GCGDSChangeCardBackRsp)},
  { 896, -1, sizeof(GCGDSChangeFieldReq)},
  { 903, -1, sizeof(GCGDSChangeFieldRsp)},
  { 911, -1, sizeof(GCGDSChangeDeckNameReq)},
  { 918, -1, sizeof(GCGDSChangeDeckNameRsp)},
  { 926, -1, sizeof(GCGDSDeckSaveReq)},
  { 935, -1, sizeof(GCGDSDeckSaveRsp)},
  { 944, -1, sizeof(GCGDSChangeCurDeckReq)},
  { 950, -1, sizeof(GCGDSChangeCurDeckRsp)},
  { 957, -1, sizeof(GCGDSCurDeckChangeNotify)},
  { 963, -1, sizeof(GCGDSDeleteDeckReq)},
  { 969, -1, sizeof(GCGDSDeleteDeckRsp)},
  { 976, -1, sizeof(GCGDSDeckUnlockNotify)},
  { 982, -1, sizeof(GCGDSCardProficiencyNotify)},
  { 989, -1, sizeof(GCGDSDeckUpdateNotify)},
  { 996, -1, sizeof(GCGDSCardFaceUpdateNotify)},
  { 1003, -1, sizeof(GCGDSTakeCardProficiencyRewardReq)},
  { 1010, -1, sizeof(GCGDSTakeCardProficiencyRewardRsp)},
  { 1018, -1, sizeof(GCGDSBanCardNotify)},
  { 1024, -1, sizeof(GCGTCTavernInfoNotify)},
  { 1036, -1, sizeof(GCGTCInviteReq)},
  { 1043, -1, sizeof(GCGTCInviteRsp)},
  { 1050, -1, sizeof(GCGTCTavernChallengeData)},
  { 1057, -1, sizeof(GCGTCTavernChallengeDataNotify)},
  { 1063, -1, sizeof(GCGTCTavernChallengeUpdateNotify)},
  { 1069, -1, sizeof(GCGGrowthLevelNotify)},
  { 1076, -1, sizeof(GCGGrowthLevelRewardNotify)},
  { 1082, -1, sizeof(GCGGrowthLevelTakeRewardReq)},
  { 1088, -1, sizeof(GCGGrowthLevelTakeRewardRsp)},
  { 1095, -1, sizeof(GCGInviteGuestBattleReq)},
  { 1101, -1, sizeof(GCGInviteGuestBattleRsp)},
  { 1110, -1, sizeof(GCGInviteBattleNotify)},
  { 1116, -1, sizeof(GCGApplyInviteBattleReq)},
  { 1122, -1, sizeof(GCGApplyInviteBattleRsp)},
  { 1129, -1, sizeof(GCGApplyInviteBattleNotify)},
  { 1136, -1, sizeof(GCGWorldPlayerGCGStateReq)},
  { 1141, -1, sizeof(GCGPlayerGCGState)},
  { 1149, -1, sizeof(GCGWorldPlayerGCGStateRsp)},
  { 1156, -1, sizeof(GCGSettleNotify)},
  { 1169, -1, sizeof(GCGResourceStateNotify)},
  { 1175, -1, sizeof(GCGClientSettleReq)},
  { 1180, -1, sizeof(GCGClientSettleRsp)},
  { 1187, -1, sizeof(GCGSettleOptionReq)},
  { 1193, -1, sizeof(GCGSettleOptionRsp)},
  { 1200, -1, sizeof(GCGBasicDataNotify)},
  { 1208, -1, sizeof(GCGTavernNpcInfo)},
  { 1216, -1, sizeof(GCGTavernNpcInfoNotify)},
  { 1224, -1, sizeof(GCGStartChallengeReq)},
  { 1232, -1, sizeof(GCGStartChallengeRsp)},
  { 1241, -1, sizeof(GCGWeekChallengeInfo)},
  { 1249, -1, sizeof(GCGWeekChallengeInfoNotify)},
  { 1257, -1, sizeof(GCGStartChallengeByCheckRewardReq)},
  { 1265, -1, sizeof(GCGStartChallengeByCheckRewardRsp)},
  { 1276, -1, sizeof(GCGLevelData)},
  { 1283, -1, sizeof(GCGBossChallengeData)},
  { 1290, -1, sizeof(GCGLevelChallengeNotify)},
  { 1298, -1, sizeof(GCGLevelChallengeFinishNotify)},
  { 1305, -1, sizeof(GCGWorldChallengeUnlockNotify)},
  { 1311, -1, sizeof(GCGBossChallengeUpdateNotify)},
  { 1317, -1, sizeof(GCGLevelChallengeDeleteNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGAttackCostInfo_CostMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGAttackCostInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayCardCostInfo_CostMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayCardCostInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSelectOnStageCostInfo_CostMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSelectOnStageCostInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGCostReviseInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgTokenChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPhaseChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgAddCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgRemoveCards_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgMoveCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgSelectOnStage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgSelectOnStageByEffect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgDiceRoll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgDiceReroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgCharDie_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgUseSkill_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgUseSkillEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDamageDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgSkillResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGLimitsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillLimitsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGCardSkillLimitsInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgSkillLimitsChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgCostDice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgAddDice_BeforeDiceMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgAddDice_DiceMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgAddDice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgNewCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgUpdateController_AllowControllerMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgUpdateController_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgModifyAdd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgModifyRemove_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPVEIntention_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPVEIntentionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPVEIntentionChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgDuelDataChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgClientPerform_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgGameOver_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgOpTimer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgWaitingListChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgCardUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgCostRevise_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgPhaseContinue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgNoDamageSkillResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgReactionBegin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMsgReactionEnd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMessagePack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationRedraw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationOnStageSelect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationReroll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationAttack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationPass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationPlayCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationReboot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationSurrender_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGReplayOperationData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGReplayControllerData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationReplay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGToken_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGCard_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGZone_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGWaitingCharacter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayerField_ModifyZoneMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayerField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPhase_AllowControllerMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPhase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGControllerShowInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPVEIntention_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDuelChallenge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDuel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGOperationRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGMessagePackNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGAskDuelReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGAskDuelRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayerBriefData_CardFaceMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayerBriefData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGameBriefData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGameBriefDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGInitFinishReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGInitFinishRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGHeartBeatNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewHpInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewReactionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewElementReactionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewCardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewOnstageChangeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewTokenInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewTokenChangeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewExtraInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGChangeOnstageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewPlayCardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewAskReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSkillPreviewAskRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGChallengeUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGBackToDuelReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGBackToDuelRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDebugReplayNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGameMaxNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGameCreateFailReasonNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDeckData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSCardData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSCardBackUnlockNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSFieldUnlockNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSCardFaceUnlockNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSCardNumChangeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeCardFaceReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeCardFaceRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeCardBackReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeCardBackRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeFieldReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeFieldRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeDeckNameReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeDeckNameRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDeckSaveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDeckSaveRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeCurDeckReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSChangeCurDeckRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSCurDeckChangeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDeleteDeckReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDeleteDeckRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDeckUnlockNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSCardProficiencyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSDeckUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSCardFaceUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSTakeCardProficiencyRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSTakeCardProficiencyRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGDSBanCardNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTCTavernInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTCInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTCInviteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTCTavernChallengeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTCTavernChallengeDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTCTavernChallengeUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGrowthLevelNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGrowthLevelRewardNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGrowthLevelTakeRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGGrowthLevelTakeRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGInviteGuestBattleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGInviteGuestBattleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGInviteBattleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGApplyInviteBattleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGApplyInviteBattleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGApplyInviteBattleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGWorldPlayerGCGStateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGPlayerGCGState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGWorldPlayerGCGStateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGResourceStateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGClientSettleReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGClientSettleRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSettleOptionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGSettleOptionRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGBasicDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTavernNpcInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGTavernNpcInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGStartChallengeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGStartChallengeRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGWeekChallengeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGWeekChallengeInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGStartChallengeByCheckRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGStartChallengeByCheckRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGLevelData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGBossChallengeData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGLevelChallengeNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGLevelChallengeFinishNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGWorldChallengeUnlockNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGBossChallengeUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GCGLevelChallengeDeleteNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_gcg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[0].reflection = GCGAttackCostInfo::GCGAttackCostInfo_CostMapEntry::CreateReflection(file_level_metadata[0].descriptor, _GCGAttackCostInfo_CostMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[2].reflection = GCGPlayCardCostInfo::GCGPlayCardCostInfo_CostMapEntry::CreateReflection(file_level_metadata[2].descriptor, _GCGPlayCardCostInfo_CostMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[4].reflection = GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo_CostMapEntry::CreateReflection(file_level_metadata[4].descriptor, _GCGSelectOnStageCostInfo_CostMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[8].reflection = GCGMsgPhaseChange::GCGMsgPhaseChange_AllowControllerMapEntry::CreateReflection(file_level_metadata[8].descriptor, _GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[26].reflection = GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry::CreateReflection(file_level_metadata[26].descriptor, _GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[29].reflection = GCGMsgAddDice::GCGMsgAddDice_BeforeDiceMapEntry::CreateReflection(file_level_metadata[29].descriptor, _GCGMsgAddDice_BeforeDiceMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[30].reflection = GCGMsgAddDice::GCGMsgAddDice_DiceMapEntry::CreateReflection(file_level_metadata[30].descriptor, _GCGMsgAddDice_DiceMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[33].reflection = GCGMsgUpdateController::GCGMsgUpdateController_AllowControllerMapEntry::CreateReflection(file_level_metadata[33].descriptor, _GCGMsgUpdateController_AllowControllerMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[38].reflection = GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo_IntentionMapEntry::CreateReflection(file_level_metadata[38].descriptor, _GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[70].reflection = GCGPlayerField::GCGPlayerField_ModifyZoneMapEntry::CreateReflection(file_level_metadata[70].descriptor, _GCGPlayerField_ModifyZoneMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[72].reflection = GCGPhase::GCGPhase_AllowControllerMapEntry::CreateReflection(file_level_metadata[72].descriptor, _GCGPhase_AllowControllerMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[83].reflection = GCGPlayerBriefData::GCGPlayerBriefData_CardFaceMapEntry::CreateReflection(file_level_metadata[83].descriptor, _GCGPlayerBriefData_CardFaceMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[98].reflection = GCGSkillPreviewInfo::GCGSkillPreviewInfo_CardTokenChangeMapEntry::CreateReflection(file_level_metadata[98].descriptor, _GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[99].reflection = GCGSkillPreviewInfo::GCGSkillPreviewInfo_ReactionInfoMapEntry::CreateReflection(file_level_metadata[99].descriptor, _GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[100].reflection = GCGSkillPreviewInfo::GCGSkillPreviewInfo_HpInfoMapEntry::CreateReflection(file_level_metadata[100].descriptor, _GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 183);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  ::proto::protobuf_cmd_2fcmd_5fgcg_5fcommon_2eproto::InitDefaults();
  _GCGAttackCostInfo_CostMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGAttackCostInfo_CostMapEntry_default_instance_);_GCGAttackCostInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGAttackCostInfo_default_instance_);_GCGPlayCardCostInfo_CostMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayCardCostInfo_CostMapEntry_default_instance_);_GCGPlayCardCostInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayCardCostInfo_default_instance_);_GCGSelectOnStageCostInfo_CostMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSelectOnStageCostInfo_CostMapEntry_default_instance_);_GCGSelectOnStageCostInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSelectOnStageCostInfo_default_instance_);_GCGCostReviseInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGCostReviseInfo_default_instance_);_GCGMsgTokenChange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgTokenChange_default_instance_);_GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_);_GCGMsgPhaseChange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPhaseChange_default_instance_);_GCGMsgAddCards_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgAddCards_default_instance_);_GCGMsgRemoveCards_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgRemoveCards_default_instance_);_GCGMsgMoveCard_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgMoveCard_default_instance_);_GCGMsgSelectOnStage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgSelectOnStage_default_instance_);_GCGMsgSelectOnStageByEffect_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgSelectOnStageByEffect_default_instance_);_GCGMsgDiceRoll_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgDiceRoll_default_instance_);_GCGMsgDiceReroll_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgDiceReroll_default_instance_);_GCGMsgPass_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPass_default_instance_);_GCGMsgCharDie_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgCharDie_default_instance_);_GCGMsgUseSkill_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgUseSkill_default_instance_);_GCGMsgUseSkillEnd_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgUseSkillEnd_default_instance_);_GCGDamageDetail_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDamageDetail_default_instance_);_GCGMsgSkillResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgSkillResult_default_instance_);_GCGLimitsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGLimitsInfo_default_instance_);_GCGSkillLimitsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillLimitsInfo_default_instance_);_GCGCardSkillLimitsInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGCardSkillLimitsInfo_default_instance_);_GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_);_GCGMsgSkillLimitsChange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgSkillLimitsChange_default_instance_);_GCGMsgCostDice_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgCostDice_default_instance_);_GCGMsgAddDice_BeforeDiceMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgAddDice_BeforeDiceMapEntry_default_instance_);_GCGMsgAddDice_DiceMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgAddDice_DiceMapEntry_default_instance_);_GCGMsgAddDice_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgAddDice_default_instance_);_GCGMsgNewCard_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgNewCard_default_instance_);_GCGMsgUpdateController_AllowControllerMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgUpdateController_AllowControllerMapEntry_default_instance_);_GCGMsgUpdateController_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgUpdateController_default_instance_);_GCGMsgModifyAdd_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgModifyAdd_default_instance_);_GCGMsgModifyRemove_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgModifyRemove_default_instance_);_GCGMsgPVEIntention_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPVEIntention_default_instance_);_GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_);_GCGMsgPVEIntentionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPVEIntentionInfo_default_instance_);_GCGMsgPVEIntentionChange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPVEIntentionChange_default_instance_);_GCGMsgDuelDataChange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgDuelDataChange_default_instance_);_GCGMsgClientPerform_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgClientPerform_default_instance_);_GCGMsgGameOver_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgGameOver_default_instance_);_GCGMsgOpTimer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgOpTimer_default_instance_);_GCGMsgWaitingListChange_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgWaitingListChange_default_instance_);_GCGMsgCardUpdate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgCardUpdate_default_instance_);_GCGMsgCostRevise_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgCostRevise_default_instance_);_GCGMsgPhaseContinue_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgPhaseContinue_default_instance_);_GCGMsgNoDamageSkillResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgNoDamageSkillResult_default_instance_);_GCGMsgReactionBegin_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgReactionBegin_default_instance_);_GCGMsgReactionEnd_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMsgReactionEnd_default_instance_);_GCGMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMessage_default_instance_);_GCGMessagePack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMessagePack_default_instance_);_GCGOperationRedraw_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationRedraw_default_instance_);_GCGOperationOnStageSelect_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationOnStageSelect_default_instance_);_GCGOperationReroll_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationReroll_default_instance_);_GCGOperationAttack_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationAttack_default_instance_);_GCGOperationPass_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationPass_default_instance_);_GCGOperationPlayCard_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationPlayCard_default_instance_);_GCGOperationReboot_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationReboot_default_instance_);_GCGOperationSurrender_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationSurrender_default_instance_);_GCGOperation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperation_default_instance_);_GCGReplayOperationData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGReplayOperationData_default_instance_);_GCGReplayControllerData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGReplayControllerData_default_instance_);_GCGOperationReplay_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationReplay_default_instance_);_GCGToken_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGToken_default_instance_);_GCGCard_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGCard_default_instance_);_GCGZone_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGZone_default_instance_);_GCGWaitingCharacter_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGWaitingCharacter_default_instance_);_GCGPlayerField_ModifyZoneMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayerField_ModifyZoneMapEntry_default_instance_);_GCGPlayerField_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayerField_default_instance_);_GCGPhase_AllowControllerMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPhase_AllowControllerMapEntry_default_instance_);_GCGPhase_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPhase_default_instance_);_GCGControllerShowInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGControllerShowInfo_default_instance_);_GCGPVEIntention_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPVEIntention_default_instance_);_GCGDuelChallenge_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDuelChallenge_default_instance_);_GCGDuel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDuel_default_instance_);_GCGOperationReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationReq_default_instance_);_GCGOperationRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGOperationRsp_default_instance_);_GCGMessagePackNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGMessagePackNotify_default_instance_);_GCGAskDuelReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGAskDuelReq_default_instance_);_GCGAskDuelRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGAskDuelRsp_default_instance_);_GCGPlayerBriefData_CardFaceMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayerBriefData_CardFaceMapEntry_default_instance_);_GCGPlayerBriefData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayerBriefData_default_instance_);_GCGGameBriefData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGameBriefData_default_instance_);_GCGGameBriefDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGameBriefDataNotify_default_instance_);_GCGInitFinishReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGInitFinishReq_default_instance_);_GCGInitFinishRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGInitFinishRsp_default_instance_);_GCGHeartBeatNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGHeartBeatNotify_default_instance_);_GCGSkillPreviewHpInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewHpInfo_default_instance_);_GCGSkillPreviewReactionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewReactionInfo_default_instance_);_GCGSkillPreviewElementReactionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewElementReactionInfo_default_instance_);_GCGSkillPreviewCardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewCardInfo_default_instance_);_GCGSkillPreviewOnstageChangeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewOnstageChangeInfo_default_instance_);_GCGSkillPreviewTokenInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewTokenInfo_default_instance_);_GCGSkillPreviewTokenChangeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewTokenChangeInfo_default_instance_);_GCGSkillPreviewExtraInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewExtraInfo_default_instance_);_GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_);_GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_);_GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_);_GCGSkillPreviewInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewInfo_default_instance_);_GCGChangeOnstageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGChangeOnstageInfo_default_instance_);_GCGSkillPreviewPlayCardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewPlayCardInfo_default_instance_);_GCGSkillPreviewNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewNotify_default_instance_);_GCGSkillPreviewAskReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewAskReq_default_instance_);_GCGSkillPreviewAskRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSkillPreviewAskRsp_default_instance_);_GCGChallengeUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGChallengeUpdateNotify_default_instance_);_GCGBackToDuelReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGBackToDuelReq_default_instance_);_GCGBackToDuelRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGBackToDuelRsp_default_instance_);_GCGDebugReplayNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDebugReplayNotify_default_instance_);_GCGGameMaxNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGameMaxNotify_default_instance_);_GCGGameCreateFailReasonNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGameCreateFailReasonNotify_default_instance_);_GCGDSDeckData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDeckData_default_instance_);_GCGDSCardData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSCardData_default_instance_);_GCGDSDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDataNotify_default_instance_);_GCGDSCardBackUnlockNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSCardBackUnlockNotify_default_instance_);_GCGDSFieldUnlockNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSFieldUnlockNotify_default_instance_);_GCGDSCardFaceUnlockNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSCardFaceUnlockNotify_default_instance_);_GCGDSCardNumChangeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSCardNumChangeNotify_default_instance_);_GCGDSChangeCardFaceReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeCardFaceReq_default_instance_);_GCGDSChangeCardFaceRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeCardFaceRsp_default_instance_);_GCGDSChangeCardBackReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeCardBackReq_default_instance_);_GCGDSChangeCardBackRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeCardBackRsp_default_instance_);_GCGDSChangeFieldReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeFieldReq_default_instance_);_GCGDSChangeFieldRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeFieldRsp_default_instance_);_GCGDSChangeDeckNameReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeDeckNameReq_default_instance_);_GCGDSChangeDeckNameRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeDeckNameRsp_default_instance_);_GCGDSDeckSaveReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDeckSaveReq_default_instance_);_GCGDSDeckSaveRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDeckSaveRsp_default_instance_);_GCGDSChangeCurDeckReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeCurDeckReq_default_instance_);_GCGDSChangeCurDeckRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSChangeCurDeckRsp_default_instance_);_GCGDSCurDeckChangeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSCurDeckChangeNotify_default_instance_);_GCGDSDeleteDeckReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDeleteDeckReq_default_instance_);_GCGDSDeleteDeckRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDeleteDeckRsp_default_instance_);_GCGDSDeckUnlockNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDeckUnlockNotify_default_instance_);_GCGDSCardProficiencyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSCardProficiencyNotify_default_instance_);_GCGDSDeckUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSDeckUpdateNotify_default_instance_);_GCGDSCardFaceUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSCardFaceUpdateNotify_default_instance_);_GCGDSTakeCardProficiencyRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSTakeCardProficiencyRewardReq_default_instance_);_GCGDSTakeCardProficiencyRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSTakeCardProficiencyRewardRsp_default_instance_);_GCGDSBanCardNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGDSBanCardNotify_default_instance_);_GCGTCTavernInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTCTavernInfoNotify_default_instance_);_GCGTCInviteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTCInviteReq_default_instance_);_GCGTCInviteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTCInviteRsp_default_instance_);_GCGTCTavernChallengeData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTCTavernChallengeData_default_instance_);_GCGTCTavernChallengeDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTCTavernChallengeDataNotify_default_instance_);_GCGTCTavernChallengeUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTCTavernChallengeUpdateNotify_default_instance_);_GCGGrowthLevelNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGrowthLevelNotify_default_instance_);_GCGGrowthLevelRewardNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGrowthLevelRewardNotify_default_instance_);_GCGGrowthLevelTakeRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGrowthLevelTakeRewardReq_default_instance_);_GCGGrowthLevelTakeRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGGrowthLevelTakeRewardRsp_default_instance_);_GCGInviteGuestBattleReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGInviteGuestBattleReq_default_instance_);_GCGInviteGuestBattleRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGInviteGuestBattleRsp_default_instance_);_GCGInviteBattleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGInviteBattleNotify_default_instance_);_GCGApplyInviteBattleReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGApplyInviteBattleReq_default_instance_);_GCGApplyInviteBattleRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGApplyInviteBattleRsp_default_instance_);_GCGApplyInviteBattleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGApplyInviteBattleNotify_default_instance_);_GCGWorldPlayerGCGStateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGWorldPlayerGCGStateReq_default_instance_);_GCGPlayerGCGState_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGPlayerGCGState_default_instance_);_GCGWorldPlayerGCGStateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGWorldPlayerGCGStateRsp_default_instance_);_GCGSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSettleNotify_default_instance_);_GCGResourceStateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGResourceStateNotify_default_instance_);_GCGClientSettleReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGClientSettleReq_default_instance_);_GCGClientSettleRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGClientSettleRsp_default_instance_);_GCGSettleOptionReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSettleOptionReq_default_instance_);_GCGSettleOptionRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGSettleOptionRsp_default_instance_);_GCGBasicDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGBasicDataNotify_default_instance_);_GCGTavernNpcInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTavernNpcInfo_default_instance_);_GCGTavernNpcInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGTavernNpcInfoNotify_default_instance_);_GCGStartChallengeReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGStartChallengeReq_default_instance_);_GCGStartChallengeRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGStartChallengeRsp_default_instance_);_GCGWeekChallengeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGWeekChallengeInfo_default_instance_);_GCGWeekChallengeInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGWeekChallengeInfoNotify_default_instance_);_GCGStartChallengeByCheckRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGStartChallengeByCheckRewardReq_default_instance_);_GCGStartChallengeByCheckRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGStartChallengeByCheckRewardRsp_default_instance_);_GCGLevelData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGLevelData_default_instance_);_GCGBossChallengeData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGBossChallengeData_default_instance_);_GCGLevelChallengeNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGLevelChallengeNotify_default_instance_);_GCGLevelChallengeFinishNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGLevelChallengeFinishNotify_default_instance_);_GCGWorldChallengeUnlockNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGWorldChallengeUnlockNotify_default_instance_);_GCGBossChallengeUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGBossChallengeUpdateNotify_default_instance_);_GCGLevelChallengeDeleteNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GCGLevelChallengeDeleteNotify_default_instance_);_GCGAttackCostInfo_CostMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGAttackCostInfo_CostMapEntry_default_instance_._instance.get_mutable());
  _GCGAttackCostInfo_CostMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGPlayCardCostInfo_CostMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGPlayCardCostInfo_CostMapEntry_default_instance_._instance.get_mutable());
  _GCGPlayCardCostInfo_CostMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGSelectOnStageCostInfo_CostMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGSelectOnStageCostInfo_CostMapEntry_default_instance_._instance.get_mutable());
  _GCGSelectOnStageCostInfo_CostMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_._instance.get_mutable());
  _GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_._instance.get_mutable());
  _GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGMsgAddDice_BeforeDiceMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGMsgAddDice_BeforeDiceMapEntry_default_instance_._instance.get_mutable());
  _GCGMsgAddDice_BeforeDiceMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGMsgAddDice_DiceMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGMsgAddDice_DiceMapEntry_default_instance_._instance.get_mutable());
  _GCGMsgAddDice_DiceMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGMsgNewCard_default_instance_._instance.get_mutable()->card_ = const_cast< ::proto::GCGCard*>(
      ::proto::GCGCard::internal_default_instance());
  _GCGMsgUpdateController_AllowControllerMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGMsgUpdateController_AllowControllerMapEntry_default_instance_._instance.get_mutable());
  _GCGMsgUpdateController_AllowControllerMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_._instance.get_mutable());
  _GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGMsgCardUpdate_default_instance_._instance.get_mutable()->card_ = const_cast< ::proto::GCGCard*>(
      ::proto::GCGCard::internal_default_instance());
  _GCGMsgCostRevise_default_instance_._instance.get_mutable()->cost_revise_ = const_cast< ::proto::GCGCostReviseInfo*>(
      ::proto::GCGCostReviseInfo::internal_default_instance());
  _GCGMessage_default_instance_.token_change_ = const_cast< ::proto::GCGMsgTokenChange*>(
      ::proto::GCGMsgTokenChange::internal_default_instance());
  _GCGMessage_default_instance_.phase_change_ = const_cast< ::proto::GCGMsgPhaseChange*>(
      ::proto::GCGMsgPhaseChange::internal_default_instance());
  _GCGMessage_default_instance_.add_cards_ = const_cast< ::proto::GCGMsgAddCards*>(
      ::proto::GCGMsgAddCards::internal_default_instance());
  _GCGMessage_default_instance_.remove_cards_ = const_cast< ::proto::GCGMsgRemoveCards*>(
      ::proto::GCGMsgRemoveCards::internal_default_instance());
  _GCGMessage_default_instance_.select_on_stage_ = const_cast< ::proto::GCGMsgSelectOnStage*>(
      ::proto::GCGMsgSelectOnStage::internal_default_instance());
  _GCGMessage_default_instance_.dice_roll_ = const_cast< ::proto::GCGMsgDiceRoll*>(
      ::proto::GCGMsgDiceRoll::internal_default_instance());
  _GCGMessage_default_instance_.dice_reroll_ = const_cast< ::proto::GCGMsgDiceReroll*>(
      ::proto::GCGMsgDiceReroll::internal_default_instance());
  _GCGMessage_default_instance_.pass_ = const_cast< ::proto::GCGMsgPass*>(
      ::proto::GCGMsgPass::internal_default_instance());
  _GCGMessage_default_instance_.char_die_ = const_cast< ::proto::GCGMsgCharDie*>(
      ::proto::GCGMsgCharDie::internal_default_instance());
  _GCGMessage_default_instance_.skill_result_ = const_cast< ::proto::GCGMsgSkillResult*>(
      ::proto::GCGMsgSkillResult::internal_default_instance());
  _GCGMessage_default_instance_.cost_dice_ = const_cast< ::proto::GCGMsgCostDice*>(
      ::proto::GCGMsgCostDice::internal_default_instance());
  _GCGMessage_default_instance_.add_dice_ = const_cast< ::proto::GCGMsgAddDice*>(
      ::proto::GCGMsgAddDice::internal_default_instance());
  _GCGMessage_default_instance_.move_card_ = const_cast< ::proto::GCGMsgMoveCard*>(
      ::proto::GCGMsgMoveCard::internal_default_instance());
  _GCGMessage_default_instance_.use_skill_ = const_cast< ::proto::GCGMsgUseSkill*>(
      ::proto::GCGMsgUseSkill::internal_default_instance());
  _GCGMessage_default_instance_.new_card_ = const_cast< ::proto::GCGMsgNewCard*>(
      ::proto::GCGMsgNewCard::internal_default_instance());
  _GCGMessage_default_instance_.update_controller_ = const_cast< ::proto::GCGMsgUpdateController*>(
      ::proto::GCGMsgUpdateController::internal_default_instance());
  _GCGMessage_default_instance_.modify_add_ = const_cast< ::proto::GCGMsgModifyAdd*>(
      ::proto::GCGMsgModifyAdd::internal_default_instance());
  _GCGMessage_default_instance_.modify_remove_ = const_cast< ::proto::GCGMsgModifyRemove*>(
      ::proto::GCGMsgModifyRemove::internal_default_instance());
  _GCGMessage_default_instance_.use_skill_end_ = const_cast< ::proto::GCGMsgUseSkillEnd*>(
      ::proto::GCGMsgUseSkillEnd::internal_default_instance());
  _GCGMessage_default_instance_.duel_data_change_ = const_cast< ::proto::GCGMsgDuelDataChange*>(
      ::proto::GCGMsgDuelDataChange::internal_default_instance());
  _GCGMessage_default_instance_.client_perform_ = const_cast< ::proto::GCGMsgClientPerform*>(
      ::proto::GCGMsgClientPerform::internal_default_instance());
  _GCGMessage_default_instance_.game_over_ = const_cast< ::proto::GCGMsgGameOver*>(
      ::proto::GCGMsgGameOver::internal_default_instance());
  _GCGMessage_default_instance_.op_timer_ = const_cast< ::proto::GCGMsgOpTimer*>(
      ::proto::GCGMsgOpTimer::internal_default_instance());
  _GCGMessage_default_instance_.waiting_list_change_ = const_cast< ::proto::GCGMsgWaitingListChange*>(
      ::proto::GCGMsgWaitingListChange::internal_default_instance());
  _GCGMessage_default_instance_.card_update_ = const_cast< ::proto::GCGMsgCardUpdate*>(
      ::proto::GCGMsgCardUpdate::internal_default_instance());
  _GCGMessage_default_instance_.select_on_stage_by_effect_ = const_cast< ::proto::GCGMsgSelectOnStageByEffect*>(
      ::proto::GCGMsgSelectOnStageByEffect::internal_default_instance());
  _GCGMessage_default_instance_.cost_revise_ = const_cast< ::proto::GCGMsgCostRevise*>(
      ::proto::GCGMsgCostRevise::internal_default_instance());
  _GCGMessage_default_instance_.phase_continue_ = const_cast< ::proto::GCGMsgPhaseContinue*>(
      ::proto::GCGMsgPhaseContinue::internal_default_instance());
  _GCGMessage_default_instance_.pve_intention_info_ = const_cast< ::proto::GCGMsgPVEIntentionInfo*>(
      ::proto::GCGMsgPVEIntentionInfo::internal_default_instance());
  _GCGMessage_default_instance_.pve_intention_change_ = const_cast< ::proto::GCGMsgPVEIntentionChange*>(
      ::proto::GCGMsgPVEIntentionChange::internal_default_instance());
  _GCGMessage_default_instance_.skill_limits_change_ = const_cast< ::proto::GCGMsgSkillLimitsChange*>(
      ::proto::GCGMsgSkillLimitsChange::internal_default_instance());
  _GCGMessage_default_instance_.no_damage_skill_result_ = const_cast< ::proto::GCGMsgNoDamageSkillResult*>(
      ::proto::GCGMsgNoDamageSkillResult::internal_default_instance());
  _GCGMessage_default_instance_.reaction_begin_ = const_cast< ::proto::GCGMsgReactionBegin*>(
      ::proto::GCGMsgReactionBegin::internal_default_instance());
  _GCGMessage_default_instance_.reaction_end_ = const_cast< ::proto::GCGMsgReactionEnd*>(
      ::proto::GCGMsgReactionEnd::internal_default_instance());
  _GCGOperation_default_instance_.op_redraw_ = const_cast< ::proto::GCGOperationRedraw*>(
      ::proto::GCGOperationRedraw::internal_default_instance());
  _GCGOperation_default_instance_.op_select_on_stage_ = const_cast< ::proto::GCGOperationOnStageSelect*>(
      ::proto::GCGOperationOnStageSelect::internal_default_instance());
  _GCGOperation_default_instance_.op_reroll_ = const_cast< ::proto::GCGOperationReroll*>(
      ::proto::GCGOperationReroll::internal_default_instance());
  _GCGOperation_default_instance_.op_attack_ = const_cast< ::proto::GCGOperationAttack*>(
      ::proto::GCGOperationAttack::internal_default_instance());
  _GCGOperation_default_instance_.op_pass_ = const_cast< ::proto::GCGOperationPass*>(
      ::proto::GCGOperationPass::internal_default_instance());
  _GCGOperation_default_instance_.op_play_card_ = const_cast< ::proto::GCGOperationPlayCard*>(
      ::proto::GCGOperationPlayCard::internal_default_instance());
  _GCGOperation_default_instance_.op_reboot_ = const_cast< ::proto::GCGOperationReboot*>(
      ::proto::GCGOperationReboot::internal_default_instance());
  _GCGOperation_default_instance_.op_surrender_ = const_cast< ::proto::GCGOperationSurrender*>(
      ::proto::GCGOperationSurrender::internal_default_instance());
  _GCGReplayOperationData_default_instance_._instance.get_mutable()->op_ = const_cast< ::proto::GCGOperation*>(
      ::proto::GCGOperation::internal_default_instance());
  _GCGPlayerField_ModifyZoneMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGPlayerField_ModifyZoneMapEntry_default_instance_._instance.get_mutable());
  _GCGPlayerField_ModifyZoneMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGPlayerField_default_instance_._instance.get_mutable()->summon_zone_ = const_cast< ::proto::GCGZone*>(
      ::proto::GCGZone::internal_default_instance());
  _GCGPlayerField_default_instance_._instance.get_mutable()->on_stage_zone_ = const_cast< ::proto::GCGZone*>(
      ::proto::GCGZone::internal_default_instance());
  _GCGPlayerField_default_instance_._instance.get_mutable()->character_zone_ = const_cast< ::proto::GCGZone*>(
      ::proto::GCGZone::internal_default_instance());
  _GCGPlayerField_default_instance_._instance.get_mutable()->assist_zone_ = const_cast< ::proto::GCGZone*>(
      ::proto::GCGZone::internal_default_instance());
  _GCGPlayerField_default_instance_._instance.get_mutable()->hand_zone_ = const_cast< ::proto::GCGZone*>(
      ::proto::GCGZone::internal_default_instance());
  _GCGPhase_AllowControllerMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGPhase_AllowControllerMapEntry_default_instance_._instance.get_mutable());
  _GCGPhase_AllowControllerMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGControllerShowInfo_default_instance_._instance.get_mutable()->profile_picture_ = const_cast< ::proto::ProfilePicture*>(
      ::proto::ProfilePicture::internal_default_instance());
  _GCGDuel_default_instance_._instance.get_mutable()->cost_revise_ = const_cast< ::proto::GCGCostReviseInfo*>(
      ::proto::GCGCostReviseInfo::internal_default_instance());
  _GCGDuel_default_instance_._instance.get_mutable()->phase_ = const_cast< ::proto::GCGPhase*>(
      ::proto::GCGPhase::internal_default_instance());
  _GCGOperationReq_default_instance_._instance.get_mutable()->op_ = const_cast< ::proto::GCGOperation*>(
      ::proto::GCGOperation::internal_default_instance());
  _GCGAskDuelRsp_default_instance_._instance.get_mutable()->duel_ = const_cast< ::proto::GCGDuel*>(
      ::proto::GCGDuel::internal_default_instance());
  _GCGPlayerBriefData_CardFaceMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGPlayerBriefData_CardFaceMapEntry_default_instance_._instance.get_mutable());
  _GCGPlayerBriefData_CardFaceMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGPlayerBriefData_default_instance_._instance.get_mutable()->profile_picture_ = const_cast< ::proto::ProfilePicture*>(
      ::proto::ProfilePicture::internal_default_instance());
  _GCGGameBriefDataNotify_default_instance_._instance.get_mutable()->gcg_brief_data_ = const_cast< ::proto::GCGGameBriefData*>(
      ::proto::GCGGameBriefData::internal_default_instance());
  _GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_._instance.get_mutable());
  _GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_._instance.get_mutable());
  _GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_._instance.get_mutable());
  _GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GCGSkillPreviewInfo_default_instance_._instance.get_mutable()->extra_info_ = const_cast< ::proto::GCGSkillPreviewExtraInfo*>(
      ::proto::GCGSkillPreviewExtraInfo::internal_default_instance());
  _GCGChangeOnstageInfo_default_instance_._instance.get_mutable()->change_onstage_preview_info_ = const_cast< ::proto::GCGSkillPreviewInfo*>(
      ::proto::GCGSkillPreviewInfo::internal_default_instance());
  _GCGSkillPreviewPlayCardInfo_default_instance_._instance.get_mutable()->play_card_info_ = const_cast< ::proto::GCGSkillPreviewInfo*>(
      ::proto::GCGSkillPreviewInfo::internal_default_instance());
  _GCGChallengeUpdateNotify_default_instance_._instance.get_mutable()->challenge_ = const_cast< ::proto::GCGDuelChallenge*>(
      ::proto::GCGDuelChallenge::internal_default_instance());
  _GCGTCTavernChallengeUpdateNotify_default_instance_._instance.get_mutable()->tavern_challenge_ = const_cast< ::proto::GCGTCTavernChallengeData*>(
      ::proto::GCGTCTavernChallengeData::internal_default_instance());
  _GCGTavernNpcInfoNotify_default_instance_._instance.get_mutable()->character_npc_ = const_cast< ::proto::GCGTavernNpcInfo*>(
      ::proto::GCGTavernNpcInfo::internal_default_instance());
  _GCGBossChallengeUpdateNotify_default_instance_._instance.get_mutable()->boss_challenge_ = const_cast< ::proto::GCGBossChallengeData*>(
      ::proto::GCGBossChallengeData::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\021cmd/cmd_gcg.proto\022\005proto\032\014define.proto"
      "\032\030cmd/cmd_gcg_common.proto\"\216\001\n\021GCGAttack"
      "CostInfo\022\020\n\010skill_id\030\010 \001(\r\0227\n\010cost_map\030\003"
      " \003(\0132%.proto.GCGAttackCostInfo.CostMapEn"
      "try\032.\n\014CostMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005valu"
      "e\030\002 \001(\r:\0028\001\"\221\001\n\023GCGPlayCardCostInfo\0229\n\010c"
      "ost_map\030\016 \003(\0132\'.proto.GCGPlayCardCostInf"
      "o.CostMapEntry\022\017\n\007card_id\030\001 \001(\r\032.\n\014CostM"
      "apEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\""
      "\235\001\n\030GCGSelectOnStageCostInfo\022>\n\010cost_map"
      "\030\010 \003(\0132,.proto.GCGSelectOnStageCostInfo."
      "CostMapEntry\022\021\n\tcard_guid\030\t \001(\r\032.\n\014CostM"
      "apEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\""
      "\376\001\n\021GCGCostReviseInfo\022\025\n\ris_can_attack\030\004"
      " \001(\010\022!\n\031can_use_hand_card_id_list\030\013 \003(\r\022"
      "7\n\023play_card_cost_list\030\005 \003(\0132\032.proto.GCG"
      "PlayCardCostInfo\022B\n\031select_on_stage_cost"
      "_list\030\n \003(\0132\037.proto.GCGSelectOnStageCost"
      "Info\0222\n\020attack_cost_list\030\002 \003(\0132\030.proto.G"
      "CGAttackCostInfo\"{\n\021GCGMsgTokenChange\022\016\n"
      "\006before\030\r \001(\r\022\022\n\ntoken_type\030\004 \001(\r\022\021\n\tcar"
      "d_guid\030\002 \001(\r\022\r\n\005after\030\013 \001(\r\022 \n\006reason\030\007 "
      "\001(\0162\020.proto.GCGReason\"\363\001\n\021GCGMsgPhaseCha"
      "nge\022N\n\024allow_controller_map\030\017 \003(\01320.prot"
      "o.GCGMsgPhaseChange.AllowControllerMapEn"
      "try\022)\n\014before_phase\030\014 \001(\0162\023.proto.GCGPha"
      "seType\022(\n\013after_phase\030\005 \001(\0162\023.proto.GCGP"
      "haseType\0329\n\027AllowControllerMapEntry\022\013\n\003k"
      "ey\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\220\001\n\016GCGMsgAd"
      "dCards\022\013\n\003pos\030\013 \001(\r\022 \n\004zone\030\002 \001(\0162\022.prot"
      "o.GCGZoneType\022 \n\006reason\030\017 \001(\0162\020.proto.GC"
      "GReason\022\025\n\rcontroller_id\030\r \001(\r\022\026\n\016card_g"
      "uid_list\030\016 \003(\r\"\206\001\n\021GCGMsgRemoveCards\022\025\n\r"
      "controller_id\030\017 \001(\r\022 \n\004zone\030\n \001(\0162\022.prot"
      "o.GCGZoneType\022 \n\006reason\030\005 \001(\0162\020.proto.GC"
      "GReason\022\026\n\016card_guid_list\030\001 \003(\r\"\273\001\n\016GCGM"
      "sgMoveCard\022\025\n\rcontroller_id\030\016 \001(\r\022\036\n\002to\030"
      "\005 \001(\0162\022.proto.GCGZoneType\022 \n\004from\030\014 \001(\0162"
      "\022.proto.GCGZoneType\022\026\n\016card_guid_list\030\010 "
      "\003(\r\022 \n\006reason\030\006 \001(\0162\020.proto.GCGReason\022\026\n"
      "\016fail_guid_list\030\013 \003(\r\"a\n\023GCGMsgSelectOnS"
      "tage\022\025\n\rcontroller_id\030\006 \001(\r\022 \n\006reason\030\n "
      "\001(\0162\020.proto.GCGReason\022\021\n\tcard_guid\030\004 \001(\r"
      "\"Y\n\033GCGMsgSelectOnStageByEffect\022\020\n\010skill"
      "_id\030\014 \001(\r\022\025\n\rcontroller_id\030\017 \001(\r\022\021\n\tcard"
      "_guid\030\001 \001(\r\"i\n\016GCGMsgDiceRoll\022.\n\016dice_si"
      "de_list\030\n \003(\0162\026.proto.GCGDiceSideType\022\020\n"
      "\010dice_num\030\017 \001(\r\022\025\n\rcontroller_id\030\005 \001(\r\"y"
      "\n\020GCGMsgDiceReroll\022\025\n\rcontroller_id\030\002 \001("
      "\r\022\036\n\026select_dice_index_list\030\001 \003(\r\022.\n\016dic"
      "e_side_list\030\006 \003(\0162\026.proto.GCGDiceSideTyp"
      "e\"#\n\nGCGMsgPass\022\025\n\rcontroller_id\030\016 \001(\r\"9"
      "\n\rGCGMsgCharDie\022\025\n\rcontroller_id\030\005 \001(\r\022\021"
      "\n\tcard_guid\030\013 \001(\r\"5\n\016GCGMsgUseSkill\022\020\n\010s"
      "kill_id\030\t \001(\r\022\021\n\tcard_guid\030\006 \001(\r\"8\n\021GCGM"
      "sgUseSkillEnd\022\021\n\tcard_guid\030\013 \001(\r\022\020\n\010skil"
      "l_id\030\014 \001(\r\"6\n\017GCGDamageDetail\022\020\n\010skill_i"
      "d\030\n \001(\r\022\021\n\tcard_guid\030\007 \001(\r\"\351\001\n\021GCGMsgSki"
      "llResult\022\020\n\010skill_id\030\014 \001(\r\022\017\n\007last_hp\030\016 "
      "\001(\r\022+\n\013detail_list\030\002 \003(\0132\026.proto.GCGDama"
      "geDetail\022\030\n\020target_card_guid\030\007 \001(\r\022\026\n\016ef"
      "fect_element\030\005 \001(\r\022\027\n\017from_result_seq\030\017 "
      "\001(\r\022\016\n\006damage\030\006 \001(\r\022\022\n\nresult_seq\030\004 \001(\r\022"
      "\025\n\rsrc_card_guid\030\010 \001(\r\"8\n\rGCGLimitsInfo\022"
      "\022\n\nlimit_type\030\007 \001(\r\022\023\n\013limit_value\030\001 \001(\r"
      "\"Q\n\022GCGSkillLimitsInfo\022\020\n\010skill_id\030\005 \001(\r"
      "\022)\n\013limits_list\030\017 \003(\0132\024.proto.GCGLimitsI"
      "nfo\"N\n\026GCGCardSkillLimitsInfo\0224\n\021skill_l"
      "imits_list\030\014 \003(\0132\031.proto.GCGSkillLimitsI"
      "nfo\"\315\001\n\027GCGMsgSkillLimitsChange\022W\n\026card_"
      "limits_change_map\030\017 \003(\01327.proto.GCGMsgSk"
      "illLimitsChange.CardLimitsChangeMapEntry"
      "\032Y\n\030CardLimitsChangeMapEntry\022\013\n\003key\030\001 \001("
      "\r\022,\n\005value\030\002 \001(\0132\035.proto.GCGCardSkillLim"
      "itsInfo:\0028\001\"i\n\016GCGMsgCostDice\022\025\n\rcontrol"
      "ler_id\030\006 \001(\r\022\036\n\026select_dice_index_list\030\r"
      " \003(\r\022 \n\006reason\030\t \001(\0162\020.proto.GCGReason\"\353"
      "\002\n\rGCGMsgAddDice\022@\n\017before_dice_map\030\014 \003("
      "\0132\'.proto.GCGMsgAddDice.BeforeDiceMapEnt"
      "ry\022\024\n\014change_count\030\001 \001(\005\0223\n\010dice_map\030\010 \003"
      "(\0132!.proto.GCGMsgAddDice.DiceMapEntry\022 \n"
      "\006reason\030\004 \001(\0162\020.proto.GCGReason\022\025\n\rcontr"
      "oller_id\030\n \001(\r\032L\n\022BeforeDiceMapEntry\022\013\n\003"
      "key\030\001 \001(\r\022%\n\005value\030\002 \001(\0162\026.proto.GCGDice"
      "SideType:\0028\001\032F\n\014DiceMapEntry\022\013\n\003key\030\001 \001("
      "\r\022%\n\005value\030\002 \001(\0162\026.proto.GCGDiceSideType"
      ":\0028\001\"-\n\rGCGMsgNewCard\022\034\n\004card\030\017 \001(\0132\016.pr"
      "oto.GCGCard\"\250\001\n\026GCGMsgUpdateController\022S"
      "\n\024allow_controller_map\030\007 \003(\01325.proto.GCG"
      "MsgUpdateController.AllowControllerMapEn"
      "try\0329\n\027AllowControllerMapEntry\022\013\n\003key\030\001 "
      "\001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\210\001\n\017GCGMsgModifyA"
      "dd\022\013\n\003pos\030\t \001(\r\022\027\n\017owner_card_guid\030\n \001(\r"
      "\022\026\n\016card_guid_list\030\017 \003(\r\022\025\n\rcontroller_i"
      "d\030\016 \001(\r\022 \n\006reason\030\013 \001(\0162\020.proto.GCGReaso"
      "n\"~\n\022GCGMsgModifyRemove\022\025\n\rcontroller_id"
      "\030\016 \001(\r\022 \n\006reason\030\014 \001(\0162\020.proto.GCGReason"
      "\022\027\n\017owner_card_guid\030\005 \001(\r\022\026\n\016card_guid_l"
      "ist\030\004 \003(\r\">\n\022GCGMsgPVEIntention\022\025\n\rskill"
      "_id_list\030\010 \003(\r\022\021\n\tcard_guid\030\r \001(\r\"\260\001\n\026GC"
      "GMsgPVEIntentionInfo\022F\n\rintention_map\030\002 "
      "\003(\0132/.proto.GCGMsgPVEIntentionInfo.Inten"
      "tionMapEntry\032N\n\021IntentionMapEntry\022\013\n\003key"
      "\030\001 \001(\r\022(\n\005value\030\002 \001(\0132\031.proto.GCGMsgPVEI"
      "ntention:\0028\001\"\210\001\n\030GCGMsgPVEIntentionChang"
      "e\0228\n\025change_intention_list\030\004 \003(\0132\031.proto"
      ".GCGMsgPVEIntention\0222\n\013change_type\030\001 \001(\016"
      "2\035.proto.GCGIntentionChangeType\"%\n\024GCGMs"
      "gDuelDataChange\022\r\n\005round\030\016 \001(\r\"\\\n\023GCGMsg"
      "ClientPerform\022\022\n\nparam_list\030\002 \003(\r\0221\n\014per"
      "form_type\030\005 \001(\0162\033.proto.GCGClientPerform"
      "Type\"T\n\016GCGMsgGameOver\022\'\n\nend_reason\030\r \001"
      "(\0162\023.proto.GCGEndReason\022\031\n\021win_controlle"
      "r_id\030\006 \001(\r\"r\n\rGCGMsgOpTimer\022\022\n\nbegin_tim"
      "e\030\t \001(\006\022\"\n\005phase\030\003 \001(\0162\023.proto.GCGPhaseT"
      "ype\022\022\n\ntime_stamp\030\r \001(\006\022\025\n\rcontroller_id"
      "\030\010 \001(\r\"C\n\027GCGMsgWaitingListChange\022\021\n\tcur"
      "_index\030\006 \001(\r\022\025\n\rcontroller_id\030\004 \001(\r\"0\n\020G"
      "CGMsgCardUpdate\022\034\n\004card\030\007 \001(\0132\016.proto.GC"
      "GCard\"X\n\020GCGMsgCostRevise\022\025\n\rcontroller_"
      "id\030\005 \001(\r\022-\n\013cost_revise\030\r \001(\0132\030.proto.GC"
      "GCostReviseInfo\"\025\n\023GCGMsgPhaseContinue\"\320"
      "\001\n\031GCGMsgNoDamageSkillResult\022\022\n\nresult_s"
      "eq\030\010 \001(\r\022\027\n\017from_result_seq\030\004 \001(\r\022\026\n\016eff"
      "ect_element\030\t \001(\r\022\030\n\020target_card_guid\030\005 "
      "\001(\r\022+\n\013detail_list\030\r \003(\0132\026.proto.GCGDama"
      "geDetail\022\020\n\010skill_id\030\n \001(\r\022\025\n\rsrc_card_g"
      "uid\030\014 \001(\r\":\n\023GCGMsgReactionBegin\022\021\n\tcard"
      "_guid\030\r \001(\r\022\020\n\010skill_id\030\003 \001(\r\"%\n\021GCGMsgR"
      "eactionEnd\022\020\n\010skill_id\030\004 \001(\r\"\363\r\n\nGCGMess"
      "age\0220\n\014token_change\030\014 \001(\0132\030.proto.GCGMsg"
      "TokenChangeH\000\0220\n\014phase_change\030\r \001(\0132\030.pr"
      "oto.GCGMsgPhaseChangeH\000\022*\n\tadd_cards\030\n \001"
      "(\0132\025.proto.GCGMsgAddCardsH\000\0220\n\014remove_ca"
      "rds\030\016 \001(\0132\030.proto.GCGMsgRemoveCardsH\000\0225\n"
      "\017select_on_stage\030\006 \001(\0132\032.proto.GCGMsgSel"
      "ectOnStageH\000\022*\n\tdice_roll\030\t \001(\0132\025.proto."
      "GCGMsgDiceRollH\000\022.\n\013dice_reroll\030\013 \001(\0132\027."
      "proto.GCGMsgDiceRerollH\000\022!\n\004pass\030\005 \001(\0132\021"
      ".proto.GCGMsgPassH\000\022(\n\010char_die\030\002 \001(\0132\024."
      "proto.GCGMsgCharDieH\000\0220\n\014skill_result\030\001 "
      "\001(\0132\030.proto.GCGMsgSkillResultH\000\022*\n\tcost_"
      "dice\030\007 \001(\0132\025.proto.GCGMsgCostDiceH\000\022(\n\010a"
      "dd_dice\030\003 \001(\0132\024.proto.GCGMsgAddDiceH\000\022*\n"
      "\tmove_card\030\017 \001(\0132\025.proto.GCGMsgMoveCardH"
      "\000\022*\n\tuse_skill\030\004 \001(\0132\025.proto.GCGMsgUseSk"
      "illH\000\022)\n\010new_card\030\270\016 \001(\0132\024.proto.GCGMsgN"
      "ewCardH\000\022;\n\021update_controller\030\255\003 \001(\0132\035.p"
      "roto.GCGMsgUpdateControllerH\000\022-\n\nmodify_"
      "add\030\273\016 \001(\0132\026.proto.GCGMsgModifyAddH\000\0223\n\r"
      "modify_remove\030\327\003 \001(\0132\031.proto.GCGMsgModif"
      "yRemoveH\000\0222\n\ruse_skill_end\030\203\013 \001(\0132\030.prot"
      "o.GCGMsgUseSkillEndH\000\0228\n\020duel_data_chang"
      "e\030\360\007 \001(\0132\033.proto.GCGMsgDuelDataChangeH\000\022"
      "5\n\016client_perform\030\213\010 \001(\0132\032.proto.GCGMsgC"
      "lientPerformH\000\022+\n\tgame_over\030\312\005 \001(\0132\025.pro"
      "to.GCGMsgGameOverH\000\022)\n\010op_timer\030\306\016 \001(\0132\024"
      ".proto.GCGMsgOpTimerH\000\022>\n\023waiting_list_c"
      "hange\030\216\r \001(\0132\036.proto.GCGMsgWaitingListCh"
      "angeH\000\022/\n\013card_update\030\327\016 \001(\0132\027.proto.GCG"
      "MsgCardUpdateH\000\022H\n\031select_on_stage_by_ef"
      "fect\030\372\017 \001(\0132\".proto.GCGMsgSelectOnStageB"
      "yEffectH\000\022/\n\013cost_revise\030\306\n \001(\0132\027.proto."
      "GCGMsgCostReviseH\000\0225\n\016phase_continue\030\302\013 "
      "\001(\0132\032.proto.GCGMsgPhaseContinueH\000\022<\n\022pve"
      "_intention_info\030\344\t \001(\0132\035.proto.GCGMsgPVE"
      "IntentionInfoH\000\022@\n\024pve_intention_change\030"
      "\375\006 \001(\0132\037.proto.GCGMsgPVEIntentionChangeH"
      "\000\022>\n\023skill_limits_change\030\203\002 \001(\0132\036.proto."
      "GCGMsgSkillLimitsChangeH\000\022B\n\026no_damage_s"
      "kill_result\030\030 \001(\0132 .proto.GCGMsgNoDamage"
      "SkillResultH\000\0225\n\016reaction_begin\030\333\006 \001(\0132\032"
      ".proto.GCGMsgReactionBeginH\000\0221\n\014reaction"
      "_end\030\363\n \001(\0132\030.proto.GCGMsgReactionEndH\000B"
      "\t\n\007message\"w\n\016GCGMessagePack\022)\n\013action_t"
      "ype\030\003 \001(\0162\024.proto.GCGActionType\022\025\n\rcontr"
      "oller_id\030\006 \001(\r\022#\n\010msg_list\030\r \003(\0132\021.proto"
      ".GCGMessage\"\'\n\022GCGOperationRedraw\022\021\n\tcar"
      "d_list\030\002 \003(\r\"L\n\031GCGOperationOnStageSelec"
      "t\022\021\n\tcard_guid\030\005 \001(\r\022\034\n\024cost_dice_index_"
      "list\030\004 \003(\r\"-\n\022GCGOperationReroll\022\027\n\017dice"
      "_index_list\030\014 \003(\r\"D\n\022GCGOperationAttack\022"
      "\034\n\024cost_dice_index_list\030\010 \003(\r\022\020\n\010skill_i"
      "d\030\002 \001(\r\"\022\n\020GCGOperationPass\"\201\001\n\024GCGOpera"
      "tionPlayCard\022\021\n\tcard_guid\030\014 \001(\r\022\034\n\024cost_"
      "dice_index_list\030\004 \003(\r\022\035\n\025target_card_gui"
      "d_list\030\n \003(\r\022\031\n\021replace_card_guid\030\010 \001(\r\""
      "J\n\022GCGOperationReboot\022\033\n\023cost_card_guid_"
      "list\030\007 \003(\r\022\027\n\017dice_index_list\030\006 \003(\r\"\027\n\025G"
      "CGOperationSurrender\"\253\003\n\014GCGOperation\022.\n"
      "\top_redraw\030\n \001(\0132\031.proto.GCGOperationRed"
      "rawH\000\022>\n\022op_select_on_stage\030\004 \001(\0132 .prot"
      "o.GCGOperationOnStageSelectH\000\022.\n\top_rero"
      "ll\030\t \001(\0132\031.proto.GCGOperationRerollH\000\022.\n"
      "\top_attack\030\013 \001(\0132\031.proto.GCGOperationAtt"
      "ackH\000\022*\n\007op_pass\030\017 \001(\0132\027.proto.GCGOperat"
      "ionPassH\000\0223\n\014op_play_card\030\002 \001(\0132\033.proto."
      "GCGOperationPlayCardH\000\022.\n\top_reboot\030\005 \001("
      "\0132\031.proto.GCGOperationRebootH\000\0224\n\014op_sur"
      "render\030\001 \001(\0132\034.proto.GCGOperationSurrend"
      "erH\000B\004\n\002op\"P\n\026GCGReplayOperationData\022\025\n\r"
      "controller_id\030\010 \001(\r\022\037\n\002op\030\005 \001(\0132\023.proto."
      "GCGOperation\"F\n\027GCGReplayControllerData\022"
      "\025\n\rcontroller_id\030\r \001(\r\022\024\n\014card_id_list\030\005"
      " \003(\r\"\255\001\n\022GCGOperationReplay\022\014\n\004seed\030\013 \001("
      "\r\022:\n\023operation_data_list\030\t \003(\0132\035.proto.G"
      "CGReplayOperationData\022<\n\024controller_data"
      "_list\030\r \003(\0132\036.proto.GCGReplayControllerD"
      "ata\022\017\n\007game_id\030\001 \001(\r\"&\n\010GCGToken\022\r\n\005valu"
      "e\030\013 \001(\r\022\013\n\003key\030\004 \001(\r\"\342\001\n\007GCGCard\022\017\n\007is_s"
      "how\030\016 \001(\010\022\021\n\tface_type\030\005 \001(\r\022\n\n\002id\030\006 \001(\r"
      "\022#\n\ntoken_list\030\002 \003(\0132\017.proto.GCGToken\022\025\n"
      "\rskill_id_list\030\013 \003(\r\0224\n\021skill_limits_lis"
      "t\030\010 \003(\0132\031.proto.GCGSkillLimitsInfo\022\014\n\004gu"
      "id\030\017 \001(\r\022\020\n\010tag_list\030\003 \003(\r\022\025\n\rcontroller"
      "_id\030\007 \001(\r\"\034\n\007GCGZone\022\021\n\tcard_list\030\004 \003(\r\""
      ":\n\023GCGWaitingCharacter\022\017\n\007card_id\030\002 \001(\r\022"
      "\022\n\ncond_count\030\016 \001(\r\"\254\005\n\016GCGPlayerField\022A"
      "\n\017modify_zone_map\030\002 \003(\0132(.proto.GCGPlaye"
      "rField.ModifyZoneMapEntry\022\032\n\021cur_waiting"
      "_index\030\377\002 \001(\r\022#\n\013summon_zone\030\001 \001(\0132\016.pro"
      "to.GCGZone\022\025\n\rfield_show_id\030\010 \001(\r\022\031\n\021car"
      "d_back_show_id\030\014 \001(\r\022\022\n\ndice_count\030\003 \001(\r"
      "\022\025\n\rcontroller_id\030\n \001(\r\022%\n\ron_stage_zone"
      "\030\016 \001(\0132\016.proto.GCGZone\022\021\n\tis_passed\030\007 \001("
      "\010\022&\n\016character_zone\030\005 \001(\0132\016.proto.GCGZon"
      "e\022\037\n\027on_stage_character_guid\030\006 \001(\r\022#\n\013as"
      "sist_zone\030\017 \001(\0132\016.proto.GCGZone\022\025\n\rdeck_"
      "card_num\030\r \001(\r\022.\n\016dice_side_list\030\013 \003(\0162\026"
      ".proto.GCGDiceSideType\022!\n\thand_zone\030\t \001("
      "\0132\016.proto.GCGZone\022/\n\016intention_list\030\250\t \003"
      "(\0132\026.proto.GCGPVEIntention\0220\n\014waiting_li"
      "st\030\004 \003(\0132\032.proto.GCGWaitingCharacter\032D\n\022"
      "ModifyZoneMapEntry\022\013\n\003key\030\001 \001(\r\022\035\n\005value"
      "\030\002 \001(\0132\016.proto.GCGZone:\0028\001\"\265\001\n\010GCGPhase\022"
      "\'\n\nphase_type\030\005 \001(\0162\023.proto.GCGPhaseType"
      "\022E\n\024allow_controller_map\030\006 \003(\0132\'.proto.G"
      "CGPhase.AllowControllerMapEntry\0329\n\027Allow"
      "ControllerMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value"
      "\030\002 \001(\r:\0028\001\"q\n\025GCGControllerShowInfo\022.\n\017p"
      "rofile_picture\030\013 \001(\0132\025.proto.ProfilePict"
      "ure\022\021\n\tnick_name\030\016 \001(\t\022\025\n\rcontroller_id\030"
      "\t \001(\r\";\n\017GCGPVEIntention\022\021\n\tcard_guid\030\t "
      "\001(\r\022\025\n\rskill_id_list\030\007 \003(\r\"V\n\020GCGDuelCha"
      "llenge\022\026\n\016total_progress\030\007 \001(\r\022\024\n\014challe"
      "nge_id\030\n \001(\r\022\024\n\014cur_progress\030\014 \001(\r\"\237\005\n\007G"
      "CGDuel\022-\n\013cost_revise\030\n \001(\0132\030.proto.GCGC"
      "ostReviseInfo\0221\n\rbusiness_type\030\016 \001(\0162\032.p"
      "roto.GCGGameBusinessType\022)\n\021history_card"
      "_list\030y \003(\0132\016.proto.GCGCard\022\026\n\roperation"
      "_seq\030\272\t \001(\r\022\017\n\007game_id\030\013 \001(\r\022\021\n\tgame_typ"
      "e\030\002 \001(\r\022!\n\tcard_list\030\t \003(\0132\016.proto.GCGCa"
      "rd\022\022\n\nserver_seq\030\003 \001(\r\0225\n\025history_msg_pa"
      "ck_list\030\234\006 \003(\0132\025.proto.GCGMessagePack\022\r\n"
      "\005round\030\017 \001(\r\022)\n\nfield_list\030\007 \003(\0132\025.proto"
      ".GCGPlayerField\022\025\n\rcontroller_id\030\r \001(\r\022\036"
      "\n\005phase\030\010 \001(\0132\017.proto.GCGPhase\022\024\n\014card_i"
      "d_list\030\004 \003(\r\022-\n\rintetion_list\030\001 \003(\0132\026.pr"
      "oto.GCGPVEIntention\022%\n\034forbid_finish_cha"
      "llenge_list\030\207\005 \003(\r\022/\n\016challenge_list\030\005 \003"
      "(\0132\027.proto.GCGDuelChallenge\022\031\n\021cur_contr"
      "oller_id\030\014 \001(\r\0224\n\016show_info_list\030\006 \003(\0132\034"
      ".proto.GCGControllerShowInfo\"X\n\017GCGOpera"
      "tionReq\022\016\n\006op_seq\030\002 \001(\r\022\024\n\014redirect_uid\030"
      "\007 \001(\r\022\037\n\002op\030\017 \001(\0132\023.proto.GCGOperation\"2"
      "\n\017GCGOperationRsp\022\017\n\007retcode\030\010 \001(\005\022\016\n\006op"
      "_seq\030\004 \001(\r\"X\n\024GCGMessagePackNotify\022,\n\rms"
      "g_pack_list\030\013 \003(\0132\025.proto.GCGMessagePack"
      "\022\022\n\nserver_seq\030\005 \001(\r\"\017\n\rGCGAskDuelReq\">\n"
      "\rGCGAskDuelRsp\022\017\n\007retcode\030\003 \001(\005\022\034\n\004duel\030"
      "\r \001(\0132\016.proto.GCGDuel\"\210\002\n\022GCGPlayerBrief"
      "Data\022A\n\rcard_face_map\030\010 \003(\0132*.proto.GCGP"
      "layerBriefData.CardFaceMapEntry\022\021\n\tnick_"
      "name\030\t \001(\t\022.\n\017profile_picture\030\014 \001(\0132\025.pr"
      "oto.ProfilePicture\022\024\n\014card_id_list\030\003 \003(\r"
      "\022\025\n\rcontroller_id\030\005 \001(\r\022\013\n\003uid\030\n \001(\r\0322\n\020"
      "CardFaceMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002"
      " \001(\r:\0028\001\"\263\001\n\020GCGGameBriefData\022\017\n\007game_id"
      "\030\016 \001(\r\022\020\n\010game_uid\030\t \001(\r\0221\n\rbusiness_typ"
      "e\030\r \001(\0162\032.proto.GCGGameBusinessType\022\023\n\013v"
      "erify_code\030\005 \001(\r\0224\n\021player_brief_list\030\014 "
      "\003(\0132\031.proto.GCGPlayerBriefData\"^\n\026GCGGam"
      "eBriefDataNotify\022\023\n\013is_new_game\030\013 \001(\010\022/\n"
      "\016gcg_brief_data\030\n \001(\0132\027.proto.GCGGameBri"
      "efData\"\022\n\020GCGInitFinishReq\"#\n\020GCGInitFin"
      "ishRsp\022\017\n\007retcode\030\002 \001(\005\"(\n\022GCGHeartBeatN"
      "otify\022\022\n\nserver_seq\030\006 \001(\r\"b\n\025GCGSkillPre"
      "viewHpInfo\0220\n\013change_type\030\004 \001(\0162\033.proto."
      "GCGSkillHpChangeType\022\027\n\017hp_change_value\030"
      "\r \001(\r\"M\n\033GCGSkillPreviewReactionInfo\022\026\n\016"
      "source_element\030\r \001(\r\022\026\n\016target_element\030\001"
      " \001(\r\"\210\001\n\"GCGSkillPreviewElementReactionI"
      "nfo\022\022\n\nfresh_list\030\010 \003(\r\022\023\n\013source_list\030\002"
      " \003(\r\0229\n\rreaction_list\030\016 \003(\0132\".proto.GCGS"
      "killPreviewReactionInfo\"\224\001\n\027GCGSkillPrev"
      "iewCardInfo\022\025\n\rcontroller_id\030\003 \001(\r\022\027\n\017ow"
      "ner_card_guid\030\013 \001(\r\022%\n\tzone_type\030\016 \001(\0162\022"
      ".proto.GCGZoneType\022\017\n\007card_id\030\r \001(\r\022\021\n\tc"
      "ard_guid\030\006 \001(\r\"f\n GCGSkillPreviewOnstage"
      "ChangeInfo\022 \n\030target_onstage_card_guid\030\006"
      " \001(\r\022 \n\030source_onstage_card_guid\030\017 \001(\r\"Y"
      "\n\030GCGSkillPreviewTokenInfo\022\022\n\ntoken_type"
      "\030\003 \001(\r\022\023\n\013after_value\030\014 \001(\r\022\024\n\014before_va"
      "lue\030\017 \001(\r\"\\\n\036GCGSkillPreviewTokenChangeI"
      "nfo\022:\n\021token_change_list\030\016 \003(\0132\037.proto.G"
      "CGSkillPreviewTokenInfo\"\243\001\n\030GCGSkillPrev"
      "iewExtraInfo\022A\n\031fail_added_when_full_lis"
      "t\030\016 \003(\0132\036.proto.GCGSkillPreviewCardInfo\022"
      "D\n\034refresh_card_when_exist_list\030\006 \003(\0132\036."
      "proto.GCGSkillPreviewCardInfo\"\215\006\n\023GCGSki"
      "llPreviewInfo\022Q\n\025card_token_change_map\030\003"
      " \003(\01322.proto.GCGSkillPreviewInfo.CardTok"
      "enChangeMapEntry\022J\n\021reaction_info_map\030\005 "
      "\003(\0132/.proto.GCGSkillPreviewInfo.Reaction"
      "InfoMapEntry\022>\n\013hp_info_map\030\010 \003(\0132).prot"
      "o.GCGSkillPreviewInfo.HpInfoMapEntry\0225\n\r"
      "add_card_list\030\013 \003(\0132\036.proto.GCGSkillPrev"
      "iewCardInfo\0223\n\nextra_info\030\n \001(\0132\037.proto."
      "GCGSkillPreviewExtraInfo\022\020\n\010skill_id\030\006 \001"
      "(\r\022N\n\035change_onstage_character_list\030\t \003("
      "\0132\'.proto.GCGSkillPreviewOnstageChangeIn"
      "fo\0224\n\014rm_card_list\030\014 \003(\0132\036.proto.GCGSkil"
      "lPreviewCardInfo\032`\n\027CardTokenChangeMapEn"
      "try\022\013\n\003key\030\001 \001(\r\0224\n\005value\030\002 \001(\0132%.proto."
      "GCGSkillPreviewTokenChangeInfo:\0028\001\032a\n\024Re"
      "actionInfoMapEntry\022\013\n\003key\030\001 \001(\r\0228\n\005value"
      "\030\002 \001(\0132).proto.GCGSkillPreviewElementRea"
      "ctionInfo:\0028\001\032N\n\016HpInfoMapEntry\022\013\n\003key\030\001"
      " \001(\r\022+\n\005value\030\002 \001(\0132\034.proto.GCGSkillPrev"
      "iewHpInfo:\0028\001\"|\n\024GCGChangeOnstageInfo\022\021\n"
      "\tcard_guid\030\006 \001(\r\022\020\n\010is_quick\030\007 \001(\010\022\?\n\033ch"
      "ange_onstage_preview_info\030\014 \001(\0132\032.proto."
      "GCGSkillPreviewInfo\"\203\001\n\033GCGSkillPreviewP"
      "layCardInfo\022\030\n\020target_card_guid\030\t \001(\r\022\026\n"
      "\016hand_card_guid\030\017 \001(\r\0222\n\016play_card_info\030"
      "\006 \001(\0132\032.proto.GCGSkillPreviewInfo\"\377\001\n\025GC"
      "GSkillPreviewNotify\022\025\n\rcontroller_id\030\017 \001"
      "(\r\022:\n\016play_card_list\030\013 \003(\0132\".proto.GCGSk"
      "illPreviewPlayCardInfo\0226\n\022skill_preview_"
      "list\030\t \003(\0132\032.proto.GCGSkillPreviewInfo\022@"
      "\n\033change_onstage_preview_list\030\001 \003(\0132\033.pr"
      "oto.GCGChangeOnstageInfo\022\031\n\021onstage_card"
      "_guid\030\005 \001(\r\"\027\n\025GCGSkillPreviewAskReq\"(\n\025"
      "GCGSkillPreviewAskRsp\022\017\n\007retcode\030\001 \001(\005\"Z"
      "\n\030GCGChallengeUpdateNotify\022\022\n\nserver_seq"
      "\030\014 \001(\r\022*\n\tchallenge\030\r \001(\0132\027.proto.GCGDue"
      "lChallenge\"#\n\020GCGBackToDuelReq\022\017\n\007is_bac"
      "k\030\016 \001(\010\"#\n\020GCGBackToDuelRsp\022\017\n\007retcode\030\001"
      " \001(\005\"(\n\024GCGDebugReplayNotify\022\020\n\010json_str"
      "\030\t \001(\t\"\022\n\020GCGGameMaxNotify\"\204\002\n\035GCGGameCr"
      "eateFailReasonNotify\022H\n\006reason\030\017 \001(\01628.p"
      "roto.GCGGameCreateFailReasonNotify.GCGGa"
      "meCreateReason\"\230\001\n\023GCGGameCreateReason\022\017"
      "\n\013REASON_NONE\020\000\022\023\n\017REASON_GAME_MAX\020\001\022%\n!"
      "REASON_CLIENT_VERSION_NOT_LASTEST\020\002\022 \n\034R"
      "EASON_RESOURCE_NOT_COMPLETE\020\003\022\022\n\016REASON_"
      "TIMEOUT\020\004\"\250\001\n\rGCGDSDeckData\022\021\n\tcard_list"
      "\030\001 \003(\r\022\024\n\014card_back_id\030\017 \001(\r\022\033\n\023characte"
      "r_card_list\030\n \003(\r\022\014\n\004name\030\005 \001(\t\022\n\n\002id\030\003 "
      "\001(\r\022\023\n\013create_time\030\r \001(\007\022\020\n\010is_valid\030\004 \001"
      "(\010\022\020\n\010field_id\030\007 \001(\r\"\237\001\n\rGCGDSCardData\022\017"
      "\n\007card_id\030\016 \001(\r\022\021\n\tface_type\030\006 \001(\r\022\013\n\003nu"
      "m\030\014 \001(\r\022\035\n\025unlock_face_type_list\030\t \003(\r\022)"
      "\n!proficiency_reward_taken_idx_list\030\007 \003("
      "\r\022\023\n\013proficiency\030\010 \001(\r\"\325\001\n\017GCGDSDataNoti"
      "fy\022\'\n\tdeck_list\030\004 \003(\0132\024.proto.GCGDSDeckD"
      "ata\022 \n\030unlock_card_back_id_list\030\005 \003(\r\022\034\n"
      "\024unlock_field_id_list\030\006 \003(\r\022\023\n\013cur_deck_"
      "id\030\n \001(\r\022\'\n\tcard_list\030\003 \003(\0132\024.proto.GCGD"
      "SCardData\022\033\n\023unlock_deck_id_list\030\001 \003(\r\"1"
      "\n\031GCGDSCardBackUnlockNotify\022\024\n\014card_back"
      "_id\030\006 \001(\r\"*\n\026GCGDSFieldUnlockNotify\022\020\n\010f"
      "ield_id\030\001 \001(\r\"\?\n\031GCGDSCardFaceUnlockNoti"
      "fy\022\017\n\007card_id\030\r \001(\r\022\021\n\tface_type\030\001 \001(\r\"8"
      "\n\030GCGDSCardNumChangeNotify\022\017\n\007card_id\030\004 "
      "\001(\r\022\013\n\003num\030\n \001(\r\"<\n\026GCGDSChangeCardFaceR"
      "eq\022\021\n\tface_type\030\006 \001(\r\022\017\n\007card_id\030\003 \001(\r\"M"
      "\n\026GCGDSChangeCardFaceRsp\022\021\n\tface_type\030\010 "
      "\001(\r\022\017\n\007card_id\030\004 \001(\r\022\017\n\007retcode\030\t \001(\005\"\?\n"
      "\026GCGDSChangeCardBackReq\022\017\n\007deck_id\030\n \001(\r"
      "\022\024\n\014card_back_id\030\014 \001(\r\"P\n\026GCGDSChangeCar"
      "dBackRsp\022\017\n\007retcode\030\017 \001(\005\022\024\n\014card_back_i"
      "d\030\006 \001(\r\022\017\n\007deck_id\030\005 \001(\r\"8\n\023GCGDSChangeF"
      "ieldReq\022\020\n\010field_id\030\006 \001(\r\022\017\n\007deck_id\030\013 \001"
      "(\r\"I\n\023GCGDSChangeFieldRsp\022\017\n\007retcode\030\001 \001"
      "(\005\022\020\n\010field_id\030\003 \001(\r\022\017\n\007deck_id\030\002 \001(\r\"7\n"
      "\026GCGDSChangeDeckNameReq\022\017\n\007deck_id\030\r \001(\r"
      "\022\014\n\004name\030\007 \001(\t\"H\n\026GCGDSChangeDeckNameRsp"
      "\022\017\n\007deck_id\030\r \001(\r\022\017\n\007retcode\030\016 \001(\005\022\014\n\004na"
      "me\030\001 \001(\t\"a\n\020GCGDSDeckSaveReq\022\017\n\007deck_id\030"
      "\001 \001(\r\022\021\n\tcard_list\030\004 \003(\r\022\033\n\023character_ca"
      "rd_list\030\t \003(\r\022\014\n\004name\030\016 \001(\t\"[\n\020GCGDSDeck"
      "SaveRsp\022\023\n\013create_time\030\016 \001(\007\022\017\n\007deck_id\030"
      "\013 \001(\r\022\017\n\007retcode\030\010 \001(\005\022\020\n\010is_valid\030\004 \001(\010"
      "\"(\n\025GCGDSChangeCurDeckReq\022\017\n\007deck_id\030\003 \001"
      "(\r\"9\n\025GCGDSChangeCurDeckRsp\022\017\n\007retcode\030\010"
      " \001(\005\022\017\n\007deck_id\030\016 \001(\r\"+\n\030GCGDSCurDeckCha"
      "ngeNotify\022\017\n\007deck_id\030\006 \001(\r\"%\n\022GCGDSDelet"
      "eDeckReq\022\017\n\007deck_id\030\017 \001(\r\"6\n\022GCGDSDelete"
      "DeckRsp\022\017\n\007retcode\030\016 \001(\005\022\017\n\007deck_id\030\007 \001("
      "\r\"(\n\025GCGDSDeckUnlockNotify\022\017\n\007deck_id\030\017 "
      "\001(\r\"B\n\032GCGDSCardProficiencyNotify\022\023\n\013pro"
      "ficiency\030\002 \001(\r\022\017\n\007card_id\030\014 \001(\r\":\n\025GCGDS"
      "DeckUpdateNotify\022\017\n\007deck_id\030\006 \001(\r\022\020\n\010is_"
      "valid\030\014 \001(\010\"\?\n\031GCGDSCardFaceUpdateNotify"
      "\022\017\n\007card_id\030\016 \001(\r\022\021\n\tface_type\030\017 \001(\r\"J\n!"
      "GCGDSTakeCardProficiencyRewardReq\022\024\n\014rew"
      "ard_index\030\007 \001(\r\022\017\n\007card_id\030\016 \001(\r\"[\n!GCGD"
      "STakeCardProficiencyRewardRsp\022\017\n\007retcode"
      "\030\010 \001(\005\022\024\n\014reward_index\030\n \001(\r\022\017\n\007card_id\030"
      "\007 \001(\r\"\'\n\022GCGDSBanCardNotify\022\021\n\tcard_list"
      "\030\004 \003(\r\"\256\001\n\025GCGTCTavernInfoNotify\022\030\n\020is_l"
      "ast_duel_win\030\016 \001(\010\022\020\n\010level_id\030\013 \001(\r\022\030\n\020"
      "is_owner_in_duel\030\005 \001(\010\022\020\n\010point_id\030\003 \001(\r"
      "\022\021\n\tavatar_id\030\014 \001(\r\022\024\n\014character_id\030\007 \001("
      "\r\022\024\n\014element_type\030\n \001(\r\"8\n\016GCGTCInviteRe"
      "q\022\020\n\010level_id\030\003 \001(\r\022\024\n\014character_id\030\006 \001("
      "\r\"7\n\016GCGTCInviteRsp\022\024\n\014character_id\030\014 \001("
      "\r\022\017\n\007retcode\030\005 \001(\005\"N\n\030GCGTCTavernChallen"
      "geData\022\034\n\024unlock_level_id_list\030\001 \003(\r\022\024\n\014"
      "character_id\030\010 \001(\r\"`\n\036GCGTCTavernChallen"
      "geDataNotify\022>\n\025tavern_challenge_list\030\r "
      "\003(\0132\037.proto.GCGTCTavernChallengeData\"]\n "
      "GCGTCTavernChallengeUpdateNotify\0229\n\020tave"
      "rn_challenge\030\005 \001(\0132\037.proto.GCGTCTavernCh"
      "allengeData\"2\n\024GCGGrowthLevelNotify\022\013\n\003e"
      "xp\030\007 \001(\r\022\r\n\005level\030\013 \001(\r\"=\n\032GCGGrowthLeve"
      "lRewardNotify\022\037\n\027level_reward_taken_list"
      "\030\010 \003(\r\",\n\033GCGGrowthLevelTakeRewardReq\022\r\n"
      "\005level\030\004 \001(\r\"=\n\033GCGGrowthLevelTakeReward"
      "Rsp\022\r\n\005level\030\001 \001(\r\022\017\n\007retcode\030\r \001(\005\"&\n\027G"
      "CGInviteGuestBattleReq\022\013\n\003uid\030\013 \001(\r\"j\n\027G"
      "CGInviteGuestBattleRsp\022\017\n\007retcode\030\003 \001(\005\022"
      "\030\n\020confirm_end_time\030\002 \001(\r\022\027\n\017punish_end_"
      "time\030\t \001(\r\022\013\n\003uid\030\013 \001(\r\"1\n\025GCGInviteBatt"
      "leNotify\022\030\n\020confirm_end_time\030\n \001(\r\"+\n\027GC"
      "GApplyInviteBattleReq\022\020\n\010is_agree\030\t \001(\010\""
      "C\n\027GCGApplyInviteBattleRsp\022\027\n\017punish_end"
      "_time\030\007 \001(\r\022\017\n\007retcode\030\005 \001(\005\"\?\n\032GCGApply"
      "InviteBattleNotify\022\020\n\010is_agree\030\016 \001(\010\022\017\n\007"
      "retcode\030\006 \001(\005\"\033\n\031GCGWorldPlayerGCGStateR"
      "eq\"Y\n\021GCGPlayerGCGState\022\034\n\024is_reasouce_c"
      "omplete\030\007 \001(\010\022\031\n\021is_gcg_state_open\030\005 \001(\010"
      "\022\013\n\003uid\030\002 \001(\r\"\\\n\031GCGWorldPlayerGCGStateR"
      "sp\022.\n\014player_state\030\014 \003(\0132\030.proto.GCGPlay"
      "erGCGState\022\017\n\007retcode\030\n \001(\005\"\233\002\n\017GCGSettl"
      "eNotify\022\016\n\006is_win\030\r \001(\010\022\017\n\007game_id\030\007 \001(\r"
      "\022#\n\006reason\030\003 \001(\0162\023.proto.GCGEndReason\0221\n"
      "\rbusiness_type\030\002 \001(\0162\032.proto.GCGGameBusi"
      "nessType\022\"\n\032finished_challenge_id_list\030\006"
      " \003(\r\022\031\n\021win_controller_id\030\017 \001(\r\022$\n\034forbi"
      "d_finish_challenge_list\030\014 \003(\r\022*\n\020reward_"
      "item_list\030\t \003(\0132\020.proto.ItemParam\"-\n\026GCG"
      "ResourceStateNotify\022\023\n\013is_complete\030\005 \001(\010"
      "\"\024\n\022GCGClientSettleReq\"9\n\022GCGClientSettl"
      "eRsp\022\022\n\nclose_time\030\004 \001(\r\022\017\n\007retcode\030\001 \001("
      "\005\"<\n\022GCGSettleOptionReq\022&\n\006option\030\005 \001(\0162"
      "\026.proto.GCGSettleOption\"M\n\022GCGSettleOpti"
      "onRsp\022&\n\006option\030\r \001(\0162\026.proto.GCGSettleO"
      "ption\022\017\n\007retcode\030\016 \001(\005\"Q\n\022GCGBasicDataNo"
      "tify\022\r\n\005level\030\t \001(\r\022\013\n\003exp\030\004 \001(\r\022\037\n\027leve"
      "l_reward_taken_list\030\014 \003(\r\"H\n\020GCGTavernNp"
      "cInfo\022\n\n\002id\030\006 \001(\r\022\020\n\010level_id\030\n \001(\r\022\026\n\016s"
      "cene_point_id\030\003 \001(\r\"\251\001\n\026GCGTavernNpcInfo"
      "Notify\022.\n\rweek_npc_list\030\001 \003(\0132\027.proto.GC"
      "GTavernNpcInfo\022.\n\rcharacter_npc\030\005 \001(\0132\027."
      "proto.GCGTavernNpcInfo\022/\n\016const_npc_list"
      "\030\017 \003(\0132\027.proto.GCGTavernNpcInfo\"d\n\024GCGSt"
      "artChallengeReq\022\'\n\nlevel_type\030\005 \001(\0162\023.pr"
      "oto.GCGLevelType\022\021\n\tconfig_id\030\r \001(\r\022\020\n\010l"
      "evel_id\030\014 \001(\r\"u\n\024GCGStartChallengeRsp\022\'\n"
      "\nlevel_type\030\014 \001(\0162\023.proto.GCGLevelType\022\017"
      "\n\007retcode\030\017 \001(\005\022\021\n\tconfig_id\030\006 \001(\r\022\020\n\010le"
      "vel_id\030\001 \001(\r\"P\n\024GCGWeekChallengeInfo\022\016\n\006"
      "npc_id\030\004 \001(\r\022\023\n\013is_finished\030\007 \001(\010\022\023\n\013unl"
      "ock_time\030\001 \001(\r\"\217\001\n\032GCGWeekChallengeInfoN"
      "otify\0228\n\023challenge_info_list\030\017 \003(\0132\033.pro"
      "to.GCGWeekChallengeInfo\022\031\n\021next_refresh_"
      "time\030\007 \001(\r\022\034\n\024is_notify_npc_change\030\t \001(\010"
      "\"q\n!GCGStartChallengeByCheckRewardReq\022\020\n"
      "\010level_id\030\t \001(\r\022\021\n\tconfig_id\030\r \001(\r\022\'\n\nle"
      "vel_type\030\005 \001(\0162\023.proto.GCGLevelType\"\277\001\n!"
      "GCGStartChallengeByCheckRewardRsp\022\'\n\nlev"
      "el_type\030\013 \001(\0162\023.proto.GCGLevelType\022\020\n\010le"
      "vel_id\030\002 \001(\r\022\017\n\007retcode\030\004 \001(\005\022\032\n\022exceede"
      "d_item_list\030\001 \003(\r\022\021\n\tconfig_id\030\n \001(\r\022\037\n\027"
      "exceeded_item_type_list\030\016 \003(\r\"D\n\014GCGLeve"
      "lData\022\"\n\032finished_challenge_id_list\030\n \003("
      "\r\022\020\n\010level_id\030\t \001(\r\"@\n\024GCGBossChallengeD"
      "ata\022\n\n\002id\030\t \001(\r\022\034\n\024unlock_level_id_list\030"
      "\016 \003(\r\"\250\001\n\027GCGLevelChallengeNotify\022\?\n\032unl"
      "ock_boss_challenge_list\030\003 \003(\0132\033.proto.GC"
      "GBossChallengeData\022#\n\033unlock_world_chall"
      "enge_list\030\010 \003(\r\022\'\n\nlevel_list\030\n \003(\0132\023.pr"
      "oto.GCGLevelData\"U\n\035GCGLevelChallengeFin"
      "ishNotify\022\"\n\032finished_challenge_id_list\030"
      "\n \003(\r\022\020\n\010level_id\030\017 \001(\r\"7\n\035GCGWorldChall"
      "engeUnlockNotify\022\026\n\016unlock_id_list\030\010 \003(\r"
      "\"S\n\034GCGBossChallengeUpdateNotify\0223\n\016boss"
      "_challenge\030\013 \001(\0132\033.proto.GCGBossChalleng"
      "eData\"6\n\035GCGLevelChallengeDeleteNotify\022\025"
      "\n\rlevel_id_list\030\r \003(\r*r\n\024GCGSkillHpChang"
      "eType\022\034\n\030GCG_SKILL_HP_CHANGE_NONE\020\000\022\036\n\032G"
      "CG_SKILL_HP_CHANGE_DAMAGE\020\001\022\034\n\030GCG_SKILL"
      "_HP_CHANGE_HEAL\020\002*|\n\017GCGSettleOption\022\027\n\023"
      "GCG_SETTLE_OPT_NONE\020\000\022\027\n\023GCG_SETTLE_OPT_"
      "EXIT\020\001\022\033\n\027GCG_SETTLE_OPT_CONTINUE\020\002\022\032\n\026G"
      "CG_SETTLE_OPT_RESTART\020\003B(Z&github.com/te"
      "yvat-helper/hk4e-proto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 20353);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_gcg.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
  ::proto::protobuf_cmd_2fcmd_5fgcg_5fcommon_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fgcg_2eproto

const ::google::protobuf::EnumDescriptor* GCGGameCreateFailReasonNotify_GCGGameCreateReason_descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_enum_descriptors[0];
}
bool GCGGameCreateFailReasonNotify_GCGGameCreateReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::REASON_NONE;
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::REASON_GAME_MAX;
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::REASON_CLIENT_VERSION_NOT_LASTEST;
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::REASON_RESOURCE_NOT_COMPLETE;
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::REASON_TIMEOUT;
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::GCGGameCreateReason_MIN;
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::GCGGameCreateReason_MAX;
const int GCGGameCreateFailReasonNotify::GCGGameCreateReason_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GCGSkillHpChangeType_descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_enum_descriptors[1];
}
bool GCGSkillHpChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GCGSettleOption_descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_enum_descriptors[2];
}
bool GCGSettleOption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

GCGAttackCostInfo::GCGAttackCostInfo_CostMapEntry::GCGAttackCostInfo_CostMapEntry() {}
GCGAttackCostInfo::GCGAttackCostInfo_CostMapEntry::GCGAttackCostInfo_CostMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGAttackCostInfo::GCGAttackCostInfo_CostMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[0];
}
void GCGAttackCostInfo::GCGAttackCostInfo_CostMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGAttackCostInfo::GCGAttackCostInfo_CostMapEntry::MergeFrom(const GCGAttackCostInfo_CostMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGAttackCostInfo::kSkillIdFieldNumber;
const int GCGAttackCostInfo::kCostMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGAttackCostInfo::GCGAttackCostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGAttackCostInfo)
}
GCGAttackCostInfo::GCGAttackCostInfo(const GCGAttackCostInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_map_.MergeFrom(from.cost_map_);
  skill_id_ = from.skill_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGAttackCostInfo)
}

void GCGAttackCostInfo::SharedCtor() {
  skill_id_ = 0u;
  _cached_size_ = 0;
}

GCGAttackCostInfo::~GCGAttackCostInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGAttackCostInfo)
  SharedDtor();
}

void GCGAttackCostInfo::SharedDtor() {
}

void GCGAttackCostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGAttackCostInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGAttackCostInfo& GCGAttackCostInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGAttackCostInfo* GCGAttackCostInfo::New(::google::protobuf::Arena* arena) const {
  GCGAttackCostInfo* n = new GCGAttackCostInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGAttackCostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGAttackCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_map_.Clear();
  skill_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGAttackCostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGAttackCostInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> cost_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          GCGAttackCostInfo_CostMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGAttackCostInfo_CostMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&cost_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGAttackCostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGAttackCostInfo)
  return false;
#undef DO_
}

void GCGAttackCostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGAttackCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> cost_map = 3;
  if (!this->cost_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->cost_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cost_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGAttackCostInfo_CostMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cost_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGAttackCostInfo_CostMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it) {
        entry.reset(cost_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // uint32 skill_id = 8;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGAttackCostInfo)
}

::google::protobuf::uint8* GCGAttackCostInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGAttackCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> cost_map = 3;
  if (!this->cost_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->cost_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cost_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGAttackCostInfo_CostMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cost_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGAttackCostInfo_CostMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it) {
        entry.reset(cost_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 skill_id = 8;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGAttackCostInfo)
  return target;
}

size_t GCGAttackCostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGAttackCostInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> cost_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cost_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGAttackCostInfo_CostMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->cost_map().begin();
        it != this->cost_map().end(); ++it) {
      entry.reset(cost_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 skill_id = 8;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGAttackCostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGAttackCostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGAttackCostInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGAttackCostInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGAttackCostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGAttackCostInfo)
    MergeFrom(*source);
  }
}

void GCGAttackCostInfo::MergeFrom(const GCGAttackCostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGAttackCostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_map_.MergeFrom(from.cost_map_);
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGAttackCostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGAttackCostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGAttackCostInfo::CopyFrom(const GCGAttackCostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGAttackCostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGAttackCostInfo::IsInitialized() const {
  return true;
}

void GCGAttackCostInfo::Swap(GCGAttackCostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGAttackCostInfo::InternalSwap(GCGAttackCostInfo* other) {
  using std::swap;
  cost_map_.Swap(&other->cost_map_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGAttackCostInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGAttackCostInfo

// uint32 skill_id = 8;
void GCGAttackCostInfo::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGAttackCostInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGAttackCostInfo.skill_id)
  return skill_id_;
}
void GCGAttackCostInfo::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGAttackCostInfo.skill_id)
}

// map<uint32, uint32> cost_map = 3;
int GCGAttackCostInfo::cost_map_size() const {
  return cost_map_.size();
}
void GCGAttackCostInfo::clear_cost_map() {
  cost_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGAttackCostInfo::cost_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGAttackCostInfo.cost_map)
  return cost_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGAttackCostInfo::mutable_cost_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGAttackCostInfo.cost_map)
  return cost_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGPlayCardCostInfo::GCGPlayCardCostInfo_CostMapEntry::GCGPlayCardCostInfo_CostMapEntry() {}
GCGPlayCardCostInfo::GCGPlayCardCostInfo_CostMapEntry::GCGPlayCardCostInfo_CostMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGPlayCardCostInfo::GCGPlayCardCostInfo_CostMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[2];
}
void GCGPlayCardCostInfo::GCGPlayCardCostInfo_CostMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGPlayCardCostInfo::GCGPlayCardCostInfo_CostMapEntry::MergeFrom(const GCGPlayCardCostInfo_CostMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGPlayCardCostInfo::kCostMapFieldNumber;
const int GCGPlayCardCostInfo::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGPlayCardCostInfo::GCGPlayCardCostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGPlayCardCostInfo)
}
GCGPlayCardCostInfo::GCGPlayCardCostInfo(const GCGPlayCardCostInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_map_.MergeFrom(from.cost_map_);
  card_id_ = from.card_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGPlayCardCostInfo)
}

void GCGPlayCardCostInfo::SharedCtor() {
  card_id_ = 0u;
  _cached_size_ = 0;
}

GCGPlayCardCostInfo::~GCGPlayCardCostInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGPlayCardCostInfo)
  SharedDtor();
}

void GCGPlayCardCostInfo::SharedDtor() {
}

void GCGPlayCardCostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGPlayCardCostInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGPlayCardCostInfo& GCGPlayCardCostInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGPlayCardCostInfo* GCGPlayCardCostInfo::New(::google::protobuf::Arena* arena) const {
  GCGPlayCardCostInfo* n = new GCGPlayCardCostInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGPlayCardCostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGPlayCardCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_map_.Clear();
  card_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGPlayCardCostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGPlayCardCostInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> cost_map = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          GCGPlayCardCostInfo_CostMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGPlayCardCostInfo_CostMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&cost_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGPlayCardCostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGPlayCardCostInfo)
  return false;
#undef DO_
}

void GCGPlayCardCostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGPlayCardCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_id(), output);
  }

  // map<uint32, uint32> cost_map = 14;
  if (!this->cost_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->cost_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cost_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPlayCardCostInfo_CostMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cost_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPlayCardCostInfo_CostMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it) {
        entry.reset(cost_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGPlayCardCostInfo)
}

::google::protobuf::uint8* GCGPlayCardCostInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGPlayCardCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_id(), target);
  }

  // map<uint32, uint32> cost_map = 14;
  if (!this->cost_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->cost_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cost_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPlayCardCostInfo_CostMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cost_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPlayCardCostInfo_CostMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it) {
        entry.reset(cost_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGPlayCardCostInfo)
  return target;
}

size_t GCGPlayCardCostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGPlayCardCostInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> cost_map = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cost_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGPlayCardCostInfo_CostMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->cost_map().begin();
        it != this->cost_map().end(); ++it) {
      entry.reset(cost_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 card_id = 1;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGPlayCardCostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGPlayCardCostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGPlayCardCostInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGPlayCardCostInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGPlayCardCostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGPlayCardCostInfo)
    MergeFrom(*source);
  }
}

void GCGPlayCardCostInfo::MergeFrom(const GCGPlayCardCostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGPlayCardCostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_map_.MergeFrom(from.cost_map_);
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void GCGPlayCardCostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGPlayCardCostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGPlayCardCostInfo::CopyFrom(const GCGPlayCardCostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGPlayCardCostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGPlayCardCostInfo::IsInitialized() const {
  return true;
}

void GCGPlayCardCostInfo::Swap(GCGPlayCardCostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGPlayCardCostInfo::InternalSwap(GCGPlayCardCostInfo* other) {
  using std::swap;
  cost_map_.Swap(&other->cost_map_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGPlayCardCostInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGPlayCardCostInfo

// map<uint32, uint32> cost_map = 14;
int GCGPlayCardCostInfo::cost_map_size() const {
  return cost_map_.size();
}
void GCGPlayCardCostInfo::clear_cost_map() {
  cost_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGPlayCardCostInfo::cost_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPlayCardCostInfo.cost_map)
  return cost_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGPlayCardCostInfo::mutable_cost_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPlayCardCostInfo.cost_map)
  return cost_map_.MutableMap();
}

// uint32 card_id = 1;
void GCGPlayCardCostInfo::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGPlayCardCostInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayCardCostInfo.card_id)
  return card_id_;
}
void GCGPlayCardCostInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayCardCostInfo.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo_CostMapEntry::GCGSelectOnStageCostInfo_CostMapEntry() {}
GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo_CostMapEntry::GCGSelectOnStageCostInfo_CostMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo_CostMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[4];
}
void GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo_CostMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo_CostMapEntry::MergeFrom(const GCGSelectOnStageCostInfo_CostMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSelectOnStageCostInfo::kCostMapFieldNumber;
const int GCGSelectOnStageCostInfo::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSelectOnStageCostInfo)
}
GCGSelectOnStageCostInfo::GCGSelectOnStageCostInfo(const GCGSelectOnStageCostInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cost_map_.MergeFrom(from.cost_map_);
  card_guid_ = from.card_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGSelectOnStageCostInfo)
}

void GCGSelectOnStageCostInfo::SharedCtor() {
  card_guid_ = 0u;
  _cached_size_ = 0;
}

GCGSelectOnStageCostInfo::~GCGSelectOnStageCostInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSelectOnStageCostInfo)
  SharedDtor();
}

void GCGSelectOnStageCostInfo::SharedDtor() {
}

void GCGSelectOnStageCostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSelectOnStageCostInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSelectOnStageCostInfo& GCGSelectOnStageCostInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSelectOnStageCostInfo* GCGSelectOnStageCostInfo::New(::google::protobuf::Arena* arena) const {
  GCGSelectOnStageCostInfo* n = new GCGSelectOnStageCostInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSelectOnStageCostInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSelectOnStageCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_map_.Clear();
  card_guid_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGSelectOnStageCostInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSelectOnStageCostInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> cost_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          GCGSelectOnStageCostInfo_CostMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGSelectOnStageCostInfo_CostMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&cost_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSelectOnStageCostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSelectOnStageCostInfo)
  return false;
#undef DO_
}

void GCGSelectOnStageCostInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSelectOnStageCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> cost_map = 8;
  if (!this->cost_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->cost_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cost_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSelectOnStageCostInfo_CostMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cost_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSelectOnStageCostInfo_CostMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it) {
        entry.reset(cost_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // uint32 card_guid = 9;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSelectOnStageCostInfo)
}

::google::protobuf::uint8* GCGSelectOnStageCostInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSelectOnStageCostInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> cost_map = 8;
  if (!this->cost_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->cost_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->cost_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSelectOnStageCostInfo_CostMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(cost_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSelectOnStageCostInfo_CostMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->cost_map().begin();
          it != this->cost_map().end(); ++it) {
        entry.reset(cost_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 card_guid = 9;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSelectOnStageCostInfo)
  return target;
}

size_t GCGSelectOnStageCostInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSelectOnStageCostInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> cost_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->cost_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGSelectOnStageCostInfo_CostMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->cost_map().begin();
        it != this->cost_map().end(); ++it) {
      entry.reset(cost_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 card_guid = 9;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSelectOnStageCostInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSelectOnStageCostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSelectOnStageCostInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSelectOnStageCostInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSelectOnStageCostInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSelectOnStageCostInfo)
    MergeFrom(*source);
  }
}

void GCGSelectOnStageCostInfo::MergeFrom(const GCGSelectOnStageCostInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSelectOnStageCostInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_map_.MergeFrom(from.cost_map_);
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
}

void GCGSelectOnStageCostInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSelectOnStageCostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSelectOnStageCostInfo::CopyFrom(const GCGSelectOnStageCostInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSelectOnStageCostInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSelectOnStageCostInfo::IsInitialized() const {
  return true;
}

void GCGSelectOnStageCostInfo::Swap(GCGSelectOnStageCostInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSelectOnStageCostInfo::InternalSwap(GCGSelectOnStageCostInfo* other) {
  using std::swap;
  cost_map_.Swap(&other->cost_map_);
  swap(card_guid_, other->card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSelectOnStageCostInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSelectOnStageCostInfo

// map<uint32, uint32> cost_map = 8;
int GCGSelectOnStageCostInfo::cost_map_size() const {
  return cost_map_.size();
}
void GCGSelectOnStageCostInfo::clear_cost_map() {
  cost_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGSelectOnStageCostInfo::cost_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSelectOnStageCostInfo.cost_map)
  return cost_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGSelectOnStageCostInfo::mutable_cost_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSelectOnStageCostInfo.cost_map)
  return cost_map_.MutableMap();
}

// uint32 card_guid = 9;
void GCGSelectOnStageCostInfo::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSelectOnStageCostInfo::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSelectOnStageCostInfo.card_guid)
  return card_guid_;
}
void GCGSelectOnStageCostInfo::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSelectOnStageCostInfo.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGCostReviseInfo::kIsCanAttackFieldNumber;
const int GCGCostReviseInfo::kCanUseHandCardIdListFieldNumber;
const int GCGCostReviseInfo::kPlayCardCostListFieldNumber;
const int GCGCostReviseInfo::kSelectOnStageCostListFieldNumber;
const int GCGCostReviseInfo::kAttackCostListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGCostReviseInfo::GCGCostReviseInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGCostReviseInfo)
}
GCGCostReviseInfo::GCGCostReviseInfo(const GCGCostReviseInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      attack_cost_list_(from.attack_cost_list_),
      play_card_cost_list_(from.play_card_cost_list_),
      select_on_stage_cost_list_(from.select_on_stage_cost_list_),
      can_use_hand_card_id_list_(from.can_use_hand_card_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_can_attack_ = from.is_can_attack_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGCostReviseInfo)
}

void GCGCostReviseInfo::SharedCtor() {
  is_can_attack_ = false;
  _cached_size_ = 0;
}

GCGCostReviseInfo::~GCGCostReviseInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGCostReviseInfo)
  SharedDtor();
}

void GCGCostReviseInfo::SharedDtor() {
}

void GCGCostReviseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGCostReviseInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGCostReviseInfo& GCGCostReviseInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGCostReviseInfo* GCGCostReviseInfo::New(::google::protobuf::Arena* arena) const {
  GCGCostReviseInfo* n = new GCGCostReviseInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGCostReviseInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGCostReviseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attack_cost_list_.Clear();
  play_card_cost_list_.Clear();
  select_on_stage_cost_list_.Clear();
  can_use_hand_card_id_list_.Clear();
  is_can_attack_ = false;
  _internal_metadata_.Clear();
}

bool GCGCostReviseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGCostReviseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGAttackCostInfo attack_cost_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attack_cost_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_can_attack = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_can_attack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGPlayCardCostInfo play_card_cost_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_play_card_cost_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSelectOnStageCostInfo select_on_stage_cost_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_select_on_stage_cost_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 can_use_hand_card_id_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_can_use_hand_card_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_can_use_hand_card_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGCostReviseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGCostReviseInfo)
  return false;
#undef DO_
}

void GCGCostReviseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGCostReviseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGAttackCostInfo attack_cost_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attack_cost_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attack_cost_list(static_cast<int>(i)), output);
  }

  // bool is_can_attack = 4;
  if (this->is_can_attack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_can_attack(), output);
  }

  // repeated .proto.GCGPlayCardCostInfo play_card_cost_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_card_cost_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->play_card_cost_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGSelectOnStageCostInfo select_on_stage_cost_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->select_on_stage_cost_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->select_on_stage_cost_list(static_cast<int>(i)), output);
  }

  // repeated uint32 can_use_hand_card_id_list = 11;
  if (this->can_use_hand_card_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _can_use_hand_card_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->can_use_hand_card_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->can_use_hand_card_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGCostReviseInfo)
}

::google::protobuf::uint8* GCGCostReviseInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGCostReviseInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGAttackCostInfo attack_cost_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attack_cost_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->attack_cost_list(static_cast<int>(i)), deterministic, target);
  }

  // bool is_can_attack = 4;
  if (this->is_can_attack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_can_attack(), target);
  }

  // repeated .proto.GCGPlayCardCostInfo play_card_cost_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_card_cost_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->play_card_cost_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGSelectOnStageCostInfo select_on_stage_cost_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->select_on_stage_cost_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->select_on_stage_cost_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 can_use_hand_card_id_list = 11;
  if (this->can_use_hand_card_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _can_use_hand_card_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->can_use_hand_card_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGCostReviseInfo)
  return target;
}

size_t GCGCostReviseInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGCostReviseInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGAttackCostInfo attack_cost_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->attack_cost_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attack_cost_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGPlayCardCostInfo play_card_cost_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->play_card_cost_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_card_cost_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGSelectOnStageCostInfo select_on_stage_cost_list = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->select_on_stage_cost_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->select_on_stage_cost_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 can_use_hand_card_id_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->can_use_hand_card_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _can_use_hand_card_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool is_can_attack = 4;
  if (this->is_can_attack() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGCostReviseInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGCostReviseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGCostReviseInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGCostReviseInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGCostReviseInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGCostReviseInfo)
    MergeFrom(*source);
  }
}

void GCGCostReviseInfo::MergeFrom(const GCGCostReviseInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGCostReviseInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attack_cost_list_.MergeFrom(from.attack_cost_list_);
  play_card_cost_list_.MergeFrom(from.play_card_cost_list_);
  select_on_stage_cost_list_.MergeFrom(from.select_on_stage_cost_list_);
  can_use_hand_card_id_list_.MergeFrom(from.can_use_hand_card_id_list_);
  if (from.is_can_attack() != 0) {
    set_is_can_attack(from.is_can_attack());
  }
}

void GCGCostReviseInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGCostReviseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGCostReviseInfo::CopyFrom(const GCGCostReviseInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGCostReviseInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGCostReviseInfo::IsInitialized() const {
  return true;
}

void GCGCostReviseInfo::Swap(GCGCostReviseInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGCostReviseInfo::InternalSwap(GCGCostReviseInfo* other) {
  using std::swap;
  attack_cost_list_.InternalSwap(&other->attack_cost_list_);
  play_card_cost_list_.InternalSwap(&other->play_card_cost_list_);
  select_on_stage_cost_list_.InternalSwap(&other->select_on_stage_cost_list_);
  can_use_hand_card_id_list_.InternalSwap(&other->can_use_hand_card_id_list_);
  swap(is_can_attack_, other->is_can_attack_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGCostReviseInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGCostReviseInfo

// bool is_can_attack = 4;
void GCGCostReviseInfo::clear_is_can_attack() {
  is_can_attack_ = false;
}
bool GCGCostReviseInfo::is_can_attack() const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.is_can_attack)
  return is_can_attack_;
}
void GCGCostReviseInfo::set_is_can_attack(bool value) {
  
  is_can_attack_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCostReviseInfo.is_can_attack)
}

// repeated uint32 can_use_hand_card_id_list = 11;
int GCGCostReviseInfo::can_use_hand_card_id_list_size() const {
  return can_use_hand_card_id_list_.size();
}
void GCGCostReviseInfo::clear_can_use_hand_card_id_list() {
  can_use_hand_card_id_list_.Clear();
}
::google::protobuf::uint32 GCGCostReviseInfo::can_use_hand_card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
  return can_use_hand_card_id_list_.Get(index);
}
void GCGCostReviseInfo::set_can_use_hand_card_id_list(int index, ::google::protobuf::uint32 value) {
  can_use_hand_card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
}
void GCGCostReviseInfo::add_can_use_hand_card_id_list(::google::protobuf::uint32 value) {
  can_use_hand_card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGCostReviseInfo::can_use_hand_card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
  return can_use_hand_card_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGCostReviseInfo::mutable_can_use_hand_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
  return &can_use_hand_card_id_list_;
}

// repeated .proto.GCGPlayCardCostInfo play_card_cost_list = 5;
int GCGCostReviseInfo::play_card_cost_list_size() const {
  return play_card_cost_list_.size();
}
void GCGCostReviseInfo::clear_play_card_cost_list() {
  play_card_cost_list_.Clear();
}
const ::proto::GCGPlayCardCostInfo& GCGCostReviseInfo::play_card_cost_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_.Get(index);
}
::proto::GCGPlayCardCostInfo* GCGCostReviseInfo::mutable_play_card_cost_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_.Mutable(index);
}
::proto::GCGPlayCardCostInfo* GCGCostReviseInfo::add_play_card_cost_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGPlayCardCostInfo >*
GCGCostReviseInfo::mutable_play_card_cost_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.play_card_cost_list)
  return &play_card_cost_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayCardCostInfo >&
GCGCostReviseInfo::play_card_cost_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_;
}

// repeated .proto.GCGSelectOnStageCostInfo select_on_stage_cost_list = 10;
int GCGCostReviseInfo::select_on_stage_cost_list_size() const {
  return select_on_stage_cost_list_.size();
}
void GCGCostReviseInfo::clear_select_on_stage_cost_list() {
  select_on_stage_cost_list_.Clear();
}
const ::proto::GCGSelectOnStageCostInfo& GCGCostReviseInfo::select_on_stage_cost_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_.Get(index);
}
::proto::GCGSelectOnStageCostInfo* GCGCostReviseInfo::mutable_select_on_stage_cost_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_.Mutable(index);
}
::proto::GCGSelectOnStageCostInfo* GCGCostReviseInfo::add_select_on_stage_cost_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSelectOnStageCostInfo >*
GCGCostReviseInfo::mutable_select_on_stage_cost_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return &select_on_stage_cost_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSelectOnStageCostInfo >&
GCGCostReviseInfo::select_on_stage_cost_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_;
}

// repeated .proto.GCGAttackCostInfo attack_cost_list = 2;
int GCGCostReviseInfo::attack_cost_list_size() const {
  return attack_cost_list_.size();
}
void GCGCostReviseInfo::clear_attack_cost_list() {
  attack_cost_list_.Clear();
}
const ::proto::GCGAttackCostInfo& GCGCostReviseInfo::attack_cost_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_.Get(index);
}
::proto::GCGAttackCostInfo* GCGCostReviseInfo::mutable_attack_cost_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_.Mutable(index);
}
::proto::GCGAttackCostInfo* GCGCostReviseInfo::add_attack_cost_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGAttackCostInfo >*
GCGCostReviseInfo::mutable_attack_cost_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.attack_cost_list)
  return &attack_cost_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGAttackCostInfo >&
GCGCostReviseInfo::attack_cost_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgTokenChange::kBeforeFieldNumber;
const int GCGMsgTokenChange::kTokenTypeFieldNumber;
const int GCGMsgTokenChange::kCardGuidFieldNumber;
const int GCGMsgTokenChange::kAfterFieldNumber;
const int GCGMsgTokenChange::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgTokenChange::GCGMsgTokenChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgTokenChange)
}
GCGMsgTokenChange::GCGMsgTokenChange(const GCGMsgTokenChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_guid_, &from.card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&after_) -
    reinterpret_cast<char*>(&card_guid_)) + sizeof(after_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgTokenChange)
}

void GCGMsgTokenChange::SharedCtor() {
  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&after_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(after_));
  _cached_size_ = 0;
}

GCGMsgTokenChange::~GCGMsgTokenChange() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgTokenChange)
  SharedDtor();
}

void GCGMsgTokenChange::SharedDtor() {
}

void GCGMsgTokenChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgTokenChange::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgTokenChange& GCGMsgTokenChange::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgTokenChange* GCGMsgTokenChange::New(::google::protobuf::Arena* arena) const {
  GCGMsgTokenChange* n = new GCGMsgTokenChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgTokenChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgTokenChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&after_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(after_));
  _internal_metadata_.Clear();
}

bool GCGMsgTokenChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgTokenChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_guid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 token_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 after = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 before = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &before_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgTokenChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgTokenChange)
  return false;
#undef DO_
}

void GCGMsgTokenChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgTokenChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 2;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_guid(), output);
  }

  // uint32 token_type = 4;
  if (this->token_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->token_type(), output);
  }

  // .proto.GCGReason reason = 7;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reason(), output);
  }

  // uint32 after = 11;
  if (this->after() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->after(), output);
  }

  // uint32 before = 13;
  if (this->before() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->before(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgTokenChange)
}

::google::protobuf::uint8* GCGMsgTokenChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgTokenChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 2;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_guid(), target);
  }

  // uint32 token_type = 4;
  if (this->token_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->token_type(), target);
  }

  // .proto.GCGReason reason = 7;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reason(), target);
  }

  // uint32 after = 11;
  if (this->after() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->after(), target);
  }

  // uint32 before = 13;
  if (this->before() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->before(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgTokenChange)
  return target;
}

size_t GCGMsgTokenChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgTokenChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_guid = 2;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // uint32 token_type = 4;
  if (this->token_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token_type());
  }

  // uint32 before = 13;
  if (this->before() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->before());
  }

  // .proto.GCGReason reason = 7;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 after = 11;
  if (this->after() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->after());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgTokenChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgTokenChange)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgTokenChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgTokenChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgTokenChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgTokenChange)
    MergeFrom(*source);
  }
}

void GCGMsgTokenChange::MergeFrom(const GCGMsgTokenChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgTokenChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.token_type() != 0) {
    set_token_type(from.token_type());
  }
  if (from.before() != 0) {
    set_before(from.before());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.after() != 0) {
    set_after(from.after());
  }
}

void GCGMsgTokenChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgTokenChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgTokenChange::CopyFrom(const GCGMsgTokenChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgTokenChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgTokenChange::IsInitialized() const {
  return true;
}

void GCGMsgTokenChange::Swap(GCGMsgTokenChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgTokenChange::InternalSwap(GCGMsgTokenChange* other) {
  using std::swap;
  swap(card_guid_, other->card_guid_);
  swap(token_type_, other->token_type_);
  swap(before_, other->before_);
  swap(reason_, other->reason_);
  swap(after_, other->after_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgTokenChange::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgTokenChange

// uint32 before = 13;
void GCGMsgTokenChange::clear_before() {
  before_ = 0u;
}
::google::protobuf::uint32 GCGMsgTokenChange::before() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.before)
  return before_;
}
void GCGMsgTokenChange::set_before(::google::protobuf::uint32 value) {
  
  before_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.before)
}

// uint32 token_type = 4;
void GCGMsgTokenChange::clear_token_type() {
  token_type_ = 0u;
}
::google::protobuf::uint32 GCGMsgTokenChange::token_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.token_type)
  return token_type_;
}
void GCGMsgTokenChange::set_token_type(::google::protobuf::uint32 value) {
  
  token_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.token_type)
}

// uint32 card_guid = 2;
void GCGMsgTokenChange::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgTokenChange::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.card_guid)
  return card_guid_;
}
void GCGMsgTokenChange::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.card_guid)
}

// uint32 after = 11;
void GCGMsgTokenChange::clear_after() {
  after_ = 0u;
}
::google::protobuf::uint32 GCGMsgTokenChange::after() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.after)
  return after_;
}
void GCGMsgTokenChange::set_after(::google::protobuf::uint32 value) {
  
  after_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.after)
}

// .proto.GCGReason reason = 7;
void GCGMsgTokenChange::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgTokenChange::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgTokenChange::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGMsgPhaseChange::GCGMsgPhaseChange_AllowControllerMapEntry::GCGMsgPhaseChange_AllowControllerMapEntry() {}
GCGMsgPhaseChange::GCGMsgPhaseChange_AllowControllerMapEntry::GCGMsgPhaseChange_AllowControllerMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGMsgPhaseChange::GCGMsgPhaseChange_AllowControllerMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[8];
}
void GCGMsgPhaseChange::GCGMsgPhaseChange_AllowControllerMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGMsgPhaseChange::GCGMsgPhaseChange_AllowControllerMapEntry::MergeFrom(const GCGMsgPhaseChange_AllowControllerMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgPhaseChange::kAllowControllerMapFieldNumber;
const int GCGMsgPhaseChange::kBeforePhaseFieldNumber;
const int GCGMsgPhaseChange::kAfterPhaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgPhaseChange::GCGMsgPhaseChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgPhaseChange)
}
GCGMsgPhaseChange::GCGMsgPhaseChange(const GCGMsgPhaseChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allow_controller_map_.MergeFrom(from.allow_controller_map_);
  ::memcpy(&after_phase_, &from.after_phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&before_phase_) -
    reinterpret_cast<char*>(&after_phase_)) + sizeof(before_phase_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgPhaseChange)
}

void GCGMsgPhaseChange::SharedCtor() {
  ::memset(&after_phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&before_phase_) -
      reinterpret_cast<char*>(&after_phase_)) + sizeof(before_phase_));
  _cached_size_ = 0;
}

GCGMsgPhaseChange::~GCGMsgPhaseChange() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgPhaseChange)
  SharedDtor();
}

void GCGMsgPhaseChange::SharedDtor() {
}

void GCGMsgPhaseChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgPhaseChange::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgPhaseChange& GCGMsgPhaseChange::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgPhaseChange* GCGMsgPhaseChange::New(::google::protobuf::Arena* arena) const {
  GCGMsgPhaseChange* n = new GCGMsgPhaseChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgPhaseChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgPhaseChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_controller_map_.Clear();
  ::memset(&after_phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&before_phase_) -
      reinterpret_cast<char*>(&after_phase_)) + sizeof(before_phase_));
  _internal_metadata_.Clear();
}

bool GCGMsgPhaseChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgPhaseChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGPhaseType after_phase = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_after_phase(static_cast< ::proto::GCGPhaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGPhaseType before_phase = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_before_phase(static_cast< ::proto::GCGPhaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> allow_controller_map = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          GCGMsgPhaseChange_AllowControllerMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGMsgPhaseChange_AllowControllerMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&allow_controller_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgPhaseChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgPhaseChange)
  return false;
#undef DO_
}

void GCGMsgPhaseChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgPhaseChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGPhaseType after_phase = 5;
  if (this->after_phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->after_phase(), output);
  }

  // .proto.GCGPhaseType before_phase = 12;
  if (this->before_phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->before_phase(), output);
  }

  // map<uint32, uint32> allow_controller_map = 15;
  if (!this->allow_controller_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->allow_controller_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->allow_controller_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgPhaseChange_AllowControllerMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgPhaseChange_AllowControllerMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgPhaseChange)
}

::google::protobuf::uint8* GCGMsgPhaseChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgPhaseChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGPhaseType after_phase = 5;
  if (this->after_phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->after_phase(), target);
  }

  // .proto.GCGPhaseType before_phase = 12;
  if (this->before_phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->before_phase(), target);
  }

  // map<uint32, uint32> allow_controller_map = 15;
  if (!this->allow_controller_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->allow_controller_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->allow_controller_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgPhaseChange_AllowControllerMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgPhaseChange_AllowControllerMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgPhaseChange)
  return target;
}

size_t GCGMsgPhaseChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgPhaseChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> allow_controller_map = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_controller_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGMsgPhaseChange_AllowControllerMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->allow_controller_map().begin();
        it != this->allow_controller_map().end(); ++it) {
      entry.reset(allow_controller_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .proto.GCGPhaseType after_phase = 5;
  if (this->after_phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->after_phase());
  }

  // .proto.GCGPhaseType before_phase = 12;
  if (this->before_phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->before_phase());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgPhaseChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgPhaseChange)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgPhaseChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgPhaseChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgPhaseChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgPhaseChange)
    MergeFrom(*source);
  }
}

void GCGMsgPhaseChange::MergeFrom(const GCGMsgPhaseChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgPhaseChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_controller_map_.MergeFrom(from.allow_controller_map_);
  if (from.after_phase() != 0) {
    set_after_phase(from.after_phase());
  }
  if (from.before_phase() != 0) {
    set_before_phase(from.before_phase());
  }
}

void GCGMsgPhaseChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgPhaseChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgPhaseChange::CopyFrom(const GCGMsgPhaseChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgPhaseChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgPhaseChange::IsInitialized() const {
  return true;
}

void GCGMsgPhaseChange::Swap(GCGMsgPhaseChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgPhaseChange::InternalSwap(GCGMsgPhaseChange* other) {
  using std::swap;
  allow_controller_map_.Swap(&other->allow_controller_map_);
  swap(after_phase_, other->after_phase_);
  swap(before_phase_, other->before_phase_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgPhaseChange::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgPhaseChange

// map<uint32, uint32> allow_controller_map = 15;
int GCGMsgPhaseChange::allow_controller_map_size() const {
  return allow_controller_map_.size();
}
void GCGMsgPhaseChange::clear_allow_controller_map() {
  allow_controller_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGMsgPhaseChange::allow_controller_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgPhaseChange.allow_controller_map)
  return allow_controller_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGMsgPhaseChange::mutable_allow_controller_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgPhaseChange.allow_controller_map)
  return allow_controller_map_.MutableMap();
}

// .proto.GCGPhaseType before_phase = 12;
void GCGMsgPhaseChange::clear_before_phase() {
  before_phase_ = 0;
}
::proto::GCGPhaseType GCGMsgPhaseChange::before_phase() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPhaseChange.before_phase)
  return static_cast< ::proto::GCGPhaseType >(before_phase_);
}
void GCGMsgPhaseChange::set_before_phase(::proto::GCGPhaseType value) {
  
  before_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPhaseChange.before_phase)
}

// .proto.GCGPhaseType after_phase = 5;
void GCGMsgPhaseChange::clear_after_phase() {
  after_phase_ = 0;
}
::proto::GCGPhaseType GCGMsgPhaseChange::after_phase() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPhaseChange.after_phase)
  return static_cast< ::proto::GCGPhaseType >(after_phase_);
}
void GCGMsgPhaseChange::set_after_phase(::proto::GCGPhaseType value) {
  
  after_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPhaseChange.after_phase)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgAddCards::kPosFieldNumber;
const int GCGMsgAddCards::kZoneFieldNumber;
const int GCGMsgAddCards::kReasonFieldNumber;
const int GCGMsgAddCards::kControllerIdFieldNumber;
const int GCGMsgAddCards::kCardGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgAddCards::GCGMsgAddCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgAddCards)
}
GCGMsgAddCards::GCGMsgAddCards(const GCGMsgAddCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_guid_list_(from.card_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zone_, &from.zone_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&zone_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgAddCards)
}

void GCGMsgAddCards::SharedCtor() {
  ::memset(&zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&zone_)) + sizeof(reason_));
  _cached_size_ = 0;
}

GCGMsgAddCards::~GCGMsgAddCards() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgAddCards)
  SharedDtor();
}

void GCGMsgAddCards::SharedDtor() {
}

void GCGMsgAddCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgAddCards::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgAddCards& GCGMsgAddCards::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgAddCards* GCGMsgAddCards::New(::google::protobuf::Arena* arena) const {
  GCGMsgAddCards* n = new GCGMsgAddCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgAddCards::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgAddCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_guid_list_.Clear();
  ::memset(&zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&zone_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool GCGMsgAddCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgAddCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGZoneType zone = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_zone(static_cast< ::proto::GCGZoneType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pos = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 card_guid_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_card_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgAddCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgAddCards)
  return false;
#undef DO_
}

void GCGMsgAddCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgAddCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGZoneType zone = 2;
  if (this->zone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->zone(), output);
  }

  // uint32 pos = 11;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->pos(), output);
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->controller_id(), output);
  }

  // repeated uint32 card_guid_list = 14;
  if (this->card_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_guid_list(i), output);
  }

  // .proto.GCGReason reason = 15;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgAddCards)
}

::google::protobuf::uint8* GCGMsgAddCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgAddCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGZoneType zone = 2;
  if (this->zone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->zone(), target);
  }

  // uint32 pos = 11;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->pos(), target);
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->controller_id(), target);
  }

  // repeated uint32 card_guid_list = 14;
  if (this->card_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_guid_list_, target);
  }

  // .proto.GCGReason reason = 15;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgAddCards)
  return target;
}

size_t GCGMsgAddCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgAddCards)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_guid_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.GCGZoneType zone = 2;
  if (this->zone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());
  }

  // uint32 pos = 11;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // .proto.GCGReason reason = 15;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgAddCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgAddCards)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgAddCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgAddCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgAddCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgAddCards)
    MergeFrom(*source);
  }
}

void GCGMsgAddCards::MergeFrom(const GCGMsgAddCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgAddCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_guid_list_.MergeFrom(from.card_guid_list_);
  if (from.zone() != 0) {
    set_zone(from.zone());
  }
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void GCGMsgAddCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgAddCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgAddCards::CopyFrom(const GCGMsgAddCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgAddCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgAddCards::IsInitialized() const {
  return true;
}

void GCGMsgAddCards::Swap(GCGMsgAddCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgAddCards::InternalSwap(GCGMsgAddCards* other) {
  using std::swap;
  card_guid_list_.InternalSwap(&other->card_guid_list_);
  swap(zone_, other->zone_);
  swap(pos_, other->pos_);
  swap(controller_id_, other->controller_id_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgAddCards::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgAddCards

// uint32 pos = 11;
void GCGMsgAddCards::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 GCGMsgAddCards::pos() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.pos)
  return pos_;
}
void GCGMsgAddCards::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.pos)
}

// .proto.GCGZoneType zone = 2;
void GCGMsgAddCards::clear_zone() {
  zone_ = 0;
}
::proto::GCGZoneType GCGMsgAddCards::zone() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.zone)
  return static_cast< ::proto::GCGZoneType >(zone_);
}
void GCGMsgAddCards::set_zone(::proto::GCGZoneType value) {
  
  zone_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.zone)
}

// .proto.GCGReason reason = 15;
void GCGMsgAddCards::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgAddCards::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgAddCards::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.reason)
}

// uint32 controller_id = 13;
void GCGMsgAddCards::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgAddCards::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.controller_id)
  return controller_id_;
}
void GCGMsgAddCards::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.controller_id)
}

// repeated uint32 card_guid_list = 14;
int GCGMsgAddCards::card_guid_list_size() const {
  return card_guid_list_.size();
}
void GCGMsgAddCards::clear_card_guid_list() {
  card_guid_list_.Clear();
}
::google::protobuf::uint32 GCGMsgAddCards::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.card_guid_list)
  return card_guid_list_.Get(index);
}
void GCGMsgAddCards::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.card_guid_list)
}
void GCGMsgAddCards::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgAddCards.card_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgAddCards::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgAddCards.card_guid_list)
  return card_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgAddCards::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgAddCards.card_guid_list)
  return &card_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgRemoveCards::kControllerIdFieldNumber;
const int GCGMsgRemoveCards::kZoneFieldNumber;
const int GCGMsgRemoveCards::kReasonFieldNumber;
const int GCGMsgRemoveCards::kCardGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgRemoveCards::GCGMsgRemoveCards()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgRemoveCards)
}
GCGMsgRemoveCards::GCGMsgRemoveCards(const GCGMsgRemoveCards& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_guid_list_(from.card_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&zone_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(zone_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgRemoveCards)
}

void GCGMsgRemoveCards::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zone_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(zone_));
  _cached_size_ = 0;
}

GCGMsgRemoveCards::~GCGMsgRemoveCards() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgRemoveCards)
  SharedDtor();
}

void GCGMsgRemoveCards::SharedDtor() {
}

void GCGMsgRemoveCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgRemoveCards::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgRemoveCards& GCGMsgRemoveCards::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgRemoveCards* GCGMsgRemoveCards::New(::google::protobuf::Arena* arena) const {
  GCGMsgRemoveCards* n = new GCGMsgRemoveCards;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgRemoveCards::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgRemoveCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_guid_list_.Clear();
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zone_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(zone_));
  _internal_metadata_.Clear();
}

bool GCGMsgRemoveCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgRemoveCards)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_guid_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_card_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGZoneType zone = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_zone(static_cast< ::proto::GCGZoneType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgRemoveCards)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgRemoveCards)
  return false;
#undef DO_
}

void GCGMsgRemoveCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgRemoveCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_guid_list = 1;
  if (this->card_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_guid_list(i), output);
  }

  // .proto.GCGReason reason = 5;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->reason(), output);
  }

  // .proto.GCGZoneType zone = 10;
  if (this->zone() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->zone(), output);
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgRemoveCards)
}

::google::protobuf::uint8* GCGMsgRemoveCards::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgRemoveCards)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_guid_list = 1;
  if (this->card_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_guid_list_, target);
  }

  // .proto.GCGReason reason = 5;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->reason(), target);
  }

  // .proto.GCGZoneType zone = 10;
  if (this->zone() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->zone(), target);
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgRemoveCards)
  return target;
}

size_t GCGMsgRemoveCards::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgRemoveCards)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_guid_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // .proto.GCGReason reason = 5;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // .proto.GCGZoneType zone = 10;
  if (this->zone() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgRemoveCards::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgRemoveCards)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgRemoveCards* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgRemoveCards>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgRemoveCards)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgRemoveCards)
    MergeFrom(*source);
  }
}

void GCGMsgRemoveCards::MergeFrom(const GCGMsgRemoveCards& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgRemoveCards)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_guid_list_.MergeFrom(from.card_guid_list_);
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.zone() != 0) {
    set_zone(from.zone());
  }
}

void GCGMsgRemoveCards::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgRemoveCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgRemoveCards::CopyFrom(const GCGMsgRemoveCards& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgRemoveCards)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgRemoveCards::IsInitialized() const {
  return true;
}

void GCGMsgRemoveCards::Swap(GCGMsgRemoveCards* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgRemoveCards::InternalSwap(GCGMsgRemoveCards* other) {
  using std::swap;
  card_guid_list_.InternalSwap(&other->card_guid_list_);
  swap(controller_id_, other->controller_id_);
  swap(reason_, other->reason_);
  swap(zone_, other->zone_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgRemoveCards::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgRemoveCards

// uint32 controller_id = 15;
void GCGMsgRemoveCards::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgRemoveCards::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.controller_id)
  return controller_id_;
}
void GCGMsgRemoveCards::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.controller_id)
}

// .proto.GCGZoneType zone = 10;
void GCGMsgRemoveCards::clear_zone() {
  zone_ = 0;
}
::proto::GCGZoneType GCGMsgRemoveCards::zone() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.zone)
  return static_cast< ::proto::GCGZoneType >(zone_);
}
void GCGMsgRemoveCards::set_zone(::proto::GCGZoneType value) {
  
  zone_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.zone)
}

// .proto.GCGReason reason = 5;
void GCGMsgRemoveCards::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgRemoveCards::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgRemoveCards::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.reason)
}

// repeated uint32 card_guid_list = 1;
int GCGMsgRemoveCards::card_guid_list_size() const {
  return card_guid_list_.size();
}
void GCGMsgRemoveCards::clear_card_guid_list() {
  card_guid_list_.Clear();
}
::google::protobuf::uint32 GCGMsgRemoveCards::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.card_guid_list)
  return card_guid_list_.Get(index);
}
void GCGMsgRemoveCards::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.card_guid_list)
}
void GCGMsgRemoveCards::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgRemoveCards.card_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgRemoveCards::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgRemoveCards.card_guid_list)
  return card_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgRemoveCards::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgRemoveCards.card_guid_list)
  return &card_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgMoveCard::kControllerIdFieldNumber;
const int GCGMsgMoveCard::kToFieldNumber;
const int GCGMsgMoveCard::kFromFieldNumber;
const int GCGMsgMoveCard::kCardGuidListFieldNumber;
const int GCGMsgMoveCard::kReasonFieldNumber;
const int GCGMsgMoveCard::kFailGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgMoveCard::GCGMsgMoveCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgMoveCard)
}
GCGMsgMoveCard::GCGMsgMoveCard(const GCGMsgMoveCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_guid_list_(from.card_guid_list_),
      fail_guid_list_(from.fail_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&to_, &from.to_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&to_)) + sizeof(controller_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgMoveCard)
}

void GCGMsgMoveCard::SharedCtor() {
  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&to_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGMsgMoveCard::~GCGMsgMoveCard() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgMoveCard)
  SharedDtor();
}

void GCGMsgMoveCard::SharedDtor() {
}

void GCGMsgMoveCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgMoveCard::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgMoveCard& GCGMsgMoveCard::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgMoveCard* GCGMsgMoveCard::New(::google::protobuf::Arena* arena) const {
  GCGMsgMoveCard* n = new GCGMsgMoveCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgMoveCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgMoveCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_guid_list_.Clear();
  fail_guid_list_.Clear();
  ::memset(&to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&to_)) + sizeof(controller_id_));
  _internal_metadata_.Clear();
}

bool GCGMsgMoveCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgMoveCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGZoneType to = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_to(static_cast< ::proto::GCGZoneType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 card_guid_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_card_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fail_guid_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fail_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_fail_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGZoneType from = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_from(static_cast< ::proto::GCGZoneType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgMoveCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgMoveCard)
  return false;
#undef DO_
}

void GCGMsgMoveCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgMoveCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGZoneType to = 5;
  if (this->to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->to(), output);
  }

  // .proto.GCGReason reason = 6;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reason(), output);
  }

  // repeated uint32 card_guid_list = 8;
  if (this->card_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_guid_list(i), output);
  }

  // repeated uint32 fail_guid_list = 11;
  if (this->fail_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fail_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->fail_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->fail_guid_list(i), output);
  }

  // .proto.GCGZoneType from = 12;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->from(), output);
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgMoveCard)
}

::google::protobuf::uint8* GCGMsgMoveCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgMoveCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGZoneType to = 5;
  if (this->to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->to(), target);
  }

  // .proto.GCGReason reason = 6;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->reason(), target);
  }

  // repeated uint32 card_guid_list = 8;
  if (this->card_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_guid_list_, target);
  }

  // repeated uint32 fail_guid_list = 11;
  if (this->fail_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fail_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->fail_guid_list_, target);
  }

  // .proto.GCGZoneType from = 12;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->from(), target);
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgMoveCard)
  return target;
}

size_t GCGMsgMoveCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgMoveCard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_guid_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 fail_guid_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fail_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fail_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.GCGZoneType to = 5;
  if (this->to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->to());
  }

  // .proto.GCGReason reason = 6;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // .proto.GCGZoneType from = 12;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->from());
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgMoveCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgMoveCard)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgMoveCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgMoveCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgMoveCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgMoveCard)
    MergeFrom(*source);
  }
}

void GCGMsgMoveCard::MergeFrom(const GCGMsgMoveCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgMoveCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_guid_list_.MergeFrom(from.card_guid_list_);
  fail_guid_list_.MergeFrom(from.fail_guid_list_);
  if (from.to() != 0) {
    set_to(from.to());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMsgMoveCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgMoveCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgMoveCard::CopyFrom(const GCGMsgMoveCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgMoveCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgMoveCard::IsInitialized() const {
  return true;
}

void GCGMsgMoveCard::Swap(GCGMsgMoveCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgMoveCard::InternalSwap(GCGMsgMoveCard* other) {
  using std::swap;
  card_guid_list_.InternalSwap(&other->card_guid_list_);
  fail_guid_list_.InternalSwap(&other->fail_guid_list_);
  swap(to_, other->to_);
  swap(reason_, other->reason_);
  swap(from_, other->from_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgMoveCard::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgMoveCard

// uint32 controller_id = 14;
void GCGMsgMoveCard::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgMoveCard::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.controller_id)
  return controller_id_;
}
void GCGMsgMoveCard::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.controller_id)
}

// .proto.GCGZoneType to = 5;
void GCGMsgMoveCard::clear_to() {
  to_ = 0;
}
::proto::GCGZoneType GCGMsgMoveCard::to() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.to)
  return static_cast< ::proto::GCGZoneType >(to_);
}
void GCGMsgMoveCard::set_to(::proto::GCGZoneType value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.to)
}

// .proto.GCGZoneType from = 12;
void GCGMsgMoveCard::clear_from() {
  from_ = 0;
}
::proto::GCGZoneType GCGMsgMoveCard::from() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.from)
  return static_cast< ::proto::GCGZoneType >(from_);
}
void GCGMsgMoveCard::set_from(::proto::GCGZoneType value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.from)
}

// repeated uint32 card_guid_list = 8;
int GCGMsgMoveCard::card_guid_list_size() const {
  return card_guid_list_.size();
}
void GCGMsgMoveCard::clear_card_guid_list() {
  card_guid_list_.Clear();
}
::google::protobuf::uint32 GCGMsgMoveCard::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.card_guid_list)
  return card_guid_list_.Get(index);
}
void GCGMsgMoveCard::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.card_guid_list)
}
void GCGMsgMoveCard::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgMoveCard.card_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgMoveCard::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgMoveCard.card_guid_list)
  return card_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgMoveCard::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgMoveCard.card_guid_list)
  return &card_guid_list_;
}

// .proto.GCGReason reason = 6;
void GCGMsgMoveCard::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgMoveCard::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgMoveCard::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.reason)
}

// repeated uint32 fail_guid_list = 11;
int GCGMsgMoveCard::fail_guid_list_size() const {
  return fail_guid_list_.size();
}
void GCGMsgMoveCard::clear_fail_guid_list() {
  fail_guid_list_.Clear();
}
::google::protobuf::uint32 GCGMsgMoveCard::fail_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.fail_guid_list)
  return fail_guid_list_.Get(index);
}
void GCGMsgMoveCard::set_fail_guid_list(int index, ::google::protobuf::uint32 value) {
  fail_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.fail_guid_list)
}
void GCGMsgMoveCard::add_fail_guid_list(::google::protobuf::uint32 value) {
  fail_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgMoveCard.fail_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgMoveCard::fail_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgMoveCard.fail_guid_list)
  return fail_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgMoveCard::mutable_fail_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgMoveCard.fail_guid_list)
  return &fail_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgSelectOnStage::kControllerIdFieldNumber;
const int GCGMsgSelectOnStage::kReasonFieldNumber;
const int GCGMsgSelectOnStage::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgSelectOnStage::GCGMsgSelectOnStage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgSelectOnStage)
}
GCGMsgSelectOnStage::GCGMsgSelectOnStage(const GCGMsgSelectOnStage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(controller_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgSelectOnStage)
}

void GCGMsgSelectOnStage::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGMsgSelectOnStage::~GCGMsgSelectOnStage() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgSelectOnStage)
  SharedDtor();
}

void GCGMsgSelectOnStage::SharedDtor() {
}

void GCGMsgSelectOnStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgSelectOnStage::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgSelectOnStage& GCGMsgSelectOnStage::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgSelectOnStage* GCGMsgSelectOnStage::New(::google::protobuf::Arena* arena) const {
  GCGMsgSelectOnStage* n = new GCGMsgSelectOnStage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgSelectOnStage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgSelectOnStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(controller_id_));
  _internal_metadata_.Clear();
}

bool GCGMsgSelectOnStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgSelectOnStage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_guid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgSelectOnStage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgSelectOnStage)
  return false;
#undef DO_
}

void GCGMsgSelectOnStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgSelectOnStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 4;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_guid(), output);
  }

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->controller_id(), output);
  }

  // .proto.GCGReason reason = 10;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgSelectOnStage)
}

::google::protobuf::uint8* GCGMsgSelectOnStage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgSelectOnStage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 4;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card_guid(), target);
  }

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->controller_id(), target);
  }

  // .proto.GCGReason reason = 10;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgSelectOnStage)
  return target;
}

size_t GCGMsgSelectOnStage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgSelectOnStage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGReason reason = 10;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 card_guid = 4;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgSelectOnStage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgSelectOnStage)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgSelectOnStage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgSelectOnStage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgSelectOnStage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgSelectOnStage)
    MergeFrom(*source);
  }
}

void GCGMsgSelectOnStage::MergeFrom(const GCGMsgSelectOnStage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgSelectOnStage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMsgSelectOnStage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgSelectOnStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgSelectOnStage::CopyFrom(const GCGMsgSelectOnStage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgSelectOnStage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgSelectOnStage::IsInitialized() const {
  return true;
}

void GCGMsgSelectOnStage::Swap(GCGMsgSelectOnStage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgSelectOnStage::InternalSwap(GCGMsgSelectOnStage* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(card_guid_, other->card_guid_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgSelectOnStage::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgSelectOnStage

// uint32 controller_id = 6;
void GCGMsgSelectOnStage::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgSelectOnStage::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStage.controller_id)
  return controller_id_;
}
void GCGMsgSelectOnStage::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStage.controller_id)
}

// .proto.GCGReason reason = 10;
void GCGMsgSelectOnStage::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgSelectOnStage::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStage.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgSelectOnStage::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStage.reason)
}

// uint32 card_guid = 4;
void GCGMsgSelectOnStage::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgSelectOnStage::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStage.card_guid)
  return card_guid_;
}
void GCGMsgSelectOnStage::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStage.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgSelectOnStageByEffect::kSkillIdFieldNumber;
const int GCGMsgSelectOnStageByEffect::kControllerIdFieldNumber;
const int GCGMsgSelectOnStageByEffect::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgSelectOnStageByEffect::GCGMsgSelectOnStageByEffect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgSelectOnStageByEffect)
}
GCGMsgSelectOnStageByEffect::GCGMsgSelectOnStageByEffect(const GCGMsgSelectOnStageByEffect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgSelectOnStageByEffect)
}

void GCGMsgSelectOnStageByEffect::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

GCGMsgSelectOnStageByEffect::~GCGMsgSelectOnStageByEffect() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgSelectOnStageByEffect)
  SharedDtor();
}

void GCGMsgSelectOnStageByEffect::SharedDtor() {
}

void GCGMsgSelectOnStageByEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgSelectOnStageByEffect::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgSelectOnStageByEffect& GCGMsgSelectOnStageByEffect::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgSelectOnStageByEffect* GCGMsgSelectOnStageByEffect::New(::google::protobuf::Arena* arena) const {
  GCGMsgSelectOnStageByEffect* n = new GCGMsgSelectOnStageByEffect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgSelectOnStageByEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgSelectOnStageByEffect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool GCGMsgSelectOnStageByEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgSelectOnStageByEffect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_guid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgSelectOnStageByEffect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgSelectOnStageByEffect)
  return false;
#undef DO_
}

void GCGMsgSelectOnStageByEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgSelectOnStageByEffect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 1;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_guid(), output);
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->skill_id(), output);
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgSelectOnStageByEffect)
}

::google::protobuf::uint8* GCGMsgSelectOnStageByEffect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgSelectOnStageByEffect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 1;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_guid(), target);
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->skill_id(), target);
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgSelectOnStageByEffect)
  return target;
}

size_t GCGMsgSelectOnStageByEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgSelectOnStageByEffect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 card_guid = 1;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgSelectOnStageByEffect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgSelectOnStageByEffect)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgSelectOnStageByEffect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgSelectOnStageByEffect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgSelectOnStageByEffect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgSelectOnStageByEffect)
    MergeFrom(*source);
  }
}

void GCGMsgSelectOnStageByEffect::MergeFrom(const GCGMsgSelectOnStageByEffect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgSelectOnStageByEffect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGMsgSelectOnStageByEffect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgSelectOnStageByEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgSelectOnStageByEffect::CopyFrom(const GCGMsgSelectOnStageByEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgSelectOnStageByEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgSelectOnStageByEffect::IsInitialized() const {
  return true;
}

void GCGMsgSelectOnStageByEffect::Swap(GCGMsgSelectOnStageByEffect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgSelectOnStageByEffect::InternalSwap(GCGMsgSelectOnStageByEffect* other) {
  using std::swap;
  swap(controller_id_, other->controller_id_);
  swap(card_guid_, other->card_guid_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgSelectOnStageByEffect::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgSelectOnStageByEffect

// uint32 skill_id = 12;
void GCGMsgSelectOnStageByEffect::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgSelectOnStageByEffect::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStageByEffect.skill_id)
  return skill_id_;
}
void GCGMsgSelectOnStageByEffect::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStageByEffect.skill_id)
}

// uint32 controller_id = 15;
void GCGMsgSelectOnStageByEffect::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgSelectOnStageByEffect::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStageByEffect.controller_id)
  return controller_id_;
}
void GCGMsgSelectOnStageByEffect::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStageByEffect.controller_id)
}

// uint32 card_guid = 1;
void GCGMsgSelectOnStageByEffect::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgSelectOnStageByEffect::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStageByEffect.card_guid)
  return card_guid_;
}
void GCGMsgSelectOnStageByEffect::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStageByEffect.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgDiceRoll::kDiceSideListFieldNumber;
const int GCGMsgDiceRoll::kDiceNumFieldNumber;
const int GCGMsgDiceRoll::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgDiceRoll::GCGMsgDiceRoll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgDiceRoll)
}
GCGMsgDiceRoll::GCGMsgDiceRoll(const GCGMsgDiceRoll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dice_side_list_(from.dice_side_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dice_num_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(dice_num_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgDiceRoll)
}

void GCGMsgDiceRoll::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dice_num_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(dice_num_));
  _cached_size_ = 0;
}

GCGMsgDiceRoll::~GCGMsgDiceRoll() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgDiceRoll)
  SharedDtor();
}

void GCGMsgDiceRoll::SharedDtor() {
}

void GCGMsgDiceRoll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgDiceRoll::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgDiceRoll& GCGMsgDiceRoll::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgDiceRoll* GCGMsgDiceRoll::New(::google::protobuf::Arena* arena) const {
  GCGMsgDiceRoll* n = new GCGMsgDiceRoll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgDiceRoll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgDiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dice_side_list_.Clear();
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dice_num_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(dice_num_));
  _internal_metadata_.Clear();
}

bool GCGMsgDiceRoll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgDiceRoll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGDiceSideType dice_side_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_dice_side_list(static_cast< ::proto::GCGDiceSideType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_dice_side_list(static_cast< ::proto::GCGDiceSideType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dice_num = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dice_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgDiceRoll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgDiceRoll)
  return false;
#undef DO_
}

void GCGMsgDiceRoll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgDiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->controller_id(), output);
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 10;
  if (this->dice_side_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_dice_side_list_cached_byte_size_));
  }
  for (int i = 0, n = this->dice_side_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->dice_side_list(i), output);
  }

  // uint32 dice_num = 15;
  if (this->dice_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dice_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgDiceRoll)
}

::google::protobuf::uint8* GCGMsgDiceRoll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgDiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->controller_id(), target);
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 10;
  if (this->dice_side_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _dice_side_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->dice_side_list_, target);
  }

  // uint32 dice_num = 15;
  if (this->dice_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dice_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgDiceRoll)
  return target;
}

size_t GCGMsgDiceRoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgDiceRoll)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGDiceSideType dice_side_list = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->dice_side_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dice_side_list(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dice_side_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 dice_num = 15;
  if (this->dice_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgDiceRoll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgDiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgDiceRoll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgDiceRoll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgDiceRoll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgDiceRoll)
    MergeFrom(*source);
  }
}

void GCGMsgDiceRoll::MergeFrom(const GCGMsgDiceRoll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgDiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dice_side_list_.MergeFrom(from.dice_side_list_);
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.dice_num() != 0) {
    set_dice_num(from.dice_num());
  }
}

void GCGMsgDiceRoll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgDiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgDiceRoll::CopyFrom(const GCGMsgDiceRoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgDiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgDiceRoll::IsInitialized() const {
  return true;
}

void GCGMsgDiceRoll::Swap(GCGMsgDiceRoll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgDiceRoll::InternalSwap(GCGMsgDiceRoll* other) {
  using std::swap;
  dice_side_list_.InternalSwap(&other->dice_side_list_);
  swap(controller_id_, other->controller_id_);
  swap(dice_num_, other->dice_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgDiceRoll::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgDiceRoll

// repeated .proto.GCGDiceSideType dice_side_list = 10;
int GCGMsgDiceRoll::dice_side_list_size() const {
  return dice_side_list_.size();
}
void GCGMsgDiceRoll::clear_dice_side_list() {
  dice_side_list_.Clear();
}
::proto::GCGDiceSideType GCGMsgDiceRoll::dice_side_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceRoll.dice_side_list)
  return static_cast< ::proto::GCGDiceSideType >(dice_side_list_.Get(index));
}
void GCGMsgDiceRoll::set_dice_side_list(int index, ::proto::GCGDiceSideType value) {
  dice_side_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceRoll.dice_side_list)
}
void GCGMsgDiceRoll::add_dice_side_list(::proto::GCGDiceSideType value) {
  dice_side_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgDiceRoll.dice_side_list)
}
const ::google::protobuf::RepeatedField<int>&
GCGMsgDiceRoll::dice_side_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgDiceRoll.dice_side_list)
  return dice_side_list_;
}
::google::protobuf::RepeatedField<int>*
GCGMsgDiceRoll::mutable_dice_side_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgDiceRoll.dice_side_list)
  return &dice_side_list_;
}

// uint32 dice_num = 15;
void GCGMsgDiceRoll::clear_dice_num() {
  dice_num_ = 0u;
}
::google::protobuf::uint32 GCGMsgDiceRoll::dice_num() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceRoll.dice_num)
  return dice_num_;
}
void GCGMsgDiceRoll::set_dice_num(::google::protobuf::uint32 value) {
  
  dice_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceRoll.dice_num)
}

// uint32 controller_id = 5;
void GCGMsgDiceRoll::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgDiceRoll::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceRoll.controller_id)
  return controller_id_;
}
void GCGMsgDiceRoll::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceRoll.controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgDiceReroll::kControllerIdFieldNumber;
const int GCGMsgDiceReroll::kSelectDiceIndexListFieldNumber;
const int GCGMsgDiceReroll::kDiceSideListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgDiceReroll::GCGMsgDiceReroll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgDiceReroll)
}
GCGMsgDiceReroll::GCGMsgDiceReroll(const GCGMsgDiceReroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      select_dice_index_list_(from.select_dice_index_list_),
      dice_side_list_(from.dice_side_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgDiceReroll)
}

void GCGMsgDiceReroll::SharedCtor() {
  controller_id_ = 0u;
  _cached_size_ = 0;
}

GCGMsgDiceReroll::~GCGMsgDiceReroll() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgDiceReroll)
  SharedDtor();
}

void GCGMsgDiceReroll::SharedDtor() {
}

void GCGMsgDiceReroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgDiceReroll::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgDiceReroll& GCGMsgDiceReroll::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgDiceReroll* GCGMsgDiceReroll::New(::google::protobuf::Arena* arena) const {
  GCGMsgDiceReroll* n = new GCGMsgDiceReroll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgDiceReroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgDiceReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_dice_index_list_.Clear();
  dice_side_list_.Clear();
  controller_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGMsgDiceReroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgDiceReroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 select_dice_index_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_select_dice_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_select_dice_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGDiceSideType dice_side_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_dice_side_list(static_cast< ::proto::GCGDiceSideType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_dice_side_list(static_cast< ::proto::GCGDiceSideType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgDiceReroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgDiceReroll)
  return false;
#undef DO_
}

void GCGMsgDiceReroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgDiceReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 select_dice_index_list = 1;
  if (this->select_dice_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _select_dice_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->select_dice_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->select_dice_index_list(i), output);
  }

  // uint32 controller_id = 2;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->controller_id(), output);
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 6;
  if (this->dice_side_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_dice_side_list_cached_byte_size_));
  }
  for (int i = 0, n = this->dice_side_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->dice_side_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgDiceReroll)
}

::google::protobuf::uint8* GCGMsgDiceReroll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgDiceReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 select_dice_index_list = 1;
  if (this->select_dice_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _select_dice_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->select_dice_index_list_, target);
  }

  // uint32 controller_id = 2;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->controller_id(), target);
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 6;
  if (this->dice_side_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _dice_side_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->dice_side_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgDiceReroll)
  return target;
}

size_t GCGMsgDiceReroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgDiceReroll)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 select_dice_index_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->select_dice_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _select_dice_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->dice_side_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dice_side_list(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dice_side_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 controller_id = 2;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgDiceReroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgDiceReroll)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgDiceReroll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgDiceReroll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgDiceReroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgDiceReroll)
    MergeFrom(*source);
  }
}

void GCGMsgDiceReroll::MergeFrom(const GCGMsgDiceReroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgDiceReroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  select_dice_index_list_.MergeFrom(from.select_dice_index_list_);
  dice_side_list_.MergeFrom(from.dice_side_list_);
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMsgDiceReroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgDiceReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgDiceReroll::CopyFrom(const GCGMsgDiceReroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgDiceReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgDiceReroll::IsInitialized() const {
  return true;
}

void GCGMsgDiceReroll::Swap(GCGMsgDiceReroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgDiceReroll::InternalSwap(GCGMsgDiceReroll* other) {
  using std::swap;
  select_dice_index_list_.InternalSwap(&other->select_dice_index_list_);
  dice_side_list_.InternalSwap(&other->dice_side_list_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgDiceReroll::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgDiceReroll

// uint32 controller_id = 2;
void GCGMsgDiceReroll::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgDiceReroll::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceReroll.controller_id)
  return controller_id_;
}
void GCGMsgDiceReroll::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceReroll.controller_id)
}

// repeated uint32 select_dice_index_list = 1;
int GCGMsgDiceReroll::select_dice_index_list_size() const {
  return select_dice_index_list_.size();
}
void GCGMsgDiceReroll::clear_select_dice_index_list() {
  select_dice_index_list_.Clear();
}
::google::protobuf::uint32 GCGMsgDiceReroll::select_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceReroll.select_dice_index_list)
  return select_dice_index_list_.Get(index);
}
void GCGMsgDiceReroll::set_select_dice_index_list(int index, ::google::protobuf::uint32 value) {
  select_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceReroll.select_dice_index_list)
}
void GCGMsgDiceReroll::add_select_dice_index_list(::google::protobuf::uint32 value) {
  select_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgDiceReroll.select_dice_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgDiceReroll::select_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgDiceReroll.select_dice_index_list)
  return select_dice_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgDiceReroll::mutable_select_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgDiceReroll.select_dice_index_list)
  return &select_dice_index_list_;
}

// repeated .proto.GCGDiceSideType dice_side_list = 6;
int GCGMsgDiceReroll::dice_side_list_size() const {
  return dice_side_list_.size();
}
void GCGMsgDiceReroll::clear_dice_side_list() {
  dice_side_list_.Clear();
}
::proto::GCGDiceSideType GCGMsgDiceReroll::dice_side_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceReroll.dice_side_list)
  return static_cast< ::proto::GCGDiceSideType >(dice_side_list_.Get(index));
}
void GCGMsgDiceReroll::set_dice_side_list(int index, ::proto::GCGDiceSideType value) {
  dice_side_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceReroll.dice_side_list)
}
void GCGMsgDiceReroll::add_dice_side_list(::proto::GCGDiceSideType value) {
  dice_side_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgDiceReroll.dice_side_list)
}
const ::google::protobuf::RepeatedField<int>&
GCGMsgDiceReroll::dice_side_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgDiceReroll.dice_side_list)
  return dice_side_list_;
}
::google::protobuf::RepeatedField<int>*
GCGMsgDiceReroll::mutable_dice_side_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgDiceReroll.dice_side_list)
  return &dice_side_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgPass::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgPass::GCGMsgPass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgPass)
}
GCGMsgPass::GCGMsgPass(const GCGMsgPass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgPass)
}

void GCGMsgPass::SharedCtor() {
  controller_id_ = 0u;
  _cached_size_ = 0;
}

GCGMsgPass::~GCGMsgPass() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgPass)
  SharedDtor();
}

void GCGMsgPass::SharedDtor() {
}

void GCGMsgPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgPass::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgPass& GCGMsgPass::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgPass* GCGMsgPass::New(::google::protobuf::Arena* arena) const {
  GCGMsgPass* n = new GCGMsgPass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgPass::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGMsgPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgPass)
  return false;
#undef DO_
}

void GCGMsgPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgPass)
}

::google::protobuf::uint8* GCGMsgPass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgPass)
  return target;
}

size_t GCGMsgPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgPass)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgPass)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgPass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgPass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgPass)
    MergeFrom(*source);
  }
}

void GCGMsgPass::MergeFrom(const GCGMsgPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMsgPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgPass::CopyFrom(const GCGMsgPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgPass::IsInitialized() const {
  return true;
}

void GCGMsgPass::Swap(GCGMsgPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgPass::InternalSwap(GCGMsgPass* other) {
  using std::swap;
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgPass::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgPass

// uint32 controller_id = 14;
void GCGMsgPass::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgPass::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPass.controller_id)
  return controller_id_;
}
void GCGMsgPass::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPass.controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgCharDie::kControllerIdFieldNumber;
const int GCGMsgCharDie::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgCharDie::GCGMsgCharDie()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgCharDie)
}
GCGMsgCharDie::GCGMsgCharDie(const GCGMsgCharDie& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_guid_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(card_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgCharDie)
}

void GCGMsgCharDie::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_guid_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(card_guid_));
  _cached_size_ = 0;
}

GCGMsgCharDie::~GCGMsgCharDie() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgCharDie)
  SharedDtor();
}

void GCGMsgCharDie::SharedDtor() {
}

void GCGMsgCharDie::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgCharDie::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgCharDie& GCGMsgCharDie::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgCharDie* GCGMsgCharDie::New(::google::protobuf::Arena* arena) const {
  GCGMsgCharDie* n = new GCGMsgCharDie;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgCharDie::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgCharDie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_guid_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(card_guid_));
  _internal_metadata_.Clear();
}

bool GCGMsgCharDie::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgCharDie)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgCharDie)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgCharDie)
  return false;
#undef DO_
}

void GCGMsgCharDie::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgCharDie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->controller_id(), output);
  }

  // uint32 card_guid = 11;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgCharDie)
}

::google::protobuf::uint8* GCGMsgCharDie::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgCharDie)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->controller_id(), target);
  }

  // uint32 card_guid = 11;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgCharDie)
  return target;
}

size_t GCGMsgCharDie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgCharDie)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 card_guid = 11;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgCharDie::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgCharDie)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgCharDie* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgCharDie>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgCharDie)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgCharDie)
    MergeFrom(*source);
  }
}

void GCGMsgCharDie::MergeFrom(const GCGMsgCharDie& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgCharDie)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
}

void GCGMsgCharDie::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgCharDie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgCharDie::CopyFrom(const GCGMsgCharDie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgCharDie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgCharDie::IsInitialized() const {
  return true;
}

void GCGMsgCharDie::Swap(GCGMsgCharDie* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgCharDie::InternalSwap(GCGMsgCharDie* other) {
  using std::swap;
  swap(controller_id_, other->controller_id_);
  swap(card_guid_, other->card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgCharDie::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgCharDie

// uint32 controller_id = 5;
void GCGMsgCharDie::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgCharDie::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCharDie.controller_id)
  return controller_id_;
}
void GCGMsgCharDie::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCharDie.controller_id)
}

// uint32 card_guid = 11;
void GCGMsgCharDie::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgCharDie::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCharDie.card_guid)
  return card_guid_;
}
void GCGMsgCharDie::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCharDie.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgUseSkill::kSkillIdFieldNumber;
const int GCGMsgUseSkill::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgUseSkill::GCGMsgUseSkill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgUseSkill)
}
GCGMsgUseSkill::GCGMsgUseSkill(const GCGMsgUseSkill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_guid_, &from.card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgUseSkill)
}

void GCGMsgUseSkill::SharedCtor() {
  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

GCGMsgUseSkill::~GCGMsgUseSkill() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgUseSkill)
  SharedDtor();
}

void GCGMsgUseSkill::SharedDtor() {
}

void GCGMsgUseSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgUseSkill::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgUseSkill& GCGMsgUseSkill::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgUseSkill* GCGMsgUseSkill::New(::google::protobuf::Arena* arena) const {
  GCGMsgUseSkill* n = new GCGMsgUseSkill;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool GCGMsgUseSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgUseSkill)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_guid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgUseSkill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgUseSkill)
  return false;
#undef DO_
}

void GCGMsgUseSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_guid(), output);
  }

  // uint32 skill_id = 9;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgUseSkill)
}

::google::protobuf::uint8* GCGMsgUseSkill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgUseSkill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_guid(), target);
  }

  // uint32 skill_id = 9;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgUseSkill)
  return target;
}

size_t GCGMsgUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgUseSkill)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // uint32 skill_id = 9;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgUseSkill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgUseSkill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgUseSkill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgUseSkill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgUseSkill)
    MergeFrom(*source);
  }
}

void GCGMsgUseSkill::MergeFrom(const GCGMsgUseSkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgUseSkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGMsgUseSkill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgUseSkill::CopyFrom(const GCGMsgUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgUseSkill::IsInitialized() const {
  return true;
}

void GCGMsgUseSkill::Swap(GCGMsgUseSkill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgUseSkill::InternalSwap(GCGMsgUseSkill* other) {
  using std::swap;
  swap(card_guid_, other->card_guid_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgUseSkill::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgUseSkill

// uint32 skill_id = 9;
void GCGMsgUseSkill::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkill.skill_id)
  return skill_id_;
}
void GCGMsgUseSkill::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkill.skill_id)
}

// uint32 card_guid = 6;
void GCGMsgUseSkill::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgUseSkill::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkill.card_guid)
  return card_guid_;
}
void GCGMsgUseSkill::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkill.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgUseSkillEnd::kCardGuidFieldNumber;
const int GCGMsgUseSkillEnd::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgUseSkillEnd::GCGMsgUseSkillEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgUseSkillEnd)
}
GCGMsgUseSkillEnd::GCGMsgUseSkillEnd(const GCGMsgUseSkillEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_guid_, &from.card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgUseSkillEnd)
}

void GCGMsgUseSkillEnd::SharedCtor() {
  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

GCGMsgUseSkillEnd::~GCGMsgUseSkillEnd() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgUseSkillEnd)
  SharedDtor();
}

void GCGMsgUseSkillEnd::SharedDtor() {
}

void GCGMsgUseSkillEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgUseSkillEnd::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgUseSkillEnd& GCGMsgUseSkillEnd::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgUseSkillEnd* GCGMsgUseSkillEnd::New(::google::protobuf::Arena* arena) const {
  GCGMsgUseSkillEnd* n = new GCGMsgUseSkillEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgUseSkillEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgUseSkillEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool GCGMsgUseSkillEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgUseSkillEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_guid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgUseSkillEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgUseSkillEnd)
  return false;
#undef DO_
}

void GCGMsgUseSkillEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgUseSkillEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 11;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->card_guid(), output);
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgUseSkillEnd)
}

::google::protobuf::uint8* GCGMsgUseSkillEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgUseSkillEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 11;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->card_guid(), target);
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgUseSkillEnd)
  return target;
}

size_t GCGMsgUseSkillEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgUseSkillEnd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_guid = 11;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgUseSkillEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgUseSkillEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgUseSkillEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgUseSkillEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgUseSkillEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgUseSkillEnd)
    MergeFrom(*source);
  }
}

void GCGMsgUseSkillEnd::MergeFrom(const GCGMsgUseSkillEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgUseSkillEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGMsgUseSkillEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgUseSkillEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgUseSkillEnd::CopyFrom(const GCGMsgUseSkillEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgUseSkillEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgUseSkillEnd::IsInitialized() const {
  return true;
}

void GCGMsgUseSkillEnd::Swap(GCGMsgUseSkillEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgUseSkillEnd::InternalSwap(GCGMsgUseSkillEnd* other) {
  using std::swap;
  swap(card_guid_, other->card_guid_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgUseSkillEnd::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgUseSkillEnd

// uint32 card_guid = 11;
void GCGMsgUseSkillEnd::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgUseSkillEnd::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkillEnd.card_guid)
  return card_guid_;
}
void GCGMsgUseSkillEnd::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkillEnd.card_guid)
}

// uint32 skill_id = 12;
void GCGMsgUseSkillEnd::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgUseSkillEnd::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkillEnd.skill_id)
  return skill_id_;
}
void GCGMsgUseSkillEnd::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkillEnd.skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDamageDetail::kSkillIdFieldNumber;
const int GCGDamageDetail::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDamageDetail::GCGDamageDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDamageDetail)
}
GCGDamageDetail::GCGDamageDetail(const GCGDamageDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_guid_, &from.card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_id_) -
    reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDamageDetail)
}

void GCGDamageDetail::SharedCtor() {
  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

GCGDamageDetail::~GCGDamageDetail() {
  // @@protoc_insertion_point(destructor:proto.GCGDamageDetail)
  SharedDtor();
}

void GCGDamageDetail::SharedDtor() {
}

void GCGDamageDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDamageDetail::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDamageDetail& GCGDamageDetail::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDamageDetail* GCGDamageDetail::New(::google::protobuf::Arena* arena) const {
  GCGDamageDetail* n = new GCGDamageDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDamageDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDamageDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(skill_id_));
  _internal_metadata_.Clear();
}

bool GCGDamageDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDamageDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_guid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDamageDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDamageDetail)
  return false;
#undef DO_
}

void GCGDamageDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDamageDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 7;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->card_guid(), output);
  }

  // uint32 skill_id = 10;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDamageDetail)
}

::google::protobuf::uint8* GCGDamageDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDamageDetail)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 7;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->card_guid(), target);
  }

  // uint32 skill_id = 10;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDamageDetail)
  return target;
}

size_t GCGDamageDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDamageDetail)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_guid = 7;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // uint32 skill_id = 10;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDamageDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDamageDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDamageDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDamageDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDamageDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDamageDetail)
    MergeFrom(*source);
  }
}

void GCGDamageDetail::MergeFrom(const GCGDamageDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDamageDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGDamageDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDamageDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDamageDetail::CopyFrom(const GCGDamageDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDamageDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDamageDetail::IsInitialized() const {
  return true;
}

void GCGDamageDetail::Swap(GCGDamageDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDamageDetail::InternalSwap(GCGDamageDetail* other) {
  using std::swap;
  swap(card_guid_, other->card_guid_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDamageDetail::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDamageDetail

// uint32 skill_id = 10;
void GCGDamageDetail::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGDamageDetail::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDamageDetail.skill_id)
  return skill_id_;
}
void GCGDamageDetail::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDamageDetail.skill_id)
}

// uint32 card_guid = 7;
void GCGDamageDetail::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGDamageDetail::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDamageDetail.card_guid)
  return card_guid_;
}
void GCGDamageDetail::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDamageDetail.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgSkillResult::kSkillIdFieldNumber;
const int GCGMsgSkillResult::kLastHpFieldNumber;
const int GCGMsgSkillResult::kDetailListFieldNumber;
const int GCGMsgSkillResult::kTargetCardGuidFieldNumber;
const int GCGMsgSkillResult::kEffectElementFieldNumber;
const int GCGMsgSkillResult::kFromResultSeqFieldNumber;
const int GCGMsgSkillResult::kDamageFieldNumber;
const int GCGMsgSkillResult::kResultSeqFieldNumber;
const int GCGMsgSkillResult::kSrcCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgSkillResult::GCGMsgSkillResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgSkillResult)
}
GCGMsgSkillResult::GCGMsgSkillResult(const GCGMsgSkillResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detail_list_(from.detail_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_seq_, &from.result_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&from_result_seq_) -
    reinterpret_cast<char*>(&result_seq_)) + sizeof(from_result_seq_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgSkillResult)
}

void GCGMsgSkillResult::SharedCtor() {
  ::memset(&result_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_result_seq_) -
      reinterpret_cast<char*>(&result_seq_)) + sizeof(from_result_seq_));
  _cached_size_ = 0;
}

GCGMsgSkillResult::~GCGMsgSkillResult() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgSkillResult)
  SharedDtor();
}

void GCGMsgSkillResult::SharedDtor() {
}

void GCGMsgSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgSkillResult::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgSkillResult& GCGMsgSkillResult::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgSkillResult* GCGMsgSkillResult::New(::google::protobuf::Arena* arena) const {
  GCGMsgSkillResult* n = new GCGMsgSkillResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgSkillResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgSkillResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  ::memset(&result_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&from_result_seq_) -
      reinterpret_cast<char*>(&result_seq_)) + sizeof(from_result_seq_));
  _internal_metadata_.Clear();
}

bool GCGMsgSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgSkillResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGDamageDetail detail_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_seq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 effect_element = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_element_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 damage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_card_guid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 src_card_guid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 last_hp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_hp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 from_result_seq = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_result_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgSkillResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgSkillResult)
  return false;
#undef DO_
}

void GCGMsgSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgSkillResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGDamageDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail_list(static_cast<int>(i)), output);
  }

  // uint32 result_seq = 4;
  if (this->result_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->result_seq(), output);
  }

  // uint32 effect_element = 5;
  if (this->effect_element() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->effect_element(), output);
  }

  // uint32 damage = 6;
  if (this->damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->damage(), output);
  }

  // uint32 target_card_guid = 7;
  if (this->target_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->target_card_guid(), output);
  }

  // uint32 src_card_guid = 8;
  if (this->src_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->src_card_guid(), output);
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->skill_id(), output);
  }

  // uint32 last_hp = 14;
  if (this->last_hp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->last_hp(), output);
  }

  // uint32 from_result_seq = 15;
  if (this->from_result_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->from_result_seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgSkillResult)
}

::google::protobuf::uint8* GCGMsgSkillResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgSkillResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGDamageDetail detail_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->detail_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 result_seq = 4;
  if (this->result_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->result_seq(), target);
  }

  // uint32 effect_element = 5;
  if (this->effect_element() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->effect_element(), target);
  }

  // uint32 damage = 6;
  if (this->damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->damage(), target);
  }

  // uint32 target_card_guid = 7;
  if (this->target_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->target_card_guid(), target);
  }

  // uint32 src_card_guid = 8;
  if (this->src_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->src_card_guid(), target);
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->skill_id(), target);
  }

  // uint32 last_hp = 14;
  if (this->last_hp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->last_hp(), target);
  }

  // uint32 from_result_seq = 15;
  if (this->from_result_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->from_result_seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgSkillResult)
  return target;
}

size_t GCGMsgSkillResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgSkillResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGDamageDetail detail_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_list(static_cast<int>(i)));
    }
  }

  // uint32 result_seq = 4;
  if (this->result_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_seq());
  }

  // uint32 effect_element = 5;
  if (this->effect_element() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect_element());
  }

  // uint32 damage = 6;
  if (this->damage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->damage());
  }

  // uint32 target_card_guid = 7;
  if (this->target_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_card_guid());
  }

  // uint32 src_card_guid = 8;
  if (this->src_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->src_card_guid());
  }

  // uint32 skill_id = 12;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // uint32 last_hp = 14;
  if (this->last_hp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->last_hp());
  }

  // uint32 from_result_seq = 15;
  if (this->from_result_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_result_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgSkillResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgSkillResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgSkillResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgSkillResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgSkillResult)
    MergeFrom(*source);
  }
}

void GCGMsgSkillResult::MergeFrom(const GCGMsgSkillResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgSkillResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  if (from.result_seq() != 0) {
    set_result_seq(from.result_seq());
  }
  if (from.effect_element() != 0) {
    set_effect_element(from.effect_element());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
  if (from.target_card_guid() != 0) {
    set_target_card_guid(from.target_card_guid());
  }
  if (from.src_card_guid() != 0) {
    set_src_card_guid(from.src_card_guid());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.last_hp() != 0) {
    set_last_hp(from.last_hp());
  }
  if (from.from_result_seq() != 0) {
    set_from_result_seq(from.from_result_seq());
  }
}

void GCGMsgSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgSkillResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgSkillResult::CopyFrom(const GCGMsgSkillResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgSkillResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgSkillResult::IsInitialized() const {
  return true;
}

void GCGMsgSkillResult::Swap(GCGMsgSkillResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgSkillResult::InternalSwap(GCGMsgSkillResult* other) {
  using std::swap;
  detail_list_.InternalSwap(&other->detail_list_);
  swap(result_seq_, other->result_seq_);
  swap(effect_element_, other->effect_element_);
  swap(damage_, other->damage_);
  swap(target_card_guid_, other->target_card_guid_);
  swap(src_card_guid_, other->src_card_guid_);
  swap(skill_id_, other->skill_id_);
  swap(last_hp_, other->last_hp_);
  swap(from_result_seq_, other->from_result_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgSkillResult::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgSkillResult

// uint32 skill_id = 12;
void GCGMsgSkillResult::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.skill_id)
  return skill_id_;
}
void GCGMsgSkillResult::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.skill_id)
}

// uint32 last_hp = 14;
void GCGMsgSkillResult::clear_last_hp() {
  last_hp_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::last_hp() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.last_hp)
  return last_hp_;
}
void GCGMsgSkillResult::set_last_hp(::google::protobuf::uint32 value) {
  
  last_hp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.last_hp)
}

// repeated .proto.GCGDamageDetail detail_list = 2;
int GCGMsgSkillResult::detail_list_size() const {
  return detail_list_.size();
}
void GCGMsgSkillResult::clear_detail_list() {
  detail_list_.Clear();
}
const ::proto::GCGDamageDetail& GCGMsgSkillResult::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.detail_list)
  return detail_list_.Get(index);
}
::proto::GCGDamageDetail* GCGMsgSkillResult::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgSkillResult.detail_list)
  return detail_list_.Mutable(index);
}
::proto::GCGDamageDetail* GCGMsgSkillResult::add_detail_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMsgSkillResult.detail_list)
  return detail_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >*
GCGMsgSkillResult::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgSkillResult.detail_list)
  return &detail_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >&
GCGMsgSkillResult::detail_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgSkillResult.detail_list)
  return detail_list_;
}

// uint32 target_card_guid = 7;
void GCGMsgSkillResult::clear_target_card_guid() {
  target_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::target_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.target_card_guid)
  return target_card_guid_;
}
void GCGMsgSkillResult::set_target_card_guid(::google::protobuf::uint32 value) {
  
  target_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.target_card_guid)
}

// uint32 effect_element = 5;
void GCGMsgSkillResult::clear_effect_element() {
  effect_element_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::effect_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.effect_element)
  return effect_element_;
}
void GCGMsgSkillResult::set_effect_element(::google::protobuf::uint32 value) {
  
  effect_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.effect_element)
}

// uint32 from_result_seq = 15;
void GCGMsgSkillResult::clear_from_result_seq() {
  from_result_seq_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::from_result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.from_result_seq)
  return from_result_seq_;
}
void GCGMsgSkillResult::set_from_result_seq(::google::protobuf::uint32 value) {
  
  from_result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.from_result_seq)
}

// uint32 damage = 6;
void GCGMsgSkillResult::clear_damage() {
  damage_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::damage() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.damage)
  return damage_;
}
void GCGMsgSkillResult::set_damage(::google::protobuf::uint32 value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.damage)
}

// uint32 result_seq = 4;
void GCGMsgSkillResult::clear_result_seq() {
  result_seq_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.result_seq)
  return result_seq_;
}
void GCGMsgSkillResult::set_result_seq(::google::protobuf::uint32 value) {
  
  result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.result_seq)
}

// uint32 src_card_guid = 8;
void GCGMsgSkillResult::clear_src_card_guid() {
  src_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgSkillResult::src_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.src_card_guid)
  return src_card_guid_;
}
void GCGMsgSkillResult::set_src_card_guid(::google::protobuf::uint32 value) {
  
  src_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.src_card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGLimitsInfo::kLimitTypeFieldNumber;
const int GCGLimitsInfo::kLimitValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGLimitsInfo::GCGLimitsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGLimitsInfo)
}
GCGLimitsInfo::GCGLimitsInfo(const GCGLimitsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&limit_value_, &from.limit_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_type_) -
    reinterpret_cast<char*>(&limit_value_)) + sizeof(limit_type_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGLimitsInfo)
}

void GCGLimitsInfo::SharedCtor() {
  ::memset(&limit_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_type_) -
      reinterpret_cast<char*>(&limit_value_)) + sizeof(limit_type_));
  _cached_size_ = 0;
}

GCGLimitsInfo::~GCGLimitsInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGLimitsInfo)
  SharedDtor();
}

void GCGLimitsInfo::SharedDtor() {
}

void GCGLimitsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGLimitsInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGLimitsInfo& GCGLimitsInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGLimitsInfo* GCGLimitsInfo::New(::google::protobuf::Arena* arena) const {
  GCGLimitsInfo* n = new GCGLimitsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGLimitsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&limit_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_type_) -
      reinterpret_cast<char*>(&limit_value_)) + sizeof(limit_type_));
  _internal_metadata_.Clear();
}

bool GCGLimitsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGLimitsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 limit_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 limit_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGLimitsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGLimitsInfo)
  return false;
#undef DO_
}

void GCGLimitsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit_value = 1;
  if (this->limit_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->limit_value(), output);
  }

  // uint32 limit_type = 7;
  if (this->limit_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->limit_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGLimitsInfo)
}

::google::protobuf::uint8* GCGLimitsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 limit_value = 1;
  if (this->limit_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->limit_value(), target);
  }

  // uint32 limit_type = 7;
  if (this->limit_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->limit_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGLimitsInfo)
  return target;
}

size_t GCGLimitsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGLimitsInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 limit_value = 1;
  if (this->limit_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit_value());
  }

  // uint32 limit_type = 7;
  if (this->limit_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGLimitsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGLimitsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGLimitsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGLimitsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGLimitsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGLimitsInfo)
    MergeFrom(*source);
  }
}

void GCGLimitsInfo::MergeFrom(const GCGLimitsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGLimitsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.limit_value() != 0) {
    set_limit_value(from.limit_value());
  }
  if (from.limit_type() != 0) {
    set_limit_type(from.limit_type());
  }
}

void GCGLimitsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGLimitsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGLimitsInfo::CopyFrom(const GCGLimitsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGLimitsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGLimitsInfo::IsInitialized() const {
  return true;
}

void GCGLimitsInfo::Swap(GCGLimitsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGLimitsInfo::InternalSwap(GCGLimitsInfo* other) {
  using std::swap;
  swap(limit_value_, other->limit_value_);
  swap(limit_type_, other->limit_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGLimitsInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGLimitsInfo

// uint32 limit_type = 7;
void GCGLimitsInfo::clear_limit_type() {
  limit_type_ = 0u;
}
::google::protobuf::uint32 GCGLimitsInfo::limit_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGLimitsInfo.limit_type)
  return limit_type_;
}
void GCGLimitsInfo::set_limit_type(::google::protobuf::uint32 value) {
  
  limit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLimitsInfo.limit_type)
}

// uint32 limit_value = 1;
void GCGLimitsInfo::clear_limit_value() {
  limit_value_ = 0u;
}
::google::protobuf::uint32 GCGLimitsInfo::limit_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGLimitsInfo.limit_value)
  return limit_value_;
}
void GCGLimitsInfo::set_limit_value(::google::protobuf::uint32 value) {
  
  limit_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLimitsInfo.limit_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillLimitsInfo::kSkillIdFieldNumber;
const int GCGSkillLimitsInfo::kLimitsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillLimitsInfo::GCGSkillLimitsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillLimitsInfo)
}
GCGSkillLimitsInfo::GCGSkillLimitsInfo(const GCGSkillLimitsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      limits_list_(from.limits_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_ = from.skill_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillLimitsInfo)
}

void GCGSkillLimitsInfo::SharedCtor() {
  skill_id_ = 0u;
  _cached_size_ = 0;
}

GCGSkillLimitsInfo::~GCGSkillLimitsInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillLimitsInfo)
  SharedDtor();
}

void GCGSkillLimitsInfo::SharedDtor() {
}

void GCGSkillLimitsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillLimitsInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillLimitsInfo& GCGSkillLimitsInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillLimitsInfo* GCGSkillLimitsInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillLimitsInfo* n = new GCGSkillLimitsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillLimitsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limits_list_.Clear();
  skill_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGSkillLimitsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillLimitsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 skill_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGLimitsInfo limits_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limits_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillLimitsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillLimitsInfo)
  return false;
#undef DO_
}

void GCGSkillLimitsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 5;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->skill_id(), output);
  }

  // repeated .proto.GCGLimitsInfo limits_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->limits_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillLimitsInfo)
}

::google::protobuf::uint8* GCGSkillLimitsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 5;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->skill_id(), target);
  }

  // repeated .proto.GCGLimitsInfo limits_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limits_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->limits_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillLimitsInfo)
  return target;
}

size_t GCGSkillLimitsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillLimitsInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGLimitsInfo limits_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->limits_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limits_list(static_cast<int>(i)));
    }
  }

  // uint32 skill_id = 5;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillLimitsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillLimitsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillLimitsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillLimitsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillLimitsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillLimitsInfo)
    MergeFrom(*source);
  }
}

void GCGSkillLimitsInfo::MergeFrom(const GCGSkillLimitsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillLimitsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limits_list_.MergeFrom(from.limits_list_);
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGSkillLimitsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillLimitsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillLimitsInfo::CopyFrom(const GCGSkillLimitsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillLimitsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillLimitsInfo::IsInitialized() const {
  return true;
}

void GCGSkillLimitsInfo::Swap(GCGSkillLimitsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillLimitsInfo::InternalSwap(GCGSkillLimitsInfo* other) {
  using std::swap;
  limits_list_.InternalSwap(&other->limits_list_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillLimitsInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillLimitsInfo

// uint32 skill_id = 5;
void GCGSkillLimitsInfo::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGSkillLimitsInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillLimitsInfo.skill_id)
  return skill_id_;
}
void GCGSkillLimitsInfo::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillLimitsInfo.skill_id)
}

// repeated .proto.GCGLimitsInfo limits_list = 15;
int GCGSkillLimitsInfo::limits_list_size() const {
  return limits_list_.size();
}
void GCGSkillLimitsInfo::clear_limits_list() {
  limits_list_.Clear();
}
const ::proto::GCGLimitsInfo& GCGSkillLimitsInfo::limits_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_.Get(index);
}
::proto::GCGLimitsInfo* GCGSkillLimitsInfo::mutable_limits_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_.Mutable(index);
}
::proto::GCGLimitsInfo* GCGSkillLimitsInfo::add_limits_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGLimitsInfo >*
GCGSkillLimitsInfo::mutable_limits_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillLimitsInfo.limits_list)
  return &limits_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGLimitsInfo >&
GCGSkillLimitsInfo::limits_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGCardSkillLimitsInfo::kSkillLimitsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGCardSkillLimitsInfo::GCGCardSkillLimitsInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGCardSkillLimitsInfo)
}
GCGCardSkillLimitsInfo::GCGCardSkillLimitsInfo(const GCGCardSkillLimitsInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_limits_list_(from.skill_limits_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGCardSkillLimitsInfo)
}

void GCGCardSkillLimitsInfo::SharedCtor() {
  _cached_size_ = 0;
}

GCGCardSkillLimitsInfo::~GCGCardSkillLimitsInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGCardSkillLimitsInfo)
  SharedDtor();
}

void GCGCardSkillLimitsInfo::SharedDtor() {
}

void GCGCardSkillLimitsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGCardSkillLimitsInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGCardSkillLimitsInfo& GCGCardSkillLimitsInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGCardSkillLimitsInfo* GCGCardSkillLimitsInfo::New(::google::protobuf::Arena* arena) const {
  GCGCardSkillLimitsInfo* n = new GCGCardSkillLimitsInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGCardSkillLimitsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGCardSkillLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_limits_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGCardSkillLimitsInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGCardSkillLimitsInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_limits_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGCardSkillLimitsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGCardSkillLimitsInfo)
  return false;
#undef DO_
}

void GCGCardSkillLimitsInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGCardSkillLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_limits_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill_limits_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGCardSkillLimitsInfo)
}

::google::protobuf::uint8* GCGCardSkillLimitsInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGCardSkillLimitsInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_limits_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->skill_limits_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGCardSkillLimitsInfo)
  return target;
}

size_t GCGCardSkillLimitsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGCardSkillLimitsInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->skill_limits_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_limits_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGCardSkillLimitsInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGCardSkillLimitsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGCardSkillLimitsInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGCardSkillLimitsInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGCardSkillLimitsInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGCardSkillLimitsInfo)
    MergeFrom(*source);
  }
}

void GCGCardSkillLimitsInfo::MergeFrom(const GCGCardSkillLimitsInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGCardSkillLimitsInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_limits_list_.MergeFrom(from.skill_limits_list_);
}

void GCGCardSkillLimitsInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGCardSkillLimitsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGCardSkillLimitsInfo::CopyFrom(const GCGCardSkillLimitsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGCardSkillLimitsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGCardSkillLimitsInfo::IsInitialized() const {
  return true;
}

void GCGCardSkillLimitsInfo::Swap(GCGCardSkillLimitsInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGCardSkillLimitsInfo::InternalSwap(GCGCardSkillLimitsInfo* other) {
  using std::swap;
  skill_limits_list_.InternalSwap(&other->skill_limits_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGCardSkillLimitsInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGCardSkillLimitsInfo

// repeated .proto.GCGSkillLimitsInfo skill_limits_list = 12;
int GCGCardSkillLimitsInfo::skill_limits_list_size() const {
  return skill_limits_list_.size();
}
void GCGCardSkillLimitsInfo::clear_skill_limits_list() {
  skill_limits_list_.Clear();
}
const ::proto::GCGSkillLimitsInfo& GCGCardSkillLimitsInfo::skill_limits_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_.Get(index);
}
::proto::GCGSkillLimitsInfo* GCGCardSkillLimitsInfo::mutable_skill_limits_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_.Mutable(index);
}
::proto::GCGSkillLimitsInfo* GCGCardSkillLimitsInfo::add_skill_limits_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >*
GCGCardSkillLimitsInfo::mutable_skill_limits_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return &skill_limits_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >&
GCGCardSkillLimitsInfo::skill_limits_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry() {}
GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[26];
}
void GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry::MergeFrom(const GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgSkillLimitsChange::kCardLimitsChangeMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgSkillLimitsChange)
}
GCGMsgSkillLimitsChange::GCGMsgSkillLimitsChange(const GCGMsgSkillLimitsChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_limits_change_map_.MergeFrom(from.card_limits_change_map_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgSkillLimitsChange)
}

void GCGMsgSkillLimitsChange::SharedCtor() {
  _cached_size_ = 0;
}

GCGMsgSkillLimitsChange::~GCGMsgSkillLimitsChange() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgSkillLimitsChange)
  SharedDtor();
}

void GCGMsgSkillLimitsChange::SharedDtor() {
}

void GCGMsgSkillLimitsChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgSkillLimitsChange::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgSkillLimitsChange& GCGMsgSkillLimitsChange::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgSkillLimitsChange* GCGMsgSkillLimitsChange::New(::google::protobuf::Arena* arena) const {
  GCGMsgSkillLimitsChange* n = new GCGMsgSkillLimitsChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgSkillLimitsChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgSkillLimitsChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_limits_change_map_.Clear();
  _internal_metadata_.Clear();
}

bool GCGMsgSkillLimitsChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgSkillLimitsChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .proto.GCGCardSkillLimitsInfo> card_limits_change_map = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry,
              ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo > > parser(&card_limits_change_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgSkillLimitsChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgSkillLimitsChange)
  return false;
#undef DO_
}

void GCGMsgSkillLimitsChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgSkillLimitsChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.GCGCardSkillLimitsInfo> card_limits_change_map = 15;
  if (!this->card_limits_change_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->card_limits_change_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_limits_change_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::const_iterator
          it = this->card_limits_change_map().begin();
          it != this->card_limits_change_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_limits_change_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::const_iterator
          it = this->card_limits_change_map().begin();
          it != this->card_limits_change_map().end(); ++it) {
        entry.reset(card_limits_change_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgSkillLimitsChange)
}

::google::protobuf::uint8* GCGMsgSkillLimitsChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgSkillLimitsChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.GCGCardSkillLimitsInfo> card_limits_change_map = 15;
  if (!this->card_limits_change_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->card_limits_change_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_limits_change_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::const_iterator
          it = this->card_limits_change_map().begin();
          it != this->card_limits_change_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_limits_change_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::const_iterator
          it = this->card_limits_change_map().begin();
          it != this->card_limits_change_map().end(); ++it) {
        entry.reset(card_limits_change_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgSkillLimitsChange)
  return target;
}

size_t GCGMsgSkillLimitsChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgSkillLimitsChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.GCGCardSkillLimitsInfo> card_limits_change_map = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->card_limits_change_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >::const_iterator
        it = this->card_limits_change_map().begin();
        it != this->card_limits_change_map().end(); ++it) {
      entry.reset(card_limits_change_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgSkillLimitsChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgSkillLimitsChange)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgSkillLimitsChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgSkillLimitsChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgSkillLimitsChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgSkillLimitsChange)
    MergeFrom(*source);
  }
}

void GCGMsgSkillLimitsChange::MergeFrom(const GCGMsgSkillLimitsChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgSkillLimitsChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_limits_change_map_.MergeFrom(from.card_limits_change_map_);
}

void GCGMsgSkillLimitsChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgSkillLimitsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgSkillLimitsChange::CopyFrom(const GCGMsgSkillLimitsChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgSkillLimitsChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgSkillLimitsChange::IsInitialized() const {
  return true;
}

void GCGMsgSkillLimitsChange::Swap(GCGMsgSkillLimitsChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgSkillLimitsChange::InternalSwap(GCGMsgSkillLimitsChange* other) {
  using std::swap;
  card_limits_change_map_.Swap(&other->card_limits_change_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgSkillLimitsChange::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgSkillLimitsChange

// map<uint32, .proto.GCGCardSkillLimitsInfo> card_limits_change_map = 15;
int GCGMsgSkillLimitsChange::card_limits_change_map_size() const {
  return card_limits_change_map_.size();
}
void GCGMsgSkillLimitsChange::clear_card_limits_change_map() {
  card_limits_change_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >&
GCGMsgSkillLimitsChange::card_limits_change_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgSkillLimitsChange.card_limits_change_map)
  return card_limits_change_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >*
GCGMsgSkillLimitsChange::mutable_card_limits_change_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgSkillLimitsChange.card_limits_change_map)
  return card_limits_change_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgCostDice::kControllerIdFieldNumber;
const int GCGMsgCostDice::kSelectDiceIndexListFieldNumber;
const int GCGMsgCostDice::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgCostDice::GCGMsgCostDice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgCostDice)
}
GCGMsgCostDice::GCGMsgCostDice(const GCGMsgCostDice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      select_dice_index_list_(from.select_dice_index_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgCostDice)
}

void GCGMsgCostDice::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(reason_));
  _cached_size_ = 0;
}

GCGMsgCostDice::~GCGMsgCostDice() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgCostDice)
  SharedDtor();
}

void GCGMsgCostDice::SharedDtor() {
}

void GCGMsgCostDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgCostDice::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgCostDice& GCGMsgCostDice::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgCostDice* GCGMsgCostDice::New(::google::protobuf::Arena* arena) const {
  GCGMsgCostDice* n = new GCGMsgCostDice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgCostDice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgCostDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  select_dice_index_list_.Clear();
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool GCGMsgCostDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgCostDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 select_dice_index_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_select_dice_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_select_dice_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgCostDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgCostDice)
  return false;
#undef DO_
}

void GCGMsgCostDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgCostDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->controller_id(), output);
  }

  // .proto.GCGReason reason = 9;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->reason(), output);
  }

  // repeated uint32 select_dice_index_list = 13;
  if (this->select_dice_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _select_dice_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->select_dice_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->select_dice_index_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgCostDice)
}

::google::protobuf::uint8* GCGMsgCostDice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgCostDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->controller_id(), target);
  }

  // .proto.GCGReason reason = 9;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->reason(), target);
  }

  // repeated uint32 select_dice_index_list = 13;
  if (this->select_dice_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _select_dice_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->select_dice_index_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgCostDice)
  return target;
}

size_t GCGMsgCostDice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgCostDice)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 select_dice_index_list = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->select_dice_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _select_dice_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // .proto.GCGReason reason = 9;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgCostDice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgCostDice)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgCostDice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgCostDice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgCostDice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgCostDice)
    MergeFrom(*source);
  }
}

void GCGMsgCostDice::MergeFrom(const GCGMsgCostDice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgCostDice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  select_dice_index_list_.MergeFrom(from.select_dice_index_list_);
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void GCGMsgCostDice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgCostDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgCostDice::CopyFrom(const GCGMsgCostDice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgCostDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgCostDice::IsInitialized() const {
  return true;
}

void GCGMsgCostDice::Swap(GCGMsgCostDice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgCostDice::InternalSwap(GCGMsgCostDice* other) {
  using std::swap;
  select_dice_index_list_.InternalSwap(&other->select_dice_index_list_);
  swap(controller_id_, other->controller_id_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgCostDice::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgCostDice

// uint32 controller_id = 6;
void GCGMsgCostDice::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgCostDice::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostDice.controller_id)
  return controller_id_;
}
void GCGMsgCostDice::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostDice.controller_id)
}

// repeated uint32 select_dice_index_list = 13;
int GCGMsgCostDice::select_dice_index_list_size() const {
  return select_dice_index_list_.size();
}
void GCGMsgCostDice::clear_select_dice_index_list() {
  select_dice_index_list_.Clear();
}
::google::protobuf::uint32 GCGMsgCostDice::select_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostDice.select_dice_index_list)
  return select_dice_index_list_.Get(index);
}
void GCGMsgCostDice::set_select_dice_index_list(int index, ::google::protobuf::uint32 value) {
  select_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostDice.select_dice_index_list)
}
void GCGMsgCostDice::add_select_dice_index_list(::google::protobuf::uint32 value) {
  select_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgCostDice.select_dice_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgCostDice::select_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgCostDice.select_dice_index_list)
  return select_dice_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgCostDice::mutable_select_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgCostDice.select_dice_index_list)
  return &select_dice_index_list_;
}

// .proto.GCGReason reason = 9;
void GCGMsgCostDice::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgCostDice::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostDice.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgCostDice::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostDice.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGMsgAddDice::GCGMsgAddDice_BeforeDiceMapEntry::GCGMsgAddDice_BeforeDiceMapEntry() {}
GCGMsgAddDice::GCGMsgAddDice_BeforeDiceMapEntry::GCGMsgAddDice_BeforeDiceMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGMsgAddDice::GCGMsgAddDice_BeforeDiceMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[29];
}
void GCGMsgAddDice::GCGMsgAddDice_BeforeDiceMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGMsgAddDice::GCGMsgAddDice_BeforeDiceMapEntry::MergeFrom(const GCGMsgAddDice_BeforeDiceMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGMsgAddDice::GCGMsgAddDice_DiceMapEntry::GCGMsgAddDice_DiceMapEntry() {}
GCGMsgAddDice::GCGMsgAddDice_DiceMapEntry::GCGMsgAddDice_DiceMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGMsgAddDice::GCGMsgAddDice_DiceMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[30];
}
void GCGMsgAddDice::GCGMsgAddDice_DiceMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGMsgAddDice::GCGMsgAddDice_DiceMapEntry::MergeFrom(const GCGMsgAddDice_DiceMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgAddDice::kBeforeDiceMapFieldNumber;
const int GCGMsgAddDice::kChangeCountFieldNumber;
const int GCGMsgAddDice::kDiceMapFieldNumber;
const int GCGMsgAddDice::kReasonFieldNumber;
const int GCGMsgAddDice::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgAddDice::GCGMsgAddDice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgAddDice)
}
GCGMsgAddDice::GCGMsgAddDice(const GCGMsgAddDice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dice_map_.MergeFrom(from.dice_map_);
  before_dice_map_.MergeFrom(from.before_dice_map_);
  ::memcpy(&change_count_, &from.change_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&change_count_)) + sizeof(controller_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgAddDice)
}

void GCGMsgAddDice::SharedCtor() {
  ::memset(&change_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&change_count_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGMsgAddDice::~GCGMsgAddDice() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgAddDice)
  SharedDtor();
}

void GCGMsgAddDice::SharedDtor() {
}

void GCGMsgAddDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgAddDice::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgAddDice& GCGMsgAddDice::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgAddDice* GCGMsgAddDice::New(::google::protobuf::Arena* arena) const {
  GCGMsgAddDice* n = new GCGMsgAddDice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgAddDice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgAddDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dice_map_.Clear();
  before_dice_map_.Clear();
  ::memset(&change_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&change_count_)) + sizeof(controller_id_));
  _internal_metadata_.Clear();
}

bool GCGMsgAddDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgAddDice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 change_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.GCGDiceSideType> dice_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          GCGMsgAddDice_DiceMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGMsgAddDice_DiceMapEntry,
              ::google::protobuf::uint32, ::proto::GCGDiceSideType,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType > > parser(&dice_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.GCGDiceSideType> before_dice_map = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          GCGMsgAddDice_BeforeDiceMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGMsgAddDice_BeforeDiceMapEntry,
              ::google::protobuf::uint32, ::proto::GCGDiceSideType,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType > > parser(&before_dice_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgAddDice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgAddDice)
  return false;
#undef DO_
}

void GCGMsgAddDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgAddDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 change_count = 1;
  if (this->change_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->change_count(), output);
  }

  // .proto.GCGReason reason = 4;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  // map<uint32, .proto.GCGDiceSideType> dice_map = 8;
  if (!this->dice_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->dice_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->dice_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->dice_map().begin();
          it != this->dice_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_DiceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dice_map_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_DiceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->dice_map().begin();
          it != this->dice_map().end(); ++it) {
        entry.reset(dice_map_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // uint32 controller_id = 10;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->controller_id(), output);
  }

  // map<uint32, .proto.GCGDiceSideType> before_dice_map = 12;
  if (!this->before_dice_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->before_dice_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->before_dice_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->before_dice_map().begin();
          it != this->before_dice_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_BeforeDiceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(before_dice_map_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_BeforeDiceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->before_dice_map().begin();
          it != this->before_dice_map().end(); ++it) {
        entry.reset(before_dice_map_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgAddDice)
}

::google::protobuf::uint8* GCGMsgAddDice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgAddDice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 change_count = 1;
  if (this->change_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->change_count(), target);
  }

  // .proto.GCGReason reason = 4;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  // map<uint32, .proto.GCGDiceSideType> dice_map = 8;
  if (!this->dice_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->dice_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->dice_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->dice_map().begin();
          it != this->dice_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_DiceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dice_map_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_DiceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->dice_map().begin();
          it != this->dice_map().end(); ++it) {
        entry.reset(dice_map_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 controller_id = 10;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->controller_id(), target);
  }

  // map<uint32, .proto.GCGDiceSideType> before_dice_map = 12;
  if (!this->before_dice_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->before_dice_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->before_dice_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->before_dice_map().begin();
          it != this->before_dice_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_BeforeDiceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(before_dice_map_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgAddDice_BeforeDiceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
          it = this->before_dice_map().begin();
          it != this->before_dice_map().end(); ++it) {
        entry.reset(before_dice_map_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgAddDice)
  return target;
}

size_t GCGMsgAddDice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgAddDice)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.GCGDiceSideType> dice_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dice_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGMsgAddDice_DiceMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
        it = this->dice_map().begin();
        it != this->dice_map().end(); ++it) {
      entry.reset(dice_map_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .proto.GCGDiceSideType> before_dice_map = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->before_dice_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGMsgAddDice_BeforeDiceMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >::const_iterator
        it = this->before_dice_map().begin();
        it != this->before_dice_map().end(); ++it) {
      entry.reset(before_dice_map_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int32 change_count = 1;
  if (this->change_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->change_count());
  }

  // .proto.GCGReason reason = 4;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 controller_id = 10;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgAddDice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgAddDice)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgAddDice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgAddDice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgAddDice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgAddDice)
    MergeFrom(*source);
  }
}

void GCGMsgAddDice::MergeFrom(const GCGMsgAddDice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgAddDice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dice_map_.MergeFrom(from.dice_map_);
  before_dice_map_.MergeFrom(from.before_dice_map_);
  if (from.change_count() != 0) {
    set_change_count(from.change_count());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMsgAddDice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgAddDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgAddDice::CopyFrom(const GCGMsgAddDice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgAddDice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgAddDice::IsInitialized() const {
  return true;
}

void GCGMsgAddDice::Swap(GCGMsgAddDice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgAddDice::InternalSwap(GCGMsgAddDice* other) {
  using std::swap;
  dice_map_.Swap(&other->dice_map_);
  before_dice_map_.Swap(&other->before_dice_map_);
  swap(change_count_, other->change_count_);
  swap(reason_, other->reason_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgAddDice::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgAddDice

// map<uint32, .proto.GCGDiceSideType> before_dice_map = 12;
int GCGMsgAddDice::before_dice_map_size() const {
  return before_dice_map_.size();
}
void GCGMsgAddDice::clear_before_dice_map() {
  before_dice_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >&
GCGMsgAddDice::before_dice_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgAddDice.before_dice_map)
  return before_dice_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >*
GCGMsgAddDice::mutable_before_dice_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgAddDice.before_dice_map)
  return before_dice_map_.MutableMap();
}

// int32 change_count = 1;
void GCGMsgAddDice::clear_change_count() {
  change_count_ = 0;
}
::google::protobuf::int32 GCGMsgAddDice::change_count() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddDice.change_count)
  return change_count_;
}
void GCGMsgAddDice::set_change_count(::google::protobuf::int32 value) {
  
  change_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddDice.change_count)
}

// map<uint32, .proto.GCGDiceSideType> dice_map = 8;
int GCGMsgAddDice::dice_map_size() const {
  return dice_map_.size();
}
void GCGMsgAddDice::clear_dice_map() {
  dice_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >&
GCGMsgAddDice::dice_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgAddDice.dice_map)
  return dice_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >*
GCGMsgAddDice::mutable_dice_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgAddDice.dice_map)
  return dice_map_.MutableMap();
}

// .proto.GCGReason reason = 4;
void GCGMsgAddDice::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgAddDice::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddDice.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgAddDice::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddDice.reason)
}

// uint32 controller_id = 10;
void GCGMsgAddDice::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgAddDice::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddDice.controller_id)
  return controller_id_;
}
void GCGMsgAddDice::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddDice.controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgNewCard::kCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgNewCard::GCGMsgNewCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgNewCard)
}
GCGMsgNewCard::GCGMsgNewCard(const GCGMsgNewCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_card()) {
    card_ = new ::proto::GCGCard(*from.card_);
  } else {
    card_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgNewCard)
}

void GCGMsgNewCard::SharedCtor() {
  card_ = NULL;
  _cached_size_ = 0;
}

GCGMsgNewCard::~GCGMsgNewCard() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgNewCard)
  SharedDtor();
}

void GCGMsgNewCard::SharedDtor() {
  if (this != internal_default_instance()) delete card_;
}

void GCGMsgNewCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgNewCard::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgNewCard& GCGMsgNewCard::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgNewCard* GCGMsgNewCard::New(::google::protobuf::Arena* arena) const {
  GCGMsgNewCard* n = new GCGMsgNewCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgNewCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgNewCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && card_ != NULL) {
    delete card_;
  }
  card_ = NULL;
  _internal_metadata_.Clear();
}

bool GCGMsgNewCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgNewCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGCard card = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgNewCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgNewCard)
  return false;
#undef DO_
}

void GCGMsgNewCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgNewCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGCard card = 15;
  if (this->has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->card_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgNewCard)
}

::google::protobuf::uint8* GCGMsgNewCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgNewCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGCard card = 15;
  if (this->has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->card_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgNewCard)
  return target;
}

size_t GCGMsgNewCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgNewCard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGCard card = 15;
  if (this->has_card()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->card_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgNewCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgNewCard)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgNewCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgNewCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgNewCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgNewCard)
    MergeFrom(*source);
  }
}

void GCGMsgNewCard::MergeFrom(const GCGMsgNewCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgNewCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_card()) {
    mutable_card()->::proto::GCGCard::MergeFrom(from.card());
  }
}

void GCGMsgNewCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgNewCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgNewCard::CopyFrom(const GCGMsgNewCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgNewCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgNewCard::IsInitialized() const {
  return true;
}

void GCGMsgNewCard::Swap(GCGMsgNewCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgNewCard::InternalSwap(GCGMsgNewCard* other) {
  using std::swap;
  swap(card_, other->card_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgNewCard::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgNewCard

// .proto.GCGCard card = 15;
bool GCGMsgNewCard::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
void GCGMsgNewCard::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) delete card_;
  card_ = NULL;
}
const ::proto::GCGCard& GCGMsgNewCard::card() const {
  const ::proto::GCGCard* p = card_;
  // @@protoc_insertion_point(field_get:proto.GCGMsgNewCard.card)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCard*>(
      &::proto::_GCGCard_default_instance_);
}
::proto::GCGCard* GCGMsgNewCard::mutable_card() {
  
  if (card_ == NULL) {
    card_ = new ::proto::GCGCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgNewCard.card)
  return card_;
}
::proto::GCGCard* GCGMsgNewCard::release_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMsgNewCard.card)
  
  ::proto::GCGCard* temp = card_;
  card_ = NULL;
  return temp;
}
void GCGMsgNewCard::set_allocated_card(::proto::GCGCard* card) {
  delete card_;
  card_ = card;
  if (card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMsgNewCard.card)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGMsgUpdateController::GCGMsgUpdateController_AllowControllerMapEntry::GCGMsgUpdateController_AllowControllerMapEntry() {}
GCGMsgUpdateController::GCGMsgUpdateController_AllowControllerMapEntry::GCGMsgUpdateController_AllowControllerMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGMsgUpdateController::GCGMsgUpdateController_AllowControllerMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[33];
}
void GCGMsgUpdateController::GCGMsgUpdateController_AllowControllerMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGMsgUpdateController::GCGMsgUpdateController_AllowControllerMapEntry::MergeFrom(const GCGMsgUpdateController_AllowControllerMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgUpdateController::kAllowControllerMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgUpdateController::GCGMsgUpdateController()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgUpdateController)
}
GCGMsgUpdateController::GCGMsgUpdateController(const GCGMsgUpdateController& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allow_controller_map_.MergeFrom(from.allow_controller_map_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgUpdateController)
}

void GCGMsgUpdateController::SharedCtor() {
  _cached_size_ = 0;
}

GCGMsgUpdateController::~GCGMsgUpdateController() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgUpdateController)
  SharedDtor();
}

void GCGMsgUpdateController::SharedDtor() {
}

void GCGMsgUpdateController::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgUpdateController::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgUpdateController& GCGMsgUpdateController::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgUpdateController* GCGMsgUpdateController::New(::google::protobuf::Arena* arena) const {
  GCGMsgUpdateController* n = new GCGMsgUpdateController;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgUpdateController::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgUpdateController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_controller_map_.Clear();
  _internal_metadata_.Clear();
}

bool GCGMsgUpdateController::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgUpdateController)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> allow_controller_map = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          GCGMsgUpdateController_AllowControllerMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGMsgUpdateController_AllowControllerMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&allow_controller_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgUpdateController)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgUpdateController)
  return false;
#undef DO_
}

void GCGMsgUpdateController::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgUpdateController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> allow_controller_map = 7;
  if (!this->allow_controller_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->allow_controller_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->allow_controller_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgUpdateController_AllowControllerMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgUpdateController_AllowControllerMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgUpdateController)
}

::google::protobuf::uint8* GCGMsgUpdateController::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgUpdateController)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> allow_controller_map = 7;
  if (!this->allow_controller_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->allow_controller_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->allow_controller_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgUpdateController_AllowControllerMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgUpdateController_AllowControllerMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgUpdateController)
  return target;
}

size_t GCGMsgUpdateController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgUpdateController)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> allow_controller_map = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_controller_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGMsgUpdateController_AllowControllerMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->allow_controller_map().begin();
        it != this->allow_controller_map().end(); ++it) {
      entry.reset(allow_controller_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgUpdateController::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgUpdateController)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgUpdateController* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgUpdateController>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgUpdateController)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgUpdateController)
    MergeFrom(*source);
  }
}

void GCGMsgUpdateController::MergeFrom(const GCGMsgUpdateController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgUpdateController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_controller_map_.MergeFrom(from.allow_controller_map_);
}

void GCGMsgUpdateController::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgUpdateController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgUpdateController::CopyFrom(const GCGMsgUpdateController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgUpdateController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgUpdateController::IsInitialized() const {
  return true;
}

void GCGMsgUpdateController::Swap(GCGMsgUpdateController* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgUpdateController::InternalSwap(GCGMsgUpdateController* other) {
  using std::swap;
  allow_controller_map_.Swap(&other->allow_controller_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgUpdateController::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgUpdateController

// map<uint32, uint32> allow_controller_map = 7;
int GCGMsgUpdateController::allow_controller_map_size() const {
  return allow_controller_map_.size();
}
void GCGMsgUpdateController::clear_allow_controller_map() {
  allow_controller_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGMsgUpdateController::allow_controller_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgUpdateController.allow_controller_map)
  return allow_controller_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGMsgUpdateController::mutable_allow_controller_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgUpdateController.allow_controller_map)
  return allow_controller_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgModifyAdd::kPosFieldNumber;
const int GCGMsgModifyAdd::kOwnerCardGuidFieldNumber;
const int GCGMsgModifyAdd::kCardGuidListFieldNumber;
const int GCGMsgModifyAdd::kControllerIdFieldNumber;
const int GCGMsgModifyAdd::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgModifyAdd::GCGMsgModifyAdd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgModifyAdd)
}
GCGMsgModifyAdd::GCGMsgModifyAdd(const GCGMsgModifyAdd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_guid_list_(from.card_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pos_, &from.pos_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(controller_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgModifyAdd)
}

void GCGMsgModifyAdd::SharedCtor() {
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGMsgModifyAdd::~GCGMsgModifyAdd() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgModifyAdd)
  SharedDtor();
}

void GCGMsgModifyAdd::SharedDtor() {
}

void GCGMsgModifyAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgModifyAdd::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgModifyAdd& GCGMsgModifyAdd::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgModifyAdd* GCGMsgModifyAdd::New(::google::protobuf::Arena* arena) const {
  GCGMsgModifyAdd* n = new GCGMsgModifyAdd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgModifyAdd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgModifyAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_guid_list_.Clear();
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(controller_id_));
  _internal_metadata_.Clear();
}

bool GCGMsgModifyAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgModifyAdd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pos = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_card_guid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 card_guid_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 122u, input, this->mutable_card_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgModifyAdd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgModifyAdd)
  return false;
#undef DO_
}

void GCGMsgModifyAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgModifyAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 9;
  if (this->pos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pos(), output);
  }

  // uint32 owner_card_guid = 10;
  if (this->owner_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->owner_card_guid(), output);
  }

  // .proto.GCGReason reason = 11;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->reason(), output);
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->controller_id(), output);
  }

  // repeated uint32 card_guid_list = 15;
  if (this->card_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgModifyAdd)
}

::google::protobuf::uint8* GCGMsgModifyAdd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgModifyAdd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pos = 9;
  if (this->pos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pos(), target);
  }

  // uint32 owner_card_guid = 10;
  if (this->owner_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->owner_card_guid(), target);
  }

  // .proto.GCGReason reason = 11;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->reason(), target);
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->controller_id(), target);
  }

  // repeated uint32 card_guid_list = 15;
  if (this->card_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgModifyAdd)
  return target;
}

size_t GCGMsgModifyAdd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgModifyAdd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_guid_list = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 pos = 9;
  if (this->pos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pos());
  }

  // uint32 owner_card_guid = 10;
  if (this->owner_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_card_guid());
  }

  // .proto.GCGReason reason = 11;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgModifyAdd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgModifyAdd)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgModifyAdd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgModifyAdd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgModifyAdd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgModifyAdd)
    MergeFrom(*source);
  }
}

void GCGMsgModifyAdd::MergeFrom(const GCGMsgModifyAdd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgModifyAdd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_guid_list_.MergeFrom(from.card_guid_list_);
  if (from.pos() != 0) {
    set_pos(from.pos());
  }
  if (from.owner_card_guid() != 0) {
    set_owner_card_guid(from.owner_card_guid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMsgModifyAdd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgModifyAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgModifyAdd::CopyFrom(const GCGMsgModifyAdd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgModifyAdd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgModifyAdd::IsInitialized() const {
  return true;
}

void GCGMsgModifyAdd::Swap(GCGMsgModifyAdd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgModifyAdd::InternalSwap(GCGMsgModifyAdd* other) {
  using std::swap;
  card_guid_list_.InternalSwap(&other->card_guid_list_);
  swap(pos_, other->pos_);
  swap(owner_card_guid_, other->owner_card_guid_);
  swap(reason_, other->reason_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgModifyAdd::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgModifyAdd

// uint32 pos = 9;
void GCGMsgModifyAdd::clear_pos() {
  pos_ = 0u;
}
::google::protobuf::uint32 GCGMsgModifyAdd::pos() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.pos)
  return pos_;
}
void GCGMsgModifyAdd::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.pos)
}

// uint32 owner_card_guid = 10;
void GCGMsgModifyAdd::clear_owner_card_guid() {
  owner_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgModifyAdd::owner_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.owner_card_guid)
  return owner_card_guid_;
}
void GCGMsgModifyAdd::set_owner_card_guid(::google::protobuf::uint32 value) {
  
  owner_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.owner_card_guid)
}

// repeated uint32 card_guid_list = 15;
int GCGMsgModifyAdd::card_guid_list_size() const {
  return card_guid_list_.size();
}
void GCGMsgModifyAdd::clear_card_guid_list() {
  card_guid_list_.Clear();
}
::google::protobuf::uint32 GCGMsgModifyAdd::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.card_guid_list)
  return card_guid_list_.Get(index);
}
void GCGMsgModifyAdd::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.card_guid_list)
}
void GCGMsgModifyAdd::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgModifyAdd.card_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgModifyAdd::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgModifyAdd.card_guid_list)
  return card_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgModifyAdd::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgModifyAdd.card_guid_list)
  return &card_guid_list_;
}

// uint32 controller_id = 14;
void GCGMsgModifyAdd::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgModifyAdd::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.controller_id)
  return controller_id_;
}
void GCGMsgModifyAdd::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.controller_id)
}

// .proto.GCGReason reason = 11;
void GCGMsgModifyAdd::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgModifyAdd::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgModifyAdd::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgModifyRemove::kControllerIdFieldNumber;
const int GCGMsgModifyRemove::kReasonFieldNumber;
const int GCGMsgModifyRemove::kOwnerCardGuidFieldNumber;
const int GCGMsgModifyRemove::kCardGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgModifyRemove::GCGMsgModifyRemove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgModifyRemove)
}
GCGMsgModifyRemove::GCGMsgModifyRemove(const GCGMsgModifyRemove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_guid_list_(from.card_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgModifyRemove)
}

void GCGMsgModifyRemove::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(reason_));
  _cached_size_ = 0;
}

GCGMsgModifyRemove::~GCGMsgModifyRemove() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgModifyRemove)
  SharedDtor();
}

void GCGMsgModifyRemove::SharedDtor() {
}

void GCGMsgModifyRemove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgModifyRemove::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgModifyRemove& GCGMsgModifyRemove::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgModifyRemove* GCGMsgModifyRemove::New(::google::protobuf::Arena* arena) const {
  GCGMsgModifyRemove* n = new GCGMsgModifyRemove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgModifyRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgModifyRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_guid_list_.Clear();
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool GCGMsgModifyRemove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgModifyRemove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_guid_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_card_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_card_guid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGReason reason = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgModifyRemove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgModifyRemove)
  return false;
#undef DO_
}

void GCGMsgModifyRemove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgModifyRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_guid_list = 4;
  if (this->card_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_guid_list(i), output);
  }

  // uint32 owner_card_guid = 5;
  if (this->owner_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->owner_card_guid(), output);
  }

  // .proto.GCGReason reason = 12;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->reason(), output);
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgModifyRemove)
}

::google::protobuf::uint8* GCGMsgModifyRemove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgModifyRemove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_guid_list = 4;
  if (this->card_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_guid_list_, target);
  }

  // uint32 owner_card_guid = 5;
  if (this->owner_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->owner_card_guid(), target);
  }

  // .proto.GCGReason reason = 12;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->reason(), target);
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgModifyRemove)
  return target;
}

size_t GCGMsgModifyRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgModifyRemove)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_guid_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 controller_id = 14;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 owner_card_guid = 5;
  if (this->owner_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_card_guid());
  }

  // .proto.GCGReason reason = 12;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgModifyRemove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgModifyRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgModifyRemove* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgModifyRemove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgModifyRemove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgModifyRemove)
    MergeFrom(*source);
  }
}

void GCGMsgModifyRemove::MergeFrom(const GCGMsgModifyRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgModifyRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_guid_list_.MergeFrom(from.card_guid_list_);
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.owner_card_guid() != 0) {
    set_owner_card_guid(from.owner_card_guid());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void GCGMsgModifyRemove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgModifyRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgModifyRemove::CopyFrom(const GCGMsgModifyRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgModifyRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgModifyRemove::IsInitialized() const {
  return true;
}

void GCGMsgModifyRemove::Swap(GCGMsgModifyRemove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgModifyRemove::InternalSwap(GCGMsgModifyRemove* other) {
  using std::swap;
  card_guid_list_.InternalSwap(&other->card_guid_list_);
  swap(controller_id_, other->controller_id_);
  swap(owner_card_guid_, other->owner_card_guid_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgModifyRemove::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgModifyRemove

// uint32 controller_id = 14;
void GCGMsgModifyRemove::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgModifyRemove::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.controller_id)
  return controller_id_;
}
void GCGMsgModifyRemove::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.controller_id)
}

// .proto.GCGReason reason = 12;
void GCGMsgModifyRemove::clear_reason() {
  reason_ = 0;
}
::proto::GCGReason GCGMsgModifyRemove::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
void GCGMsgModifyRemove::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.reason)
}

// uint32 owner_card_guid = 5;
void GCGMsgModifyRemove::clear_owner_card_guid() {
  owner_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgModifyRemove::owner_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.owner_card_guid)
  return owner_card_guid_;
}
void GCGMsgModifyRemove::set_owner_card_guid(::google::protobuf::uint32 value) {
  
  owner_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.owner_card_guid)
}

// repeated uint32 card_guid_list = 4;
int GCGMsgModifyRemove::card_guid_list_size() const {
  return card_guid_list_.size();
}
void GCGMsgModifyRemove::clear_card_guid_list() {
  card_guid_list_.Clear();
}
::google::protobuf::uint32 GCGMsgModifyRemove::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.card_guid_list)
  return card_guid_list_.Get(index);
}
void GCGMsgModifyRemove::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.card_guid_list)
}
void GCGMsgModifyRemove::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgModifyRemove.card_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgModifyRemove::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgModifyRemove.card_guid_list)
  return card_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgModifyRemove::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgModifyRemove.card_guid_list)
  return &card_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgPVEIntention::kSkillIdListFieldNumber;
const int GCGMsgPVEIntention::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgPVEIntention::GCGMsgPVEIntention()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgPVEIntention)
}
GCGMsgPVEIntention::GCGMsgPVEIntention(const GCGMsgPVEIntention& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_id_list_(from.skill_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_guid_ = from.card_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgPVEIntention)
}

void GCGMsgPVEIntention::SharedCtor() {
  card_guid_ = 0u;
  _cached_size_ = 0;
}

GCGMsgPVEIntention::~GCGMsgPVEIntention() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgPVEIntention)
  SharedDtor();
}

void GCGMsgPVEIntention::SharedDtor() {
}

void GCGMsgPVEIntention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgPVEIntention::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgPVEIntention& GCGMsgPVEIntention::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgPVEIntention* GCGMsgPVEIntention::New(::google::protobuf::Arena* arena) const {
  GCGMsgPVEIntention* n = new GCGMsgPVEIntention;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgPVEIntention::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgPVEIntention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_id_list_.Clear();
  card_guid_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGMsgPVEIntention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgPVEIntention)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 skill_id_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_skill_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgPVEIntention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgPVEIntention)
  return false;
#undef DO_
}

void GCGMsgPVEIntention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgPVEIntention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 skill_id_list = 8;
  if (this->skill_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_id_list(i), output);
  }

  // uint32 card_guid = 13;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgPVEIntention)
}

::google::protobuf::uint8* GCGMsgPVEIntention::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgPVEIntention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 skill_id_list = 8;
  if (this->skill_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_id_list_, target);
  }

  // uint32 card_guid = 13;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgPVEIntention)
  return target;
}

size_t GCGMsgPVEIntention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgPVEIntention)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 skill_id_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 card_guid = 13;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgPVEIntention::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgPVEIntention)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgPVEIntention* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgPVEIntention>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgPVEIntention)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgPVEIntention)
    MergeFrom(*source);
  }
}

void GCGMsgPVEIntention::MergeFrom(const GCGMsgPVEIntention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgPVEIntention)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_id_list_.MergeFrom(from.skill_id_list_);
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
}

void GCGMsgPVEIntention::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgPVEIntention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgPVEIntention::CopyFrom(const GCGMsgPVEIntention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgPVEIntention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgPVEIntention::IsInitialized() const {
  return true;
}

void GCGMsgPVEIntention::Swap(GCGMsgPVEIntention* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgPVEIntention::InternalSwap(GCGMsgPVEIntention* other) {
  using std::swap;
  skill_id_list_.InternalSwap(&other->skill_id_list_);
  swap(card_guid_, other->card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgPVEIntention::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgPVEIntention

// repeated uint32 skill_id_list = 8;
int GCGMsgPVEIntention::skill_id_list_size() const {
  return skill_id_list_.size();
}
void GCGMsgPVEIntention::clear_skill_id_list() {
  skill_id_list_.Clear();
}
::google::protobuf::uint32 GCGMsgPVEIntention::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntention.skill_id_list)
  return skill_id_list_.Get(index);
}
void GCGMsgPVEIntention::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgPVEIntention.skill_id_list)
}
void GCGMsgPVEIntention::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgPVEIntention.skill_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgPVEIntention::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgPVEIntention.skill_id_list)
  return skill_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgPVEIntention::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgPVEIntention.skill_id_list)
  return &skill_id_list_;
}

// uint32 card_guid = 13;
void GCGMsgPVEIntention::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgPVEIntention::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntention.card_guid)
  return card_guid_;
}
void GCGMsgPVEIntention::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPVEIntention.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo_IntentionMapEntry::GCGMsgPVEIntentionInfo_IntentionMapEntry() {}
GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo_IntentionMapEntry::GCGMsgPVEIntentionInfo_IntentionMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo_IntentionMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[38];
}
void GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo_IntentionMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo_IntentionMapEntry::MergeFrom(const GCGMsgPVEIntentionInfo_IntentionMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgPVEIntentionInfo::kIntentionMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgPVEIntentionInfo)
}
GCGMsgPVEIntentionInfo::GCGMsgPVEIntentionInfo(const GCGMsgPVEIntentionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  intention_map_.MergeFrom(from.intention_map_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgPVEIntentionInfo)
}

void GCGMsgPVEIntentionInfo::SharedCtor() {
  _cached_size_ = 0;
}

GCGMsgPVEIntentionInfo::~GCGMsgPVEIntentionInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgPVEIntentionInfo)
  SharedDtor();
}

void GCGMsgPVEIntentionInfo::SharedDtor() {
}

void GCGMsgPVEIntentionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgPVEIntentionInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgPVEIntentionInfo& GCGMsgPVEIntentionInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgPVEIntentionInfo* GCGMsgPVEIntentionInfo::New(::google::protobuf::Arena* arena) const {
  GCGMsgPVEIntentionInfo* n = new GCGMsgPVEIntentionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgPVEIntentionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgPVEIntentionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intention_map_.Clear();
  _internal_metadata_.Clear();
}

bool GCGMsgPVEIntentionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgPVEIntentionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .proto.GCGMsgPVEIntention> intention_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          GCGMsgPVEIntentionInfo_IntentionMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGMsgPVEIntentionInfo_IntentionMapEntry,
              ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention > > parser(&intention_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgPVEIntentionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgPVEIntentionInfo)
  return false;
#undef DO_
}

void GCGMsgPVEIntentionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgPVEIntentionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.GCGMsgPVEIntention> intention_map = 2;
  if (!this->intention_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->intention_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->intention_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::const_iterator
          it = this->intention_map().begin();
          it != this->intention_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgPVEIntentionInfo_IntentionMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intention_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgPVEIntentionInfo_IntentionMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::const_iterator
          it = this->intention_map().begin();
          it != this->intention_map().end(); ++it) {
        entry.reset(intention_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgPVEIntentionInfo)
}

::google::protobuf::uint8* GCGMsgPVEIntentionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgPVEIntentionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.GCGMsgPVEIntention> intention_map = 2;
  if (!this->intention_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->intention_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->intention_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::const_iterator
          it = this->intention_map().begin();
          it != this->intention_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGMsgPVEIntentionInfo_IntentionMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(intention_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGMsgPVEIntentionInfo_IntentionMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::const_iterator
          it = this->intention_map().begin();
          it != this->intention_map().end(); ++it) {
        entry.reset(intention_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgPVEIntentionInfo)
  return target;
}

size_t GCGMsgPVEIntentionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgPVEIntentionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.GCGMsgPVEIntention> intention_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->intention_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGMsgPVEIntentionInfo_IntentionMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >::const_iterator
        it = this->intention_map().begin();
        it != this->intention_map().end(); ++it) {
      entry.reset(intention_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgPVEIntentionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgPVEIntentionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgPVEIntentionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgPVEIntentionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgPVEIntentionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgPVEIntentionInfo)
    MergeFrom(*source);
  }
}

void GCGMsgPVEIntentionInfo::MergeFrom(const GCGMsgPVEIntentionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgPVEIntentionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intention_map_.MergeFrom(from.intention_map_);
}

void GCGMsgPVEIntentionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgPVEIntentionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgPVEIntentionInfo::CopyFrom(const GCGMsgPVEIntentionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgPVEIntentionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgPVEIntentionInfo::IsInitialized() const {
  return true;
}

void GCGMsgPVEIntentionInfo::Swap(GCGMsgPVEIntentionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgPVEIntentionInfo::InternalSwap(GCGMsgPVEIntentionInfo* other) {
  using std::swap;
  intention_map_.Swap(&other->intention_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgPVEIntentionInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgPVEIntentionInfo

// map<uint32, .proto.GCGMsgPVEIntention> intention_map = 2;
int GCGMsgPVEIntentionInfo::intention_map_size() const {
  return intention_map_.size();
}
void GCGMsgPVEIntentionInfo::clear_intention_map() {
  intention_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >&
GCGMsgPVEIntentionInfo::intention_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgPVEIntentionInfo.intention_map)
  return intention_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >*
GCGMsgPVEIntentionInfo::mutable_intention_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgPVEIntentionInfo.intention_map)
  return intention_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgPVEIntentionChange::kChangeIntentionListFieldNumber;
const int GCGMsgPVEIntentionChange::kChangeTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgPVEIntentionChange::GCGMsgPVEIntentionChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgPVEIntentionChange)
}
GCGMsgPVEIntentionChange::GCGMsgPVEIntentionChange(const GCGMsgPVEIntentionChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      change_intention_list_(from.change_intention_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  change_type_ = from.change_type_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgPVEIntentionChange)
}

void GCGMsgPVEIntentionChange::SharedCtor() {
  change_type_ = 0;
  _cached_size_ = 0;
}

GCGMsgPVEIntentionChange::~GCGMsgPVEIntentionChange() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgPVEIntentionChange)
  SharedDtor();
}

void GCGMsgPVEIntentionChange::SharedDtor() {
}

void GCGMsgPVEIntentionChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgPVEIntentionChange::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgPVEIntentionChange& GCGMsgPVEIntentionChange::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgPVEIntentionChange* GCGMsgPVEIntentionChange::New(::google::protobuf::Arena* arena) const {
  GCGMsgPVEIntentionChange* n = new GCGMsgPVEIntentionChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgPVEIntentionChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgPVEIntentionChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_intention_list_.Clear();
  change_type_ = 0;
  _internal_metadata_.Clear();
}

bool GCGMsgPVEIntentionChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgPVEIntentionChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGIntentionChangeType change_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::proto::GCGIntentionChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGMsgPVEIntention change_intention_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change_intention_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgPVEIntentionChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgPVEIntentionChange)
  return false;
#undef DO_
}

void GCGMsgPVEIntentionChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgPVEIntentionChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGIntentionChangeType change_type = 1;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->change_type(), output);
  }

  // repeated .proto.GCGMsgPVEIntention change_intention_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_intention_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->change_intention_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgPVEIntentionChange)
}

::google::protobuf::uint8* GCGMsgPVEIntentionChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgPVEIntentionChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGIntentionChangeType change_type = 1;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->change_type(), target);
  }

  // repeated .proto.GCGMsgPVEIntention change_intention_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_intention_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->change_intention_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgPVEIntentionChange)
  return target;
}

size_t GCGMsgPVEIntentionChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgPVEIntentionChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGMsgPVEIntention change_intention_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->change_intention_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_intention_list(static_cast<int>(i)));
    }
  }

  // .proto.GCGIntentionChangeType change_type = 1;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgPVEIntentionChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgPVEIntentionChange)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgPVEIntentionChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgPVEIntentionChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgPVEIntentionChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgPVEIntentionChange)
    MergeFrom(*source);
  }
}

void GCGMsgPVEIntentionChange::MergeFrom(const GCGMsgPVEIntentionChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgPVEIntentionChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  change_intention_list_.MergeFrom(from.change_intention_list_);
  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
}

void GCGMsgPVEIntentionChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgPVEIntentionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgPVEIntentionChange::CopyFrom(const GCGMsgPVEIntentionChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgPVEIntentionChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgPVEIntentionChange::IsInitialized() const {
  return true;
}

void GCGMsgPVEIntentionChange::Swap(GCGMsgPVEIntentionChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgPVEIntentionChange::InternalSwap(GCGMsgPVEIntentionChange* other) {
  using std::swap;
  change_intention_list_.InternalSwap(&other->change_intention_list_);
  swap(change_type_, other->change_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgPVEIntentionChange::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgPVEIntentionChange

// repeated .proto.GCGMsgPVEIntention change_intention_list = 4;
int GCGMsgPVEIntentionChange::change_intention_list_size() const {
  return change_intention_list_.size();
}
void GCGMsgPVEIntentionChange::clear_change_intention_list() {
  change_intention_list_.Clear();
}
const ::proto::GCGMsgPVEIntention& GCGMsgPVEIntentionChange::change_intention_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_.Get(index);
}
::proto::GCGMsgPVEIntention* GCGMsgPVEIntentionChange::mutable_change_intention_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_.Mutable(index);
}
::proto::GCGMsgPVEIntention* GCGMsgPVEIntentionChange::add_change_intention_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGMsgPVEIntention >*
GCGMsgPVEIntentionChange::mutable_change_intention_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return &change_intention_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGMsgPVEIntention >&
GCGMsgPVEIntentionChange::change_intention_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_;
}

// .proto.GCGIntentionChangeType change_type = 1;
void GCGMsgPVEIntentionChange::clear_change_type() {
  change_type_ = 0;
}
::proto::GCGIntentionChangeType GCGMsgPVEIntentionChange::change_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntentionChange.change_type)
  return static_cast< ::proto::GCGIntentionChangeType >(change_type_);
}
void GCGMsgPVEIntentionChange::set_change_type(::proto::GCGIntentionChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPVEIntentionChange.change_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgDuelDataChange::kRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgDuelDataChange::GCGMsgDuelDataChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgDuelDataChange)
}
GCGMsgDuelDataChange::GCGMsgDuelDataChange(const GCGMsgDuelDataChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  round_ = from.round_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgDuelDataChange)
}

void GCGMsgDuelDataChange::SharedCtor() {
  round_ = 0u;
  _cached_size_ = 0;
}

GCGMsgDuelDataChange::~GCGMsgDuelDataChange() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgDuelDataChange)
  SharedDtor();
}

void GCGMsgDuelDataChange::SharedDtor() {
}

void GCGMsgDuelDataChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgDuelDataChange::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgDuelDataChange& GCGMsgDuelDataChange::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgDuelDataChange* GCGMsgDuelDataChange::New(::google::protobuf::Arena* arena) const {
  GCGMsgDuelDataChange* n = new GCGMsgDuelDataChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgDuelDataChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgDuelDataChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  round_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGMsgDuelDataChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgDuelDataChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 round = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgDuelDataChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgDuelDataChange)
  return false;
#undef DO_
}

void GCGMsgDuelDataChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgDuelDataChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 round = 14;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->round(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgDuelDataChange)
}

::google::protobuf::uint8* GCGMsgDuelDataChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgDuelDataChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 round = 14;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->round(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgDuelDataChange)
  return target;
}

size_t GCGMsgDuelDataChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgDuelDataChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 round = 14;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgDuelDataChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgDuelDataChange)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgDuelDataChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgDuelDataChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgDuelDataChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgDuelDataChange)
    MergeFrom(*source);
  }
}

void GCGMsgDuelDataChange::MergeFrom(const GCGMsgDuelDataChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgDuelDataChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.round() != 0) {
    set_round(from.round());
  }
}

void GCGMsgDuelDataChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgDuelDataChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgDuelDataChange::CopyFrom(const GCGMsgDuelDataChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgDuelDataChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgDuelDataChange::IsInitialized() const {
  return true;
}

void GCGMsgDuelDataChange::Swap(GCGMsgDuelDataChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgDuelDataChange::InternalSwap(GCGMsgDuelDataChange* other) {
  using std::swap;
  swap(round_, other->round_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgDuelDataChange::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgDuelDataChange

// uint32 round = 14;
void GCGMsgDuelDataChange::clear_round() {
  round_ = 0u;
}
::google::protobuf::uint32 GCGMsgDuelDataChange::round() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDuelDataChange.round)
  return round_;
}
void GCGMsgDuelDataChange::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDuelDataChange.round)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgClientPerform::kParamListFieldNumber;
const int GCGMsgClientPerform::kPerformTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgClientPerform::GCGMsgClientPerform()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgClientPerform)
}
GCGMsgClientPerform::GCGMsgClientPerform(const GCGMsgClientPerform& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  perform_type_ = from.perform_type_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgClientPerform)
}

void GCGMsgClientPerform::SharedCtor() {
  perform_type_ = 0;
  _cached_size_ = 0;
}

GCGMsgClientPerform::~GCGMsgClientPerform() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgClientPerform)
  SharedDtor();
}

void GCGMsgClientPerform::SharedDtor() {
}

void GCGMsgClientPerform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgClientPerform::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgClientPerform& GCGMsgClientPerform::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgClientPerform* GCGMsgClientPerform::New(::google::protobuf::Arena* arena) const {
  GCGMsgClientPerform* n = new GCGMsgClientPerform;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgClientPerform::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgClientPerform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_list_.Clear();
  perform_type_ = 0;
  _internal_metadata_.Clear();
}

bool GCGMsgClientPerform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgClientPerform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 param_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGClientPerformType perform_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_perform_type(static_cast< ::proto::GCGClientPerformType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgClientPerform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgClientPerform)
  return false;
#undef DO_
}

void GCGMsgClientPerform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgClientPerform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 param_list = 2;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_list(i), output);
  }

  // .proto.GCGClientPerformType perform_type = 5;
  if (this->perform_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->perform_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgClientPerform)
}

::google::protobuf::uint8* GCGMsgClientPerform::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgClientPerform)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 param_list = 2;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_list_, target);
  }

  // .proto.GCGClientPerformType perform_type = 5;
  if (this->perform_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->perform_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgClientPerform)
  return target;
}

size_t GCGMsgClientPerform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgClientPerform)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 param_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.GCGClientPerformType perform_type = 5;
  if (this->perform_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->perform_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgClientPerform::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgClientPerform)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgClientPerform* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgClientPerform>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgClientPerform)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgClientPerform)
    MergeFrom(*source);
  }
}

void GCGMsgClientPerform::MergeFrom(const GCGMsgClientPerform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgClientPerform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_list_.MergeFrom(from.param_list_);
  if (from.perform_type() != 0) {
    set_perform_type(from.perform_type());
  }
}

void GCGMsgClientPerform::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgClientPerform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgClientPerform::CopyFrom(const GCGMsgClientPerform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgClientPerform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgClientPerform::IsInitialized() const {
  return true;
}

void GCGMsgClientPerform::Swap(GCGMsgClientPerform* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgClientPerform::InternalSwap(GCGMsgClientPerform* other) {
  using std::swap;
  param_list_.InternalSwap(&other->param_list_);
  swap(perform_type_, other->perform_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgClientPerform::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgClientPerform

// repeated uint32 param_list = 2;
int GCGMsgClientPerform::param_list_size() const {
  return param_list_.size();
}
void GCGMsgClientPerform::clear_param_list() {
  param_list_.Clear();
}
::google::protobuf::uint32 GCGMsgClientPerform::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgClientPerform.param_list)
  return param_list_.Get(index);
}
void GCGMsgClientPerform::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgClientPerform.param_list)
}
void GCGMsgClientPerform::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgClientPerform.param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgClientPerform::param_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgClientPerform.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgClientPerform::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgClientPerform.param_list)
  return &param_list_;
}

// .proto.GCGClientPerformType perform_type = 5;
void GCGMsgClientPerform::clear_perform_type() {
  perform_type_ = 0;
}
::proto::GCGClientPerformType GCGMsgClientPerform::perform_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgClientPerform.perform_type)
  return static_cast< ::proto::GCGClientPerformType >(perform_type_);
}
void GCGMsgClientPerform::set_perform_type(::proto::GCGClientPerformType value) {
  
  perform_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgClientPerform.perform_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgGameOver::kEndReasonFieldNumber;
const int GCGMsgGameOver::kWinControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgGameOver::GCGMsgGameOver()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgGameOver)
}
GCGMsgGameOver::GCGMsgGameOver(const GCGMsgGameOver& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&win_controller_id_, &from.win_controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_reason_) -
    reinterpret_cast<char*>(&win_controller_id_)) + sizeof(end_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgGameOver)
}

void GCGMsgGameOver::SharedCtor() {
  ::memset(&win_controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_reason_) -
      reinterpret_cast<char*>(&win_controller_id_)) + sizeof(end_reason_));
  _cached_size_ = 0;
}

GCGMsgGameOver::~GCGMsgGameOver() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgGameOver)
  SharedDtor();
}

void GCGMsgGameOver::SharedDtor() {
}

void GCGMsgGameOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgGameOver::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgGameOver& GCGMsgGameOver::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgGameOver* GCGMsgGameOver::New(::google::protobuf::Arena* arena) const {
  GCGMsgGameOver* n = new GCGMsgGameOver;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgGameOver::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgGameOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&win_controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_reason_) -
      reinterpret_cast<char*>(&win_controller_id_)) + sizeof(end_reason_));
  _internal_metadata_.Clear();
}

bool GCGMsgGameOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgGameOver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 win_controller_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGEndReason end_reason = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_end_reason(static_cast< ::proto::GCGEndReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgGameOver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgGameOver)
  return false;
#undef DO_
}

void GCGMsgGameOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgGameOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 win_controller_id = 6;
  if (this->win_controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->win_controller_id(), output);
  }

  // .proto.GCGEndReason end_reason = 13;
  if (this->end_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->end_reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgGameOver)
}

::google::protobuf::uint8* GCGMsgGameOver::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgGameOver)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 win_controller_id = 6;
  if (this->win_controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->win_controller_id(), target);
  }

  // .proto.GCGEndReason end_reason = 13;
  if (this->end_reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->end_reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgGameOver)
  return target;
}

size_t GCGMsgGameOver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgGameOver)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 win_controller_id = 6;
  if (this->win_controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->win_controller_id());
  }

  // .proto.GCGEndReason end_reason = 13;
  if (this->end_reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->end_reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgGameOver::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgGameOver* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgGameOver>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgGameOver)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgGameOver)
    MergeFrom(*source);
  }
}

void GCGMsgGameOver::MergeFrom(const GCGMsgGameOver& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgGameOver)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.win_controller_id() != 0) {
    set_win_controller_id(from.win_controller_id());
  }
  if (from.end_reason() != 0) {
    set_end_reason(from.end_reason());
  }
}

void GCGMsgGameOver::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgGameOver::CopyFrom(const GCGMsgGameOver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgGameOver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgGameOver::IsInitialized() const {
  return true;
}

void GCGMsgGameOver::Swap(GCGMsgGameOver* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgGameOver::InternalSwap(GCGMsgGameOver* other) {
  using std::swap;
  swap(win_controller_id_, other->win_controller_id_);
  swap(end_reason_, other->end_reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgGameOver::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgGameOver

// .proto.GCGEndReason end_reason = 13;
void GCGMsgGameOver::clear_end_reason() {
  end_reason_ = 0;
}
::proto::GCGEndReason GCGMsgGameOver::end_reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgGameOver.end_reason)
  return static_cast< ::proto::GCGEndReason >(end_reason_);
}
void GCGMsgGameOver::set_end_reason(::proto::GCGEndReason value) {
  
  end_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgGameOver.end_reason)
}

// uint32 win_controller_id = 6;
void GCGMsgGameOver::clear_win_controller_id() {
  win_controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgGameOver::win_controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgGameOver.win_controller_id)
  return win_controller_id_;
}
void GCGMsgGameOver::set_win_controller_id(::google::protobuf::uint32 value) {
  
  win_controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgGameOver.win_controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgOpTimer::kBeginTimeFieldNumber;
const int GCGMsgOpTimer::kPhaseFieldNumber;
const int GCGMsgOpTimer::kTimeStampFieldNumber;
const int GCGMsgOpTimer::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgOpTimer::GCGMsgOpTimer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgOpTimer)
}
GCGMsgOpTimer::GCGMsgOpTimer(const GCGMsgOpTimer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_stamp_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(time_stamp_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgOpTimer)
}

void GCGMsgOpTimer::SharedCtor() {
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(time_stamp_));
  _cached_size_ = 0;
}

GCGMsgOpTimer::~GCGMsgOpTimer() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgOpTimer)
  SharedDtor();
}

void GCGMsgOpTimer::SharedDtor() {
}

void GCGMsgOpTimer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgOpTimer::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgOpTimer& GCGMsgOpTimer::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgOpTimer* GCGMsgOpTimer::New(::google::protobuf::Arena* arena) const {
  GCGMsgOpTimer* n = new GCGMsgOpTimer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgOpTimer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgOpTimer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(time_stamp_));
  _internal_metadata_.Clear();
}

bool GCGMsgOpTimer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgOpTimer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGPhaseType phase = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase(static_cast< ::proto::GCGPhaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 begin_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 time_stamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u /* 105 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgOpTimer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgOpTimer)
  return false;
#undef DO_
}

void GCGMsgOpTimer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgOpTimer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGPhaseType phase = 3;
  if (this->phase() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->phase(), output);
  }

  // uint32 controller_id = 8;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->controller_id(), output);
  }

  // fixed64 begin_time = 9;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->begin_time(), output);
  }

  // fixed64 time_stamp = 13;
  if (this->time_stamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(13, this->time_stamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgOpTimer)
}

::google::protobuf::uint8* GCGMsgOpTimer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgOpTimer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGPhaseType phase = 3;
  if (this->phase() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->phase(), target);
  }

  // uint32 controller_id = 8;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->controller_id(), target);
  }

  // fixed64 begin_time = 9;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->begin_time(), target);
  }

  // fixed64 time_stamp = 13;
  if (this->time_stamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(13, this->time_stamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgOpTimer)
  return target;
}

size_t GCGMsgOpTimer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgOpTimer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGPhaseType phase = 3;
  if (this->phase() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
  }

  // uint32 controller_id = 8;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // fixed64 begin_time = 9;
  if (this->begin_time() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 time_stamp = 13;
  if (this->time_stamp() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgOpTimer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgOpTimer)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgOpTimer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgOpTimer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgOpTimer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgOpTimer)
    MergeFrom(*source);
  }
}

void GCGMsgOpTimer::MergeFrom(const GCGMsgOpTimer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgOpTimer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.phase() != 0) {
    set_phase(from.phase());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.time_stamp() != 0) {
    set_time_stamp(from.time_stamp());
  }
}

void GCGMsgOpTimer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgOpTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgOpTimer::CopyFrom(const GCGMsgOpTimer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgOpTimer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgOpTimer::IsInitialized() const {
  return true;
}

void GCGMsgOpTimer::Swap(GCGMsgOpTimer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgOpTimer::InternalSwap(GCGMsgOpTimer* other) {
  using std::swap;
  swap(phase_, other->phase_);
  swap(controller_id_, other->controller_id_);
  swap(begin_time_, other->begin_time_);
  swap(time_stamp_, other->time_stamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgOpTimer::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgOpTimer

// fixed64 begin_time = 9;
void GCGMsgOpTimer::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GCGMsgOpTimer::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.begin_time)
  return begin_time_;
}
void GCGMsgOpTimer::set_begin_time(::google::protobuf::uint64 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.begin_time)
}

// .proto.GCGPhaseType phase = 3;
void GCGMsgOpTimer::clear_phase() {
  phase_ = 0;
}
::proto::GCGPhaseType GCGMsgOpTimer::phase() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.phase)
  return static_cast< ::proto::GCGPhaseType >(phase_);
}
void GCGMsgOpTimer::set_phase(::proto::GCGPhaseType value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.phase)
}

// fixed64 time_stamp = 13;
void GCGMsgOpTimer::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GCGMsgOpTimer::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.time_stamp)
  return time_stamp_;
}
void GCGMsgOpTimer::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.time_stamp)
}

// uint32 controller_id = 8;
void GCGMsgOpTimer::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgOpTimer::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.controller_id)
  return controller_id_;
}
void GCGMsgOpTimer::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgWaitingListChange::kCurIndexFieldNumber;
const int GCGMsgWaitingListChange::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgWaitingListChange::GCGMsgWaitingListChange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgWaitingListChange)
}
GCGMsgWaitingListChange::GCGMsgWaitingListChange(const GCGMsgWaitingListChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_index_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(cur_index_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgWaitingListChange)
}

void GCGMsgWaitingListChange::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_index_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(cur_index_));
  _cached_size_ = 0;
}

GCGMsgWaitingListChange::~GCGMsgWaitingListChange() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgWaitingListChange)
  SharedDtor();
}

void GCGMsgWaitingListChange::SharedDtor() {
}

void GCGMsgWaitingListChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgWaitingListChange::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgWaitingListChange& GCGMsgWaitingListChange::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgWaitingListChange* GCGMsgWaitingListChange::New(::google::protobuf::Arena* arena) const {
  GCGMsgWaitingListChange* n = new GCGMsgWaitingListChange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgWaitingListChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgWaitingListChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_index_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(cur_index_));
  _internal_metadata_.Clear();
}

bool GCGMsgWaitingListChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgWaitingListChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgWaitingListChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgWaitingListChange)
  return false;
#undef DO_
}

void GCGMsgWaitingListChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgWaitingListChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 4;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->controller_id(), output);
  }

  // uint32 cur_index = 6;
  if (this->cur_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgWaitingListChange)
}

::google::protobuf::uint8* GCGMsgWaitingListChange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgWaitingListChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 4;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->controller_id(), target);
  }

  // uint32 cur_index = 6;
  if (this->cur_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgWaitingListChange)
  return target;
}

size_t GCGMsgWaitingListChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgWaitingListChange)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 controller_id = 4;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 cur_index = 6;
  if (this->cur_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgWaitingListChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgWaitingListChange)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgWaitingListChange* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgWaitingListChange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgWaitingListChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgWaitingListChange)
    MergeFrom(*source);
  }
}

void GCGMsgWaitingListChange::MergeFrom(const GCGMsgWaitingListChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgWaitingListChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.cur_index() != 0) {
    set_cur_index(from.cur_index());
  }
}

void GCGMsgWaitingListChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgWaitingListChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgWaitingListChange::CopyFrom(const GCGMsgWaitingListChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgWaitingListChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgWaitingListChange::IsInitialized() const {
  return true;
}

void GCGMsgWaitingListChange::Swap(GCGMsgWaitingListChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgWaitingListChange::InternalSwap(GCGMsgWaitingListChange* other) {
  using std::swap;
  swap(controller_id_, other->controller_id_);
  swap(cur_index_, other->cur_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgWaitingListChange::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgWaitingListChange

// uint32 cur_index = 6;
void GCGMsgWaitingListChange::clear_cur_index() {
  cur_index_ = 0u;
}
::google::protobuf::uint32 GCGMsgWaitingListChange::cur_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgWaitingListChange.cur_index)
  return cur_index_;
}
void GCGMsgWaitingListChange::set_cur_index(::google::protobuf::uint32 value) {
  
  cur_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgWaitingListChange.cur_index)
}

// uint32 controller_id = 4;
void GCGMsgWaitingListChange::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgWaitingListChange::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgWaitingListChange.controller_id)
  return controller_id_;
}
void GCGMsgWaitingListChange::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgWaitingListChange.controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgCardUpdate::kCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgCardUpdate::GCGMsgCardUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgCardUpdate)
}
GCGMsgCardUpdate::GCGMsgCardUpdate(const GCGMsgCardUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_card()) {
    card_ = new ::proto::GCGCard(*from.card_);
  } else {
    card_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgCardUpdate)
}

void GCGMsgCardUpdate::SharedCtor() {
  card_ = NULL;
  _cached_size_ = 0;
}

GCGMsgCardUpdate::~GCGMsgCardUpdate() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgCardUpdate)
  SharedDtor();
}

void GCGMsgCardUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete card_;
}

void GCGMsgCardUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgCardUpdate::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgCardUpdate& GCGMsgCardUpdate::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgCardUpdate* GCGMsgCardUpdate::New(::google::protobuf::Arena* arena) const {
  GCGMsgCardUpdate* n = new GCGMsgCardUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgCardUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgCardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && card_ != NULL) {
    delete card_;
  }
  card_ = NULL;
  _internal_metadata_.Clear();
}

bool GCGMsgCardUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgCardUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGCard card = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgCardUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgCardUpdate)
  return false;
#undef DO_
}

void GCGMsgCardUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgCardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGCard card = 7;
  if (this->has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->card_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgCardUpdate)
}

::google::protobuf::uint8* GCGMsgCardUpdate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgCardUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGCard card = 7;
  if (this->has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->card_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgCardUpdate)
  return target;
}

size_t GCGMsgCardUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgCardUpdate)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGCard card = 7;
  if (this->has_card()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->card_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgCardUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgCardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgCardUpdate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgCardUpdate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgCardUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgCardUpdate)
    MergeFrom(*source);
  }
}

void GCGMsgCardUpdate::MergeFrom(const GCGMsgCardUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgCardUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_card()) {
    mutable_card()->::proto::GCGCard::MergeFrom(from.card());
  }
}

void GCGMsgCardUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgCardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgCardUpdate::CopyFrom(const GCGMsgCardUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgCardUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgCardUpdate::IsInitialized() const {
  return true;
}

void GCGMsgCardUpdate::Swap(GCGMsgCardUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgCardUpdate::InternalSwap(GCGMsgCardUpdate* other) {
  using std::swap;
  swap(card_, other->card_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgCardUpdate::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgCardUpdate

// .proto.GCGCard card = 7;
bool GCGMsgCardUpdate::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
void GCGMsgCardUpdate::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) delete card_;
  card_ = NULL;
}
const ::proto::GCGCard& GCGMsgCardUpdate::card() const {
  const ::proto::GCGCard* p = card_;
  // @@protoc_insertion_point(field_get:proto.GCGMsgCardUpdate.card)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCard*>(
      &::proto::_GCGCard_default_instance_);
}
::proto::GCGCard* GCGMsgCardUpdate::mutable_card() {
  
  if (card_ == NULL) {
    card_ = new ::proto::GCGCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgCardUpdate.card)
  return card_;
}
::proto::GCGCard* GCGMsgCardUpdate::release_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMsgCardUpdate.card)
  
  ::proto::GCGCard* temp = card_;
  card_ = NULL;
  return temp;
}
void GCGMsgCardUpdate::set_allocated_card(::proto::GCGCard* card) {
  delete card_;
  card_ = card;
  if (card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMsgCardUpdate.card)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgCostRevise::kControllerIdFieldNumber;
const int GCGMsgCostRevise::kCostReviseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgCostRevise::GCGMsgCostRevise()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgCostRevise)
}
GCGMsgCostRevise::GCGMsgCostRevise(const GCGMsgCostRevise& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cost_revise()) {
    cost_revise_ = new ::proto::GCGCostReviseInfo(*from.cost_revise_);
  } else {
    cost_revise_ = NULL;
  }
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgCostRevise)
}

void GCGMsgCostRevise::SharedCtor() {
  ::memset(&cost_revise_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&cost_revise_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGMsgCostRevise::~GCGMsgCostRevise() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgCostRevise)
  SharedDtor();
}

void GCGMsgCostRevise::SharedDtor() {
  if (this != internal_default_instance()) delete cost_revise_;
}

void GCGMsgCostRevise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgCostRevise::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgCostRevise& GCGMsgCostRevise::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgCostRevise* GCGMsgCostRevise::New(::google::protobuf::Arena* arena) const {
  GCGMsgCostRevise* n = new GCGMsgCostRevise;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgCostRevise::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgCostRevise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cost_revise_ != NULL) {
    delete cost_revise_;
  }
  cost_revise_ = NULL;
  controller_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGMsgCostRevise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgCostRevise)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGCostReviseInfo cost_revise = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_revise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgCostRevise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgCostRevise)
  return false;
#undef DO_
}

void GCGMsgCostRevise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgCostRevise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->controller_id(), output);
  }

  // .proto.GCGCostReviseInfo cost_revise = 13;
  if (this->has_cost_revise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->cost_revise_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgCostRevise)
}

::google::protobuf::uint8* GCGMsgCostRevise::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgCostRevise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->controller_id(), target);
  }

  // .proto.GCGCostReviseInfo cost_revise = 13;
  if (this->has_cost_revise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->cost_revise_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgCostRevise)
  return target;
}

size_t GCGMsgCostRevise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgCostRevise)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGCostReviseInfo cost_revise = 13;
  if (this->has_cost_revise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cost_revise_);
  }

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgCostRevise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgCostRevise)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgCostRevise* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgCostRevise>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgCostRevise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgCostRevise)
    MergeFrom(*source);
  }
}

void GCGMsgCostRevise::MergeFrom(const GCGMsgCostRevise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgCostRevise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cost_revise()) {
    mutable_cost_revise()->::proto::GCGCostReviseInfo::MergeFrom(from.cost_revise());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMsgCostRevise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgCostRevise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgCostRevise::CopyFrom(const GCGMsgCostRevise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgCostRevise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgCostRevise::IsInitialized() const {
  return true;
}

void GCGMsgCostRevise::Swap(GCGMsgCostRevise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgCostRevise::InternalSwap(GCGMsgCostRevise* other) {
  using std::swap;
  swap(cost_revise_, other->cost_revise_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgCostRevise::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgCostRevise

// uint32 controller_id = 5;
void GCGMsgCostRevise::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgCostRevise::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostRevise.controller_id)
  return controller_id_;
}
void GCGMsgCostRevise::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostRevise.controller_id)
}

// .proto.GCGCostReviseInfo cost_revise = 13;
bool GCGMsgCostRevise::has_cost_revise() const {
  return this != internal_default_instance() && cost_revise_ != NULL;
}
void GCGMsgCostRevise::clear_cost_revise() {
  if (GetArenaNoVirtual() == NULL && cost_revise_ != NULL) delete cost_revise_;
  cost_revise_ = NULL;
}
const ::proto::GCGCostReviseInfo& GCGMsgCostRevise::cost_revise() const {
  const ::proto::GCGCostReviseInfo* p = cost_revise_;
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostRevise.cost_revise)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCostReviseInfo*>(
      &::proto::_GCGCostReviseInfo_default_instance_);
}
::proto::GCGCostReviseInfo* GCGMsgCostRevise::mutable_cost_revise() {
  
  if (cost_revise_ == NULL) {
    cost_revise_ = new ::proto::GCGCostReviseInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgCostRevise.cost_revise)
  return cost_revise_;
}
::proto::GCGCostReviseInfo* GCGMsgCostRevise::release_cost_revise() {
  // @@protoc_insertion_point(field_release:proto.GCGMsgCostRevise.cost_revise)
  
  ::proto::GCGCostReviseInfo* temp = cost_revise_;
  cost_revise_ = NULL;
  return temp;
}
void GCGMsgCostRevise::set_allocated_cost_revise(::proto::GCGCostReviseInfo* cost_revise) {
  delete cost_revise_;
  cost_revise_ = cost_revise;
  if (cost_revise) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMsgCostRevise.cost_revise)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgPhaseContinue::GCGMsgPhaseContinue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgPhaseContinue)
}
GCGMsgPhaseContinue::GCGMsgPhaseContinue(const GCGMsgPhaseContinue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgPhaseContinue)
}

void GCGMsgPhaseContinue::SharedCtor() {
  _cached_size_ = 0;
}

GCGMsgPhaseContinue::~GCGMsgPhaseContinue() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgPhaseContinue)
  SharedDtor();
}

void GCGMsgPhaseContinue::SharedDtor() {
}

void GCGMsgPhaseContinue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgPhaseContinue::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgPhaseContinue& GCGMsgPhaseContinue::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgPhaseContinue* GCGMsgPhaseContinue::New(::google::protobuf::Arena* arena) const {
  GCGMsgPhaseContinue* n = new GCGMsgPhaseContinue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgPhaseContinue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgPhaseContinue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGMsgPhaseContinue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgPhaseContinue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgPhaseContinue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgPhaseContinue)
  return false;
#undef DO_
}

void GCGMsgPhaseContinue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgPhaseContinue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgPhaseContinue)
}

::google::protobuf::uint8* GCGMsgPhaseContinue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgPhaseContinue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgPhaseContinue)
  return target;
}

size_t GCGMsgPhaseContinue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgPhaseContinue)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgPhaseContinue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgPhaseContinue)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgPhaseContinue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgPhaseContinue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgPhaseContinue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgPhaseContinue)
    MergeFrom(*source);
  }
}

void GCGMsgPhaseContinue::MergeFrom(const GCGMsgPhaseContinue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgPhaseContinue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGMsgPhaseContinue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgPhaseContinue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgPhaseContinue::CopyFrom(const GCGMsgPhaseContinue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgPhaseContinue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgPhaseContinue::IsInitialized() const {
  return true;
}

void GCGMsgPhaseContinue::Swap(GCGMsgPhaseContinue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgPhaseContinue::InternalSwap(GCGMsgPhaseContinue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgPhaseContinue::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgPhaseContinue

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgNoDamageSkillResult::kResultSeqFieldNumber;
const int GCGMsgNoDamageSkillResult::kFromResultSeqFieldNumber;
const int GCGMsgNoDamageSkillResult::kEffectElementFieldNumber;
const int GCGMsgNoDamageSkillResult::kTargetCardGuidFieldNumber;
const int GCGMsgNoDamageSkillResult::kDetailListFieldNumber;
const int GCGMsgNoDamageSkillResult::kSkillIdFieldNumber;
const int GCGMsgNoDamageSkillResult::kSrcCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgNoDamageSkillResult::GCGMsgNoDamageSkillResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgNoDamageSkillResult)
}
GCGMsgNoDamageSkillResult::GCGMsgNoDamageSkillResult(const GCGMsgNoDamageSkillResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      detail_list_(from.detail_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&from_result_seq_, &from.from_result_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&src_card_guid_) -
    reinterpret_cast<char*>(&from_result_seq_)) + sizeof(src_card_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgNoDamageSkillResult)
}

void GCGMsgNoDamageSkillResult::SharedCtor() {
  ::memset(&from_result_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_card_guid_) -
      reinterpret_cast<char*>(&from_result_seq_)) + sizeof(src_card_guid_));
  _cached_size_ = 0;
}

GCGMsgNoDamageSkillResult::~GCGMsgNoDamageSkillResult() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgNoDamageSkillResult)
  SharedDtor();
}

void GCGMsgNoDamageSkillResult::SharedDtor() {
}

void GCGMsgNoDamageSkillResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgNoDamageSkillResult::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgNoDamageSkillResult& GCGMsgNoDamageSkillResult::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgNoDamageSkillResult* GCGMsgNoDamageSkillResult::New(::google::protobuf::Arena* arena) const {
  GCGMsgNoDamageSkillResult* n = new GCGMsgNoDamageSkillResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgNoDamageSkillResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgNoDamageSkillResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_list_.Clear();
  ::memset(&from_result_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&src_card_guid_) -
      reinterpret_cast<char*>(&from_result_seq_)) + sizeof(src_card_guid_));
  _internal_metadata_.Clear();
}

bool GCGMsgNoDamageSkillResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgNoDamageSkillResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 from_result_seq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &from_result_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_card_guid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result_seq = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 effect_element = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_element_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 src_card_guid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGDamageDetail detail_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgNoDamageSkillResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgNoDamageSkillResult)
  return false;
#undef DO_
}

void GCGMsgNoDamageSkillResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgNoDamageSkillResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_result_seq = 4;
  if (this->from_result_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->from_result_seq(), output);
  }

  // uint32 target_card_guid = 5;
  if (this->target_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_card_guid(), output);
  }

  // uint32 result_seq = 8;
  if (this->result_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->result_seq(), output);
  }

  // uint32 effect_element = 9;
  if (this->effect_element() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->effect_element(), output);
  }

  // uint32 skill_id = 10;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skill_id(), output);
  }

  // uint32 src_card_guid = 12;
  if (this->src_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->src_card_guid(), output);
  }

  // repeated .proto.GCGDamageDetail detail_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->detail_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgNoDamageSkillResult)
}

::google::protobuf::uint8* GCGMsgNoDamageSkillResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgNoDamageSkillResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from_result_seq = 4;
  if (this->from_result_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->from_result_seq(), target);
  }

  // uint32 target_card_guid = 5;
  if (this->target_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_card_guid(), target);
  }

  // uint32 result_seq = 8;
  if (this->result_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->result_seq(), target);
  }

  // uint32 effect_element = 9;
  if (this->effect_element() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->effect_element(), target);
  }

  // uint32 skill_id = 10;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skill_id(), target);
  }

  // uint32 src_card_guid = 12;
  if (this->src_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->src_card_guid(), target);
  }

  // repeated .proto.GCGDamageDetail detail_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detail_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->detail_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgNoDamageSkillResult)
  return target;
}

size_t GCGMsgNoDamageSkillResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgNoDamageSkillResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGDamageDetail detail_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->detail_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detail_list(static_cast<int>(i)));
    }
  }

  // uint32 from_result_seq = 4;
  if (this->from_result_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->from_result_seq());
  }

  // uint32 target_card_guid = 5;
  if (this->target_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_card_guid());
  }

  // uint32 result_seq = 8;
  if (this->result_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result_seq());
  }

  // uint32 effect_element = 9;
  if (this->effect_element() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->effect_element());
  }

  // uint32 skill_id = 10;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // uint32 src_card_guid = 12;
  if (this->src_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->src_card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgNoDamageSkillResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgNoDamageSkillResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgNoDamageSkillResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgNoDamageSkillResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgNoDamageSkillResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgNoDamageSkillResult)
    MergeFrom(*source);
  }
}

void GCGMsgNoDamageSkillResult::MergeFrom(const GCGMsgNoDamageSkillResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgNoDamageSkillResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detail_list_.MergeFrom(from.detail_list_);
  if (from.from_result_seq() != 0) {
    set_from_result_seq(from.from_result_seq());
  }
  if (from.target_card_guid() != 0) {
    set_target_card_guid(from.target_card_guid());
  }
  if (from.result_seq() != 0) {
    set_result_seq(from.result_seq());
  }
  if (from.effect_element() != 0) {
    set_effect_element(from.effect_element());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.src_card_guid() != 0) {
    set_src_card_guid(from.src_card_guid());
  }
}

void GCGMsgNoDamageSkillResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgNoDamageSkillResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgNoDamageSkillResult::CopyFrom(const GCGMsgNoDamageSkillResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgNoDamageSkillResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgNoDamageSkillResult::IsInitialized() const {
  return true;
}

void GCGMsgNoDamageSkillResult::Swap(GCGMsgNoDamageSkillResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgNoDamageSkillResult::InternalSwap(GCGMsgNoDamageSkillResult* other) {
  using std::swap;
  detail_list_.InternalSwap(&other->detail_list_);
  swap(from_result_seq_, other->from_result_seq_);
  swap(target_card_guid_, other->target_card_guid_);
  swap(result_seq_, other->result_seq_);
  swap(effect_element_, other->effect_element_);
  swap(skill_id_, other->skill_id_);
  swap(src_card_guid_, other->src_card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgNoDamageSkillResult::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgNoDamageSkillResult

// uint32 result_seq = 8;
void GCGMsgNoDamageSkillResult::clear_result_seq() {
  result_seq_ = 0u;
}
::google::protobuf::uint32 GCGMsgNoDamageSkillResult::result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.result_seq)
  return result_seq_;
}
void GCGMsgNoDamageSkillResult::set_result_seq(::google::protobuf::uint32 value) {
  
  result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.result_seq)
}

// uint32 from_result_seq = 4;
void GCGMsgNoDamageSkillResult::clear_from_result_seq() {
  from_result_seq_ = 0u;
}
::google::protobuf::uint32 GCGMsgNoDamageSkillResult::from_result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.from_result_seq)
  return from_result_seq_;
}
void GCGMsgNoDamageSkillResult::set_from_result_seq(::google::protobuf::uint32 value) {
  
  from_result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.from_result_seq)
}

// uint32 effect_element = 9;
void GCGMsgNoDamageSkillResult::clear_effect_element() {
  effect_element_ = 0u;
}
::google::protobuf::uint32 GCGMsgNoDamageSkillResult::effect_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.effect_element)
  return effect_element_;
}
void GCGMsgNoDamageSkillResult::set_effect_element(::google::protobuf::uint32 value) {
  
  effect_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.effect_element)
}

// uint32 target_card_guid = 5;
void GCGMsgNoDamageSkillResult::clear_target_card_guid() {
  target_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgNoDamageSkillResult::target_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.target_card_guid)
  return target_card_guid_;
}
void GCGMsgNoDamageSkillResult::set_target_card_guid(::google::protobuf::uint32 value) {
  
  target_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.target_card_guid)
}

// repeated .proto.GCGDamageDetail detail_list = 13;
int GCGMsgNoDamageSkillResult::detail_list_size() const {
  return detail_list_.size();
}
void GCGMsgNoDamageSkillResult::clear_detail_list() {
  detail_list_.Clear();
}
const ::proto::GCGDamageDetail& GCGMsgNoDamageSkillResult::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_.Get(index);
}
::proto::GCGDamageDetail* GCGMsgNoDamageSkillResult::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_.Mutable(index);
}
::proto::GCGDamageDetail* GCGMsgNoDamageSkillResult::add_detail_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >*
GCGMsgNoDamageSkillResult::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgNoDamageSkillResult.detail_list)
  return &detail_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >&
GCGMsgNoDamageSkillResult::detail_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_;
}

// uint32 skill_id = 10;
void GCGMsgNoDamageSkillResult::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgNoDamageSkillResult::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.skill_id)
  return skill_id_;
}
void GCGMsgNoDamageSkillResult::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.skill_id)
}

// uint32 src_card_guid = 12;
void GCGMsgNoDamageSkillResult::clear_src_card_guid() {
  src_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgNoDamageSkillResult::src_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.src_card_guid)
  return src_card_guid_;
}
void GCGMsgNoDamageSkillResult::set_src_card_guid(::google::protobuf::uint32 value) {
  
  src_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.src_card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgReactionBegin::kCardGuidFieldNumber;
const int GCGMsgReactionBegin::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgReactionBegin::GCGMsgReactionBegin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgReactionBegin)
}
GCGMsgReactionBegin::GCGMsgReactionBegin(const GCGMsgReactionBegin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skill_id_, &from.skill_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_guid_) -
    reinterpret_cast<char*>(&skill_id_)) + sizeof(card_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgReactionBegin)
}

void GCGMsgReactionBegin::SharedCtor() {
  ::memset(&skill_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_guid_) -
      reinterpret_cast<char*>(&skill_id_)) + sizeof(card_guid_));
  _cached_size_ = 0;
}

GCGMsgReactionBegin::~GCGMsgReactionBegin() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgReactionBegin)
  SharedDtor();
}

void GCGMsgReactionBegin::SharedDtor() {
}

void GCGMsgReactionBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgReactionBegin::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgReactionBegin& GCGMsgReactionBegin::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgReactionBegin* GCGMsgReactionBegin::New(::google::protobuf::Arena* arena) const {
  GCGMsgReactionBegin* n = new GCGMsgReactionBegin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgReactionBegin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgReactionBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&skill_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_guid_) -
      reinterpret_cast<char*>(&skill_id_)) + sizeof(card_guid_));
  _internal_metadata_.Clear();
}

bool GCGMsgReactionBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgReactionBegin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 skill_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgReactionBegin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgReactionBegin)
  return false;
#undef DO_
}

void GCGMsgReactionBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgReactionBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skill_id(), output);
  }

  // uint32 card_guid = 13;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgReactionBegin)
}

::google::protobuf::uint8* GCGMsgReactionBegin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgReactionBegin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skill_id(), target);
  }

  // uint32 card_guid = 13;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgReactionBegin)
  return target;
}

size_t GCGMsgReactionBegin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgReactionBegin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 skill_id = 3;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  // uint32 card_guid = 13;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgReactionBegin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgReactionBegin)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgReactionBegin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgReactionBegin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgReactionBegin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgReactionBegin)
    MergeFrom(*source);
  }
}

void GCGMsgReactionBegin::MergeFrom(const GCGMsgReactionBegin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgReactionBegin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
}

void GCGMsgReactionBegin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgReactionBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgReactionBegin::CopyFrom(const GCGMsgReactionBegin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgReactionBegin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgReactionBegin::IsInitialized() const {
  return true;
}

void GCGMsgReactionBegin::Swap(GCGMsgReactionBegin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgReactionBegin::InternalSwap(GCGMsgReactionBegin* other) {
  using std::swap;
  swap(skill_id_, other->skill_id_);
  swap(card_guid_, other->card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgReactionBegin::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgReactionBegin

// uint32 card_guid = 13;
void GCGMsgReactionBegin::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGMsgReactionBegin::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgReactionBegin.card_guid)
  return card_guid_;
}
void GCGMsgReactionBegin::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgReactionBegin.card_guid)
}

// uint32 skill_id = 3;
void GCGMsgReactionBegin::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgReactionBegin::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgReactionBegin.skill_id)
  return skill_id_;
}
void GCGMsgReactionBegin::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgReactionBegin.skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMsgReactionEnd::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMsgReactionEnd::GCGMsgReactionEnd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMsgReactionEnd)
}
GCGMsgReactionEnd::GCGMsgReactionEnd(const GCGMsgReactionEnd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_ = from.skill_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMsgReactionEnd)
}

void GCGMsgReactionEnd::SharedCtor() {
  skill_id_ = 0u;
  _cached_size_ = 0;
}

GCGMsgReactionEnd::~GCGMsgReactionEnd() {
  // @@protoc_insertion_point(destructor:proto.GCGMsgReactionEnd)
  SharedDtor();
}

void GCGMsgReactionEnd::SharedDtor() {
}

void GCGMsgReactionEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMsgReactionEnd::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMsgReactionEnd& GCGMsgReactionEnd::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMsgReactionEnd* GCGMsgReactionEnd::New(::google::protobuf::Arena* arena) const {
  GCGMsgReactionEnd* n = new GCGMsgReactionEnd;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMsgReactionEnd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMsgReactionEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGMsgReactionEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMsgReactionEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 skill_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMsgReactionEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMsgReactionEnd)
  return false;
#undef DO_
}

void GCGMsgReactionEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMsgReactionEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 4;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMsgReactionEnd)
}

::google::protobuf::uint8* GCGMsgReactionEnd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMsgReactionEnd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 4;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMsgReactionEnd)
  return target;
}

size_t GCGMsgReactionEnd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMsgReactionEnd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 skill_id = 4;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMsgReactionEnd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMsgReactionEnd)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMsgReactionEnd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMsgReactionEnd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMsgReactionEnd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMsgReactionEnd)
    MergeFrom(*source);
  }
}

void GCGMsgReactionEnd::MergeFrom(const GCGMsgReactionEnd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMsgReactionEnd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGMsgReactionEnd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMsgReactionEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMsgReactionEnd::CopyFrom(const GCGMsgReactionEnd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMsgReactionEnd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMsgReactionEnd::IsInitialized() const {
  return true;
}

void GCGMsgReactionEnd::Swap(GCGMsgReactionEnd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMsgReactionEnd::InternalSwap(GCGMsgReactionEnd* other) {
  using std::swap;
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMsgReactionEnd::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMsgReactionEnd

// uint32 skill_id = 4;
void GCGMsgReactionEnd::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGMsgReactionEnd::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgReactionEnd.skill_id)
  return skill_id_;
}
void GCGMsgReactionEnd::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgReactionEnd.skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMessage::kTokenChangeFieldNumber;
const int GCGMessage::kPhaseChangeFieldNumber;
const int GCGMessage::kAddCardsFieldNumber;
const int GCGMessage::kRemoveCardsFieldNumber;
const int GCGMessage::kSelectOnStageFieldNumber;
const int GCGMessage::kDiceRollFieldNumber;
const int GCGMessage::kDiceRerollFieldNumber;
const int GCGMessage::kPassFieldNumber;
const int GCGMessage::kCharDieFieldNumber;
const int GCGMessage::kSkillResultFieldNumber;
const int GCGMessage::kCostDiceFieldNumber;
const int GCGMessage::kAddDiceFieldNumber;
const int GCGMessage::kMoveCardFieldNumber;
const int GCGMessage::kUseSkillFieldNumber;
const int GCGMessage::kNewCardFieldNumber;
const int GCGMessage::kUpdateControllerFieldNumber;
const int GCGMessage::kModifyAddFieldNumber;
const int GCGMessage::kModifyRemoveFieldNumber;
const int GCGMessage::kUseSkillEndFieldNumber;
const int GCGMessage::kDuelDataChangeFieldNumber;
const int GCGMessage::kClientPerformFieldNumber;
const int GCGMessage::kGameOverFieldNumber;
const int GCGMessage::kOpTimerFieldNumber;
const int GCGMessage::kWaitingListChangeFieldNumber;
const int GCGMessage::kCardUpdateFieldNumber;
const int GCGMessage::kSelectOnStageByEffectFieldNumber;
const int GCGMessage::kCostReviseFieldNumber;
const int GCGMessage::kPhaseContinueFieldNumber;
const int GCGMessage::kPveIntentionInfoFieldNumber;
const int GCGMessage::kPveIntentionChangeFieldNumber;
const int GCGMessage::kSkillLimitsChangeFieldNumber;
const int GCGMessage::kNoDamageSkillResultFieldNumber;
const int GCGMessage::kReactionBeginFieldNumber;
const int GCGMessage::kReactionEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMessage::GCGMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMessage)
}
GCGMessage::GCGMessage(const GCGMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kTokenChange: {
      mutable_token_change()->::proto::GCGMsgTokenChange::MergeFrom(from.token_change());
      break;
    }
    case kPhaseChange: {
      mutable_phase_change()->::proto::GCGMsgPhaseChange::MergeFrom(from.phase_change());
      break;
    }
    case kAddCards: {
      mutable_add_cards()->::proto::GCGMsgAddCards::MergeFrom(from.add_cards());
      break;
    }
    case kRemoveCards: {
      mutable_remove_cards()->::proto::GCGMsgRemoveCards::MergeFrom(from.remove_cards());
      break;
    }
    case kSelectOnStage: {
      mutable_select_on_stage()->::proto::GCGMsgSelectOnStage::MergeFrom(from.select_on_stage());
      break;
    }
    case kDiceRoll: {
      mutable_dice_roll()->::proto::GCGMsgDiceRoll::MergeFrom(from.dice_roll());
      break;
    }
    case kDiceReroll: {
      mutable_dice_reroll()->::proto::GCGMsgDiceReroll::MergeFrom(from.dice_reroll());
      break;
    }
    case kPass: {
      mutable_pass()->::proto::GCGMsgPass::MergeFrom(from.pass());
      break;
    }
    case kCharDie: {
      mutable_char_die()->::proto::GCGMsgCharDie::MergeFrom(from.char_die());
      break;
    }
    case kSkillResult: {
      mutable_skill_result()->::proto::GCGMsgSkillResult::MergeFrom(from.skill_result());
      break;
    }
    case kCostDice: {
      mutable_cost_dice()->::proto::GCGMsgCostDice::MergeFrom(from.cost_dice());
      break;
    }
    case kAddDice: {
      mutable_add_dice()->::proto::GCGMsgAddDice::MergeFrom(from.add_dice());
      break;
    }
    case kMoveCard: {
      mutable_move_card()->::proto::GCGMsgMoveCard::MergeFrom(from.move_card());
      break;
    }
    case kUseSkill: {
      mutable_use_skill()->::proto::GCGMsgUseSkill::MergeFrom(from.use_skill());
      break;
    }
    case kNewCard: {
      mutable_new_card()->::proto::GCGMsgNewCard::MergeFrom(from.new_card());
      break;
    }
    case kUpdateController: {
      mutable_update_controller()->::proto::GCGMsgUpdateController::MergeFrom(from.update_controller());
      break;
    }
    case kModifyAdd: {
      mutable_modify_add()->::proto::GCGMsgModifyAdd::MergeFrom(from.modify_add());
      break;
    }
    case kModifyRemove: {
      mutable_modify_remove()->::proto::GCGMsgModifyRemove::MergeFrom(from.modify_remove());
      break;
    }
    case kUseSkillEnd: {
      mutable_use_skill_end()->::proto::GCGMsgUseSkillEnd::MergeFrom(from.use_skill_end());
      break;
    }
    case kDuelDataChange: {
      mutable_duel_data_change()->::proto::GCGMsgDuelDataChange::MergeFrom(from.duel_data_change());
      break;
    }
    case kClientPerform: {
      mutable_client_perform()->::proto::GCGMsgClientPerform::MergeFrom(from.client_perform());
      break;
    }
    case kGameOver: {
      mutable_game_over()->::proto::GCGMsgGameOver::MergeFrom(from.game_over());
      break;
    }
    case kOpTimer: {
      mutable_op_timer()->::proto::GCGMsgOpTimer::MergeFrom(from.op_timer());
      break;
    }
    case kWaitingListChange: {
      mutable_waiting_list_change()->::proto::GCGMsgWaitingListChange::MergeFrom(from.waiting_list_change());
      break;
    }
    case kCardUpdate: {
      mutable_card_update()->::proto::GCGMsgCardUpdate::MergeFrom(from.card_update());
      break;
    }
    case kSelectOnStageByEffect: {
      mutable_select_on_stage_by_effect()->::proto::GCGMsgSelectOnStageByEffect::MergeFrom(from.select_on_stage_by_effect());
      break;
    }
    case kCostRevise: {
      mutable_cost_revise()->::proto::GCGMsgCostRevise::MergeFrom(from.cost_revise());
      break;
    }
    case kPhaseContinue: {
      mutable_phase_continue()->::proto::GCGMsgPhaseContinue::MergeFrom(from.phase_continue());
      break;
    }
    case kPveIntentionInfo: {
      mutable_pve_intention_info()->::proto::GCGMsgPVEIntentionInfo::MergeFrom(from.pve_intention_info());
      break;
    }
    case kPveIntentionChange: {
      mutable_pve_intention_change()->::proto::GCGMsgPVEIntentionChange::MergeFrom(from.pve_intention_change());
      break;
    }
    case kSkillLimitsChange: {
      mutable_skill_limits_change()->::proto::GCGMsgSkillLimitsChange::MergeFrom(from.skill_limits_change());
      break;
    }
    case kNoDamageSkillResult: {
      mutable_no_damage_skill_result()->::proto::GCGMsgNoDamageSkillResult::MergeFrom(from.no_damage_skill_result());
      break;
    }
    case kReactionBegin: {
      mutable_reaction_begin()->::proto::GCGMsgReactionBegin::MergeFrom(from.reaction_begin());
      break;
    }
    case kReactionEnd: {
      mutable_reaction_end()->::proto::GCGMsgReactionEnd::MergeFrom(from.reaction_end());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGMessage)
}

void GCGMessage::SharedCtor() {
  clear_has_message();
  _cached_size_ = 0;
}

GCGMessage::~GCGMessage() {
  // @@protoc_insertion_point(destructor:proto.GCGMessage)
  SharedDtor();
}

void GCGMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void GCGMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMessage::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMessage& GCGMessage::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMessage* GCGMessage::New(::google::protobuf::Arena* arena) const {
  GCGMessage* n = new GCGMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:proto.GCGMessage)
  switch (message_case()) {
    case kTokenChange: {
      delete message_.token_change_;
      break;
    }
    case kPhaseChange: {
      delete message_.phase_change_;
      break;
    }
    case kAddCards: {
      delete message_.add_cards_;
      break;
    }
    case kRemoveCards: {
      delete message_.remove_cards_;
      break;
    }
    case kSelectOnStage: {
      delete message_.select_on_stage_;
      break;
    }
    case kDiceRoll: {
      delete message_.dice_roll_;
      break;
    }
    case kDiceReroll: {
      delete message_.dice_reroll_;
      break;
    }
    case kPass: {
      delete message_.pass_;
      break;
    }
    case kCharDie: {
      delete message_.char_die_;
      break;
    }
    case kSkillResult: {
      delete message_.skill_result_;
      break;
    }
    case kCostDice: {
      delete message_.cost_dice_;
      break;
    }
    case kAddDice: {
      delete message_.add_dice_;
      break;
    }
    case kMoveCard: {
      delete message_.move_card_;
      break;
    }
    case kUseSkill: {
      delete message_.use_skill_;
      break;
    }
    case kNewCard: {
      delete message_.new_card_;
      break;
    }
    case kUpdateController: {
      delete message_.update_controller_;
      break;
    }
    case kModifyAdd: {
      delete message_.modify_add_;
      break;
    }
    case kModifyRemove: {
      delete message_.modify_remove_;
      break;
    }
    case kUseSkillEnd: {
      delete message_.use_skill_end_;
      break;
    }
    case kDuelDataChange: {
      delete message_.duel_data_change_;
      break;
    }
    case kClientPerform: {
      delete message_.client_perform_;
      break;
    }
    case kGameOver: {
      delete message_.game_over_;
      break;
    }
    case kOpTimer: {
      delete message_.op_timer_;
      break;
    }
    case kWaitingListChange: {
      delete message_.waiting_list_change_;
      break;
    }
    case kCardUpdate: {
      delete message_.card_update_;
      break;
    }
    case kSelectOnStageByEffect: {
      delete message_.select_on_stage_by_effect_;
      break;
    }
    case kCostRevise: {
      delete message_.cost_revise_;
      break;
    }
    case kPhaseContinue: {
      delete message_.phase_continue_;
      break;
    }
    case kPveIntentionInfo: {
      delete message_.pve_intention_info_;
      break;
    }
    case kPveIntentionChange: {
      delete message_.pve_intention_change_;
      break;
    }
    case kSkillLimitsChange: {
      delete message_.skill_limits_change_;
      break;
    }
    case kNoDamageSkillResult: {
      delete message_.no_damage_skill_result_;
      break;
    }
    case kReactionBegin: {
      delete message_.reaction_begin_;
      break;
    }
    case kReactionEnd: {
      delete message_.reaction_end_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void GCGMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear();
}

bool GCGMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGMsgSkillResult skill_result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgCharDie char_die = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_die()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgAddDice add_dice = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_dice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgUseSkill use_skill = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_skill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgPass pass = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgSelectOnStage select_on_stage = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_on_stage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgCostDice cost_dice = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_dice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgDiceRoll dice_roll = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dice_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgAddCards add_cards = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgDiceReroll dice_reroll = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dice_reroll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgTokenChange token_change = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_token_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgPhaseChange phase_change = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phase_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgRemoveCards remove_cards = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_cards()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgMoveCard move_card = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_move_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgNoDamageSkillResult no_damage_skill_result = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_no_damage_skill_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgSkillLimitsChange skill_limits_change = 259;
      case 259: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 2074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_limits_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgUpdateController update_controller = 429;
      case 429: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 3434 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_controller()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgModifyRemove modify_remove = 471;
      case 471: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 3770 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_remove()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgGameOver game_over = 714;
      case 714: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 5714 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_over()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgReactionBegin reaction_begin = 859;
      case 859: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 6874 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reaction_begin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgPVEIntentionChange pve_intention_change = 893;
      case 893: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u /* 7146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pve_intention_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgDuelDataChange duel_data_change = 1008;
      case 1008: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 8066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duel_data_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgClientPerform client_perform = 1035;
      case 1035: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 8282 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_perform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgPVEIntentionInfo pve_intention_info = 1252;
      case 1252: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 10018 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pve_intention_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgCostRevise cost_revise = 1350;
      case 1350: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 10802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_revise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgReactionEnd reaction_end = 1395;
      case 1395: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 11162 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reaction_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgUseSkillEnd use_skill_end = 1411;
      case 1411: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 11290 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_use_skill_end()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgPhaseContinue phase_continue = 1474;
      case 1474: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 11794 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phase_continue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgWaitingListChange waiting_list_change = 1678;
      case 1678: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 13426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_waiting_list_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgNewCard new_card = 1848;
      case 1848: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 14786 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgModifyAdd modify_add = 1851;
      case 1851: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 14810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modify_add()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgOpTimer op_timer = 1862;
      case 1862: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 14898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_timer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgCardUpdate card_update = 1879;
      case 1879: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 15034 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card_update()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 2042;
      case 2042: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 16338 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_on_stage_by_effect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMessage)
  return false;
#undef DO_
}

void GCGMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGMsgSkillResult skill_result = 1;
  if (has_skill_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *message_.skill_result_, output);
  }

  // .proto.GCGMsgCharDie char_die = 2;
  if (has_char_die()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *message_.char_die_, output);
  }

  // .proto.GCGMsgAddDice add_dice = 3;
  if (has_add_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *message_.add_dice_, output);
  }

  // .proto.GCGMsgUseSkill use_skill = 4;
  if (has_use_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *message_.use_skill_, output);
  }

  // .proto.GCGMsgPass pass = 5;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *message_.pass_, output);
  }

  // .proto.GCGMsgSelectOnStage select_on_stage = 6;
  if (has_select_on_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *message_.select_on_stage_, output);
  }

  // .proto.GCGMsgCostDice cost_dice = 7;
  if (has_cost_dice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *message_.cost_dice_, output);
  }

  // .proto.GCGMsgDiceRoll dice_roll = 9;
  if (has_dice_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *message_.dice_roll_, output);
  }

  // .proto.GCGMsgAddCards add_cards = 10;
  if (has_add_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *message_.add_cards_, output);
  }

  // .proto.GCGMsgDiceReroll dice_reroll = 11;
  if (has_dice_reroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *message_.dice_reroll_, output);
  }

  // .proto.GCGMsgTokenChange token_change = 12;
  if (has_token_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *message_.token_change_, output);
  }

  // .proto.GCGMsgPhaseChange phase_change = 13;
  if (has_phase_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *message_.phase_change_, output);
  }

  // .proto.GCGMsgRemoveCards remove_cards = 14;
  if (has_remove_cards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *message_.remove_cards_, output);
  }

  // .proto.GCGMsgMoveCard move_card = 15;
  if (has_move_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *message_.move_card_, output);
  }

  // .proto.GCGMsgNoDamageSkillResult no_damage_skill_result = 24;
  if (has_no_damage_skill_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *message_.no_damage_skill_result_, output);
  }

  // .proto.GCGMsgSkillLimitsChange skill_limits_change = 259;
  if (has_skill_limits_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      259, *message_.skill_limits_change_, output);
  }

  // .proto.GCGMsgUpdateController update_controller = 429;
  if (has_update_controller()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      429, *message_.update_controller_, output);
  }

  // .proto.GCGMsgModifyRemove modify_remove = 471;
  if (has_modify_remove()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      471, *message_.modify_remove_, output);
  }

  // .proto.GCGMsgGameOver game_over = 714;
  if (has_game_over()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      714, *message_.game_over_, output);
  }

  // .proto.GCGMsgReactionBegin reaction_begin = 859;
  if (has_reaction_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      859, *message_.reaction_begin_, output);
  }

  // .proto.GCGMsgPVEIntentionChange pve_intention_change = 893;
  if (has_pve_intention_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      893, *message_.pve_intention_change_, output);
  }

  // .proto.GCGMsgDuelDataChange duel_data_change = 1008;
  if (has_duel_data_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1008, *message_.duel_data_change_, output);
  }

  // .proto.GCGMsgClientPerform client_perform = 1035;
  if (has_client_perform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1035, *message_.client_perform_, output);
  }

  // .proto.GCGMsgPVEIntentionInfo pve_intention_info = 1252;
  if (has_pve_intention_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1252, *message_.pve_intention_info_, output);
  }

  // .proto.GCGMsgCostRevise cost_revise = 1350;
  if (has_cost_revise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1350, *message_.cost_revise_, output);
  }

  // .proto.GCGMsgReactionEnd reaction_end = 1395;
  if (has_reaction_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1395, *message_.reaction_end_, output);
  }

  // .proto.GCGMsgUseSkillEnd use_skill_end = 1411;
  if (has_use_skill_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1411, *message_.use_skill_end_, output);
  }

  // .proto.GCGMsgPhaseContinue phase_continue = 1474;
  if (has_phase_continue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1474, *message_.phase_continue_, output);
  }

  // .proto.GCGMsgWaitingListChange waiting_list_change = 1678;
  if (has_waiting_list_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1678, *message_.waiting_list_change_, output);
  }

  // .proto.GCGMsgNewCard new_card = 1848;
  if (has_new_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1848, *message_.new_card_, output);
  }

  // .proto.GCGMsgModifyAdd modify_add = 1851;
  if (has_modify_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1851, *message_.modify_add_, output);
  }

  // .proto.GCGMsgOpTimer op_timer = 1862;
  if (has_op_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1862, *message_.op_timer_, output);
  }

  // .proto.GCGMsgCardUpdate card_update = 1879;
  if (has_card_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1879, *message_.card_update_, output);
  }

  // .proto.GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 2042;
  if (has_select_on_stage_by_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2042, *message_.select_on_stage_by_effect_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMessage)
}

::google::protobuf::uint8* GCGMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGMsgSkillResult skill_result = 1;
  if (has_skill_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *message_.skill_result_, deterministic, target);
  }

  // .proto.GCGMsgCharDie char_die = 2;
  if (has_char_die()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *message_.char_die_, deterministic, target);
  }

  // .proto.GCGMsgAddDice add_dice = 3;
  if (has_add_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *message_.add_dice_, deterministic, target);
  }

  // .proto.GCGMsgUseSkill use_skill = 4;
  if (has_use_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *message_.use_skill_, deterministic, target);
  }

  // .proto.GCGMsgPass pass = 5;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *message_.pass_, deterministic, target);
  }

  // .proto.GCGMsgSelectOnStage select_on_stage = 6;
  if (has_select_on_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *message_.select_on_stage_, deterministic, target);
  }

  // .proto.GCGMsgCostDice cost_dice = 7;
  if (has_cost_dice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *message_.cost_dice_, deterministic, target);
  }

  // .proto.GCGMsgDiceRoll dice_roll = 9;
  if (has_dice_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *message_.dice_roll_, deterministic, target);
  }

  // .proto.GCGMsgAddCards add_cards = 10;
  if (has_add_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *message_.add_cards_, deterministic, target);
  }

  // .proto.GCGMsgDiceReroll dice_reroll = 11;
  if (has_dice_reroll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *message_.dice_reroll_, deterministic, target);
  }

  // .proto.GCGMsgTokenChange token_change = 12;
  if (has_token_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *message_.token_change_, deterministic, target);
  }

  // .proto.GCGMsgPhaseChange phase_change = 13;
  if (has_phase_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *message_.phase_change_, deterministic, target);
  }

  // .proto.GCGMsgRemoveCards remove_cards = 14;
  if (has_remove_cards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *message_.remove_cards_, deterministic, target);
  }

  // .proto.GCGMsgMoveCard move_card = 15;
  if (has_move_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *message_.move_card_, deterministic, target);
  }

  // .proto.GCGMsgNoDamageSkillResult no_damage_skill_result = 24;
  if (has_no_damage_skill_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *message_.no_damage_skill_result_, deterministic, target);
  }

  // .proto.GCGMsgSkillLimitsChange skill_limits_change = 259;
  if (has_skill_limits_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        259, *message_.skill_limits_change_, deterministic, target);
  }

  // .proto.GCGMsgUpdateController update_controller = 429;
  if (has_update_controller()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        429, *message_.update_controller_, deterministic, target);
  }

  // .proto.GCGMsgModifyRemove modify_remove = 471;
  if (has_modify_remove()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        471, *message_.modify_remove_, deterministic, target);
  }

  // .proto.GCGMsgGameOver game_over = 714;
  if (has_game_over()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        714, *message_.game_over_, deterministic, target);
  }

  // .proto.GCGMsgReactionBegin reaction_begin = 859;
  if (has_reaction_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        859, *message_.reaction_begin_, deterministic, target);
  }

  // .proto.GCGMsgPVEIntentionChange pve_intention_change = 893;
  if (has_pve_intention_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        893, *message_.pve_intention_change_, deterministic, target);
  }

  // .proto.GCGMsgDuelDataChange duel_data_change = 1008;
  if (has_duel_data_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1008, *message_.duel_data_change_, deterministic, target);
  }

  // .proto.GCGMsgClientPerform client_perform = 1035;
  if (has_client_perform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1035, *message_.client_perform_, deterministic, target);
  }

  // .proto.GCGMsgPVEIntentionInfo pve_intention_info = 1252;
  if (has_pve_intention_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1252, *message_.pve_intention_info_, deterministic, target);
  }

  // .proto.GCGMsgCostRevise cost_revise = 1350;
  if (has_cost_revise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1350, *message_.cost_revise_, deterministic, target);
  }

  // .proto.GCGMsgReactionEnd reaction_end = 1395;
  if (has_reaction_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1395, *message_.reaction_end_, deterministic, target);
  }

  // .proto.GCGMsgUseSkillEnd use_skill_end = 1411;
  if (has_use_skill_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1411, *message_.use_skill_end_, deterministic, target);
  }

  // .proto.GCGMsgPhaseContinue phase_continue = 1474;
  if (has_phase_continue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1474, *message_.phase_continue_, deterministic, target);
  }

  // .proto.GCGMsgWaitingListChange waiting_list_change = 1678;
  if (has_waiting_list_change()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1678, *message_.waiting_list_change_, deterministic, target);
  }

  // .proto.GCGMsgNewCard new_card = 1848;
  if (has_new_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1848, *message_.new_card_, deterministic, target);
  }

  // .proto.GCGMsgModifyAdd modify_add = 1851;
  if (has_modify_add()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1851, *message_.modify_add_, deterministic, target);
  }

  // .proto.GCGMsgOpTimer op_timer = 1862;
  if (has_op_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1862, *message_.op_timer_, deterministic, target);
  }

  // .proto.GCGMsgCardUpdate card_update = 1879;
  if (has_card_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1879, *message_.card_update_, deterministic, target);
  }

  // .proto.GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 2042;
  if (has_select_on_stage_by_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2042, *message_.select_on_stage_by_effect_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMessage)
  return target;
}

size_t GCGMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (message_case()) {
    // .proto.GCGMsgTokenChange token_change = 12;
    case kTokenChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.token_change_);
      break;
    }
    // .proto.GCGMsgPhaseChange phase_change = 13;
    case kPhaseChange: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.phase_change_);
      break;
    }
    // .proto.GCGMsgAddCards add_cards = 10;
    case kAddCards: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.add_cards_);
      break;
    }
    // .proto.GCGMsgRemoveCards remove_cards = 14;
    case kRemoveCards: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.remove_cards_);
      break;
    }
    // .proto.GCGMsgSelectOnStage select_on_stage = 6;
    case kSelectOnStage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.select_on_stage_);
      break;
    }
    // .proto.GCGMsgDiceRoll dice_roll = 9;
    case kDiceRoll: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.dice_roll_);
      break;
    }
    // .proto.GCGMsgDiceReroll dice_reroll = 11;
    case kDiceReroll: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.dice_reroll_);
      break;
    }
    // .proto.GCGMsgPass pass = 5;
    case kPass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.pass_);
      break;
    }
    // .proto.GCGMsgCharDie char_die = 2;
    case kCharDie: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.char_die_);
      break;
    }
    // .proto.GCGMsgSkillResult skill_result = 1;
    case kSkillResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.skill_result_);
      break;
    }
    // .proto.GCGMsgCostDice cost_dice = 7;
    case kCostDice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.cost_dice_);
      break;
    }
    // .proto.GCGMsgAddDice add_dice = 3;
    case kAddDice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.add_dice_);
      break;
    }
    // .proto.GCGMsgMoveCard move_card = 15;
    case kMoveCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.move_card_);
      break;
    }
    // .proto.GCGMsgUseSkill use_skill = 4;
    case kUseSkill: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.use_skill_);
      break;
    }
    // .proto.GCGMsgNewCard new_card = 1848;
    case kNewCard: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.new_card_);
      break;
    }
    // .proto.GCGMsgUpdateController update_controller = 429;
    case kUpdateController: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.update_controller_);
      break;
    }
    // .proto.GCGMsgModifyAdd modify_add = 1851;
    case kModifyAdd: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.modify_add_);
      break;
    }
    // .proto.GCGMsgModifyRemove modify_remove = 471;
    case kModifyRemove: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.modify_remove_);
      break;
    }
    // .proto.GCGMsgUseSkillEnd use_skill_end = 1411;
    case kUseSkillEnd: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.use_skill_end_);
      break;
    }
    // .proto.GCGMsgDuelDataChange duel_data_change = 1008;
    case kDuelDataChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.duel_data_change_);
      break;
    }
    // .proto.GCGMsgClientPerform client_perform = 1035;
    case kClientPerform: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.client_perform_);
      break;
    }
    // .proto.GCGMsgGameOver game_over = 714;
    case kGameOver: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.game_over_);
      break;
    }
    // .proto.GCGMsgOpTimer op_timer = 1862;
    case kOpTimer: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.op_timer_);
      break;
    }
    // .proto.GCGMsgWaitingListChange waiting_list_change = 1678;
    case kWaitingListChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.waiting_list_change_);
      break;
    }
    // .proto.GCGMsgCardUpdate card_update = 1879;
    case kCardUpdate: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.card_update_);
      break;
    }
    // .proto.GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 2042;
    case kSelectOnStageByEffect: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.select_on_stage_by_effect_);
      break;
    }
    // .proto.GCGMsgCostRevise cost_revise = 1350;
    case kCostRevise: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.cost_revise_);
      break;
    }
    // .proto.GCGMsgPhaseContinue phase_continue = 1474;
    case kPhaseContinue: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.phase_continue_);
      break;
    }
    // .proto.GCGMsgPVEIntentionInfo pve_intention_info = 1252;
    case kPveIntentionInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.pve_intention_info_);
      break;
    }
    // .proto.GCGMsgPVEIntentionChange pve_intention_change = 893;
    case kPveIntentionChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.pve_intention_change_);
      break;
    }
    // .proto.GCGMsgSkillLimitsChange skill_limits_change = 259;
    case kSkillLimitsChange: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.skill_limits_change_);
      break;
    }
    // .proto.GCGMsgNoDamageSkillResult no_damage_skill_result = 24;
    case kNoDamageSkillResult: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.no_damage_skill_result_);
      break;
    }
    // .proto.GCGMsgReactionBegin reaction_begin = 859;
    case kReactionBegin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.reaction_begin_);
      break;
    }
    // .proto.GCGMsgReactionEnd reaction_end = 1395;
    case kReactionEnd: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *message_.reaction_end_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMessage)
    MergeFrom(*source);
  }
}

void GCGMessage::MergeFrom(const GCGMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kTokenChange: {
      mutable_token_change()->::proto::GCGMsgTokenChange::MergeFrom(from.token_change());
      break;
    }
    case kPhaseChange: {
      mutable_phase_change()->::proto::GCGMsgPhaseChange::MergeFrom(from.phase_change());
      break;
    }
    case kAddCards: {
      mutable_add_cards()->::proto::GCGMsgAddCards::MergeFrom(from.add_cards());
      break;
    }
    case kRemoveCards: {
      mutable_remove_cards()->::proto::GCGMsgRemoveCards::MergeFrom(from.remove_cards());
      break;
    }
    case kSelectOnStage: {
      mutable_select_on_stage()->::proto::GCGMsgSelectOnStage::MergeFrom(from.select_on_stage());
      break;
    }
    case kDiceRoll: {
      mutable_dice_roll()->::proto::GCGMsgDiceRoll::MergeFrom(from.dice_roll());
      break;
    }
    case kDiceReroll: {
      mutable_dice_reroll()->::proto::GCGMsgDiceReroll::MergeFrom(from.dice_reroll());
      break;
    }
    case kPass: {
      mutable_pass()->::proto::GCGMsgPass::MergeFrom(from.pass());
      break;
    }
    case kCharDie: {
      mutable_char_die()->::proto::GCGMsgCharDie::MergeFrom(from.char_die());
      break;
    }
    case kSkillResult: {
      mutable_skill_result()->::proto::GCGMsgSkillResult::MergeFrom(from.skill_result());
      break;
    }
    case kCostDice: {
      mutable_cost_dice()->::proto::GCGMsgCostDice::MergeFrom(from.cost_dice());
      break;
    }
    case kAddDice: {
      mutable_add_dice()->::proto::GCGMsgAddDice::MergeFrom(from.add_dice());
      break;
    }
    case kMoveCard: {
      mutable_move_card()->::proto::GCGMsgMoveCard::MergeFrom(from.move_card());
      break;
    }
    case kUseSkill: {
      mutable_use_skill()->::proto::GCGMsgUseSkill::MergeFrom(from.use_skill());
      break;
    }
    case kNewCard: {
      mutable_new_card()->::proto::GCGMsgNewCard::MergeFrom(from.new_card());
      break;
    }
    case kUpdateController: {
      mutable_update_controller()->::proto::GCGMsgUpdateController::MergeFrom(from.update_controller());
      break;
    }
    case kModifyAdd: {
      mutable_modify_add()->::proto::GCGMsgModifyAdd::MergeFrom(from.modify_add());
      break;
    }
    case kModifyRemove: {
      mutable_modify_remove()->::proto::GCGMsgModifyRemove::MergeFrom(from.modify_remove());
      break;
    }
    case kUseSkillEnd: {
      mutable_use_skill_end()->::proto::GCGMsgUseSkillEnd::MergeFrom(from.use_skill_end());
      break;
    }
    case kDuelDataChange: {
      mutable_duel_data_change()->::proto::GCGMsgDuelDataChange::MergeFrom(from.duel_data_change());
      break;
    }
    case kClientPerform: {
      mutable_client_perform()->::proto::GCGMsgClientPerform::MergeFrom(from.client_perform());
      break;
    }
    case kGameOver: {
      mutable_game_over()->::proto::GCGMsgGameOver::MergeFrom(from.game_over());
      break;
    }
    case kOpTimer: {
      mutable_op_timer()->::proto::GCGMsgOpTimer::MergeFrom(from.op_timer());
      break;
    }
    case kWaitingListChange: {
      mutable_waiting_list_change()->::proto::GCGMsgWaitingListChange::MergeFrom(from.waiting_list_change());
      break;
    }
    case kCardUpdate: {
      mutable_card_update()->::proto::GCGMsgCardUpdate::MergeFrom(from.card_update());
      break;
    }
    case kSelectOnStageByEffect: {
      mutable_select_on_stage_by_effect()->::proto::GCGMsgSelectOnStageByEffect::MergeFrom(from.select_on_stage_by_effect());
      break;
    }
    case kCostRevise: {
      mutable_cost_revise()->::proto::GCGMsgCostRevise::MergeFrom(from.cost_revise());
      break;
    }
    case kPhaseContinue: {
      mutable_phase_continue()->::proto::GCGMsgPhaseContinue::MergeFrom(from.phase_continue());
      break;
    }
    case kPveIntentionInfo: {
      mutable_pve_intention_info()->::proto::GCGMsgPVEIntentionInfo::MergeFrom(from.pve_intention_info());
      break;
    }
    case kPveIntentionChange: {
      mutable_pve_intention_change()->::proto::GCGMsgPVEIntentionChange::MergeFrom(from.pve_intention_change());
      break;
    }
    case kSkillLimitsChange: {
      mutable_skill_limits_change()->::proto::GCGMsgSkillLimitsChange::MergeFrom(from.skill_limits_change());
      break;
    }
    case kNoDamageSkillResult: {
      mutable_no_damage_skill_result()->::proto::GCGMsgNoDamageSkillResult::MergeFrom(from.no_damage_skill_result());
      break;
    }
    case kReactionBegin: {
      mutable_reaction_begin()->::proto::GCGMsgReactionBegin::MergeFrom(from.reaction_begin());
      break;
    }
    case kReactionEnd: {
      mutable_reaction_end()->::proto::GCGMsgReactionEnd::MergeFrom(from.reaction_end());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void GCGMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMessage::CopyFrom(const GCGMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMessage::IsInitialized() const {
  return true;
}

void GCGMessage::Swap(GCGMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMessage::InternalSwap(GCGMessage* other) {
  using std::swap;
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMessage::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMessage

// .proto.GCGMsgTokenChange token_change = 12;
bool GCGMessage::has_token_change() const {
  return message_case() == kTokenChange;
}
void GCGMessage::set_has_token_change() {
  _oneof_case_[0] = kTokenChange;
}
void GCGMessage::clear_token_change() {
  if (has_token_change()) {
    delete message_.token_change_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgTokenChange& GCGMessage::token_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.token_change)
  return has_token_change()
      ? *message_.token_change_
      : ::proto::GCGMsgTokenChange::default_instance();
}
::proto::GCGMsgTokenChange* GCGMessage::mutable_token_change() {
  if (!has_token_change()) {
    clear_message();
    set_has_token_change();
    message_.token_change_ = new ::proto::GCGMsgTokenChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.token_change)
  return message_.token_change_;
}
::proto::GCGMsgTokenChange* GCGMessage::release_token_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.token_change)
  if (has_token_change()) {
    clear_has_message();
    ::proto::GCGMsgTokenChange* temp = message_.token_change_;
    message_.token_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_token_change(::proto::GCGMsgTokenChange* token_change) {
  clear_message();
  if (token_change) {
    set_has_token_change();
    message_.token_change_ = token_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.token_change)
}

// .proto.GCGMsgPhaseChange phase_change = 13;
bool GCGMessage::has_phase_change() const {
  return message_case() == kPhaseChange;
}
void GCGMessage::set_has_phase_change() {
  _oneof_case_[0] = kPhaseChange;
}
void GCGMessage::clear_phase_change() {
  if (has_phase_change()) {
    delete message_.phase_change_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgPhaseChange& GCGMessage::phase_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.phase_change)
  return has_phase_change()
      ? *message_.phase_change_
      : ::proto::GCGMsgPhaseChange::default_instance();
}
::proto::GCGMsgPhaseChange* GCGMessage::mutable_phase_change() {
  if (!has_phase_change()) {
    clear_message();
    set_has_phase_change();
    message_.phase_change_ = new ::proto::GCGMsgPhaseChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.phase_change)
  return message_.phase_change_;
}
::proto::GCGMsgPhaseChange* GCGMessage::release_phase_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.phase_change)
  if (has_phase_change()) {
    clear_has_message();
    ::proto::GCGMsgPhaseChange* temp = message_.phase_change_;
    message_.phase_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_phase_change(::proto::GCGMsgPhaseChange* phase_change) {
  clear_message();
  if (phase_change) {
    set_has_phase_change();
    message_.phase_change_ = phase_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.phase_change)
}

// .proto.GCGMsgAddCards add_cards = 10;
bool GCGMessage::has_add_cards() const {
  return message_case() == kAddCards;
}
void GCGMessage::set_has_add_cards() {
  _oneof_case_[0] = kAddCards;
}
void GCGMessage::clear_add_cards() {
  if (has_add_cards()) {
    delete message_.add_cards_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgAddCards& GCGMessage::add_cards() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.add_cards)
  return has_add_cards()
      ? *message_.add_cards_
      : ::proto::GCGMsgAddCards::default_instance();
}
::proto::GCGMsgAddCards* GCGMessage::mutable_add_cards() {
  if (!has_add_cards()) {
    clear_message();
    set_has_add_cards();
    message_.add_cards_ = new ::proto::GCGMsgAddCards;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.add_cards)
  return message_.add_cards_;
}
::proto::GCGMsgAddCards* GCGMessage::release_add_cards() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.add_cards)
  if (has_add_cards()) {
    clear_has_message();
    ::proto::GCGMsgAddCards* temp = message_.add_cards_;
    message_.add_cards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_add_cards(::proto::GCGMsgAddCards* add_cards) {
  clear_message();
  if (add_cards) {
    set_has_add_cards();
    message_.add_cards_ = add_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.add_cards)
}

// .proto.GCGMsgRemoveCards remove_cards = 14;
bool GCGMessage::has_remove_cards() const {
  return message_case() == kRemoveCards;
}
void GCGMessage::set_has_remove_cards() {
  _oneof_case_[0] = kRemoveCards;
}
void GCGMessage::clear_remove_cards() {
  if (has_remove_cards()) {
    delete message_.remove_cards_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgRemoveCards& GCGMessage::remove_cards() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.remove_cards)
  return has_remove_cards()
      ? *message_.remove_cards_
      : ::proto::GCGMsgRemoveCards::default_instance();
}
::proto::GCGMsgRemoveCards* GCGMessage::mutable_remove_cards() {
  if (!has_remove_cards()) {
    clear_message();
    set_has_remove_cards();
    message_.remove_cards_ = new ::proto::GCGMsgRemoveCards;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.remove_cards)
  return message_.remove_cards_;
}
::proto::GCGMsgRemoveCards* GCGMessage::release_remove_cards() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.remove_cards)
  if (has_remove_cards()) {
    clear_has_message();
    ::proto::GCGMsgRemoveCards* temp = message_.remove_cards_;
    message_.remove_cards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_remove_cards(::proto::GCGMsgRemoveCards* remove_cards) {
  clear_message();
  if (remove_cards) {
    set_has_remove_cards();
    message_.remove_cards_ = remove_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.remove_cards)
}

// .proto.GCGMsgSelectOnStage select_on_stage = 6;
bool GCGMessage::has_select_on_stage() const {
  return message_case() == kSelectOnStage;
}
void GCGMessage::set_has_select_on_stage() {
  _oneof_case_[0] = kSelectOnStage;
}
void GCGMessage::clear_select_on_stage() {
  if (has_select_on_stage()) {
    delete message_.select_on_stage_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgSelectOnStage& GCGMessage::select_on_stage() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.select_on_stage)
  return has_select_on_stage()
      ? *message_.select_on_stage_
      : ::proto::GCGMsgSelectOnStage::default_instance();
}
::proto::GCGMsgSelectOnStage* GCGMessage::mutable_select_on_stage() {
  if (!has_select_on_stage()) {
    clear_message();
    set_has_select_on_stage();
    message_.select_on_stage_ = new ::proto::GCGMsgSelectOnStage;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.select_on_stage)
  return message_.select_on_stage_;
}
::proto::GCGMsgSelectOnStage* GCGMessage::release_select_on_stage() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.select_on_stage)
  if (has_select_on_stage()) {
    clear_has_message();
    ::proto::GCGMsgSelectOnStage* temp = message_.select_on_stage_;
    message_.select_on_stage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_select_on_stage(::proto::GCGMsgSelectOnStage* select_on_stage) {
  clear_message();
  if (select_on_stage) {
    set_has_select_on_stage();
    message_.select_on_stage_ = select_on_stage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.select_on_stage)
}

// .proto.GCGMsgDiceRoll dice_roll = 9;
bool GCGMessage::has_dice_roll() const {
  return message_case() == kDiceRoll;
}
void GCGMessage::set_has_dice_roll() {
  _oneof_case_[0] = kDiceRoll;
}
void GCGMessage::clear_dice_roll() {
  if (has_dice_roll()) {
    delete message_.dice_roll_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgDiceRoll& GCGMessage::dice_roll() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.dice_roll)
  return has_dice_roll()
      ? *message_.dice_roll_
      : ::proto::GCGMsgDiceRoll::default_instance();
}
::proto::GCGMsgDiceRoll* GCGMessage::mutable_dice_roll() {
  if (!has_dice_roll()) {
    clear_message();
    set_has_dice_roll();
    message_.dice_roll_ = new ::proto::GCGMsgDiceRoll;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.dice_roll)
  return message_.dice_roll_;
}
::proto::GCGMsgDiceRoll* GCGMessage::release_dice_roll() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.dice_roll)
  if (has_dice_roll()) {
    clear_has_message();
    ::proto::GCGMsgDiceRoll* temp = message_.dice_roll_;
    message_.dice_roll_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_dice_roll(::proto::GCGMsgDiceRoll* dice_roll) {
  clear_message();
  if (dice_roll) {
    set_has_dice_roll();
    message_.dice_roll_ = dice_roll;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.dice_roll)
}

// .proto.GCGMsgDiceReroll dice_reroll = 11;
bool GCGMessage::has_dice_reroll() const {
  return message_case() == kDiceReroll;
}
void GCGMessage::set_has_dice_reroll() {
  _oneof_case_[0] = kDiceReroll;
}
void GCGMessage::clear_dice_reroll() {
  if (has_dice_reroll()) {
    delete message_.dice_reroll_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgDiceReroll& GCGMessage::dice_reroll() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.dice_reroll)
  return has_dice_reroll()
      ? *message_.dice_reroll_
      : ::proto::GCGMsgDiceReroll::default_instance();
}
::proto::GCGMsgDiceReroll* GCGMessage::mutable_dice_reroll() {
  if (!has_dice_reroll()) {
    clear_message();
    set_has_dice_reroll();
    message_.dice_reroll_ = new ::proto::GCGMsgDiceReroll;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.dice_reroll)
  return message_.dice_reroll_;
}
::proto::GCGMsgDiceReroll* GCGMessage::release_dice_reroll() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.dice_reroll)
  if (has_dice_reroll()) {
    clear_has_message();
    ::proto::GCGMsgDiceReroll* temp = message_.dice_reroll_;
    message_.dice_reroll_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_dice_reroll(::proto::GCGMsgDiceReroll* dice_reroll) {
  clear_message();
  if (dice_reroll) {
    set_has_dice_reroll();
    message_.dice_reroll_ = dice_reroll;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.dice_reroll)
}

// .proto.GCGMsgPass pass = 5;
bool GCGMessage::has_pass() const {
  return message_case() == kPass;
}
void GCGMessage::set_has_pass() {
  _oneof_case_[0] = kPass;
}
void GCGMessage::clear_pass() {
  if (has_pass()) {
    delete message_.pass_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgPass& GCGMessage::pass() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.pass)
  return has_pass()
      ? *message_.pass_
      : ::proto::GCGMsgPass::default_instance();
}
::proto::GCGMsgPass* GCGMessage::mutable_pass() {
  if (!has_pass()) {
    clear_message();
    set_has_pass();
    message_.pass_ = new ::proto::GCGMsgPass;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.pass)
  return message_.pass_;
}
::proto::GCGMsgPass* GCGMessage::release_pass() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.pass)
  if (has_pass()) {
    clear_has_message();
    ::proto::GCGMsgPass* temp = message_.pass_;
    message_.pass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_pass(::proto::GCGMsgPass* pass) {
  clear_message();
  if (pass) {
    set_has_pass();
    message_.pass_ = pass;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.pass)
}

// .proto.GCGMsgCharDie char_die = 2;
bool GCGMessage::has_char_die() const {
  return message_case() == kCharDie;
}
void GCGMessage::set_has_char_die() {
  _oneof_case_[0] = kCharDie;
}
void GCGMessage::clear_char_die() {
  if (has_char_die()) {
    delete message_.char_die_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgCharDie& GCGMessage::char_die() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.char_die)
  return has_char_die()
      ? *message_.char_die_
      : ::proto::GCGMsgCharDie::default_instance();
}
::proto::GCGMsgCharDie* GCGMessage::mutable_char_die() {
  if (!has_char_die()) {
    clear_message();
    set_has_char_die();
    message_.char_die_ = new ::proto::GCGMsgCharDie;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.char_die)
  return message_.char_die_;
}
::proto::GCGMsgCharDie* GCGMessage::release_char_die() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.char_die)
  if (has_char_die()) {
    clear_has_message();
    ::proto::GCGMsgCharDie* temp = message_.char_die_;
    message_.char_die_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_char_die(::proto::GCGMsgCharDie* char_die) {
  clear_message();
  if (char_die) {
    set_has_char_die();
    message_.char_die_ = char_die;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.char_die)
}

// .proto.GCGMsgSkillResult skill_result = 1;
bool GCGMessage::has_skill_result() const {
  return message_case() == kSkillResult;
}
void GCGMessage::set_has_skill_result() {
  _oneof_case_[0] = kSkillResult;
}
void GCGMessage::clear_skill_result() {
  if (has_skill_result()) {
    delete message_.skill_result_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgSkillResult& GCGMessage::skill_result() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.skill_result)
  return has_skill_result()
      ? *message_.skill_result_
      : ::proto::GCGMsgSkillResult::default_instance();
}
::proto::GCGMsgSkillResult* GCGMessage::mutable_skill_result() {
  if (!has_skill_result()) {
    clear_message();
    set_has_skill_result();
    message_.skill_result_ = new ::proto::GCGMsgSkillResult;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.skill_result)
  return message_.skill_result_;
}
::proto::GCGMsgSkillResult* GCGMessage::release_skill_result() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.skill_result)
  if (has_skill_result()) {
    clear_has_message();
    ::proto::GCGMsgSkillResult* temp = message_.skill_result_;
    message_.skill_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_skill_result(::proto::GCGMsgSkillResult* skill_result) {
  clear_message();
  if (skill_result) {
    set_has_skill_result();
    message_.skill_result_ = skill_result;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.skill_result)
}

// .proto.GCGMsgCostDice cost_dice = 7;
bool GCGMessage::has_cost_dice() const {
  return message_case() == kCostDice;
}
void GCGMessage::set_has_cost_dice() {
  _oneof_case_[0] = kCostDice;
}
void GCGMessage::clear_cost_dice() {
  if (has_cost_dice()) {
    delete message_.cost_dice_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgCostDice& GCGMessage::cost_dice() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.cost_dice)
  return has_cost_dice()
      ? *message_.cost_dice_
      : ::proto::GCGMsgCostDice::default_instance();
}
::proto::GCGMsgCostDice* GCGMessage::mutable_cost_dice() {
  if (!has_cost_dice()) {
    clear_message();
    set_has_cost_dice();
    message_.cost_dice_ = new ::proto::GCGMsgCostDice;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.cost_dice)
  return message_.cost_dice_;
}
::proto::GCGMsgCostDice* GCGMessage::release_cost_dice() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.cost_dice)
  if (has_cost_dice()) {
    clear_has_message();
    ::proto::GCGMsgCostDice* temp = message_.cost_dice_;
    message_.cost_dice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_cost_dice(::proto::GCGMsgCostDice* cost_dice) {
  clear_message();
  if (cost_dice) {
    set_has_cost_dice();
    message_.cost_dice_ = cost_dice;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.cost_dice)
}

// .proto.GCGMsgAddDice add_dice = 3;
bool GCGMessage::has_add_dice() const {
  return message_case() == kAddDice;
}
void GCGMessage::set_has_add_dice() {
  _oneof_case_[0] = kAddDice;
}
void GCGMessage::clear_add_dice() {
  if (has_add_dice()) {
    delete message_.add_dice_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgAddDice& GCGMessage::add_dice() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.add_dice)
  return has_add_dice()
      ? *message_.add_dice_
      : ::proto::GCGMsgAddDice::default_instance();
}
::proto::GCGMsgAddDice* GCGMessage::mutable_add_dice() {
  if (!has_add_dice()) {
    clear_message();
    set_has_add_dice();
    message_.add_dice_ = new ::proto::GCGMsgAddDice;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.add_dice)
  return message_.add_dice_;
}
::proto::GCGMsgAddDice* GCGMessage::release_add_dice() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.add_dice)
  if (has_add_dice()) {
    clear_has_message();
    ::proto::GCGMsgAddDice* temp = message_.add_dice_;
    message_.add_dice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_add_dice(::proto::GCGMsgAddDice* add_dice) {
  clear_message();
  if (add_dice) {
    set_has_add_dice();
    message_.add_dice_ = add_dice;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.add_dice)
}

// .proto.GCGMsgMoveCard move_card = 15;
bool GCGMessage::has_move_card() const {
  return message_case() == kMoveCard;
}
void GCGMessage::set_has_move_card() {
  _oneof_case_[0] = kMoveCard;
}
void GCGMessage::clear_move_card() {
  if (has_move_card()) {
    delete message_.move_card_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgMoveCard& GCGMessage::move_card() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.move_card)
  return has_move_card()
      ? *message_.move_card_
      : ::proto::GCGMsgMoveCard::default_instance();
}
::proto::GCGMsgMoveCard* GCGMessage::mutable_move_card() {
  if (!has_move_card()) {
    clear_message();
    set_has_move_card();
    message_.move_card_ = new ::proto::GCGMsgMoveCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.move_card)
  return message_.move_card_;
}
::proto::GCGMsgMoveCard* GCGMessage::release_move_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.move_card)
  if (has_move_card()) {
    clear_has_message();
    ::proto::GCGMsgMoveCard* temp = message_.move_card_;
    message_.move_card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_move_card(::proto::GCGMsgMoveCard* move_card) {
  clear_message();
  if (move_card) {
    set_has_move_card();
    message_.move_card_ = move_card;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.move_card)
}

// .proto.GCGMsgUseSkill use_skill = 4;
bool GCGMessage::has_use_skill() const {
  return message_case() == kUseSkill;
}
void GCGMessage::set_has_use_skill() {
  _oneof_case_[0] = kUseSkill;
}
void GCGMessage::clear_use_skill() {
  if (has_use_skill()) {
    delete message_.use_skill_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgUseSkill& GCGMessage::use_skill() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.use_skill)
  return has_use_skill()
      ? *message_.use_skill_
      : ::proto::GCGMsgUseSkill::default_instance();
}
::proto::GCGMsgUseSkill* GCGMessage::mutable_use_skill() {
  if (!has_use_skill()) {
    clear_message();
    set_has_use_skill();
    message_.use_skill_ = new ::proto::GCGMsgUseSkill;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.use_skill)
  return message_.use_skill_;
}
::proto::GCGMsgUseSkill* GCGMessage::release_use_skill() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.use_skill)
  if (has_use_skill()) {
    clear_has_message();
    ::proto::GCGMsgUseSkill* temp = message_.use_skill_;
    message_.use_skill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_use_skill(::proto::GCGMsgUseSkill* use_skill) {
  clear_message();
  if (use_skill) {
    set_has_use_skill();
    message_.use_skill_ = use_skill;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.use_skill)
}

// .proto.GCGMsgNewCard new_card = 1848;
bool GCGMessage::has_new_card() const {
  return message_case() == kNewCard;
}
void GCGMessage::set_has_new_card() {
  _oneof_case_[0] = kNewCard;
}
void GCGMessage::clear_new_card() {
  if (has_new_card()) {
    delete message_.new_card_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgNewCard& GCGMessage::new_card() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.new_card)
  return has_new_card()
      ? *message_.new_card_
      : ::proto::GCGMsgNewCard::default_instance();
}
::proto::GCGMsgNewCard* GCGMessage::mutable_new_card() {
  if (!has_new_card()) {
    clear_message();
    set_has_new_card();
    message_.new_card_ = new ::proto::GCGMsgNewCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.new_card)
  return message_.new_card_;
}
::proto::GCGMsgNewCard* GCGMessage::release_new_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.new_card)
  if (has_new_card()) {
    clear_has_message();
    ::proto::GCGMsgNewCard* temp = message_.new_card_;
    message_.new_card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_new_card(::proto::GCGMsgNewCard* new_card) {
  clear_message();
  if (new_card) {
    set_has_new_card();
    message_.new_card_ = new_card;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.new_card)
}

// .proto.GCGMsgUpdateController update_controller = 429;
bool GCGMessage::has_update_controller() const {
  return message_case() == kUpdateController;
}
void GCGMessage::set_has_update_controller() {
  _oneof_case_[0] = kUpdateController;
}
void GCGMessage::clear_update_controller() {
  if (has_update_controller()) {
    delete message_.update_controller_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgUpdateController& GCGMessage::update_controller() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.update_controller)
  return has_update_controller()
      ? *message_.update_controller_
      : ::proto::GCGMsgUpdateController::default_instance();
}
::proto::GCGMsgUpdateController* GCGMessage::mutable_update_controller() {
  if (!has_update_controller()) {
    clear_message();
    set_has_update_controller();
    message_.update_controller_ = new ::proto::GCGMsgUpdateController;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.update_controller)
  return message_.update_controller_;
}
::proto::GCGMsgUpdateController* GCGMessage::release_update_controller() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.update_controller)
  if (has_update_controller()) {
    clear_has_message();
    ::proto::GCGMsgUpdateController* temp = message_.update_controller_;
    message_.update_controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_update_controller(::proto::GCGMsgUpdateController* update_controller) {
  clear_message();
  if (update_controller) {
    set_has_update_controller();
    message_.update_controller_ = update_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.update_controller)
}

// .proto.GCGMsgModifyAdd modify_add = 1851;
bool GCGMessage::has_modify_add() const {
  return message_case() == kModifyAdd;
}
void GCGMessage::set_has_modify_add() {
  _oneof_case_[0] = kModifyAdd;
}
void GCGMessage::clear_modify_add() {
  if (has_modify_add()) {
    delete message_.modify_add_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgModifyAdd& GCGMessage::modify_add() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.modify_add)
  return has_modify_add()
      ? *message_.modify_add_
      : ::proto::GCGMsgModifyAdd::default_instance();
}
::proto::GCGMsgModifyAdd* GCGMessage::mutable_modify_add() {
  if (!has_modify_add()) {
    clear_message();
    set_has_modify_add();
    message_.modify_add_ = new ::proto::GCGMsgModifyAdd;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.modify_add)
  return message_.modify_add_;
}
::proto::GCGMsgModifyAdd* GCGMessage::release_modify_add() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.modify_add)
  if (has_modify_add()) {
    clear_has_message();
    ::proto::GCGMsgModifyAdd* temp = message_.modify_add_;
    message_.modify_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_modify_add(::proto::GCGMsgModifyAdd* modify_add) {
  clear_message();
  if (modify_add) {
    set_has_modify_add();
    message_.modify_add_ = modify_add;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.modify_add)
}

// .proto.GCGMsgModifyRemove modify_remove = 471;
bool GCGMessage::has_modify_remove() const {
  return message_case() == kModifyRemove;
}
void GCGMessage::set_has_modify_remove() {
  _oneof_case_[0] = kModifyRemove;
}
void GCGMessage::clear_modify_remove() {
  if (has_modify_remove()) {
    delete message_.modify_remove_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgModifyRemove& GCGMessage::modify_remove() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.modify_remove)
  return has_modify_remove()
      ? *message_.modify_remove_
      : ::proto::GCGMsgModifyRemove::default_instance();
}
::proto::GCGMsgModifyRemove* GCGMessage::mutable_modify_remove() {
  if (!has_modify_remove()) {
    clear_message();
    set_has_modify_remove();
    message_.modify_remove_ = new ::proto::GCGMsgModifyRemove;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.modify_remove)
  return message_.modify_remove_;
}
::proto::GCGMsgModifyRemove* GCGMessage::release_modify_remove() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.modify_remove)
  if (has_modify_remove()) {
    clear_has_message();
    ::proto::GCGMsgModifyRemove* temp = message_.modify_remove_;
    message_.modify_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_modify_remove(::proto::GCGMsgModifyRemove* modify_remove) {
  clear_message();
  if (modify_remove) {
    set_has_modify_remove();
    message_.modify_remove_ = modify_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.modify_remove)
}

// .proto.GCGMsgUseSkillEnd use_skill_end = 1411;
bool GCGMessage::has_use_skill_end() const {
  return message_case() == kUseSkillEnd;
}
void GCGMessage::set_has_use_skill_end() {
  _oneof_case_[0] = kUseSkillEnd;
}
void GCGMessage::clear_use_skill_end() {
  if (has_use_skill_end()) {
    delete message_.use_skill_end_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgUseSkillEnd& GCGMessage::use_skill_end() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.use_skill_end)
  return has_use_skill_end()
      ? *message_.use_skill_end_
      : ::proto::GCGMsgUseSkillEnd::default_instance();
}
::proto::GCGMsgUseSkillEnd* GCGMessage::mutable_use_skill_end() {
  if (!has_use_skill_end()) {
    clear_message();
    set_has_use_skill_end();
    message_.use_skill_end_ = new ::proto::GCGMsgUseSkillEnd;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.use_skill_end)
  return message_.use_skill_end_;
}
::proto::GCGMsgUseSkillEnd* GCGMessage::release_use_skill_end() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.use_skill_end)
  if (has_use_skill_end()) {
    clear_has_message();
    ::proto::GCGMsgUseSkillEnd* temp = message_.use_skill_end_;
    message_.use_skill_end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_use_skill_end(::proto::GCGMsgUseSkillEnd* use_skill_end) {
  clear_message();
  if (use_skill_end) {
    set_has_use_skill_end();
    message_.use_skill_end_ = use_skill_end;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.use_skill_end)
}

// .proto.GCGMsgDuelDataChange duel_data_change = 1008;
bool GCGMessage::has_duel_data_change() const {
  return message_case() == kDuelDataChange;
}
void GCGMessage::set_has_duel_data_change() {
  _oneof_case_[0] = kDuelDataChange;
}
void GCGMessage::clear_duel_data_change() {
  if (has_duel_data_change()) {
    delete message_.duel_data_change_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgDuelDataChange& GCGMessage::duel_data_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.duel_data_change)
  return has_duel_data_change()
      ? *message_.duel_data_change_
      : ::proto::GCGMsgDuelDataChange::default_instance();
}
::proto::GCGMsgDuelDataChange* GCGMessage::mutable_duel_data_change() {
  if (!has_duel_data_change()) {
    clear_message();
    set_has_duel_data_change();
    message_.duel_data_change_ = new ::proto::GCGMsgDuelDataChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.duel_data_change)
  return message_.duel_data_change_;
}
::proto::GCGMsgDuelDataChange* GCGMessage::release_duel_data_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.duel_data_change)
  if (has_duel_data_change()) {
    clear_has_message();
    ::proto::GCGMsgDuelDataChange* temp = message_.duel_data_change_;
    message_.duel_data_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_duel_data_change(::proto::GCGMsgDuelDataChange* duel_data_change) {
  clear_message();
  if (duel_data_change) {
    set_has_duel_data_change();
    message_.duel_data_change_ = duel_data_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.duel_data_change)
}

// .proto.GCGMsgClientPerform client_perform = 1035;
bool GCGMessage::has_client_perform() const {
  return message_case() == kClientPerform;
}
void GCGMessage::set_has_client_perform() {
  _oneof_case_[0] = kClientPerform;
}
void GCGMessage::clear_client_perform() {
  if (has_client_perform()) {
    delete message_.client_perform_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgClientPerform& GCGMessage::client_perform() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.client_perform)
  return has_client_perform()
      ? *message_.client_perform_
      : ::proto::GCGMsgClientPerform::default_instance();
}
::proto::GCGMsgClientPerform* GCGMessage::mutable_client_perform() {
  if (!has_client_perform()) {
    clear_message();
    set_has_client_perform();
    message_.client_perform_ = new ::proto::GCGMsgClientPerform;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.client_perform)
  return message_.client_perform_;
}
::proto::GCGMsgClientPerform* GCGMessage::release_client_perform() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.client_perform)
  if (has_client_perform()) {
    clear_has_message();
    ::proto::GCGMsgClientPerform* temp = message_.client_perform_;
    message_.client_perform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_client_perform(::proto::GCGMsgClientPerform* client_perform) {
  clear_message();
  if (client_perform) {
    set_has_client_perform();
    message_.client_perform_ = client_perform;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.client_perform)
}

// .proto.GCGMsgGameOver game_over = 714;
bool GCGMessage::has_game_over() const {
  return message_case() == kGameOver;
}
void GCGMessage::set_has_game_over() {
  _oneof_case_[0] = kGameOver;
}
void GCGMessage::clear_game_over() {
  if (has_game_over()) {
    delete message_.game_over_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgGameOver& GCGMessage::game_over() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.game_over)
  return has_game_over()
      ? *message_.game_over_
      : ::proto::GCGMsgGameOver::default_instance();
}
::proto::GCGMsgGameOver* GCGMessage::mutable_game_over() {
  if (!has_game_over()) {
    clear_message();
    set_has_game_over();
    message_.game_over_ = new ::proto::GCGMsgGameOver;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.game_over)
  return message_.game_over_;
}
::proto::GCGMsgGameOver* GCGMessage::release_game_over() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.game_over)
  if (has_game_over()) {
    clear_has_message();
    ::proto::GCGMsgGameOver* temp = message_.game_over_;
    message_.game_over_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_game_over(::proto::GCGMsgGameOver* game_over) {
  clear_message();
  if (game_over) {
    set_has_game_over();
    message_.game_over_ = game_over;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.game_over)
}

// .proto.GCGMsgOpTimer op_timer = 1862;
bool GCGMessage::has_op_timer() const {
  return message_case() == kOpTimer;
}
void GCGMessage::set_has_op_timer() {
  _oneof_case_[0] = kOpTimer;
}
void GCGMessage::clear_op_timer() {
  if (has_op_timer()) {
    delete message_.op_timer_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgOpTimer& GCGMessage::op_timer() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.op_timer)
  return has_op_timer()
      ? *message_.op_timer_
      : ::proto::GCGMsgOpTimer::default_instance();
}
::proto::GCGMsgOpTimer* GCGMessage::mutable_op_timer() {
  if (!has_op_timer()) {
    clear_message();
    set_has_op_timer();
    message_.op_timer_ = new ::proto::GCGMsgOpTimer;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.op_timer)
  return message_.op_timer_;
}
::proto::GCGMsgOpTimer* GCGMessage::release_op_timer() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.op_timer)
  if (has_op_timer()) {
    clear_has_message();
    ::proto::GCGMsgOpTimer* temp = message_.op_timer_;
    message_.op_timer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_op_timer(::proto::GCGMsgOpTimer* op_timer) {
  clear_message();
  if (op_timer) {
    set_has_op_timer();
    message_.op_timer_ = op_timer;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.op_timer)
}

// .proto.GCGMsgWaitingListChange waiting_list_change = 1678;
bool GCGMessage::has_waiting_list_change() const {
  return message_case() == kWaitingListChange;
}
void GCGMessage::set_has_waiting_list_change() {
  _oneof_case_[0] = kWaitingListChange;
}
void GCGMessage::clear_waiting_list_change() {
  if (has_waiting_list_change()) {
    delete message_.waiting_list_change_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgWaitingListChange& GCGMessage::waiting_list_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.waiting_list_change)
  return has_waiting_list_change()
      ? *message_.waiting_list_change_
      : ::proto::GCGMsgWaitingListChange::default_instance();
}
::proto::GCGMsgWaitingListChange* GCGMessage::mutable_waiting_list_change() {
  if (!has_waiting_list_change()) {
    clear_message();
    set_has_waiting_list_change();
    message_.waiting_list_change_ = new ::proto::GCGMsgWaitingListChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.waiting_list_change)
  return message_.waiting_list_change_;
}
::proto::GCGMsgWaitingListChange* GCGMessage::release_waiting_list_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.waiting_list_change)
  if (has_waiting_list_change()) {
    clear_has_message();
    ::proto::GCGMsgWaitingListChange* temp = message_.waiting_list_change_;
    message_.waiting_list_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_waiting_list_change(::proto::GCGMsgWaitingListChange* waiting_list_change) {
  clear_message();
  if (waiting_list_change) {
    set_has_waiting_list_change();
    message_.waiting_list_change_ = waiting_list_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.waiting_list_change)
}

// .proto.GCGMsgCardUpdate card_update = 1879;
bool GCGMessage::has_card_update() const {
  return message_case() == kCardUpdate;
}
void GCGMessage::set_has_card_update() {
  _oneof_case_[0] = kCardUpdate;
}
void GCGMessage::clear_card_update() {
  if (has_card_update()) {
    delete message_.card_update_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgCardUpdate& GCGMessage::card_update() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.card_update)
  return has_card_update()
      ? *message_.card_update_
      : ::proto::GCGMsgCardUpdate::default_instance();
}
::proto::GCGMsgCardUpdate* GCGMessage::mutable_card_update() {
  if (!has_card_update()) {
    clear_message();
    set_has_card_update();
    message_.card_update_ = new ::proto::GCGMsgCardUpdate;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.card_update)
  return message_.card_update_;
}
::proto::GCGMsgCardUpdate* GCGMessage::release_card_update() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.card_update)
  if (has_card_update()) {
    clear_has_message();
    ::proto::GCGMsgCardUpdate* temp = message_.card_update_;
    message_.card_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_card_update(::proto::GCGMsgCardUpdate* card_update) {
  clear_message();
  if (card_update) {
    set_has_card_update();
    message_.card_update_ = card_update;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.card_update)
}

// .proto.GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 2042;
bool GCGMessage::has_select_on_stage_by_effect() const {
  return message_case() == kSelectOnStageByEffect;
}
void GCGMessage::set_has_select_on_stage_by_effect() {
  _oneof_case_[0] = kSelectOnStageByEffect;
}
void GCGMessage::clear_select_on_stage_by_effect() {
  if (has_select_on_stage_by_effect()) {
    delete message_.select_on_stage_by_effect_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgSelectOnStageByEffect& GCGMessage::select_on_stage_by_effect() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.select_on_stage_by_effect)
  return has_select_on_stage_by_effect()
      ? *message_.select_on_stage_by_effect_
      : ::proto::GCGMsgSelectOnStageByEffect::default_instance();
}
::proto::GCGMsgSelectOnStageByEffect* GCGMessage::mutable_select_on_stage_by_effect() {
  if (!has_select_on_stage_by_effect()) {
    clear_message();
    set_has_select_on_stage_by_effect();
    message_.select_on_stage_by_effect_ = new ::proto::GCGMsgSelectOnStageByEffect;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.select_on_stage_by_effect)
  return message_.select_on_stage_by_effect_;
}
::proto::GCGMsgSelectOnStageByEffect* GCGMessage::release_select_on_stage_by_effect() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.select_on_stage_by_effect)
  if (has_select_on_stage_by_effect()) {
    clear_has_message();
    ::proto::GCGMsgSelectOnStageByEffect* temp = message_.select_on_stage_by_effect_;
    message_.select_on_stage_by_effect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_select_on_stage_by_effect(::proto::GCGMsgSelectOnStageByEffect* select_on_stage_by_effect) {
  clear_message();
  if (select_on_stage_by_effect) {
    set_has_select_on_stage_by_effect();
    message_.select_on_stage_by_effect_ = select_on_stage_by_effect;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.select_on_stage_by_effect)
}

// .proto.GCGMsgCostRevise cost_revise = 1350;
bool GCGMessage::has_cost_revise() const {
  return message_case() == kCostRevise;
}
void GCGMessage::set_has_cost_revise() {
  _oneof_case_[0] = kCostRevise;
}
void GCGMessage::clear_cost_revise() {
  if (has_cost_revise()) {
    delete message_.cost_revise_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgCostRevise& GCGMessage::cost_revise() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.cost_revise)
  return has_cost_revise()
      ? *message_.cost_revise_
      : ::proto::GCGMsgCostRevise::default_instance();
}
::proto::GCGMsgCostRevise* GCGMessage::mutable_cost_revise() {
  if (!has_cost_revise()) {
    clear_message();
    set_has_cost_revise();
    message_.cost_revise_ = new ::proto::GCGMsgCostRevise;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.cost_revise)
  return message_.cost_revise_;
}
::proto::GCGMsgCostRevise* GCGMessage::release_cost_revise() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.cost_revise)
  if (has_cost_revise()) {
    clear_has_message();
    ::proto::GCGMsgCostRevise* temp = message_.cost_revise_;
    message_.cost_revise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_cost_revise(::proto::GCGMsgCostRevise* cost_revise) {
  clear_message();
  if (cost_revise) {
    set_has_cost_revise();
    message_.cost_revise_ = cost_revise;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.cost_revise)
}

// .proto.GCGMsgPhaseContinue phase_continue = 1474;
bool GCGMessage::has_phase_continue() const {
  return message_case() == kPhaseContinue;
}
void GCGMessage::set_has_phase_continue() {
  _oneof_case_[0] = kPhaseContinue;
}
void GCGMessage::clear_phase_continue() {
  if (has_phase_continue()) {
    delete message_.phase_continue_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgPhaseContinue& GCGMessage::phase_continue() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.phase_continue)
  return has_phase_continue()
      ? *message_.phase_continue_
      : ::proto::GCGMsgPhaseContinue::default_instance();
}
::proto::GCGMsgPhaseContinue* GCGMessage::mutable_phase_continue() {
  if (!has_phase_continue()) {
    clear_message();
    set_has_phase_continue();
    message_.phase_continue_ = new ::proto::GCGMsgPhaseContinue;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.phase_continue)
  return message_.phase_continue_;
}
::proto::GCGMsgPhaseContinue* GCGMessage::release_phase_continue() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.phase_continue)
  if (has_phase_continue()) {
    clear_has_message();
    ::proto::GCGMsgPhaseContinue* temp = message_.phase_continue_;
    message_.phase_continue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_phase_continue(::proto::GCGMsgPhaseContinue* phase_continue) {
  clear_message();
  if (phase_continue) {
    set_has_phase_continue();
    message_.phase_continue_ = phase_continue;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.phase_continue)
}

// .proto.GCGMsgPVEIntentionInfo pve_intention_info = 1252;
bool GCGMessage::has_pve_intention_info() const {
  return message_case() == kPveIntentionInfo;
}
void GCGMessage::set_has_pve_intention_info() {
  _oneof_case_[0] = kPveIntentionInfo;
}
void GCGMessage::clear_pve_intention_info() {
  if (has_pve_intention_info()) {
    delete message_.pve_intention_info_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgPVEIntentionInfo& GCGMessage::pve_intention_info() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.pve_intention_info)
  return has_pve_intention_info()
      ? *message_.pve_intention_info_
      : ::proto::GCGMsgPVEIntentionInfo::default_instance();
}
::proto::GCGMsgPVEIntentionInfo* GCGMessage::mutable_pve_intention_info() {
  if (!has_pve_intention_info()) {
    clear_message();
    set_has_pve_intention_info();
    message_.pve_intention_info_ = new ::proto::GCGMsgPVEIntentionInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.pve_intention_info)
  return message_.pve_intention_info_;
}
::proto::GCGMsgPVEIntentionInfo* GCGMessage::release_pve_intention_info() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.pve_intention_info)
  if (has_pve_intention_info()) {
    clear_has_message();
    ::proto::GCGMsgPVEIntentionInfo* temp = message_.pve_intention_info_;
    message_.pve_intention_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_pve_intention_info(::proto::GCGMsgPVEIntentionInfo* pve_intention_info) {
  clear_message();
  if (pve_intention_info) {
    set_has_pve_intention_info();
    message_.pve_intention_info_ = pve_intention_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.pve_intention_info)
}

// .proto.GCGMsgPVEIntentionChange pve_intention_change = 893;
bool GCGMessage::has_pve_intention_change() const {
  return message_case() == kPveIntentionChange;
}
void GCGMessage::set_has_pve_intention_change() {
  _oneof_case_[0] = kPveIntentionChange;
}
void GCGMessage::clear_pve_intention_change() {
  if (has_pve_intention_change()) {
    delete message_.pve_intention_change_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgPVEIntentionChange& GCGMessage::pve_intention_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.pve_intention_change)
  return has_pve_intention_change()
      ? *message_.pve_intention_change_
      : ::proto::GCGMsgPVEIntentionChange::default_instance();
}
::proto::GCGMsgPVEIntentionChange* GCGMessage::mutable_pve_intention_change() {
  if (!has_pve_intention_change()) {
    clear_message();
    set_has_pve_intention_change();
    message_.pve_intention_change_ = new ::proto::GCGMsgPVEIntentionChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.pve_intention_change)
  return message_.pve_intention_change_;
}
::proto::GCGMsgPVEIntentionChange* GCGMessage::release_pve_intention_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.pve_intention_change)
  if (has_pve_intention_change()) {
    clear_has_message();
    ::proto::GCGMsgPVEIntentionChange* temp = message_.pve_intention_change_;
    message_.pve_intention_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_pve_intention_change(::proto::GCGMsgPVEIntentionChange* pve_intention_change) {
  clear_message();
  if (pve_intention_change) {
    set_has_pve_intention_change();
    message_.pve_intention_change_ = pve_intention_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.pve_intention_change)
}

// .proto.GCGMsgSkillLimitsChange skill_limits_change = 259;
bool GCGMessage::has_skill_limits_change() const {
  return message_case() == kSkillLimitsChange;
}
void GCGMessage::set_has_skill_limits_change() {
  _oneof_case_[0] = kSkillLimitsChange;
}
void GCGMessage::clear_skill_limits_change() {
  if (has_skill_limits_change()) {
    delete message_.skill_limits_change_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgSkillLimitsChange& GCGMessage::skill_limits_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.skill_limits_change)
  return has_skill_limits_change()
      ? *message_.skill_limits_change_
      : ::proto::GCGMsgSkillLimitsChange::default_instance();
}
::proto::GCGMsgSkillLimitsChange* GCGMessage::mutable_skill_limits_change() {
  if (!has_skill_limits_change()) {
    clear_message();
    set_has_skill_limits_change();
    message_.skill_limits_change_ = new ::proto::GCGMsgSkillLimitsChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.skill_limits_change)
  return message_.skill_limits_change_;
}
::proto::GCGMsgSkillLimitsChange* GCGMessage::release_skill_limits_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.skill_limits_change)
  if (has_skill_limits_change()) {
    clear_has_message();
    ::proto::GCGMsgSkillLimitsChange* temp = message_.skill_limits_change_;
    message_.skill_limits_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_skill_limits_change(::proto::GCGMsgSkillLimitsChange* skill_limits_change) {
  clear_message();
  if (skill_limits_change) {
    set_has_skill_limits_change();
    message_.skill_limits_change_ = skill_limits_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.skill_limits_change)
}

// .proto.GCGMsgNoDamageSkillResult no_damage_skill_result = 24;
bool GCGMessage::has_no_damage_skill_result() const {
  return message_case() == kNoDamageSkillResult;
}
void GCGMessage::set_has_no_damage_skill_result() {
  _oneof_case_[0] = kNoDamageSkillResult;
}
void GCGMessage::clear_no_damage_skill_result() {
  if (has_no_damage_skill_result()) {
    delete message_.no_damage_skill_result_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgNoDamageSkillResult& GCGMessage::no_damage_skill_result() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.no_damage_skill_result)
  return has_no_damage_skill_result()
      ? *message_.no_damage_skill_result_
      : ::proto::GCGMsgNoDamageSkillResult::default_instance();
}
::proto::GCGMsgNoDamageSkillResult* GCGMessage::mutable_no_damage_skill_result() {
  if (!has_no_damage_skill_result()) {
    clear_message();
    set_has_no_damage_skill_result();
    message_.no_damage_skill_result_ = new ::proto::GCGMsgNoDamageSkillResult;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.no_damage_skill_result)
  return message_.no_damage_skill_result_;
}
::proto::GCGMsgNoDamageSkillResult* GCGMessage::release_no_damage_skill_result() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.no_damage_skill_result)
  if (has_no_damage_skill_result()) {
    clear_has_message();
    ::proto::GCGMsgNoDamageSkillResult* temp = message_.no_damage_skill_result_;
    message_.no_damage_skill_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_no_damage_skill_result(::proto::GCGMsgNoDamageSkillResult* no_damage_skill_result) {
  clear_message();
  if (no_damage_skill_result) {
    set_has_no_damage_skill_result();
    message_.no_damage_skill_result_ = no_damage_skill_result;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.no_damage_skill_result)
}

// .proto.GCGMsgReactionBegin reaction_begin = 859;
bool GCGMessage::has_reaction_begin() const {
  return message_case() == kReactionBegin;
}
void GCGMessage::set_has_reaction_begin() {
  _oneof_case_[0] = kReactionBegin;
}
void GCGMessage::clear_reaction_begin() {
  if (has_reaction_begin()) {
    delete message_.reaction_begin_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgReactionBegin& GCGMessage::reaction_begin() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.reaction_begin)
  return has_reaction_begin()
      ? *message_.reaction_begin_
      : ::proto::GCGMsgReactionBegin::default_instance();
}
::proto::GCGMsgReactionBegin* GCGMessage::mutable_reaction_begin() {
  if (!has_reaction_begin()) {
    clear_message();
    set_has_reaction_begin();
    message_.reaction_begin_ = new ::proto::GCGMsgReactionBegin;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.reaction_begin)
  return message_.reaction_begin_;
}
::proto::GCGMsgReactionBegin* GCGMessage::release_reaction_begin() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.reaction_begin)
  if (has_reaction_begin()) {
    clear_has_message();
    ::proto::GCGMsgReactionBegin* temp = message_.reaction_begin_;
    message_.reaction_begin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_reaction_begin(::proto::GCGMsgReactionBegin* reaction_begin) {
  clear_message();
  if (reaction_begin) {
    set_has_reaction_begin();
    message_.reaction_begin_ = reaction_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.reaction_begin)
}

// .proto.GCGMsgReactionEnd reaction_end = 1395;
bool GCGMessage::has_reaction_end() const {
  return message_case() == kReactionEnd;
}
void GCGMessage::set_has_reaction_end() {
  _oneof_case_[0] = kReactionEnd;
}
void GCGMessage::clear_reaction_end() {
  if (has_reaction_end()) {
    delete message_.reaction_end_;
    clear_has_message();
  }
}
 const ::proto::GCGMsgReactionEnd& GCGMessage::reaction_end() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.reaction_end)
  return has_reaction_end()
      ? *message_.reaction_end_
      : ::proto::GCGMsgReactionEnd::default_instance();
}
::proto::GCGMsgReactionEnd* GCGMessage::mutable_reaction_end() {
  if (!has_reaction_end()) {
    clear_message();
    set_has_reaction_end();
    message_.reaction_end_ = new ::proto::GCGMsgReactionEnd;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.reaction_end)
  return message_.reaction_end_;
}
::proto::GCGMsgReactionEnd* GCGMessage::release_reaction_end() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.reaction_end)
  if (has_reaction_end()) {
    clear_has_message();
    ::proto::GCGMsgReactionEnd* temp = message_.reaction_end_;
    message_.reaction_end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGMessage::set_allocated_reaction_end(::proto::GCGMsgReactionEnd* reaction_end) {
  clear_message();
  if (reaction_end) {
    set_has_reaction_end();
    message_.reaction_end_ = reaction_end;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.reaction_end)
}

bool GCGMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
void GCGMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
GCGMessage::MessageCase GCGMessage::message_case() const {
  return GCGMessage::MessageCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMessagePack::kActionTypeFieldNumber;
const int GCGMessagePack::kControllerIdFieldNumber;
const int GCGMessagePack::kMsgListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMessagePack::GCGMessagePack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMessagePack)
}
GCGMessagePack::GCGMessagePack(const GCGMessagePack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msg_list_(from.msg_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_type_, &from.action_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&action_type_)) + sizeof(controller_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGMessagePack)
}

void GCGMessagePack::SharedCtor() {
  ::memset(&action_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&action_type_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGMessagePack::~GCGMessagePack() {
  // @@protoc_insertion_point(destructor:proto.GCGMessagePack)
  SharedDtor();
}

void GCGMessagePack::SharedDtor() {
}

void GCGMessagePack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMessagePack::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMessagePack& GCGMessagePack::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMessagePack* GCGMessagePack::New(::google::protobuf::Arena* arena) const {
  GCGMessagePack* n = new GCGMessagePack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMessagePack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_list_.Clear();
  ::memset(&action_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&action_type_)) + sizeof(controller_id_));
  _internal_metadata_.Clear();
}

bool GCGMessagePack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMessagePack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGActionType action_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action_type(static_cast< ::proto::GCGActionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGMessage msg_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMessagePack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMessagePack)
  return false;
#undef DO_
}

void GCGMessagePack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGActionType action_type = 3;
  if (this->action_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action_type(), output);
  }

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->controller_id(), output);
  }

  // repeated .proto.GCGMessage msg_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->msg_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMessagePack)
}

::google::protobuf::uint8* GCGMessagePack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMessagePack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGActionType action_type = 3;
  if (this->action_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action_type(), target);
  }

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->controller_id(), target);
  }

  // repeated .proto.GCGMessage msg_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->msg_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMessagePack)
  return target;
}

size_t GCGMessagePack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMessagePack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGMessage msg_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->msg_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_list(static_cast<int>(i)));
    }
  }

  // .proto.GCGActionType action_type = 3;
  if (this->action_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action_type());
  }

  // uint32 controller_id = 6;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMessagePack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMessagePack)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMessagePack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMessagePack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMessagePack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMessagePack)
    MergeFrom(*source);
  }
}

void GCGMessagePack::MergeFrom(const GCGMessagePack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMessagePack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_list_.MergeFrom(from.msg_list_);
  if (from.action_type() != 0) {
    set_action_type(from.action_type());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGMessagePack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMessagePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMessagePack::CopyFrom(const GCGMessagePack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMessagePack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMessagePack::IsInitialized() const {
  return true;
}

void GCGMessagePack::Swap(GCGMessagePack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMessagePack::InternalSwap(GCGMessagePack* other) {
  using std::swap;
  msg_list_.InternalSwap(&other->msg_list_);
  swap(action_type_, other->action_type_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMessagePack::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMessagePack

// .proto.GCGActionType action_type = 3;
void GCGMessagePack::clear_action_type() {
  action_type_ = 0;
}
::proto::GCGActionType GCGMessagePack::action_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePack.action_type)
  return static_cast< ::proto::GCGActionType >(action_type_);
}
void GCGMessagePack::set_action_type(::proto::GCGActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMessagePack.action_type)
}

// uint32 controller_id = 6;
void GCGMessagePack::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGMessagePack::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePack.controller_id)
  return controller_id_;
}
void GCGMessagePack::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMessagePack.controller_id)
}

// repeated .proto.GCGMessage msg_list = 13;
int GCGMessagePack::msg_list_size() const {
  return msg_list_.size();
}
void GCGMessagePack::clear_msg_list() {
  msg_list_.Clear();
}
const ::proto::GCGMessage& GCGMessagePack::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePack.msg_list)
  return msg_list_.Get(index);
}
::proto::GCGMessage* GCGMessagePack::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMessagePack.msg_list)
  return msg_list_.Mutable(index);
}
::proto::GCGMessage* GCGMessagePack::add_msg_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMessagePack.msg_list)
  return msg_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGMessage >*
GCGMessagePack::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMessagePack.msg_list)
  return &msg_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessage >&
GCGMessagePack::msg_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMessagePack.msg_list)
  return msg_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationRedraw::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationRedraw::GCGOperationRedraw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationRedraw)
}
GCGOperationRedraw::GCGOperationRedraw(const GCGOperationRedraw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationRedraw)
}

void GCGOperationRedraw::SharedCtor() {
  _cached_size_ = 0;
}

GCGOperationRedraw::~GCGOperationRedraw() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationRedraw)
  SharedDtor();
}

void GCGOperationRedraw::SharedDtor() {
}

void GCGOperationRedraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationRedraw::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationRedraw& GCGOperationRedraw::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationRedraw* GCGOperationRedraw::New(::google::protobuf::Arena* arena) const {
  GCGOperationRedraw* n = new GCGOperationRedraw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationRedraw::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationRedraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGOperationRedraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationRedraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationRedraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationRedraw)
  return false;
#undef DO_
}

void GCGOperationRedraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationRedraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 2;
  if (this->card_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationRedraw)
}

::google::protobuf::uint8* GCGOperationRedraw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationRedraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 2;
  if (this->card_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationRedraw)
  return target;
}

size_t GCGOperationRedraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationRedraw)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationRedraw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationRedraw)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationRedraw* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationRedraw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationRedraw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationRedraw)
    MergeFrom(*source);
  }
}

void GCGOperationRedraw::MergeFrom(const GCGOperationRedraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationRedraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
}

void GCGOperationRedraw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationRedraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationRedraw::CopyFrom(const GCGOperationRedraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationRedraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationRedraw::IsInitialized() const {
  return true;
}

void GCGOperationRedraw::Swap(GCGOperationRedraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationRedraw::InternalSwap(GCGOperationRedraw* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationRedraw::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationRedraw

// repeated uint32 card_list = 2;
int GCGOperationRedraw::card_list_size() const {
  return card_list_.size();
}
void GCGOperationRedraw::clear_card_list() {
  card_list_.Clear();
}
::google::protobuf::uint32 GCGOperationRedraw::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationRedraw.card_list)
  return card_list_.Get(index);
}
void GCGOperationRedraw::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationRedraw.card_list)
}
void GCGOperationRedraw::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationRedraw.card_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationRedraw::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationRedraw.card_list)
  return card_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationRedraw::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationRedraw.card_list)
  return &card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationOnStageSelect::kCardGuidFieldNumber;
const int GCGOperationOnStageSelect::kCostDiceIndexListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationOnStageSelect::GCGOperationOnStageSelect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationOnStageSelect)
}
GCGOperationOnStageSelect::GCGOperationOnStageSelect(const GCGOperationOnStageSelect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cost_dice_index_list_(from.cost_dice_index_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_guid_ = from.card_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationOnStageSelect)
}

void GCGOperationOnStageSelect::SharedCtor() {
  card_guid_ = 0u;
  _cached_size_ = 0;
}

GCGOperationOnStageSelect::~GCGOperationOnStageSelect() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationOnStageSelect)
  SharedDtor();
}

void GCGOperationOnStageSelect::SharedDtor() {
}

void GCGOperationOnStageSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationOnStageSelect::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationOnStageSelect& GCGOperationOnStageSelect::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationOnStageSelect* GCGOperationOnStageSelect::New(::google::protobuf::Arena* arena) const {
  GCGOperationOnStageSelect* n = new GCGOperationOnStageSelect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationOnStageSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationOnStageSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_dice_index_list_.Clear();
  card_guid_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGOperationOnStageSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationOnStageSelect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cost_dice_index_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cost_dice_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_cost_dice_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationOnStageSelect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationOnStageSelect)
  return false;
#undef DO_
}

void GCGOperationOnStageSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationOnStageSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cost_dice_index_list = 4;
  if (this->cost_dice_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cost_dice_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->cost_dice_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->cost_dice_index_list(i), output);
  }

  // uint32 card_guid = 5;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationOnStageSelect)
}

::google::protobuf::uint8* GCGOperationOnStageSelect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationOnStageSelect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cost_dice_index_list = 4;
  if (this->cost_dice_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _cost_dice_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->cost_dice_index_list_, target);
  }

  // uint32 card_guid = 5;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationOnStageSelect)
  return target;
}

size_t GCGOperationOnStageSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationOnStageSelect)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 cost_dice_index_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cost_dice_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cost_dice_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 card_guid = 5;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationOnStageSelect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationOnStageSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationOnStageSelect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationOnStageSelect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationOnStageSelect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationOnStageSelect)
    MergeFrom(*source);
  }
}

void GCGOperationOnStageSelect::MergeFrom(const GCGOperationOnStageSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationOnStageSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_dice_index_list_.MergeFrom(from.cost_dice_index_list_);
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
}

void GCGOperationOnStageSelect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationOnStageSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationOnStageSelect::CopyFrom(const GCGOperationOnStageSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationOnStageSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationOnStageSelect::IsInitialized() const {
  return true;
}

void GCGOperationOnStageSelect::Swap(GCGOperationOnStageSelect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationOnStageSelect::InternalSwap(GCGOperationOnStageSelect* other) {
  using std::swap;
  cost_dice_index_list_.InternalSwap(&other->cost_dice_index_list_);
  swap(card_guid_, other->card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationOnStageSelect::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationOnStageSelect

// uint32 card_guid = 5;
void GCGOperationOnStageSelect::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGOperationOnStageSelect::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationOnStageSelect.card_guid)
  return card_guid_;
}
void GCGOperationOnStageSelect::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationOnStageSelect.card_guid)
}

// repeated uint32 cost_dice_index_list = 4;
int GCGOperationOnStageSelect::cost_dice_index_list_size() const {
  return cost_dice_index_list_.size();
}
void GCGOperationOnStageSelect::clear_cost_dice_index_list() {
  cost_dice_index_list_.Clear();
}
::google::protobuf::uint32 GCGOperationOnStageSelect::cost_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationOnStageSelect.cost_dice_index_list)
  return cost_dice_index_list_.Get(index);
}
void GCGOperationOnStageSelect::set_cost_dice_index_list(int index, ::google::protobuf::uint32 value) {
  cost_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationOnStageSelect.cost_dice_index_list)
}
void GCGOperationOnStageSelect::add_cost_dice_index_list(::google::protobuf::uint32 value) {
  cost_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationOnStageSelect.cost_dice_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationOnStageSelect::cost_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationOnStageSelect.cost_dice_index_list)
  return cost_dice_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationOnStageSelect::mutable_cost_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationOnStageSelect.cost_dice_index_list)
  return &cost_dice_index_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationReroll::kDiceIndexListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationReroll::GCGOperationReroll()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationReroll)
}
GCGOperationReroll::GCGOperationReroll(const GCGOperationReroll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dice_index_list_(from.dice_index_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationReroll)
}

void GCGOperationReroll::SharedCtor() {
  _cached_size_ = 0;
}

GCGOperationReroll::~GCGOperationReroll() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationReroll)
  SharedDtor();
}

void GCGOperationReroll::SharedDtor() {
}

void GCGOperationReroll::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationReroll::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationReroll& GCGOperationReroll::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationReroll* GCGOperationReroll::New(::google::protobuf::Arena* arena) const {
  GCGOperationReroll* n = new GCGOperationReroll;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationReroll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dice_index_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGOperationReroll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationReroll)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dice_index_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dice_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_dice_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationReroll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationReroll)
  return false;
#undef DO_
}

void GCGOperationReroll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dice_index_list = 12;
  if (this->dice_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dice_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->dice_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->dice_index_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationReroll)
}

::google::protobuf::uint8* GCGOperationReroll::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationReroll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dice_index_list = 12;
  if (this->dice_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _dice_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->dice_index_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationReroll)
  return target;
}

size_t GCGOperationReroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationReroll)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 dice_index_list = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dice_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dice_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationReroll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationReroll)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationReroll* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationReroll>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationReroll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationReroll)
    MergeFrom(*source);
  }
}

void GCGOperationReroll::MergeFrom(const GCGOperationReroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationReroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dice_index_list_.MergeFrom(from.dice_index_list_);
}

void GCGOperationReroll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationReroll::CopyFrom(const GCGOperationReroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationReroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationReroll::IsInitialized() const {
  return true;
}

void GCGOperationReroll::Swap(GCGOperationReroll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationReroll::InternalSwap(GCGOperationReroll* other) {
  using std::swap;
  dice_index_list_.InternalSwap(&other->dice_index_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationReroll::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationReroll

// repeated uint32 dice_index_list = 12;
int GCGOperationReroll::dice_index_list_size() const {
  return dice_index_list_.size();
}
void GCGOperationReroll::clear_dice_index_list() {
  dice_index_list_.Clear();
}
::google::protobuf::uint32 GCGOperationReroll::dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReroll.dice_index_list)
  return dice_index_list_.Get(index);
}
void GCGOperationReroll::set_dice_index_list(int index, ::google::protobuf::uint32 value) {
  dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationReroll.dice_index_list)
}
void GCGOperationReroll::add_dice_index_list(::google::protobuf::uint32 value) {
  dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationReroll.dice_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationReroll::dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReroll.dice_index_list)
  return dice_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationReroll::mutable_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReroll.dice_index_list)
  return &dice_index_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationAttack::kCostDiceIndexListFieldNumber;
const int GCGOperationAttack::kSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationAttack::GCGOperationAttack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationAttack)
}
GCGOperationAttack::GCGOperationAttack(const GCGOperationAttack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cost_dice_index_list_(from.cost_dice_index_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skill_id_ = from.skill_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationAttack)
}

void GCGOperationAttack::SharedCtor() {
  skill_id_ = 0u;
  _cached_size_ = 0;
}

GCGOperationAttack::~GCGOperationAttack() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationAttack)
  SharedDtor();
}

void GCGOperationAttack::SharedDtor() {
}

void GCGOperationAttack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationAttack::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationAttack& GCGOperationAttack::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationAttack* GCGOperationAttack::New(::google::protobuf::Arena* arena) const {
  GCGOperationAttack* n = new GCGOperationAttack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationAttack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_dice_index_list_.Clear();
  skill_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGOperationAttack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationAttack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 skill_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cost_dice_index_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cost_dice_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_cost_dice_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationAttack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationAttack)
  return false;
#undef DO_
}

void GCGOperationAttack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationAttack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_id(), output);
  }

  // repeated uint32 cost_dice_index_list = 8;
  if (this->cost_dice_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cost_dice_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->cost_dice_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->cost_dice_index_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationAttack)
}

::google::protobuf::uint8* GCGOperationAttack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationAttack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_id(), target);
  }

  // repeated uint32 cost_dice_index_list = 8;
  if (this->cost_dice_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _cost_dice_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->cost_dice_index_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationAttack)
  return target;
}

size_t GCGOperationAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationAttack)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 cost_dice_index_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cost_dice_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cost_dice_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 skill_id = 2;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationAttack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationAttack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationAttack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationAttack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationAttack)
    MergeFrom(*source);
  }
}

void GCGOperationAttack::MergeFrom(const GCGOperationAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_dice_index_list_.MergeFrom(from.cost_dice_index_list_);
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGOperationAttack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationAttack::CopyFrom(const GCGOperationAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationAttack::IsInitialized() const {
  return true;
}

void GCGOperationAttack::Swap(GCGOperationAttack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationAttack::InternalSwap(GCGOperationAttack* other) {
  using std::swap;
  cost_dice_index_list_.InternalSwap(&other->cost_dice_index_list_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationAttack::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationAttack

// repeated uint32 cost_dice_index_list = 8;
int GCGOperationAttack::cost_dice_index_list_size() const {
  return cost_dice_index_list_.size();
}
void GCGOperationAttack::clear_cost_dice_index_list() {
  cost_dice_index_list_.Clear();
}
::google::protobuf::uint32 GCGOperationAttack::cost_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationAttack.cost_dice_index_list)
  return cost_dice_index_list_.Get(index);
}
void GCGOperationAttack::set_cost_dice_index_list(int index, ::google::protobuf::uint32 value) {
  cost_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationAttack.cost_dice_index_list)
}
void GCGOperationAttack::add_cost_dice_index_list(::google::protobuf::uint32 value) {
  cost_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationAttack.cost_dice_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationAttack::cost_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationAttack.cost_dice_index_list)
  return cost_dice_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationAttack::mutable_cost_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationAttack.cost_dice_index_list)
  return &cost_dice_index_list_;
}

// uint32 skill_id = 2;
void GCGOperationAttack::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGOperationAttack::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationAttack.skill_id)
  return skill_id_;
}
void GCGOperationAttack::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationAttack.skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationPass::GCGOperationPass()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationPass)
}
GCGOperationPass::GCGOperationPass(const GCGOperationPass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationPass)
}

void GCGOperationPass::SharedCtor() {
  _cached_size_ = 0;
}

GCGOperationPass::~GCGOperationPass() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationPass)
  SharedDtor();
}

void GCGOperationPass::SharedDtor() {
}

void GCGOperationPass::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationPass::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationPass& GCGOperationPass::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationPass* GCGOperationPass::New(::google::protobuf::Arena* arena) const {
  GCGOperationPass* n = new GCGOperationPass;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationPass::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGOperationPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationPass)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationPass)
  return false;
#undef DO_
}

void GCGOperationPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationPass)
}

::google::protobuf::uint8* GCGOperationPass::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationPass)
  return target;
}

size_t GCGOperationPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationPass)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationPass)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationPass* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationPass>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationPass)
    MergeFrom(*source);
  }
}

void GCGOperationPass::MergeFrom(const GCGOperationPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGOperationPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationPass::CopyFrom(const GCGOperationPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationPass::IsInitialized() const {
  return true;
}

void GCGOperationPass::Swap(GCGOperationPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationPass::InternalSwap(GCGOperationPass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationPass::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationPass

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationPlayCard::kCardGuidFieldNumber;
const int GCGOperationPlayCard::kCostDiceIndexListFieldNumber;
const int GCGOperationPlayCard::kTargetCardGuidListFieldNumber;
const int GCGOperationPlayCard::kReplaceCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationPlayCard::GCGOperationPlayCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationPlayCard)
}
GCGOperationPlayCard::GCGOperationPlayCard(const GCGOperationPlayCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cost_dice_index_list_(from.cost_dice_index_list_),
      target_card_guid_list_(from.target_card_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&replace_card_guid_, &from.replace_card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_guid_) -
    reinterpret_cast<char*>(&replace_card_guid_)) + sizeof(card_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationPlayCard)
}

void GCGOperationPlayCard::SharedCtor() {
  ::memset(&replace_card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_guid_) -
      reinterpret_cast<char*>(&replace_card_guid_)) + sizeof(card_guid_));
  _cached_size_ = 0;
}

GCGOperationPlayCard::~GCGOperationPlayCard() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationPlayCard)
  SharedDtor();
}

void GCGOperationPlayCard::SharedDtor() {
}

void GCGOperationPlayCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationPlayCard::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationPlayCard& GCGOperationPlayCard::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationPlayCard* GCGOperationPlayCard::New(::google::protobuf::Arena* arena) const {
  GCGOperationPlayCard* n = new GCGOperationPlayCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationPlayCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationPlayCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cost_dice_index_list_.Clear();
  target_card_guid_list_.Clear();
  ::memset(&replace_card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_guid_) -
      reinterpret_cast<char*>(&replace_card_guid_)) + sizeof(card_guid_));
  _internal_metadata_.Clear();
}

bool GCGOperationPlayCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationPlayCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 cost_dice_index_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cost_dice_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_cost_dice_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 replace_card_guid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &replace_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 target_card_guid_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_target_card_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_target_card_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationPlayCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationPlayCard)
  return false;
#undef DO_
}

void GCGOperationPlayCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationPlayCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cost_dice_index_list = 4;
  if (this->cost_dice_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cost_dice_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->cost_dice_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->cost_dice_index_list(i), output);
  }

  // uint32 replace_card_guid = 8;
  if (this->replace_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->replace_card_guid(), output);
  }

  // repeated uint32 target_card_guid_list = 10;
  if (this->target_card_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _target_card_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->target_card_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->target_card_guid_list(i), output);
  }

  // uint32 card_guid = 12;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationPlayCard)
}

::google::protobuf::uint8* GCGOperationPlayCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationPlayCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cost_dice_index_list = 4;
  if (this->cost_dice_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _cost_dice_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->cost_dice_index_list_, target);
  }

  // uint32 replace_card_guid = 8;
  if (this->replace_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->replace_card_guid(), target);
  }

  // repeated uint32 target_card_guid_list = 10;
  if (this->target_card_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _target_card_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->target_card_guid_list_, target);
  }

  // uint32 card_guid = 12;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationPlayCard)
  return target;
}

size_t GCGOperationPlayCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationPlayCard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 cost_dice_index_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cost_dice_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cost_dice_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 target_card_guid_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->target_card_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _target_card_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 replace_card_guid = 8;
  if (this->replace_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->replace_card_guid());
  }

  // uint32 card_guid = 12;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationPlayCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationPlayCard)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationPlayCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationPlayCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationPlayCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationPlayCard)
    MergeFrom(*source);
  }
}

void GCGOperationPlayCard::MergeFrom(const GCGOperationPlayCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationPlayCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cost_dice_index_list_.MergeFrom(from.cost_dice_index_list_);
  target_card_guid_list_.MergeFrom(from.target_card_guid_list_);
  if (from.replace_card_guid() != 0) {
    set_replace_card_guid(from.replace_card_guid());
  }
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
}

void GCGOperationPlayCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationPlayCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationPlayCard::CopyFrom(const GCGOperationPlayCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationPlayCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationPlayCard::IsInitialized() const {
  return true;
}

void GCGOperationPlayCard::Swap(GCGOperationPlayCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationPlayCard::InternalSwap(GCGOperationPlayCard* other) {
  using std::swap;
  cost_dice_index_list_.InternalSwap(&other->cost_dice_index_list_);
  target_card_guid_list_.InternalSwap(&other->target_card_guid_list_);
  swap(replace_card_guid_, other->replace_card_guid_);
  swap(card_guid_, other->card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationPlayCard::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationPlayCard

// uint32 card_guid = 12;
void GCGOperationPlayCard::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGOperationPlayCard::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.card_guid)
  return card_guid_;
}
void GCGOperationPlayCard::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.card_guid)
}

// repeated uint32 cost_dice_index_list = 4;
int GCGOperationPlayCard::cost_dice_index_list_size() const {
  return cost_dice_index_list_.size();
}
void GCGOperationPlayCard::clear_cost_dice_index_list() {
  cost_dice_index_list_.Clear();
}
::google::protobuf::uint32 GCGOperationPlayCard::cost_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.cost_dice_index_list)
  return cost_dice_index_list_.Get(index);
}
void GCGOperationPlayCard::set_cost_dice_index_list(int index, ::google::protobuf::uint32 value) {
  cost_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.cost_dice_index_list)
}
void GCGOperationPlayCard::add_cost_dice_index_list(::google::protobuf::uint32 value) {
  cost_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationPlayCard.cost_dice_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationPlayCard::cost_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationPlayCard.cost_dice_index_list)
  return cost_dice_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationPlayCard::mutable_cost_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationPlayCard.cost_dice_index_list)
  return &cost_dice_index_list_;
}

// repeated uint32 target_card_guid_list = 10;
int GCGOperationPlayCard::target_card_guid_list_size() const {
  return target_card_guid_list_.size();
}
void GCGOperationPlayCard::clear_target_card_guid_list() {
  target_card_guid_list_.Clear();
}
::google::protobuf::uint32 GCGOperationPlayCard::target_card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.target_card_guid_list)
  return target_card_guid_list_.Get(index);
}
void GCGOperationPlayCard::set_target_card_guid_list(int index, ::google::protobuf::uint32 value) {
  target_card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.target_card_guid_list)
}
void GCGOperationPlayCard::add_target_card_guid_list(::google::protobuf::uint32 value) {
  target_card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationPlayCard.target_card_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationPlayCard::target_card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationPlayCard.target_card_guid_list)
  return target_card_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationPlayCard::mutable_target_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationPlayCard.target_card_guid_list)
  return &target_card_guid_list_;
}

// uint32 replace_card_guid = 8;
void GCGOperationPlayCard::clear_replace_card_guid() {
  replace_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGOperationPlayCard::replace_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.replace_card_guid)
  return replace_card_guid_;
}
void GCGOperationPlayCard::set_replace_card_guid(::google::protobuf::uint32 value) {
  
  replace_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.replace_card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationReboot::kCostCardGuidListFieldNumber;
const int GCGOperationReboot::kDiceIndexListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationReboot::GCGOperationReboot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationReboot)
}
GCGOperationReboot::GCGOperationReboot(const GCGOperationReboot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dice_index_list_(from.dice_index_list_),
      cost_card_guid_list_(from.cost_card_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationReboot)
}

void GCGOperationReboot::SharedCtor() {
  _cached_size_ = 0;
}

GCGOperationReboot::~GCGOperationReboot() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationReboot)
  SharedDtor();
}

void GCGOperationReboot::SharedDtor() {
}

void GCGOperationReboot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationReboot::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationReboot& GCGOperationReboot::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationReboot* GCGOperationReboot::New(::google::protobuf::Arena* arena) const {
  GCGOperationReboot* n = new GCGOperationReboot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationReboot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationReboot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dice_index_list_.Clear();
  cost_card_guid_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGOperationReboot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationReboot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dice_index_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dice_index_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_dice_index_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 cost_card_guid_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cost_card_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_cost_card_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationReboot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationReboot)
  return false;
#undef DO_
}

void GCGOperationReboot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationReboot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dice_index_list = 6;
  if (this->dice_index_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dice_index_list_cached_byte_size_));
  }
  for (int i = 0, n = this->dice_index_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->dice_index_list(i), output);
  }

  // repeated uint32 cost_card_guid_list = 7;
  if (this->cost_card_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _cost_card_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->cost_card_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->cost_card_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationReboot)
}

::google::protobuf::uint8* GCGOperationReboot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationReboot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dice_index_list = 6;
  if (this->dice_index_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _dice_index_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->dice_index_list_, target);
  }

  // repeated uint32 cost_card_guid_list = 7;
  if (this->cost_card_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _cost_card_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->cost_card_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationReboot)
  return target;
}

size_t GCGOperationReboot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationReboot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 dice_index_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->dice_index_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dice_index_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 cost_card_guid_list = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->cost_card_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cost_card_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationReboot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationReboot)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationReboot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationReboot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationReboot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationReboot)
    MergeFrom(*source);
  }
}

void GCGOperationReboot::MergeFrom(const GCGOperationReboot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationReboot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dice_index_list_.MergeFrom(from.dice_index_list_);
  cost_card_guid_list_.MergeFrom(from.cost_card_guid_list_);
}

void GCGOperationReboot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationReboot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationReboot::CopyFrom(const GCGOperationReboot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationReboot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationReboot::IsInitialized() const {
  return true;
}

void GCGOperationReboot::Swap(GCGOperationReboot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationReboot::InternalSwap(GCGOperationReboot* other) {
  using std::swap;
  dice_index_list_.InternalSwap(&other->dice_index_list_);
  cost_card_guid_list_.InternalSwap(&other->cost_card_guid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationReboot::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationReboot

// repeated uint32 cost_card_guid_list = 7;
int GCGOperationReboot::cost_card_guid_list_size() const {
  return cost_card_guid_list_.size();
}
void GCGOperationReboot::clear_cost_card_guid_list() {
  cost_card_guid_list_.Clear();
}
::google::protobuf::uint32 GCGOperationReboot::cost_card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReboot.cost_card_guid_list)
  return cost_card_guid_list_.Get(index);
}
void GCGOperationReboot::set_cost_card_guid_list(int index, ::google::protobuf::uint32 value) {
  cost_card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationReboot.cost_card_guid_list)
}
void GCGOperationReboot::add_cost_card_guid_list(::google::protobuf::uint32 value) {
  cost_card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationReboot.cost_card_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationReboot::cost_card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReboot.cost_card_guid_list)
  return cost_card_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationReboot::mutable_cost_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReboot.cost_card_guid_list)
  return &cost_card_guid_list_;
}

// repeated uint32 dice_index_list = 6;
int GCGOperationReboot::dice_index_list_size() const {
  return dice_index_list_.size();
}
void GCGOperationReboot::clear_dice_index_list() {
  dice_index_list_.Clear();
}
::google::protobuf::uint32 GCGOperationReboot::dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReboot.dice_index_list)
  return dice_index_list_.Get(index);
}
void GCGOperationReboot::set_dice_index_list(int index, ::google::protobuf::uint32 value) {
  dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationReboot.dice_index_list)
}
void GCGOperationReboot::add_dice_index_list(::google::protobuf::uint32 value) {
  dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationReboot.dice_index_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationReboot::dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReboot.dice_index_list)
  return dice_index_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationReboot::mutable_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReboot.dice_index_list)
  return &dice_index_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationSurrender::GCGOperationSurrender()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationSurrender)
}
GCGOperationSurrender::GCGOperationSurrender(const GCGOperationSurrender& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationSurrender)
}

void GCGOperationSurrender::SharedCtor() {
  _cached_size_ = 0;
}

GCGOperationSurrender::~GCGOperationSurrender() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationSurrender)
  SharedDtor();
}

void GCGOperationSurrender::SharedDtor() {
}

void GCGOperationSurrender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationSurrender::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationSurrender& GCGOperationSurrender::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationSurrender* GCGOperationSurrender::New(::google::protobuf::Arena* arena) const {
  GCGOperationSurrender* n = new GCGOperationSurrender;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationSurrender::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationSurrender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGOperationSurrender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationSurrender)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationSurrender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationSurrender)
  return false;
#undef DO_
}

void GCGOperationSurrender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationSurrender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationSurrender)
}

::google::protobuf::uint8* GCGOperationSurrender::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationSurrender)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationSurrender)
  return target;
}

size_t GCGOperationSurrender::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationSurrender)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationSurrender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationSurrender)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationSurrender* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationSurrender>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationSurrender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationSurrender)
    MergeFrom(*source);
  }
}

void GCGOperationSurrender::MergeFrom(const GCGOperationSurrender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationSurrender)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGOperationSurrender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationSurrender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationSurrender::CopyFrom(const GCGOperationSurrender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationSurrender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationSurrender::IsInitialized() const {
  return true;
}

void GCGOperationSurrender::Swap(GCGOperationSurrender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationSurrender::InternalSwap(GCGOperationSurrender* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationSurrender::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationSurrender

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperation::kOpRedrawFieldNumber;
const int GCGOperation::kOpSelectOnStageFieldNumber;
const int GCGOperation::kOpRerollFieldNumber;
const int GCGOperation::kOpAttackFieldNumber;
const int GCGOperation::kOpPassFieldNumber;
const int GCGOperation::kOpPlayCardFieldNumber;
const int GCGOperation::kOpRebootFieldNumber;
const int GCGOperation::kOpSurrenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperation::GCGOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperation)
}
GCGOperation::GCGOperation(const GCGOperation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_op();
  switch (from.op_case()) {
    case kOpRedraw: {
      mutable_op_redraw()->::proto::GCGOperationRedraw::MergeFrom(from.op_redraw());
      break;
    }
    case kOpSelectOnStage: {
      mutable_op_select_on_stage()->::proto::GCGOperationOnStageSelect::MergeFrom(from.op_select_on_stage());
      break;
    }
    case kOpReroll: {
      mutable_op_reroll()->::proto::GCGOperationReroll::MergeFrom(from.op_reroll());
      break;
    }
    case kOpAttack: {
      mutable_op_attack()->::proto::GCGOperationAttack::MergeFrom(from.op_attack());
      break;
    }
    case kOpPass: {
      mutable_op_pass()->::proto::GCGOperationPass::MergeFrom(from.op_pass());
      break;
    }
    case kOpPlayCard: {
      mutable_op_play_card()->::proto::GCGOperationPlayCard::MergeFrom(from.op_play_card());
      break;
    }
    case kOpReboot: {
      mutable_op_reboot()->::proto::GCGOperationReboot::MergeFrom(from.op_reboot());
      break;
    }
    case kOpSurrender: {
      mutable_op_surrender()->::proto::GCGOperationSurrender::MergeFrom(from.op_surrender());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperation)
}

void GCGOperation::SharedCtor() {
  clear_has_op();
  _cached_size_ = 0;
}

GCGOperation::~GCGOperation() {
  // @@protoc_insertion_point(destructor:proto.GCGOperation)
  SharedDtor();
}

void GCGOperation::SharedDtor() {
  if (has_op()) {
    clear_op();
  }
}

void GCGOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperation::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperation& GCGOperation::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperation* GCGOperation::New(::google::protobuf::Arena* arena) const {
  GCGOperation* n = new GCGOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:proto.GCGOperation)
  switch (op_case()) {
    case kOpRedraw: {
      delete op_.op_redraw_;
      break;
    }
    case kOpSelectOnStage: {
      delete op_.op_select_on_stage_;
      break;
    }
    case kOpReroll: {
      delete op_.op_reroll_;
      break;
    }
    case kOpAttack: {
      delete op_.op_attack_;
      break;
    }
    case kOpPass: {
      delete op_.op_pass_;
      break;
    }
    case kOpPlayCard: {
      delete op_.op_play_card_;
      break;
    }
    case kOpReboot: {
      delete op_.op_reboot_;
      break;
    }
    case kOpSurrender: {
      delete op_.op_surrender_;
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void GCGOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear();
}

bool GCGOperation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGOperationSurrender op_surrender = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_surrender()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperationPlayCard op_play_card = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_play_card()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperationOnStageSelect op_select_on_stage = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_select_on_stage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperationReboot op_reboot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_reboot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperationReroll op_reroll = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_reroll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperationRedraw op_redraw = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_redraw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperationAttack op_attack = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_attack()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperationPass op_pass = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op_pass()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperation)
  return false;
#undef DO_
}

void GCGOperation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGOperationSurrender op_surrender = 1;
  if (has_op_surrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *op_.op_surrender_, output);
  }

  // .proto.GCGOperationPlayCard op_play_card = 2;
  if (has_op_play_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *op_.op_play_card_, output);
  }

  // .proto.GCGOperationOnStageSelect op_select_on_stage = 4;
  if (has_op_select_on_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *op_.op_select_on_stage_, output);
  }

  // .proto.GCGOperationReboot op_reboot = 5;
  if (has_op_reboot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *op_.op_reboot_, output);
  }

  // .proto.GCGOperationReroll op_reroll = 9;
  if (has_op_reroll()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *op_.op_reroll_, output);
  }

  // .proto.GCGOperationRedraw op_redraw = 10;
  if (has_op_redraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *op_.op_redraw_, output);
  }

  // .proto.GCGOperationAttack op_attack = 11;
  if (has_op_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *op_.op_attack_, output);
  }

  // .proto.GCGOperationPass op_pass = 15;
  if (has_op_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *op_.op_pass_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperation)
}

::google::protobuf::uint8* GCGOperation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGOperationSurrender op_surrender = 1;
  if (has_op_surrender()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *op_.op_surrender_, deterministic, target);
  }

  // .proto.GCGOperationPlayCard op_play_card = 2;
  if (has_op_play_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *op_.op_play_card_, deterministic, target);
  }

  // .proto.GCGOperationOnStageSelect op_select_on_stage = 4;
  if (has_op_select_on_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *op_.op_select_on_stage_, deterministic, target);
  }

  // .proto.GCGOperationReboot op_reboot = 5;
  if (has_op_reboot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *op_.op_reboot_, deterministic, target);
  }

  // .proto.GCGOperationReroll op_reroll = 9;
  if (has_op_reroll()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *op_.op_reroll_, deterministic, target);
  }

  // .proto.GCGOperationRedraw op_redraw = 10;
  if (has_op_redraw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *op_.op_redraw_, deterministic, target);
  }

  // .proto.GCGOperationAttack op_attack = 11;
  if (has_op_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *op_.op_attack_, deterministic, target);
  }

  // .proto.GCGOperationPass op_pass = 15;
  if (has_op_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *op_.op_pass_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperation)
  return target;
}

size_t GCGOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (op_case()) {
    // .proto.GCGOperationRedraw op_redraw = 10;
    case kOpRedraw: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_redraw_);
      break;
    }
    // .proto.GCGOperationOnStageSelect op_select_on_stage = 4;
    case kOpSelectOnStage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_select_on_stage_);
      break;
    }
    // .proto.GCGOperationReroll op_reroll = 9;
    case kOpReroll: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_reroll_);
      break;
    }
    // .proto.GCGOperationAttack op_attack = 11;
    case kOpAttack: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_attack_);
      break;
    }
    // .proto.GCGOperationPass op_pass = 15;
    case kOpPass: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_pass_);
      break;
    }
    // .proto.GCGOperationPlayCard op_play_card = 2;
    case kOpPlayCard: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_play_card_);
      break;
    }
    // .proto.GCGOperationReboot op_reboot = 5;
    case kOpReboot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_reboot_);
      break;
    }
    // .proto.GCGOperationSurrender op_surrender = 1;
    case kOpSurrender: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *op_.op_surrender_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperation)
    MergeFrom(*source);
  }
}

void GCGOperation::MergeFrom(const GCGOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_case()) {
    case kOpRedraw: {
      mutable_op_redraw()->::proto::GCGOperationRedraw::MergeFrom(from.op_redraw());
      break;
    }
    case kOpSelectOnStage: {
      mutable_op_select_on_stage()->::proto::GCGOperationOnStageSelect::MergeFrom(from.op_select_on_stage());
      break;
    }
    case kOpReroll: {
      mutable_op_reroll()->::proto::GCGOperationReroll::MergeFrom(from.op_reroll());
      break;
    }
    case kOpAttack: {
      mutable_op_attack()->::proto::GCGOperationAttack::MergeFrom(from.op_attack());
      break;
    }
    case kOpPass: {
      mutable_op_pass()->::proto::GCGOperationPass::MergeFrom(from.op_pass());
      break;
    }
    case kOpPlayCard: {
      mutable_op_play_card()->::proto::GCGOperationPlayCard::MergeFrom(from.op_play_card());
      break;
    }
    case kOpReboot: {
      mutable_op_reboot()->::proto::GCGOperationReboot::MergeFrom(from.op_reboot());
      break;
    }
    case kOpSurrender: {
      mutable_op_surrender()->::proto::GCGOperationSurrender::MergeFrom(from.op_surrender());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
}

void GCGOperation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperation::CopyFrom(const GCGOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperation::IsInitialized() const {
  return true;
}

void GCGOperation::Swap(GCGOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperation::InternalSwap(GCGOperation* other) {
  using std::swap;
  swap(op_, other->op_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperation::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperation

// .proto.GCGOperationRedraw op_redraw = 10;
bool GCGOperation::has_op_redraw() const {
  return op_case() == kOpRedraw;
}
void GCGOperation::set_has_op_redraw() {
  _oneof_case_[0] = kOpRedraw;
}
void GCGOperation::clear_op_redraw() {
  if (has_op_redraw()) {
    delete op_.op_redraw_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationRedraw& GCGOperation::op_redraw() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_redraw)
  return has_op_redraw()
      ? *op_.op_redraw_
      : ::proto::GCGOperationRedraw::default_instance();
}
::proto::GCGOperationRedraw* GCGOperation::mutable_op_redraw() {
  if (!has_op_redraw()) {
    clear_op();
    set_has_op_redraw();
    op_.op_redraw_ = new ::proto::GCGOperationRedraw;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_redraw)
  return op_.op_redraw_;
}
::proto::GCGOperationRedraw* GCGOperation::release_op_redraw() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_redraw)
  if (has_op_redraw()) {
    clear_has_op();
    ::proto::GCGOperationRedraw* temp = op_.op_redraw_;
    op_.op_redraw_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_redraw(::proto::GCGOperationRedraw* op_redraw) {
  clear_op();
  if (op_redraw) {
    set_has_op_redraw();
    op_.op_redraw_ = op_redraw;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_redraw)
}

// .proto.GCGOperationOnStageSelect op_select_on_stage = 4;
bool GCGOperation::has_op_select_on_stage() const {
  return op_case() == kOpSelectOnStage;
}
void GCGOperation::set_has_op_select_on_stage() {
  _oneof_case_[0] = kOpSelectOnStage;
}
void GCGOperation::clear_op_select_on_stage() {
  if (has_op_select_on_stage()) {
    delete op_.op_select_on_stage_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationOnStageSelect& GCGOperation::op_select_on_stage() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_select_on_stage)
  return has_op_select_on_stage()
      ? *op_.op_select_on_stage_
      : ::proto::GCGOperationOnStageSelect::default_instance();
}
::proto::GCGOperationOnStageSelect* GCGOperation::mutable_op_select_on_stage() {
  if (!has_op_select_on_stage()) {
    clear_op();
    set_has_op_select_on_stage();
    op_.op_select_on_stage_ = new ::proto::GCGOperationOnStageSelect;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_select_on_stage)
  return op_.op_select_on_stage_;
}
::proto::GCGOperationOnStageSelect* GCGOperation::release_op_select_on_stage() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_select_on_stage)
  if (has_op_select_on_stage()) {
    clear_has_op();
    ::proto::GCGOperationOnStageSelect* temp = op_.op_select_on_stage_;
    op_.op_select_on_stage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_select_on_stage(::proto::GCGOperationOnStageSelect* op_select_on_stage) {
  clear_op();
  if (op_select_on_stage) {
    set_has_op_select_on_stage();
    op_.op_select_on_stage_ = op_select_on_stage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_select_on_stage)
}

// .proto.GCGOperationReroll op_reroll = 9;
bool GCGOperation::has_op_reroll() const {
  return op_case() == kOpReroll;
}
void GCGOperation::set_has_op_reroll() {
  _oneof_case_[0] = kOpReroll;
}
void GCGOperation::clear_op_reroll() {
  if (has_op_reroll()) {
    delete op_.op_reroll_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationReroll& GCGOperation::op_reroll() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_reroll)
  return has_op_reroll()
      ? *op_.op_reroll_
      : ::proto::GCGOperationReroll::default_instance();
}
::proto::GCGOperationReroll* GCGOperation::mutable_op_reroll() {
  if (!has_op_reroll()) {
    clear_op();
    set_has_op_reroll();
    op_.op_reroll_ = new ::proto::GCGOperationReroll;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_reroll)
  return op_.op_reroll_;
}
::proto::GCGOperationReroll* GCGOperation::release_op_reroll() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_reroll)
  if (has_op_reroll()) {
    clear_has_op();
    ::proto::GCGOperationReroll* temp = op_.op_reroll_;
    op_.op_reroll_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_reroll(::proto::GCGOperationReroll* op_reroll) {
  clear_op();
  if (op_reroll) {
    set_has_op_reroll();
    op_.op_reroll_ = op_reroll;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_reroll)
}

// .proto.GCGOperationAttack op_attack = 11;
bool GCGOperation::has_op_attack() const {
  return op_case() == kOpAttack;
}
void GCGOperation::set_has_op_attack() {
  _oneof_case_[0] = kOpAttack;
}
void GCGOperation::clear_op_attack() {
  if (has_op_attack()) {
    delete op_.op_attack_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationAttack& GCGOperation::op_attack() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_attack)
  return has_op_attack()
      ? *op_.op_attack_
      : ::proto::GCGOperationAttack::default_instance();
}
::proto::GCGOperationAttack* GCGOperation::mutable_op_attack() {
  if (!has_op_attack()) {
    clear_op();
    set_has_op_attack();
    op_.op_attack_ = new ::proto::GCGOperationAttack;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_attack)
  return op_.op_attack_;
}
::proto::GCGOperationAttack* GCGOperation::release_op_attack() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_attack)
  if (has_op_attack()) {
    clear_has_op();
    ::proto::GCGOperationAttack* temp = op_.op_attack_;
    op_.op_attack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_attack(::proto::GCGOperationAttack* op_attack) {
  clear_op();
  if (op_attack) {
    set_has_op_attack();
    op_.op_attack_ = op_attack;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_attack)
}

// .proto.GCGOperationPass op_pass = 15;
bool GCGOperation::has_op_pass() const {
  return op_case() == kOpPass;
}
void GCGOperation::set_has_op_pass() {
  _oneof_case_[0] = kOpPass;
}
void GCGOperation::clear_op_pass() {
  if (has_op_pass()) {
    delete op_.op_pass_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationPass& GCGOperation::op_pass() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_pass)
  return has_op_pass()
      ? *op_.op_pass_
      : ::proto::GCGOperationPass::default_instance();
}
::proto::GCGOperationPass* GCGOperation::mutable_op_pass() {
  if (!has_op_pass()) {
    clear_op();
    set_has_op_pass();
    op_.op_pass_ = new ::proto::GCGOperationPass;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_pass)
  return op_.op_pass_;
}
::proto::GCGOperationPass* GCGOperation::release_op_pass() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_pass)
  if (has_op_pass()) {
    clear_has_op();
    ::proto::GCGOperationPass* temp = op_.op_pass_;
    op_.op_pass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_pass(::proto::GCGOperationPass* op_pass) {
  clear_op();
  if (op_pass) {
    set_has_op_pass();
    op_.op_pass_ = op_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_pass)
}

// .proto.GCGOperationPlayCard op_play_card = 2;
bool GCGOperation::has_op_play_card() const {
  return op_case() == kOpPlayCard;
}
void GCGOperation::set_has_op_play_card() {
  _oneof_case_[0] = kOpPlayCard;
}
void GCGOperation::clear_op_play_card() {
  if (has_op_play_card()) {
    delete op_.op_play_card_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationPlayCard& GCGOperation::op_play_card() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_play_card)
  return has_op_play_card()
      ? *op_.op_play_card_
      : ::proto::GCGOperationPlayCard::default_instance();
}
::proto::GCGOperationPlayCard* GCGOperation::mutable_op_play_card() {
  if (!has_op_play_card()) {
    clear_op();
    set_has_op_play_card();
    op_.op_play_card_ = new ::proto::GCGOperationPlayCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_play_card)
  return op_.op_play_card_;
}
::proto::GCGOperationPlayCard* GCGOperation::release_op_play_card() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_play_card)
  if (has_op_play_card()) {
    clear_has_op();
    ::proto::GCGOperationPlayCard* temp = op_.op_play_card_;
    op_.op_play_card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_play_card(::proto::GCGOperationPlayCard* op_play_card) {
  clear_op();
  if (op_play_card) {
    set_has_op_play_card();
    op_.op_play_card_ = op_play_card;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_play_card)
}

// .proto.GCGOperationReboot op_reboot = 5;
bool GCGOperation::has_op_reboot() const {
  return op_case() == kOpReboot;
}
void GCGOperation::set_has_op_reboot() {
  _oneof_case_[0] = kOpReboot;
}
void GCGOperation::clear_op_reboot() {
  if (has_op_reboot()) {
    delete op_.op_reboot_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationReboot& GCGOperation::op_reboot() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_reboot)
  return has_op_reboot()
      ? *op_.op_reboot_
      : ::proto::GCGOperationReboot::default_instance();
}
::proto::GCGOperationReboot* GCGOperation::mutable_op_reboot() {
  if (!has_op_reboot()) {
    clear_op();
    set_has_op_reboot();
    op_.op_reboot_ = new ::proto::GCGOperationReboot;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_reboot)
  return op_.op_reboot_;
}
::proto::GCGOperationReboot* GCGOperation::release_op_reboot() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_reboot)
  if (has_op_reboot()) {
    clear_has_op();
    ::proto::GCGOperationReboot* temp = op_.op_reboot_;
    op_.op_reboot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_reboot(::proto::GCGOperationReboot* op_reboot) {
  clear_op();
  if (op_reboot) {
    set_has_op_reboot();
    op_.op_reboot_ = op_reboot;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_reboot)
}

// .proto.GCGOperationSurrender op_surrender = 1;
bool GCGOperation::has_op_surrender() const {
  return op_case() == kOpSurrender;
}
void GCGOperation::set_has_op_surrender() {
  _oneof_case_[0] = kOpSurrender;
}
void GCGOperation::clear_op_surrender() {
  if (has_op_surrender()) {
    delete op_.op_surrender_;
    clear_has_op();
  }
}
 const ::proto::GCGOperationSurrender& GCGOperation::op_surrender() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_surrender)
  return has_op_surrender()
      ? *op_.op_surrender_
      : ::proto::GCGOperationSurrender::default_instance();
}
::proto::GCGOperationSurrender* GCGOperation::mutable_op_surrender() {
  if (!has_op_surrender()) {
    clear_op();
    set_has_op_surrender();
    op_.op_surrender_ = new ::proto::GCGOperationSurrender;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_surrender)
  return op_.op_surrender_;
}
::proto::GCGOperationSurrender* GCGOperation::release_op_surrender() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_surrender)
  if (has_op_surrender()) {
    clear_has_op();
    ::proto::GCGOperationSurrender* temp = op_.op_surrender_;
    op_.op_surrender_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GCGOperation::set_allocated_op_surrender(::proto::GCGOperationSurrender* op_surrender) {
  clear_op();
  if (op_surrender) {
    set_has_op_surrender();
    op_.op_surrender_ = op_surrender;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_surrender)
}

bool GCGOperation::has_op() const {
  return op_case() != OP_NOT_SET;
}
void GCGOperation::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
GCGOperation::OpCase GCGOperation::op_case() const {
  return GCGOperation::OpCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGReplayOperationData::kControllerIdFieldNumber;
const int GCGReplayOperationData::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGReplayOperationData::GCGReplayOperationData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGReplayOperationData)
}
GCGReplayOperationData::GCGReplayOperationData(const GCGReplayOperationData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_op()) {
    op_ = new ::proto::GCGOperation(*from.op_);
  } else {
    op_ = NULL;
  }
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGReplayOperationData)
}

void GCGReplayOperationData::SharedCtor() {
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&op_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGReplayOperationData::~GCGReplayOperationData() {
  // @@protoc_insertion_point(destructor:proto.GCGReplayOperationData)
  SharedDtor();
}

void GCGReplayOperationData::SharedDtor() {
  if (this != internal_default_instance()) delete op_;
}

void GCGReplayOperationData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGReplayOperationData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGReplayOperationData& GCGReplayOperationData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGReplayOperationData* GCGReplayOperationData::New(::google::protobuf::Arena* arena) const {
  GCGReplayOperationData* n = new GCGReplayOperationData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGReplayOperationData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGReplayOperationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && op_ != NULL) {
    delete op_;
  }
  op_ = NULL;
  controller_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGReplayOperationData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGReplayOperationData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGOperation op = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGReplayOperationData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGReplayOperationData)
  return false;
#undef DO_
}

void GCGReplayOperationData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGReplayOperationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGOperation op = 5;
  if (this->has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->op_, output);
  }

  // uint32 controller_id = 8;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGReplayOperationData)
}

::google::protobuf::uint8* GCGReplayOperationData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGReplayOperationData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGOperation op = 5;
  if (this->has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->op_, deterministic, target);
  }

  // uint32 controller_id = 8;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGReplayOperationData)
  return target;
}

size_t GCGReplayOperationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGReplayOperationData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGOperation op = 5;
  if (this->has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_);
  }

  // uint32 controller_id = 8;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGReplayOperationData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGReplayOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGReplayOperationData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGReplayOperationData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGReplayOperationData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGReplayOperationData)
    MergeFrom(*source);
  }
}

void GCGReplayOperationData::MergeFrom(const GCGReplayOperationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGReplayOperationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    mutable_op()->::proto::GCGOperation::MergeFrom(from.op());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGReplayOperationData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGReplayOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGReplayOperationData::CopyFrom(const GCGReplayOperationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGReplayOperationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGReplayOperationData::IsInitialized() const {
  return true;
}

void GCGReplayOperationData::Swap(GCGReplayOperationData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGReplayOperationData::InternalSwap(GCGReplayOperationData* other) {
  using std::swap;
  swap(op_, other->op_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGReplayOperationData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGReplayOperationData

// uint32 controller_id = 8;
void GCGReplayOperationData::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGReplayOperationData::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGReplayOperationData.controller_id)
  return controller_id_;
}
void GCGReplayOperationData::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGReplayOperationData.controller_id)
}

// .proto.GCGOperation op = 5;
bool GCGReplayOperationData::has_op() const {
  return this != internal_default_instance() && op_ != NULL;
}
void GCGReplayOperationData::clear_op() {
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
}
const ::proto::GCGOperation& GCGReplayOperationData::op() const {
  const ::proto::GCGOperation* p = op_;
  // @@protoc_insertion_point(field_get:proto.GCGReplayOperationData.op)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGOperation*>(
      &::proto::_GCGOperation_default_instance_);
}
::proto::GCGOperation* GCGReplayOperationData::mutable_op() {
  
  if (op_ == NULL) {
    op_ = new ::proto::GCGOperation;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGReplayOperationData.op)
  return op_;
}
::proto::GCGOperation* GCGReplayOperationData::release_op() {
  // @@protoc_insertion_point(field_release:proto.GCGReplayOperationData.op)
  
  ::proto::GCGOperation* temp = op_;
  op_ = NULL;
  return temp;
}
void GCGReplayOperationData::set_allocated_op(::proto::GCGOperation* op) {
  delete op_;
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGReplayOperationData.op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGReplayControllerData::kControllerIdFieldNumber;
const int GCGReplayControllerData::kCardIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGReplayControllerData::GCGReplayControllerData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGReplayControllerData)
}
GCGReplayControllerData::GCGReplayControllerData(const GCGReplayControllerData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_id_list_(from.card_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGReplayControllerData)
}

void GCGReplayControllerData::SharedCtor() {
  controller_id_ = 0u;
  _cached_size_ = 0;
}

GCGReplayControllerData::~GCGReplayControllerData() {
  // @@protoc_insertion_point(destructor:proto.GCGReplayControllerData)
  SharedDtor();
}

void GCGReplayControllerData::SharedDtor() {
}

void GCGReplayControllerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGReplayControllerData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGReplayControllerData& GCGReplayControllerData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGReplayControllerData* GCGReplayControllerData::New(::google::protobuf::Arena* arena) const {
  GCGReplayControllerData* n = new GCGReplayControllerData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGReplayControllerData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGReplayControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_id_list_.Clear();
  controller_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGReplayControllerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGReplayControllerData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_card_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGReplayControllerData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGReplayControllerData)
  return false;
#undef DO_
}

void GCGReplayControllerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGReplayControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_id_list = 5;
  if (this->card_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_id_list(i), output);
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGReplayControllerData)
}

::google::protobuf::uint8* GCGReplayControllerData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGReplayControllerData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_id_list = 5;
  if (this->card_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_id_list_, target);
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGReplayControllerData)
  return target;
}

size_t GCGReplayControllerData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGReplayControllerData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_id_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGReplayControllerData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGReplayControllerData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGReplayControllerData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGReplayControllerData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGReplayControllerData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGReplayControllerData)
    MergeFrom(*source);
  }
}

void GCGReplayControllerData::MergeFrom(const GCGReplayControllerData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGReplayControllerData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_id_list_.MergeFrom(from.card_id_list_);
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGReplayControllerData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGReplayControllerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGReplayControllerData::CopyFrom(const GCGReplayControllerData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGReplayControllerData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGReplayControllerData::IsInitialized() const {
  return true;
}

void GCGReplayControllerData::Swap(GCGReplayControllerData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGReplayControllerData::InternalSwap(GCGReplayControllerData* other) {
  using std::swap;
  card_id_list_.InternalSwap(&other->card_id_list_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGReplayControllerData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGReplayControllerData

// uint32 controller_id = 13;
void GCGReplayControllerData::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGReplayControllerData::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGReplayControllerData.controller_id)
  return controller_id_;
}
void GCGReplayControllerData::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGReplayControllerData.controller_id)
}

// repeated uint32 card_id_list = 5;
int GCGReplayControllerData::card_id_list_size() const {
  return card_id_list_.size();
}
void GCGReplayControllerData::clear_card_id_list() {
  card_id_list_.Clear();
}
::google::protobuf::uint32 GCGReplayControllerData::card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGReplayControllerData.card_id_list)
  return card_id_list_.Get(index);
}
void GCGReplayControllerData::set_card_id_list(int index, ::google::protobuf::uint32 value) {
  card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGReplayControllerData.card_id_list)
}
void GCGReplayControllerData::add_card_id_list(::google::protobuf::uint32 value) {
  card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGReplayControllerData.card_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGReplayControllerData::card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGReplayControllerData.card_id_list)
  return card_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGReplayControllerData::mutable_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGReplayControllerData.card_id_list)
  return &card_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationReplay::kSeedFieldNumber;
const int GCGOperationReplay::kOperationDataListFieldNumber;
const int GCGOperationReplay::kControllerDataListFieldNumber;
const int GCGOperationReplay::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationReplay::GCGOperationReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationReplay)
}
GCGOperationReplay::GCGOperationReplay(const GCGOperationReplay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      operation_data_list_(from.operation_data_list_),
      controller_data_list_(from.controller_data_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&game_id_, &from.game_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&seed_) -
    reinterpret_cast<char*>(&game_id_)) + sizeof(seed_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationReplay)
}

void GCGOperationReplay::SharedCtor() {
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(seed_));
  _cached_size_ = 0;
}

GCGOperationReplay::~GCGOperationReplay() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationReplay)
  SharedDtor();
}

void GCGOperationReplay::SharedDtor() {
}

void GCGOperationReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationReplay::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationReplay& GCGOperationReplay::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationReplay* GCGOperationReplay::New(::google::protobuf::Arena* arena) const {
  GCGOperationReplay* n = new GCGOperationReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_data_list_.Clear();
  controller_data_list_.Clear();
  ::memset(&game_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&seed_) -
      reinterpret_cast<char*>(&game_id_)) + sizeof(seed_));
  _internal_metadata_.Clear();
}

bool GCGOperationReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 game_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGReplayOperationData operation_data_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operation_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 seed = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGReplayControllerData controller_data_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_controller_data_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationReplay)
  return false;
#undef DO_
}

void GCGOperationReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->game_id(), output);
  }

  // repeated .proto.GCGReplayOperationData operation_data_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_data_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->operation_data_list(static_cast<int>(i)), output);
  }

  // uint32 seed = 11;
  if (this->seed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->seed(), output);
  }

  // repeated .proto.GCGReplayControllerData controller_data_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controller_data_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->controller_data_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationReplay)
}

::google::protobuf::uint8* GCGOperationReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationReplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->game_id(), target);
  }

  // repeated .proto.GCGReplayOperationData operation_data_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->operation_data_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->operation_data_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 seed = 11;
  if (this->seed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->seed(), target);
  }

  // repeated .proto.GCGReplayControllerData controller_data_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->controller_data_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->controller_data_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationReplay)
  return target;
}

size_t GCGOperationReplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationReplay)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGReplayOperationData operation_data_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->operation_data_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operation_data_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGReplayControllerData controller_data_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->controller_data_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->controller_data_list(static_cast<int>(i)));
    }
  }

  // uint32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // uint32 seed = 11;
  if (this->seed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationReplay)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationReplay* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationReplay)
    MergeFrom(*source);
  }
}

void GCGOperationReplay::MergeFrom(const GCGOperationReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationReplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operation_data_list_.MergeFrom(from.operation_data_list_);
  controller_data_list_.MergeFrom(from.controller_data_list_);
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.seed() != 0) {
    set_seed(from.seed());
  }
}

void GCGOperationReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationReplay::CopyFrom(const GCGOperationReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationReplay::IsInitialized() const {
  return true;
}

void GCGOperationReplay::Swap(GCGOperationReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationReplay::InternalSwap(GCGOperationReplay* other) {
  using std::swap;
  operation_data_list_.InternalSwap(&other->operation_data_list_);
  controller_data_list_.InternalSwap(&other->controller_data_list_);
  swap(game_id_, other->game_id_);
  swap(seed_, other->seed_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationReplay::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationReplay

// uint32 seed = 11;
void GCGOperationReplay::clear_seed() {
  seed_ = 0u;
}
::google::protobuf::uint32 GCGOperationReplay::seed() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.seed)
  return seed_;
}
void GCGOperationReplay::set_seed(::google::protobuf::uint32 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReplay.seed)
}

// repeated .proto.GCGReplayOperationData operation_data_list = 9;
int GCGOperationReplay::operation_data_list_size() const {
  return operation_data_list_.size();
}
void GCGOperationReplay::clear_operation_data_list() {
  operation_data_list_.Clear();
}
const ::proto::GCGReplayOperationData& GCGOperationReplay::operation_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_.Get(index);
}
::proto::GCGReplayOperationData* GCGOperationReplay::mutable_operation_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_.Mutable(index);
}
::proto::GCGReplayOperationData* GCGOperationReplay::add_operation_data_list() {
  // @@protoc_insertion_point(field_add:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGReplayOperationData >*
GCGOperationReplay::mutable_operation_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReplay.operation_data_list)
  return &operation_data_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayOperationData >&
GCGOperationReplay::operation_data_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_;
}

// repeated .proto.GCGReplayControllerData controller_data_list = 13;
int GCGOperationReplay::controller_data_list_size() const {
  return controller_data_list_.size();
}
void GCGOperationReplay::clear_controller_data_list() {
  controller_data_list_.Clear();
}
const ::proto::GCGReplayControllerData& GCGOperationReplay::controller_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_.Get(index);
}
::proto::GCGReplayControllerData* GCGOperationReplay::mutable_controller_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_.Mutable(index);
}
::proto::GCGReplayControllerData* GCGOperationReplay::add_controller_data_list() {
  // @@protoc_insertion_point(field_add:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGReplayControllerData >*
GCGOperationReplay::mutable_controller_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReplay.controller_data_list)
  return &controller_data_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayControllerData >&
GCGOperationReplay::controller_data_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_;
}

// uint32 game_id = 1;
void GCGOperationReplay::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 GCGOperationReplay::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.game_id)
  return game_id_;
}
void GCGOperationReplay::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReplay.game_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGToken::kValueFieldNumber;
const int GCGToken::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGToken::GCGToken()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGToken)
}
GCGToken::GCGToken(const GCGToken& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGToken)
}

void GCGToken::SharedCtor() {
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _cached_size_ = 0;
}

GCGToken::~GCGToken() {
  // @@protoc_insertion_point(destructor:proto.GCGToken)
  SharedDtor();
}

void GCGToken::SharedDtor() {
}

void GCGToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGToken::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGToken& GCGToken::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGToken* GCGToken::New(::google::protobuf::Arena* arena) const {
  GCGToken* n = new GCGToken;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGToken::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool GCGToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGToken)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 key = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 value = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGToken)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGToken)
  return false;
#undef DO_
}

void GCGToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 4;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->key(), output);
  }

  // uint32 value = 11;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGToken)
}

::google::protobuf::uint8* GCGToken::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGToken)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 key = 4;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->key(), target);
  }

  // uint32 value = 11;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGToken)
  return target;
}

size_t GCGToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGToken)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 key = 4;
  if (this->key() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key());
  }

  // uint32 value = 11;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGToken::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGToken)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGToken* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGToken>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGToken)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGToken)
    MergeFrom(*source);
  }
}

void GCGToken::MergeFrom(const GCGToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void GCGToken::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGToken::CopyFrom(const GCGToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGToken::IsInitialized() const {
  return true;
}

void GCGToken::Swap(GCGToken* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGToken::InternalSwap(GCGToken* other) {
  using std::swap;
  swap(key_, other->key_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGToken::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGToken

// uint32 value = 11;
void GCGToken::clear_value() {
  value_ = 0u;
}
::google::protobuf::uint32 GCGToken::value() const {
  // @@protoc_insertion_point(field_get:proto.GCGToken.value)
  return value_;
}
void GCGToken::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGToken.value)
}

// uint32 key = 4;
void GCGToken::clear_key() {
  key_ = 0u;
}
::google::protobuf::uint32 GCGToken::key() const {
  // @@protoc_insertion_point(field_get:proto.GCGToken.key)
  return key_;
}
void GCGToken::set_key(::google::protobuf::uint32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGToken.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGCard::kIsShowFieldNumber;
const int GCGCard::kFaceTypeFieldNumber;
const int GCGCard::kIdFieldNumber;
const int GCGCard::kTokenListFieldNumber;
const int GCGCard::kSkillIdListFieldNumber;
const int GCGCard::kSkillLimitsListFieldNumber;
const int GCGCard::kGuidFieldNumber;
const int GCGCard::kTagListFieldNumber;
const int GCGCard::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGCard::GCGCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGCard)
}
GCGCard::GCGCard(const GCGCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      token_list_(from.token_list_),
      tag_list_(from.tag_list_),
      skill_limits_list_(from.skill_limits_list_),
      skill_id_list_(from.skill_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&face_type_, &from.face_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_show_) -
    reinterpret_cast<char*>(&face_type_)) + sizeof(is_show_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGCard)
}

void GCGCard::SharedCtor() {
  ::memset(&face_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_show_) -
      reinterpret_cast<char*>(&face_type_)) + sizeof(is_show_));
  _cached_size_ = 0;
}

GCGCard::~GCGCard() {
  // @@protoc_insertion_point(destructor:proto.GCGCard)
  SharedDtor();
}

void GCGCard::SharedDtor() {
}

void GCGCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGCard::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGCard& GCGCard::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGCard* GCGCard::New(::google::protobuf::Arena* arena) const {
  GCGCard* n = new GCGCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGCard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_list_.Clear();
  tag_list_.Clear();
  skill_limits_list_.Clear();
  skill_id_list_.Clear();
  ::memset(&face_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_show_) -
      reinterpret_cast<char*>(&face_type_)) + sizeof(is_show_));
  _internal_metadata_.Clear();
}

bool GCGCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGToken token_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tag_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tag_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_tag_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 face_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_limits_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 skill_id_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_skill_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_show = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 guid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGCard)
  return false;
#undef DO_
}

void GCGCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGToken token_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->token_list(static_cast<int>(i)), output);
  }

  // repeated uint32 tag_list = 3;
  if (this->tag_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tag_list_cached_byte_size_));
  }
  for (int i = 0, n = this->tag_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->tag_list(i), output);
  }

  // uint32 face_type = 5;
  if (this->face_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->face_type(), output);
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->id(), output);
  }

  // uint32 controller_id = 7;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->controller_id(), output);
  }

  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_limits_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skill_limits_list(static_cast<int>(i)), output);
  }

  // repeated uint32 skill_id_list = 11;
  if (this->skill_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_id_list(i), output);
  }

  // bool is_show = 14;
  if (this->is_show() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_show(), output);
  }

  // uint32 guid = 15;
  if (this->guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGCard)
}

::google::protobuf::uint8* GCGCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGToken token_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->token_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 tag_list = 3;
  if (this->tag_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _tag_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tag_list_, target);
  }

  // uint32 face_type = 5;
  if (this->face_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->face_type(), target);
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->id(), target);
  }

  // uint32 controller_id = 7;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->controller_id(), target);
  }

  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_limits_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->skill_limits_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 skill_id_list = 11;
  if (this->skill_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_id_list_, target);
  }

  // bool is_show = 14;
  if (this->is_show() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_show(), target);
  }

  // uint32 guid = 15;
  if (this->guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGCard)
  return target;
}

size_t GCGCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGCard)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGToken token_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->token_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 tag_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->tag_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tag_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->skill_limits_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_limits_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 skill_id_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 face_type = 5;
  if (this->face_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->face_type());
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 guid = 15;
  if (this->guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guid());
  }

  // uint32 controller_id = 7;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // bool is_show = 14;
  if (this->is_show() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGCard)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGCard)
    MergeFrom(*source);
  }
}

void GCGCard::MergeFrom(const GCGCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_list_.MergeFrom(from.token_list_);
  tag_list_.MergeFrom(from.tag_list_);
  skill_limits_list_.MergeFrom(from.skill_limits_list_);
  skill_id_list_.MergeFrom(from.skill_id_list_);
  if (from.face_type() != 0) {
    set_face_type(from.face_type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.guid() != 0) {
    set_guid(from.guid());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.is_show() != 0) {
    set_is_show(from.is_show());
  }
}

void GCGCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGCard::CopyFrom(const GCGCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGCard::IsInitialized() const {
  return true;
}

void GCGCard::Swap(GCGCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGCard::InternalSwap(GCGCard* other) {
  using std::swap;
  token_list_.InternalSwap(&other->token_list_);
  tag_list_.InternalSwap(&other->tag_list_);
  skill_limits_list_.InternalSwap(&other->skill_limits_list_);
  skill_id_list_.InternalSwap(&other->skill_id_list_);
  swap(face_type_, other->face_type_);
  swap(id_, other->id_);
  swap(guid_, other->guid_);
  swap(controller_id_, other->controller_id_);
  swap(is_show_, other->is_show_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGCard::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGCard

// bool is_show = 14;
void GCGCard::clear_is_show() {
  is_show_ = false;
}
bool GCGCard::is_show() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.is_show)
  return is_show_;
}
void GCGCard::set_is_show(bool value) {
  
  is_show_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.is_show)
}

// uint32 face_type = 5;
void GCGCard::clear_face_type() {
  face_type_ = 0u;
}
::google::protobuf::uint32 GCGCard::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.face_type)
  return face_type_;
}
void GCGCard::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.face_type)
}

// uint32 id = 6;
void GCGCard::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 GCGCard::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.id)
  return id_;
}
void GCGCard::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.id)
}

// repeated .proto.GCGToken token_list = 2;
int GCGCard::token_list_size() const {
  return token_list_.size();
}
void GCGCard::clear_token_list() {
  token_list_.Clear();
}
const ::proto::GCGToken& GCGCard::token_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.token_list)
  return token_list_.Get(index);
}
::proto::GCGToken* GCGCard::mutable_token_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCard.token_list)
  return token_list_.Mutable(index);
}
::proto::GCGToken* GCGCard::add_token_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCard.token_list)
  return token_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGToken >*
GCGCard::mutable_token_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.token_list)
  return &token_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGToken >&
GCGCard::token_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.token_list)
  return token_list_;
}

// repeated uint32 skill_id_list = 11;
int GCGCard::skill_id_list_size() const {
  return skill_id_list_.size();
}
void GCGCard::clear_skill_id_list() {
  skill_id_list_.Clear();
}
::google::protobuf::uint32 GCGCard::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.skill_id_list)
  return skill_id_list_.Get(index);
}
void GCGCard::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGCard.skill_id_list)
}
void GCGCard::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGCard.skill_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGCard::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.skill_id_list)
  return skill_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGCard::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.skill_id_list)
  return &skill_id_list_;
}

// repeated .proto.GCGSkillLimitsInfo skill_limits_list = 8;
int GCGCard::skill_limits_list_size() const {
  return skill_limits_list_.size();
}
void GCGCard::clear_skill_limits_list() {
  skill_limits_list_.Clear();
}
const ::proto::GCGSkillLimitsInfo& GCGCard::skill_limits_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.skill_limits_list)
  return skill_limits_list_.Get(index);
}
::proto::GCGSkillLimitsInfo* GCGCard::mutable_skill_limits_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCard.skill_limits_list)
  return skill_limits_list_.Mutable(index);
}
::proto::GCGSkillLimitsInfo* GCGCard::add_skill_limits_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCard.skill_limits_list)
  return skill_limits_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >*
GCGCard::mutable_skill_limits_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.skill_limits_list)
  return &skill_limits_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >&
GCGCard::skill_limits_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.skill_limits_list)
  return skill_limits_list_;
}

// uint32 guid = 15;
void GCGCard::clear_guid() {
  guid_ = 0u;
}
::google::protobuf::uint32 GCGCard::guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.guid)
  return guid_;
}
void GCGCard::set_guid(::google::protobuf::uint32 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.guid)
}

// repeated uint32 tag_list = 3;
int GCGCard::tag_list_size() const {
  return tag_list_.size();
}
void GCGCard::clear_tag_list() {
  tag_list_.Clear();
}
::google::protobuf::uint32 GCGCard::tag_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.tag_list)
  return tag_list_.Get(index);
}
void GCGCard::set_tag_list(int index, ::google::protobuf::uint32 value) {
  tag_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGCard.tag_list)
}
void GCGCard::add_tag_list(::google::protobuf::uint32 value) {
  tag_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGCard.tag_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGCard::tag_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.tag_list)
  return tag_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGCard::mutable_tag_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.tag_list)
  return &tag_list_;
}

// uint32 controller_id = 7;
void GCGCard::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGCard::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.controller_id)
  return controller_id_;
}
void GCGCard::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGZone::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGZone::GCGZone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGZone)
}
GCGZone::GCGZone(const GCGZone& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGZone)
}

void GCGZone::SharedCtor() {
  _cached_size_ = 0;
}

GCGZone::~GCGZone() {
  // @@protoc_insertion_point(destructor:proto.GCGZone)
  SharedDtor();
}

void GCGZone::SharedDtor() {
}

void GCGZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGZone::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGZone& GCGZone::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGZone* GCGZone::New(::google::protobuf::Arena* arena) const {
  GCGZone* n = new GCGZone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGZone::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGZone)
  return false;
#undef DO_
}

void GCGZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 4;
  if (this->card_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGZone)
}

::google::protobuf::uint8* GCGZone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGZone)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 4;
  if (this->card_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGZone)
  return target;
}

size_t GCGZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGZone)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGZone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGZone)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGZone* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGZone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGZone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGZone)
    MergeFrom(*source);
  }
}

void GCGZone::MergeFrom(const GCGZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
}

void GCGZone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGZone::CopyFrom(const GCGZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGZone::IsInitialized() const {
  return true;
}

void GCGZone::Swap(GCGZone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGZone::InternalSwap(GCGZone* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGZone::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGZone

// repeated uint32 card_list = 4;
int GCGZone::card_list_size() const {
  return card_list_.size();
}
void GCGZone::clear_card_list() {
  card_list_.Clear();
}
::google::protobuf::uint32 GCGZone::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGZone.card_list)
  return card_list_.Get(index);
}
void GCGZone::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGZone.card_list)
}
void GCGZone::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGZone.card_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGZone::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGZone.card_list)
  return card_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGZone::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGZone.card_list)
  return &card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGWaitingCharacter::kCardIdFieldNumber;
const int GCGWaitingCharacter::kCondCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGWaitingCharacter::GCGWaitingCharacter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGWaitingCharacter)
}
GCGWaitingCharacter::GCGWaitingCharacter(const GCGWaitingCharacter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cond_count_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(cond_count_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGWaitingCharacter)
}

void GCGWaitingCharacter::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cond_count_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(cond_count_));
  _cached_size_ = 0;
}

GCGWaitingCharacter::~GCGWaitingCharacter() {
  // @@protoc_insertion_point(destructor:proto.GCGWaitingCharacter)
  SharedDtor();
}

void GCGWaitingCharacter::SharedDtor() {
}

void GCGWaitingCharacter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGWaitingCharacter::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGWaitingCharacter& GCGWaitingCharacter::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGWaitingCharacter* GCGWaitingCharacter::New(::google::protobuf::Arena* arena) const {
  GCGWaitingCharacter* n = new GCGWaitingCharacter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGWaitingCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGWaitingCharacter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cond_count_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(cond_count_));
  _internal_metadata_.Clear();
}

bool GCGWaitingCharacter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGWaitingCharacter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cond_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cond_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGWaitingCharacter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGWaitingCharacter)
  return false;
#undef DO_
}

void GCGWaitingCharacter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGWaitingCharacter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->card_id(), output);
  }

  // uint32 cond_count = 14;
  if (this->cond_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cond_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGWaitingCharacter)
}

::google::protobuf::uint8* GCGWaitingCharacter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGWaitingCharacter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->card_id(), target);
  }

  // uint32 cond_count = 14;
  if (this->cond_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cond_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGWaitingCharacter)
  return target;
}

size_t GCGWaitingCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGWaitingCharacter)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 2;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 cond_count = 14;
  if (this->cond_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cond_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGWaitingCharacter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGWaitingCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGWaitingCharacter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGWaitingCharacter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGWaitingCharacter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGWaitingCharacter)
    MergeFrom(*source);
  }
}

void GCGWaitingCharacter::MergeFrom(const GCGWaitingCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGWaitingCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.cond_count() != 0) {
    set_cond_count(from.cond_count());
  }
}

void GCGWaitingCharacter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGWaitingCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGWaitingCharacter::CopyFrom(const GCGWaitingCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGWaitingCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGWaitingCharacter::IsInitialized() const {
  return true;
}

void GCGWaitingCharacter::Swap(GCGWaitingCharacter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGWaitingCharacter::InternalSwap(GCGWaitingCharacter* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(cond_count_, other->cond_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGWaitingCharacter::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGWaitingCharacter

// uint32 card_id = 2;
void GCGWaitingCharacter::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGWaitingCharacter::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGWaitingCharacter.card_id)
  return card_id_;
}
void GCGWaitingCharacter::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWaitingCharacter.card_id)
}

// uint32 cond_count = 14;
void GCGWaitingCharacter::clear_cond_count() {
  cond_count_ = 0u;
}
::google::protobuf::uint32 GCGWaitingCharacter::cond_count() const {
  // @@protoc_insertion_point(field_get:proto.GCGWaitingCharacter.cond_count)
  return cond_count_;
}
void GCGWaitingCharacter::set_cond_count(::google::protobuf::uint32 value) {
  
  cond_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWaitingCharacter.cond_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGPlayerField::GCGPlayerField_ModifyZoneMapEntry::GCGPlayerField_ModifyZoneMapEntry() {}
GCGPlayerField::GCGPlayerField_ModifyZoneMapEntry::GCGPlayerField_ModifyZoneMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGPlayerField::GCGPlayerField_ModifyZoneMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[70];
}
void GCGPlayerField::GCGPlayerField_ModifyZoneMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGPlayerField::GCGPlayerField_ModifyZoneMapEntry::MergeFrom(const GCGPlayerField_ModifyZoneMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGPlayerField::kModifyZoneMapFieldNumber;
const int GCGPlayerField::kCurWaitingIndexFieldNumber;
const int GCGPlayerField::kSummonZoneFieldNumber;
const int GCGPlayerField::kFieldShowIdFieldNumber;
const int GCGPlayerField::kCardBackShowIdFieldNumber;
const int GCGPlayerField::kDiceCountFieldNumber;
const int GCGPlayerField::kControllerIdFieldNumber;
const int GCGPlayerField::kOnStageZoneFieldNumber;
const int GCGPlayerField::kIsPassedFieldNumber;
const int GCGPlayerField::kCharacterZoneFieldNumber;
const int GCGPlayerField::kOnStageCharacterGuidFieldNumber;
const int GCGPlayerField::kAssistZoneFieldNumber;
const int GCGPlayerField::kDeckCardNumFieldNumber;
const int GCGPlayerField::kDiceSideListFieldNumber;
const int GCGPlayerField::kHandZoneFieldNumber;
const int GCGPlayerField::kIntentionListFieldNumber;
const int GCGPlayerField::kWaitingListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGPlayerField::GCGPlayerField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGPlayerField)
}
GCGPlayerField::GCGPlayerField(const GCGPlayerField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      waiting_list_(from.waiting_list_),
      dice_side_list_(from.dice_side_list_),
      intention_list_(from.intention_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modify_zone_map_.MergeFrom(from.modify_zone_map_);
  if (from.has_summon_zone()) {
    summon_zone_ = new ::proto::GCGZone(*from.summon_zone_);
  } else {
    summon_zone_ = NULL;
  }
  if (from.has_character_zone()) {
    character_zone_ = new ::proto::GCGZone(*from.character_zone_);
  } else {
    character_zone_ = NULL;
  }
  if (from.has_hand_zone()) {
    hand_zone_ = new ::proto::GCGZone(*from.hand_zone_);
  } else {
    hand_zone_ = NULL;
  }
  if (from.has_on_stage_zone()) {
    on_stage_zone_ = new ::proto::GCGZone(*from.on_stage_zone_);
  } else {
    on_stage_zone_ = NULL;
  }
  if (from.has_assist_zone()) {
    assist_zone_ = new ::proto::GCGZone(*from.assist_zone_);
  } else {
    assist_zone_ = NULL;
  }
  ::memcpy(&dice_count_, &from.dice_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_waiting_index_) -
    reinterpret_cast<char*>(&dice_count_)) + sizeof(cur_waiting_index_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGPlayerField)
}

void GCGPlayerField::SharedCtor() {
  ::memset(&summon_zone_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_waiting_index_) -
      reinterpret_cast<char*>(&summon_zone_)) + sizeof(cur_waiting_index_));
  _cached_size_ = 0;
}

GCGPlayerField::~GCGPlayerField() {
  // @@protoc_insertion_point(destructor:proto.GCGPlayerField)
  SharedDtor();
}

void GCGPlayerField::SharedDtor() {
  if (this != internal_default_instance()) delete summon_zone_;
  if (this != internal_default_instance()) delete character_zone_;
  if (this != internal_default_instance()) delete hand_zone_;
  if (this != internal_default_instance()) delete on_stage_zone_;
  if (this != internal_default_instance()) delete assist_zone_;
}

void GCGPlayerField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGPlayerField::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGPlayerField& GCGPlayerField::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGPlayerField* GCGPlayerField::New(::google::protobuf::Arena* arena) const {
  GCGPlayerField* n = new GCGPlayerField;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGPlayerField::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGPlayerField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modify_zone_map_.Clear();
  waiting_list_.Clear();
  dice_side_list_.Clear();
  intention_list_.Clear();
  if (GetArenaNoVirtual() == NULL && summon_zone_ != NULL) {
    delete summon_zone_;
  }
  summon_zone_ = NULL;
  if (GetArenaNoVirtual() == NULL && character_zone_ != NULL) {
    delete character_zone_;
  }
  character_zone_ = NULL;
  if (GetArenaNoVirtual() == NULL && hand_zone_ != NULL) {
    delete hand_zone_;
  }
  hand_zone_ = NULL;
  if (GetArenaNoVirtual() == NULL && on_stage_zone_ != NULL) {
    delete on_stage_zone_;
  }
  on_stage_zone_ = NULL;
  if (GetArenaNoVirtual() == NULL && assist_zone_ != NULL) {
    delete assist_zone_;
  }
  assist_zone_ = NULL;
  ::memset(&dice_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_waiting_index_) -
      reinterpret_cast<char*>(&dice_count_)) + sizeof(cur_waiting_index_));
  _internal_metadata_.Clear();
}

bool GCGPlayerField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGPlayerField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGZone summon_zone = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summon_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.GCGZone> modify_zone_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          GCGPlayerField_ModifyZoneMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGPlayerField_ModifyZoneMapEntry,
              ::google::protobuf::uint32, ::proto::GCGZone,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone > > parser(&modify_zone_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dice_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dice_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGWaitingCharacter waiting_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_waiting_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGZone character_zone = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 on_stage_character_guid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &on_stage_character_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_passed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 field_show_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_show_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGZone hand_zone = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hand_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGDiceSideType dice_side_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_dice_side_list(static_cast< ::proto::GCGDiceSideType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_dice_side_list(static_cast< ::proto::GCGDiceSideType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_back_show_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_back_show_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deck_card_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_card_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGZone on_stage_zone = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_on_stage_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGZone assist_zone = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assist_zone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_waiting_index = 383;
      case 383: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 3064 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_waiting_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGPVEIntention intention_list = 1192;
      case 1192: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 9538 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intention_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGPlayerField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGPlayerField)
  return false;
#undef DO_
}

void GCGPlayerField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGPlayerField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGZone summon_zone = 1;
  if (this->has_summon_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->summon_zone_, output);
  }

  // map<uint32, .proto.GCGZone> modify_zone_map = 2;
  if (!this->modify_zone_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->modify_zone_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modify_zone_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::const_iterator
          it = this->modify_zone_map().begin();
          it != this->modify_zone_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPlayerField_ModifyZoneMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modify_zone_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPlayerField_ModifyZoneMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::const_iterator
          it = this->modify_zone_map().begin();
          it != this->modify_zone_map().end(); ++it) {
        entry.reset(modify_zone_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
      }
    }
  }

  // uint32 dice_count = 3;
  if (this->dice_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dice_count(), output);
  }

  // repeated .proto.GCGWaitingCharacter waiting_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waiting_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->waiting_list(static_cast<int>(i)), output);
  }

  // .proto.GCGZone character_zone = 5;
  if (this->has_character_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->character_zone_, output);
  }

  // uint32 on_stage_character_guid = 6;
  if (this->on_stage_character_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->on_stage_character_guid(), output);
  }

  // bool is_passed = 7;
  if (this->is_passed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_passed(), output);
  }

  // uint32 field_show_id = 8;
  if (this->field_show_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->field_show_id(), output);
  }

  // .proto.GCGZone hand_zone = 9;
  if (this->has_hand_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->hand_zone_, output);
  }

  // uint32 controller_id = 10;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->controller_id(), output);
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 11;
  if (this->dice_side_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_dice_side_list_cached_byte_size_));
  }
  for (int i = 0, n = this->dice_side_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->dice_side_list(i), output);
  }

  // uint32 card_back_show_id = 12;
  if (this->card_back_show_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->card_back_show_id(), output);
  }

  // uint32 deck_card_num = 13;
  if (this->deck_card_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->deck_card_num(), output);
  }

  // .proto.GCGZone on_stage_zone = 14;
  if (this->has_on_stage_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->on_stage_zone_, output);
  }

  // .proto.GCGZone assist_zone = 15;
  if (this->has_assist_zone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->assist_zone_, output);
  }

  // uint32 cur_waiting_index = 383;
  if (this->cur_waiting_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(383, this->cur_waiting_index(), output);
  }

  // repeated .proto.GCGPVEIntention intention_list = 1192;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intention_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1192, this->intention_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGPlayerField)
}

::google::protobuf::uint8* GCGPlayerField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGPlayerField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGZone summon_zone = 1;
  if (this->has_summon_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->summon_zone_, deterministic, target);
  }

  // map<uint32, .proto.GCGZone> modify_zone_map = 2;
  if (!this->modify_zone_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->modify_zone_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modify_zone_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::const_iterator
          it = this->modify_zone_map().begin();
          it != this->modify_zone_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPlayerField_ModifyZoneMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modify_zone_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPlayerField_ModifyZoneMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::const_iterator
          it = this->modify_zone_map().begin();
          it != this->modify_zone_map().end(); ++it) {
        entry.reset(modify_zone_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 dice_count = 3;
  if (this->dice_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dice_count(), target);
  }

  // repeated .proto.GCGWaitingCharacter waiting_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waiting_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->waiting_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.GCGZone character_zone = 5;
  if (this->has_character_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->character_zone_, deterministic, target);
  }

  // uint32 on_stage_character_guid = 6;
  if (this->on_stage_character_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->on_stage_character_guid(), target);
  }

  // bool is_passed = 7;
  if (this->is_passed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_passed(), target);
  }

  // uint32 field_show_id = 8;
  if (this->field_show_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->field_show_id(), target);
  }

  // .proto.GCGZone hand_zone = 9;
  if (this->has_hand_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->hand_zone_, deterministic, target);
  }

  // uint32 controller_id = 10;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->controller_id(), target);
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 11;
  if (this->dice_side_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _dice_side_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->dice_side_list_, target);
  }

  // uint32 card_back_show_id = 12;
  if (this->card_back_show_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->card_back_show_id(), target);
  }

  // uint32 deck_card_num = 13;
  if (this->deck_card_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->deck_card_num(), target);
  }

  // .proto.GCGZone on_stage_zone = 14;
  if (this->has_on_stage_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->on_stage_zone_, deterministic, target);
  }

  // .proto.GCGZone assist_zone = 15;
  if (this->has_assist_zone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->assist_zone_, deterministic, target);
  }

  // uint32 cur_waiting_index = 383;
  if (this->cur_waiting_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(383, this->cur_waiting_index(), target);
  }

  // repeated .proto.GCGPVEIntention intention_list = 1192;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intention_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1192, this->intention_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGPlayerField)
  return target;
}

size_t GCGPlayerField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGPlayerField)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.GCGZone> modify_zone_map = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modify_zone_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGPlayerField_ModifyZoneMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >::const_iterator
        it = this->modify_zone_map().begin();
        it != this->modify_zone_map().end(); ++it) {
      entry.reset(modify_zone_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.GCGWaitingCharacter waiting_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->waiting_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->waiting_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGDiceSideType dice_side_list = 11;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->dice_side_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dice_side_list(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dice_side_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGPVEIntention intention_list = 1192;
  {
    unsigned int count = static_cast<unsigned int>(this->intention_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intention_list(static_cast<int>(i)));
    }
  }

  // .proto.GCGZone summon_zone = 1;
  if (this->has_summon_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->summon_zone_);
  }

  // .proto.GCGZone character_zone = 5;
  if (this->has_character_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->character_zone_);
  }

  // .proto.GCGZone hand_zone = 9;
  if (this->has_hand_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hand_zone_);
  }

  // .proto.GCGZone on_stage_zone = 14;
  if (this->has_on_stage_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->on_stage_zone_);
  }

  // .proto.GCGZone assist_zone = 15;
  if (this->has_assist_zone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->assist_zone_);
  }

  // uint32 dice_count = 3;
  if (this->dice_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dice_count());
  }

  // uint32 on_stage_character_guid = 6;
  if (this->on_stage_character_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->on_stage_character_guid());
  }

  // bool is_passed = 7;
  if (this->is_passed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 field_show_id = 8;
  if (this->field_show_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_show_id());
  }

  // uint32 controller_id = 10;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 card_back_show_id = 12;
  if (this->card_back_show_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_back_show_id());
  }

  // uint32 deck_card_num = 13;
  if (this->deck_card_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_card_num());
  }

  // uint32 cur_waiting_index = 383;
  if (this->cur_waiting_index() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_waiting_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGPlayerField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGPlayerField)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGPlayerField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGPlayerField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGPlayerField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGPlayerField)
    MergeFrom(*source);
  }
}

void GCGPlayerField::MergeFrom(const GCGPlayerField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGPlayerField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modify_zone_map_.MergeFrom(from.modify_zone_map_);
  waiting_list_.MergeFrom(from.waiting_list_);
  dice_side_list_.MergeFrom(from.dice_side_list_);
  intention_list_.MergeFrom(from.intention_list_);
  if (from.has_summon_zone()) {
    mutable_summon_zone()->::proto::GCGZone::MergeFrom(from.summon_zone());
  }
  if (from.has_character_zone()) {
    mutable_character_zone()->::proto::GCGZone::MergeFrom(from.character_zone());
  }
  if (from.has_hand_zone()) {
    mutable_hand_zone()->::proto::GCGZone::MergeFrom(from.hand_zone());
  }
  if (from.has_on_stage_zone()) {
    mutable_on_stage_zone()->::proto::GCGZone::MergeFrom(from.on_stage_zone());
  }
  if (from.has_assist_zone()) {
    mutable_assist_zone()->::proto::GCGZone::MergeFrom(from.assist_zone());
  }
  if (from.dice_count() != 0) {
    set_dice_count(from.dice_count());
  }
  if (from.on_stage_character_guid() != 0) {
    set_on_stage_character_guid(from.on_stage_character_guid());
  }
  if (from.is_passed() != 0) {
    set_is_passed(from.is_passed());
  }
  if (from.field_show_id() != 0) {
    set_field_show_id(from.field_show_id());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.card_back_show_id() != 0) {
    set_card_back_show_id(from.card_back_show_id());
  }
  if (from.deck_card_num() != 0) {
    set_deck_card_num(from.deck_card_num());
  }
  if (from.cur_waiting_index() != 0) {
    set_cur_waiting_index(from.cur_waiting_index());
  }
}

void GCGPlayerField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGPlayerField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGPlayerField::CopyFrom(const GCGPlayerField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGPlayerField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGPlayerField::IsInitialized() const {
  return true;
}

void GCGPlayerField::Swap(GCGPlayerField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGPlayerField::InternalSwap(GCGPlayerField* other) {
  using std::swap;
  modify_zone_map_.Swap(&other->modify_zone_map_);
  waiting_list_.InternalSwap(&other->waiting_list_);
  dice_side_list_.InternalSwap(&other->dice_side_list_);
  intention_list_.InternalSwap(&other->intention_list_);
  swap(summon_zone_, other->summon_zone_);
  swap(character_zone_, other->character_zone_);
  swap(hand_zone_, other->hand_zone_);
  swap(on_stage_zone_, other->on_stage_zone_);
  swap(assist_zone_, other->assist_zone_);
  swap(dice_count_, other->dice_count_);
  swap(on_stage_character_guid_, other->on_stage_character_guid_);
  swap(is_passed_, other->is_passed_);
  swap(field_show_id_, other->field_show_id_);
  swap(controller_id_, other->controller_id_);
  swap(card_back_show_id_, other->card_back_show_id_);
  swap(deck_card_num_, other->deck_card_num_);
  swap(cur_waiting_index_, other->cur_waiting_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGPlayerField::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGPlayerField

// map<uint32, .proto.GCGZone> modify_zone_map = 2;
int GCGPlayerField::modify_zone_map_size() const {
  return modify_zone_map_.size();
}
void GCGPlayerField::clear_modify_zone_map() {
  modify_zone_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >&
GCGPlayerField::modify_zone_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPlayerField.modify_zone_map)
  return modify_zone_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >*
GCGPlayerField::mutable_modify_zone_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPlayerField.modify_zone_map)
  return modify_zone_map_.MutableMap();
}

// uint32 cur_waiting_index = 383;
void GCGPlayerField::clear_cur_waiting_index() {
  cur_waiting_index_ = 0u;
}
::google::protobuf::uint32 GCGPlayerField::cur_waiting_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.cur_waiting_index)
  return cur_waiting_index_;
}
void GCGPlayerField::set_cur_waiting_index(::google::protobuf::uint32 value) {
  
  cur_waiting_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.cur_waiting_index)
}

// .proto.GCGZone summon_zone = 1;
bool GCGPlayerField::has_summon_zone() const {
  return this != internal_default_instance() && summon_zone_ != NULL;
}
void GCGPlayerField::clear_summon_zone() {
  if (GetArenaNoVirtual() == NULL && summon_zone_ != NULL) delete summon_zone_;
  summon_zone_ = NULL;
}
const ::proto::GCGZone& GCGPlayerField::summon_zone() const {
  const ::proto::GCGZone* p = summon_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.summon_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
::proto::GCGZone* GCGPlayerField::mutable_summon_zone() {
  
  if (summon_zone_ == NULL) {
    summon_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.summon_zone)
  return summon_zone_;
}
::proto::GCGZone* GCGPlayerField::release_summon_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.summon_zone)
  
  ::proto::GCGZone* temp = summon_zone_;
  summon_zone_ = NULL;
  return temp;
}
void GCGPlayerField::set_allocated_summon_zone(::proto::GCGZone* summon_zone) {
  delete summon_zone_;
  summon_zone_ = summon_zone;
  if (summon_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.summon_zone)
}

// uint32 field_show_id = 8;
void GCGPlayerField::clear_field_show_id() {
  field_show_id_ = 0u;
}
::google::protobuf::uint32 GCGPlayerField::field_show_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.field_show_id)
  return field_show_id_;
}
void GCGPlayerField::set_field_show_id(::google::protobuf::uint32 value) {
  
  field_show_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.field_show_id)
}

// uint32 card_back_show_id = 12;
void GCGPlayerField::clear_card_back_show_id() {
  card_back_show_id_ = 0u;
}
::google::protobuf::uint32 GCGPlayerField::card_back_show_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.card_back_show_id)
  return card_back_show_id_;
}
void GCGPlayerField::set_card_back_show_id(::google::protobuf::uint32 value) {
  
  card_back_show_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.card_back_show_id)
}

// uint32 dice_count = 3;
void GCGPlayerField::clear_dice_count() {
  dice_count_ = 0u;
}
::google::protobuf::uint32 GCGPlayerField::dice_count() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.dice_count)
  return dice_count_;
}
void GCGPlayerField::set_dice_count(::google::protobuf::uint32 value) {
  
  dice_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.dice_count)
}

// uint32 controller_id = 10;
void GCGPlayerField::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGPlayerField::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.controller_id)
  return controller_id_;
}
void GCGPlayerField::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.controller_id)
}

// .proto.GCGZone on_stage_zone = 14;
bool GCGPlayerField::has_on_stage_zone() const {
  return this != internal_default_instance() && on_stage_zone_ != NULL;
}
void GCGPlayerField::clear_on_stage_zone() {
  if (GetArenaNoVirtual() == NULL && on_stage_zone_ != NULL) delete on_stage_zone_;
  on_stage_zone_ = NULL;
}
const ::proto::GCGZone& GCGPlayerField::on_stage_zone() const {
  const ::proto::GCGZone* p = on_stage_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.on_stage_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
::proto::GCGZone* GCGPlayerField::mutable_on_stage_zone() {
  
  if (on_stage_zone_ == NULL) {
    on_stage_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.on_stage_zone)
  return on_stage_zone_;
}
::proto::GCGZone* GCGPlayerField::release_on_stage_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.on_stage_zone)
  
  ::proto::GCGZone* temp = on_stage_zone_;
  on_stage_zone_ = NULL;
  return temp;
}
void GCGPlayerField::set_allocated_on_stage_zone(::proto::GCGZone* on_stage_zone) {
  delete on_stage_zone_;
  on_stage_zone_ = on_stage_zone;
  if (on_stage_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.on_stage_zone)
}

// bool is_passed = 7;
void GCGPlayerField::clear_is_passed() {
  is_passed_ = false;
}
bool GCGPlayerField::is_passed() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.is_passed)
  return is_passed_;
}
void GCGPlayerField::set_is_passed(bool value) {
  
  is_passed_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.is_passed)
}

// .proto.GCGZone character_zone = 5;
bool GCGPlayerField::has_character_zone() const {
  return this != internal_default_instance() && character_zone_ != NULL;
}
void GCGPlayerField::clear_character_zone() {
  if (GetArenaNoVirtual() == NULL && character_zone_ != NULL) delete character_zone_;
  character_zone_ = NULL;
}
const ::proto::GCGZone& GCGPlayerField::character_zone() const {
  const ::proto::GCGZone* p = character_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.character_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
::proto::GCGZone* GCGPlayerField::mutable_character_zone() {
  
  if (character_zone_ == NULL) {
    character_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.character_zone)
  return character_zone_;
}
::proto::GCGZone* GCGPlayerField::release_character_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.character_zone)
  
  ::proto::GCGZone* temp = character_zone_;
  character_zone_ = NULL;
  return temp;
}
void GCGPlayerField::set_allocated_character_zone(::proto::GCGZone* character_zone) {
  delete character_zone_;
  character_zone_ = character_zone;
  if (character_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.character_zone)
}

// uint32 on_stage_character_guid = 6;
void GCGPlayerField::clear_on_stage_character_guid() {
  on_stage_character_guid_ = 0u;
}
::google::protobuf::uint32 GCGPlayerField::on_stage_character_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.on_stage_character_guid)
  return on_stage_character_guid_;
}
void GCGPlayerField::set_on_stage_character_guid(::google::protobuf::uint32 value) {
  
  on_stage_character_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.on_stage_character_guid)
}

// .proto.GCGZone assist_zone = 15;
bool GCGPlayerField::has_assist_zone() const {
  return this != internal_default_instance() && assist_zone_ != NULL;
}
void GCGPlayerField::clear_assist_zone() {
  if (GetArenaNoVirtual() == NULL && assist_zone_ != NULL) delete assist_zone_;
  assist_zone_ = NULL;
}
const ::proto::GCGZone& GCGPlayerField::assist_zone() const {
  const ::proto::GCGZone* p = assist_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.assist_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
::proto::GCGZone* GCGPlayerField::mutable_assist_zone() {
  
  if (assist_zone_ == NULL) {
    assist_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.assist_zone)
  return assist_zone_;
}
::proto::GCGZone* GCGPlayerField::release_assist_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.assist_zone)
  
  ::proto::GCGZone* temp = assist_zone_;
  assist_zone_ = NULL;
  return temp;
}
void GCGPlayerField::set_allocated_assist_zone(::proto::GCGZone* assist_zone) {
  delete assist_zone_;
  assist_zone_ = assist_zone;
  if (assist_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.assist_zone)
}

// uint32 deck_card_num = 13;
void GCGPlayerField::clear_deck_card_num() {
  deck_card_num_ = 0u;
}
::google::protobuf::uint32 GCGPlayerField::deck_card_num() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.deck_card_num)
  return deck_card_num_;
}
void GCGPlayerField::set_deck_card_num(::google::protobuf::uint32 value) {
  
  deck_card_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.deck_card_num)
}

// repeated .proto.GCGDiceSideType dice_side_list = 11;
int GCGPlayerField::dice_side_list_size() const {
  return dice_side_list_.size();
}
void GCGPlayerField::clear_dice_side_list() {
  dice_side_list_.Clear();
}
::proto::GCGDiceSideType GCGPlayerField::dice_side_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.dice_side_list)
  return static_cast< ::proto::GCGDiceSideType >(dice_side_list_.Get(index));
}
void GCGPlayerField::set_dice_side_list(int index, ::proto::GCGDiceSideType value) {
  dice_side_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.dice_side_list)
}
void GCGPlayerField::add_dice_side_list(::proto::GCGDiceSideType value) {
  dice_side_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGPlayerField.dice_side_list)
}
const ::google::protobuf::RepeatedField<int>&
GCGPlayerField::dice_side_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerField.dice_side_list)
  return dice_side_list_;
}
::google::protobuf::RepeatedField<int>*
GCGPlayerField::mutable_dice_side_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerField.dice_side_list)
  return &dice_side_list_;
}

// .proto.GCGZone hand_zone = 9;
bool GCGPlayerField::has_hand_zone() const {
  return this != internal_default_instance() && hand_zone_ != NULL;
}
void GCGPlayerField::clear_hand_zone() {
  if (GetArenaNoVirtual() == NULL && hand_zone_ != NULL) delete hand_zone_;
  hand_zone_ = NULL;
}
const ::proto::GCGZone& GCGPlayerField::hand_zone() const {
  const ::proto::GCGZone* p = hand_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.hand_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
::proto::GCGZone* GCGPlayerField::mutable_hand_zone() {
  
  if (hand_zone_ == NULL) {
    hand_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.hand_zone)
  return hand_zone_;
}
::proto::GCGZone* GCGPlayerField::release_hand_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.hand_zone)
  
  ::proto::GCGZone* temp = hand_zone_;
  hand_zone_ = NULL;
  return temp;
}
void GCGPlayerField::set_allocated_hand_zone(::proto::GCGZone* hand_zone) {
  delete hand_zone_;
  hand_zone_ = hand_zone;
  if (hand_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.hand_zone)
}

// repeated .proto.GCGPVEIntention intention_list = 1192;
int GCGPlayerField::intention_list_size() const {
  return intention_list_.size();
}
void GCGPlayerField::clear_intention_list() {
  intention_list_.Clear();
}
const ::proto::GCGPVEIntention& GCGPlayerField::intention_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.intention_list)
  return intention_list_.Get(index);
}
::proto::GCGPVEIntention* GCGPlayerField::mutable_intention_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.intention_list)
  return intention_list_.Mutable(index);
}
::proto::GCGPVEIntention* GCGPlayerField::add_intention_list() {
  // @@protoc_insertion_point(field_add:proto.GCGPlayerField.intention_list)
  return intention_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >*
GCGPlayerField::mutable_intention_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerField.intention_list)
  return &intention_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >&
GCGPlayerField::intention_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerField.intention_list)
  return intention_list_;
}

// repeated .proto.GCGWaitingCharacter waiting_list = 4;
int GCGPlayerField::waiting_list_size() const {
  return waiting_list_.size();
}
void GCGPlayerField::clear_waiting_list() {
  waiting_list_.Clear();
}
const ::proto::GCGWaitingCharacter& GCGPlayerField::waiting_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.waiting_list)
  return waiting_list_.Get(index);
}
::proto::GCGWaitingCharacter* GCGPlayerField::mutable_waiting_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.waiting_list)
  return waiting_list_.Mutable(index);
}
::proto::GCGWaitingCharacter* GCGPlayerField::add_waiting_list() {
  // @@protoc_insertion_point(field_add:proto.GCGPlayerField.waiting_list)
  return waiting_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGWaitingCharacter >*
GCGPlayerField::mutable_waiting_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerField.waiting_list)
  return &waiting_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGWaitingCharacter >&
GCGPlayerField::waiting_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerField.waiting_list)
  return waiting_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGPhase::GCGPhase_AllowControllerMapEntry::GCGPhase_AllowControllerMapEntry() {}
GCGPhase::GCGPhase_AllowControllerMapEntry::GCGPhase_AllowControllerMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGPhase::GCGPhase_AllowControllerMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[72];
}
void GCGPhase::GCGPhase_AllowControllerMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGPhase::GCGPhase_AllowControllerMapEntry::MergeFrom(const GCGPhase_AllowControllerMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGPhase::kPhaseTypeFieldNumber;
const int GCGPhase::kAllowControllerMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGPhase::GCGPhase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGPhase)
}
GCGPhase::GCGPhase(const GCGPhase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  allow_controller_map_.MergeFrom(from.allow_controller_map_);
  phase_type_ = from.phase_type_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGPhase)
}

void GCGPhase::SharedCtor() {
  phase_type_ = 0;
  _cached_size_ = 0;
}

GCGPhase::~GCGPhase() {
  // @@protoc_insertion_point(destructor:proto.GCGPhase)
  SharedDtor();
}

void GCGPhase::SharedDtor() {
}

void GCGPhase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGPhase::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGPhase& GCGPhase::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGPhase* GCGPhase::New(::google::protobuf::Arena* arena) const {
  GCGPhase* n = new GCGPhase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allow_controller_map_.Clear();
  phase_type_ = 0;
  _internal_metadata_.Clear();
}

bool GCGPhase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGPhase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGPhaseType phase_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_phase_type(static_cast< ::proto::GCGPhaseType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> allow_controller_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          GCGPhase_AllowControllerMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGPhase_AllowControllerMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&allow_controller_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGPhase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGPhase)
  return false;
#undef DO_
}

void GCGPhase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGPhaseType phase_type = 5;
  if (this->phase_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->phase_type(), output);
  }

  // map<uint32, uint32> allow_controller_map = 6;
  if (!this->allow_controller_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->allow_controller_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->allow_controller_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPhase_AllowControllerMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPhase_AllowControllerMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGPhase)
}

::google::protobuf::uint8* GCGPhase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGPhase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGPhaseType phase_type = 5;
  if (this->phase_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->phase_type(), target);
  }

  // map<uint32, uint32> allow_controller_map = 6;
  if (!this->allow_controller_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->allow_controller_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->allow_controller_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPhase_AllowControllerMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPhase_AllowControllerMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->allow_controller_map().begin();
          it != this->allow_controller_map().end(); ++it) {
        entry.reset(allow_controller_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGPhase)
  return target;
}

size_t GCGPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGPhase)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> allow_controller_map = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->allow_controller_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGPhase_AllowControllerMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->allow_controller_map().begin();
        it != this->allow_controller_map().end(); ++it) {
      entry.reset(allow_controller_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .proto.GCGPhaseType phase_type = 5;
  if (this->phase_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGPhase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGPhase)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGPhase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGPhase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGPhase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGPhase)
    MergeFrom(*source);
  }
}

void GCGPhase::MergeFrom(const GCGPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGPhase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allow_controller_map_.MergeFrom(from.allow_controller_map_);
  if (from.phase_type() != 0) {
    set_phase_type(from.phase_type());
  }
}

void GCGPhase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGPhase::CopyFrom(const GCGPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGPhase::IsInitialized() const {
  return true;
}

void GCGPhase::Swap(GCGPhase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGPhase::InternalSwap(GCGPhase* other) {
  using std::swap;
  allow_controller_map_.Swap(&other->allow_controller_map_);
  swap(phase_type_, other->phase_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGPhase::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGPhase

// .proto.GCGPhaseType phase_type = 5;
void GCGPhase::clear_phase_type() {
  phase_type_ = 0;
}
::proto::GCGPhaseType GCGPhase::phase_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGPhase.phase_type)
  return static_cast< ::proto::GCGPhaseType >(phase_type_);
}
void GCGPhase::set_phase_type(::proto::GCGPhaseType value) {
  
  phase_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPhase.phase_type)
}

// map<uint32, uint32> allow_controller_map = 6;
int GCGPhase::allow_controller_map_size() const {
  return allow_controller_map_.size();
}
void GCGPhase::clear_allow_controller_map() {
  allow_controller_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGPhase::allow_controller_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPhase.allow_controller_map)
  return allow_controller_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGPhase::mutable_allow_controller_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPhase.allow_controller_map)
  return allow_controller_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGControllerShowInfo::kProfilePictureFieldNumber;
const int GCGControllerShowInfo::kNickNameFieldNumber;
const int GCGControllerShowInfo::kControllerIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGControllerShowInfo::GCGControllerShowInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGControllerShowInfo)
}
GCGControllerShowInfo::GCGControllerShowInfo(const GCGControllerShowInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick_name().size() > 0) {
    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.has_profile_picture()) {
    profile_picture_ = new ::proto::ProfilePicture(*from.profile_picture_);
  } else {
    profile_picture_ = NULL;
  }
  controller_id_ = from.controller_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGControllerShowInfo)
}

void GCGControllerShowInfo::SharedCtor() {
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&profile_picture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&profile_picture_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGControllerShowInfo::~GCGControllerShowInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGControllerShowInfo)
  SharedDtor();
}

void GCGControllerShowInfo::SharedDtor() {
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_picture_;
}

void GCGControllerShowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGControllerShowInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGControllerShowInfo& GCGControllerShowInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGControllerShowInfo* GCGControllerShowInfo::New(::google::protobuf::Arena* arena) const {
  GCGControllerShowInfo* n = new GCGControllerShowInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGControllerShowInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGControllerShowInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) {
    delete profile_picture_;
  }
  profile_picture_ = NULL;
  controller_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGControllerShowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGControllerShowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ProfilePicture profile_picture = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick_name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick_name().data(), static_cast<int>(this->nick_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GCGControllerShowInfo.nick_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGControllerShowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGControllerShowInfo)
  return false;
#undef DO_
}

void GCGControllerShowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGControllerShowInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 9;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->controller_id(), output);
  }

  // .proto.ProfilePicture profile_picture = 11;
  if (this->has_profile_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->profile_picture_, output);
  }

  // string nick_name = 14;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick_name().data(), static_cast<int>(this->nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGControllerShowInfo.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->nick_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGControllerShowInfo)
}

::google::protobuf::uint8* GCGControllerShowInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGControllerShowInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 9;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->controller_id(), target);
  }

  // .proto.ProfilePicture profile_picture = 11;
  if (this->has_profile_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->profile_picture_, deterministic, target);
  }

  // string nick_name = 14;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick_name().data(), static_cast<int>(this->nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGControllerShowInfo.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->nick_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGControllerShowInfo)
  return target;
}

size_t GCGControllerShowInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGControllerShowInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string nick_name = 14;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick_name());
  }

  // .proto.ProfilePicture profile_picture = 11;
  if (this->has_profile_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_picture_);
  }

  // uint32 controller_id = 9;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGControllerShowInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGControllerShowInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGControllerShowInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGControllerShowInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGControllerShowInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGControllerShowInfo)
    MergeFrom(*source);
  }
}

void GCGControllerShowInfo::MergeFrom(const GCGControllerShowInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGControllerShowInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nick_name().size() > 0) {

    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.has_profile_picture()) {
    mutable_profile_picture()->::proto::ProfilePicture::MergeFrom(from.profile_picture());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGControllerShowInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGControllerShowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGControllerShowInfo::CopyFrom(const GCGControllerShowInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGControllerShowInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGControllerShowInfo::IsInitialized() const {
  return true;
}

void GCGControllerShowInfo::Swap(GCGControllerShowInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGControllerShowInfo::InternalSwap(GCGControllerShowInfo* other) {
  using std::swap;
  nick_name_.Swap(&other->nick_name_);
  swap(profile_picture_, other->profile_picture_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGControllerShowInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGControllerShowInfo

// .proto.ProfilePicture profile_picture = 11;
bool GCGControllerShowInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
void GCGControllerShowInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
const ::proto::ProfilePicture& GCGControllerShowInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.GCGControllerShowInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
::proto::ProfilePicture* GCGControllerShowInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGControllerShowInfo.profile_picture)
  return profile_picture_;
}
::proto::ProfilePicture* GCGControllerShowInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.GCGControllerShowInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
void GCGControllerShowInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGControllerShowInfo.profile_picture)
}

// string nick_name = 14;
void GCGControllerShowInfo::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GCGControllerShowInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:proto.GCGControllerShowInfo.nick_name)
  return nick_name_.GetNoArena();
}
void GCGControllerShowInfo::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGControllerShowInfo.nick_name)
}
#if LANG_CXX11
void GCGControllerShowInfo::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGControllerShowInfo.nick_name)
}
#endif
void GCGControllerShowInfo::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGControllerShowInfo.nick_name)
}
void GCGControllerShowInfo::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGControllerShowInfo.nick_name)
}
::std::string* GCGControllerShowInfo::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGControllerShowInfo.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GCGControllerShowInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:proto.GCGControllerShowInfo.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GCGControllerShowInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGControllerShowInfo.nick_name)
}

// uint32 controller_id = 9;
void GCGControllerShowInfo::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGControllerShowInfo::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGControllerShowInfo.controller_id)
  return controller_id_;
}
void GCGControllerShowInfo::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGControllerShowInfo.controller_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGPVEIntention::kCardGuidFieldNumber;
const int GCGPVEIntention::kSkillIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGPVEIntention::GCGPVEIntention()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGPVEIntention)
}
GCGPVEIntention::GCGPVEIntention(const GCGPVEIntention& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      skill_id_list_(from.skill_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_guid_ = from.card_guid_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGPVEIntention)
}

void GCGPVEIntention::SharedCtor() {
  card_guid_ = 0u;
  _cached_size_ = 0;
}

GCGPVEIntention::~GCGPVEIntention() {
  // @@protoc_insertion_point(destructor:proto.GCGPVEIntention)
  SharedDtor();
}

void GCGPVEIntention::SharedDtor() {
}

void GCGPVEIntention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGPVEIntention::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGPVEIntention& GCGPVEIntention::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGPVEIntention* GCGPVEIntention::New(::google::protobuf::Arena* arena) const {
  GCGPVEIntention* n = new GCGPVEIntention;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGPVEIntention::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGPVEIntention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_id_list_.Clear();
  card_guid_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGPVEIntention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGPVEIntention)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 skill_id_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skill_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_skill_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGPVEIntention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGPVEIntention)
  return false;
#undef DO_
}

void GCGPVEIntention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGPVEIntention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 skill_id_list = 7;
  if (this->skill_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _skill_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->skill_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->skill_id_list(i), output);
  }

  // uint32 card_guid = 9;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGPVEIntention)
}

::google::protobuf::uint8* GCGPVEIntention::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGPVEIntention)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 skill_id_list = 7;
  if (this->skill_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _skill_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->skill_id_list_, target);
  }

  // uint32 card_guid = 9;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGPVEIntention)
  return target;
}

size_t GCGPVEIntention::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGPVEIntention)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 skill_id_list = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->skill_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _skill_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 card_guid = 9;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGPVEIntention::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGPVEIntention)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGPVEIntention* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGPVEIntention>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGPVEIntention)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGPVEIntention)
    MergeFrom(*source);
  }
}

void GCGPVEIntention::MergeFrom(const GCGPVEIntention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGPVEIntention)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_id_list_.MergeFrom(from.skill_id_list_);
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
}

void GCGPVEIntention::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGPVEIntention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGPVEIntention::CopyFrom(const GCGPVEIntention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGPVEIntention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGPVEIntention::IsInitialized() const {
  return true;
}

void GCGPVEIntention::Swap(GCGPVEIntention* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGPVEIntention::InternalSwap(GCGPVEIntention* other) {
  using std::swap;
  skill_id_list_.InternalSwap(&other->skill_id_list_);
  swap(card_guid_, other->card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGPVEIntention::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGPVEIntention

// uint32 card_guid = 9;
void GCGPVEIntention::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGPVEIntention::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPVEIntention.card_guid)
  return card_guid_;
}
void GCGPVEIntention::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPVEIntention.card_guid)
}

// repeated uint32 skill_id_list = 7;
int GCGPVEIntention::skill_id_list_size() const {
  return skill_id_list_.size();
}
void GCGPVEIntention::clear_skill_id_list() {
  skill_id_list_.Clear();
}
::google::protobuf::uint32 GCGPVEIntention::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPVEIntention.skill_id_list)
  return skill_id_list_.Get(index);
}
void GCGPVEIntention::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGPVEIntention.skill_id_list)
}
void GCGPVEIntention::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGPVEIntention.skill_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGPVEIntention::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPVEIntention.skill_id_list)
  return skill_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGPVEIntention::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPVEIntention.skill_id_list)
  return &skill_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDuelChallenge::kTotalProgressFieldNumber;
const int GCGDuelChallenge::kChallengeIdFieldNumber;
const int GCGDuelChallenge::kCurProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDuelChallenge::GCGDuelChallenge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDuelChallenge)
}
GCGDuelChallenge::GCGDuelChallenge(const GCGDuelChallenge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_progress_, &from.cur_progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_id_) -
    reinterpret_cast<char*>(&cur_progress_)) + sizeof(challenge_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDuelChallenge)
}

void GCGDuelChallenge::SharedCtor() {
  ::memset(&cur_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_id_) -
      reinterpret_cast<char*>(&cur_progress_)) + sizeof(challenge_id_));
  _cached_size_ = 0;
}

GCGDuelChallenge::~GCGDuelChallenge() {
  // @@protoc_insertion_point(destructor:proto.GCGDuelChallenge)
  SharedDtor();
}

void GCGDuelChallenge::SharedDtor() {
}

void GCGDuelChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDuelChallenge::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDuelChallenge& GCGDuelChallenge::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDuelChallenge* GCGDuelChallenge::New(::google::protobuf::Arena* arena) const {
  GCGDuelChallenge* n = new GCGDuelChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDuelChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDuelChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_id_) -
      reinterpret_cast<char*>(&cur_progress_)) + sizeof(challenge_id_));
  _internal_metadata_.Clear();
}

bool GCGDuelChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDuelChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 total_progress = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_progress = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDuelChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDuelChallenge)
  return false;
#undef DO_
}

void GCGDuelChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDuelChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_progress = 7;
  if (this->total_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_progress(), output);
  }

  // uint32 challenge_id = 10;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challenge_id(), output);
  }

  // uint32 cur_progress = 12;
  if (this->cur_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cur_progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDuelChallenge)
}

::google::protobuf::uint8* GCGDuelChallenge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDuelChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_progress = 7;
  if (this->total_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->total_progress(), target);
  }

  // uint32 challenge_id = 10;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challenge_id(), target);
  }

  // uint32 cur_progress = 12;
  if (this->cur_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cur_progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDuelChallenge)
  return target;
}

size_t GCGDuelChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDuelChallenge)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cur_progress = 12;
  if (this->cur_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_progress());
  }

  // uint32 total_progress = 7;
  if (this->total_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_progress());
  }

  // uint32 challenge_id = 10;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDuelChallenge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDuelChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDuelChallenge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDuelChallenge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDuelChallenge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDuelChallenge)
    MergeFrom(*source);
  }
}

void GCGDuelChallenge::MergeFrom(const GCGDuelChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDuelChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_progress() != 0) {
    set_cur_progress(from.cur_progress());
  }
  if (from.total_progress() != 0) {
    set_total_progress(from.total_progress());
  }
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
}

void GCGDuelChallenge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDuelChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDuelChallenge::CopyFrom(const GCGDuelChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDuelChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDuelChallenge::IsInitialized() const {
  return true;
}

void GCGDuelChallenge::Swap(GCGDuelChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDuelChallenge::InternalSwap(GCGDuelChallenge* other) {
  using std::swap;
  swap(cur_progress_, other->cur_progress_);
  swap(total_progress_, other->total_progress_);
  swap(challenge_id_, other->challenge_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDuelChallenge::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDuelChallenge

// uint32 total_progress = 7;
void GCGDuelChallenge::clear_total_progress() {
  total_progress_ = 0u;
}
::google::protobuf::uint32 GCGDuelChallenge::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelChallenge.total_progress)
  return total_progress_;
}
void GCGDuelChallenge::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelChallenge.total_progress)
}

// uint32 challenge_id = 10;
void GCGDuelChallenge::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 GCGDuelChallenge::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelChallenge.challenge_id)
  return challenge_id_;
}
void GCGDuelChallenge::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelChallenge.challenge_id)
}

// uint32 cur_progress = 12;
void GCGDuelChallenge::clear_cur_progress() {
  cur_progress_ = 0u;
}
::google::protobuf::uint32 GCGDuelChallenge::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelChallenge.cur_progress)
  return cur_progress_;
}
void GCGDuelChallenge::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelChallenge.cur_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDuel::kCostReviseFieldNumber;
const int GCGDuel::kBusinessTypeFieldNumber;
const int GCGDuel::kHistoryCardListFieldNumber;
const int GCGDuel::kOperationSeqFieldNumber;
const int GCGDuel::kGameIdFieldNumber;
const int GCGDuel::kGameTypeFieldNumber;
const int GCGDuel::kCardListFieldNumber;
const int GCGDuel::kServerSeqFieldNumber;
const int GCGDuel::kHistoryMsgPackListFieldNumber;
const int GCGDuel::kRoundFieldNumber;
const int GCGDuel::kFieldListFieldNumber;
const int GCGDuel::kControllerIdFieldNumber;
const int GCGDuel::kPhaseFieldNumber;
const int GCGDuel::kCardIdListFieldNumber;
const int GCGDuel::kIntetionListFieldNumber;
const int GCGDuel::kForbidFinishChallengeListFieldNumber;
const int GCGDuel::kChallengeListFieldNumber;
const int GCGDuel::kCurControllerIdFieldNumber;
const int GCGDuel::kShowInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDuel::GCGDuel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDuel)
}
GCGDuel::GCGDuel(const GCGDuel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      intetion_list_(from.intetion_list_),
      card_id_list_(from.card_id_list_),
      challenge_list_(from.challenge_list_),
      show_info_list_(from.show_info_list_),
      field_list_(from.field_list_),
      card_list_(from.card_list_),
      history_card_list_(from.history_card_list_),
      forbid_finish_challenge_list_(from.forbid_finish_challenge_list_),
      history_msg_pack_list_(from.history_msg_pack_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_phase()) {
    phase_ = new ::proto::GCGPhase(*from.phase_);
  } else {
    phase_ = NULL;
  }
  if (from.has_cost_revise()) {
    cost_revise_ = new ::proto::GCGCostReviseInfo(*from.cost_revise_);
  } else {
    cost_revise_ = NULL;
  }
  ::memcpy(&game_type_, &from.game_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_seq_) -
    reinterpret_cast<char*>(&game_type_)) + sizeof(operation_seq_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDuel)
}

void GCGDuel::SharedCtor() {
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_seq_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(operation_seq_));
  _cached_size_ = 0;
}

GCGDuel::~GCGDuel() {
  // @@protoc_insertion_point(destructor:proto.GCGDuel)
  SharedDtor();
}

void GCGDuel::SharedDtor() {
  if (this != internal_default_instance()) delete phase_;
  if (this != internal_default_instance()) delete cost_revise_;
}

void GCGDuel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDuel::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDuel& GCGDuel::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDuel* GCGDuel::New(::google::protobuf::Arena* arena) const {
  GCGDuel* n = new GCGDuel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDuel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDuel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  intetion_list_.Clear();
  card_id_list_.Clear();
  challenge_list_.Clear();
  show_info_list_.Clear();
  field_list_.Clear();
  card_list_.Clear();
  history_card_list_.Clear();
  forbid_finish_challenge_list_.Clear();
  history_msg_pack_list_.Clear();
  if (GetArenaNoVirtual() == NULL && phase_ != NULL) {
    delete phase_;
  }
  phase_ = NULL;
  if (GetArenaNoVirtual() == NULL && cost_revise_ != NULL) {
    delete cost_revise_;
  }
  cost_revise_ = NULL;
  ::memset(&game_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_seq_) -
      reinterpret_cast<char*>(&game_type_)) + sizeof(operation_seq_));
  _internal_metadata_.Clear();
}

bool GCGDuel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDuel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGPVEIntention intetion_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_intetion_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 server_seq = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 card_id_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_card_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGDuelChallenge challenge_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGControllerShowInfo show_info_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_show_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGPlayerField field_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_field_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGPhase phase = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phase()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGCard card_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGCostReviseInfo cost_revise = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cost_revise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_controller_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGGameBusinessType business_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_business_type(static_cast< ::proto::GCGGameBusinessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 round = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGCard history_card_list = 121;
      case 121: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 970 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 forbid_finish_challenge_list = 647;
      case 647: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 5178 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forbid_finish_challenge_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 5176 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 5178u, input, this->mutable_forbid_finish_challenge_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGMessagePack history_msg_pack_list = 796;
      case 796: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u /* 6370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_msg_pack_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 operation_seq = 1210;
      case 1210: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u /* 9680 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operation_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDuel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDuel)
  return false;
#undef DO_
}

void GCGDuel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDuel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGPVEIntention intetion_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intetion_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->intetion_list(static_cast<int>(i)), output);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_type(), output);
  }

  // uint32 server_seq = 3;
  if (this->server_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->server_seq(), output);
  }

  // repeated uint32 card_id_list = 4;
  if (this->card_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_id_list(i), output);
  }

  // repeated .proto.GCGDuelChallenge challenge_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->challenge_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGControllerShowInfo show_info_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->show_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->show_info_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGPlayerField field_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->field_list(static_cast<int>(i)), output);
  }

  // .proto.GCGPhase phase = 8;
  if (this->has_phase()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->phase_, output);
  }

  // repeated .proto.GCGCard card_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->card_list(static_cast<int>(i)), output);
  }

  // .proto.GCGCostReviseInfo cost_revise = 10;
  if (this->has_cost_revise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->cost_revise_, output);
  }

  // uint32 game_id = 11;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->game_id(), output);
  }

  // uint32 cur_controller_id = 12;
  if (this->cur_controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cur_controller_id(), output);
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->controller_id(), output);
  }

  // .proto.GCGGameBusinessType business_type = 14;
  if (this->business_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->business_type(), output);
  }

  // uint32 round = 15;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->round(), output);
  }

  // repeated .proto.GCGCard history_card_list = 121;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      121, this->history_card_list(static_cast<int>(i)), output);
  }

  // repeated uint32 forbid_finish_challenge_list = 647;
  if (this->forbid_finish_challenge_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(647, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _forbid_finish_challenge_list_cached_byte_size_));
  }
  for (int i = 0, n = this->forbid_finish_challenge_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->forbid_finish_challenge_list(i), output);
  }

  // repeated .proto.GCGMessagePack history_msg_pack_list = 796;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_msg_pack_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      796, this->history_msg_pack_list(static_cast<int>(i)), output);
  }

  // uint32 operation_seq = 1210;
  if (this->operation_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1210, this->operation_seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDuel)
}

::google::protobuf::uint8* GCGDuel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDuel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGPVEIntention intetion_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->intetion_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->intetion_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_type(), target);
  }

  // uint32 server_seq = 3;
  if (this->server_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->server_seq(), target);
  }

  // repeated uint32 card_id_list = 4;
  if (this->card_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_id_list_, target);
  }

  // repeated .proto.GCGDuelChallenge challenge_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->challenge_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGControllerShowInfo show_info_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->show_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->show_info_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGPlayerField field_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->field_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->field_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.GCGPhase phase = 8;
  if (this->has_phase()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->phase_, deterministic, target);
  }

  // repeated .proto.GCGCard card_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.GCGCostReviseInfo cost_revise = 10;
  if (this->has_cost_revise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->cost_revise_, deterministic, target);
  }

  // uint32 game_id = 11;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->game_id(), target);
  }

  // uint32 cur_controller_id = 12;
  if (this->cur_controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cur_controller_id(), target);
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->controller_id(), target);
  }

  // .proto.GCGGameBusinessType business_type = 14;
  if (this->business_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->business_type(), target);
  }

  // uint32 round = 15;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->round(), target);
  }

  // repeated .proto.GCGCard history_card_list = 121;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        121, this->history_card_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 forbid_finish_challenge_list = 647;
  if (this->forbid_finish_challenge_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      647,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _forbid_finish_challenge_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->forbid_finish_challenge_list_, target);
  }

  // repeated .proto.GCGMessagePack history_msg_pack_list = 796;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_msg_pack_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        796, this->history_msg_pack_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 operation_seq = 1210;
  if (this->operation_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1210, this->operation_seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDuel)
  return target;
}

size_t GCGDuel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDuel)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGPVEIntention intetion_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->intetion_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intetion_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 card_id_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGDuelChallenge challenge_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->challenge_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGControllerShowInfo show_info_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->show_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_info_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGPlayerField field_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->field_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGCard card_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGCard history_card_list = 121;
  {
    unsigned int count = static_cast<unsigned int>(this->history_card_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_card_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 forbid_finish_challenge_list = 647;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->forbid_finish_challenge_list_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _forbid_finish_challenge_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGMessagePack history_msg_pack_list = 796;
  {
    unsigned int count = static_cast<unsigned int>(this->history_msg_pack_list_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->history_msg_pack_list(static_cast<int>(i)));
    }
  }

  // .proto.GCGPhase phase = 8;
  if (this->has_phase()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->phase_);
  }

  // .proto.GCGCostReviseInfo cost_revise = 10;
  if (this->has_cost_revise()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cost_revise_);
  }

  // uint32 game_type = 2;
  if (this->game_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_type());
  }

  // uint32 server_seq = 3;
  if (this->server_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_seq());
  }

  // uint32 game_id = 11;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // uint32 cur_controller_id = 12;
  if (this->cur_controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_controller_id());
  }

  // uint32 controller_id = 13;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // .proto.GCGGameBusinessType business_type = 14;
  if (this->business_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->business_type());
  }

  // uint32 round = 15;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->round());
  }

  // uint32 operation_seq = 1210;
  if (this->operation_seq() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->operation_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDuel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDuel)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDuel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDuel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDuel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDuel)
    MergeFrom(*source);
  }
}

void GCGDuel::MergeFrom(const GCGDuel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDuel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  intetion_list_.MergeFrom(from.intetion_list_);
  card_id_list_.MergeFrom(from.card_id_list_);
  challenge_list_.MergeFrom(from.challenge_list_);
  show_info_list_.MergeFrom(from.show_info_list_);
  field_list_.MergeFrom(from.field_list_);
  card_list_.MergeFrom(from.card_list_);
  history_card_list_.MergeFrom(from.history_card_list_);
  forbid_finish_challenge_list_.MergeFrom(from.forbid_finish_challenge_list_);
  history_msg_pack_list_.MergeFrom(from.history_msg_pack_list_);
  if (from.has_phase()) {
    mutable_phase()->::proto::GCGPhase::MergeFrom(from.phase());
  }
  if (from.has_cost_revise()) {
    mutable_cost_revise()->::proto::GCGCostReviseInfo::MergeFrom(from.cost_revise());
  }
  if (from.game_type() != 0) {
    set_game_type(from.game_type());
  }
  if (from.server_seq() != 0) {
    set_server_seq(from.server_seq());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.cur_controller_id() != 0) {
    set_cur_controller_id(from.cur_controller_id());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.business_type() != 0) {
    set_business_type(from.business_type());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
  if (from.operation_seq() != 0) {
    set_operation_seq(from.operation_seq());
  }
}

void GCGDuel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDuel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDuel::CopyFrom(const GCGDuel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDuel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDuel::IsInitialized() const {
  return true;
}

void GCGDuel::Swap(GCGDuel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDuel::InternalSwap(GCGDuel* other) {
  using std::swap;
  intetion_list_.InternalSwap(&other->intetion_list_);
  card_id_list_.InternalSwap(&other->card_id_list_);
  challenge_list_.InternalSwap(&other->challenge_list_);
  show_info_list_.InternalSwap(&other->show_info_list_);
  field_list_.InternalSwap(&other->field_list_);
  card_list_.InternalSwap(&other->card_list_);
  history_card_list_.InternalSwap(&other->history_card_list_);
  forbid_finish_challenge_list_.InternalSwap(&other->forbid_finish_challenge_list_);
  history_msg_pack_list_.InternalSwap(&other->history_msg_pack_list_);
  swap(phase_, other->phase_);
  swap(cost_revise_, other->cost_revise_);
  swap(game_type_, other->game_type_);
  swap(server_seq_, other->server_seq_);
  swap(game_id_, other->game_id_);
  swap(cur_controller_id_, other->cur_controller_id_);
  swap(controller_id_, other->controller_id_);
  swap(business_type_, other->business_type_);
  swap(round_, other->round_);
  swap(operation_seq_, other->operation_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDuel::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDuel

// .proto.GCGCostReviseInfo cost_revise = 10;
bool GCGDuel::has_cost_revise() const {
  return this != internal_default_instance() && cost_revise_ != NULL;
}
void GCGDuel::clear_cost_revise() {
  if (GetArenaNoVirtual() == NULL && cost_revise_ != NULL) delete cost_revise_;
  cost_revise_ = NULL;
}
const ::proto::GCGCostReviseInfo& GCGDuel::cost_revise() const {
  const ::proto::GCGCostReviseInfo* p = cost_revise_;
  // @@protoc_insertion_point(field_get:proto.GCGDuel.cost_revise)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCostReviseInfo*>(
      &::proto::_GCGCostReviseInfo_default_instance_);
}
::proto::GCGCostReviseInfo* GCGDuel::mutable_cost_revise() {
  
  if (cost_revise_ == NULL) {
    cost_revise_ = new ::proto::GCGCostReviseInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.cost_revise)
  return cost_revise_;
}
::proto::GCGCostReviseInfo* GCGDuel::release_cost_revise() {
  // @@protoc_insertion_point(field_release:proto.GCGDuel.cost_revise)
  
  ::proto::GCGCostReviseInfo* temp = cost_revise_;
  cost_revise_ = NULL;
  return temp;
}
void GCGDuel::set_allocated_cost_revise(::proto::GCGCostReviseInfo* cost_revise) {
  delete cost_revise_;
  cost_revise_ = cost_revise;
  if (cost_revise) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDuel.cost_revise)
}

// .proto.GCGGameBusinessType business_type = 14;
void GCGDuel::clear_business_type() {
  business_type_ = 0;
}
::proto::GCGGameBusinessType GCGDuel::business_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
void GCGDuel::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.business_type)
}

// repeated .proto.GCGCard history_card_list = 121;
int GCGDuel::history_card_list_size() const {
  return history_card_list_.size();
}
void GCGDuel::clear_history_card_list() {
  history_card_list_.Clear();
}
const ::proto::GCGCard& GCGDuel::history_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.history_card_list)
  return history_card_list_.Get(index);
}
::proto::GCGCard* GCGDuel::mutable_history_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.history_card_list)
  return history_card_list_.Mutable(index);
}
::proto::GCGCard* GCGDuel::add_history_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.history_card_list)
  return history_card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGCard >*
GCGDuel::mutable_history_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.history_card_list)
  return &history_card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >&
GCGDuel::history_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.history_card_list)
  return history_card_list_;
}

// uint32 operation_seq = 1210;
void GCGDuel::clear_operation_seq() {
  operation_seq_ = 0u;
}
::google::protobuf::uint32 GCGDuel::operation_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.operation_seq)
  return operation_seq_;
}
void GCGDuel::set_operation_seq(::google::protobuf::uint32 value) {
  
  operation_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.operation_seq)
}

// uint32 game_id = 11;
void GCGDuel::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 GCGDuel::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.game_id)
  return game_id_;
}
void GCGDuel::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.game_id)
}

// uint32 game_type = 2;
void GCGDuel::clear_game_type() {
  game_type_ = 0u;
}
::google::protobuf::uint32 GCGDuel::game_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.game_type)
  return game_type_;
}
void GCGDuel::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.game_type)
}

// repeated .proto.GCGCard card_list = 9;
int GCGDuel::card_list_size() const {
  return card_list_.size();
}
void GCGDuel::clear_card_list() {
  card_list_.Clear();
}
const ::proto::GCGCard& GCGDuel::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.card_list)
  return card_list_.Get(index);
}
::proto::GCGCard* GCGDuel::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.card_list)
  return card_list_.Mutable(index);
}
::proto::GCGCard* GCGDuel::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGCard >*
GCGDuel::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >&
GCGDuel::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.card_list)
  return card_list_;
}

// uint32 server_seq = 3;
void GCGDuel::clear_server_seq() {
  server_seq_ = 0u;
}
::google::protobuf::uint32 GCGDuel::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.server_seq)
  return server_seq_;
}
void GCGDuel::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.server_seq)
}

// repeated .proto.GCGMessagePack history_msg_pack_list = 796;
int GCGDuel::history_msg_pack_list_size() const {
  return history_msg_pack_list_.size();
}
void GCGDuel::clear_history_msg_pack_list() {
  history_msg_pack_list_.Clear();
}
const ::proto::GCGMessagePack& GCGDuel::history_msg_pack_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_.Get(index);
}
::proto::GCGMessagePack* GCGDuel::mutable_history_msg_pack_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_.Mutable(index);
}
::proto::GCGMessagePack* GCGDuel::add_history_msg_pack_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >*
GCGDuel::mutable_history_msg_pack_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.history_msg_pack_list)
  return &history_msg_pack_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >&
GCGDuel::history_msg_pack_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_;
}

// uint32 round = 15;
void GCGDuel::clear_round() {
  round_ = 0u;
}
::google::protobuf::uint32 GCGDuel::round() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.round)
  return round_;
}
void GCGDuel::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.round)
}

// repeated .proto.GCGPlayerField field_list = 7;
int GCGDuel::field_list_size() const {
  return field_list_.size();
}
void GCGDuel::clear_field_list() {
  field_list_.Clear();
}
const ::proto::GCGPlayerField& GCGDuel::field_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.field_list)
  return field_list_.Get(index);
}
::proto::GCGPlayerField* GCGDuel::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.field_list)
  return field_list_.Mutable(index);
}
::proto::GCGPlayerField* GCGDuel::add_field_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.field_list)
  return field_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerField >*
GCGDuel::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.field_list)
  return &field_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerField >&
GCGDuel::field_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.field_list)
  return field_list_;
}

// uint32 controller_id = 13;
void GCGDuel::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGDuel::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.controller_id)
  return controller_id_;
}
void GCGDuel::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.controller_id)
}

// .proto.GCGPhase phase = 8;
bool GCGDuel::has_phase() const {
  return this != internal_default_instance() && phase_ != NULL;
}
void GCGDuel::clear_phase() {
  if (GetArenaNoVirtual() == NULL && phase_ != NULL) delete phase_;
  phase_ = NULL;
}
const ::proto::GCGPhase& GCGDuel::phase() const {
  const ::proto::GCGPhase* p = phase_;
  // @@protoc_insertion_point(field_get:proto.GCGDuel.phase)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGPhase*>(
      &::proto::_GCGPhase_default_instance_);
}
::proto::GCGPhase* GCGDuel::mutable_phase() {
  
  if (phase_ == NULL) {
    phase_ = new ::proto::GCGPhase;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.phase)
  return phase_;
}
::proto::GCGPhase* GCGDuel::release_phase() {
  // @@protoc_insertion_point(field_release:proto.GCGDuel.phase)
  
  ::proto::GCGPhase* temp = phase_;
  phase_ = NULL;
  return temp;
}
void GCGDuel::set_allocated_phase(::proto::GCGPhase* phase) {
  delete phase_;
  phase_ = phase;
  if (phase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDuel.phase)
}

// repeated uint32 card_id_list = 4;
int GCGDuel::card_id_list_size() const {
  return card_id_list_.size();
}
void GCGDuel::clear_card_id_list() {
  card_id_list_.Clear();
}
::google::protobuf::uint32 GCGDuel::card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.card_id_list)
  return card_id_list_.Get(index);
}
void GCGDuel::set_card_id_list(int index, ::google::protobuf::uint32 value) {
  card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDuel.card_id_list)
}
void GCGDuel::add_card_id_list(::google::protobuf::uint32 value) {
  card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDuel.card_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDuel::card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.card_id_list)
  return card_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDuel::mutable_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.card_id_list)
  return &card_id_list_;
}

// repeated .proto.GCGPVEIntention intetion_list = 1;
int GCGDuel::intetion_list_size() const {
  return intetion_list_.size();
}
void GCGDuel::clear_intetion_list() {
  intetion_list_.Clear();
}
const ::proto::GCGPVEIntention& GCGDuel::intetion_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.intetion_list)
  return intetion_list_.Get(index);
}
::proto::GCGPVEIntention* GCGDuel::mutable_intetion_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.intetion_list)
  return intetion_list_.Mutable(index);
}
::proto::GCGPVEIntention* GCGDuel::add_intetion_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.intetion_list)
  return intetion_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >*
GCGDuel::mutable_intetion_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.intetion_list)
  return &intetion_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >&
GCGDuel::intetion_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.intetion_list)
  return intetion_list_;
}

// repeated uint32 forbid_finish_challenge_list = 647;
int GCGDuel::forbid_finish_challenge_list_size() const {
  return forbid_finish_challenge_list_.size();
}
void GCGDuel::clear_forbid_finish_challenge_list() {
  forbid_finish_challenge_list_.Clear();
}
::google::protobuf::uint32 GCGDuel::forbid_finish_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_.Get(index);
}
void GCGDuel::set_forbid_finish_challenge_list(int index, ::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDuel.forbid_finish_challenge_list)
}
void GCGDuel::add_forbid_finish_challenge_list(::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDuel.forbid_finish_challenge_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDuel::forbid_finish_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDuel::mutable_forbid_finish_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.forbid_finish_challenge_list)
  return &forbid_finish_challenge_list_;
}

// repeated .proto.GCGDuelChallenge challenge_list = 5;
int GCGDuel::challenge_list_size() const {
  return challenge_list_.size();
}
void GCGDuel::clear_challenge_list() {
  challenge_list_.Clear();
}
const ::proto::GCGDuelChallenge& GCGDuel::challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.challenge_list)
  return challenge_list_.Get(index);
}
::proto::GCGDuelChallenge* GCGDuel::mutable_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.challenge_list)
  return challenge_list_.Mutable(index);
}
::proto::GCGDuelChallenge* GCGDuel::add_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.challenge_list)
  return challenge_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGDuelChallenge >*
GCGDuel::mutable_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.challenge_list)
  return &challenge_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGDuelChallenge >&
GCGDuel::challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.challenge_list)
  return challenge_list_;
}

// uint32 cur_controller_id = 12;
void GCGDuel::clear_cur_controller_id() {
  cur_controller_id_ = 0u;
}
::google::protobuf::uint32 GCGDuel::cur_controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.cur_controller_id)
  return cur_controller_id_;
}
void GCGDuel::set_cur_controller_id(::google::protobuf::uint32 value) {
  
  cur_controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.cur_controller_id)
}

// repeated .proto.GCGControllerShowInfo show_info_list = 6;
int GCGDuel::show_info_list_size() const {
  return show_info_list_.size();
}
void GCGDuel::clear_show_info_list() {
  show_info_list_.Clear();
}
const ::proto::GCGControllerShowInfo& GCGDuel::show_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.show_info_list)
  return show_info_list_.Get(index);
}
::proto::GCGControllerShowInfo* GCGDuel::mutable_show_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.show_info_list)
  return show_info_list_.Mutable(index);
}
::proto::GCGControllerShowInfo* GCGDuel::add_show_info_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.show_info_list)
  return show_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGControllerShowInfo >*
GCGDuel::mutable_show_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.show_info_list)
  return &show_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGControllerShowInfo >&
GCGDuel::show_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.show_info_list)
  return show_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationReq::kOpSeqFieldNumber;
const int GCGOperationReq::kRedirectUidFieldNumber;
const int GCGOperationReq::kOpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationReq::GCGOperationReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationReq)
}
GCGOperationReq::GCGOperationReq(const GCGOperationReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_op()) {
    op_ = new ::proto::GCGOperation(*from.op_);
  } else {
    op_ = NULL;
  }
  ::memcpy(&op_seq_, &from.op_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&redirect_uid_) -
    reinterpret_cast<char*>(&op_seq_)) + sizeof(redirect_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationReq)
}

void GCGOperationReq::SharedCtor() {
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_uid_) -
      reinterpret_cast<char*>(&op_)) + sizeof(redirect_uid_));
  _cached_size_ = 0;
}

GCGOperationReq::~GCGOperationReq() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationReq)
  SharedDtor();
}

void GCGOperationReq::SharedDtor() {
  if (this != internal_default_instance()) delete op_;
}

void GCGOperationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationReq& GCGOperationReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationReq* GCGOperationReq::New(::google::protobuf::Arena* arena) const {
  GCGOperationReq* n = new GCGOperationReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && op_ != NULL) {
    delete op_;
  }
  op_ = NULL;
  ::memset(&op_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&redirect_uid_) -
      reinterpret_cast<char*>(&op_seq_)) + sizeof(redirect_uid_));
  _internal_metadata_.Clear();
}

bool GCGOperationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 op_seq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 redirect_uid = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &redirect_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGOperation op = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_op()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationReq)
  return false;
#undef DO_
}

void GCGOperationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_seq = 2;
  if (this->op_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->op_seq(), output);
  }

  // uint32 redirect_uid = 7;
  if (this->redirect_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->redirect_uid(), output);
  }

  // .proto.GCGOperation op = 15;
  if (this->has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->op_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationReq)
}

::google::protobuf::uint8* GCGOperationReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_seq = 2;
  if (this->op_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->op_seq(), target);
  }

  // uint32 redirect_uid = 7;
  if (this->redirect_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->redirect_uid(), target);
  }

  // .proto.GCGOperation op = 15;
  if (this->has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->op_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationReq)
  return target;
}

size_t GCGOperationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGOperation op = 15;
  if (this->has_op()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->op_);
  }

  // uint32 op_seq = 2;
  if (this->op_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->op_seq());
  }

  // uint32 redirect_uid = 7;
  if (this->redirect_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->redirect_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationReq)
    MergeFrom(*source);
  }
}

void GCGOperationReq::MergeFrom(const GCGOperationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_op()) {
    mutable_op()->::proto::GCGOperation::MergeFrom(from.op());
  }
  if (from.op_seq() != 0) {
    set_op_seq(from.op_seq());
  }
  if (from.redirect_uid() != 0) {
    set_redirect_uid(from.redirect_uid());
  }
}

void GCGOperationReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationReq::CopyFrom(const GCGOperationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationReq::IsInitialized() const {
  return true;
}

void GCGOperationReq::Swap(GCGOperationReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationReq::InternalSwap(GCGOperationReq* other) {
  using std::swap;
  swap(op_, other->op_);
  swap(op_seq_, other->op_seq_);
  swap(redirect_uid_, other->redirect_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationReq

// uint32 op_seq = 2;
void GCGOperationReq::clear_op_seq() {
  op_seq_ = 0u;
}
::google::protobuf::uint32 GCGOperationReq::op_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReq.op_seq)
  return op_seq_;
}
void GCGOperationReq::set_op_seq(::google::protobuf::uint32 value) {
  
  op_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReq.op_seq)
}

// uint32 redirect_uid = 7;
void GCGOperationReq::clear_redirect_uid() {
  redirect_uid_ = 0u;
}
::google::protobuf::uint32 GCGOperationReq::redirect_uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReq.redirect_uid)
  return redirect_uid_;
}
void GCGOperationReq::set_redirect_uid(::google::protobuf::uint32 value) {
  
  redirect_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReq.redirect_uid)
}

// .proto.GCGOperation op = 15;
bool GCGOperationReq::has_op() const {
  return this != internal_default_instance() && op_ != NULL;
}
void GCGOperationReq::clear_op() {
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
}
const ::proto::GCGOperation& GCGOperationReq::op() const {
  const ::proto::GCGOperation* p = op_;
  // @@protoc_insertion_point(field_get:proto.GCGOperationReq.op)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGOperation*>(
      &::proto::_GCGOperation_default_instance_);
}
::proto::GCGOperation* GCGOperationReq::mutable_op() {
  
  if (op_ == NULL) {
    op_ = new ::proto::GCGOperation;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperationReq.op)
  return op_;
}
::proto::GCGOperation* GCGOperationReq::release_op() {
  // @@protoc_insertion_point(field_release:proto.GCGOperationReq.op)
  
  ::proto::GCGOperation* temp = op_;
  op_ = NULL;
  return temp;
}
void GCGOperationReq::set_allocated_op(::proto::GCGOperation* op) {
  delete op_;
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperationReq.op)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGOperationRsp::kRetcodeFieldNumber;
const int GCGOperationRsp::kOpSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGOperationRsp::GCGOperationRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGOperationRsp)
}
GCGOperationRsp::GCGOperationRsp(const GCGOperationRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&op_seq_, &from.op_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&op_seq_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGOperationRsp)
}

void GCGOperationRsp::SharedCtor() {
  ::memset(&op_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&op_seq_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGOperationRsp::~GCGOperationRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGOperationRsp)
  SharedDtor();
}

void GCGOperationRsp::SharedDtor() {
}

void GCGOperationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGOperationRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGOperationRsp& GCGOperationRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGOperationRsp* GCGOperationRsp::New(::google::protobuf::Arena* arena) const {
  GCGOperationRsp* n = new GCGOperationRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGOperationRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGOperationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&op_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&op_seq_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GCGOperationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGOperationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 op_seq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGOperationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGOperationRsp)
  return false;
#undef DO_
}

void GCGOperationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGOperationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_seq = 4;
  if (this->op_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->op_seq(), output);
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGOperationRsp)
}

::google::protobuf::uint8* GCGOperationRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGOperationRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 op_seq = 4;
  if (this->op_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->op_seq(), target);
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGOperationRsp)
  return target;
}

size_t GCGOperationRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGOperationRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 op_seq = 4;
  if (this->op_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->op_seq());
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGOperationRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGOperationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGOperationRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGOperationRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGOperationRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGOperationRsp)
    MergeFrom(*source);
  }
}

void GCGOperationRsp::MergeFrom(const GCGOperationRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGOperationRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.op_seq() != 0) {
    set_op_seq(from.op_seq());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGOperationRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGOperationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGOperationRsp::CopyFrom(const GCGOperationRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGOperationRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGOperationRsp::IsInitialized() const {
  return true;
}

void GCGOperationRsp::Swap(GCGOperationRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGOperationRsp::InternalSwap(GCGOperationRsp* other) {
  using std::swap;
  swap(op_seq_, other->op_seq_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGOperationRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGOperationRsp

// int32 retcode = 8;
void GCGOperationRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGOperationRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationRsp.retcode)
  return retcode_;
}
void GCGOperationRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationRsp.retcode)
}

// uint32 op_seq = 4;
void GCGOperationRsp::clear_op_seq() {
  op_seq_ = 0u;
}
::google::protobuf::uint32 GCGOperationRsp::op_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationRsp.op_seq)
  return op_seq_;
}
void GCGOperationRsp::set_op_seq(::google::protobuf::uint32 value) {
  
  op_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationRsp.op_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGMessagePackNotify::kMsgPackListFieldNumber;
const int GCGMessagePackNotify::kServerSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGMessagePackNotify::GCGMessagePackNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGMessagePackNotify)
}
GCGMessagePackNotify::GCGMessagePackNotify(const GCGMessagePackNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msg_pack_list_(from.msg_pack_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_seq_ = from.server_seq_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGMessagePackNotify)
}

void GCGMessagePackNotify::SharedCtor() {
  server_seq_ = 0u;
  _cached_size_ = 0;
}

GCGMessagePackNotify::~GCGMessagePackNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGMessagePackNotify)
  SharedDtor();
}

void GCGMessagePackNotify::SharedDtor() {
}

void GCGMessagePackNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGMessagePackNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGMessagePackNotify& GCGMessagePackNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGMessagePackNotify* GCGMessagePackNotify::New(::google::protobuf::Arena* arena) const {
  GCGMessagePackNotify* n = new GCGMessagePackNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGMessagePackNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGMessagePackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_pack_list_.Clear();
  server_seq_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGMessagePackNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGMessagePackNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_seq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGMessagePack msg_pack_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msg_pack_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGMessagePackNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGMessagePackNotify)
  return false;
#undef DO_
}

void GCGMessagePackNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGMessagePackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_seq = 5;
  if (this->server_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->server_seq(), output);
  }

  // repeated .proto.GCGMessagePack msg_pack_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_pack_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->msg_pack_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGMessagePackNotify)
}

::google::protobuf::uint8* GCGMessagePackNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGMessagePackNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_seq = 5;
  if (this->server_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->server_seq(), target);
  }

  // repeated .proto.GCGMessagePack msg_pack_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->msg_pack_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->msg_pack_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGMessagePackNotify)
  return target;
}

size_t GCGMessagePackNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGMessagePackNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGMessagePack msg_pack_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->msg_pack_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_pack_list(static_cast<int>(i)));
    }
  }

  // uint32 server_seq = 5;
  if (this->server_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGMessagePackNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGMessagePackNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGMessagePackNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGMessagePackNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGMessagePackNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGMessagePackNotify)
    MergeFrom(*source);
  }
}

void GCGMessagePackNotify::MergeFrom(const GCGMessagePackNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGMessagePackNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msg_pack_list_.MergeFrom(from.msg_pack_list_);
  if (from.server_seq() != 0) {
    set_server_seq(from.server_seq());
  }
}

void GCGMessagePackNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGMessagePackNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGMessagePackNotify::CopyFrom(const GCGMessagePackNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGMessagePackNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGMessagePackNotify::IsInitialized() const {
  return true;
}

void GCGMessagePackNotify::Swap(GCGMessagePackNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGMessagePackNotify::InternalSwap(GCGMessagePackNotify* other) {
  using std::swap;
  msg_pack_list_.InternalSwap(&other->msg_pack_list_);
  swap(server_seq_, other->server_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGMessagePackNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGMessagePackNotify

// repeated .proto.GCGMessagePack msg_pack_list = 11;
int GCGMessagePackNotify::msg_pack_list_size() const {
  return msg_pack_list_.size();
}
void GCGMessagePackNotify::clear_msg_pack_list() {
  msg_pack_list_.Clear();
}
const ::proto::GCGMessagePack& GCGMessagePackNotify::msg_pack_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Get(index);
}
::proto::GCGMessagePack* GCGMessagePackNotify::mutable_msg_pack_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Mutable(index);
}
::proto::GCGMessagePack* GCGMessagePackNotify::add_msg_pack_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >*
GCGMessagePackNotify::mutable_msg_pack_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMessagePackNotify.msg_pack_list)
  return &msg_pack_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >&
GCGMessagePackNotify::msg_pack_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_;
}

// uint32 server_seq = 5;
void GCGMessagePackNotify::clear_server_seq() {
  server_seq_ = 0u;
}
::google::protobuf::uint32 GCGMessagePackNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePackNotify.server_seq)
  return server_seq_;
}
void GCGMessagePackNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMessagePackNotify.server_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGAskDuelReq::GCGAskDuelReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGAskDuelReq)
}
GCGAskDuelReq::GCGAskDuelReq(const GCGAskDuelReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGAskDuelReq)
}

void GCGAskDuelReq::SharedCtor() {
  _cached_size_ = 0;
}

GCGAskDuelReq::~GCGAskDuelReq() {
  // @@protoc_insertion_point(destructor:proto.GCGAskDuelReq)
  SharedDtor();
}

void GCGAskDuelReq::SharedDtor() {
}

void GCGAskDuelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGAskDuelReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGAskDuelReq& GCGAskDuelReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGAskDuelReq* GCGAskDuelReq::New(::google::protobuf::Arena* arena) const {
  GCGAskDuelReq* n = new GCGAskDuelReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGAskDuelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGAskDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGAskDuelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGAskDuelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGAskDuelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGAskDuelReq)
  return false;
#undef DO_
}

void GCGAskDuelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGAskDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGAskDuelReq)
}

::google::protobuf::uint8* GCGAskDuelReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGAskDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGAskDuelReq)
  return target;
}

size_t GCGAskDuelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGAskDuelReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGAskDuelReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGAskDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGAskDuelReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGAskDuelReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGAskDuelReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGAskDuelReq)
    MergeFrom(*source);
  }
}

void GCGAskDuelReq::MergeFrom(const GCGAskDuelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGAskDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGAskDuelReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGAskDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGAskDuelReq::CopyFrom(const GCGAskDuelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGAskDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGAskDuelReq::IsInitialized() const {
  return true;
}

void GCGAskDuelReq::Swap(GCGAskDuelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGAskDuelReq::InternalSwap(GCGAskDuelReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGAskDuelReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGAskDuelReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGAskDuelRsp::kRetcodeFieldNumber;
const int GCGAskDuelRsp::kDuelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGAskDuelRsp::GCGAskDuelRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGAskDuelRsp)
}
GCGAskDuelRsp::GCGAskDuelRsp(const GCGAskDuelRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_duel()) {
    duel_ = new ::proto::GCGDuel(*from.duel_);
  } else {
    duel_ = NULL;
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGAskDuelRsp)
}

void GCGAskDuelRsp::SharedCtor() {
  ::memset(&duel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&duel_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGAskDuelRsp::~GCGAskDuelRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGAskDuelRsp)
  SharedDtor();
}

void GCGAskDuelRsp::SharedDtor() {
  if (this != internal_default_instance()) delete duel_;
}

void GCGAskDuelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGAskDuelRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGAskDuelRsp& GCGAskDuelRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGAskDuelRsp* GCGAskDuelRsp::New(::google::protobuf::Arena* arena) const {
  GCGAskDuelRsp* n = new GCGAskDuelRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGAskDuelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGAskDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && duel_ != NULL) {
    delete duel_;
  }
  duel_ = NULL;
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GCGAskDuelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGAskDuelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGDuel duel = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_duel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGAskDuelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGAskDuelRsp)
  return false;
#undef DO_
}

void GCGAskDuelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGAskDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  // .proto.GCGDuel duel = 13;
  if (this->has_duel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->duel_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGAskDuelRsp)
}

::google::protobuf::uint8* GCGAskDuelRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGAskDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  // .proto.GCGDuel duel = 13;
  if (this->has_duel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->duel_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGAskDuelRsp)
  return target;
}

size_t GCGAskDuelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGAskDuelRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGDuel duel = 13;
  if (this->has_duel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->duel_);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGAskDuelRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGAskDuelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGAskDuelRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGAskDuelRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGAskDuelRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGAskDuelRsp)
    MergeFrom(*source);
  }
}

void GCGAskDuelRsp::MergeFrom(const GCGAskDuelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGAskDuelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_duel()) {
    mutable_duel()->::proto::GCGDuel::MergeFrom(from.duel());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGAskDuelRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGAskDuelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGAskDuelRsp::CopyFrom(const GCGAskDuelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGAskDuelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGAskDuelRsp::IsInitialized() const {
  return true;
}

void GCGAskDuelRsp::Swap(GCGAskDuelRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGAskDuelRsp::InternalSwap(GCGAskDuelRsp* other) {
  using std::swap;
  swap(duel_, other->duel_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGAskDuelRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGAskDuelRsp

// int32 retcode = 3;
void GCGAskDuelRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGAskDuelRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGAskDuelRsp.retcode)
  return retcode_;
}
void GCGAskDuelRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGAskDuelRsp.retcode)
}

// .proto.GCGDuel duel = 13;
bool GCGAskDuelRsp::has_duel() const {
  return this != internal_default_instance() && duel_ != NULL;
}
void GCGAskDuelRsp::clear_duel() {
  if (GetArenaNoVirtual() == NULL && duel_ != NULL) delete duel_;
  duel_ = NULL;
}
const ::proto::GCGDuel& GCGAskDuelRsp::duel() const {
  const ::proto::GCGDuel* p = duel_;
  // @@protoc_insertion_point(field_get:proto.GCGAskDuelRsp.duel)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGDuel*>(
      &::proto::_GCGDuel_default_instance_);
}
::proto::GCGDuel* GCGAskDuelRsp::mutable_duel() {
  
  if (duel_ == NULL) {
    duel_ = new ::proto::GCGDuel;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGAskDuelRsp.duel)
  return duel_;
}
::proto::GCGDuel* GCGAskDuelRsp::release_duel() {
  // @@protoc_insertion_point(field_release:proto.GCGAskDuelRsp.duel)
  
  ::proto::GCGDuel* temp = duel_;
  duel_ = NULL;
  return temp;
}
void GCGAskDuelRsp::set_allocated_duel(::proto::GCGDuel* duel) {
  delete duel_;
  duel_ = duel;
  if (duel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGAskDuelRsp.duel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGPlayerBriefData::GCGPlayerBriefData_CardFaceMapEntry::GCGPlayerBriefData_CardFaceMapEntry() {}
GCGPlayerBriefData::GCGPlayerBriefData_CardFaceMapEntry::GCGPlayerBriefData_CardFaceMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGPlayerBriefData::GCGPlayerBriefData_CardFaceMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[83];
}
void GCGPlayerBriefData::GCGPlayerBriefData_CardFaceMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGPlayerBriefData::GCGPlayerBriefData_CardFaceMapEntry::MergeFrom(const GCGPlayerBriefData_CardFaceMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGPlayerBriefData::kCardFaceMapFieldNumber;
const int GCGPlayerBriefData::kNickNameFieldNumber;
const int GCGPlayerBriefData::kProfilePictureFieldNumber;
const int GCGPlayerBriefData::kCardIdListFieldNumber;
const int GCGPlayerBriefData::kControllerIdFieldNumber;
const int GCGPlayerBriefData::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGPlayerBriefData::GCGPlayerBriefData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGPlayerBriefData)
}
GCGPlayerBriefData::GCGPlayerBriefData(const GCGPlayerBriefData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_id_list_(from.card_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_face_map_.MergeFrom(from.card_face_map_);
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nick_name().size() > 0) {
    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.has_profile_picture()) {
    profile_picture_ = new ::proto::ProfilePicture(*from.profile_picture_);
  } else {
    profile_picture_ = NULL;
  }
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGPlayerBriefData)
}

void GCGPlayerBriefData::SharedCtor() {
  nick_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&profile_picture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&profile_picture_)) + sizeof(uid_));
  _cached_size_ = 0;
}

GCGPlayerBriefData::~GCGPlayerBriefData() {
  // @@protoc_insertion_point(destructor:proto.GCGPlayerBriefData)
  SharedDtor();
}

void GCGPlayerBriefData::SharedDtor() {
  nick_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_picture_;
}

void GCGPlayerBriefData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGPlayerBriefData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGPlayerBriefData& GCGPlayerBriefData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGPlayerBriefData* GCGPlayerBriefData::New(::google::protobuf::Arena* arena) const {
  GCGPlayerBriefData* n = new GCGPlayerBriefData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGPlayerBriefData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGPlayerBriefData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_id_list_.Clear();
  card_face_map_.Clear();
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) {
    delete profile_picture_;
  }
  profile_picture_ = NULL;
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool GCGPlayerBriefData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGPlayerBriefData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_id_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_card_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> card_face_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          GCGPlayerBriefData_CardFaceMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGPlayerBriefData_CardFaceMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&card_face_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nick_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nick_name().data(), static_cast<int>(this->nick_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GCGPlayerBriefData.nick_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ProfilePicture profile_picture = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGPlayerBriefData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGPlayerBriefData)
  return false;
#undef DO_
}

void GCGPlayerBriefData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGPlayerBriefData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_id_list = 3;
  if (this->card_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_id_list(i), output);
  }

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->controller_id(), output);
  }

  // map<uint32, uint32> card_face_map = 8;
  if (!this->card_face_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->card_face_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_face_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPlayerBriefData_CardFaceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_face_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPlayerBriefData_CardFaceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it) {
        entry.reset(card_face_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // string nick_name = 9;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick_name().data(), static_cast<int>(this->nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGPlayerBriefData.nick_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->nick_name(), output);
  }

  // uint32 uid = 10;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->uid(), output);
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->profile_picture_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGPlayerBriefData)
}

::google::protobuf::uint8* GCGPlayerBriefData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGPlayerBriefData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_id_list = 3;
  if (this->card_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_id_list_, target);
  }

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->controller_id(), target);
  }

  // map<uint32, uint32> card_face_map = 8;
  if (!this->card_face_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->card_face_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_face_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGPlayerBriefData_CardFaceMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_face_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGPlayerBriefData_CardFaceMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->card_face_map().begin();
          it != this->card_face_map().end(); ++it) {
        entry.reset(card_face_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // string nick_name = 9;
  if (this->nick_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nick_name().data(), static_cast<int>(this->nick_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGPlayerBriefData.nick_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->nick_name(), target);
  }

  // uint32 uid = 10;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->uid(), target);
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->profile_picture_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGPlayerBriefData)
  return target;
}

size_t GCGPlayerBriefData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGPlayerBriefData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_id_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, uint32> card_face_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->card_face_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGPlayerBriefData_CardFaceMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->card_face_map().begin();
        it != this->card_face_map().end(); ++it) {
      entry.reset(card_face_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string nick_name = 9;
  if (this->nick_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nick_name());
  }

  // .proto.ProfilePicture profile_picture = 12;
  if (this->has_profile_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_picture_);
  }

  // uint32 controller_id = 5;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 uid = 10;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGPlayerBriefData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGPlayerBriefData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGPlayerBriefData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGPlayerBriefData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGPlayerBriefData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGPlayerBriefData)
    MergeFrom(*source);
  }
}

void GCGPlayerBriefData::MergeFrom(const GCGPlayerBriefData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGPlayerBriefData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_id_list_.MergeFrom(from.card_id_list_);
  card_face_map_.MergeFrom(from.card_face_map_);
  if (from.nick_name().size() > 0) {

    nick_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nick_name_);
  }
  if (from.has_profile_picture()) {
    mutable_profile_picture()->::proto::ProfilePicture::MergeFrom(from.profile_picture());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void GCGPlayerBriefData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGPlayerBriefData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGPlayerBriefData::CopyFrom(const GCGPlayerBriefData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGPlayerBriefData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGPlayerBriefData::IsInitialized() const {
  return true;
}

void GCGPlayerBriefData::Swap(GCGPlayerBriefData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGPlayerBriefData::InternalSwap(GCGPlayerBriefData* other) {
  using std::swap;
  card_id_list_.InternalSwap(&other->card_id_list_);
  card_face_map_.Swap(&other->card_face_map_);
  nick_name_.Swap(&other->nick_name_);
  swap(profile_picture_, other->profile_picture_);
  swap(controller_id_, other->controller_id_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGPlayerBriefData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGPlayerBriefData

// map<uint32, uint32> card_face_map = 8;
int GCGPlayerBriefData::card_face_map_size() const {
  return card_face_map_.size();
}
void GCGPlayerBriefData::clear_card_face_map() {
  card_face_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGPlayerBriefData::card_face_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPlayerBriefData.card_face_map)
  return card_face_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGPlayerBriefData::mutable_card_face_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPlayerBriefData.card_face_map)
  return card_face_map_.MutableMap();
}

// string nick_name = 9;
void GCGPlayerBriefData::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GCGPlayerBriefData::nick_name() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.nick_name)
  return nick_name_.GetNoArena();
}
void GCGPlayerBriefData::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.nick_name)
}
#if LANG_CXX11
void GCGPlayerBriefData::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGPlayerBriefData.nick_name)
}
#endif
void GCGPlayerBriefData::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGPlayerBriefData.nick_name)
}
void GCGPlayerBriefData::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGPlayerBriefData.nick_name)
}
::std::string* GCGPlayerBriefData::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerBriefData.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GCGPlayerBriefData::release_nick_name() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerBriefData.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GCGPlayerBriefData::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerBriefData.nick_name)
}

// .proto.ProfilePicture profile_picture = 12;
bool GCGPlayerBriefData::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
void GCGPlayerBriefData::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
const ::proto::ProfilePicture& GCGPlayerBriefData::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
::proto::ProfilePicture* GCGPlayerBriefData::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerBriefData.profile_picture)
  return profile_picture_;
}
::proto::ProfilePicture* GCGPlayerBriefData::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerBriefData.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
void GCGPlayerBriefData::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerBriefData.profile_picture)
}

// repeated uint32 card_id_list = 3;
int GCGPlayerBriefData::card_id_list_size() const {
  return card_id_list_.size();
}
void GCGPlayerBriefData::clear_card_id_list() {
  card_id_list_.Clear();
}
::google::protobuf::uint32 GCGPlayerBriefData::card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.card_id_list)
  return card_id_list_.Get(index);
}
void GCGPlayerBriefData::set_card_id_list(int index, ::google::protobuf::uint32 value) {
  card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.card_id_list)
}
void GCGPlayerBriefData::add_card_id_list(::google::protobuf::uint32 value) {
  card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGPlayerBriefData.card_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGPlayerBriefData::card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerBriefData.card_id_list)
  return card_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGPlayerBriefData::mutable_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerBriefData.card_id_list)
  return &card_id_list_;
}

// uint32 controller_id = 5;
void GCGPlayerBriefData::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGPlayerBriefData::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.controller_id)
  return controller_id_;
}
void GCGPlayerBriefData::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.controller_id)
}

// uint32 uid = 10;
void GCGPlayerBriefData::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 GCGPlayerBriefData::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.uid)
  return uid_;
}
void GCGPlayerBriefData::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGGameBriefData::kGameIdFieldNumber;
const int GCGGameBriefData::kGameUidFieldNumber;
const int GCGGameBriefData::kBusinessTypeFieldNumber;
const int GCGGameBriefData::kVerifyCodeFieldNumber;
const int GCGGameBriefData::kPlayerBriefListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGameBriefData::GCGGameBriefData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGameBriefData)
}
GCGGameBriefData::GCGGameBriefData(const GCGGameBriefData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_brief_list_(from.player_brief_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&verify_code_, &from.verify_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&verify_code_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGGameBriefData)
}

void GCGGameBriefData::SharedCtor() {
  ::memset(&verify_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&verify_code_)) + sizeof(game_id_));
  _cached_size_ = 0;
}

GCGGameBriefData::~GCGGameBriefData() {
  // @@protoc_insertion_point(destructor:proto.GCGGameBriefData)
  SharedDtor();
}

void GCGGameBriefData::SharedDtor() {
}

void GCGGameBriefData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGameBriefData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGameBriefData& GCGGameBriefData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGameBriefData* GCGGameBriefData::New(::google::protobuf::Arena* arena) const {
  GCGGameBriefData* n = new GCGGameBriefData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGameBriefData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGameBriefData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_brief_list_.Clear();
  ::memset(&verify_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&verify_code_)) + sizeof(game_id_));
  _internal_metadata_.Clear();
}

bool GCGGameBriefData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGameBriefData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 verify_code = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verify_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGPlayerBriefData player_brief_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_brief_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGGameBusinessType business_type = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_business_type(static_cast< ::proto::GCGGameBusinessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGameBriefData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGameBriefData)
  return false;
#undef DO_
}

void GCGGameBriefData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGameBriefData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 verify_code = 5;
  if (this->verify_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->verify_code(), output);
  }

  // uint32 game_uid = 9;
  if (this->game_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->game_uid(), output);
  }

  // repeated .proto.GCGPlayerBriefData player_brief_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_brief_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->player_brief_list(static_cast<int>(i)), output);
  }

  // .proto.GCGGameBusinessType business_type = 13;
  if (this->business_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->business_type(), output);
  }

  // uint32 game_id = 14;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->game_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGameBriefData)
}

::google::protobuf::uint8* GCGGameBriefData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGameBriefData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 verify_code = 5;
  if (this->verify_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->verify_code(), target);
  }

  // uint32 game_uid = 9;
  if (this->game_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->game_uid(), target);
  }

  // repeated .proto.GCGPlayerBriefData player_brief_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_brief_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->player_brief_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.GCGGameBusinessType business_type = 13;
  if (this->business_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->business_type(), target);
  }

  // uint32 game_id = 14;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->game_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGameBriefData)
  return target;
}

size_t GCGGameBriefData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGameBriefData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGPlayerBriefData player_brief_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->player_brief_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_brief_list(static_cast<int>(i)));
    }
  }

  // uint32 verify_code = 5;
  if (this->verify_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->verify_code());
  }

  // uint32 game_uid = 9;
  if (this->game_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_uid());
  }

  // .proto.GCGGameBusinessType business_type = 13;
  if (this->business_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->business_type());
  }

  // uint32 game_id = 14;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGameBriefData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGameBriefData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGameBriefData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGameBriefData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGameBriefData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGameBriefData)
    MergeFrom(*source);
  }
}

void GCGGameBriefData::MergeFrom(const GCGGameBriefData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGameBriefData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_brief_list_.MergeFrom(from.player_brief_list_);
  if (from.verify_code() != 0) {
    set_verify_code(from.verify_code());
  }
  if (from.game_uid() != 0) {
    set_game_uid(from.game_uid());
  }
  if (from.business_type() != 0) {
    set_business_type(from.business_type());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
}

void GCGGameBriefData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGameBriefData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGameBriefData::CopyFrom(const GCGGameBriefData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGameBriefData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGameBriefData::IsInitialized() const {
  return true;
}

void GCGGameBriefData::Swap(GCGGameBriefData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGameBriefData::InternalSwap(GCGGameBriefData* other) {
  using std::swap;
  player_brief_list_.InternalSwap(&other->player_brief_list_);
  swap(verify_code_, other->verify_code_);
  swap(game_uid_, other->game_uid_);
  swap(business_type_, other->business_type_);
  swap(game_id_, other->game_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGameBriefData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGameBriefData

// uint32 game_id = 14;
void GCGGameBriefData::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 GCGGameBriefData::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.game_id)
  return game_id_;
}
void GCGGameBriefData::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.game_id)
}

// uint32 game_uid = 9;
void GCGGameBriefData::clear_game_uid() {
  game_uid_ = 0u;
}
::google::protobuf::uint32 GCGGameBriefData::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.game_uid)
  return game_uid_;
}
void GCGGameBriefData::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.game_uid)
}

// .proto.GCGGameBusinessType business_type = 13;
void GCGGameBriefData::clear_business_type() {
  business_type_ = 0;
}
::proto::GCGGameBusinessType GCGGameBriefData::business_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
void GCGGameBriefData::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.business_type)
}

// uint32 verify_code = 5;
void GCGGameBriefData::clear_verify_code() {
  verify_code_ = 0u;
}
::google::protobuf::uint32 GCGGameBriefData::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.verify_code)
  return verify_code_;
}
void GCGGameBriefData::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.verify_code)
}

// repeated .proto.GCGPlayerBriefData player_brief_list = 12;
int GCGGameBriefData::player_brief_list_size() const {
  return player_brief_list_.size();
}
void GCGGameBriefData::clear_player_brief_list() {
  player_brief_list_.Clear();
}
const ::proto::GCGPlayerBriefData& GCGGameBriefData::player_brief_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_.Get(index);
}
::proto::GCGPlayerBriefData* GCGGameBriefData::mutable_player_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_.Mutable(index);
}
::proto::GCGPlayerBriefData* GCGGameBriefData::add_player_brief_list() {
  // @@protoc_insertion_point(field_add:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerBriefData >*
GCGGameBriefData::mutable_player_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGGameBriefData.player_brief_list)
  return &player_brief_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerBriefData >&
GCGGameBriefData::player_brief_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGGameBriefDataNotify::kIsNewGameFieldNumber;
const int GCGGameBriefDataNotify::kGcgBriefDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGameBriefDataNotify::GCGGameBriefDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGameBriefDataNotify)
}
GCGGameBriefDataNotify::GCGGameBriefDataNotify(const GCGGameBriefDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gcg_brief_data()) {
    gcg_brief_data_ = new ::proto::GCGGameBriefData(*from.gcg_brief_data_);
  } else {
    gcg_brief_data_ = NULL;
  }
  is_new_game_ = from.is_new_game_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGGameBriefDataNotify)
}

void GCGGameBriefDataNotify::SharedCtor() {
  ::memset(&gcg_brief_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_game_) -
      reinterpret_cast<char*>(&gcg_brief_data_)) + sizeof(is_new_game_));
  _cached_size_ = 0;
}

GCGGameBriefDataNotify::~GCGGameBriefDataNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGGameBriefDataNotify)
  SharedDtor();
}

void GCGGameBriefDataNotify::SharedDtor() {
  if (this != internal_default_instance()) delete gcg_brief_data_;
}

void GCGGameBriefDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGameBriefDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGameBriefDataNotify& GCGGameBriefDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGameBriefDataNotify* GCGGameBriefDataNotify::New(::google::protobuf::Arena* arena) const {
  GCGGameBriefDataNotify* n = new GCGGameBriefDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGameBriefDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGameBriefDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gcg_brief_data_ != NULL) {
    delete gcg_brief_data_;
  }
  gcg_brief_data_ = NULL;
  is_new_game_ = false;
  _internal_metadata_.Clear();
}

bool GCGGameBriefDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGameBriefDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGGameBriefData gcg_brief_data = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gcg_brief_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_game = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGameBriefDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGameBriefDataNotify)
  return false;
#undef DO_
}

void GCGGameBriefDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGameBriefDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGGameBriefData gcg_brief_data = 10;
  if (this->has_gcg_brief_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->gcg_brief_data_, output);
  }

  // bool is_new_game = 11;
  if (this->is_new_game() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_new_game(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGameBriefDataNotify)
}

::google::protobuf::uint8* GCGGameBriefDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGameBriefDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGGameBriefData gcg_brief_data = 10;
  if (this->has_gcg_brief_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->gcg_brief_data_, deterministic, target);
  }

  // bool is_new_game = 11;
  if (this->is_new_game() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_new_game(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGameBriefDataNotify)
  return target;
}

size_t GCGGameBriefDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGameBriefDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGGameBriefData gcg_brief_data = 10;
  if (this->has_gcg_brief_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gcg_brief_data_);
  }

  // bool is_new_game = 11;
  if (this->is_new_game() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGameBriefDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGameBriefDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGameBriefDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGameBriefDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGameBriefDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGameBriefDataNotify)
    MergeFrom(*source);
  }
}

void GCGGameBriefDataNotify::MergeFrom(const GCGGameBriefDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGameBriefDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gcg_brief_data()) {
    mutable_gcg_brief_data()->::proto::GCGGameBriefData::MergeFrom(from.gcg_brief_data());
  }
  if (from.is_new_game() != 0) {
    set_is_new_game(from.is_new_game());
  }
}

void GCGGameBriefDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGameBriefDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGameBriefDataNotify::CopyFrom(const GCGGameBriefDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGameBriefDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGameBriefDataNotify::IsInitialized() const {
  return true;
}

void GCGGameBriefDataNotify::Swap(GCGGameBriefDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGameBriefDataNotify::InternalSwap(GCGGameBriefDataNotify* other) {
  using std::swap;
  swap(gcg_brief_data_, other->gcg_brief_data_);
  swap(is_new_game_, other->is_new_game_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGameBriefDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGameBriefDataNotify

// bool is_new_game = 11;
void GCGGameBriefDataNotify::clear_is_new_game() {
  is_new_game_ = false;
}
bool GCGGameBriefDataNotify::is_new_game() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefDataNotify.is_new_game)
  return is_new_game_;
}
void GCGGameBriefDataNotify::set_is_new_game(bool value) {
  
  is_new_game_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefDataNotify.is_new_game)
}

// .proto.GCGGameBriefData gcg_brief_data = 10;
bool GCGGameBriefDataNotify::has_gcg_brief_data() const {
  return this != internal_default_instance() && gcg_brief_data_ != NULL;
}
void GCGGameBriefDataNotify::clear_gcg_brief_data() {
  if (GetArenaNoVirtual() == NULL && gcg_brief_data_ != NULL) delete gcg_brief_data_;
  gcg_brief_data_ = NULL;
}
const ::proto::GCGGameBriefData& GCGGameBriefDataNotify::gcg_brief_data() const {
  const ::proto::GCGGameBriefData* p = gcg_brief_data_;
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefDataNotify.gcg_brief_data)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGGameBriefData*>(
      &::proto::_GCGGameBriefData_default_instance_);
}
::proto::GCGGameBriefData* GCGGameBriefDataNotify::mutable_gcg_brief_data() {
  
  if (gcg_brief_data_ == NULL) {
    gcg_brief_data_ = new ::proto::GCGGameBriefData;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGGameBriefDataNotify.gcg_brief_data)
  return gcg_brief_data_;
}
::proto::GCGGameBriefData* GCGGameBriefDataNotify::release_gcg_brief_data() {
  // @@protoc_insertion_point(field_release:proto.GCGGameBriefDataNotify.gcg_brief_data)
  
  ::proto::GCGGameBriefData* temp = gcg_brief_data_;
  gcg_brief_data_ = NULL;
  return temp;
}
void GCGGameBriefDataNotify::set_allocated_gcg_brief_data(::proto::GCGGameBriefData* gcg_brief_data) {
  delete gcg_brief_data_;
  gcg_brief_data_ = gcg_brief_data;
  if (gcg_brief_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGGameBriefDataNotify.gcg_brief_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGInitFinishReq::GCGInitFinishReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGInitFinishReq)
}
GCGInitFinishReq::GCGInitFinishReq(const GCGInitFinishReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGInitFinishReq)
}

void GCGInitFinishReq::SharedCtor() {
  _cached_size_ = 0;
}

GCGInitFinishReq::~GCGInitFinishReq() {
  // @@protoc_insertion_point(destructor:proto.GCGInitFinishReq)
  SharedDtor();
}

void GCGInitFinishReq::SharedDtor() {
}

void GCGInitFinishReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGInitFinishReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGInitFinishReq& GCGInitFinishReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGInitFinishReq* GCGInitFinishReq::New(::google::protobuf::Arena* arena) const {
  GCGInitFinishReq* n = new GCGInitFinishReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGInitFinishReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGInitFinishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGInitFinishReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGInitFinishReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGInitFinishReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGInitFinishReq)
  return false;
#undef DO_
}

void GCGInitFinishReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGInitFinishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGInitFinishReq)
}

::google::protobuf::uint8* GCGInitFinishReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGInitFinishReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGInitFinishReq)
  return target;
}

size_t GCGInitFinishReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGInitFinishReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGInitFinishReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGInitFinishReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGInitFinishReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGInitFinishReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGInitFinishReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGInitFinishReq)
    MergeFrom(*source);
  }
}

void GCGInitFinishReq::MergeFrom(const GCGInitFinishReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGInitFinishReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGInitFinishReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGInitFinishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGInitFinishReq::CopyFrom(const GCGInitFinishReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGInitFinishReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGInitFinishReq::IsInitialized() const {
  return true;
}

void GCGInitFinishReq::Swap(GCGInitFinishReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGInitFinishReq::InternalSwap(GCGInitFinishReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGInitFinishReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGInitFinishReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGInitFinishRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGInitFinishRsp::GCGInitFinishRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGInitFinishRsp)
}
GCGInitFinishRsp::GCGInitFinishRsp(const GCGInitFinishRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGInitFinishRsp)
}

void GCGInitFinishRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GCGInitFinishRsp::~GCGInitFinishRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGInitFinishRsp)
  SharedDtor();
}

void GCGInitFinishRsp::SharedDtor() {
}

void GCGInitFinishRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGInitFinishRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGInitFinishRsp& GCGInitFinishRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGInitFinishRsp* GCGInitFinishRsp::New(::google::protobuf::Arena* arena) const {
  GCGInitFinishRsp* n = new GCGInitFinishRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGInitFinishRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGInitFinishRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GCGInitFinishRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGInitFinishRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGInitFinishRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGInitFinishRsp)
  return false;
#undef DO_
}

void GCGInitFinishRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGInitFinishRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGInitFinishRsp)
}

::google::protobuf::uint8* GCGInitFinishRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGInitFinishRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGInitFinishRsp)
  return target;
}

size_t GCGInitFinishRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGInitFinishRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGInitFinishRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGInitFinishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGInitFinishRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGInitFinishRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGInitFinishRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGInitFinishRsp)
    MergeFrom(*source);
  }
}

void GCGInitFinishRsp::MergeFrom(const GCGInitFinishRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGInitFinishRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGInitFinishRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGInitFinishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGInitFinishRsp::CopyFrom(const GCGInitFinishRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGInitFinishRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGInitFinishRsp::IsInitialized() const {
  return true;
}

void GCGInitFinishRsp::Swap(GCGInitFinishRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGInitFinishRsp::InternalSwap(GCGInitFinishRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGInitFinishRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGInitFinishRsp

// int32 retcode = 2;
void GCGInitFinishRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGInitFinishRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGInitFinishRsp.retcode)
  return retcode_;
}
void GCGInitFinishRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInitFinishRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGHeartBeatNotify::kServerSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGHeartBeatNotify::GCGHeartBeatNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGHeartBeatNotify)
}
GCGHeartBeatNotify::GCGHeartBeatNotify(const GCGHeartBeatNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_seq_ = from.server_seq_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGHeartBeatNotify)
}

void GCGHeartBeatNotify::SharedCtor() {
  server_seq_ = 0u;
  _cached_size_ = 0;
}

GCGHeartBeatNotify::~GCGHeartBeatNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGHeartBeatNotify)
  SharedDtor();
}

void GCGHeartBeatNotify::SharedDtor() {
}

void GCGHeartBeatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGHeartBeatNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGHeartBeatNotify& GCGHeartBeatNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGHeartBeatNotify* GCGHeartBeatNotify::New(::google::protobuf::Arena* arena) const {
  GCGHeartBeatNotify* n = new GCGHeartBeatNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGHeartBeatNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGHeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_seq_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGHeartBeatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGHeartBeatNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_seq = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGHeartBeatNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGHeartBeatNotify)
  return false;
#undef DO_
}

void GCGHeartBeatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGHeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_seq = 6;
  if (this->server_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->server_seq(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGHeartBeatNotify)
}

::google::protobuf::uint8* GCGHeartBeatNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGHeartBeatNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_seq = 6;
  if (this->server_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->server_seq(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGHeartBeatNotify)
  return target;
}

size_t GCGHeartBeatNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGHeartBeatNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 server_seq = 6;
  if (this->server_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGHeartBeatNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGHeartBeatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGHeartBeatNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGHeartBeatNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGHeartBeatNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGHeartBeatNotify)
    MergeFrom(*source);
  }
}

void GCGHeartBeatNotify::MergeFrom(const GCGHeartBeatNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGHeartBeatNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.server_seq() != 0) {
    set_server_seq(from.server_seq());
  }
}

void GCGHeartBeatNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGHeartBeatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGHeartBeatNotify::CopyFrom(const GCGHeartBeatNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGHeartBeatNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGHeartBeatNotify::IsInitialized() const {
  return true;
}

void GCGHeartBeatNotify::Swap(GCGHeartBeatNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGHeartBeatNotify::InternalSwap(GCGHeartBeatNotify* other) {
  using std::swap;
  swap(server_seq_, other->server_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGHeartBeatNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGHeartBeatNotify

// uint32 server_seq = 6;
void GCGHeartBeatNotify::clear_server_seq() {
  server_seq_ = 0u;
}
::google::protobuf::uint32 GCGHeartBeatNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGHeartBeatNotify.server_seq)
  return server_seq_;
}
void GCGHeartBeatNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGHeartBeatNotify.server_seq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewHpInfo::kChangeTypeFieldNumber;
const int GCGSkillPreviewHpInfo::kHpChangeValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewHpInfo::GCGSkillPreviewHpInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewHpInfo)
}
GCGSkillPreviewHpInfo::GCGSkillPreviewHpInfo(const GCGSkillPreviewHpInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&change_type_, &from.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&hp_change_value_) -
    reinterpret_cast<char*>(&change_type_)) + sizeof(hp_change_value_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewHpInfo)
}

void GCGSkillPreviewHpInfo::SharedCtor() {
  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_change_value_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(hp_change_value_));
  _cached_size_ = 0;
}

GCGSkillPreviewHpInfo::~GCGSkillPreviewHpInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewHpInfo)
  SharedDtor();
}

void GCGSkillPreviewHpInfo::SharedDtor() {
}

void GCGSkillPreviewHpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewHpInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewHpInfo& GCGSkillPreviewHpInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewHpInfo* GCGSkillPreviewHpInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewHpInfo* n = new GCGSkillPreviewHpInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewHpInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewHpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&change_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hp_change_value_) -
      reinterpret_cast<char*>(&change_type_)) + sizeof(hp_change_value_));
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewHpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewHpInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGSkillHpChangeType change_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_change_type(static_cast< ::proto::GCGSkillHpChangeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hp_change_value = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_change_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewHpInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewHpInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewHpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewHpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSkillHpChangeType change_type = 4;
  if (this->change_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->change_type(), output);
  }

  // uint32 hp_change_value = 13;
  if (this->hp_change_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->hp_change_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewHpInfo)
}

::google::protobuf::uint8* GCGSkillPreviewHpInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewHpInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSkillHpChangeType change_type = 4;
  if (this->change_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->change_type(), target);
  }

  // uint32 hp_change_value = 13;
  if (this->hp_change_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->hp_change_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewHpInfo)
  return target;
}

size_t GCGSkillPreviewHpInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewHpInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGSkillHpChangeType change_type = 4;
  if (this->change_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->change_type());
  }

  // uint32 hp_change_value = 13;
  if (this->hp_change_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hp_change_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewHpInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewHpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewHpInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewHpInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewHpInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewHpInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewHpInfo::MergeFrom(const GCGSkillPreviewHpInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewHpInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.change_type() != 0) {
    set_change_type(from.change_type());
  }
  if (from.hp_change_value() != 0) {
    set_hp_change_value(from.hp_change_value());
  }
}

void GCGSkillPreviewHpInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewHpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewHpInfo::CopyFrom(const GCGSkillPreviewHpInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewHpInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewHpInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewHpInfo::Swap(GCGSkillPreviewHpInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewHpInfo::InternalSwap(GCGSkillPreviewHpInfo* other) {
  using std::swap;
  swap(change_type_, other->change_type_);
  swap(hp_change_value_, other->hp_change_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewHpInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewHpInfo

// .proto.GCGSkillHpChangeType change_type = 4;
void GCGSkillPreviewHpInfo::clear_change_type() {
  change_type_ = 0;
}
::proto::GCGSkillHpChangeType GCGSkillPreviewHpInfo::change_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewHpInfo.change_type)
  return static_cast< ::proto::GCGSkillHpChangeType >(change_type_);
}
void GCGSkillPreviewHpInfo::set_change_type(::proto::GCGSkillHpChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewHpInfo.change_type)
}

// uint32 hp_change_value = 13;
void GCGSkillPreviewHpInfo::clear_hp_change_value() {
  hp_change_value_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewHpInfo::hp_change_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewHpInfo.hp_change_value)
  return hp_change_value_;
}
void GCGSkillPreviewHpInfo::set_hp_change_value(::google::protobuf::uint32 value) {
  
  hp_change_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewHpInfo.hp_change_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewReactionInfo::kSourceElementFieldNumber;
const int GCGSkillPreviewReactionInfo::kTargetElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewReactionInfo::GCGSkillPreviewReactionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewReactionInfo)
}
GCGSkillPreviewReactionInfo::GCGSkillPreviewReactionInfo(const GCGSkillPreviewReactionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_element_, &from.target_element_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_element_) -
    reinterpret_cast<char*>(&target_element_)) + sizeof(source_element_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewReactionInfo)
}

void GCGSkillPreviewReactionInfo::SharedCtor() {
  ::memset(&target_element_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_element_) -
      reinterpret_cast<char*>(&target_element_)) + sizeof(source_element_));
  _cached_size_ = 0;
}

GCGSkillPreviewReactionInfo::~GCGSkillPreviewReactionInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewReactionInfo)
  SharedDtor();
}

void GCGSkillPreviewReactionInfo::SharedDtor() {
}

void GCGSkillPreviewReactionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewReactionInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewReactionInfo& GCGSkillPreviewReactionInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewReactionInfo* GCGSkillPreviewReactionInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewReactionInfo* n = new GCGSkillPreviewReactionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewReactionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewReactionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_element_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_element_) -
      reinterpret_cast<char*>(&target_element_)) + sizeof(source_element_));
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewReactionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewReactionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_element = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_element_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_element = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_element_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewReactionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewReactionInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewReactionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewReactionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_element = 1;
  if (this->target_element() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_element(), output);
  }

  // uint32 source_element = 13;
  if (this->source_element() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->source_element(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewReactionInfo)
}

::google::protobuf::uint8* GCGSkillPreviewReactionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewReactionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_element = 1;
  if (this->target_element() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_element(), target);
  }

  // uint32 source_element = 13;
  if (this->source_element() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->source_element(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewReactionInfo)
  return target;
}

size_t GCGSkillPreviewReactionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewReactionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_element = 1;
  if (this->target_element() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_element());
  }

  // uint32 source_element = 13;
  if (this->source_element() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_element());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewReactionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewReactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewReactionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewReactionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewReactionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewReactionInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewReactionInfo::MergeFrom(const GCGSkillPreviewReactionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewReactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_element() != 0) {
    set_target_element(from.target_element());
  }
  if (from.source_element() != 0) {
    set_source_element(from.source_element());
  }
}

void GCGSkillPreviewReactionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewReactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewReactionInfo::CopyFrom(const GCGSkillPreviewReactionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewReactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewReactionInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewReactionInfo::Swap(GCGSkillPreviewReactionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewReactionInfo::InternalSwap(GCGSkillPreviewReactionInfo* other) {
  using std::swap;
  swap(target_element_, other->target_element_);
  swap(source_element_, other->source_element_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewReactionInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewReactionInfo

// uint32 source_element = 13;
void GCGSkillPreviewReactionInfo::clear_source_element() {
  source_element_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewReactionInfo::source_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewReactionInfo.source_element)
  return source_element_;
}
void GCGSkillPreviewReactionInfo::set_source_element(::google::protobuf::uint32 value) {
  
  source_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewReactionInfo.source_element)
}

// uint32 target_element = 1;
void GCGSkillPreviewReactionInfo::clear_target_element() {
  target_element_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewReactionInfo::target_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewReactionInfo.target_element)
  return target_element_;
}
void GCGSkillPreviewReactionInfo::set_target_element(::google::protobuf::uint32 value) {
  
  target_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewReactionInfo.target_element)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewElementReactionInfo::kFreshListFieldNumber;
const int GCGSkillPreviewElementReactionInfo::kSourceListFieldNumber;
const int GCGSkillPreviewElementReactionInfo::kReactionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewElementReactionInfo::GCGSkillPreviewElementReactionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewElementReactionInfo)
}
GCGSkillPreviewElementReactionInfo::GCGSkillPreviewElementReactionInfo(const GCGSkillPreviewElementReactionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      source_list_(from.source_list_),
      fresh_list_(from.fresh_list_),
      reaction_list_(from.reaction_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewElementReactionInfo)
}

void GCGSkillPreviewElementReactionInfo::SharedCtor() {
  _cached_size_ = 0;
}

GCGSkillPreviewElementReactionInfo::~GCGSkillPreviewElementReactionInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewElementReactionInfo)
  SharedDtor();
}

void GCGSkillPreviewElementReactionInfo::SharedDtor() {
}

void GCGSkillPreviewElementReactionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewElementReactionInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewElementReactionInfo& GCGSkillPreviewElementReactionInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewElementReactionInfo* GCGSkillPreviewElementReactionInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewElementReactionInfo* n = new GCGSkillPreviewElementReactionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewElementReactionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewElementReactionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_list_.Clear();
  fresh_list_.Clear();
  reaction_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewElementReactionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewElementReactionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 source_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_source_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_source_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fresh_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fresh_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_fresh_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewReactionInfo reaction_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reaction_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewElementReactionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewElementReactionInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewElementReactionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewElementReactionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 source_list = 2;
  if (this->source_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _source_list_cached_byte_size_));
  }
  for (int i = 0, n = this->source_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->source_list(i), output);
  }

  // repeated uint32 fresh_list = 8;
  if (this->fresh_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fresh_list_cached_byte_size_));
  }
  for (int i = 0, n = this->fresh_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->fresh_list(i), output);
  }

  // repeated .proto.GCGSkillPreviewReactionInfo reaction_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reaction_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->reaction_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewElementReactionInfo)
}

::google::protobuf::uint8* GCGSkillPreviewElementReactionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewElementReactionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 source_list = 2;
  if (this->source_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _source_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->source_list_, target);
  }

  // repeated uint32 fresh_list = 8;
  if (this->fresh_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fresh_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->fresh_list_, target);
  }

  // repeated .proto.GCGSkillPreviewReactionInfo reaction_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reaction_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->reaction_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewElementReactionInfo)
  return target;
}

size_t GCGSkillPreviewElementReactionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewElementReactionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 source_list = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->source_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _source_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 fresh_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fresh_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fresh_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGSkillPreviewReactionInfo reaction_list = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->reaction_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reaction_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewElementReactionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewElementReactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewElementReactionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewElementReactionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewElementReactionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewElementReactionInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewElementReactionInfo::MergeFrom(const GCGSkillPreviewElementReactionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewElementReactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_list_.MergeFrom(from.source_list_);
  fresh_list_.MergeFrom(from.fresh_list_);
  reaction_list_.MergeFrom(from.reaction_list_);
}

void GCGSkillPreviewElementReactionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewElementReactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewElementReactionInfo::CopyFrom(const GCGSkillPreviewElementReactionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewElementReactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewElementReactionInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewElementReactionInfo::Swap(GCGSkillPreviewElementReactionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewElementReactionInfo::InternalSwap(GCGSkillPreviewElementReactionInfo* other) {
  using std::swap;
  source_list_.InternalSwap(&other->source_list_);
  fresh_list_.InternalSwap(&other->fresh_list_);
  reaction_list_.InternalSwap(&other->reaction_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewElementReactionInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewElementReactionInfo

// repeated uint32 fresh_list = 8;
int GCGSkillPreviewElementReactionInfo::fresh_list_size() const {
  return fresh_list_.size();
}
void GCGSkillPreviewElementReactionInfo::clear_fresh_list() {
  fresh_list_.Clear();
}
::google::protobuf::uint32 GCGSkillPreviewElementReactionInfo::fresh_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
  return fresh_list_.Get(index);
}
void GCGSkillPreviewElementReactionInfo::set_fresh_list(int index, ::google::protobuf::uint32 value) {
  fresh_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
}
void GCGSkillPreviewElementReactionInfo::add_fresh_list(::google::protobuf::uint32 value) {
  fresh_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSkillPreviewElementReactionInfo::fresh_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
  return fresh_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSkillPreviewElementReactionInfo::mutable_fresh_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
  return &fresh_list_;
}

// repeated uint32 source_list = 2;
int GCGSkillPreviewElementReactionInfo::source_list_size() const {
  return source_list_.size();
}
void GCGSkillPreviewElementReactionInfo::clear_source_list() {
  source_list_.Clear();
}
::google::protobuf::uint32 GCGSkillPreviewElementReactionInfo::source_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewElementReactionInfo.source_list)
  return source_list_.Get(index);
}
void GCGSkillPreviewElementReactionInfo::set_source_list(int index, ::google::protobuf::uint32 value) {
  source_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewElementReactionInfo.source_list)
}
void GCGSkillPreviewElementReactionInfo::add_source_list(::google::protobuf::uint32 value) {
  source_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewElementReactionInfo.source_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSkillPreviewElementReactionInfo::source_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewElementReactionInfo.source_list)
  return source_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSkillPreviewElementReactionInfo::mutable_source_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewElementReactionInfo.source_list)
  return &source_list_;
}

// repeated .proto.GCGSkillPreviewReactionInfo reaction_list = 14;
int GCGSkillPreviewElementReactionInfo::reaction_list_size() const {
  return reaction_list_.size();
}
void GCGSkillPreviewElementReactionInfo::clear_reaction_list() {
  reaction_list_.Clear();
}
const ::proto::GCGSkillPreviewReactionInfo& GCGSkillPreviewElementReactionInfo::reaction_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_.Get(index);
}
::proto::GCGSkillPreviewReactionInfo* GCGSkillPreviewElementReactionInfo::mutable_reaction_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_.Mutable(index);
}
::proto::GCGSkillPreviewReactionInfo* GCGSkillPreviewElementReactionInfo::add_reaction_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewReactionInfo >*
GCGSkillPreviewElementReactionInfo::mutable_reaction_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return &reaction_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewReactionInfo >&
GCGSkillPreviewElementReactionInfo::reaction_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewCardInfo::kControllerIdFieldNumber;
const int GCGSkillPreviewCardInfo::kOwnerCardGuidFieldNumber;
const int GCGSkillPreviewCardInfo::kZoneTypeFieldNumber;
const int GCGSkillPreviewCardInfo::kCardIdFieldNumber;
const int GCGSkillPreviewCardInfo::kCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewCardInfo::GCGSkillPreviewCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewCardInfo)
}
GCGSkillPreviewCardInfo::GCGSkillPreviewCardInfo(const GCGSkillPreviewCardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&controller_id_, &from.controller_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&controller_id_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewCardInfo)
}

void GCGSkillPreviewCardInfo::SharedCtor() {
  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

GCGSkillPreviewCardInfo::~GCGSkillPreviewCardInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewCardInfo)
  SharedDtor();
}

void GCGSkillPreviewCardInfo::SharedDtor() {
}

void GCGSkillPreviewCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewCardInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewCardInfo& GCGSkillPreviewCardInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewCardInfo* GCGSkillPreviewCardInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewCardInfo* n = new GCGSkillPreviewCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&controller_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&controller_id_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 controller_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_guid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_card_guid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGZoneType zone_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_zone_type(static_cast< ::proto::GCGZoneType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewCardInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 3;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->controller_id(), output);
  }

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_guid(), output);
  }

  // uint32 owner_card_guid = 11;
  if (this->owner_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->owner_card_guid(), output);
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->card_id(), output);
  }

  // .proto.GCGZoneType zone_type = 14;
  if (this->zone_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->zone_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewCardInfo)
}

::google::protobuf::uint8* GCGSkillPreviewCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 controller_id = 3;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->controller_id(), target);
  }

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_guid(), target);
  }

  // uint32 owner_card_guid = 11;
  if (this->owner_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->owner_card_guid(), target);
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->card_id(), target);
  }

  // .proto.GCGZoneType zone_type = 14;
  if (this->zone_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->zone_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewCardInfo)
  return target;
}

size_t GCGSkillPreviewCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewCardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 controller_id = 3;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // .proto.GCGZoneType zone_type = 14;
  if (this->zone_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->zone_type());
  }

  // uint32 owner_card_guid = 11;
  if (this->owner_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_card_guid());
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewCardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewCardInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewCardInfo::MergeFrom(const GCGSkillPreviewCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.zone_type() != 0) {
    set_zone_type(from.zone_type());
  }
  if (from.owner_card_guid() != 0) {
    set_owner_card_guid(from.owner_card_guid());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void GCGSkillPreviewCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewCardInfo::CopyFrom(const GCGSkillPreviewCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewCardInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewCardInfo::Swap(GCGSkillPreviewCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewCardInfo::InternalSwap(GCGSkillPreviewCardInfo* other) {
  using std::swap;
  swap(controller_id_, other->controller_id_);
  swap(card_guid_, other->card_guid_);
  swap(zone_type_, other->zone_type_);
  swap(owner_card_guid_, other->owner_card_guid_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewCardInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewCardInfo

// uint32 controller_id = 3;
void GCGSkillPreviewCardInfo::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewCardInfo::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.controller_id)
  return controller_id_;
}
void GCGSkillPreviewCardInfo::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.controller_id)
}

// uint32 owner_card_guid = 11;
void GCGSkillPreviewCardInfo::clear_owner_card_guid() {
  owner_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewCardInfo::owner_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.owner_card_guid)
  return owner_card_guid_;
}
void GCGSkillPreviewCardInfo::set_owner_card_guid(::google::protobuf::uint32 value) {
  
  owner_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.owner_card_guid)
}

// .proto.GCGZoneType zone_type = 14;
void GCGSkillPreviewCardInfo::clear_zone_type() {
  zone_type_ = 0;
}
::proto::GCGZoneType GCGSkillPreviewCardInfo::zone_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.zone_type)
  return static_cast< ::proto::GCGZoneType >(zone_type_);
}
void GCGSkillPreviewCardInfo::set_zone_type(::proto::GCGZoneType value) {
  
  zone_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.zone_type)
}

// uint32 card_id = 13;
void GCGSkillPreviewCardInfo::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.card_id)
  return card_id_;
}
void GCGSkillPreviewCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.card_id)
}

// uint32 card_guid = 6;
void GCGSkillPreviewCardInfo::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewCardInfo::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.card_guid)
  return card_guid_;
}
void GCGSkillPreviewCardInfo::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewOnstageChangeInfo::kTargetOnstageCardGuidFieldNumber;
const int GCGSkillPreviewOnstageChangeInfo::kSourceOnstageCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewOnstageChangeInfo::GCGSkillPreviewOnstageChangeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewOnstageChangeInfo)
}
GCGSkillPreviewOnstageChangeInfo::GCGSkillPreviewOnstageChangeInfo(const GCGSkillPreviewOnstageChangeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_onstage_card_guid_, &from.target_onstage_card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_onstage_card_guid_) -
    reinterpret_cast<char*>(&target_onstage_card_guid_)) + sizeof(source_onstage_card_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewOnstageChangeInfo)
}

void GCGSkillPreviewOnstageChangeInfo::SharedCtor() {
  ::memset(&target_onstage_card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_onstage_card_guid_) -
      reinterpret_cast<char*>(&target_onstage_card_guid_)) + sizeof(source_onstage_card_guid_));
  _cached_size_ = 0;
}

GCGSkillPreviewOnstageChangeInfo::~GCGSkillPreviewOnstageChangeInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewOnstageChangeInfo)
  SharedDtor();
}

void GCGSkillPreviewOnstageChangeInfo::SharedDtor() {
}

void GCGSkillPreviewOnstageChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewOnstageChangeInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewOnstageChangeInfo& GCGSkillPreviewOnstageChangeInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewOnstageChangeInfo* GCGSkillPreviewOnstageChangeInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewOnstageChangeInfo* n = new GCGSkillPreviewOnstageChangeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewOnstageChangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewOnstageChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_onstage_card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_onstage_card_guid_) -
      reinterpret_cast<char*>(&target_onstage_card_guid_)) + sizeof(source_onstage_card_guid_));
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewOnstageChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewOnstageChangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_onstage_card_guid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_onstage_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_onstage_card_guid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_onstage_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewOnstageChangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewOnstageChangeInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewOnstageChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewOnstageChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_onstage_card_guid = 6;
  if (this->target_onstage_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_onstage_card_guid(), output);
  }

  // uint32 source_onstage_card_guid = 15;
  if (this->source_onstage_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->source_onstage_card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewOnstageChangeInfo)
}

::google::protobuf::uint8* GCGSkillPreviewOnstageChangeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewOnstageChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_onstage_card_guid = 6;
  if (this->target_onstage_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_onstage_card_guid(), target);
  }

  // uint32 source_onstage_card_guid = 15;
  if (this->source_onstage_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->source_onstage_card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewOnstageChangeInfo)
  return target;
}

size_t GCGSkillPreviewOnstageChangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewOnstageChangeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_onstage_card_guid = 6;
  if (this->target_onstage_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_onstage_card_guid());
  }

  // uint32 source_onstage_card_guid = 15;
  if (this->source_onstage_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_onstage_card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewOnstageChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewOnstageChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewOnstageChangeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewOnstageChangeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewOnstageChangeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewOnstageChangeInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewOnstageChangeInfo::MergeFrom(const GCGSkillPreviewOnstageChangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewOnstageChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_onstage_card_guid() != 0) {
    set_target_onstage_card_guid(from.target_onstage_card_guid());
  }
  if (from.source_onstage_card_guid() != 0) {
    set_source_onstage_card_guid(from.source_onstage_card_guid());
  }
}

void GCGSkillPreviewOnstageChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewOnstageChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewOnstageChangeInfo::CopyFrom(const GCGSkillPreviewOnstageChangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewOnstageChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewOnstageChangeInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewOnstageChangeInfo::Swap(GCGSkillPreviewOnstageChangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewOnstageChangeInfo::InternalSwap(GCGSkillPreviewOnstageChangeInfo* other) {
  using std::swap;
  swap(target_onstage_card_guid_, other->target_onstage_card_guid_);
  swap(source_onstage_card_guid_, other->source_onstage_card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewOnstageChangeInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewOnstageChangeInfo

// uint32 target_onstage_card_guid = 6;
void GCGSkillPreviewOnstageChangeInfo::clear_target_onstage_card_guid() {
  target_onstage_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewOnstageChangeInfo::target_onstage_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewOnstageChangeInfo.target_onstage_card_guid)
  return target_onstage_card_guid_;
}
void GCGSkillPreviewOnstageChangeInfo::set_target_onstage_card_guid(::google::protobuf::uint32 value) {
  
  target_onstage_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewOnstageChangeInfo.target_onstage_card_guid)
}

// uint32 source_onstage_card_guid = 15;
void GCGSkillPreviewOnstageChangeInfo::clear_source_onstage_card_guid() {
  source_onstage_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewOnstageChangeInfo::source_onstage_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewOnstageChangeInfo.source_onstage_card_guid)
  return source_onstage_card_guid_;
}
void GCGSkillPreviewOnstageChangeInfo::set_source_onstage_card_guid(::google::protobuf::uint32 value) {
  
  source_onstage_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewOnstageChangeInfo.source_onstage_card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewTokenInfo::kTokenTypeFieldNumber;
const int GCGSkillPreviewTokenInfo::kAfterValueFieldNumber;
const int GCGSkillPreviewTokenInfo::kBeforeValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewTokenInfo::GCGSkillPreviewTokenInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewTokenInfo)
}
GCGSkillPreviewTokenInfo::GCGSkillPreviewTokenInfo(const GCGSkillPreviewTokenInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&before_value_, &from.before_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&after_value_) -
    reinterpret_cast<char*>(&before_value_)) + sizeof(after_value_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewTokenInfo)
}

void GCGSkillPreviewTokenInfo::SharedCtor() {
  ::memset(&before_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&after_value_) -
      reinterpret_cast<char*>(&before_value_)) + sizeof(after_value_));
  _cached_size_ = 0;
}

GCGSkillPreviewTokenInfo::~GCGSkillPreviewTokenInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewTokenInfo)
  SharedDtor();
}

void GCGSkillPreviewTokenInfo::SharedDtor() {
}

void GCGSkillPreviewTokenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewTokenInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewTokenInfo& GCGSkillPreviewTokenInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewTokenInfo* GCGSkillPreviewTokenInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewTokenInfo* n = new GCGSkillPreviewTokenInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewTokenInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewTokenInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&before_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&after_value_) -
      reinterpret_cast<char*>(&before_value_)) + sizeof(after_value_));
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewTokenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewTokenInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 token_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &token_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 after_value = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &after_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 before_value = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &before_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewTokenInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewTokenInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewTokenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewTokenInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token_type = 3;
  if (this->token_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->token_type(), output);
  }

  // uint32 after_value = 12;
  if (this->after_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->after_value(), output);
  }

  // uint32 before_value = 15;
  if (this->before_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->before_value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewTokenInfo)
}

::google::protobuf::uint8* GCGSkillPreviewTokenInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewTokenInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 token_type = 3;
  if (this->token_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->token_type(), target);
  }

  // uint32 after_value = 12;
  if (this->after_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->after_value(), target);
  }

  // uint32 before_value = 15;
  if (this->before_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->before_value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewTokenInfo)
  return target;
}

size_t GCGSkillPreviewTokenInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewTokenInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 before_value = 15;
  if (this->before_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->before_value());
  }

  // uint32 token_type = 3;
  if (this->token_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->token_type());
  }

  // uint32 after_value = 12;
  if (this->after_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->after_value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewTokenInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewTokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewTokenInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewTokenInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewTokenInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewTokenInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewTokenInfo::MergeFrom(const GCGSkillPreviewTokenInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewTokenInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.before_value() != 0) {
    set_before_value(from.before_value());
  }
  if (from.token_type() != 0) {
    set_token_type(from.token_type());
  }
  if (from.after_value() != 0) {
    set_after_value(from.after_value());
  }
}

void GCGSkillPreviewTokenInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewTokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewTokenInfo::CopyFrom(const GCGSkillPreviewTokenInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewTokenInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewTokenInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewTokenInfo::Swap(GCGSkillPreviewTokenInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewTokenInfo::InternalSwap(GCGSkillPreviewTokenInfo* other) {
  using std::swap;
  swap(before_value_, other->before_value_);
  swap(token_type_, other->token_type_);
  swap(after_value_, other->after_value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewTokenInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewTokenInfo

// uint32 token_type = 3;
void GCGSkillPreviewTokenInfo::clear_token_type() {
  token_type_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewTokenInfo::token_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenInfo.token_type)
  return token_type_;
}
void GCGSkillPreviewTokenInfo::set_token_type(::google::protobuf::uint32 value) {
  
  token_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewTokenInfo.token_type)
}

// uint32 after_value = 12;
void GCGSkillPreviewTokenInfo::clear_after_value() {
  after_value_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewTokenInfo::after_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenInfo.after_value)
  return after_value_;
}
void GCGSkillPreviewTokenInfo::set_after_value(::google::protobuf::uint32 value) {
  
  after_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewTokenInfo.after_value)
}

// uint32 before_value = 15;
void GCGSkillPreviewTokenInfo::clear_before_value() {
  before_value_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewTokenInfo::before_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenInfo.before_value)
  return before_value_;
}
void GCGSkillPreviewTokenInfo::set_before_value(::google::protobuf::uint32 value) {
  
  before_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewTokenInfo.before_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewTokenChangeInfo::kTokenChangeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewTokenChangeInfo::GCGSkillPreviewTokenChangeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewTokenChangeInfo)
}
GCGSkillPreviewTokenChangeInfo::GCGSkillPreviewTokenChangeInfo(const GCGSkillPreviewTokenChangeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      token_change_list_(from.token_change_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewTokenChangeInfo)
}

void GCGSkillPreviewTokenChangeInfo::SharedCtor() {
  _cached_size_ = 0;
}

GCGSkillPreviewTokenChangeInfo::~GCGSkillPreviewTokenChangeInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewTokenChangeInfo)
  SharedDtor();
}

void GCGSkillPreviewTokenChangeInfo::SharedDtor() {
}

void GCGSkillPreviewTokenChangeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewTokenChangeInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewTokenChangeInfo& GCGSkillPreviewTokenChangeInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewTokenChangeInfo* GCGSkillPreviewTokenChangeInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewTokenChangeInfo* n = new GCGSkillPreviewTokenChangeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewTokenChangeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewTokenChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_change_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewTokenChangeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewTokenChangeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGSkillPreviewTokenInfo token_change_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_token_change_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewTokenChangeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewTokenChangeInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewTokenChangeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewTokenChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGSkillPreviewTokenInfo token_change_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_change_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->token_change_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewTokenChangeInfo)
}

::google::protobuf::uint8* GCGSkillPreviewTokenChangeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewTokenChangeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGSkillPreviewTokenInfo token_change_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->token_change_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->token_change_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewTokenChangeInfo)
  return target;
}

size_t GCGSkillPreviewTokenChangeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewTokenChangeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGSkillPreviewTokenInfo token_change_list = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->token_change_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->token_change_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewTokenChangeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewTokenChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewTokenChangeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewTokenChangeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewTokenChangeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewTokenChangeInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewTokenChangeInfo::MergeFrom(const GCGSkillPreviewTokenChangeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewTokenChangeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  token_change_list_.MergeFrom(from.token_change_list_);
}

void GCGSkillPreviewTokenChangeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewTokenChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewTokenChangeInfo::CopyFrom(const GCGSkillPreviewTokenChangeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewTokenChangeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewTokenChangeInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewTokenChangeInfo::Swap(GCGSkillPreviewTokenChangeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewTokenChangeInfo::InternalSwap(GCGSkillPreviewTokenChangeInfo* other) {
  using std::swap;
  token_change_list_.InternalSwap(&other->token_change_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewTokenChangeInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewTokenChangeInfo

// repeated .proto.GCGSkillPreviewTokenInfo token_change_list = 14;
int GCGSkillPreviewTokenChangeInfo::token_change_list_size() const {
  return token_change_list_.size();
}
void GCGSkillPreviewTokenChangeInfo::clear_token_change_list() {
  token_change_list_.Clear();
}
const ::proto::GCGSkillPreviewTokenInfo& GCGSkillPreviewTokenChangeInfo::token_change_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_.Get(index);
}
::proto::GCGSkillPreviewTokenInfo* GCGSkillPreviewTokenChangeInfo::mutable_token_change_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_.Mutable(index);
}
::proto::GCGSkillPreviewTokenInfo* GCGSkillPreviewTokenChangeInfo::add_token_change_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewTokenInfo >*
GCGSkillPreviewTokenChangeInfo::mutable_token_change_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return &token_change_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewTokenInfo >&
GCGSkillPreviewTokenChangeInfo::token_change_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewExtraInfo::kFailAddedWhenFullListFieldNumber;
const int GCGSkillPreviewExtraInfo::kRefreshCardWhenExistListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewExtraInfo::GCGSkillPreviewExtraInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewExtraInfo)
}
GCGSkillPreviewExtraInfo::GCGSkillPreviewExtraInfo(const GCGSkillPreviewExtraInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      refresh_card_when_exist_list_(from.refresh_card_when_exist_list_),
      fail_added_when_full_list_(from.fail_added_when_full_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewExtraInfo)
}

void GCGSkillPreviewExtraInfo::SharedCtor() {
  _cached_size_ = 0;
}

GCGSkillPreviewExtraInfo::~GCGSkillPreviewExtraInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewExtraInfo)
  SharedDtor();
}

void GCGSkillPreviewExtraInfo::SharedDtor() {
}

void GCGSkillPreviewExtraInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewExtraInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewExtraInfo& GCGSkillPreviewExtraInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewExtraInfo* GCGSkillPreviewExtraInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewExtraInfo* n = new GCGSkillPreviewExtraInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewExtraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewExtraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refresh_card_when_exist_list_.Clear();
  fail_added_when_full_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewExtraInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewExtraInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refresh_card_when_exist_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewCardInfo fail_added_when_full_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fail_added_when_full_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewExtraInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewExtraInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewExtraInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewExtraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_card_when_exist_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->refresh_card_when_exist_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGSkillPreviewCardInfo fail_added_when_full_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fail_added_when_full_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->fail_added_when_full_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewExtraInfo)
}

::google::protobuf::uint8* GCGSkillPreviewExtraInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewExtraInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->refresh_card_when_exist_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->refresh_card_when_exist_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGSkillPreviewCardInfo fail_added_when_full_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fail_added_when_full_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->fail_added_when_full_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewExtraInfo)
  return target;
}

size_t GCGSkillPreviewExtraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewExtraInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->refresh_card_when_exist_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->refresh_card_when_exist_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGSkillPreviewCardInfo fail_added_when_full_list = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->fail_added_when_full_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fail_added_when_full_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewExtraInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewExtraInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewExtraInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewExtraInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewExtraInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewExtraInfo::MergeFrom(const GCGSkillPreviewExtraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewExtraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refresh_card_when_exist_list_.MergeFrom(from.refresh_card_when_exist_list_);
  fail_added_when_full_list_.MergeFrom(from.fail_added_when_full_list_);
}

void GCGSkillPreviewExtraInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewExtraInfo::CopyFrom(const GCGSkillPreviewExtraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewExtraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewExtraInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewExtraInfo::Swap(GCGSkillPreviewExtraInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewExtraInfo::InternalSwap(GCGSkillPreviewExtraInfo* other) {
  using std::swap;
  refresh_card_when_exist_list_.InternalSwap(&other->refresh_card_when_exist_list_);
  fail_added_when_full_list_.InternalSwap(&other->fail_added_when_full_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewExtraInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewExtraInfo

// repeated .proto.GCGSkillPreviewCardInfo fail_added_when_full_list = 14;
int GCGSkillPreviewExtraInfo::fail_added_when_full_list_size() const {
  return fail_added_when_full_list_.size();
}
void GCGSkillPreviewExtraInfo::clear_fail_added_when_full_list() {
  fail_added_when_full_list_.Clear();
}
const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewExtraInfo::fail_added_when_full_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_.Get(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::mutable_fail_added_when_full_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_.Mutable(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::add_fail_added_when_full_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewExtraInfo::mutable_fail_added_when_full_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return &fail_added_when_full_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewExtraInfo::fail_added_when_full_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_;
}

// repeated .proto.GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6;
int GCGSkillPreviewExtraInfo::refresh_card_when_exist_list_size() const {
  return refresh_card_when_exist_list_.size();
}
void GCGSkillPreviewExtraInfo::clear_refresh_card_when_exist_list() {
  refresh_card_when_exist_list_.Clear();
}
const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewExtraInfo::refresh_card_when_exist_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_.Get(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::mutable_refresh_card_when_exist_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_.Mutable(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::add_refresh_card_when_exist_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewExtraInfo::mutable_refresh_card_when_exist_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return &refresh_card_when_exist_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewExtraInfo::refresh_card_when_exist_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGSkillPreviewInfo::GCGSkillPreviewInfo_CardTokenChangeMapEntry::GCGSkillPreviewInfo_CardTokenChangeMapEntry() {}
GCGSkillPreviewInfo::GCGSkillPreviewInfo_CardTokenChangeMapEntry::GCGSkillPreviewInfo_CardTokenChangeMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGSkillPreviewInfo::GCGSkillPreviewInfo_CardTokenChangeMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[98];
}
void GCGSkillPreviewInfo::GCGSkillPreviewInfo_CardTokenChangeMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGSkillPreviewInfo::GCGSkillPreviewInfo_CardTokenChangeMapEntry::MergeFrom(const GCGSkillPreviewInfo_CardTokenChangeMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGSkillPreviewInfo::GCGSkillPreviewInfo_ReactionInfoMapEntry::GCGSkillPreviewInfo_ReactionInfoMapEntry() {}
GCGSkillPreviewInfo::GCGSkillPreviewInfo_ReactionInfoMapEntry::GCGSkillPreviewInfo_ReactionInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGSkillPreviewInfo::GCGSkillPreviewInfo_ReactionInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[99];
}
void GCGSkillPreviewInfo::GCGSkillPreviewInfo_ReactionInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGSkillPreviewInfo::GCGSkillPreviewInfo_ReactionInfoMapEntry::MergeFrom(const GCGSkillPreviewInfo_ReactionInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GCGSkillPreviewInfo::GCGSkillPreviewInfo_HpInfoMapEntry::GCGSkillPreviewInfo_HpInfoMapEntry() {}
GCGSkillPreviewInfo::GCGSkillPreviewInfo_HpInfoMapEntry::GCGSkillPreviewInfo_HpInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GCGSkillPreviewInfo::GCGSkillPreviewInfo_HpInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[100];
}
void GCGSkillPreviewInfo::GCGSkillPreviewInfo_HpInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GCGSkillPreviewInfo::GCGSkillPreviewInfo_HpInfoMapEntry::MergeFrom(const GCGSkillPreviewInfo_HpInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewInfo::kCardTokenChangeMapFieldNumber;
const int GCGSkillPreviewInfo::kReactionInfoMapFieldNumber;
const int GCGSkillPreviewInfo::kHpInfoMapFieldNumber;
const int GCGSkillPreviewInfo::kAddCardListFieldNumber;
const int GCGSkillPreviewInfo::kExtraInfoFieldNumber;
const int GCGSkillPreviewInfo::kSkillIdFieldNumber;
const int GCGSkillPreviewInfo::kChangeOnstageCharacterListFieldNumber;
const int GCGSkillPreviewInfo::kRmCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewInfo::GCGSkillPreviewInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewInfo)
}
GCGSkillPreviewInfo::GCGSkillPreviewInfo(const GCGSkillPreviewInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      change_onstage_character_list_(from.change_onstage_character_list_),
      add_card_list_(from.add_card_list_),
      rm_card_list_(from.rm_card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_token_change_map_.MergeFrom(from.card_token_change_map_);
  reaction_info_map_.MergeFrom(from.reaction_info_map_);
  hp_info_map_.MergeFrom(from.hp_info_map_);
  if (from.has_extra_info()) {
    extra_info_ = new ::proto::GCGSkillPreviewExtraInfo(*from.extra_info_);
  } else {
    extra_info_ = NULL;
  }
  skill_id_ = from.skill_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewInfo)
}

void GCGSkillPreviewInfo::SharedCtor() {
  ::memset(&extra_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_id_) -
      reinterpret_cast<char*>(&extra_info_)) + sizeof(skill_id_));
  _cached_size_ = 0;
}

GCGSkillPreviewInfo::~GCGSkillPreviewInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewInfo)
  SharedDtor();
}

void GCGSkillPreviewInfo::SharedDtor() {
  if (this != internal_default_instance()) delete extra_info_;
}

void GCGSkillPreviewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewInfo& GCGSkillPreviewInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewInfo* GCGSkillPreviewInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewInfo* n = new GCGSkillPreviewInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_token_change_map_.Clear();
  reaction_info_map_.Clear();
  hp_info_map_.Clear();
  change_onstage_character_list_.Clear();
  add_card_list_.Clear();
  rm_card_list_.Clear();
  if (GetArenaNoVirtual() == NULL && extra_info_ != NULL) {
    delete extra_info_;
  }
  extra_info_ = NULL;
  skill_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .proto.GCGSkillPreviewTokenChangeInfo> card_token_change_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          GCGSkillPreviewInfo_CardTokenChangeMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGSkillPreviewInfo_CardTokenChangeMapEntry,
              ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo > > parser(&card_token_change_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.GCGSkillPreviewElementReactionInfo> reaction_info_map = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          GCGSkillPreviewInfo_ReactionInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGSkillPreviewInfo_ReactionInfoMapEntry,
              ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo > > parser(&reaction_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.GCGSkillPreviewHpInfo> hp_info_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          GCGSkillPreviewInfo_HpInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              GCGSkillPreviewInfo_HpInfoMapEntry,
              ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo > > parser(&hp_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change_onstage_character_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGSkillPreviewExtraInfo extra_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewCardInfo add_card_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewCardInfo rm_card_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rm_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.GCGSkillPreviewTokenChangeInfo> card_token_change_map = 3;
  if (!this->card_token_change_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->card_token_change_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_token_change_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::const_iterator
          it = this->card_token_change_map().begin();
          it != this->card_token_change_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_CardTokenChangeMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_token_change_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_CardTokenChangeMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::const_iterator
          it = this->card_token_change_map().begin();
          it != this->card_token_change_map().end(); ++it) {
        entry.reset(card_token_change_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // map<uint32, .proto.GCGSkillPreviewElementReactionInfo> reaction_info_map = 5;
  if (!this->reaction_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->reaction_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reaction_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::const_iterator
          it = this->reaction_info_map().begin();
          it != this->reaction_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_ReactionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reaction_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_ReactionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::const_iterator
          it = this->reaction_info_map().begin();
          it != this->reaction_info_map().end(); ++it) {
        entry.reset(reaction_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // uint32 skill_id = 6;
  if (this->skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skill_id(), output);
  }

  // map<uint32, .proto.GCGSkillPreviewHpInfo> hp_info_map = 8;
  if (!this->hp_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->hp_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hp_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::const_iterator
          it = this->hp_info_map().begin();
          it != this->hp_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_HpInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hp_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_HpInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::const_iterator
          it = this->hp_info_map().begin();
          it != this->hp_info_map().end(); ++it) {
        entry.reset(hp_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // repeated .proto.GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_onstage_character_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->change_onstage_character_list(static_cast<int>(i)), output);
  }

  // .proto.GCGSkillPreviewExtraInfo extra_info = 10;
  if (this->has_extra_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->extra_info_, output);
  }

  // repeated .proto.GCGSkillPreviewCardInfo add_card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->add_card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->add_card_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGSkillPreviewCardInfo rm_card_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rm_card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->rm_card_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewInfo)
}

::google::protobuf::uint8* GCGSkillPreviewInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.GCGSkillPreviewTokenChangeInfo> card_token_change_map = 3;
  if (!this->card_token_change_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->card_token_change_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->card_token_change_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::const_iterator
          it = this->card_token_change_map().begin();
          it != this->card_token_change_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_CardTokenChangeMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(card_token_change_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_CardTokenChangeMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::const_iterator
          it = this->card_token_change_map().begin();
          it != this->card_token_change_map().end(); ++it) {
        entry.reset(card_token_change_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, .proto.GCGSkillPreviewElementReactionInfo> reaction_info_map = 5;
  if (!this->reaction_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->reaction_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reaction_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::const_iterator
          it = this->reaction_info_map().begin();
          it != this->reaction_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_ReactionInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reaction_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_ReactionInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::const_iterator
          it = this->reaction_info_map().begin();
          it != this->reaction_info_map().end(); ++it) {
        entry.reset(reaction_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 skill_id = 6;
  if (this->skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->skill_id(), target);
  }

  // map<uint32, .proto.GCGSkillPreviewHpInfo> hp_info_map = 8;
  if (!this->hp_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->hp_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hp_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::const_iterator
          it = this->hp_info_map().begin();
          it != this->hp_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_HpInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hp_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_HpInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::const_iterator
          it = this->hp_info_map().begin();
          it != this->hp_info_map().end(); ++it) {
        entry.reset(hp_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .proto.GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_onstage_character_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->change_onstage_character_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.GCGSkillPreviewExtraInfo extra_info = 10;
  if (this->has_extra_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->extra_info_, deterministic, target);
  }

  // repeated .proto.GCGSkillPreviewCardInfo add_card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->add_card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->add_card_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGSkillPreviewCardInfo rm_card_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rm_card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->rm_card_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewInfo)
  return target;
}

size_t GCGSkillPreviewInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.GCGSkillPreviewTokenChangeInfo> card_token_change_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->card_token_change_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_CardTokenChangeMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >::const_iterator
        it = this->card_token_change_map().begin();
        it != this->card_token_change_map().end(); ++it) {
      entry.reset(card_token_change_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .proto.GCGSkillPreviewElementReactionInfo> reaction_info_map = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reaction_info_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_ReactionInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >::const_iterator
        it = this->reaction_info_map().begin();
        it != this->reaction_info_map().end(); ++it) {
      entry.reset(reaction_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .proto.GCGSkillPreviewHpInfo> hp_info_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hp_info_map_size());
  {
    ::google::protobuf::scoped_ptr<GCGSkillPreviewInfo_HpInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >::const_iterator
        it = this->hp_info_map().begin();
        it != this->hp_info_map().end(); ++it) {
      entry.reset(hp_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->change_onstage_character_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_onstage_character_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGSkillPreviewCardInfo add_card_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->add_card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_card_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGSkillPreviewCardInfo rm_card_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->rm_card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rm_card_list(static_cast<int>(i)));
    }
  }

  // .proto.GCGSkillPreviewExtraInfo extra_info = 10;
  if (this->has_extra_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extra_info_);
  }

  // uint32 skill_id = 6;
  if (this->skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewInfo::MergeFrom(const GCGSkillPreviewInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_token_change_map_.MergeFrom(from.card_token_change_map_);
  reaction_info_map_.MergeFrom(from.reaction_info_map_);
  hp_info_map_.MergeFrom(from.hp_info_map_);
  change_onstage_character_list_.MergeFrom(from.change_onstage_character_list_);
  add_card_list_.MergeFrom(from.add_card_list_);
  rm_card_list_.MergeFrom(from.rm_card_list_);
  if (from.has_extra_info()) {
    mutable_extra_info()->::proto::GCGSkillPreviewExtraInfo::MergeFrom(from.extra_info());
  }
  if (from.skill_id() != 0) {
    set_skill_id(from.skill_id());
  }
}

void GCGSkillPreviewInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewInfo::CopyFrom(const GCGSkillPreviewInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewInfo::Swap(GCGSkillPreviewInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewInfo::InternalSwap(GCGSkillPreviewInfo* other) {
  using std::swap;
  card_token_change_map_.Swap(&other->card_token_change_map_);
  reaction_info_map_.Swap(&other->reaction_info_map_);
  hp_info_map_.Swap(&other->hp_info_map_);
  change_onstage_character_list_.InternalSwap(&other->change_onstage_character_list_);
  add_card_list_.InternalSwap(&other->add_card_list_);
  rm_card_list_.InternalSwap(&other->rm_card_list_);
  swap(extra_info_, other->extra_info_);
  swap(skill_id_, other->skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewInfo

// map<uint32, .proto.GCGSkillPreviewTokenChangeInfo> card_token_change_map = 3;
int GCGSkillPreviewInfo::card_token_change_map_size() const {
  return card_token_change_map_.size();
}
void GCGSkillPreviewInfo::clear_card_token_change_map() {
  card_token_change_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >&
GCGSkillPreviewInfo::card_token_change_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSkillPreviewInfo.card_token_change_map)
  return card_token_change_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >*
GCGSkillPreviewInfo::mutable_card_token_change_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSkillPreviewInfo.card_token_change_map)
  return card_token_change_map_.MutableMap();
}

// map<uint32, .proto.GCGSkillPreviewElementReactionInfo> reaction_info_map = 5;
int GCGSkillPreviewInfo::reaction_info_map_size() const {
  return reaction_info_map_.size();
}
void GCGSkillPreviewInfo::clear_reaction_info_map() {
  reaction_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >&
GCGSkillPreviewInfo::reaction_info_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSkillPreviewInfo.reaction_info_map)
  return reaction_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >*
GCGSkillPreviewInfo::mutable_reaction_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSkillPreviewInfo.reaction_info_map)
  return reaction_info_map_.MutableMap();
}

// map<uint32, .proto.GCGSkillPreviewHpInfo> hp_info_map = 8;
int GCGSkillPreviewInfo::hp_info_map_size() const {
  return hp_info_map_.size();
}
void GCGSkillPreviewInfo::clear_hp_info_map() {
  hp_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >&
GCGSkillPreviewInfo::hp_info_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSkillPreviewInfo.hp_info_map)
  return hp_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >*
GCGSkillPreviewInfo::mutable_hp_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSkillPreviewInfo.hp_info_map)
  return hp_info_map_.MutableMap();
}

// repeated .proto.GCGSkillPreviewCardInfo add_card_list = 11;
int GCGSkillPreviewInfo::add_card_list_size() const {
  return add_card_list_.size();
}
void GCGSkillPreviewInfo::clear_add_card_list() {
  add_card_list_.Clear();
}
const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewInfo::add_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_.Get(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::mutable_add_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_.Mutable(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::add_add_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewInfo::mutable_add_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewInfo.add_card_list)
  return &add_card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewInfo::add_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_;
}

// .proto.GCGSkillPreviewExtraInfo extra_info = 10;
bool GCGSkillPreviewInfo::has_extra_info() const {
  return this != internal_default_instance() && extra_info_ != NULL;
}
void GCGSkillPreviewInfo::clear_extra_info() {
  if (GetArenaNoVirtual() == NULL && extra_info_ != NULL) delete extra_info_;
  extra_info_ = NULL;
}
const ::proto::GCGSkillPreviewExtraInfo& GCGSkillPreviewInfo::extra_info() const {
  const ::proto::GCGSkillPreviewExtraInfo* p = extra_info_;
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.extra_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGSkillPreviewExtraInfo*>(
      &::proto::_GCGSkillPreviewExtraInfo_default_instance_);
}
::proto::GCGSkillPreviewExtraInfo* GCGSkillPreviewInfo::mutable_extra_info() {
  
  if (extra_info_ == NULL) {
    extra_info_ = new ::proto::GCGSkillPreviewExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.extra_info)
  return extra_info_;
}
::proto::GCGSkillPreviewExtraInfo* GCGSkillPreviewInfo::release_extra_info() {
  // @@protoc_insertion_point(field_release:proto.GCGSkillPreviewInfo.extra_info)
  
  ::proto::GCGSkillPreviewExtraInfo* temp = extra_info_;
  extra_info_ = NULL;
  return temp;
}
void GCGSkillPreviewInfo::set_allocated_extra_info(::proto::GCGSkillPreviewExtraInfo* extra_info) {
  delete extra_info_;
  extra_info_ = extra_info;
  if (extra_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGSkillPreviewInfo.extra_info)
}

// uint32 skill_id = 6;
void GCGSkillPreviewInfo::clear_skill_id() {
  skill_id_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.skill_id)
  return skill_id_;
}
void GCGSkillPreviewInfo::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewInfo.skill_id)
}

// repeated .proto.GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 9;
int GCGSkillPreviewInfo::change_onstage_character_list_size() const {
  return change_onstage_character_list_.size();
}
void GCGSkillPreviewInfo::clear_change_onstage_character_list() {
  change_onstage_character_list_.Clear();
}
const ::proto::GCGSkillPreviewOnstageChangeInfo& GCGSkillPreviewInfo::change_onstage_character_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_.Get(index);
}
::proto::GCGSkillPreviewOnstageChangeInfo* GCGSkillPreviewInfo::mutable_change_onstage_character_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_.Mutable(index);
}
::proto::GCGSkillPreviewOnstageChangeInfo* GCGSkillPreviewInfo::add_change_onstage_character_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewOnstageChangeInfo >*
GCGSkillPreviewInfo::mutable_change_onstage_character_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return &change_onstage_character_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewOnstageChangeInfo >&
GCGSkillPreviewInfo::change_onstage_character_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_;
}

// repeated .proto.GCGSkillPreviewCardInfo rm_card_list = 12;
int GCGSkillPreviewInfo::rm_card_list_size() const {
  return rm_card_list_.size();
}
void GCGSkillPreviewInfo::clear_rm_card_list() {
  rm_card_list_.Clear();
}
const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewInfo::rm_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_.Get(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::mutable_rm_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_.Mutable(index);
}
::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::add_rm_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewInfo::mutable_rm_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewInfo.rm_card_list)
  return &rm_card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewInfo::rm_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGChangeOnstageInfo::kCardGuidFieldNumber;
const int GCGChangeOnstageInfo::kIsQuickFieldNumber;
const int GCGChangeOnstageInfo::kChangeOnstagePreviewInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGChangeOnstageInfo::GCGChangeOnstageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGChangeOnstageInfo)
}
GCGChangeOnstageInfo::GCGChangeOnstageInfo(const GCGChangeOnstageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_change_onstage_preview_info()) {
    change_onstage_preview_info_ = new ::proto::GCGSkillPreviewInfo(*from.change_onstage_preview_info_);
  } else {
    change_onstage_preview_info_ = NULL;
  }
  ::memcpy(&card_guid_, &from.card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_quick_) -
    reinterpret_cast<char*>(&card_guid_)) + sizeof(is_quick_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGChangeOnstageInfo)
}

void GCGChangeOnstageInfo::SharedCtor() {
  ::memset(&change_onstage_preview_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_quick_) -
      reinterpret_cast<char*>(&change_onstage_preview_info_)) + sizeof(is_quick_));
  _cached_size_ = 0;
}

GCGChangeOnstageInfo::~GCGChangeOnstageInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGChangeOnstageInfo)
  SharedDtor();
}

void GCGChangeOnstageInfo::SharedDtor() {
  if (this != internal_default_instance()) delete change_onstage_preview_info_;
}

void GCGChangeOnstageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGChangeOnstageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGChangeOnstageInfo& GCGChangeOnstageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGChangeOnstageInfo* GCGChangeOnstageInfo::New(::google::protobuf::Arena* arena) const {
  GCGChangeOnstageInfo* n = new GCGChangeOnstageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGChangeOnstageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGChangeOnstageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && change_onstage_preview_info_ != NULL) {
    delete change_onstage_preview_info_;
  }
  change_onstage_preview_info_ = NULL;
  ::memset(&card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_quick_) -
      reinterpret_cast<char*>(&card_guid_)) + sizeof(is_quick_));
  _internal_metadata_.Clear();
}

bool GCGChangeOnstageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGChangeOnstageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_guid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_quick = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGSkillPreviewInfo change_onstage_preview_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_change_onstage_preview_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGChangeOnstageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGChangeOnstageInfo)
  return false;
#undef DO_
}

void GCGChangeOnstageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGChangeOnstageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_guid(), output);
  }

  // bool is_quick = 7;
  if (this->is_quick() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_quick(), output);
  }

  // .proto.GCGSkillPreviewInfo change_onstage_preview_info = 12;
  if (this->has_change_onstage_preview_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->change_onstage_preview_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGChangeOnstageInfo)
}

::google::protobuf::uint8* GCGChangeOnstageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGChangeOnstageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_guid(), target);
  }

  // bool is_quick = 7;
  if (this->is_quick() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_quick(), target);
  }

  // .proto.GCGSkillPreviewInfo change_onstage_preview_info = 12;
  if (this->has_change_onstage_preview_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->change_onstage_preview_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGChangeOnstageInfo)
  return target;
}

size_t GCGChangeOnstageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGChangeOnstageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGSkillPreviewInfo change_onstage_preview_info = 12;
  if (this->has_change_onstage_preview_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->change_onstage_preview_info_);
  }

  // uint32 card_guid = 6;
  if (this->card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_guid());
  }

  // bool is_quick = 7;
  if (this->is_quick() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGChangeOnstageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGChangeOnstageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGChangeOnstageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGChangeOnstageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGChangeOnstageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGChangeOnstageInfo)
    MergeFrom(*source);
  }
}

void GCGChangeOnstageInfo::MergeFrom(const GCGChangeOnstageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGChangeOnstageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_change_onstage_preview_info()) {
    mutable_change_onstage_preview_info()->::proto::GCGSkillPreviewInfo::MergeFrom(from.change_onstage_preview_info());
  }
  if (from.card_guid() != 0) {
    set_card_guid(from.card_guid());
  }
  if (from.is_quick() != 0) {
    set_is_quick(from.is_quick());
  }
}

void GCGChangeOnstageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGChangeOnstageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGChangeOnstageInfo::CopyFrom(const GCGChangeOnstageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGChangeOnstageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGChangeOnstageInfo::IsInitialized() const {
  return true;
}

void GCGChangeOnstageInfo::Swap(GCGChangeOnstageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGChangeOnstageInfo::InternalSwap(GCGChangeOnstageInfo* other) {
  using std::swap;
  swap(change_onstage_preview_info_, other->change_onstage_preview_info_);
  swap(card_guid_, other->card_guid_);
  swap(is_quick_, other->is_quick_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGChangeOnstageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGChangeOnstageInfo

// uint32 card_guid = 6;
void GCGChangeOnstageInfo::clear_card_guid() {
  card_guid_ = 0u;
}
::google::protobuf::uint32 GCGChangeOnstageInfo::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGChangeOnstageInfo.card_guid)
  return card_guid_;
}
void GCGChangeOnstageInfo::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChangeOnstageInfo.card_guid)
}

// bool is_quick = 7;
void GCGChangeOnstageInfo::clear_is_quick() {
  is_quick_ = false;
}
bool GCGChangeOnstageInfo::is_quick() const {
  // @@protoc_insertion_point(field_get:proto.GCGChangeOnstageInfo.is_quick)
  return is_quick_;
}
void GCGChangeOnstageInfo::set_is_quick(bool value) {
  
  is_quick_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChangeOnstageInfo.is_quick)
}

// .proto.GCGSkillPreviewInfo change_onstage_preview_info = 12;
bool GCGChangeOnstageInfo::has_change_onstage_preview_info() const {
  return this != internal_default_instance() && change_onstage_preview_info_ != NULL;
}
void GCGChangeOnstageInfo::clear_change_onstage_preview_info() {
  if (GetArenaNoVirtual() == NULL && change_onstage_preview_info_ != NULL) delete change_onstage_preview_info_;
  change_onstage_preview_info_ = NULL;
}
const ::proto::GCGSkillPreviewInfo& GCGChangeOnstageInfo::change_onstage_preview_info() const {
  const ::proto::GCGSkillPreviewInfo* p = change_onstage_preview_info_;
  // @@protoc_insertion_point(field_get:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGSkillPreviewInfo*>(
      &::proto::_GCGSkillPreviewInfo_default_instance_);
}
::proto::GCGSkillPreviewInfo* GCGChangeOnstageInfo::mutable_change_onstage_preview_info() {
  
  if (change_onstage_preview_info_ == NULL) {
    change_onstage_preview_info_ = new ::proto::GCGSkillPreviewInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
  return change_onstage_preview_info_;
}
::proto::GCGSkillPreviewInfo* GCGChangeOnstageInfo::release_change_onstage_preview_info() {
  // @@protoc_insertion_point(field_release:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
  
  ::proto::GCGSkillPreviewInfo* temp = change_onstage_preview_info_;
  change_onstage_preview_info_ = NULL;
  return temp;
}
void GCGChangeOnstageInfo::set_allocated_change_onstage_preview_info(::proto::GCGSkillPreviewInfo* change_onstage_preview_info) {
  delete change_onstage_preview_info_;
  change_onstage_preview_info_ = change_onstage_preview_info;
  if (change_onstage_preview_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewPlayCardInfo::kTargetCardGuidFieldNumber;
const int GCGSkillPreviewPlayCardInfo::kHandCardGuidFieldNumber;
const int GCGSkillPreviewPlayCardInfo::kPlayCardInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewPlayCardInfo::GCGSkillPreviewPlayCardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewPlayCardInfo)
}
GCGSkillPreviewPlayCardInfo::GCGSkillPreviewPlayCardInfo(const GCGSkillPreviewPlayCardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_play_card_info()) {
    play_card_info_ = new ::proto::GCGSkillPreviewInfo(*from.play_card_info_);
  } else {
    play_card_info_ = NULL;
  }
  ::memcpy(&target_card_guid_, &from.target_card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&hand_card_guid_) -
    reinterpret_cast<char*>(&target_card_guid_)) + sizeof(hand_card_guid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewPlayCardInfo)
}

void GCGSkillPreviewPlayCardInfo::SharedCtor() {
  ::memset(&play_card_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_card_guid_) -
      reinterpret_cast<char*>(&play_card_info_)) + sizeof(hand_card_guid_));
  _cached_size_ = 0;
}

GCGSkillPreviewPlayCardInfo::~GCGSkillPreviewPlayCardInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewPlayCardInfo)
  SharedDtor();
}

void GCGSkillPreviewPlayCardInfo::SharedDtor() {
  if (this != internal_default_instance()) delete play_card_info_;
}

void GCGSkillPreviewPlayCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewPlayCardInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewPlayCardInfo& GCGSkillPreviewPlayCardInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewPlayCardInfo* GCGSkillPreviewPlayCardInfo::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewPlayCardInfo* n = new GCGSkillPreviewPlayCardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewPlayCardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewPlayCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && play_card_info_ != NULL) {
    delete play_card_info_;
  }
  play_card_info_ = NULL;
  ::memset(&target_card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hand_card_guid_) -
      reinterpret_cast<char*>(&target_card_guid_)) + sizeof(hand_card_guid_));
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewPlayCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewPlayCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGSkillPreviewInfo play_card_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_play_card_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_card_guid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hand_card_guid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hand_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewPlayCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewPlayCardInfo)
  return false;
#undef DO_
}

void GCGSkillPreviewPlayCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewPlayCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSkillPreviewInfo play_card_info = 6;
  if (this->has_play_card_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->play_card_info_, output);
  }

  // uint32 target_card_guid = 9;
  if (this->target_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->target_card_guid(), output);
  }

  // uint32 hand_card_guid = 15;
  if (this->hand_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->hand_card_guid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewPlayCardInfo)
}

::google::protobuf::uint8* GCGSkillPreviewPlayCardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewPlayCardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSkillPreviewInfo play_card_info = 6;
  if (this->has_play_card_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->play_card_info_, deterministic, target);
  }

  // uint32 target_card_guid = 9;
  if (this->target_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->target_card_guid(), target);
  }

  // uint32 hand_card_guid = 15;
  if (this->hand_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->hand_card_guid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewPlayCardInfo)
  return target;
}

size_t GCGSkillPreviewPlayCardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewPlayCardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGSkillPreviewInfo play_card_info = 6;
  if (this->has_play_card_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->play_card_info_);
  }

  // uint32 target_card_guid = 9;
  if (this->target_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_card_guid());
  }

  // uint32 hand_card_guid = 15;
  if (this->hand_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hand_card_guid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewPlayCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewPlayCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewPlayCardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewPlayCardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewPlayCardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewPlayCardInfo)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewPlayCardInfo::MergeFrom(const GCGSkillPreviewPlayCardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewPlayCardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_play_card_info()) {
    mutable_play_card_info()->::proto::GCGSkillPreviewInfo::MergeFrom(from.play_card_info());
  }
  if (from.target_card_guid() != 0) {
    set_target_card_guid(from.target_card_guid());
  }
  if (from.hand_card_guid() != 0) {
    set_hand_card_guid(from.hand_card_guid());
  }
}

void GCGSkillPreviewPlayCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewPlayCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewPlayCardInfo::CopyFrom(const GCGSkillPreviewPlayCardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewPlayCardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewPlayCardInfo::IsInitialized() const {
  return true;
}

void GCGSkillPreviewPlayCardInfo::Swap(GCGSkillPreviewPlayCardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewPlayCardInfo::InternalSwap(GCGSkillPreviewPlayCardInfo* other) {
  using std::swap;
  swap(play_card_info_, other->play_card_info_);
  swap(target_card_guid_, other->target_card_guid_);
  swap(hand_card_guid_, other->hand_card_guid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewPlayCardInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewPlayCardInfo

// uint32 target_card_guid = 9;
void GCGSkillPreviewPlayCardInfo::clear_target_card_guid() {
  target_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewPlayCardInfo::target_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewPlayCardInfo.target_card_guid)
  return target_card_guid_;
}
void GCGSkillPreviewPlayCardInfo::set_target_card_guid(::google::protobuf::uint32 value) {
  
  target_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewPlayCardInfo.target_card_guid)
}

// uint32 hand_card_guid = 15;
void GCGSkillPreviewPlayCardInfo::clear_hand_card_guid() {
  hand_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewPlayCardInfo::hand_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewPlayCardInfo.hand_card_guid)
  return hand_card_guid_;
}
void GCGSkillPreviewPlayCardInfo::set_hand_card_guid(::google::protobuf::uint32 value) {
  
  hand_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewPlayCardInfo.hand_card_guid)
}

// .proto.GCGSkillPreviewInfo play_card_info = 6;
bool GCGSkillPreviewPlayCardInfo::has_play_card_info() const {
  return this != internal_default_instance() && play_card_info_ != NULL;
}
void GCGSkillPreviewPlayCardInfo::clear_play_card_info() {
  if (GetArenaNoVirtual() == NULL && play_card_info_ != NULL) delete play_card_info_;
  play_card_info_ = NULL;
}
const ::proto::GCGSkillPreviewInfo& GCGSkillPreviewPlayCardInfo::play_card_info() const {
  const ::proto::GCGSkillPreviewInfo* p = play_card_info_;
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGSkillPreviewInfo*>(
      &::proto::_GCGSkillPreviewInfo_default_instance_);
}
::proto::GCGSkillPreviewInfo* GCGSkillPreviewPlayCardInfo::mutable_play_card_info() {
  
  if (play_card_info_ == NULL) {
    play_card_info_ = new ::proto::GCGSkillPreviewInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
  return play_card_info_;
}
::proto::GCGSkillPreviewInfo* GCGSkillPreviewPlayCardInfo::release_play_card_info() {
  // @@protoc_insertion_point(field_release:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
  
  ::proto::GCGSkillPreviewInfo* temp = play_card_info_;
  play_card_info_ = NULL;
  return temp;
}
void GCGSkillPreviewPlayCardInfo::set_allocated_play_card_info(::proto::GCGSkillPreviewInfo* play_card_info) {
  delete play_card_info_;
  play_card_info_ = play_card_info;
  if (play_card_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewNotify::kControllerIdFieldNumber;
const int GCGSkillPreviewNotify::kPlayCardListFieldNumber;
const int GCGSkillPreviewNotify::kSkillPreviewListFieldNumber;
const int GCGSkillPreviewNotify::kChangeOnstagePreviewListFieldNumber;
const int GCGSkillPreviewNotify::kOnstageCardGuidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewNotify::GCGSkillPreviewNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewNotify)
}
GCGSkillPreviewNotify::GCGSkillPreviewNotify(const GCGSkillPreviewNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      change_onstage_preview_list_(from.change_onstage_preview_list_),
      skill_preview_list_(from.skill_preview_list_),
      play_card_list_(from.play_card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&onstage_card_guid_, &from.onstage_card_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controller_id_) -
    reinterpret_cast<char*>(&onstage_card_guid_)) + sizeof(controller_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewNotify)
}

void GCGSkillPreviewNotify::SharedCtor() {
  ::memset(&onstage_card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&onstage_card_guid_)) + sizeof(controller_id_));
  _cached_size_ = 0;
}

GCGSkillPreviewNotify::~GCGSkillPreviewNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewNotify)
  SharedDtor();
}

void GCGSkillPreviewNotify::SharedDtor() {
}

void GCGSkillPreviewNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewNotify& GCGSkillPreviewNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewNotify* GCGSkillPreviewNotify::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewNotify* n = new GCGSkillPreviewNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  change_onstage_preview_list_.Clear();
  skill_preview_list_.Clear();
  play_card_list_.Clear();
  ::memset(&onstage_card_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controller_id_) -
      reinterpret_cast<char*>(&onstage_card_guid_)) + sizeof(controller_id_));
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_change_onstage_preview_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 onstage_card_guid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onstage_card_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_preview_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_play_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 controller_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewNotify)
  return false;
#undef DO_
}

void GCGSkillPreviewNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_onstage_preview_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->change_onstage_preview_list(static_cast<int>(i)), output);
  }

  // uint32 onstage_card_guid = 5;
  if (this->onstage_card_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->onstage_card_guid(), output);
  }

  // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_preview_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->skill_preview_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->play_card_list(static_cast<int>(i)), output);
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewNotify)
}

::google::protobuf::uint8* GCGSkillPreviewNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->change_onstage_preview_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->change_onstage_preview_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 onstage_card_guid = 5;
  if (this->onstage_card_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->onstage_card_guid(), target);
  }

  // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_preview_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->skill_preview_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->play_card_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewNotify)
  return target;
}

size_t GCGSkillPreviewNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->change_onstage_preview_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->change_onstage_preview_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->skill_preview_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_preview_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->play_card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_card_list(static_cast<int>(i)));
    }
  }

  // uint32 onstage_card_guid = 5;
  if (this->onstage_card_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->onstage_card_guid());
  }

  // uint32 controller_id = 15;
  if (this->controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->controller_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewNotify)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewNotify::MergeFrom(const GCGSkillPreviewNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  change_onstage_preview_list_.MergeFrom(from.change_onstage_preview_list_);
  skill_preview_list_.MergeFrom(from.skill_preview_list_);
  play_card_list_.MergeFrom(from.play_card_list_);
  if (from.onstage_card_guid() != 0) {
    set_onstage_card_guid(from.onstage_card_guid());
  }
  if (from.controller_id() != 0) {
    set_controller_id(from.controller_id());
  }
}

void GCGSkillPreviewNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewNotify::CopyFrom(const GCGSkillPreviewNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewNotify::IsInitialized() const {
  return true;
}

void GCGSkillPreviewNotify::Swap(GCGSkillPreviewNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewNotify::InternalSwap(GCGSkillPreviewNotify* other) {
  using std::swap;
  change_onstage_preview_list_.InternalSwap(&other->change_onstage_preview_list_);
  skill_preview_list_.InternalSwap(&other->skill_preview_list_);
  play_card_list_.InternalSwap(&other->play_card_list_);
  swap(onstage_card_guid_, other->onstage_card_guid_);
  swap(controller_id_, other->controller_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewNotify

// uint32 controller_id = 15;
void GCGSkillPreviewNotify::clear_controller_id() {
  controller_id_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewNotify::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.controller_id)
  return controller_id_;
}
void GCGSkillPreviewNotify::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewNotify.controller_id)
}

// repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 11;
int GCGSkillPreviewNotify::play_card_list_size() const {
  return play_card_list_.size();
}
void GCGSkillPreviewNotify::clear_play_card_list() {
  play_card_list_.Clear();
}
const ::proto::GCGSkillPreviewPlayCardInfo& GCGSkillPreviewNotify::play_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Get(index);
}
::proto::GCGSkillPreviewPlayCardInfo* GCGSkillPreviewNotify::mutable_play_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Mutable(index);
}
::proto::GCGSkillPreviewPlayCardInfo* GCGSkillPreviewNotify::add_play_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >*
GCGSkillPreviewNotify::mutable_play_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewNotify.play_card_list)
  return &play_card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >&
GCGSkillPreviewNotify::play_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_;
}

// repeated .proto.GCGSkillPreviewInfo skill_preview_list = 9;
int GCGSkillPreviewNotify::skill_preview_list_size() const {
  return skill_preview_list_.size();
}
void GCGSkillPreviewNotify::clear_skill_preview_list() {
  skill_preview_list_.Clear();
}
const ::proto::GCGSkillPreviewInfo& GCGSkillPreviewNotify::skill_preview_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Get(index);
}
::proto::GCGSkillPreviewInfo* GCGSkillPreviewNotify::mutable_skill_preview_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Mutable(index);
}
::proto::GCGSkillPreviewInfo* GCGSkillPreviewNotify::add_skill_preview_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >*
GCGSkillPreviewNotify::mutable_skill_preview_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewNotify.skill_preview_list)
  return &skill_preview_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >&
GCGSkillPreviewNotify::skill_preview_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_;
}

// repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 1;
int GCGSkillPreviewNotify::change_onstage_preview_list_size() const {
  return change_onstage_preview_list_.size();
}
void GCGSkillPreviewNotify::clear_change_onstage_preview_list() {
  change_onstage_preview_list_.Clear();
}
const ::proto::GCGChangeOnstageInfo& GCGSkillPreviewNotify::change_onstage_preview_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Get(index);
}
::proto::GCGChangeOnstageInfo* GCGSkillPreviewNotify::mutable_change_onstage_preview_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Mutable(index);
}
::proto::GCGChangeOnstageInfo* GCGSkillPreviewNotify::add_change_onstage_preview_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >*
GCGSkillPreviewNotify::mutable_change_onstage_preview_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return &change_onstage_preview_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >&
GCGSkillPreviewNotify::change_onstage_preview_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_;
}

// uint32 onstage_card_guid = 5;
void GCGSkillPreviewNotify::clear_onstage_card_guid() {
  onstage_card_guid_ = 0u;
}
::google::protobuf::uint32 GCGSkillPreviewNotify::onstage_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.onstage_card_guid)
  return onstage_card_guid_;
}
void GCGSkillPreviewNotify::set_onstage_card_guid(::google::protobuf::uint32 value) {
  
  onstage_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewNotify.onstage_card_guid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewAskReq::GCGSkillPreviewAskReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewAskReq)
}
GCGSkillPreviewAskReq::GCGSkillPreviewAskReq(const GCGSkillPreviewAskReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewAskReq)
}

void GCGSkillPreviewAskReq::SharedCtor() {
  _cached_size_ = 0;
}

GCGSkillPreviewAskReq::~GCGSkillPreviewAskReq() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewAskReq)
  SharedDtor();
}

void GCGSkillPreviewAskReq::SharedDtor() {
}

void GCGSkillPreviewAskReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewAskReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewAskReq& GCGSkillPreviewAskReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewAskReq* GCGSkillPreviewAskReq::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewAskReq* n = new GCGSkillPreviewAskReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewAskReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewAskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGSkillPreviewAskReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewAskReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewAskReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewAskReq)
  return false;
#undef DO_
}

void GCGSkillPreviewAskReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewAskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewAskReq)
}

::google::protobuf::uint8* GCGSkillPreviewAskReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewAskReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewAskReq)
  return target;
}

size_t GCGSkillPreviewAskReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewAskReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewAskReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewAskReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewAskReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewAskReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewAskReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewAskReq)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewAskReq::MergeFrom(const GCGSkillPreviewAskReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewAskReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGSkillPreviewAskReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewAskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewAskReq::CopyFrom(const GCGSkillPreviewAskReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewAskReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewAskReq::IsInitialized() const {
  return true;
}

void GCGSkillPreviewAskReq::Swap(GCGSkillPreviewAskReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewAskReq::InternalSwap(GCGSkillPreviewAskReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewAskReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewAskReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSkillPreviewAskRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSkillPreviewAskRsp::GCGSkillPreviewAskRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSkillPreviewAskRsp)
}
GCGSkillPreviewAskRsp::GCGSkillPreviewAskRsp(const GCGSkillPreviewAskRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGSkillPreviewAskRsp)
}

void GCGSkillPreviewAskRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GCGSkillPreviewAskRsp::~GCGSkillPreviewAskRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGSkillPreviewAskRsp)
  SharedDtor();
}

void GCGSkillPreviewAskRsp::SharedDtor() {
}

void GCGSkillPreviewAskRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSkillPreviewAskRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSkillPreviewAskRsp& GCGSkillPreviewAskRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSkillPreviewAskRsp* GCGSkillPreviewAskRsp::New(::google::protobuf::Arena* arena) const {
  GCGSkillPreviewAskRsp* n = new GCGSkillPreviewAskRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSkillPreviewAskRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSkillPreviewAskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GCGSkillPreviewAskRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSkillPreviewAskRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSkillPreviewAskRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSkillPreviewAskRsp)
  return false;
#undef DO_
}

void GCGSkillPreviewAskRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSkillPreviewAskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSkillPreviewAskRsp)
}

::google::protobuf::uint8* GCGSkillPreviewAskRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSkillPreviewAskRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSkillPreviewAskRsp)
  return target;
}

size_t GCGSkillPreviewAskRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSkillPreviewAskRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSkillPreviewAskRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSkillPreviewAskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSkillPreviewAskRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSkillPreviewAskRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSkillPreviewAskRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSkillPreviewAskRsp)
    MergeFrom(*source);
  }
}

void GCGSkillPreviewAskRsp::MergeFrom(const GCGSkillPreviewAskRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSkillPreviewAskRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGSkillPreviewAskRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSkillPreviewAskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSkillPreviewAskRsp::CopyFrom(const GCGSkillPreviewAskRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSkillPreviewAskRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSkillPreviewAskRsp::IsInitialized() const {
  return true;
}

void GCGSkillPreviewAskRsp::Swap(GCGSkillPreviewAskRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSkillPreviewAskRsp::InternalSwap(GCGSkillPreviewAskRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSkillPreviewAskRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSkillPreviewAskRsp

// int32 retcode = 1;
void GCGSkillPreviewAskRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGSkillPreviewAskRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewAskRsp.retcode)
  return retcode_;
}
void GCGSkillPreviewAskRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewAskRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGChallengeUpdateNotify::kServerSeqFieldNumber;
const int GCGChallengeUpdateNotify::kChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGChallengeUpdateNotify::GCGChallengeUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGChallengeUpdateNotify)
}
GCGChallengeUpdateNotify::GCGChallengeUpdateNotify(const GCGChallengeUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_challenge()) {
    challenge_ = new ::proto::GCGDuelChallenge(*from.challenge_);
  } else {
    challenge_ = NULL;
  }
  server_seq_ = from.server_seq_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGChallengeUpdateNotify)
}

void GCGChallengeUpdateNotify::SharedCtor() {
  ::memset(&challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_seq_) -
      reinterpret_cast<char*>(&challenge_)) + sizeof(server_seq_));
  _cached_size_ = 0;
}

GCGChallengeUpdateNotify::~GCGChallengeUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGChallengeUpdateNotify)
  SharedDtor();
}

void GCGChallengeUpdateNotify::SharedDtor() {
  if (this != internal_default_instance()) delete challenge_;
}

void GCGChallengeUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGChallengeUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGChallengeUpdateNotify& GCGChallengeUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGChallengeUpdateNotify* GCGChallengeUpdateNotify::New(::google::protobuf::Arena* arena) const {
  GCGChallengeUpdateNotify* n = new GCGChallengeUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGChallengeUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && challenge_ != NULL) {
    delete challenge_;
  }
  challenge_ = NULL;
  server_seq_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGChallengeUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGChallengeUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 server_seq = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_seq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGDuelChallenge challenge = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGChallengeUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGChallengeUpdateNotify)
  return false;
#undef DO_
}

void GCGChallengeUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_seq = 12;
  if (this->server_seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->server_seq(), output);
  }

  // .proto.GCGDuelChallenge challenge = 13;
  if (this->has_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->challenge_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGChallengeUpdateNotify)
}

::google::protobuf::uint8* GCGChallengeUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 server_seq = 12;
  if (this->server_seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->server_seq(), target);
  }

  // .proto.GCGDuelChallenge challenge = 13;
  if (this->has_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->challenge_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGChallengeUpdateNotify)
  return target;
}

size_t GCGChallengeUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGChallengeUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGDuelChallenge challenge = 13;
  if (this->has_challenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->challenge_);
  }

  // uint32 server_seq = 12;
  if (this->server_seq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_seq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGChallengeUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGChallengeUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGChallengeUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGChallengeUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGChallengeUpdateNotify)
    MergeFrom(*source);
  }
}

void GCGChallengeUpdateNotify::MergeFrom(const GCGChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challenge()) {
    mutable_challenge()->::proto::GCGDuelChallenge::MergeFrom(from.challenge());
  }
  if (from.server_seq() != 0) {
    set_server_seq(from.server_seq());
  }
}

void GCGChallengeUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGChallengeUpdateNotify::CopyFrom(const GCGChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGChallengeUpdateNotify::IsInitialized() const {
  return true;
}

void GCGChallengeUpdateNotify::Swap(GCGChallengeUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGChallengeUpdateNotify::InternalSwap(GCGChallengeUpdateNotify* other) {
  using std::swap;
  swap(challenge_, other->challenge_);
  swap(server_seq_, other->server_seq_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGChallengeUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGChallengeUpdateNotify

// uint32 server_seq = 12;
void GCGChallengeUpdateNotify::clear_server_seq() {
  server_seq_ = 0u;
}
::google::protobuf::uint32 GCGChallengeUpdateNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGChallengeUpdateNotify.server_seq)
  return server_seq_;
}
void GCGChallengeUpdateNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChallengeUpdateNotify.server_seq)
}

// .proto.GCGDuelChallenge challenge = 13;
bool GCGChallengeUpdateNotify::has_challenge() const {
  return this != internal_default_instance() && challenge_ != NULL;
}
void GCGChallengeUpdateNotify::clear_challenge() {
  if (GetArenaNoVirtual() == NULL && challenge_ != NULL) delete challenge_;
  challenge_ = NULL;
}
const ::proto::GCGDuelChallenge& GCGChallengeUpdateNotify::challenge() const {
  const ::proto::GCGDuelChallenge* p = challenge_;
  // @@protoc_insertion_point(field_get:proto.GCGChallengeUpdateNotify.challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGDuelChallenge*>(
      &::proto::_GCGDuelChallenge_default_instance_);
}
::proto::GCGDuelChallenge* GCGChallengeUpdateNotify::mutable_challenge() {
  
  if (challenge_ == NULL) {
    challenge_ = new ::proto::GCGDuelChallenge;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGChallengeUpdateNotify.challenge)
  return challenge_;
}
::proto::GCGDuelChallenge* GCGChallengeUpdateNotify::release_challenge() {
  // @@protoc_insertion_point(field_release:proto.GCGChallengeUpdateNotify.challenge)
  
  ::proto::GCGDuelChallenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
void GCGChallengeUpdateNotify::set_allocated_challenge(::proto::GCGDuelChallenge* challenge) {
  delete challenge_;
  challenge_ = challenge;
  if (challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGChallengeUpdateNotify.challenge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGBackToDuelReq::kIsBackFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGBackToDuelReq::GCGBackToDuelReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGBackToDuelReq)
}
GCGBackToDuelReq::GCGBackToDuelReq(const GCGBackToDuelReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_back_ = from.is_back_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGBackToDuelReq)
}

void GCGBackToDuelReq::SharedCtor() {
  is_back_ = false;
  _cached_size_ = 0;
}

GCGBackToDuelReq::~GCGBackToDuelReq() {
  // @@protoc_insertion_point(destructor:proto.GCGBackToDuelReq)
  SharedDtor();
}

void GCGBackToDuelReq::SharedDtor() {
}

void GCGBackToDuelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGBackToDuelReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGBackToDuelReq& GCGBackToDuelReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGBackToDuelReq* GCGBackToDuelReq::New(::google::protobuf::Arena* arena) const {
  GCGBackToDuelReq* n = new GCGBackToDuelReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGBackToDuelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGBackToDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_back_ = false;
  _internal_metadata_.Clear();
}

bool GCGBackToDuelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGBackToDuelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_back = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_back_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGBackToDuelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGBackToDuelReq)
  return false;
#undef DO_
}

void GCGBackToDuelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGBackToDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_back = 14;
  if (this->is_back() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_back(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGBackToDuelReq)
}

::google::protobuf::uint8* GCGBackToDuelReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGBackToDuelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_back = 14;
  if (this->is_back() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_back(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGBackToDuelReq)
  return target;
}

size_t GCGBackToDuelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGBackToDuelReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_back = 14;
  if (this->is_back() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGBackToDuelReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGBackToDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGBackToDuelReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGBackToDuelReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGBackToDuelReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGBackToDuelReq)
    MergeFrom(*source);
  }
}

void GCGBackToDuelReq::MergeFrom(const GCGBackToDuelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGBackToDuelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_back() != 0) {
    set_is_back(from.is_back());
  }
}

void GCGBackToDuelReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGBackToDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGBackToDuelReq::CopyFrom(const GCGBackToDuelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGBackToDuelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGBackToDuelReq::IsInitialized() const {
  return true;
}

void GCGBackToDuelReq::Swap(GCGBackToDuelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGBackToDuelReq::InternalSwap(GCGBackToDuelReq* other) {
  using std::swap;
  swap(is_back_, other->is_back_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGBackToDuelReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGBackToDuelReq

// bool is_back = 14;
void GCGBackToDuelReq::clear_is_back() {
  is_back_ = false;
}
bool GCGBackToDuelReq::is_back() const {
  // @@protoc_insertion_point(field_get:proto.GCGBackToDuelReq.is_back)
  return is_back_;
}
void GCGBackToDuelReq::set_is_back(bool value) {
  
  is_back_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBackToDuelReq.is_back)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGBackToDuelRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGBackToDuelRsp::GCGBackToDuelRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGBackToDuelRsp)
}
GCGBackToDuelRsp::GCGBackToDuelRsp(const GCGBackToDuelRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGBackToDuelRsp)
}

void GCGBackToDuelRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GCGBackToDuelRsp::~GCGBackToDuelRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGBackToDuelRsp)
  SharedDtor();
}

void GCGBackToDuelRsp::SharedDtor() {
}

void GCGBackToDuelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGBackToDuelRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGBackToDuelRsp& GCGBackToDuelRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGBackToDuelRsp* GCGBackToDuelRsp::New(::google::protobuf::Arena* arena) const {
  GCGBackToDuelRsp* n = new GCGBackToDuelRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGBackToDuelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGBackToDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GCGBackToDuelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGBackToDuelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGBackToDuelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGBackToDuelRsp)
  return false;
#undef DO_
}

void GCGBackToDuelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGBackToDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGBackToDuelRsp)
}

::google::protobuf::uint8* GCGBackToDuelRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGBackToDuelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGBackToDuelRsp)
  return target;
}

size_t GCGBackToDuelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGBackToDuelRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGBackToDuelRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGBackToDuelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGBackToDuelRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGBackToDuelRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGBackToDuelRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGBackToDuelRsp)
    MergeFrom(*source);
  }
}

void GCGBackToDuelRsp::MergeFrom(const GCGBackToDuelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGBackToDuelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGBackToDuelRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGBackToDuelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGBackToDuelRsp::CopyFrom(const GCGBackToDuelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGBackToDuelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGBackToDuelRsp::IsInitialized() const {
  return true;
}

void GCGBackToDuelRsp::Swap(GCGBackToDuelRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGBackToDuelRsp::InternalSwap(GCGBackToDuelRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGBackToDuelRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGBackToDuelRsp

// int32 retcode = 1;
void GCGBackToDuelRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGBackToDuelRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGBackToDuelRsp.retcode)
  return retcode_;
}
void GCGBackToDuelRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBackToDuelRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDebugReplayNotify::kJsonStrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDebugReplayNotify::GCGDebugReplayNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDebugReplayNotify)
}
GCGDebugReplayNotify::GCGDebugReplayNotify(const GCGDebugReplayNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  json_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.json_str().size() > 0) {
    json_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGDebugReplayNotify)
}

void GCGDebugReplayNotify::SharedCtor() {
  json_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GCGDebugReplayNotify::~GCGDebugReplayNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDebugReplayNotify)
  SharedDtor();
}

void GCGDebugReplayNotify::SharedDtor() {
  json_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GCGDebugReplayNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDebugReplayNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDebugReplayNotify& GCGDebugReplayNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDebugReplayNotify* GCGDebugReplayNotify::New(::google::protobuf::Arena* arena) const {
  GCGDebugReplayNotify* n = new GCGDebugReplayNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDebugReplayNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDebugReplayNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  json_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GCGDebugReplayNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDebugReplayNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string json_str = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_json_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->json_str().data(), static_cast<int>(this->json_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GCGDebugReplayNotify.json_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDebugReplayNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDebugReplayNotify)
  return false;
#undef DO_
}

void GCGDebugReplayNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDebugReplayNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json_str = 9;
  if (this->json_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json_str().data(), static_cast<int>(this->json_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDebugReplayNotify.json_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->json_str(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDebugReplayNotify)
}

::google::protobuf::uint8* GCGDebugReplayNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDebugReplayNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string json_str = 9;
  if (this->json_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->json_str().data(), static_cast<int>(this->json_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDebugReplayNotify.json_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->json_str(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDebugReplayNotify)
  return target;
}

size_t GCGDebugReplayNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDebugReplayNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string json_str = 9;
  if (this->json_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->json_str());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDebugReplayNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDebugReplayNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDebugReplayNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDebugReplayNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDebugReplayNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDebugReplayNotify)
    MergeFrom(*source);
  }
}

void GCGDebugReplayNotify::MergeFrom(const GCGDebugReplayNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDebugReplayNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.json_str().size() > 0) {

    json_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.json_str_);
  }
}

void GCGDebugReplayNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDebugReplayNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDebugReplayNotify::CopyFrom(const GCGDebugReplayNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDebugReplayNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDebugReplayNotify::IsInitialized() const {
  return true;
}

void GCGDebugReplayNotify::Swap(GCGDebugReplayNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDebugReplayNotify::InternalSwap(GCGDebugReplayNotify* other) {
  using std::swap;
  json_str_.Swap(&other->json_str_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDebugReplayNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDebugReplayNotify

// string json_str = 9;
void GCGDebugReplayNotify::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GCGDebugReplayNotify::json_str() const {
  // @@protoc_insertion_point(field_get:proto.GCGDebugReplayNotify.json_str)
  return json_str_.GetNoArena();
}
void GCGDebugReplayNotify::set_json_str(const ::std::string& value) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDebugReplayNotify.json_str)
}
#if LANG_CXX11
void GCGDebugReplayNotify::set_json_str(::std::string&& value) {
  
  json_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDebugReplayNotify.json_str)
}
#endif
void GCGDebugReplayNotify::set_json_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDebugReplayNotify.json_str)
}
void GCGDebugReplayNotify::set_json_str(const char* value, size_t size) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDebugReplayNotify.json_str)
}
::std::string* GCGDebugReplayNotify::mutable_json_str() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDebugReplayNotify.json_str)
  return json_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GCGDebugReplayNotify::release_json_str() {
  // @@protoc_insertion_point(field_release:proto.GCGDebugReplayNotify.json_str)
  
  return json_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GCGDebugReplayNotify::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    
  } else {
    
  }
  json_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDebugReplayNotify.json_str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGameMaxNotify::GCGGameMaxNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGameMaxNotify)
}
GCGGameMaxNotify::GCGGameMaxNotify(const GCGGameMaxNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGGameMaxNotify)
}

void GCGGameMaxNotify::SharedCtor() {
  _cached_size_ = 0;
}

GCGGameMaxNotify::~GCGGameMaxNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGGameMaxNotify)
  SharedDtor();
}

void GCGGameMaxNotify::SharedDtor() {
}

void GCGGameMaxNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGameMaxNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGameMaxNotify& GCGGameMaxNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGameMaxNotify* GCGGameMaxNotify::New(::google::protobuf::Arena* arena) const {
  GCGGameMaxNotify* n = new GCGGameMaxNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGameMaxNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGameMaxNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGGameMaxNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGameMaxNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGameMaxNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGameMaxNotify)
  return false;
#undef DO_
}

void GCGGameMaxNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGameMaxNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGameMaxNotify)
}

::google::protobuf::uint8* GCGGameMaxNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGameMaxNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGameMaxNotify)
  return target;
}

size_t GCGGameMaxNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGameMaxNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGameMaxNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGameMaxNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGameMaxNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGameMaxNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGameMaxNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGameMaxNotify)
    MergeFrom(*source);
  }
}

void GCGGameMaxNotify::MergeFrom(const GCGGameMaxNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGameMaxNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGGameMaxNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGameMaxNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGameMaxNotify::CopyFrom(const GCGGameMaxNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGameMaxNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGameMaxNotify::IsInitialized() const {
  return true;
}

void GCGGameMaxNotify::Swap(GCGGameMaxNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGameMaxNotify::InternalSwap(GCGGameMaxNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGameMaxNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGameMaxNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGGameCreateFailReasonNotify::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGameCreateFailReasonNotify::GCGGameCreateFailReasonNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGameCreateFailReasonNotify)
}
GCGGameCreateFailReasonNotify::GCGGameCreateFailReasonNotify(const GCGGameCreateFailReasonNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGGameCreateFailReasonNotify)
}

void GCGGameCreateFailReasonNotify::SharedCtor() {
  reason_ = 0;
  _cached_size_ = 0;
}

GCGGameCreateFailReasonNotify::~GCGGameCreateFailReasonNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGGameCreateFailReasonNotify)
  SharedDtor();
}

void GCGGameCreateFailReasonNotify::SharedDtor() {
}

void GCGGameCreateFailReasonNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGameCreateFailReasonNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGameCreateFailReasonNotify& GCGGameCreateFailReasonNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGameCreateFailReasonNotify* GCGGameCreateFailReasonNotify::New(::google::protobuf::Arena* arena) const {
  GCGGameCreateFailReasonNotify* n = new GCGGameCreateFailReasonNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGameCreateFailReasonNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGameCreateFailReasonNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear();
}

bool GCGGameCreateFailReasonNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGameCreateFailReasonNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason reason = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGameCreateFailReasonNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGameCreateFailReasonNotify)
  return false;
#undef DO_
}

void GCGGameCreateFailReasonNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGameCreateFailReasonNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason reason = 15;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGameCreateFailReasonNotify)
}

::google::protobuf::uint8* GCGGameCreateFailReasonNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGameCreateFailReasonNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason reason = 15;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGameCreateFailReasonNotify)
  return target;
}

size_t GCGGameCreateFailReasonNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGameCreateFailReasonNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason reason = 15;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGameCreateFailReasonNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGameCreateFailReasonNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGameCreateFailReasonNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGameCreateFailReasonNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGameCreateFailReasonNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGameCreateFailReasonNotify)
    MergeFrom(*source);
  }
}

void GCGGameCreateFailReasonNotify::MergeFrom(const GCGGameCreateFailReasonNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGameCreateFailReasonNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void GCGGameCreateFailReasonNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGameCreateFailReasonNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGameCreateFailReasonNotify::CopyFrom(const GCGGameCreateFailReasonNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGameCreateFailReasonNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGameCreateFailReasonNotify::IsInitialized() const {
  return true;
}

void GCGGameCreateFailReasonNotify::Swap(GCGGameCreateFailReasonNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGameCreateFailReasonNotify::InternalSwap(GCGGameCreateFailReasonNotify* other) {
  using std::swap;
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGameCreateFailReasonNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGameCreateFailReasonNotify

// .proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason reason = 15;
void GCGGameCreateFailReasonNotify::clear_reason() {
  reason_ = 0;
}
::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameCreateFailReasonNotify.reason)
  return static_cast< ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason >(reason_);
}
void GCGGameCreateFailReasonNotify::set_reason(::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameCreateFailReasonNotify.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDeckData::kCardListFieldNumber;
const int GCGDSDeckData::kCardBackIdFieldNumber;
const int GCGDSDeckData::kCharacterCardListFieldNumber;
const int GCGDSDeckData::kNameFieldNumber;
const int GCGDSDeckData::kIdFieldNumber;
const int GCGDSDeckData::kCreateTimeFieldNumber;
const int GCGDSDeckData::kIsValidFieldNumber;
const int GCGDSDeckData::kFieldIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDeckData::GCGDSDeckData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDeckData)
}
GCGDSDeckData::GCGDSDeckData(const GCGDSDeckData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      character_card_list_(from.character_card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDeckData)
}

void GCGDSDeckData::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  _cached_size_ = 0;
}

GCGDSDeckData::~GCGDSDeckData() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDeckData)
  SharedDtor();
}

void GCGDSDeckData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GCGDSDeckData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDeckData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDeckData& GCGDSDeckData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDeckData* GCGDSDeckData::New(::google::protobuf::Arena* arena) const {
  GCGDSDeckData* n = new GCGDSDeckData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDeckData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDeckData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  character_card_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&id_)) + sizeof(create_time_));
  _internal_metadata_.Clear();
}

bool GCGDSDeckData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDeckData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GCGDSDeckData.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 field_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 character_card_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_character_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_character_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 create_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_back_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_back_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDeckData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDeckData)
  return false;
#undef DO_
}

void GCGDSDeckData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDeckData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 1;
  if (this->card_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_list(i), output);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_valid(), output);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSDeckData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // uint32 field_id = 7;
  if (this->field_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->field_id(), output);
  }

  // repeated uint32 character_card_list = 10;
  if (this->character_card_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _character_card_list_cached_byte_size_));
  }
  for (int i = 0, n = this->character_card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->character_card_list(i), output);
  }

  // fixed32 create_time = 13;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->create_time(), output);
  }

  // uint32 card_back_id = 15;
  if (this->card_back_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->card_back_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDeckData)
}

::google::protobuf::uint8* GCGDSDeckData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDeckData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 1;
  if (this->card_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_list_, target);
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_valid(), target);
  }

  // string name = 5;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSDeckData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // uint32 field_id = 7;
  if (this->field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->field_id(), target);
  }

  // repeated uint32 character_card_list = 10;
  if (this->character_card_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _character_card_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->character_card_list_, target);
  }

  // fixed32 create_time = 13;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->create_time(), target);
  }

  // uint32 card_back_id = 15;
  if (this->card_back_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->card_back_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDeckData)
  return target;
}

size_t GCGDSDeckData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDeckData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 character_card_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->character_card_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _character_card_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 5;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 card_back_id = 15;
  if (this->card_back_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_back_id());
  }

  // uint32 field_id = 7;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_id());
  }

  // fixed32 create_time = 13;
  if (this->create_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDeckData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDeckData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDeckData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDeckData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDeckData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDeckData)
    MergeFrom(*source);
  }
}

void GCGDSDeckData::MergeFrom(const GCGDSDeckData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDeckData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  character_card_list_.MergeFrom(from.character_card_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.card_back_id() != 0) {
    set_card_back_id(from.card_back_id());
  }
  if (from.field_id() != 0) {
    set_field_id(from.field_id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
}

void GCGDSDeckData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDeckData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDeckData::CopyFrom(const GCGDSDeckData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDeckData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDeckData::IsInitialized() const {
  return true;
}

void GCGDSDeckData::Swap(GCGDSDeckData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDeckData::InternalSwap(GCGDSDeckData* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  character_card_list_.InternalSwap(&other->character_card_list_);
  name_.Swap(&other->name_);
  swap(id_, other->id_);
  swap(is_valid_, other->is_valid_);
  swap(card_back_id_, other->card_back_id_);
  swap(field_id_, other->field_id_);
  swap(create_time_, other->create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDeckData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDeckData

// repeated uint32 card_list = 1;
int GCGDSDeckData::card_list_size() const {
  return card_list_.size();
}
void GCGDSDeckData::clear_card_list() {
  card_list_.Clear();
}
::google::protobuf::uint32 GCGDSDeckData::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.card_list)
  return card_list_.Get(index);
}
void GCGDSDeckData::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.card_list)
}
void GCGDSDeckData::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckData.card_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckData::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckData.card_list)
  return card_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckData::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckData.card_list)
  return &card_list_;
}

// uint32 card_back_id = 15;
void GCGDSDeckData::clear_card_back_id() {
  card_back_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckData::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.card_back_id)
  return card_back_id_;
}
void GCGDSDeckData::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.card_back_id)
}

// repeated uint32 character_card_list = 10;
int GCGDSDeckData::character_card_list_size() const {
  return character_card_list_.size();
}
void GCGDSDeckData::clear_character_card_list() {
  character_card_list_.Clear();
}
::google::protobuf::uint32 GCGDSDeckData::character_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.character_card_list)
  return character_card_list_.Get(index);
}
void GCGDSDeckData::set_character_card_list(int index, ::google::protobuf::uint32 value) {
  character_card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.character_card_list)
}
void GCGDSDeckData::add_character_card_list(::google::protobuf::uint32 value) {
  character_card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckData.character_card_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckData::character_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckData.character_card_list)
  return character_card_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckData::mutable_character_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckData.character_card_list)
  return &character_card_list_;
}

// string name = 5;
void GCGDSDeckData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GCGDSDeckData::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.name)
  return name_.GetNoArena();
}
void GCGDSDeckData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.name)
}
#if LANG_CXX11
void GCGDSDeckData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSDeckData.name)
}
#endif
void GCGDSDeckData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSDeckData.name)
}
void GCGDSDeckData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSDeckData.name)
}
::std::string* GCGDSDeckData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDeckData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GCGDSDeckData::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSDeckData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GCGDSDeckData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSDeckData.name)
}

// uint32 id = 3;
void GCGDSDeckData::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckData::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.id)
  return id_;
}
void GCGDSDeckData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.id)
}

// fixed32 create_time = 13;
void GCGDSDeckData::clear_create_time() {
  create_time_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckData::create_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.create_time)
  return create_time_;
}
void GCGDSDeckData::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.create_time)
}

// bool is_valid = 4;
void GCGDSDeckData::clear_is_valid() {
  is_valid_ = false;
}
bool GCGDSDeckData::is_valid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.is_valid)
  return is_valid_;
}
void GCGDSDeckData::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.is_valid)
}

// uint32 field_id = 7;
void GCGDSDeckData::clear_field_id() {
  field_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckData::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.field_id)
  return field_id_;
}
void GCGDSDeckData::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.field_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSCardData::kCardIdFieldNumber;
const int GCGDSCardData::kFaceTypeFieldNumber;
const int GCGDSCardData::kNumFieldNumber;
const int GCGDSCardData::kUnlockFaceTypeListFieldNumber;
const int GCGDSCardData::kProficiencyRewardTakenIdxListFieldNumber;
const int GCGDSCardData::kProficiencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSCardData::GCGDSCardData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSCardData)
}
GCGDSCardData::GCGDSCardData(const GCGDSCardData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      proficiency_reward_taken_idx_list_(from.proficiency_reward_taken_idx_list_),
      unlock_face_type_list_(from.unlock_face_type_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&face_type_, &from.face_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&face_type_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSCardData)
}

void GCGDSCardData::SharedCtor() {
  ::memset(&face_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&face_type_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

GCGDSCardData::~GCGDSCardData() {
  // @@protoc_insertion_point(destructor:proto.GCGDSCardData)
  SharedDtor();
}

void GCGDSCardData::SharedDtor() {
}

void GCGDSCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSCardData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSCardData& GCGDSCardData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSCardData* GCGDSCardData::New(::google::protobuf::Arena* arena) const {
  GCGDSCardData* n = new GCGDSCardData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSCardData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSCardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proficiency_reward_taken_idx_list_.Clear();
  unlock_face_type_list_.Clear();
  ::memset(&face_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&face_type_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool GCGDSCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSCardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 face_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 proficiency_reward_taken_idx_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_proficiency_reward_taken_idx_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_proficiency_reward_taken_idx_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 proficiency = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unlock_face_type_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_face_type_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_unlock_face_type_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSCardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSCardData)
  return false;
#undef DO_
}

void GCGDSCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSCardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 face_type = 6;
  if (this->face_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->face_type(), output);
  }

  // repeated uint32 proficiency_reward_taken_idx_list = 7;
  if (this->proficiency_reward_taken_idx_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _proficiency_reward_taken_idx_list_cached_byte_size_));
  }
  for (int i = 0, n = this->proficiency_reward_taken_idx_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->proficiency_reward_taken_idx_list(i), output);
  }

  // uint32 proficiency = 8;
  if (this->proficiency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->proficiency(), output);
  }

  // repeated uint32 unlock_face_type_list = 9;
  if (this->unlock_face_type_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_face_type_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_face_type_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_face_type_list(i), output);
  }

  // uint32 num = 12;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->num(), output);
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSCardData)
}

::google::protobuf::uint8* GCGDSCardData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSCardData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 face_type = 6;
  if (this->face_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->face_type(), target);
  }

  // repeated uint32 proficiency_reward_taken_idx_list = 7;
  if (this->proficiency_reward_taken_idx_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _proficiency_reward_taken_idx_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->proficiency_reward_taken_idx_list_, target);
  }

  // uint32 proficiency = 8;
  if (this->proficiency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->proficiency(), target);
  }

  // repeated uint32 unlock_face_type_list = 9;
  if (this->unlock_face_type_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_face_type_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_face_type_list_, target);
  }

  // uint32 num = 12;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->num(), target);
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSCardData)
  return target;
}

size_t GCGDSCardData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSCardData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 proficiency_reward_taken_idx_list = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->proficiency_reward_taken_idx_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _proficiency_reward_taken_idx_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 unlock_face_type_list = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_face_type_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_face_type_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 face_type = 6;
  if (this->face_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->face_type());
  }

  // uint32 proficiency = 8;
  if (this->proficiency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proficiency());
  }

  // uint32 num = 12;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSCardData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSCardData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSCardData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSCardData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSCardData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSCardData)
    MergeFrom(*source);
  }
}

void GCGDSCardData::MergeFrom(const GCGDSCardData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSCardData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proficiency_reward_taken_idx_list_.MergeFrom(from.proficiency_reward_taken_idx_list_);
  unlock_face_type_list_.MergeFrom(from.unlock_face_type_list_);
  if (from.face_type() != 0) {
    set_face_type(from.face_type());
  }
  if (from.proficiency() != 0) {
    set_proficiency(from.proficiency());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void GCGDSCardData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSCardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSCardData::CopyFrom(const GCGDSCardData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSCardData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSCardData::IsInitialized() const {
  return true;
}

void GCGDSCardData::Swap(GCGDSCardData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSCardData::InternalSwap(GCGDSCardData* other) {
  using std::swap;
  proficiency_reward_taken_idx_list_.InternalSwap(&other->proficiency_reward_taken_idx_list_);
  unlock_face_type_list_.InternalSwap(&other->unlock_face_type_list_);
  swap(face_type_, other->face_type_);
  swap(proficiency_, other->proficiency_);
  swap(num_, other->num_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSCardData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSCardData

// uint32 card_id = 14;
void GCGDSCardData::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSCardData::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.card_id)
  return card_id_;
}
void GCGDSCardData::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.card_id)
}

// uint32 face_type = 6;
void GCGDSCardData::clear_face_type() {
  face_type_ = 0u;
}
::google::protobuf::uint32 GCGDSCardData::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.face_type)
  return face_type_;
}
void GCGDSCardData::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.face_type)
}

// uint32 num = 12;
void GCGDSCardData::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 GCGDSCardData::num() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.num)
  return num_;
}
void GCGDSCardData::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.num)
}

// repeated uint32 unlock_face_type_list = 9;
int GCGDSCardData::unlock_face_type_list_size() const {
  return unlock_face_type_list_.size();
}
void GCGDSCardData::clear_unlock_face_type_list() {
  unlock_face_type_list_.Clear();
}
::google::protobuf::uint32 GCGDSCardData::unlock_face_type_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.unlock_face_type_list)
  return unlock_face_type_list_.Get(index);
}
void GCGDSCardData::set_unlock_face_type_list(int index, ::google::protobuf::uint32 value) {
  unlock_face_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.unlock_face_type_list)
}
void GCGDSCardData::add_unlock_face_type_list(::google::protobuf::uint32 value) {
  unlock_face_type_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSCardData.unlock_face_type_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSCardData::unlock_face_type_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSCardData.unlock_face_type_list)
  return unlock_face_type_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSCardData::mutable_unlock_face_type_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSCardData.unlock_face_type_list)
  return &unlock_face_type_list_;
}

// repeated uint32 proficiency_reward_taken_idx_list = 7;
int GCGDSCardData::proficiency_reward_taken_idx_list_size() const {
  return proficiency_reward_taken_idx_list_.size();
}
void GCGDSCardData::clear_proficiency_reward_taken_idx_list() {
  proficiency_reward_taken_idx_list_.Clear();
}
::google::protobuf::uint32 GCGDSCardData::proficiency_reward_taken_idx_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
  return proficiency_reward_taken_idx_list_.Get(index);
}
void GCGDSCardData::set_proficiency_reward_taken_idx_list(int index, ::google::protobuf::uint32 value) {
  proficiency_reward_taken_idx_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
}
void GCGDSCardData::add_proficiency_reward_taken_idx_list(::google::protobuf::uint32 value) {
  proficiency_reward_taken_idx_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSCardData::proficiency_reward_taken_idx_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
  return proficiency_reward_taken_idx_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSCardData::mutable_proficiency_reward_taken_idx_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
  return &proficiency_reward_taken_idx_list_;
}

// uint32 proficiency = 8;
void GCGDSCardData::clear_proficiency() {
  proficiency_ = 0u;
}
::google::protobuf::uint32 GCGDSCardData::proficiency() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.proficiency)
  return proficiency_;
}
void GCGDSCardData::set_proficiency(::google::protobuf::uint32 value) {
  
  proficiency_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.proficiency)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDataNotify::kDeckListFieldNumber;
const int GCGDSDataNotify::kUnlockCardBackIdListFieldNumber;
const int GCGDSDataNotify::kUnlockFieldIdListFieldNumber;
const int GCGDSDataNotify::kCurDeckIdFieldNumber;
const int GCGDSDataNotify::kCardListFieldNumber;
const int GCGDSDataNotify::kUnlockDeckIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDataNotify::GCGDSDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDataNotify)
}
GCGDSDataNotify::GCGDSDataNotify(const GCGDSDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      unlock_deck_id_list_(from.unlock_deck_id_list_),
      card_list_(from.card_list_),
      deck_list_(from.deck_list_),
      unlock_card_back_id_list_(from.unlock_card_back_id_list_),
      unlock_field_id_list_(from.unlock_field_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cur_deck_id_ = from.cur_deck_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDataNotify)
}

void GCGDSDataNotify::SharedCtor() {
  cur_deck_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSDataNotify::~GCGDSDataNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDataNotify)
  SharedDtor();
}

void GCGDSDataNotify::SharedDtor() {
}

void GCGDSDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDataNotify& GCGDSDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDataNotify* GCGDSDataNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSDataNotify* n = new GCGDSDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlock_deck_id_list_.Clear();
  card_list_.Clear();
  deck_list_.Clear();
  unlock_card_back_id_list_.Clear();
  unlock_field_id_list_.Clear();
  cur_deck_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 unlock_deck_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_deck_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_unlock_deck_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGDSCardData card_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGDSDeckData deck_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deck_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unlock_card_back_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_card_back_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_unlock_card_back_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unlock_field_id_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_field_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_unlock_field_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_deck_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDataNotify)
  return false;
#undef DO_
}

void GCGDSDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unlock_deck_id_list = 1;
  if (this->unlock_deck_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_deck_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_deck_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_deck_id_list(i), output);
  }

  // repeated .proto.GCGDSCardData card_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card_list(static_cast<int>(i)), output);
  }

  // repeated .proto.GCGDSDeckData deck_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deck_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->deck_list(static_cast<int>(i)), output);
  }

  // repeated uint32 unlock_card_back_id_list = 5;
  if (this->unlock_card_back_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_card_back_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_card_back_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_card_back_id_list(i), output);
  }

  // repeated uint32 unlock_field_id_list = 6;
  if (this->unlock_field_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_field_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_field_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_field_id_list(i), output);
  }

  // uint32 cur_deck_id = 10;
  if (this->cur_deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cur_deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDataNotify)
}

::google::protobuf::uint8* GCGDSDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unlock_deck_id_list = 1;
  if (this->unlock_deck_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_deck_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_deck_id_list_, target);
  }

  // repeated .proto.GCGDSCardData card_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.GCGDSDeckData deck_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deck_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->deck_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 unlock_card_back_id_list = 5;
  if (this->unlock_card_back_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_card_back_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_card_back_id_list_, target);
  }

  // repeated uint32 unlock_field_id_list = 6;
  if (this->unlock_field_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_field_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_field_id_list_, target);
  }

  // uint32 cur_deck_id = 10;
  if (this->cur_deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cur_deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDataNotify)
  return target;
}

size_t GCGDSDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 unlock_deck_id_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_deck_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_deck_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGDSCardData card_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGDSDeckData deck_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->deck_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deck_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 unlock_card_back_id_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_card_back_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_card_back_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 unlock_field_id_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_field_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_field_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 cur_deck_id = 10;
  if (this->cur_deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDataNotify)
    MergeFrom(*source);
  }
}

void GCGDSDataNotify::MergeFrom(const GCGDSDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlock_deck_id_list_.MergeFrom(from.unlock_deck_id_list_);
  card_list_.MergeFrom(from.card_list_);
  deck_list_.MergeFrom(from.deck_list_);
  unlock_card_back_id_list_.MergeFrom(from.unlock_card_back_id_list_);
  unlock_field_id_list_.MergeFrom(from.unlock_field_id_list_);
  if (from.cur_deck_id() != 0) {
    set_cur_deck_id(from.cur_deck_id());
  }
}

void GCGDSDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDataNotify::CopyFrom(const GCGDSDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDataNotify::IsInitialized() const {
  return true;
}

void GCGDSDataNotify::Swap(GCGDSDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDataNotify::InternalSwap(GCGDSDataNotify* other) {
  using std::swap;
  unlock_deck_id_list_.InternalSwap(&other->unlock_deck_id_list_);
  card_list_.InternalSwap(&other->card_list_);
  deck_list_.InternalSwap(&other->deck_list_);
  unlock_card_back_id_list_.InternalSwap(&other->unlock_card_back_id_list_);
  unlock_field_id_list_.InternalSwap(&other->unlock_field_id_list_);
  swap(cur_deck_id_, other->cur_deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDataNotify

// repeated .proto.GCGDSDeckData deck_list = 4;
int GCGDSDataNotify::deck_list_size() const {
  return deck_list_.size();
}
void GCGDSDataNotify::clear_deck_list() {
  deck_list_.Clear();
}
const ::proto::GCGDSDeckData& GCGDSDataNotify::deck_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.deck_list)
  return deck_list_.Get(index);
}
::proto::GCGDSDeckData* GCGDSDataNotify::mutable_deck_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDataNotify.deck_list)
  return deck_list_.Mutable(index);
}
::proto::GCGDSDeckData* GCGDSDataNotify::add_deck_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.deck_list)
  return deck_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGDSDeckData >*
GCGDSDataNotify::mutable_deck_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.deck_list)
  return &deck_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGDSDeckData >&
GCGDSDataNotify::deck_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.deck_list)
  return deck_list_;
}

// repeated uint32 unlock_card_back_id_list = 5;
int GCGDSDataNotify::unlock_card_back_id_list_size() const {
  return unlock_card_back_id_list_.size();
}
void GCGDSDataNotify::clear_unlock_card_back_id_list() {
  unlock_card_back_id_list_.Clear();
}
::google::protobuf::uint32 GCGDSDataNotify::unlock_card_back_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.unlock_card_back_id_list)
  return unlock_card_back_id_list_.Get(index);
}
void GCGDSDataNotify::set_unlock_card_back_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_card_back_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.unlock_card_back_id_list)
}
void GCGDSDataNotify::add_unlock_card_back_id_list(::google::protobuf::uint32 value) {
  unlock_card_back_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.unlock_card_back_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDataNotify::unlock_card_back_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.unlock_card_back_id_list)
  return unlock_card_back_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDataNotify::mutable_unlock_card_back_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.unlock_card_back_id_list)
  return &unlock_card_back_id_list_;
}

// repeated uint32 unlock_field_id_list = 6;
int GCGDSDataNotify::unlock_field_id_list_size() const {
  return unlock_field_id_list_.size();
}
void GCGDSDataNotify::clear_unlock_field_id_list() {
  unlock_field_id_list_.Clear();
}
::google::protobuf::uint32 GCGDSDataNotify::unlock_field_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.unlock_field_id_list)
  return unlock_field_id_list_.Get(index);
}
void GCGDSDataNotify::set_unlock_field_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_field_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.unlock_field_id_list)
}
void GCGDSDataNotify::add_unlock_field_id_list(::google::protobuf::uint32 value) {
  unlock_field_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.unlock_field_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDataNotify::unlock_field_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.unlock_field_id_list)
  return unlock_field_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDataNotify::mutable_unlock_field_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.unlock_field_id_list)
  return &unlock_field_id_list_;
}

// uint32 cur_deck_id = 10;
void GCGDSDataNotify::clear_cur_deck_id() {
  cur_deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDataNotify::cur_deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.cur_deck_id)
  return cur_deck_id_;
}
void GCGDSDataNotify::set_cur_deck_id(::google::protobuf::uint32 value) {
  
  cur_deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.cur_deck_id)
}

// repeated .proto.GCGDSCardData card_list = 3;
int GCGDSDataNotify::card_list_size() const {
  return card_list_.size();
}
void GCGDSDataNotify::clear_card_list() {
  card_list_.Clear();
}
const ::proto::GCGDSCardData& GCGDSDataNotify::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.card_list)
  return card_list_.Get(index);
}
::proto::GCGDSCardData* GCGDSDataNotify::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDataNotify.card_list)
  return card_list_.Mutable(index);
}
::proto::GCGDSCardData* GCGDSDataNotify::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGDSCardData >*
GCGDSDataNotify::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGDSCardData >&
GCGDSDataNotify::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.card_list)
  return card_list_;
}

// repeated uint32 unlock_deck_id_list = 1;
int GCGDSDataNotify::unlock_deck_id_list_size() const {
  return unlock_deck_id_list_.size();
}
void GCGDSDataNotify::clear_unlock_deck_id_list() {
  unlock_deck_id_list_.Clear();
}
::google::protobuf::uint32 GCGDSDataNotify::unlock_deck_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.unlock_deck_id_list)
  return unlock_deck_id_list_.Get(index);
}
void GCGDSDataNotify::set_unlock_deck_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_deck_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.unlock_deck_id_list)
}
void GCGDSDataNotify::add_unlock_deck_id_list(::google::protobuf::uint32 value) {
  unlock_deck_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.unlock_deck_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDataNotify::unlock_deck_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.unlock_deck_id_list)
  return unlock_deck_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDataNotify::mutable_unlock_deck_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.unlock_deck_id_list)
  return &unlock_deck_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSCardBackUnlockNotify::kCardBackIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSCardBackUnlockNotify::GCGDSCardBackUnlockNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSCardBackUnlockNotify)
}
GCGDSCardBackUnlockNotify::GCGDSCardBackUnlockNotify(const GCGDSCardBackUnlockNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  card_back_id_ = from.card_back_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSCardBackUnlockNotify)
}

void GCGDSCardBackUnlockNotify::SharedCtor() {
  card_back_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSCardBackUnlockNotify::~GCGDSCardBackUnlockNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSCardBackUnlockNotify)
  SharedDtor();
}

void GCGDSCardBackUnlockNotify::SharedDtor() {
}

void GCGDSCardBackUnlockNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSCardBackUnlockNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSCardBackUnlockNotify& GCGDSCardBackUnlockNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSCardBackUnlockNotify* GCGDSCardBackUnlockNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSCardBackUnlockNotify* n = new GCGDSCardBackUnlockNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSCardBackUnlockNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSCardBackUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_back_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSCardBackUnlockNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSCardBackUnlockNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_back_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_back_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSCardBackUnlockNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSCardBackUnlockNotify)
  return false;
#undef DO_
}

void GCGDSCardBackUnlockNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSCardBackUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_back_id = 6;
  if (this->card_back_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_back_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSCardBackUnlockNotify)
}

::google::protobuf::uint8* GCGDSCardBackUnlockNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSCardBackUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_back_id = 6;
  if (this->card_back_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_back_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSCardBackUnlockNotify)
  return target;
}

size_t GCGDSCardBackUnlockNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSCardBackUnlockNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_back_id = 6;
  if (this->card_back_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_back_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSCardBackUnlockNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSCardBackUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSCardBackUnlockNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSCardBackUnlockNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSCardBackUnlockNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSCardBackUnlockNotify)
    MergeFrom(*source);
  }
}

void GCGDSCardBackUnlockNotify::MergeFrom(const GCGDSCardBackUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSCardBackUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_back_id() != 0) {
    set_card_back_id(from.card_back_id());
  }
}

void GCGDSCardBackUnlockNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSCardBackUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSCardBackUnlockNotify::CopyFrom(const GCGDSCardBackUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSCardBackUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSCardBackUnlockNotify::IsInitialized() const {
  return true;
}

void GCGDSCardBackUnlockNotify::Swap(GCGDSCardBackUnlockNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSCardBackUnlockNotify::InternalSwap(GCGDSCardBackUnlockNotify* other) {
  using std::swap;
  swap(card_back_id_, other->card_back_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSCardBackUnlockNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSCardBackUnlockNotify

// uint32 card_back_id = 6;
void GCGDSCardBackUnlockNotify::clear_card_back_id() {
  card_back_id_ = 0u;
}
::google::protobuf::uint32 GCGDSCardBackUnlockNotify::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardBackUnlockNotify.card_back_id)
  return card_back_id_;
}
void GCGDSCardBackUnlockNotify::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardBackUnlockNotify.card_back_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSFieldUnlockNotify::kFieldIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSFieldUnlockNotify::GCGDSFieldUnlockNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSFieldUnlockNotify)
}
GCGDSFieldUnlockNotify::GCGDSFieldUnlockNotify(const GCGDSFieldUnlockNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_id_ = from.field_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSFieldUnlockNotify)
}

void GCGDSFieldUnlockNotify::SharedCtor() {
  field_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSFieldUnlockNotify::~GCGDSFieldUnlockNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSFieldUnlockNotify)
  SharedDtor();
}

void GCGDSFieldUnlockNotify::SharedDtor() {
}

void GCGDSFieldUnlockNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSFieldUnlockNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSFieldUnlockNotify& GCGDSFieldUnlockNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSFieldUnlockNotify* GCGDSFieldUnlockNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSFieldUnlockNotify* n = new GCGDSFieldUnlockNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSFieldUnlockNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSFieldUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSFieldUnlockNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSFieldUnlockNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 field_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSFieldUnlockNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSFieldUnlockNotify)
  return false;
#undef DO_
}

void GCGDSFieldUnlockNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSFieldUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->field_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSFieldUnlockNotify)
}

::google::protobuf::uint8* GCGDSFieldUnlockNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSFieldUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->field_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSFieldUnlockNotify)
  return target;
}

size_t GCGDSFieldUnlockNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSFieldUnlockNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 field_id = 1;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSFieldUnlockNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSFieldUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSFieldUnlockNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSFieldUnlockNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSFieldUnlockNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSFieldUnlockNotify)
    MergeFrom(*source);
  }
}

void GCGDSFieldUnlockNotify::MergeFrom(const GCGDSFieldUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSFieldUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_id() != 0) {
    set_field_id(from.field_id());
  }
}

void GCGDSFieldUnlockNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSFieldUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSFieldUnlockNotify::CopyFrom(const GCGDSFieldUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSFieldUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSFieldUnlockNotify::IsInitialized() const {
  return true;
}

void GCGDSFieldUnlockNotify::Swap(GCGDSFieldUnlockNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSFieldUnlockNotify::InternalSwap(GCGDSFieldUnlockNotify* other) {
  using std::swap;
  swap(field_id_, other->field_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSFieldUnlockNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSFieldUnlockNotify

// uint32 field_id = 1;
void GCGDSFieldUnlockNotify::clear_field_id() {
  field_id_ = 0u;
}
::google::protobuf::uint32 GCGDSFieldUnlockNotify::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSFieldUnlockNotify.field_id)
  return field_id_;
}
void GCGDSFieldUnlockNotify::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSFieldUnlockNotify.field_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSCardFaceUnlockNotify::kCardIdFieldNumber;
const int GCGDSCardFaceUnlockNotify::kFaceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSCardFaceUnlockNotify::GCGDSCardFaceUnlockNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSCardFaceUnlockNotify)
}
GCGDSCardFaceUnlockNotify::GCGDSCardFaceUnlockNotify(const GCGDSCardFaceUnlockNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&face_type_, &from.face_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&face_type_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSCardFaceUnlockNotify)
}

void GCGDSCardFaceUnlockNotify::SharedCtor() {
  ::memset(&face_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&face_type_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

GCGDSCardFaceUnlockNotify::~GCGDSCardFaceUnlockNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSCardFaceUnlockNotify)
  SharedDtor();
}

void GCGDSCardFaceUnlockNotify::SharedDtor() {
}

void GCGDSCardFaceUnlockNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSCardFaceUnlockNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSCardFaceUnlockNotify& GCGDSCardFaceUnlockNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSCardFaceUnlockNotify* GCGDSCardFaceUnlockNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSCardFaceUnlockNotify* n = new GCGDSCardFaceUnlockNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSCardFaceUnlockNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSCardFaceUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&face_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&face_type_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool GCGDSCardFaceUnlockNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSCardFaceUnlockNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 face_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSCardFaceUnlockNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSCardFaceUnlockNotify)
  return false;
#undef DO_
}

void GCGDSCardFaceUnlockNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSCardFaceUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 face_type = 1;
  if (this->face_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->face_type(), output);
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSCardFaceUnlockNotify)
}

::google::protobuf::uint8* GCGDSCardFaceUnlockNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSCardFaceUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 face_type = 1;
  if (this->face_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->face_type(), target);
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSCardFaceUnlockNotify)
  return target;
}

size_t GCGDSCardFaceUnlockNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSCardFaceUnlockNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 face_type = 1;
  if (this->face_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->face_type());
  }

  // uint32 card_id = 13;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSCardFaceUnlockNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSCardFaceUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSCardFaceUnlockNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSCardFaceUnlockNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSCardFaceUnlockNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSCardFaceUnlockNotify)
    MergeFrom(*source);
  }
}

void GCGDSCardFaceUnlockNotify::MergeFrom(const GCGDSCardFaceUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSCardFaceUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.face_type() != 0) {
    set_face_type(from.face_type());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void GCGDSCardFaceUnlockNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSCardFaceUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSCardFaceUnlockNotify::CopyFrom(const GCGDSCardFaceUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSCardFaceUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSCardFaceUnlockNotify::IsInitialized() const {
  return true;
}

void GCGDSCardFaceUnlockNotify::Swap(GCGDSCardFaceUnlockNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSCardFaceUnlockNotify::InternalSwap(GCGDSCardFaceUnlockNotify* other) {
  using std::swap;
  swap(face_type_, other->face_type_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSCardFaceUnlockNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSCardFaceUnlockNotify

// uint32 card_id = 13;
void GCGDSCardFaceUnlockNotify::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSCardFaceUnlockNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUnlockNotify.card_id)
  return card_id_;
}
void GCGDSCardFaceUnlockNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUnlockNotify.card_id)
}

// uint32 face_type = 1;
void GCGDSCardFaceUnlockNotify::clear_face_type() {
  face_type_ = 0u;
}
::google::protobuf::uint32 GCGDSCardFaceUnlockNotify::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUnlockNotify.face_type)
  return face_type_;
}
void GCGDSCardFaceUnlockNotify::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUnlockNotify.face_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSCardNumChangeNotify::kCardIdFieldNumber;
const int GCGDSCardNumChangeNotify::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSCardNumChangeNotify::GCGDSCardNumChangeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSCardNumChangeNotify)
}
GCGDSCardNumChangeNotify::GCGDSCardNumChangeNotify(const GCGDSCardNumChangeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(num_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSCardNumChangeNotify)
}

void GCGDSCardNumChangeNotify::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(num_));
  _cached_size_ = 0;
}

GCGDSCardNumChangeNotify::~GCGDSCardNumChangeNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSCardNumChangeNotify)
  SharedDtor();
}

void GCGDSCardNumChangeNotify::SharedDtor() {
}

void GCGDSCardNumChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSCardNumChangeNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSCardNumChangeNotify& GCGDSCardNumChangeNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSCardNumChangeNotify* GCGDSCardNumChangeNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSCardNumChangeNotify* n = new GCGDSCardNumChangeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSCardNumChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSCardNumChangeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(num_));
  _internal_metadata_.Clear();
}

bool GCGDSCardNumChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSCardNumChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSCardNumChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSCardNumChangeNotify)
  return false;
#undef DO_
}

void GCGDSCardNumChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSCardNumChangeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 4;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_id(), output);
  }

  // uint32 num = 10;
  if (this->num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSCardNumChangeNotify)
}

::google::protobuf::uint8* GCGDSCardNumChangeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSCardNumChangeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 4;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card_id(), target);
  }

  // uint32 num = 10;
  if (this->num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSCardNumChangeNotify)
  return target;
}

size_t GCGDSCardNumChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSCardNumChangeNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 4;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 num = 10;
  if (this->num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSCardNumChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSCardNumChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSCardNumChangeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSCardNumChangeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSCardNumChangeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSCardNumChangeNotify)
    MergeFrom(*source);
  }
}

void GCGDSCardNumChangeNotify::MergeFrom(const GCGDSCardNumChangeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSCardNumChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.num() != 0) {
    set_num(from.num());
  }
}

void GCGDSCardNumChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSCardNumChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSCardNumChangeNotify::CopyFrom(const GCGDSCardNumChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSCardNumChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSCardNumChangeNotify::IsInitialized() const {
  return true;
}

void GCGDSCardNumChangeNotify::Swap(GCGDSCardNumChangeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSCardNumChangeNotify::InternalSwap(GCGDSCardNumChangeNotify* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(num_, other->num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSCardNumChangeNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSCardNumChangeNotify

// uint32 card_id = 4;
void GCGDSCardNumChangeNotify::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSCardNumChangeNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardNumChangeNotify.card_id)
  return card_id_;
}
void GCGDSCardNumChangeNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardNumChangeNotify.card_id)
}

// uint32 num = 10;
void GCGDSCardNumChangeNotify::clear_num() {
  num_ = 0u;
}
::google::protobuf::uint32 GCGDSCardNumChangeNotify::num() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardNumChangeNotify.num)
  return num_;
}
void GCGDSCardNumChangeNotify::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardNumChangeNotify.num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeCardFaceReq::kFaceTypeFieldNumber;
const int GCGDSChangeCardFaceReq::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeCardFaceReq::GCGDSChangeCardFaceReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeCardFaceReq)
}
GCGDSChangeCardFaceReq::GCGDSChangeCardFaceReq(const GCGDSChangeCardFaceReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_type_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(face_type_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeCardFaceReq)
}

void GCGDSChangeCardFaceReq::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_type_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(face_type_));
  _cached_size_ = 0;
}

GCGDSChangeCardFaceReq::~GCGDSChangeCardFaceReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeCardFaceReq)
  SharedDtor();
}

void GCGDSChangeCardFaceReq::SharedDtor() {
}

void GCGDSChangeCardFaceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeCardFaceReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeCardFaceReq& GCGDSChangeCardFaceReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeCardFaceReq* GCGDSChangeCardFaceReq::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeCardFaceReq* n = new GCGDSChangeCardFaceReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeCardFaceReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeCardFaceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_type_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(face_type_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeCardFaceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeCardFaceReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 face_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeCardFaceReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeCardFaceReq)
  return false;
#undef DO_
}

void GCGDSChangeCardFaceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeCardFaceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 3;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->card_id(), output);
  }

  // uint32 face_type = 6;
  if (this->face_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->face_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeCardFaceReq)
}

::google::protobuf::uint8* GCGDSChangeCardFaceReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeCardFaceReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 3;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->card_id(), target);
  }

  // uint32 face_type = 6;
  if (this->face_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->face_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeCardFaceReq)
  return target;
}

size_t GCGDSChangeCardFaceReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeCardFaceReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 3;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 face_type = 6;
  if (this->face_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->face_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeCardFaceReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeCardFaceReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeCardFaceReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeCardFaceReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeCardFaceReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeCardFaceReq)
    MergeFrom(*source);
  }
}

void GCGDSChangeCardFaceReq::MergeFrom(const GCGDSChangeCardFaceReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeCardFaceReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.face_type() != 0) {
    set_face_type(from.face_type());
  }
}

void GCGDSChangeCardFaceReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeCardFaceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeCardFaceReq::CopyFrom(const GCGDSChangeCardFaceReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeCardFaceReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeCardFaceReq::IsInitialized() const {
  return true;
}

void GCGDSChangeCardFaceReq::Swap(GCGDSChangeCardFaceReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeCardFaceReq::InternalSwap(GCGDSChangeCardFaceReq* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(face_type_, other->face_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeCardFaceReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeCardFaceReq

// uint32 face_type = 6;
void GCGDSChangeCardFaceReq::clear_face_type() {
  face_type_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardFaceReq::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceReq.face_type)
  return face_type_;
}
void GCGDSChangeCardFaceReq::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceReq.face_type)
}

// uint32 card_id = 3;
void GCGDSChangeCardFaceReq::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardFaceReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceReq.card_id)
  return card_id_;
}
void GCGDSChangeCardFaceReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceReq.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeCardFaceRsp::kFaceTypeFieldNumber;
const int GCGDSChangeCardFaceRsp::kCardIdFieldNumber;
const int GCGDSChangeCardFaceRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeCardFaceRsp::GCGDSChangeCardFaceRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeCardFaceRsp)
}
GCGDSChangeCardFaceRsp::GCGDSChangeCardFaceRsp(const GCGDSChangeCardFaceRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_type_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(face_type_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeCardFaceRsp)
}

void GCGDSChangeCardFaceRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_type_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(face_type_));
  _cached_size_ = 0;
}

GCGDSChangeCardFaceRsp::~GCGDSChangeCardFaceRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeCardFaceRsp)
  SharedDtor();
}

void GCGDSChangeCardFaceRsp::SharedDtor() {
}

void GCGDSChangeCardFaceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeCardFaceRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeCardFaceRsp& GCGDSChangeCardFaceRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeCardFaceRsp* GCGDSChangeCardFaceRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeCardFaceRsp* n = new GCGDSChangeCardFaceRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeCardFaceRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeCardFaceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_type_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(face_type_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeCardFaceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeCardFaceRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 face_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeCardFaceRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeCardFaceRsp)
  return false;
#undef DO_
}

void GCGDSChangeCardFaceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeCardFaceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 4;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->card_id(), output);
  }

  // uint32 face_type = 8;
  if (this->face_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->face_type(), output);
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeCardFaceRsp)
}

::google::protobuf::uint8* GCGDSChangeCardFaceRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeCardFaceRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 4;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->card_id(), target);
  }

  // uint32 face_type = 8;
  if (this->face_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->face_type(), target);
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeCardFaceRsp)
  return target;
}

size_t GCGDSChangeCardFaceRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeCardFaceRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 9;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 card_id = 4;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 face_type = 8;
  if (this->face_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->face_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeCardFaceRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeCardFaceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeCardFaceRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeCardFaceRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeCardFaceRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeCardFaceRsp)
    MergeFrom(*source);
  }
}

void GCGDSChangeCardFaceRsp::MergeFrom(const GCGDSChangeCardFaceRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeCardFaceRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.face_type() != 0) {
    set_face_type(from.face_type());
  }
}

void GCGDSChangeCardFaceRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeCardFaceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeCardFaceRsp::CopyFrom(const GCGDSChangeCardFaceRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeCardFaceRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeCardFaceRsp::IsInitialized() const {
  return true;
}

void GCGDSChangeCardFaceRsp::Swap(GCGDSChangeCardFaceRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeCardFaceRsp::InternalSwap(GCGDSChangeCardFaceRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(card_id_, other->card_id_);
  swap(face_type_, other->face_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeCardFaceRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeCardFaceRsp

// uint32 face_type = 8;
void GCGDSChangeCardFaceRsp::clear_face_type() {
  face_type_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardFaceRsp::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceRsp.face_type)
  return face_type_;
}
void GCGDSChangeCardFaceRsp::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceRsp.face_type)
}

// uint32 card_id = 4;
void GCGDSChangeCardFaceRsp::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardFaceRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceRsp.card_id)
  return card_id_;
}
void GCGDSChangeCardFaceRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceRsp.card_id)
}

// int32 retcode = 9;
void GCGDSChangeCardFaceRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSChangeCardFaceRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceRsp.retcode)
  return retcode_;
}
void GCGDSChangeCardFaceRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeCardBackReq::kDeckIdFieldNumber;
const int GCGDSChangeCardBackReq::kCardBackIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeCardBackReq::GCGDSChangeCardBackReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeCardBackReq)
}
GCGDSChangeCardBackReq::GCGDSChangeCardBackReq(const GCGDSChangeCardBackReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deck_id_, &from.deck_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_back_id_) -
    reinterpret_cast<char*>(&deck_id_)) + sizeof(card_back_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeCardBackReq)
}

void GCGDSChangeCardBackReq::SharedCtor() {
  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_back_id_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(card_back_id_));
  _cached_size_ = 0;
}

GCGDSChangeCardBackReq::~GCGDSChangeCardBackReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeCardBackReq)
  SharedDtor();
}

void GCGDSChangeCardBackReq::SharedDtor() {
}

void GCGDSChangeCardBackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeCardBackReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeCardBackReq& GCGDSChangeCardBackReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeCardBackReq* GCGDSChangeCardBackReq::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeCardBackReq* n = new GCGDSChangeCardBackReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeCardBackReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeCardBackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_back_id_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(card_back_id_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeCardBackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeCardBackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_back_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_back_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeCardBackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeCardBackReq)
  return false;
#undef DO_
}

void GCGDSChangeCardBackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeCardBackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 10;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->deck_id(), output);
  }

  // uint32 card_back_id = 12;
  if (this->card_back_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->card_back_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeCardBackReq)
}

::google::protobuf::uint8* GCGDSChangeCardBackReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeCardBackReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 10;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->deck_id(), target);
  }

  // uint32 card_back_id = 12;
  if (this->card_back_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->card_back_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeCardBackReq)
  return target;
}

size_t GCGDSChangeCardBackReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeCardBackReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deck_id = 10;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  // uint32 card_back_id = 12;
  if (this->card_back_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_back_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeCardBackReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeCardBackReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeCardBackReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeCardBackReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeCardBackReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeCardBackReq)
    MergeFrom(*source);
  }
}

void GCGDSChangeCardBackReq::MergeFrom(const GCGDSChangeCardBackReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeCardBackReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
  if (from.card_back_id() != 0) {
    set_card_back_id(from.card_back_id());
  }
}

void GCGDSChangeCardBackReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeCardBackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeCardBackReq::CopyFrom(const GCGDSChangeCardBackReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeCardBackReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeCardBackReq::IsInitialized() const {
  return true;
}

void GCGDSChangeCardBackReq::Swap(GCGDSChangeCardBackReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeCardBackReq::InternalSwap(GCGDSChangeCardBackReq* other) {
  using std::swap;
  swap(deck_id_, other->deck_id_);
  swap(card_back_id_, other->card_back_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeCardBackReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeCardBackReq

// uint32 deck_id = 10;
void GCGDSChangeCardBackReq::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardBackReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackReq.deck_id)
  return deck_id_;
}
void GCGDSChangeCardBackReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackReq.deck_id)
}

// uint32 card_back_id = 12;
void GCGDSChangeCardBackReq::clear_card_back_id() {
  card_back_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardBackReq::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackReq.card_back_id)
  return card_back_id_;
}
void GCGDSChangeCardBackReq::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackReq.card_back_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeCardBackRsp::kRetcodeFieldNumber;
const int GCGDSChangeCardBackRsp::kCardBackIdFieldNumber;
const int GCGDSChangeCardBackRsp::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeCardBackRsp::GCGDSChangeCardBackRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeCardBackRsp)
}
GCGDSChangeCardBackRsp::GCGDSChangeCardBackRsp(const GCGDSChangeCardBackRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_back_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(card_back_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeCardBackRsp)
}

void GCGDSChangeCardBackRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_back_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(card_back_id_));
  _cached_size_ = 0;
}

GCGDSChangeCardBackRsp::~GCGDSChangeCardBackRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeCardBackRsp)
  SharedDtor();
}

void GCGDSChangeCardBackRsp::SharedDtor() {
}

void GCGDSChangeCardBackRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeCardBackRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeCardBackRsp& GCGDSChangeCardBackRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeCardBackRsp* GCGDSChangeCardBackRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeCardBackRsp* n = new GCGDSChangeCardBackRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeCardBackRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeCardBackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_back_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(card_back_id_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeCardBackRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeCardBackRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_back_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_back_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeCardBackRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeCardBackRsp)
  return false;
#undef DO_
}

void GCGDSChangeCardBackRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeCardBackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 5;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deck_id(), output);
  }

  // uint32 card_back_id = 6;
  if (this->card_back_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_back_id(), output);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeCardBackRsp)
}

::google::protobuf::uint8* GCGDSChangeCardBackRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeCardBackRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 5;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->deck_id(), target);
  }

  // uint32 card_back_id = 6;
  if (this->card_back_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_back_id(), target);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeCardBackRsp)
  return target;
}

size_t GCGDSChangeCardBackRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeCardBackRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 15;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 deck_id = 5;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  // uint32 card_back_id = 6;
  if (this->card_back_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_back_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeCardBackRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeCardBackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeCardBackRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeCardBackRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeCardBackRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeCardBackRsp)
    MergeFrom(*source);
  }
}

void GCGDSChangeCardBackRsp::MergeFrom(const GCGDSChangeCardBackRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeCardBackRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
  if (from.card_back_id() != 0) {
    set_card_back_id(from.card_back_id());
  }
}

void GCGDSChangeCardBackRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeCardBackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeCardBackRsp::CopyFrom(const GCGDSChangeCardBackRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeCardBackRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeCardBackRsp::IsInitialized() const {
  return true;
}

void GCGDSChangeCardBackRsp::Swap(GCGDSChangeCardBackRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeCardBackRsp::InternalSwap(GCGDSChangeCardBackRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(deck_id_, other->deck_id_);
  swap(card_back_id_, other->card_back_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeCardBackRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeCardBackRsp

// int32 retcode = 15;
void GCGDSChangeCardBackRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSChangeCardBackRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackRsp.retcode)
  return retcode_;
}
void GCGDSChangeCardBackRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackRsp.retcode)
}

// uint32 card_back_id = 6;
void GCGDSChangeCardBackRsp::clear_card_back_id() {
  card_back_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardBackRsp::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackRsp.card_back_id)
  return card_back_id_;
}
void GCGDSChangeCardBackRsp::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackRsp.card_back_id)
}

// uint32 deck_id = 5;
void GCGDSChangeCardBackRsp::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCardBackRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackRsp.deck_id)
  return deck_id_;
}
void GCGDSChangeCardBackRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackRsp.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeFieldReq::kFieldIdFieldNumber;
const int GCGDSChangeFieldReq::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeFieldReq::GCGDSChangeFieldReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeFieldReq)
}
GCGDSChangeFieldReq::GCGDSChangeFieldReq(const GCGDSChangeFieldReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&field_id_, &from.field_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&deck_id_) -
    reinterpret_cast<char*>(&field_id_)) + sizeof(deck_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeFieldReq)
}

void GCGDSChangeFieldReq::SharedCtor() {
  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deck_id_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(deck_id_));
  _cached_size_ = 0;
}

GCGDSChangeFieldReq::~GCGDSChangeFieldReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeFieldReq)
  SharedDtor();
}

void GCGDSChangeFieldReq::SharedDtor() {
}

void GCGDSChangeFieldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeFieldReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeFieldReq& GCGDSChangeFieldReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeFieldReq* GCGDSChangeFieldReq::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeFieldReq* n = new GCGDSChangeFieldReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeFieldReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeFieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&field_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deck_id_) -
      reinterpret_cast<char*>(&field_id_)) + sizeof(deck_id_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeFieldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeFieldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 field_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deck_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeFieldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeFieldReq)
  return false;
#undef DO_
}

void GCGDSChangeFieldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeFieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 field_id = 6;
  if (this->field_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->field_id(), output);
  }

  // uint32 deck_id = 11;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeFieldReq)
}

::google::protobuf::uint8* GCGDSChangeFieldReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeFieldReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 field_id = 6;
  if (this->field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->field_id(), target);
  }

  // uint32 deck_id = 11;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeFieldReq)
  return target;
}

size_t GCGDSChangeFieldReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeFieldReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 field_id = 6;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_id());
  }

  // uint32 deck_id = 11;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeFieldReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeFieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeFieldReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeFieldReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeFieldReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeFieldReq)
    MergeFrom(*source);
  }
}

void GCGDSChangeFieldReq::MergeFrom(const GCGDSChangeFieldReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeFieldReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field_id() != 0) {
    set_field_id(from.field_id());
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSChangeFieldReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeFieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeFieldReq::CopyFrom(const GCGDSChangeFieldReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeFieldReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeFieldReq::IsInitialized() const {
  return true;
}

void GCGDSChangeFieldReq::Swap(GCGDSChangeFieldReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeFieldReq::InternalSwap(GCGDSChangeFieldReq* other) {
  using std::swap;
  swap(field_id_, other->field_id_);
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeFieldReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeFieldReq

// uint32 field_id = 6;
void GCGDSChangeFieldReq::clear_field_id() {
  field_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeFieldReq::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldReq.field_id)
  return field_id_;
}
void GCGDSChangeFieldReq::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldReq.field_id)
}

// uint32 deck_id = 11;
void GCGDSChangeFieldReq::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeFieldReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldReq.deck_id)
  return deck_id_;
}
void GCGDSChangeFieldReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldReq.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeFieldRsp::kRetcodeFieldNumber;
const int GCGDSChangeFieldRsp::kFieldIdFieldNumber;
const int GCGDSChangeFieldRsp::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeFieldRsp::GCGDSChangeFieldRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeFieldRsp)
}
GCGDSChangeFieldRsp::GCGDSChangeFieldRsp(const GCGDSChangeFieldRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(field_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeFieldRsp)
}

void GCGDSChangeFieldRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(field_id_));
  _cached_size_ = 0;
}

GCGDSChangeFieldRsp::~GCGDSChangeFieldRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeFieldRsp)
  SharedDtor();
}

void GCGDSChangeFieldRsp::SharedDtor() {
}

void GCGDSChangeFieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeFieldRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeFieldRsp& GCGDSChangeFieldRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeFieldRsp* GCGDSChangeFieldRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeFieldRsp* n = new GCGDSChangeFieldRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeFieldRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeFieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(field_id_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeFieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeFieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deck_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 field_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &field_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeFieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeFieldRsp)
  return false;
#undef DO_
}

void GCGDSChangeFieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeFieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 deck_id = 2;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deck_id(), output);
  }

  // uint32 field_id = 3;
  if (this->field_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->field_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeFieldRsp)
}

::google::protobuf::uint8* GCGDSChangeFieldRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeFieldRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 deck_id = 2;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deck_id(), target);
  }

  // uint32 field_id = 3;
  if (this->field_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->field_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeFieldRsp)
  return target;
}

size_t GCGDSChangeFieldRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeFieldRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 deck_id = 2;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  // uint32 field_id = 3;
  if (this->field_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->field_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeFieldRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeFieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeFieldRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeFieldRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeFieldRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeFieldRsp)
    MergeFrom(*source);
  }
}

void GCGDSChangeFieldRsp::MergeFrom(const GCGDSChangeFieldRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeFieldRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
  if (from.field_id() != 0) {
    set_field_id(from.field_id());
  }
}

void GCGDSChangeFieldRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeFieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeFieldRsp::CopyFrom(const GCGDSChangeFieldRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeFieldRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeFieldRsp::IsInitialized() const {
  return true;
}

void GCGDSChangeFieldRsp::Swap(GCGDSChangeFieldRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeFieldRsp::InternalSwap(GCGDSChangeFieldRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(deck_id_, other->deck_id_);
  swap(field_id_, other->field_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeFieldRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeFieldRsp

// int32 retcode = 1;
void GCGDSChangeFieldRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSChangeFieldRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldRsp.retcode)
  return retcode_;
}
void GCGDSChangeFieldRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldRsp.retcode)
}

// uint32 field_id = 3;
void GCGDSChangeFieldRsp::clear_field_id() {
  field_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeFieldRsp::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldRsp.field_id)
  return field_id_;
}
void GCGDSChangeFieldRsp::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldRsp.field_id)
}

// uint32 deck_id = 2;
void GCGDSChangeFieldRsp::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeFieldRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldRsp.deck_id)
  return deck_id_;
}
void GCGDSChangeFieldRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldRsp.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeDeckNameReq::kDeckIdFieldNumber;
const int GCGDSChangeDeckNameReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeDeckNameReq::GCGDSChangeDeckNameReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeDeckNameReq)
}
GCGDSChangeDeckNameReq::GCGDSChangeDeckNameReq(const GCGDSChangeDeckNameReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  deck_id_ = from.deck_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeDeckNameReq)
}

void GCGDSChangeDeckNameReq::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deck_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSChangeDeckNameReq::~GCGDSChangeDeckNameReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeDeckNameReq)
  SharedDtor();
}

void GCGDSChangeDeckNameReq::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GCGDSChangeDeckNameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeDeckNameReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeDeckNameReq& GCGDSChangeDeckNameReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeDeckNameReq* GCGDSChangeDeckNameReq::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeDeckNameReq* n = new GCGDSChangeDeckNameReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeDeckNameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeDeckNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deck_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSChangeDeckNameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeDeckNameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GCGDSChangeDeckNameReq.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deck_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeDeckNameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeDeckNameReq)
  return false;
#undef DO_
}

void GCGDSChangeDeckNameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeDeckNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSChangeDeckNameReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  // uint32 deck_id = 13;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeDeckNameReq)
}

::google::protobuf::uint8* GCGDSChangeDeckNameReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeDeckNameReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 7;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSChangeDeckNameReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // uint32 deck_id = 13;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeDeckNameReq)
  return target;
}

size_t GCGDSChangeDeckNameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeDeckNameReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 7;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 deck_id = 13;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeDeckNameReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeDeckNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeDeckNameReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeDeckNameReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeDeckNameReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeDeckNameReq)
    MergeFrom(*source);
  }
}

void GCGDSChangeDeckNameReq::MergeFrom(const GCGDSChangeDeckNameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeDeckNameReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSChangeDeckNameReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeDeckNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeDeckNameReq::CopyFrom(const GCGDSChangeDeckNameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeDeckNameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeDeckNameReq::IsInitialized() const {
  return true;
}

void GCGDSChangeDeckNameReq::Swap(GCGDSChangeDeckNameReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeDeckNameReq::InternalSwap(GCGDSChangeDeckNameReq* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeDeckNameReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeDeckNameReq

// uint32 deck_id = 13;
void GCGDSChangeDeckNameReq::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeDeckNameReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameReq.deck_id)
  return deck_id_;
}
void GCGDSChangeDeckNameReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameReq.deck_id)
}

// string name = 7;
void GCGDSChangeDeckNameReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GCGDSChangeDeckNameReq::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameReq.name)
  return name_.GetNoArena();
}
void GCGDSChangeDeckNameReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameReq.name)
}
#if LANG_CXX11
void GCGDSChangeDeckNameReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSChangeDeckNameReq.name)
}
#endif
void GCGDSChangeDeckNameReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSChangeDeckNameReq.name)
}
void GCGDSChangeDeckNameReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSChangeDeckNameReq.name)
}
::std::string* GCGDSChangeDeckNameReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSChangeDeckNameReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GCGDSChangeDeckNameReq::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSChangeDeckNameReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GCGDSChangeDeckNameReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSChangeDeckNameReq.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeDeckNameRsp::kDeckIdFieldNumber;
const int GCGDSChangeDeckNameRsp::kRetcodeFieldNumber;
const int GCGDSChangeDeckNameRsp::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeDeckNameRsp::GCGDSChangeDeckNameRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeDeckNameRsp)
}
GCGDSChangeDeckNameRsp::GCGDSChangeDeckNameRsp(const GCGDSChangeDeckNameRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&deck_id_, &from.deck_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&deck_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeDeckNameRsp)
}

void GCGDSChangeDeckNameRsp::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGDSChangeDeckNameRsp::~GCGDSChangeDeckNameRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeDeckNameRsp)
  SharedDtor();
}

void GCGDSChangeDeckNameRsp::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GCGDSChangeDeckNameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeDeckNameRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeDeckNameRsp& GCGDSChangeDeckNameRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeDeckNameRsp* GCGDSChangeDeckNameRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeDeckNameRsp* n = new GCGDSChangeDeckNameRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeDeckNameRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeDeckNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeDeckNameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeDeckNameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GCGDSChangeDeckNameRsp.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deck_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeDeckNameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeDeckNameRsp)
  return false;
#undef DO_
}

void GCGDSChangeDeckNameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeDeckNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSChangeDeckNameRsp.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 deck_id = 13;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->deck_id(), output);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeDeckNameRsp)
}

::google::protobuf::uint8* GCGDSChangeDeckNameRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeDeckNameRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSChangeDeckNameRsp.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 deck_id = 13;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->deck_id(), target);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeDeckNameRsp)
  return target;
}

size_t GCGDSChangeDeckNameRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeDeckNameRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 deck_id = 13;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeDeckNameRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeDeckNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeDeckNameRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeDeckNameRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeDeckNameRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeDeckNameRsp)
    MergeFrom(*source);
  }
}

void GCGDSChangeDeckNameRsp::MergeFrom(const GCGDSChangeDeckNameRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeDeckNameRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGDSChangeDeckNameRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeDeckNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeDeckNameRsp::CopyFrom(const GCGDSChangeDeckNameRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeDeckNameRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeDeckNameRsp::IsInitialized() const {
  return true;
}

void GCGDSChangeDeckNameRsp::Swap(GCGDSChangeDeckNameRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeDeckNameRsp::InternalSwap(GCGDSChangeDeckNameRsp* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(deck_id_, other->deck_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeDeckNameRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeDeckNameRsp

// uint32 deck_id = 13;
void GCGDSChangeDeckNameRsp::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeDeckNameRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameRsp.deck_id)
  return deck_id_;
}
void GCGDSChangeDeckNameRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameRsp.deck_id)
}

// int32 retcode = 14;
void GCGDSChangeDeckNameRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSChangeDeckNameRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameRsp.retcode)
  return retcode_;
}
void GCGDSChangeDeckNameRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameRsp.retcode)
}

// string name = 1;
void GCGDSChangeDeckNameRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GCGDSChangeDeckNameRsp::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameRsp.name)
  return name_.GetNoArena();
}
void GCGDSChangeDeckNameRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameRsp.name)
}
#if LANG_CXX11
void GCGDSChangeDeckNameRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSChangeDeckNameRsp.name)
}
#endif
void GCGDSChangeDeckNameRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSChangeDeckNameRsp.name)
}
void GCGDSChangeDeckNameRsp::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSChangeDeckNameRsp.name)
}
::std::string* GCGDSChangeDeckNameRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSChangeDeckNameRsp.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GCGDSChangeDeckNameRsp::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSChangeDeckNameRsp.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GCGDSChangeDeckNameRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSChangeDeckNameRsp.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDeckSaveReq::kDeckIdFieldNumber;
const int GCGDSDeckSaveReq::kCardListFieldNumber;
const int GCGDSDeckSaveReq::kCharacterCardListFieldNumber;
const int GCGDSDeckSaveReq::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDeckSaveReq::GCGDSDeckSaveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDeckSaveReq)
}
GCGDSDeckSaveReq::GCGDSDeckSaveReq(const GCGDSDeckSaveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      character_card_list_(from.character_card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  deck_id_ = from.deck_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDeckSaveReq)
}

void GCGDSDeckSaveReq::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deck_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSDeckSaveReq::~GCGDSDeckSaveReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDeckSaveReq)
  SharedDtor();
}

void GCGDSDeckSaveReq::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GCGDSDeckSaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDeckSaveReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDeckSaveReq& GCGDSDeckSaveReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDeckSaveReq* GCGDSDeckSaveReq::New(::google::protobuf::Arena* arena) const {
  GCGDSDeckSaveReq* n = new GCGDSDeckSaveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDeckSaveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDeckSaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  character_card_list_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deck_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSDeckSaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDeckSaveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 card_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 character_card_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_character_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_character_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GCGDSDeckSaveReq.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDeckSaveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDeckSaveReq)
  return false;
#undef DO_
}

void GCGDSDeckSaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDeckSaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 1;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->deck_id(), output);
  }

  // repeated uint32 card_list = 4;
  if (this->card_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_list(i), output);
  }

  // repeated uint32 character_card_list = 9;
  if (this->character_card_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _character_card_list_cached_byte_size_));
  }
  for (int i = 0, n = this->character_card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->character_card_list(i), output);
  }

  // string name = 14;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSDeckSaveReq.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDeckSaveReq)
}

::google::protobuf::uint8* GCGDSDeckSaveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDeckSaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 1;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->deck_id(), target);
  }

  // repeated uint32 card_list = 4;
  if (this->card_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_list_, target);
  }

  // repeated uint32 character_card_list = 9;
  if (this->character_card_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _character_card_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->character_card_list_, target);
  }

  // string name = 14;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GCGDSDeckSaveReq.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDeckSaveReq)
  return target;
}

size_t GCGDSDeckSaveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDeckSaveReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 character_card_list = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->character_card_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _character_card_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 14;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 deck_id = 1;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDeckSaveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDeckSaveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDeckSaveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDeckSaveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDeckSaveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDeckSaveReq)
    MergeFrom(*source);
  }
}

void GCGDSDeckSaveReq::MergeFrom(const GCGDSDeckSaveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDeckSaveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  character_card_list_.MergeFrom(from.character_card_list_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSDeckSaveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDeckSaveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDeckSaveReq::CopyFrom(const GCGDSDeckSaveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDeckSaveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDeckSaveReq::IsInitialized() const {
  return true;
}

void GCGDSDeckSaveReq::Swap(GCGDSDeckSaveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDeckSaveReq::InternalSwap(GCGDSDeckSaveReq* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  character_card_list_.InternalSwap(&other->character_card_list_);
  name_.Swap(&other->name_);
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDeckSaveReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDeckSaveReq

// uint32 deck_id = 1;
void GCGDSDeckSaveReq::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckSaveReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.deck_id)
  return deck_id_;
}
void GCGDSDeckSaveReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.deck_id)
}

// repeated uint32 card_list = 4;
int GCGDSDeckSaveReq::card_list_size() const {
  return card_list_.size();
}
void GCGDSDeckSaveReq::clear_card_list() {
  card_list_.Clear();
}
::google::protobuf::uint32 GCGDSDeckSaveReq::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.card_list)
  return card_list_.Get(index);
}
void GCGDSDeckSaveReq::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.card_list)
}
void GCGDSDeckSaveReq::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckSaveReq.card_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckSaveReq::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckSaveReq.card_list)
  return card_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckSaveReq::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckSaveReq.card_list)
  return &card_list_;
}

// repeated uint32 character_card_list = 9;
int GCGDSDeckSaveReq::character_card_list_size() const {
  return character_card_list_.size();
}
void GCGDSDeckSaveReq::clear_character_card_list() {
  character_card_list_.Clear();
}
::google::protobuf::uint32 GCGDSDeckSaveReq::character_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.character_card_list)
  return character_card_list_.Get(index);
}
void GCGDSDeckSaveReq::set_character_card_list(int index, ::google::protobuf::uint32 value) {
  character_card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.character_card_list)
}
void GCGDSDeckSaveReq::add_character_card_list(::google::protobuf::uint32 value) {
  character_card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckSaveReq.character_card_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckSaveReq::character_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckSaveReq.character_card_list)
  return character_card_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckSaveReq::mutable_character_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckSaveReq.character_card_list)
  return &character_card_list_;
}

// string name = 14;
void GCGDSDeckSaveReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GCGDSDeckSaveReq::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.name)
  return name_.GetNoArena();
}
void GCGDSDeckSaveReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.name)
}
#if LANG_CXX11
void GCGDSDeckSaveReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSDeckSaveReq.name)
}
#endif
void GCGDSDeckSaveReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSDeckSaveReq.name)
}
void GCGDSDeckSaveReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSDeckSaveReq.name)
}
::std::string* GCGDSDeckSaveReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDeckSaveReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GCGDSDeckSaveReq::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSDeckSaveReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GCGDSDeckSaveReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSDeckSaveReq.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDeckSaveRsp::kCreateTimeFieldNumber;
const int GCGDSDeckSaveRsp::kDeckIdFieldNumber;
const int GCGDSDeckSaveRsp::kRetcodeFieldNumber;
const int GCGDSDeckSaveRsp::kIsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDeckSaveRsp::GCGDSDeckSaveRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDeckSaveRsp)
}
GCGDSDeckSaveRsp::GCGDSDeckSaveRsp(const GCGDSDeckSaveRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_valid_, &from.is_valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&create_time_) -
    reinterpret_cast<char*>(&is_valid_)) + sizeof(create_time_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDeckSaveRsp)
}

void GCGDSDeckSaveRsp::SharedCtor() {
  ::memset(&is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&is_valid_)) + sizeof(create_time_));
  _cached_size_ = 0;
}

GCGDSDeckSaveRsp::~GCGDSDeckSaveRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDeckSaveRsp)
  SharedDtor();
}

void GCGDSDeckSaveRsp::SharedDtor() {
}

void GCGDSDeckSaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDeckSaveRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDeckSaveRsp& GCGDSDeckSaveRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDeckSaveRsp* GCGDSDeckSaveRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSDeckSaveRsp* n = new GCGDSDeckSaveRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDeckSaveRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDeckSaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&create_time_) -
      reinterpret_cast<char*>(&is_valid_)) + sizeof(create_time_));
  _internal_metadata_.Clear();
}

bool GCGDSDeckSaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDeckSaveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_valid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deck_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed32 create_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDeckSaveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDeckSaveRsp)
  return false;
#undef DO_
}

void GCGDSDeckSaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDeckSaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_valid(), output);
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->retcode(), output);
  }

  // uint32 deck_id = 11;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->deck_id(), output);
  }

  // fixed32 create_time = 14;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(14, this->create_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDeckSaveRsp)
}

::google::protobuf::uint8* GCGDSDeckSaveRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDeckSaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_valid(), target);
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->retcode(), target);
  }

  // uint32 deck_id = 11;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->deck_id(), target);
  }

  // fixed32 create_time = 14;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(14, this->create_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDeckSaveRsp)
  return target;
}

size_t GCGDSDeckSaveRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDeckSaveRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_valid = 4;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 deck_id = 11;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  // fixed32 create_time = 14;
  if (this->create_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDeckSaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDeckSaveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDeckSaveRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDeckSaveRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDeckSaveRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDeckSaveRsp)
    MergeFrom(*source);
  }
}

void GCGDSDeckSaveRsp::MergeFrom(const GCGDSDeckSaveRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDeckSaveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
}

void GCGDSDeckSaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDeckSaveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDeckSaveRsp::CopyFrom(const GCGDSDeckSaveRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDeckSaveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDeckSaveRsp::IsInitialized() const {
  return true;
}

void GCGDSDeckSaveRsp::Swap(GCGDSDeckSaveRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDeckSaveRsp::InternalSwap(GCGDSDeckSaveRsp* other) {
  using std::swap;
  swap(is_valid_, other->is_valid_);
  swap(retcode_, other->retcode_);
  swap(deck_id_, other->deck_id_);
  swap(create_time_, other->create_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDeckSaveRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDeckSaveRsp

// fixed32 create_time = 14;
void GCGDSDeckSaveRsp::clear_create_time() {
  create_time_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckSaveRsp::create_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.create_time)
  return create_time_;
}
void GCGDSDeckSaveRsp::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.create_time)
}

// uint32 deck_id = 11;
void GCGDSDeckSaveRsp::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckSaveRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.deck_id)
  return deck_id_;
}
void GCGDSDeckSaveRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.deck_id)
}

// int32 retcode = 8;
void GCGDSDeckSaveRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSDeckSaveRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.retcode)
  return retcode_;
}
void GCGDSDeckSaveRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.retcode)
}

// bool is_valid = 4;
void GCGDSDeckSaveRsp::clear_is_valid() {
  is_valid_ = false;
}
bool GCGDSDeckSaveRsp::is_valid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.is_valid)
  return is_valid_;
}
void GCGDSDeckSaveRsp::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.is_valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeCurDeckReq::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeCurDeckReq::GCGDSChangeCurDeckReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeCurDeckReq)
}
GCGDSChangeCurDeckReq::GCGDSChangeCurDeckReq(const GCGDSChangeCurDeckReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deck_id_ = from.deck_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeCurDeckReq)
}

void GCGDSChangeCurDeckReq::SharedCtor() {
  deck_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSChangeCurDeckReq::~GCGDSChangeCurDeckReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeCurDeckReq)
  SharedDtor();
}

void GCGDSChangeCurDeckReq::SharedDtor() {
}

void GCGDSChangeCurDeckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeCurDeckReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeCurDeckReq& GCGDSChangeCurDeckReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeCurDeckReq* GCGDSChangeCurDeckReq::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeCurDeckReq* n = new GCGDSChangeCurDeckReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeCurDeckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeCurDeckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deck_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSChangeCurDeckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeCurDeckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeCurDeckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeCurDeckReq)
  return false;
#undef DO_
}

void GCGDSChangeCurDeckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeCurDeckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 3;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeCurDeckReq)
}

::google::protobuf::uint8* GCGDSChangeCurDeckReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeCurDeckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 3;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeCurDeckReq)
  return target;
}

size_t GCGDSChangeCurDeckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeCurDeckReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deck_id = 3;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeCurDeckReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeCurDeckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeCurDeckReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeCurDeckReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeCurDeckReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeCurDeckReq)
    MergeFrom(*source);
  }
}

void GCGDSChangeCurDeckReq::MergeFrom(const GCGDSChangeCurDeckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeCurDeckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSChangeCurDeckReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeCurDeckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeCurDeckReq::CopyFrom(const GCGDSChangeCurDeckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeCurDeckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeCurDeckReq::IsInitialized() const {
  return true;
}

void GCGDSChangeCurDeckReq::Swap(GCGDSChangeCurDeckReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeCurDeckReq::InternalSwap(GCGDSChangeCurDeckReq* other) {
  using std::swap;
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeCurDeckReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeCurDeckReq

// uint32 deck_id = 3;
void GCGDSChangeCurDeckReq::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCurDeckReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCurDeckReq.deck_id)
  return deck_id_;
}
void GCGDSChangeCurDeckReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCurDeckReq.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSChangeCurDeckRsp::kRetcodeFieldNumber;
const int GCGDSChangeCurDeckRsp::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSChangeCurDeckRsp::GCGDSChangeCurDeckRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSChangeCurDeckRsp)
}
GCGDSChangeCurDeckRsp::GCGDSChangeCurDeckRsp(const GCGDSChangeCurDeckRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&deck_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(deck_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSChangeCurDeckRsp)
}

void GCGDSChangeCurDeckRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deck_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(deck_id_));
  _cached_size_ = 0;
}

GCGDSChangeCurDeckRsp::~GCGDSChangeCurDeckRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSChangeCurDeckRsp)
  SharedDtor();
}

void GCGDSChangeCurDeckRsp::SharedDtor() {
}

void GCGDSChangeCurDeckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSChangeCurDeckRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSChangeCurDeckRsp& GCGDSChangeCurDeckRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSChangeCurDeckRsp* GCGDSChangeCurDeckRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSChangeCurDeckRsp* n = new GCGDSChangeCurDeckRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSChangeCurDeckRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSChangeCurDeckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deck_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(deck_id_));
  _internal_metadata_.Clear();
}

bool GCGDSChangeCurDeckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSChangeCurDeckRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deck_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSChangeCurDeckRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSChangeCurDeckRsp)
  return false;
#undef DO_
}

void GCGDSChangeCurDeckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSChangeCurDeckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->retcode(), output);
  }

  // uint32 deck_id = 14;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSChangeCurDeckRsp)
}

::google::protobuf::uint8* GCGDSChangeCurDeckRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSChangeCurDeckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->retcode(), target);
  }

  // uint32 deck_id = 14;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSChangeCurDeckRsp)
  return target;
}

size_t GCGDSChangeCurDeckRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSChangeCurDeckRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 8;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 deck_id = 14;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSChangeCurDeckRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSChangeCurDeckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSChangeCurDeckRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSChangeCurDeckRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSChangeCurDeckRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSChangeCurDeckRsp)
    MergeFrom(*source);
  }
}

void GCGDSChangeCurDeckRsp::MergeFrom(const GCGDSChangeCurDeckRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSChangeCurDeckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSChangeCurDeckRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSChangeCurDeckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSChangeCurDeckRsp::CopyFrom(const GCGDSChangeCurDeckRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSChangeCurDeckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSChangeCurDeckRsp::IsInitialized() const {
  return true;
}

void GCGDSChangeCurDeckRsp::Swap(GCGDSChangeCurDeckRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSChangeCurDeckRsp::InternalSwap(GCGDSChangeCurDeckRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSChangeCurDeckRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSChangeCurDeckRsp

// int32 retcode = 8;
void GCGDSChangeCurDeckRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSChangeCurDeckRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCurDeckRsp.retcode)
  return retcode_;
}
void GCGDSChangeCurDeckRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCurDeckRsp.retcode)
}

// uint32 deck_id = 14;
void GCGDSChangeCurDeckRsp::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSChangeCurDeckRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCurDeckRsp.deck_id)
  return deck_id_;
}
void GCGDSChangeCurDeckRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCurDeckRsp.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSCurDeckChangeNotify::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSCurDeckChangeNotify::GCGDSCurDeckChangeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSCurDeckChangeNotify)
}
GCGDSCurDeckChangeNotify::GCGDSCurDeckChangeNotify(const GCGDSCurDeckChangeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deck_id_ = from.deck_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSCurDeckChangeNotify)
}

void GCGDSCurDeckChangeNotify::SharedCtor() {
  deck_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSCurDeckChangeNotify::~GCGDSCurDeckChangeNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSCurDeckChangeNotify)
  SharedDtor();
}

void GCGDSCurDeckChangeNotify::SharedDtor() {
}

void GCGDSCurDeckChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSCurDeckChangeNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSCurDeckChangeNotify& GCGDSCurDeckChangeNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSCurDeckChangeNotify* GCGDSCurDeckChangeNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSCurDeckChangeNotify* n = new GCGDSCurDeckChangeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSCurDeckChangeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSCurDeckChangeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deck_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSCurDeckChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSCurDeckChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSCurDeckChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSCurDeckChangeNotify)
  return false;
#undef DO_
}

void GCGDSCurDeckChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSCurDeckChangeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 6;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSCurDeckChangeNotify)
}

::google::protobuf::uint8* GCGDSCurDeckChangeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSCurDeckChangeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 6;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSCurDeckChangeNotify)
  return target;
}

size_t GCGDSCurDeckChangeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSCurDeckChangeNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deck_id = 6;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSCurDeckChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSCurDeckChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSCurDeckChangeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSCurDeckChangeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSCurDeckChangeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSCurDeckChangeNotify)
    MergeFrom(*source);
  }
}

void GCGDSCurDeckChangeNotify::MergeFrom(const GCGDSCurDeckChangeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSCurDeckChangeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSCurDeckChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSCurDeckChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSCurDeckChangeNotify::CopyFrom(const GCGDSCurDeckChangeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSCurDeckChangeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSCurDeckChangeNotify::IsInitialized() const {
  return true;
}

void GCGDSCurDeckChangeNotify::Swap(GCGDSCurDeckChangeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSCurDeckChangeNotify::InternalSwap(GCGDSCurDeckChangeNotify* other) {
  using std::swap;
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSCurDeckChangeNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSCurDeckChangeNotify

// uint32 deck_id = 6;
void GCGDSCurDeckChangeNotify::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSCurDeckChangeNotify::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCurDeckChangeNotify.deck_id)
  return deck_id_;
}
void GCGDSCurDeckChangeNotify::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCurDeckChangeNotify.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDeleteDeckReq::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDeleteDeckReq::GCGDSDeleteDeckReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDeleteDeckReq)
}
GCGDSDeleteDeckReq::GCGDSDeleteDeckReq(const GCGDSDeleteDeckReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deck_id_ = from.deck_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDeleteDeckReq)
}

void GCGDSDeleteDeckReq::SharedCtor() {
  deck_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSDeleteDeckReq::~GCGDSDeleteDeckReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDeleteDeckReq)
  SharedDtor();
}

void GCGDSDeleteDeckReq::SharedDtor() {
}

void GCGDSDeleteDeckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDeleteDeckReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDeleteDeckReq& GCGDSDeleteDeckReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDeleteDeckReq* GCGDSDeleteDeckReq::New(::google::protobuf::Arena* arena) const {
  GCGDSDeleteDeckReq* n = new GCGDSDeleteDeckReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDeleteDeckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDeleteDeckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deck_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSDeleteDeckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDeleteDeckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDeleteDeckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDeleteDeckReq)
  return false;
#undef DO_
}

void GCGDSDeleteDeckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDeleteDeckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 15;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDeleteDeckReq)
}

::google::protobuf::uint8* GCGDSDeleteDeckReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDeleteDeckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 15;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDeleteDeckReq)
  return target;
}

size_t GCGDSDeleteDeckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDeleteDeckReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deck_id = 15;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDeleteDeckReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDeleteDeckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDeleteDeckReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDeleteDeckReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDeleteDeckReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDeleteDeckReq)
    MergeFrom(*source);
  }
}

void GCGDSDeleteDeckReq::MergeFrom(const GCGDSDeleteDeckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDeleteDeckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSDeleteDeckReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDeleteDeckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDeleteDeckReq::CopyFrom(const GCGDSDeleteDeckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDeleteDeckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDeleteDeckReq::IsInitialized() const {
  return true;
}

void GCGDSDeleteDeckReq::Swap(GCGDSDeleteDeckReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDeleteDeckReq::InternalSwap(GCGDSDeleteDeckReq* other) {
  using std::swap;
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDeleteDeckReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDeleteDeckReq

// uint32 deck_id = 15;
void GCGDSDeleteDeckReq::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeleteDeckReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeleteDeckReq.deck_id)
  return deck_id_;
}
void GCGDSDeleteDeckReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeleteDeckReq.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDeleteDeckRsp::kRetcodeFieldNumber;
const int GCGDSDeleteDeckRsp::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDeleteDeckRsp::GCGDSDeleteDeckRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDeleteDeckRsp)
}
GCGDSDeleteDeckRsp::GCGDSDeleteDeckRsp(const GCGDSDeleteDeckRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deck_id_, &from.deck_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&deck_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDeleteDeckRsp)
}

void GCGDSDeleteDeckRsp::SharedCtor() {
  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGDSDeleteDeckRsp::~GCGDSDeleteDeckRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDeleteDeckRsp)
  SharedDtor();
}

void GCGDSDeleteDeckRsp::SharedDtor() {
}

void GCGDSDeleteDeckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDeleteDeckRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDeleteDeckRsp& GCGDSDeleteDeckRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDeleteDeckRsp* GCGDSDeleteDeckRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSDeleteDeckRsp* n = new GCGDSDeleteDeckRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDeleteDeckRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDeleteDeckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GCGDSDeleteDeckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDeleteDeckRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDeleteDeckRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDeleteDeckRsp)
  return false;
#undef DO_
}

void GCGDSDeleteDeckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDeleteDeckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 7;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->deck_id(), output);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDeleteDeckRsp)
}

::google::protobuf::uint8* GCGDSDeleteDeckRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDeleteDeckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 7;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->deck_id(), target);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDeleteDeckRsp)
  return target;
}

size_t GCGDSDeleteDeckRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDeleteDeckRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deck_id = 7;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDeleteDeckRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDeleteDeckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDeleteDeckRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDeleteDeckRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDeleteDeckRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDeleteDeckRsp)
    MergeFrom(*source);
  }
}

void GCGDSDeleteDeckRsp::MergeFrom(const GCGDSDeleteDeckRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDeleteDeckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGDSDeleteDeckRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDeleteDeckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDeleteDeckRsp::CopyFrom(const GCGDSDeleteDeckRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDeleteDeckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDeleteDeckRsp::IsInitialized() const {
  return true;
}

void GCGDSDeleteDeckRsp::Swap(GCGDSDeleteDeckRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDeleteDeckRsp::InternalSwap(GCGDSDeleteDeckRsp* other) {
  using std::swap;
  swap(deck_id_, other->deck_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDeleteDeckRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDeleteDeckRsp

// int32 retcode = 14;
void GCGDSDeleteDeckRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSDeleteDeckRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeleteDeckRsp.retcode)
  return retcode_;
}
void GCGDSDeleteDeckRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeleteDeckRsp.retcode)
}

// uint32 deck_id = 7;
void GCGDSDeleteDeckRsp::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeleteDeckRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeleteDeckRsp.deck_id)
  return deck_id_;
}
void GCGDSDeleteDeckRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeleteDeckRsp.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDeckUnlockNotify::kDeckIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDeckUnlockNotify::GCGDSDeckUnlockNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDeckUnlockNotify)
}
GCGDSDeckUnlockNotify::GCGDSDeckUnlockNotify(const GCGDSDeckUnlockNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deck_id_ = from.deck_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDeckUnlockNotify)
}

void GCGDSDeckUnlockNotify::SharedCtor() {
  deck_id_ = 0u;
  _cached_size_ = 0;
}

GCGDSDeckUnlockNotify::~GCGDSDeckUnlockNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDeckUnlockNotify)
  SharedDtor();
}

void GCGDSDeckUnlockNotify::SharedDtor() {
}

void GCGDSDeckUnlockNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDeckUnlockNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDeckUnlockNotify& GCGDSDeckUnlockNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDeckUnlockNotify* GCGDSDeckUnlockNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSDeckUnlockNotify* n = new GCGDSDeckUnlockNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDeckUnlockNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDeckUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deck_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGDSDeckUnlockNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDeckUnlockNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDeckUnlockNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDeckUnlockNotify)
  return false;
#undef DO_
}

void GCGDSDeckUnlockNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDeckUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 15;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->deck_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDeckUnlockNotify)
}

::google::protobuf::uint8* GCGDSDeckUnlockNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDeckUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 15;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->deck_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDeckUnlockNotify)
  return target;
}

size_t GCGDSDeckUnlockNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDeckUnlockNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deck_id = 15;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDeckUnlockNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDeckUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDeckUnlockNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDeckUnlockNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDeckUnlockNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDeckUnlockNotify)
    MergeFrom(*source);
  }
}

void GCGDSDeckUnlockNotify::MergeFrom(const GCGDSDeckUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDeckUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
}

void GCGDSDeckUnlockNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDeckUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDeckUnlockNotify::CopyFrom(const GCGDSDeckUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDeckUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDeckUnlockNotify::IsInitialized() const {
  return true;
}

void GCGDSDeckUnlockNotify::Swap(GCGDSDeckUnlockNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDeckUnlockNotify::InternalSwap(GCGDSDeckUnlockNotify* other) {
  using std::swap;
  swap(deck_id_, other->deck_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDeckUnlockNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDeckUnlockNotify

// uint32 deck_id = 15;
void GCGDSDeckUnlockNotify::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckUnlockNotify::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckUnlockNotify.deck_id)
  return deck_id_;
}
void GCGDSDeckUnlockNotify::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckUnlockNotify.deck_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSCardProficiencyNotify::kProficiencyFieldNumber;
const int GCGDSCardProficiencyNotify::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSCardProficiencyNotify::GCGDSCardProficiencyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSCardProficiencyNotify)
}
GCGDSCardProficiencyNotify::GCGDSCardProficiencyNotify(const GCGDSCardProficiencyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&proficiency_, &from.proficiency_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&proficiency_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSCardProficiencyNotify)
}

void GCGDSCardProficiencyNotify::SharedCtor() {
  ::memset(&proficiency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&proficiency_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

GCGDSCardProficiencyNotify::~GCGDSCardProficiencyNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSCardProficiencyNotify)
  SharedDtor();
}

void GCGDSCardProficiencyNotify::SharedDtor() {
}

void GCGDSCardProficiencyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSCardProficiencyNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSCardProficiencyNotify& GCGDSCardProficiencyNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSCardProficiencyNotify* GCGDSCardProficiencyNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSCardProficiencyNotify* n = new GCGDSCardProficiencyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSCardProficiencyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSCardProficiencyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&proficiency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&proficiency_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool GCGDSCardProficiencyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSCardProficiencyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 proficiency = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proficiency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSCardProficiencyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSCardProficiencyNotify)
  return false;
#undef DO_
}

void GCGDSCardProficiencyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSCardProficiencyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 proficiency = 2;
  if (this->proficiency() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proficiency(), output);
  }

  // uint32 card_id = 12;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSCardProficiencyNotify)
}

::google::protobuf::uint8* GCGDSCardProficiencyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSCardProficiencyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 proficiency = 2;
  if (this->proficiency() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proficiency(), target);
  }

  // uint32 card_id = 12;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSCardProficiencyNotify)
  return target;
}

size_t GCGDSCardProficiencyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSCardProficiencyNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 proficiency = 2;
  if (this->proficiency() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proficiency());
  }

  // uint32 card_id = 12;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSCardProficiencyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSCardProficiencyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSCardProficiencyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSCardProficiencyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSCardProficiencyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSCardProficiencyNotify)
    MergeFrom(*source);
  }
}

void GCGDSCardProficiencyNotify::MergeFrom(const GCGDSCardProficiencyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSCardProficiencyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.proficiency() != 0) {
    set_proficiency(from.proficiency());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void GCGDSCardProficiencyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSCardProficiencyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSCardProficiencyNotify::CopyFrom(const GCGDSCardProficiencyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSCardProficiencyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSCardProficiencyNotify::IsInitialized() const {
  return true;
}

void GCGDSCardProficiencyNotify::Swap(GCGDSCardProficiencyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSCardProficiencyNotify::InternalSwap(GCGDSCardProficiencyNotify* other) {
  using std::swap;
  swap(proficiency_, other->proficiency_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSCardProficiencyNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSCardProficiencyNotify

// uint32 proficiency = 2;
void GCGDSCardProficiencyNotify::clear_proficiency() {
  proficiency_ = 0u;
}
::google::protobuf::uint32 GCGDSCardProficiencyNotify::proficiency() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardProficiencyNotify.proficiency)
  return proficiency_;
}
void GCGDSCardProficiencyNotify::set_proficiency(::google::protobuf::uint32 value) {
  
  proficiency_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardProficiencyNotify.proficiency)
}

// uint32 card_id = 12;
void GCGDSCardProficiencyNotify::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSCardProficiencyNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardProficiencyNotify.card_id)
  return card_id_;
}
void GCGDSCardProficiencyNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardProficiencyNotify.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSDeckUpdateNotify::kDeckIdFieldNumber;
const int GCGDSDeckUpdateNotify::kIsValidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSDeckUpdateNotify::GCGDSDeckUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSDeckUpdateNotify)
}
GCGDSDeckUpdateNotify::GCGDSDeckUpdateNotify(const GCGDSDeckUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&deck_id_, &from.deck_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_valid_) -
    reinterpret_cast<char*>(&deck_id_)) + sizeof(is_valid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSDeckUpdateNotify)
}

void GCGDSDeckUpdateNotify::SharedCtor() {
  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(is_valid_));
  _cached_size_ = 0;
}

GCGDSDeckUpdateNotify::~GCGDSDeckUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSDeckUpdateNotify)
  SharedDtor();
}

void GCGDSDeckUpdateNotify::SharedDtor() {
}

void GCGDSDeckUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSDeckUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSDeckUpdateNotify& GCGDSDeckUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSDeckUpdateNotify* GCGDSDeckUpdateNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSDeckUpdateNotify* n = new GCGDSDeckUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSDeckUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSDeckUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&deck_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_valid_) -
      reinterpret_cast<char*>(&deck_id_)) + sizeof(is_valid_));
  _internal_metadata_.Clear();
}

bool GCGDSDeckUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSDeckUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 deck_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deck_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_valid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSDeckUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSDeckUpdateNotify)
  return false;
#undef DO_
}

void GCGDSDeckUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSDeckUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 6;
  if (this->deck_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deck_id(), output);
  }

  // bool is_valid = 12;
  if (this->is_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_valid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSDeckUpdateNotify)
}

::google::protobuf::uint8* GCGDSDeckUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSDeckUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 deck_id = 6;
  if (this->deck_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->deck_id(), target);
  }

  // bool is_valid = 12;
  if (this->is_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_valid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSDeckUpdateNotify)
  return target;
}

size_t GCGDSDeckUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSDeckUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 deck_id = 6;
  if (this->deck_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->deck_id());
  }

  // bool is_valid = 12;
  if (this->is_valid() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSDeckUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSDeckUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSDeckUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSDeckUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSDeckUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSDeckUpdateNotify)
    MergeFrom(*source);
  }
}

void GCGDSDeckUpdateNotify::MergeFrom(const GCGDSDeckUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSDeckUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deck_id() != 0) {
    set_deck_id(from.deck_id());
  }
  if (from.is_valid() != 0) {
    set_is_valid(from.is_valid());
  }
}

void GCGDSDeckUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSDeckUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSDeckUpdateNotify::CopyFrom(const GCGDSDeckUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSDeckUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSDeckUpdateNotify::IsInitialized() const {
  return true;
}

void GCGDSDeckUpdateNotify::Swap(GCGDSDeckUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSDeckUpdateNotify::InternalSwap(GCGDSDeckUpdateNotify* other) {
  using std::swap;
  swap(deck_id_, other->deck_id_);
  swap(is_valid_, other->is_valid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSDeckUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSDeckUpdateNotify

// uint32 deck_id = 6;
void GCGDSDeckUpdateNotify::clear_deck_id() {
  deck_id_ = 0u;
}
::google::protobuf::uint32 GCGDSDeckUpdateNotify::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckUpdateNotify.deck_id)
  return deck_id_;
}
void GCGDSDeckUpdateNotify::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckUpdateNotify.deck_id)
}

// bool is_valid = 12;
void GCGDSDeckUpdateNotify::clear_is_valid() {
  is_valid_ = false;
}
bool GCGDSDeckUpdateNotify::is_valid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckUpdateNotify.is_valid)
  return is_valid_;
}
void GCGDSDeckUpdateNotify::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckUpdateNotify.is_valid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSCardFaceUpdateNotify::kCardIdFieldNumber;
const int GCGDSCardFaceUpdateNotify::kFaceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSCardFaceUpdateNotify::GCGDSCardFaceUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSCardFaceUpdateNotify)
}
GCGDSCardFaceUpdateNotify::GCGDSCardFaceUpdateNotify(const GCGDSCardFaceUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&card_id_, &from.card_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&face_type_) -
    reinterpret_cast<char*>(&card_id_)) + sizeof(face_type_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSCardFaceUpdateNotify)
}

void GCGDSCardFaceUpdateNotify::SharedCtor() {
  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_type_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(face_type_));
  _cached_size_ = 0;
}

GCGDSCardFaceUpdateNotify::~GCGDSCardFaceUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSCardFaceUpdateNotify)
  SharedDtor();
}

void GCGDSCardFaceUpdateNotify::SharedDtor() {
}

void GCGDSCardFaceUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSCardFaceUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSCardFaceUpdateNotify& GCGDSCardFaceUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSCardFaceUpdateNotify* GCGDSCardFaceUpdateNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSCardFaceUpdateNotify* n = new GCGDSCardFaceUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSCardFaceUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSCardFaceUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&card_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&face_type_) -
      reinterpret_cast<char*>(&card_id_)) + sizeof(face_type_));
  _internal_metadata_.Clear();
}

bool GCGDSCardFaceUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSCardFaceUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 face_type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &face_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSCardFaceUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSCardFaceUpdateNotify)
  return false;
#undef DO_
}

void GCGDSCardFaceUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSCardFaceUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->card_id(), output);
  }

  // uint32 face_type = 15;
  if (this->face_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->face_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSCardFaceUpdateNotify)
}

::google::protobuf::uint8* GCGDSCardFaceUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSCardFaceUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->card_id(), target);
  }

  // uint32 face_type = 15;
  if (this->face_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->face_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSCardFaceUpdateNotify)
  return target;
}

size_t GCGDSCardFaceUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSCardFaceUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // uint32 face_type = 15;
  if (this->face_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->face_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSCardFaceUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSCardFaceUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSCardFaceUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSCardFaceUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSCardFaceUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSCardFaceUpdateNotify)
    MergeFrom(*source);
  }
}

void GCGDSCardFaceUpdateNotify::MergeFrom(const GCGDSCardFaceUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSCardFaceUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.face_type() != 0) {
    set_face_type(from.face_type());
  }
}

void GCGDSCardFaceUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSCardFaceUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSCardFaceUpdateNotify::CopyFrom(const GCGDSCardFaceUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSCardFaceUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSCardFaceUpdateNotify::IsInitialized() const {
  return true;
}

void GCGDSCardFaceUpdateNotify::Swap(GCGDSCardFaceUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSCardFaceUpdateNotify::InternalSwap(GCGDSCardFaceUpdateNotify* other) {
  using std::swap;
  swap(card_id_, other->card_id_);
  swap(face_type_, other->face_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSCardFaceUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSCardFaceUpdateNotify

// uint32 card_id = 14;
void GCGDSCardFaceUpdateNotify::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSCardFaceUpdateNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUpdateNotify.card_id)
  return card_id_;
}
void GCGDSCardFaceUpdateNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUpdateNotify.card_id)
}

// uint32 face_type = 15;
void GCGDSCardFaceUpdateNotify::clear_face_type() {
  face_type_ = 0u;
}
::google::protobuf::uint32 GCGDSCardFaceUpdateNotify::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUpdateNotify.face_type)
  return face_type_;
}
void GCGDSCardFaceUpdateNotify::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUpdateNotify.face_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSTakeCardProficiencyRewardReq::kRewardIndexFieldNumber;
const int GCGDSTakeCardProficiencyRewardReq::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSTakeCardProficiencyRewardReq::GCGDSTakeCardProficiencyRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSTakeCardProficiencyRewardReq)
}
GCGDSTakeCardProficiencyRewardReq::GCGDSTakeCardProficiencyRewardReq(const GCGDSTakeCardProficiencyRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reward_index_, &from.reward_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&card_id_) -
    reinterpret_cast<char*>(&reward_index_)) + sizeof(card_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSTakeCardProficiencyRewardReq)
}

void GCGDSTakeCardProficiencyRewardReq::SharedCtor() {
  ::memset(&reward_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&reward_index_)) + sizeof(card_id_));
  _cached_size_ = 0;
}

GCGDSTakeCardProficiencyRewardReq::~GCGDSTakeCardProficiencyRewardReq() {
  // @@protoc_insertion_point(destructor:proto.GCGDSTakeCardProficiencyRewardReq)
  SharedDtor();
}

void GCGDSTakeCardProficiencyRewardReq::SharedDtor() {
}

void GCGDSTakeCardProficiencyRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSTakeCardProficiencyRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSTakeCardProficiencyRewardReq& GCGDSTakeCardProficiencyRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSTakeCardProficiencyRewardReq* GCGDSTakeCardProficiencyRewardReq::New(::google::protobuf::Arena* arena) const {
  GCGDSTakeCardProficiencyRewardReq* n = new GCGDSTakeCardProficiencyRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSTakeCardProficiencyRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSTakeCardProficiencyRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reward_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&card_id_) -
      reinterpret_cast<char*>(&reward_index_)) + sizeof(card_id_));
  _internal_metadata_.Clear();
}

bool GCGDSTakeCardProficiencyRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSTakeCardProficiencyRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reward_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 card_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSTakeCardProficiencyRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSTakeCardProficiencyRewardReq)
  return false;
#undef DO_
}

void GCGDSTakeCardProficiencyRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSTakeCardProficiencyRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reward_index = 7;
  if (this->reward_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reward_index(), output);
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->card_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSTakeCardProficiencyRewardReq)
}

::google::protobuf::uint8* GCGDSTakeCardProficiencyRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSTakeCardProficiencyRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reward_index = 7;
  if (this->reward_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reward_index(), target);
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->card_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSTakeCardProficiencyRewardReq)
  return target;
}

size_t GCGDSTakeCardProficiencyRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSTakeCardProficiencyRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 reward_index = 7;
  if (this->reward_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_index());
  }

  // uint32 card_id = 14;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSTakeCardProficiencyRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSTakeCardProficiencyRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSTakeCardProficiencyRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSTakeCardProficiencyRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSTakeCardProficiencyRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSTakeCardProficiencyRewardReq)
    MergeFrom(*source);
  }
}

void GCGDSTakeCardProficiencyRewardReq::MergeFrom(const GCGDSTakeCardProficiencyRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSTakeCardProficiencyRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reward_index() != 0) {
    set_reward_index(from.reward_index());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
}

void GCGDSTakeCardProficiencyRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSTakeCardProficiencyRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSTakeCardProficiencyRewardReq::CopyFrom(const GCGDSTakeCardProficiencyRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSTakeCardProficiencyRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSTakeCardProficiencyRewardReq::IsInitialized() const {
  return true;
}

void GCGDSTakeCardProficiencyRewardReq::Swap(GCGDSTakeCardProficiencyRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSTakeCardProficiencyRewardReq::InternalSwap(GCGDSTakeCardProficiencyRewardReq* other) {
  using std::swap;
  swap(reward_index_, other->reward_index_);
  swap(card_id_, other->card_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSTakeCardProficiencyRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSTakeCardProficiencyRewardReq

// uint32 reward_index = 7;
void GCGDSTakeCardProficiencyRewardReq::clear_reward_index() {
  reward_index_ = 0u;
}
::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardReq::reward_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardReq.reward_index)
  return reward_index_;
}
void GCGDSTakeCardProficiencyRewardReq::set_reward_index(::google::protobuf::uint32 value) {
  
  reward_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardReq.reward_index)
}

// uint32 card_id = 14;
void GCGDSTakeCardProficiencyRewardReq::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardReq.card_id)
  return card_id_;
}
void GCGDSTakeCardProficiencyRewardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardReq.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSTakeCardProficiencyRewardRsp::kRetcodeFieldNumber;
const int GCGDSTakeCardProficiencyRewardRsp::kRewardIndexFieldNumber;
const int GCGDSTakeCardProficiencyRewardRsp::kCardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSTakeCardProficiencyRewardRsp::GCGDSTakeCardProficiencyRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSTakeCardProficiencyRewardRsp)
}
GCGDSTakeCardProficiencyRewardRsp::GCGDSTakeCardProficiencyRewardRsp(const GCGDSTakeCardProficiencyRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reward_index_, &from.reward_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&reward_index_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSTakeCardProficiencyRewardRsp)
}

void GCGDSTakeCardProficiencyRewardRsp::SharedCtor() {
  ::memset(&reward_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&reward_index_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGDSTakeCardProficiencyRewardRsp::~GCGDSTakeCardProficiencyRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGDSTakeCardProficiencyRewardRsp)
  SharedDtor();
}

void GCGDSTakeCardProficiencyRewardRsp::SharedDtor() {
}

void GCGDSTakeCardProficiencyRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSTakeCardProficiencyRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSTakeCardProficiencyRewardRsp& GCGDSTakeCardProficiencyRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSTakeCardProficiencyRewardRsp* GCGDSTakeCardProficiencyRewardRsp::New(::google::protobuf::Arena* arena) const {
  GCGDSTakeCardProficiencyRewardRsp* n = new GCGDSTakeCardProficiencyRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSTakeCardProficiencyRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reward_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&reward_index_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GCGDSTakeCardProficiencyRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 card_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reward_index = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSTakeCardProficiencyRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSTakeCardProficiencyRewardRsp)
  return false;
#undef DO_
}

void GCGDSTakeCardProficiencyRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 7;
  if (this->card_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->card_id(), output);
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->retcode(), output);
  }

  // uint32 reward_index = 10;
  if (this->reward_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->reward_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSTakeCardProficiencyRewardRsp)
}

::google::protobuf::uint8* GCGDSTakeCardProficiencyRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 card_id = 7;
  if (this->card_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->card_id(), target);
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->retcode(), target);
  }

  // uint32 reward_index = 10;
  if (this->reward_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->reward_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSTakeCardProficiencyRewardRsp)
  return target;
}

size_t GCGDSTakeCardProficiencyRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 reward_index = 10;
  if (this->reward_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_index());
  }

  // uint32 card_id = 7;
  if (this->card_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->card_id());
  }

  // int32 retcode = 8;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSTakeCardProficiencyRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSTakeCardProficiencyRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSTakeCardProficiencyRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSTakeCardProficiencyRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSTakeCardProficiencyRewardRsp)
    MergeFrom(*source);
  }
}

void GCGDSTakeCardProficiencyRewardRsp::MergeFrom(const GCGDSTakeCardProficiencyRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reward_index() != 0) {
    set_reward_index(from.reward_index());
  }
  if (from.card_id() != 0) {
    set_card_id(from.card_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGDSTakeCardProficiencyRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSTakeCardProficiencyRewardRsp::CopyFrom(const GCGDSTakeCardProficiencyRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSTakeCardProficiencyRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSTakeCardProficiencyRewardRsp::IsInitialized() const {
  return true;
}

void GCGDSTakeCardProficiencyRewardRsp::Swap(GCGDSTakeCardProficiencyRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSTakeCardProficiencyRewardRsp::InternalSwap(GCGDSTakeCardProficiencyRewardRsp* other) {
  using std::swap;
  swap(reward_index_, other->reward_index_);
  swap(card_id_, other->card_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSTakeCardProficiencyRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSTakeCardProficiencyRewardRsp

// int32 retcode = 8;
void GCGDSTakeCardProficiencyRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGDSTakeCardProficiencyRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardRsp.retcode)
  return retcode_;
}
void GCGDSTakeCardProficiencyRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardRsp.retcode)
}

// uint32 reward_index = 10;
void GCGDSTakeCardProficiencyRewardRsp::clear_reward_index() {
  reward_index_ = 0u;
}
::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardRsp::reward_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardRsp.reward_index)
  return reward_index_;
}
void GCGDSTakeCardProficiencyRewardRsp::set_reward_index(::google::protobuf::uint32 value) {
  
  reward_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardRsp.reward_index)
}

// uint32 card_id = 7;
void GCGDSTakeCardProficiencyRewardRsp::clear_card_id() {
  card_id_ = 0u;
}
::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardRsp.card_id)
  return card_id_;
}
void GCGDSTakeCardProficiencyRewardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardRsp.card_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGDSBanCardNotify::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGDSBanCardNotify::GCGDSBanCardNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGDSBanCardNotify)
}
GCGDSBanCardNotify::GCGDSBanCardNotify(const GCGDSBanCardNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGDSBanCardNotify)
}

void GCGDSBanCardNotify::SharedCtor() {
  _cached_size_ = 0;
}

GCGDSBanCardNotify::~GCGDSBanCardNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGDSBanCardNotify)
  SharedDtor();
}

void GCGDSBanCardNotify::SharedDtor() {
}

void GCGDSBanCardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGDSBanCardNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGDSBanCardNotify& GCGDSBanCardNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGDSBanCardNotify* GCGDSBanCardNotify::New(::google::protobuf::Arena* arena) const {
  GCGDSBanCardNotify* n = new GCGDSBanCardNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGDSBanCardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGDSBanCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGDSBanCardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGDSBanCardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 card_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_card_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGDSBanCardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGDSBanCardNotify)
  return false;
#undef DO_
}

void GCGDSBanCardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGDSBanCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 4;
  if (this->card_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _card_list_cached_byte_size_));
  }
  for (int i = 0, n = this->card_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->card_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGDSBanCardNotify)
}

::google::protobuf::uint8* GCGDSBanCardNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGDSBanCardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 card_list = 4;
  if (this->card_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _card_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->card_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGDSBanCardNotify)
  return target;
}

size_t GCGDSBanCardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGDSBanCardNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 card_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->card_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _card_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGDSBanCardNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGDSBanCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGDSBanCardNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGDSBanCardNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGDSBanCardNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGDSBanCardNotify)
    MergeFrom(*source);
  }
}

void GCGDSBanCardNotify::MergeFrom(const GCGDSBanCardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGDSBanCardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
}

void GCGDSBanCardNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGDSBanCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGDSBanCardNotify::CopyFrom(const GCGDSBanCardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGDSBanCardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGDSBanCardNotify::IsInitialized() const {
  return true;
}

void GCGDSBanCardNotify::Swap(GCGDSBanCardNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGDSBanCardNotify::InternalSwap(GCGDSBanCardNotify* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGDSBanCardNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGDSBanCardNotify

// repeated uint32 card_list = 4;
int GCGDSBanCardNotify::card_list_size() const {
  return card_list_.size();
}
void GCGDSBanCardNotify::clear_card_list() {
  card_list_.Clear();
}
::google::protobuf::uint32 GCGDSBanCardNotify::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSBanCardNotify.card_list)
  return card_list_.Get(index);
}
void GCGDSBanCardNotify::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSBanCardNotify.card_list)
}
void GCGDSBanCardNotify::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSBanCardNotify.card_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSBanCardNotify::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSBanCardNotify.card_list)
  return card_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSBanCardNotify::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSBanCardNotify.card_list)
  return &card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTCTavernInfoNotify::kIsLastDuelWinFieldNumber;
const int GCGTCTavernInfoNotify::kLevelIdFieldNumber;
const int GCGTCTavernInfoNotify::kIsOwnerInDuelFieldNumber;
const int GCGTCTavernInfoNotify::kPointIdFieldNumber;
const int GCGTCTavernInfoNotify::kAvatarIdFieldNumber;
const int GCGTCTavernInfoNotify::kCharacterIdFieldNumber;
const int GCGTCTavernInfoNotify::kElementTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTCTavernInfoNotify::GCGTCTavernInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTCTavernInfoNotify)
}
GCGTCTavernInfoNotify::GCGTCTavernInfoNotify(const GCGTCTavernInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_id_, &from.point_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&avatar_id_) -
    reinterpret_cast<char*>(&point_id_)) + sizeof(avatar_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGTCTavernInfoNotify)
}

void GCGTCTavernInfoNotify::SharedCtor() {
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(avatar_id_));
  _cached_size_ = 0;
}

GCGTCTavernInfoNotify::~GCGTCTavernInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGTCTavernInfoNotify)
  SharedDtor();
}

void GCGTCTavernInfoNotify::SharedDtor() {
}

void GCGTCTavernInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTCTavernInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTCTavernInfoNotify& GCGTCTavernInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTCTavernInfoNotify* GCGTCTavernInfoNotify::New(::google::protobuf::Arena* arena) const {
  GCGTCTavernInfoNotify* n = new GCGTCTavernInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTCTavernInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTCTavernInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&avatar_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(avatar_id_));
  _internal_metadata_.Clear();
}

bool GCGTCTavernInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTCTavernInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_owner_in_duel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_owner_in_duel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 character_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 avatar_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &avatar_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last_duel_win = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_duel_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTCTavernInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTCTavernInfoNotify)
  return false;
#undef DO_
}

void GCGTCTavernInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTCTavernInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 3;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point_id(), output);
  }

  // bool is_owner_in_duel = 5;
  if (this->is_owner_in_duel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_owner_in_duel(), output);
  }

  // uint32 character_id = 7;
  if (this->character_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->character_id(), output);
  }

  // uint32 element_type = 10;
  if (this->element_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->element_type(), output);
  }

  // uint32 level_id = 11;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level_id(), output);
  }

  // uint32 avatar_id = 12;
  if (this->avatar_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->avatar_id(), output);
  }

  // bool is_last_duel_win = 14;
  if (this->is_last_duel_win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_last_duel_win(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTCTavernInfoNotify)
}

::google::protobuf::uint8* GCGTCTavernInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTCTavernInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 3;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point_id(), target);
  }

  // bool is_owner_in_duel = 5;
  if (this->is_owner_in_duel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_owner_in_duel(), target);
  }

  // uint32 character_id = 7;
  if (this->character_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->character_id(), target);
  }

  // uint32 element_type = 10;
  if (this->element_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->element_type(), target);
  }

  // uint32 level_id = 11;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level_id(), target);
  }

  // uint32 avatar_id = 12;
  if (this->avatar_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->avatar_id(), target);
  }

  // bool is_last_duel_win = 14;
  if (this->is_last_duel_win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_last_duel_win(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTCTavernInfoNotify)
  return target;
}

size_t GCGTCTavernInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTCTavernInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 point_id = 3;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 character_id = 7;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_id());
  }

  // bool is_last_duel_win = 14;
  if (this->is_last_duel_win() != 0) {
    total_size += 1 + 1;
  }

  // bool is_owner_in_duel = 5;
  if (this->is_owner_in_duel() != 0) {
    total_size += 1 + 1;
  }

  // uint32 element_type = 10;
  if (this->element_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_type());
  }

  // uint32 level_id = 11;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 avatar_id = 12;
  if (this->avatar_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->avatar_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTCTavernInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTCTavernInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTCTavernInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTCTavernInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTCTavernInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTCTavernInfoNotify)
    MergeFrom(*source);
  }
}

void GCGTCTavernInfoNotify::MergeFrom(const GCGTCTavernInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTCTavernInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.character_id() != 0) {
    set_character_id(from.character_id());
  }
  if (from.is_last_duel_win() != 0) {
    set_is_last_duel_win(from.is_last_duel_win());
  }
  if (from.is_owner_in_duel() != 0) {
    set_is_owner_in_duel(from.is_owner_in_duel());
  }
  if (from.element_type() != 0) {
    set_element_type(from.element_type());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.avatar_id() != 0) {
    set_avatar_id(from.avatar_id());
  }
}

void GCGTCTavernInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTCTavernInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTCTavernInfoNotify::CopyFrom(const GCGTCTavernInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTCTavernInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTCTavernInfoNotify::IsInitialized() const {
  return true;
}

void GCGTCTavernInfoNotify::Swap(GCGTCTavernInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTCTavernInfoNotify::InternalSwap(GCGTCTavernInfoNotify* other) {
  using std::swap;
  swap(point_id_, other->point_id_);
  swap(character_id_, other->character_id_);
  swap(is_last_duel_win_, other->is_last_duel_win_);
  swap(is_owner_in_duel_, other->is_owner_in_duel_);
  swap(element_type_, other->element_type_);
  swap(level_id_, other->level_id_);
  swap(avatar_id_, other->avatar_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTCTavernInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTCTavernInfoNotify

// bool is_last_duel_win = 14;
void GCGTCTavernInfoNotify::clear_is_last_duel_win() {
  is_last_duel_win_ = false;
}
bool GCGTCTavernInfoNotify::is_last_duel_win() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.is_last_duel_win)
  return is_last_duel_win_;
}
void GCGTCTavernInfoNotify::set_is_last_duel_win(bool value) {
  
  is_last_duel_win_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.is_last_duel_win)
}

// uint32 level_id = 11;
void GCGTCTavernInfoNotify::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGTCTavernInfoNotify::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.level_id)
  return level_id_;
}
void GCGTCTavernInfoNotify::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.level_id)
}

// bool is_owner_in_duel = 5;
void GCGTCTavernInfoNotify::clear_is_owner_in_duel() {
  is_owner_in_duel_ = false;
}
bool GCGTCTavernInfoNotify::is_owner_in_duel() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.is_owner_in_duel)
  return is_owner_in_duel_;
}
void GCGTCTavernInfoNotify::set_is_owner_in_duel(bool value) {
  
  is_owner_in_duel_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.is_owner_in_duel)
}

// uint32 point_id = 3;
void GCGTCTavernInfoNotify::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 GCGTCTavernInfoNotify::point_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.point_id)
  return point_id_;
}
void GCGTCTavernInfoNotify::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.point_id)
}

// uint32 avatar_id = 12;
void GCGTCTavernInfoNotify::clear_avatar_id() {
  avatar_id_ = 0u;
}
::google::protobuf::uint32 GCGTCTavernInfoNotify::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.avatar_id)
  return avatar_id_;
}
void GCGTCTavernInfoNotify::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.avatar_id)
}

// uint32 character_id = 7;
void GCGTCTavernInfoNotify::clear_character_id() {
  character_id_ = 0u;
}
::google::protobuf::uint32 GCGTCTavernInfoNotify::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.character_id)
  return character_id_;
}
void GCGTCTavernInfoNotify::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.character_id)
}

// uint32 element_type = 10;
void GCGTCTavernInfoNotify::clear_element_type() {
  element_type_ = 0u;
}
::google::protobuf::uint32 GCGTCTavernInfoNotify::element_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.element_type)
  return element_type_;
}
void GCGTCTavernInfoNotify::set_element_type(::google::protobuf::uint32 value) {
  
  element_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.element_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTCInviteReq::kLevelIdFieldNumber;
const int GCGTCInviteReq::kCharacterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTCInviteReq::GCGTCInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTCInviteReq)
}
GCGTCInviteReq::GCGTCInviteReq(const GCGTCInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_id_, &from.level_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_id_) -
    reinterpret_cast<char*>(&level_id_)) + sizeof(character_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGTCInviteReq)
}

void GCGTCInviteReq::SharedCtor() {
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_id_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(character_id_));
  _cached_size_ = 0;
}

GCGTCInviteReq::~GCGTCInviteReq() {
  // @@protoc_insertion_point(destructor:proto.GCGTCInviteReq)
  SharedDtor();
}

void GCGTCInviteReq::SharedDtor() {
}

void GCGTCInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTCInviteReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTCInviteReq& GCGTCInviteReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTCInviteReq* GCGTCInviteReq::New(::google::protobuf::Arena* arena) const {
  GCGTCInviteReq* n = new GCGTCInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTCInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTCInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_id_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(character_id_));
  _internal_metadata_.Clear();
}

bool GCGTCInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTCInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 character_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTCInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTCInviteReq)
  return false;
#undef DO_
}

void GCGTCInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTCInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 3;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level_id(), output);
  }

  // uint32 character_id = 6;
  if (this->character_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->character_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTCInviteReq)
}

::google::protobuf::uint8* GCGTCInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTCInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 3;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level_id(), target);
  }

  // uint32 character_id = 6;
  if (this->character_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->character_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTCInviteReq)
  return target;
}

size_t GCGTCInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTCInviteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level_id = 3;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 character_id = 6;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTCInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTCInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTCInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTCInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTCInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTCInviteReq)
    MergeFrom(*source);
  }
}

void GCGTCInviteReq::MergeFrom(const GCGTCInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTCInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.character_id() != 0) {
    set_character_id(from.character_id());
  }
}

void GCGTCInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTCInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTCInviteReq::CopyFrom(const GCGTCInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTCInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTCInviteReq::IsInitialized() const {
  return true;
}

void GCGTCInviteReq::Swap(GCGTCInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTCInviteReq::InternalSwap(GCGTCInviteReq* other) {
  using std::swap;
  swap(level_id_, other->level_id_);
  swap(character_id_, other->character_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTCInviteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTCInviteReq

// uint32 level_id = 3;
void GCGTCInviteReq::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGTCInviteReq::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteReq.level_id)
  return level_id_;
}
void GCGTCInviteReq::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteReq.level_id)
}

// uint32 character_id = 6;
void GCGTCInviteReq::clear_character_id() {
  character_id_ = 0u;
}
::google::protobuf::uint32 GCGTCInviteReq::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteReq.character_id)
  return character_id_;
}
void GCGTCInviteReq::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteReq.character_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTCInviteRsp::kCharacterIdFieldNumber;
const int GCGTCInviteRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTCInviteRsp::GCGTCInviteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTCInviteRsp)
}
GCGTCInviteRsp::GCGTCInviteRsp(const GCGTCInviteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&character_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(character_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGTCInviteRsp)
}

void GCGTCInviteRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(character_id_));
  _cached_size_ = 0;
}

GCGTCInviteRsp::~GCGTCInviteRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGTCInviteRsp)
  SharedDtor();
}

void GCGTCInviteRsp::SharedDtor() {
}

void GCGTCInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTCInviteRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTCInviteRsp& GCGTCInviteRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTCInviteRsp* GCGTCInviteRsp::New(::google::protobuf::Arena* arena) const {
  GCGTCInviteRsp* n = new GCGTCInviteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTCInviteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTCInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&character_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(character_id_));
  _internal_metadata_.Clear();
}

bool GCGTCInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTCInviteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 character_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTCInviteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTCInviteRsp)
  return false;
#undef DO_
}

void GCGTCInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTCInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // uint32 character_id = 12;
  if (this->character_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->character_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTCInviteRsp)
}

::google::protobuf::uint8* GCGTCInviteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTCInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // uint32 character_id = 12;
  if (this->character_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->character_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTCInviteRsp)
  return target;
}

size_t GCGTCInviteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTCInviteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 character_id = 12;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTCInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTCInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTCInviteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTCInviteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTCInviteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTCInviteRsp)
    MergeFrom(*source);
  }
}

void GCGTCInviteRsp::MergeFrom(const GCGTCInviteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTCInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.character_id() != 0) {
    set_character_id(from.character_id());
  }
}

void GCGTCInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTCInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTCInviteRsp::CopyFrom(const GCGTCInviteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTCInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTCInviteRsp::IsInitialized() const {
  return true;
}

void GCGTCInviteRsp::Swap(GCGTCInviteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTCInviteRsp::InternalSwap(GCGTCInviteRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(character_id_, other->character_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTCInviteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTCInviteRsp

// uint32 character_id = 12;
void GCGTCInviteRsp::clear_character_id() {
  character_id_ = 0u;
}
::google::protobuf::uint32 GCGTCInviteRsp::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteRsp.character_id)
  return character_id_;
}
void GCGTCInviteRsp::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteRsp.character_id)
}

// int32 retcode = 5;
void GCGTCInviteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGTCInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteRsp.retcode)
  return retcode_;
}
void GCGTCInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTCTavernChallengeData::kUnlockLevelIdListFieldNumber;
const int GCGTCTavernChallengeData::kCharacterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTCTavernChallengeData::GCGTCTavernChallengeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTCTavernChallengeData)
}
GCGTCTavernChallengeData::GCGTCTavernChallengeData(const GCGTCTavernChallengeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      unlock_level_id_list_(from.unlock_level_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  character_id_ = from.character_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGTCTavernChallengeData)
}

void GCGTCTavernChallengeData::SharedCtor() {
  character_id_ = 0u;
  _cached_size_ = 0;
}

GCGTCTavernChallengeData::~GCGTCTavernChallengeData() {
  // @@protoc_insertion_point(destructor:proto.GCGTCTavernChallengeData)
  SharedDtor();
}

void GCGTCTavernChallengeData::SharedDtor() {
}

void GCGTCTavernChallengeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTCTavernChallengeData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTCTavernChallengeData& GCGTCTavernChallengeData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTCTavernChallengeData* GCGTCTavernChallengeData::New(::google::protobuf::Arena* arena) const {
  GCGTCTavernChallengeData* n = new GCGTCTavernChallengeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTCTavernChallengeData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTCTavernChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlock_level_id_list_.Clear();
  character_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGTCTavernChallengeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTCTavernChallengeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 unlock_level_id_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_level_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_unlock_level_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 character_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &character_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTCTavernChallengeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTCTavernChallengeData)
  return false;
#undef DO_
}

void GCGTCTavernChallengeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTCTavernChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unlock_level_id_list = 1;
  if (this->unlock_level_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_level_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_level_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_level_id_list(i), output);
  }

  // uint32 character_id = 8;
  if (this->character_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->character_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTCTavernChallengeData)
}

::google::protobuf::uint8* GCGTCTavernChallengeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTCTavernChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unlock_level_id_list = 1;
  if (this->unlock_level_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_level_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_level_id_list_, target);
  }

  // uint32 character_id = 8;
  if (this->character_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->character_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTCTavernChallengeData)
  return target;
}

size_t GCGTCTavernChallengeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTCTavernChallengeData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 unlock_level_id_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_level_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_level_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 character_id = 8;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->character_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTCTavernChallengeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTCTavernChallengeData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTCTavernChallengeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTCTavernChallengeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTCTavernChallengeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTCTavernChallengeData)
    MergeFrom(*source);
  }
}

void GCGTCTavernChallengeData::MergeFrom(const GCGTCTavernChallengeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTCTavernChallengeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlock_level_id_list_.MergeFrom(from.unlock_level_id_list_);
  if (from.character_id() != 0) {
    set_character_id(from.character_id());
  }
}

void GCGTCTavernChallengeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTCTavernChallengeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTCTavernChallengeData::CopyFrom(const GCGTCTavernChallengeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTCTavernChallengeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTCTavernChallengeData::IsInitialized() const {
  return true;
}

void GCGTCTavernChallengeData::Swap(GCGTCTavernChallengeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTCTavernChallengeData::InternalSwap(GCGTCTavernChallengeData* other) {
  using std::swap;
  unlock_level_id_list_.InternalSwap(&other->unlock_level_id_list_);
  swap(character_id_, other->character_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTCTavernChallengeData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTCTavernChallengeData

// repeated uint32 unlock_level_id_list = 1;
int GCGTCTavernChallengeData::unlock_level_id_list_size() const {
  return unlock_level_id_list_.size();
}
void GCGTCTavernChallengeData::clear_unlock_level_id_list() {
  unlock_level_id_list_.Clear();
}
::google::protobuf::uint32 GCGTCTavernChallengeData::unlock_level_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeData.unlock_level_id_list)
  return unlock_level_id_list_.Get(index);
}
void GCGTCTavernChallengeData::set_unlock_level_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_level_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernChallengeData.unlock_level_id_list)
}
void GCGTCTavernChallengeData::add_unlock_level_id_list(::google::protobuf::uint32 value) {
  unlock_level_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGTCTavernChallengeData.unlock_level_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGTCTavernChallengeData::unlock_level_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTCTavernChallengeData.unlock_level_id_list)
  return unlock_level_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGTCTavernChallengeData::mutable_unlock_level_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTCTavernChallengeData.unlock_level_id_list)
  return &unlock_level_id_list_;
}

// uint32 character_id = 8;
void GCGTCTavernChallengeData::clear_character_id() {
  character_id_ = 0u;
}
::google::protobuf::uint32 GCGTCTavernChallengeData::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeData.character_id)
  return character_id_;
}
void GCGTCTavernChallengeData::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernChallengeData.character_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTCTavernChallengeDataNotify::kTavernChallengeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTCTavernChallengeDataNotify::GCGTCTavernChallengeDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTCTavernChallengeDataNotify)
}
GCGTCTavernChallengeDataNotify::GCGTCTavernChallengeDataNotify(const GCGTCTavernChallengeDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      tavern_challenge_list_(from.tavern_challenge_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGTCTavernChallengeDataNotify)
}

void GCGTCTavernChallengeDataNotify::SharedCtor() {
  _cached_size_ = 0;
}

GCGTCTavernChallengeDataNotify::~GCGTCTavernChallengeDataNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGTCTavernChallengeDataNotify)
  SharedDtor();
}

void GCGTCTavernChallengeDataNotify::SharedDtor() {
}

void GCGTCTavernChallengeDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTCTavernChallengeDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTCTavernChallengeDataNotify& GCGTCTavernChallengeDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTCTavernChallengeDataNotify* GCGTCTavernChallengeDataNotify::New(::google::protobuf::Arena* arena) const {
  GCGTCTavernChallengeDataNotify* n = new GCGTCTavernChallengeDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTCTavernChallengeDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTCTavernChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tavern_challenge_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGTCTavernChallengeDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTCTavernChallengeDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGTCTavernChallengeData tavern_challenge_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tavern_challenge_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTCTavernChallengeDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTCTavernChallengeDataNotify)
  return false;
#undef DO_
}

void GCGTCTavernChallengeDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTCTavernChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGTCTavernChallengeData tavern_challenge_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tavern_challenge_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->tavern_challenge_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTCTavernChallengeDataNotify)
}

::google::protobuf::uint8* GCGTCTavernChallengeDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTCTavernChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGTCTavernChallengeData tavern_challenge_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tavern_challenge_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->tavern_challenge_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTCTavernChallengeDataNotify)
  return target;
}

size_t GCGTCTavernChallengeDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTCTavernChallengeDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGTCTavernChallengeData tavern_challenge_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->tavern_challenge_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tavern_challenge_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTCTavernChallengeDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTCTavernChallengeDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTCTavernChallengeDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTCTavernChallengeDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTCTavernChallengeDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTCTavernChallengeDataNotify)
    MergeFrom(*source);
  }
}

void GCGTCTavernChallengeDataNotify::MergeFrom(const GCGTCTavernChallengeDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTCTavernChallengeDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tavern_challenge_list_.MergeFrom(from.tavern_challenge_list_);
}

void GCGTCTavernChallengeDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTCTavernChallengeDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTCTavernChallengeDataNotify::CopyFrom(const GCGTCTavernChallengeDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTCTavernChallengeDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTCTavernChallengeDataNotify::IsInitialized() const {
  return true;
}

void GCGTCTavernChallengeDataNotify::Swap(GCGTCTavernChallengeDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTCTavernChallengeDataNotify::InternalSwap(GCGTCTavernChallengeDataNotify* other) {
  using std::swap;
  tavern_challenge_list_.InternalSwap(&other->tavern_challenge_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTCTavernChallengeDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTCTavernChallengeDataNotify

// repeated .proto.GCGTCTavernChallengeData tavern_challenge_list = 13;
int GCGTCTavernChallengeDataNotify::tavern_challenge_list_size() const {
  return tavern_challenge_list_.size();
}
void GCGTCTavernChallengeDataNotify::clear_tavern_challenge_list() {
  tavern_challenge_list_.Clear();
}
const ::proto::GCGTCTavernChallengeData& GCGTCTavernChallengeDataNotify::tavern_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_.Get(index);
}
::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeDataNotify::mutable_tavern_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_.Mutable(index);
}
::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeDataNotify::add_tavern_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGTCTavernChallengeData >*
GCGTCTavernChallengeDataNotify::mutable_tavern_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return &tavern_challenge_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGTCTavernChallengeData >&
GCGTCTavernChallengeDataNotify::tavern_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTCTavernChallengeUpdateNotify::kTavernChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTCTavernChallengeUpdateNotify::GCGTCTavernChallengeUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTCTavernChallengeUpdateNotify)
}
GCGTCTavernChallengeUpdateNotify::GCGTCTavernChallengeUpdateNotify(const GCGTCTavernChallengeUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tavern_challenge()) {
    tavern_challenge_ = new ::proto::GCGTCTavernChallengeData(*from.tavern_challenge_);
  } else {
    tavern_challenge_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGTCTavernChallengeUpdateNotify)
}

void GCGTCTavernChallengeUpdateNotify::SharedCtor() {
  tavern_challenge_ = NULL;
  _cached_size_ = 0;
}

GCGTCTavernChallengeUpdateNotify::~GCGTCTavernChallengeUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGTCTavernChallengeUpdateNotify)
  SharedDtor();
}

void GCGTCTavernChallengeUpdateNotify::SharedDtor() {
  if (this != internal_default_instance()) delete tavern_challenge_;
}

void GCGTCTavernChallengeUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTCTavernChallengeUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTCTavernChallengeUpdateNotify& GCGTCTavernChallengeUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTCTavernChallengeUpdateNotify* GCGTCTavernChallengeUpdateNotify::New(::google::protobuf::Arena* arena) const {
  GCGTCTavernChallengeUpdateNotify* n = new GCGTCTavernChallengeUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTCTavernChallengeUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTCTavernChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tavern_challenge_ != NULL) {
    delete tavern_challenge_;
  }
  tavern_challenge_ = NULL;
  _internal_metadata_.Clear();
}

bool GCGTCTavernChallengeUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTCTavernChallengeUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGTCTavernChallengeData tavern_challenge = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tavern_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTCTavernChallengeUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTCTavernChallengeUpdateNotify)
  return false;
#undef DO_
}

void GCGTCTavernChallengeUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTCTavernChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGTCTavernChallengeData tavern_challenge = 5;
  if (this->has_tavern_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->tavern_challenge_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTCTavernChallengeUpdateNotify)
}

::google::protobuf::uint8* GCGTCTavernChallengeUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTCTavernChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGTCTavernChallengeData tavern_challenge = 5;
  if (this->has_tavern_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->tavern_challenge_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTCTavernChallengeUpdateNotify)
  return target;
}

size_t GCGTCTavernChallengeUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTCTavernChallengeUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGTCTavernChallengeData tavern_challenge = 5;
  if (this->has_tavern_challenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tavern_challenge_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTCTavernChallengeUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTCTavernChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTCTavernChallengeUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTCTavernChallengeUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTCTavernChallengeUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTCTavernChallengeUpdateNotify)
    MergeFrom(*source);
  }
}

void GCGTCTavernChallengeUpdateNotify::MergeFrom(const GCGTCTavernChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTCTavernChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tavern_challenge()) {
    mutable_tavern_challenge()->::proto::GCGTCTavernChallengeData::MergeFrom(from.tavern_challenge());
  }
}

void GCGTCTavernChallengeUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTCTavernChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTCTavernChallengeUpdateNotify::CopyFrom(const GCGTCTavernChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTCTavernChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTCTavernChallengeUpdateNotify::IsInitialized() const {
  return true;
}

void GCGTCTavernChallengeUpdateNotify::Swap(GCGTCTavernChallengeUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTCTavernChallengeUpdateNotify::InternalSwap(GCGTCTavernChallengeUpdateNotify* other) {
  using std::swap;
  swap(tavern_challenge_, other->tavern_challenge_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTCTavernChallengeUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTCTavernChallengeUpdateNotify

// .proto.GCGTCTavernChallengeData tavern_challenge = 5;
bool GCGTCTavernChallengeUpdateNotify::has_tavern_challenge() const {
  return this != internal_default_instance() && tavern_challenge_ != NULL;
}
void GCGTCTavernChallengeUpdateNotify::clear_tavern_challenge() {
  if (GetArenaNoVirtual() == NULL && tavern_challenge_ != NULL) delete tavern_challenge_;
  tavern_challenge_ = NULL;
}
const ::proto::GCGTCTavernChallengeData& GCGTCTavernChallengeUpdateNotify::tavern_challenge() const {
  const ::proto::GCGTCTavernChallengeData* p = tavern_challenge_;
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGTCTavernChallengeData*>(
      &::proto::_GCGTCTavernChallengeData_default_instance_);
}
::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeUpdateNotify::mutable_tavern_challenge() {
  
  if (tavern_challenge_ == NULL) {
    tavern_challenge_ = new ::proto::GCGTCTavernChallengeData;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
  return tavern_challenge_;
}
::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeUpdateNotify::release_tavern_challenge() {
  // @@protoc_insertion_point(field_release:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
  
  ::proto::GCGTCTavernChallengeData* temp = tavern_challenge_;
  tavern_challenge_ = NULL;
  return temp;
}
void GCGTCTavernChallengeUpdateNotify::set_allocated_tavern_challenge(::proto::GCGTCTavernChallengeData* tavern_challenge) {
  delete tavern_challenge_;
  tavern_challenge_ = tavern_challenge;
  if (tavern_challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGGrowthLevelNotify::kExpFieldNumber;
const int GCGGrowthLevelNotify::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGrowthLevelNotify::GCGGrowthLevelNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGrowthLevelNotify)
}
GCGGrowthLevelNotify::GCGGrowthLevelNotify(const GCGGrowthLevelNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exp_, &from.exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&exp_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGGrowthLevelNotify)
}

void GCGGrowthLevelNotify::SharedCtor() {
  ::memset(&exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&exp_)) + sizeof(level_));
  _cached_size_ = 0;
}

GCGGrowthLevelNotify::~GCGGrowthLevelNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGGrowthLevelNotify)
  SharedDtor();
}

void GCGGrowthLevelNotify::SharedDtor() {
}

void GCGGrowthLevelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGrowthLevelNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGrowthLevelNotify& GCGGrowthLevelNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGrowthLevelNotify* GCGGrowthLevelNotify::New(::google::protobuf::Arena* arena) const {
  GCGGrowthLevelNotify* n = new GCGGrowthLevelNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGrowthLevelNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGrowthLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&exp_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool GCGGrowthLevelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGrowthLevelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 exp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGrowthLevelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGrowthLevelNotify)
  return false;
#undef DO_
}

void GCGGrowthLevelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGrowthLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exp = 7;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // uint32 level = 11;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGrowthLevelNotify)
}

::google::protobuf::uint8* GCGGrowthLevelNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGrowthLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exp = 7;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }

  // uint32 level = 11;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGrowthLevelNotify)
  return target;
}

size_t GCGGrowthLevelNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGrowthLevelNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 exp = 7;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // uint32 level = 11;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGrowthLevelNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGrowthLevelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGrowthLevelNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGrowthLevelNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGrowthLevelNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGrowthLevelNotify)
    MergeFrom(*source);
  }
}

void GCGGrowthLevelNotify::MergeFrom(const GCGGrowthLevelNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGrowthLevelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void GCGGrowthLevelNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGrowthLevelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGrowthLevelNotify::CopyFrom(const GCGGrowthLevelNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGrowthLevelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGrowthLevelNotify::IsInitialized() const {
  return true;
}

void GCGGrowthLevelNotify::Swap(GCGGrowthLevelNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGrowthLevelNotify::InternalSwap(GCGGrowthLevelNotify* other) {
  using std::swap;
  swap(exp_, other->exp_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGrowthLevelNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGrowthLevelNotify

// uint32 exp = 7;
void GCGGrowthLevelNotify::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 GCGGrowthLevelNotify::exp() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelNotify.exp)
  return exp_;
}
void GCGGrowthLevelNotify::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelNotify.exp)
}

// uint32 level = 11;
void GCGGrowthLevelNotify::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 GCGGrowthLevelNotify::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelNotify.level)
  return level_;
}
void GCGGrowthLevelNotify::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelNotify.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGGrowthLevelRewardNotify::kLevelRewardTakenListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGrowthLevelRewardNotify::GCGGrowthLevelRewardNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGrowthLevelRewardNotify)
}
GCGGrowthLevelRewardNotify::GCGGrowthLevelRewardNotify(const GCGGrowthLevelRewardNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      level_reward_taken_list_(from.level_reward_taken_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGGrowthLevelRewardNotify)
}

void GCGGrowthLevelRewardNotify::SharedCtor() {
  _cached_size_ = 0;
}

GCGGrowthLevelRewardNotify::~GCGGrowthLevelRewardNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGGrowthLevelRewardNotify)
  SharedDtor();
}

void GCGGrowthLevelRewardNotify::SharedDtor() {
}

void GCGGrowthLevelRewardNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGrowthLevelRewardNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGrowthLevelRewardNotify& GCGGrowthLevelRewardNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGrowthLevelRewardNotify* GCGGrowthLevelRewardNotify::New(::google::protobuf::Arena* arena) const {
  GCGGrowthLevelRewardNotify* n = new GCGGrowthLevelRewardNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGrowthLevelRewardNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGrowthLevelRewardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_reward_taken_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGGrowthLevelRewardNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGrowthLevelRewardNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 level_reward_taken_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level_reward_taken_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_level_reward_taken_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGrowthLevelRewardNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGrowthLevelRewardNotify)
  return false;
#undef DO_
}

void GCGGrowthLevelRewardNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGrowthLevelRewardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 level_reward_taken_list = 8;
  if (this->level_reward_taken_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _level_reward_taken_list_cached_byte_size_));
  }
  for (int i = 0, n = this->level_reward_taken_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->level_reward_taken_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGrowthLevelRewardNotify)
}

::google::protobuf::uint8* GCGGrowthLevelRewardNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGrowthLevelRewardNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 level_reward_taken_list = 8;
  if (this->level_reward_taken_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _level_reward_taken_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->level_reward_taken_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGrowthLevelRewardNotify)
  return target;
}

size_t GCGGrowthLevelRewardNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGrowthLevelRewardNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 level_reward_taken_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->level_reward_taken_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _level_reward_taken_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGrowthLevelRewardNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGrowthLevelRewardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGrowthLevelRewardNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGrowthLevelRewardNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGrowthLevelRewardNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGrowthLevelRewardNotify)
    MergeFrom(*source);
  }
}

void GCGGrowthLevelRewardNotify::MergeFrom(const GCGGrowthLevelRewardNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGrowthLevelRewardNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  level_reward_taken_list_.MergeFrom(from.level_reward_taken_list_);
}

void GCGGrowthLevelRewardNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGrowthLevelRewardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGrowthLevelRewardNotify::CopyFrom(const GCGGrowthLevelRewardNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGrowthLevelRewardNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGrowthLevelRewardNotify::IsInitialized() const {
  return true;
}

void GCGGrowthLevelRewardNotify::Swap(GCGGrowthLevelRewardNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGrowthLevelRewardNotify::InternalSwap(GCGGrowthLevelRewardNotify* other) {
  using std::swap;
  level_reward_taken_list_.InternalSwap(&other->level_reward_taken_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGrowthLevelRewardNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGrowthLevelRewardNotify

// repeated uint32 level_reward_taken_list = 8;
int GCGGrowthLevelRewardNotify::level_reward_taken_list_size() const {
  return level_reward_taken_list_.size();
}
void GCGGrowthLevelRewardNotify::clear_level_reward_taken_list() {
  level_reward_taken_list_.Clear();
}
::google::protobuf::uint32 GCGGrowthLevelRewardNotify::level_reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
  return level_reward_taken_list_.Get(index);
}
void GCGGrowthLevelRewardNotify::set_level_reward_taken_list(int index, ::google::protobuf::uint32 value) {
  level_reward_taken_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
}
void GCGGrowthLevelRewardNotify::add_level_reward_taken_list(::google::protobuf::uint32 value) {
  level_reward_taken_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGGrowthLevelRewardNotify::level_reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
  return level_reward_taken_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGGrowthLevelRewardNotify::mutable_level_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
  return &level_reward_taken_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGGrowthLevelTakeRewardReq::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGrowthLevelTakeRewardReq::GCGGrowthLevelTakeRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGrowthLevelTakeRewardReq)
}
GCGGrowthLevelTakeRewardReq::GCGGrowthLevelTakeRewardReq(const GCGGrowthLevelTakeRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGGrowthLevelTakeRewardReq)
}

void GCGGrowthLevelTakeRewardReq::SharedCtor() {
  level_ = 0u;
  _cached_size_ = 0;
}

GCGGrowthLevelTakeRewardReq::~GCGGrowthLevelTakeRewardReq() {
  // @@protoc_insertion_point(destructor:proto.GCGGrowthLevelTakeRewardReq)
  SharedDtor();
}

void GCGGrowthLevelTakeRewardReq::SharedDtor() {
}

void GCGGrowthLevelTakeRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGrowthLevelTakeRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGrowthLevelTakeRewardReq& GCGGrowthLevelTakeRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGrowthLevelTakeRewardReq* GCGGrowthLevelTakeRewardReq::New(::google::protobuf::Arena* arena) const {
  GCGGrowthLevelTakeRewardReq* n = new GCGGrowthLevelTakeRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGrowthLevelTakeRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGrowthLevelTakeRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGGrowthLevelTakeRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGrowthLevelTakeRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGrowthLevelTakeRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGrowthLevelTakeRewardReq)
  return false;
#undef DO_
}

void GCGGrowthLevelTakeRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGrowthLevelTakeRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGrowthLevelTakeRewardReq)
}

::google::protobuf::uint8* GCGGrowthLevelTakeRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGrowthLevelTakeRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGrowthLevelTakeRewardReq)
  return target;
}

size_t GCGGrowthLevelTakeRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGrowthLevelTakeRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGrowthLevelTakeRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGrowthLevelTakeRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGrowthLevelTakeRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGrowthLevelTakeRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGrowthLevelTakeRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGrowthLevelTakeRewardReq)
    MergeFrom(*source);
  }
}

void GCGGrowthLevelTakeRewardReq::MergeFrom(const GCGGrowthLevelTakeRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGrowthLevelTakeRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    set_level(from.level());
  }
}

void GCGGrowthLevelTakeRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGrowthLevelTakeRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGrowthLevelTakeRewardReq::CopyFrom(const GCGGrowthLevelTakeRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGrowthLevelTakeRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGrowthLevelTakeRewardReq::IsInitialized() const {
  return true;
}

void GCGGrowthLevelTakeRewardReq::Swap(GCGGrowthLevelTakeRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGrowthLevelTakeRewardReq::InternalSwap(GCGGrowthLevelTakeRewardReq* other) {
  using std::swap;
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGrowthLevelTakeRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGrowthLevelTakeRewardReq

// uint32 level = 4;
void GCGGrowthLevelTakeRewardReq::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 GCGGrowthLevelTakeRewardReq::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelTakeRewardReq.level)
  return level_;
}
void GCGGrowthLevelTakeRewardReq::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelTakeRewardReq.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGGrowthLevelTakeRewardRsp::kLevelFieldNumber;
const int GCGGrowthLevelTakeRewardRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGGrowthLevelTakeRewardRsp::GCGGrowthLevelTakeRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGGrowthLevelTakeRewardRsp)
}
GCGGrowthLevelTakeRewardRsp::GCGGrowthLevelTakeRewardRsp(const GCGGrowthLevelTakeRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_, &from.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&level_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGGrowthLevelTakeRewardRsp)
}

void GCGGrowthLevelTakeRewardRsp::SharedCtor() {
  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&level_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGGrowthLevelTakeRewardRsp::~GCGGrowthLevelTakeRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGGrowthLevelTakeRewardRsp)
  SharedDtor();
}

void GCGGrowthLevelTakeRewardRsp::SharedDtor() {
}

void GCGGrowthLevelTakeRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGGrowthLevelTakeRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGGrowthLevelTakeRewardRsp& GCGGrowthLevelTakeRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGGrowthLevelTakeRewardRsp* GCGGrowthLevelTakeRewardRsp::New(::google::protobuf::Arena* arena) const {
  GCGGrowthLevelTakeRewardRsp* n = new GCGGrowthLevelTakeRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGGrowthLevelTakeRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGGrowthLevelTakeRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&level_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GCGGrowthLevelTakeRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGGrowthLevelTakeRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGGrowthLevelTakeRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGGrowthLevelTakeRewardRsp)
  return false;
#undef DO_
}

void GCGGrowthLevelTakeRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGGrowthLevelTakeRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // int32 retcode = 13;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGGrowthLevelTakeRewardRsp)
}

::google::protobuf::uint8* GCGGrowthLevelTakeRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGGrowthLevelTakeRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level = 1;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // int32 retcode = 13;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGGrowthLevelTakeRewardRsp)
  return target;
}

size_t GCGGrowthLevelTakeRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGGrowthLevelTakeRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level = 1;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // int32 retcode = 13;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGGrowthLevelTakeRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGGrowthLevelTakeRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGGrowthLevelTakeRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGGrowthLevelTakeRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGGrowthLevelTakeRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGGrowthLevelTakeRewardRsp)
    MergeFrom(*source);
  }
}

void GCGGrowthLevelTakeRewardRsp::MergeFrom(const GCGGrowthLevelTakeRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGGrowthLevelTakeRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGGrowthLevelTakeRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGGrowthLevelTakeRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGGrowthLevelTakeRewardRsp::CopyFrom(const GCGGrowthLevelTakeRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGGrowthLevelTakeRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGGrowthLevelTakeRewardRsp::IsInitialized() const {
  return true;
}

void GCGGrowthLevelTakeRewardRsp::Swap(GCGGrowthLevelTakeRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGGrowthLevelTakeRewardRsp::InternalSwap(GCGGrowthLevelTakeRewardRsp* other) {
  using std::swap;
  swap(level_, other->level_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGGrowthLevelTakeRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGGrowthLevelTakeRewardRsp

// uint32 level = 1;
void GCGGrowthLevelTakeRewardRsp::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 GCGGrowthLevelTakeRewardRsp::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelTakeRewardRsp.level)
  return level_;
}
void GCGGrowthLevelTakeRewardRsp::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelTakeRewardRsp.level)
}

// int32 retcode = 13;
void GCGGrowthLevelTakeRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGGrowthLevelTakeRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelTakeRewardRsp.retcode)
  return retcode_;
}
void GCGGrowthLevelTakeRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelTakeRewardRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGInviteGuestBattleReq::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGInviteGuestBattleReq::GCGInviteGuestBattleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGInviteGuestBattleReq)
}
GCGInviteGuestBattleReq::GCGInviteGuestBattleReq(const GCGInviteGuestBattleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGInviteGuestBattleReq)
}

void GCGInviteGuestBattleReq::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

GCGInviteGuestBattleReq::~GCGInviteGuestBattleReq() {
  // @@protoc_insertion_point(destructor:proto.GCGInviteGuestBattleReq)
  SharedDtor();
}

void GCGInviteGuestBattleReq::SharedDtor() {
}

void GCGInviteGuestBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGInviteGuestBattleReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGInviteGuestBattleReq& GCGInviteGuestBattleReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGInviteGuestBattleReq* GCGInviteGuestBattleReq::New(::google::protobuf::Arena* arena) const {
  GCGInviteGuestBattleReq* n = new GCGInviteGuestBattleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGInviteGuestBattleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGInviteGuestBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGInviteGuestBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGInviteGuestBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGInviteGuestBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGInviteGuestBattleReq)
  return false;
#undef DO_
}

void GCGInviteGuestBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGInviteGuestBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 11;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGInviteGuestBattleReq)
}

::google::protobuf::uint8* GCGInviteGuestBattleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGInviteGuestBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 11;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGInviteGuestBattleReq)
  return target;
}

size_t GCGInviteGuestBattleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGInviteGuestBattleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uid = 11;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGInviteGuestBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGInviteGuestBattleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGInviteGuestBattleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGInviteGuestBattleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGInviteGuestBattleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGInviteGuestBattleReq)
    MergeFrom(*source);
  }
}

void GCGInviteGuestBattleReq::MergeFrom(const GCGInviteGuestBattleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGInviteGuestBattleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void GCGInviteGuestBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGInviteGuestBattleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGInviteGuestBattleReq::CopyFrom(const GCGInviteGuestBattleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGInviteGuestBattleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGInviteGuestBattleReq::IsInitialized() const {
  return true;
}

void GCGInviteGuestBattleReq::Swap(GCGInviteGuestBattleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGInviteGuestBattleReq::InternalSwap(GCGInviteGuestBattleReq* other) {
  using std::swap;
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGInviteGuestBattleReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGInviteGuestBattleReq

// uint32 uid = 11;
void GCGInviteGuestBattleReq::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 GCGInviteGuestBattleReq::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleReq.uid)
  return uid_;
}
void GCGInviteGuestBattleReq::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleReq.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGInviteGuestBattleRsp::kRetcodeFieldNumber;
const int GCGInviteGuestBattleRsp::kConfirmEndTimeFieldNumber;
const int GCGInviteGuestBattleRsp::kPunishEndTimeFieldNumber;
const int GCGInviteGuestBattleRsp::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGInviteGuestBattleRsp::GCGInviteGuestBattleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGInviteGuestBattleRsp)
}
GCGInviteGuestBattleRsp::GCGInviteGuestBattleRsp(const GCGInviteGuestBattleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirm_end_time_, &from.confirm_end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&confirm_end_time_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGInviteGuestBattleRsp)
}

void GCGInviteGuestBattleRsp::SharedCtor() {
  ::memset(&confirm_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&confirm_end_time_)) + sizeof(uid_));
  _cached_size_ = 0;
}

GCGInviteGuestBattleRsp::~GCGInviteGuestBattleRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGInviteGuestBattleRsp)
  SharedDtor();
}

void GCGInviteGuestBattleRsp::SharedDtor() {
}

void GCGInviteGuestBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGInviteGuestBattleRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGInviteGuestBattleRsp& GCGInviteGuestBattleRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGInviteGuestBattleRsp* GCGInviteGuestBattleRsp::New(::google::protobuf::Arena* arena) const {
  GCGInviteGuestBattleRsp* n = new GCGInviteGuestBattleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGInviteGuestBattleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGInviteGuestBattleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confirm_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&confirm_end_time_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool GCGInviteGuestBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGInviteGuestBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 confirm_end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confirm_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 punish_end_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &punish_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGInviteGuestBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGInviteGuestBattleRsp)
  return false;
#undef DO_
}

void GCGInviteGuestBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGInviteGuestBattleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 confirm_end_time = 2;
  if (this->confirm_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->confirm_end_time(), output);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  // uint32 punish_end_time = 9;
  if (this->punish_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->punish_end_time(), output);
  }

  // uint32 uid = 11;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGInviteGuestBattleRsp)
}

::google::protobuf::uint8* GCGInviteGuestBattleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGInviteGuestBattleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 confirm_end_time = 2;
  if (this->confirm_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->confirm_end_time(), target);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  // uint32 punish_end_time = 9;
  if (this->punish_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->punish_end_time(), target);
  }

  // uint32 uid = 11;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGInviteGuestBattleRsp)
  return target;
}

size_t GCGInviteGuestBattleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGInviteGuestBattleRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 confirm_end_time = 2;
  if (this->confirm_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->confirm_end_time());
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 punish_end_time = 9;
  if (this->punish_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->punish_end_time());
  }

  // uint32 uid = 11;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGInviteGuestBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGInviteGuestBattleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGInviteGuestBattleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGInviteGuestBattleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGInviteGuestBattleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGInviteGuestBattleRsp)
    MergeFrom(*source);
  }
}

void GCGInviteGuestBattleRsp::MergeFrom(const GCGInviteGuestBattleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGInviteGuestBattleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confirm_end_time() != 0) {
    set_confirm_end_time(from.confirm_end_time());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.punish_end_time() != 0) {
    set_punish_end_time(from.punish_end_time());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void GCGInviteGuestBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGInviteGuestBattleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGInviteGuestBattleRsp::CopyFrom(const GCGInviteGuestBattleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGInviteGuestBattleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGInviteGuestBattleRsp::IsInitialized() const {
  return true;
}

void GCGInviteGuestBattleRsp::Swap(GCGInviteGuestBattleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGInviteGuestBattleRsp::InternalSwap(GCGInviteGuestBattleRsp* other) {
  using std::swap;
  swap(confirm_end_time_, other->confirm_end_time_);
  swap(retcode_, other->retcode_);
  swap(punish_end_time_, other->punish_end_time_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGInviteGuestBattleRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGInviteGuestBattleRsp

// int32 retcode = 3;
void GCGInviteGuestBattleRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGInviteGuestBattleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.retcode)
  return retcode_;
}
void GCGInviteGuestBattleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.retcode)
}

// uint32 confirm_end_time = 2;
void GCGInviteGuestBattleRsp::clear_confirm_end_time() {
  confirm_end_time_ = 0u;
}
::google::protobuf::uint32 GCGInviteGuestBattleRsp::confirm_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.confirm_end_time)
  return confirm_end_time_;
}
void GCGInviteGuestBattleRsp::set_confirm_end_time(::google::protobuf::uint32 value) {
  
  confirm_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.confirm_end_time)
}

// uint32 punish_end_time = 9;
void GCGInviteGuestBattleRsp::clear_punish_end_time() {
  punish_end_time_ = 0u;
}
::google::protobuf::uint32 GCGInviteGuestBattleRsp::punish_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.punish_end_time)
  return punish_end_time_;
}
void GCGInviteGuestBattleRsp::set_punish_end_time(::google::protobuf::uint32 value) {
  
  punish_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.punish_end_time)
}

// uint32 uid = 11;
void GCGInviteGuestBattleRsp::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 GCGInviteGuestBattleRsp::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.uid)
  return uid_;
}
void GCGInviteGuestBattleRsp::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGInviteBattleNotify::kConfirmEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGInviteBattleNotify::GCGInviteBattleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGInviteBattleNotify)
}
GCGInviteBattleNotify::GCGInviteBattleNotify(const GCGInviteBattleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confirm_end_time_ = from.confirm_end_time_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGInviteBattleNotify)
}

void GCGInviteBattleNotify::SharedCtor() {
  confirm_end_time_ = 0u;
  _cached_size_ = 0;
}

GCGInviteBattleNotify::~GCGInviteBattleNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGInviteBattleNotify)
  SharedDtor();
}

void GCGInviteBattleNotify::SharedDtor() {
}

void GCGInviteBattleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGInviteBattleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGInviteBattleNotify& GCGInviteBattleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGInviteBattleNotify* GCGInviteBattleNotify::New(::google::protobuf::Arena* arena) const {
  GCGInviteBattleNotify* n = new GCGInviteBattleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGInviteBattleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGInviteBattleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confirm_end_time_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGInviteBattleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGInviteBattleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 confirm_end_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &confirm_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGInviteBattleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGInviteBattleNotify)
  return false;
#undef DO_
}

void GCGInviteBattleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGInviteBattleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 confirm_end_time = 10;
  if (this->confirm_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->confirm_end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGInviteBattleNotify)
}

::google::protobuf::uint8* GCGInviteBattleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGInviteBattleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 confirm_end_time = 10;
  if (this->confirm_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->confirm_end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGInviteBattleNotify)
  return target;
}

size_t GCGInviteBattleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGInviteBattleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 confirm_end_time = 10;
  if (this->confirm_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->confirm_end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGInviteBattleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGInviteBattleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGInviteBattleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGInviteBattleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGInviteBattleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGInviteBattleNotify)
    MergeFrom(*source);
  }
}

void GCGInviteBattleNotify::MergeFrom(const GCGInviteBattleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGInviteBattleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confirm_end_time() != 0) {
    set_confirm_end_time(from.confirm_end_time());
  }
}

void GCGInviteBattleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGInviteBattleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGInviteBattleNotify::CopyFrom(const GCGInviteBattleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGInviteBattleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGInviteBattleNotify::IsInitialized() const {
  return true;
}

void GCGInviteBattleNotify::Swap(GCGInviteBattleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGInviteBattleNotify::InternalSwap(GCGInviteBattleNotify* other) {
  using std::swap;
  swap(confirm_end_time_, other->confirm_end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGInviteBattleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGInviteBattleNotify

// uint32 confirm_end_time = 10;
void GCGInviteBattleNotify::clear_confirm_end_time() {
  confirm_end_time_ = 0u;
}
::google::protobuf::uint32 GCGInviteBattleNotify::confirm_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteBattleNotify.confirm_end_time)
  return confirm_end_time_;
}
void GCGInviteBattleNotify::set_confirm_end_time(::google::protobuf::uint32 value) {
  
  confirm_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteBattleNotify.confirm_end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGApplyInviteBattleReq::kIsAgreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGApplyInviteBattleReq::GCGApplyInviteBattleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGApplyInviteBattleReq)
}
GCGApplyInviteBattleReq::GCGApplyInviteBattleReq(const GCGApplyInviteBattleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_agree_ = from.is_agree_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGApplyInviteBattleReq)
}

void GCGApplyInviteBattleReq::SharedCtor() {
  is_agree_ = false;
  _cached_size_ = 0;
}

GCGApplyInviteBattleReq::~GCGApplyInviteBattleReq() {
  // @@protoc_insertion_point(destructor:proto.GCGApplyInviteBattleReq)
  SharedDtor();
}

void GCGApplyInviteBattleReq::SharedDtor() {
}

void GCGApplyInviteBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGApplyInviteBattleReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGApplyInviteBattleReq& GCGApplyInviteBattleReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGApplyInviteBattleReq* GCGApplyInviteBattleReq::New(::google::protobuf::Arena* arena) const {
  GCGApplyInviteBattleReq* n = new GCGApplyInviteBattleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGApplyInviteBattleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGApplyInviteBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_agree_ = false;
  _internal_metadata_.Clear();
}

bool GCGApplyInviteBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGApplyInviteBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_agree = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGApplyInviteBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGApplyInviteBattleReq)
  return false;
#undef DO_
}

void GCGApplyInviteBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGApplyInviteBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_agree = 9;
  if (this->is_agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_agree(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGApplyInviteBattleReq)
}

::google::protobuf::uint8* GCGApplyInviteBattleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGApplyInviteBattleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_agree = 9;
  if (this->is_agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_agree(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGApplyInviteBattleReq)
  return target;
}

size_t GCGApplyInviteBattleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGApplyInviteBattleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_agree = 9;
  if (this->is_agree() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGApplyInviteBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGApplyInviteBattleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGApplyInviteBattleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGApplyInviteBattleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGApplyInviteBattleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGApplyInviteBattleReq)
    MergeFrom(*source);
  }
}

void GCGApplyInviteBattleReq::MergeFrom(const GCGApplyInviteBattleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGApplyInviteBattleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_agree() != 0) {
    set_is_agree(from.is_agree());
  }
}

void GCGApplyInviteBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGApplyInviteBattleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGApplyInviteBattleReq::CopyFrom(const GCGApplyInviteBattleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGApplyInviteBattleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGApplyInviteBattleReq::IsInitialized() const {
  return true;
}

void GCGApplyInviteBattleReq::Swap(GCGApplyInviteBattleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGApplyInviteBattleReq::InternalSwap(GCGApplyInviteBattleReq* other) {
  using std::swap;
  swap(is_agree_, other->is_agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGApplyInviteBattleReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGApplyInviteBattleReq

// bool is_agree = 9;
void GCGApplyInviteBattleReq::clear_is_agree() {
  is_agree_ = false;
}
bool GCGApplyInviteBattleReq::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleReq.is_agree)
  return is_agree_;
}
void GCGApplyInviteBattleReq::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleReq.is_agree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGApplyInviteBattleRsp::kPunishEndTimeFieldNumber;
const int GCGApplyInviteBattleRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGApplyInviteBattleRsp::GCGApplyInviteBattleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGApplyInviteBattleRsp)
}
GCGApplyInviteBattleRsp::GCGApplyInviteBattleRsp(const GCGApplyInviteBattleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&punish_end_time_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(punish_end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGApplyInviteBattleRsp)
}

void GCGApplyInviteBattleRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punish_end_time_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(punish_end_time_));
  _cached_size_ = 0;
}

GCGApplyInviteBattleRsp::~GCGApplyInviteBattleRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGApplyInviteBattleRsp)
  SharedDtor();
}

void GCGApplyInviteBattleRsp::SharedDtor() {
}

void GCGApplyInviteBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGApplyInviteBattleRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGApplyInviteBattleRsp& GCGApplyInviteBattleRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGApplyInviteBattleRsp* GCGApplyInviteBattleRsp::New(::google::protobuf::Arena* arena) const {
  GCGApplyInviteBattleRsp* n = new GCGApplyInviteBattleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGApplyInviteBattleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGApplyInviteBattleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&punish_end_time_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(punish_end_time_));
  _internal_metadata_.Clear();
}

bool GCGApplyInviteBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGApplyInviteBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 punish_end_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &punish_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGApplyInviteBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGApplyInviteBattleRsp)
  return false;
#undef DO_
}

void GCGApplyInviteBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGApplyInviteBattleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // uint32 punish_end_time = 7;
  if (this->punish_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->punish_end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGApplyInviteBattleRsp)
}

::google::protobuf::uint8* GCGApplyInviteBattleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGApplyInviteBattleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // uint32 punish_end_time = 7;
  if (this->punish_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->punish_end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGApplyInviteBattleRsp)
  return target;
}

size_t GCGApplyInviteBattleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGApplyInviteBattleRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 punish_end_time = 7;
  if (this->punish_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->punish_end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGApplyInviteBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGApplyInviteBattleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGApplyInviteBattleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGApplyInviteBattleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGApplyInviteBattleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGApplyInviteBattleRsp)
    MergeFrom(*source);
  }
}

void GCGApplyInviteBattleRsp::MergeFrom(const GCGApplyInviteBattleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGApplyInviteBattleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.punish_end_time() != 0) {
    set_punish_end_time(from.punish_end_time());
  }
}

void GCGApplyInviteBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGApplyInviteBattleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGApplyInviteBattleRsp::CopyFrom(const GCGApplyInviteBattleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGApplyInviteBattleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGApplyInviteBattleRsp::IsInitialized() const {
  return true;
}

void GCGApplyInviteBattleRsp::Swap(GCGApplyInviteBattleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGApplyInviteBattleRsp::InternalSwap(GCGApplyInviteBattleRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(punish_end_time_, other->punish_end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGApplyInviteBattleRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGApplyInviteBattleRsp

// uint32 punish_end_time = 7;
void GCGApplyInviteBattleRsp::clear_punish_end_time() {
  punish_end_time_ = 0u;
}
::google::protobuf::uint32 GCGApplyInviteBattleRsp::punish_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleRsp.punish_end_time)
  return punish_end_time_;
}
void GCGApplyInviteBattleRsp::set_punish_end_time(::google::protobuf::uint32 value) {
  
  punish_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleRsp.punish_end_time)
}

// int32 retcode = 5;
void GCGApplyInviteBattleRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGApplyInviteBattleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleRsp.retcode)
  return retcode_;
}
void GCGApplyInviteBattleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGApplyInviteBattleNotify::kIsAgreeFieldNumber;
const int GCGApplyInviteBattleNotify::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGApplyInviteBattleNotify::GCGApplyInviteBattleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGApplyInviteBattleNotify)
}
GCGApplyInviteBattleNotify::GCGApplyInviteBattleNotify(const GCGApplyInviteBattleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_agree_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(is_agree_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGApplyInviteBattleNotify)
}

void GCGApplyInviteBattleNotify::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_agree_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_agree_));
  _cached_size_ = 0;
}

GCGApplyInviteBattleNotify::~GCGApplyInviteBattleNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGApplyInviteBattleNotify)
  SharedDtor();
}

void GCGApplyInviteBattleNotify::SharedDtor() {
}

void GCGApplyInviteBattleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGApplyInviteBattleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGApplyInviteBattleNotify& GCGApplyInviteBattleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGApplyInviteBattleNotify* GCGApplyInviteBattleNotify::New(::google::protobuf::Arena* arena) const {
  GCGApplyInviteBattleNotify* n = new GCGApplyInviteBattleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGApplyInviteBattleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGApplyInviteBattleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_agree_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_agree_));
  _internal_metadata_.Clear();
}

bool GCGApplyInviteBattleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGApplyInviteBattleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_agree = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGApplyInviteBattleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGApplyInviteBattleNotify)
  return false;
#undef DO_
}

void GCGApplyInviteBattleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGApplyInviteBattleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 6;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->retcode(), output);
  }

  // bool is_agree = 14;
  if (this->is_agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_agree(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGApplyInviteBattleNotify)
}

::google::protobuf::uint8* GCGApplyInviteBattleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGApplyInviteBattleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 6;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->retcode(), target);
  }

  // bool is_agree = 14;
  if (this->is_agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_agree(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGApplyInviteBattleNotify)
  return target;
}

size_t GCGApplyInviteBattleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGApplyInviteBattleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 6;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // bool is_agree = 14;
  if (this->is_agree() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGApplyInviteBattleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGApplyInviteBattleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGApplyInviteBattleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGApplyInviteBattleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGApplyInviteBattleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGApplyInviteBattleNotify)
    MergeFrom(*source);
  }
}

void GCGApplyInviteBattleNotify::MergeFrom(const GCGApplyInviteBattleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGApplyInviteBattleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.is_agree() != 0) {
    set_is_agree(from.is_agree());
  }
}

void GCGApplyInviteBattleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGApplyInviteBattleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGApplyInviteBattleNotify::CopyFrom(const GCGApplyInviteBattleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGApplyInviteBattleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGApplyInviteBattleNotify::IsInitialized() const {
  return true;
}

void GCGApplyInviteBattleNotify::Swap(GCGApplyInviteBattleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGApplyInviteBattleNotify::InternalSwap(GCGApplyInviteBattleNotify* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(is_agree_, other->is_agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGApplyInviteBattleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGApplyInviteBattleNotify

// bool is_agree = 14;
void GCGApplyInviteBattleNotify::clear_is_agree() {
  is_agree_ = false;
}
bool GCGApplyInviteBattleNotify::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleNotify.is_agree)
  return is_agree_;
}
void GCGApplyInviteBattleNotify::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleNotify.is_agree)
}

// int32 retcode = 6;
void GCGApplyInviteBattleNotify::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGApplyInviteBattleNotify::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleNotify.retcode)
  return retcode_;
}
void GCGApplyInviteBattleNotify::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleNotify.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGWorldPlayerGCGStateReq::GCGWorldPlayerGCGStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGWorldPlayerGCGStateReq)
}
GCGWorldPlayerGCGStateReq::GCGWorldPlayerGCGStateReq(const GCGWorldPlayerGCGStateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGWorldPlayerGCGStateReq)
}

void GCGWorldPlayerGCGStateReq::SharedCtor() {
  _cached_size_ = 0;
}

GCGWorldPlayerGCGStateReq::~GCGWorldPlayerGCGStateReq() {
  // @@protoc_insertion_point(destructor:proto.GCGWorldPlayerGCGStateReq)
  SharedDtor();
}

void GCGWorldPlayerGCGStateReq::SharedDtor() {
}

void GCGWorldPlayerGCGStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGWorldPlayerGCGStateReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGWorldPlayerGCGStateReq& GCGWorldPlayerGCGStateReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGWorldPlayerGCGStateReq* GCGWorldPlayerGCGStateReq::New(::google::protobuf::Arena* arena) const {
  GCGWorldPlayerGCGStateReq* n = new GCGWorldPlayerGCGStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGWorldPlayerGCGStateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGWorldPlayerGCGStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGWorldPlayerGCGStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGWorldPlayerGCGStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGWorldPlayerGCGStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGWorldPlayerGCGStateReq)
  return false;
#undef DO_
}

void GCGWorldPlayerGCGStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGWorldPlayerGCGStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGWorldPlayerGCGStateReq)
}

::google::protobuf::uint8* GCGWorldPlayerGCGStateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGWorldPlayerGCGStateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGWorldPlayerGCGStateReq)
  return target;
}

size_t GCGWorldPlayerGCGStateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGWorldPlayerGCGStateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGWorldPlayerGCGStateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGWorldPlayerGCGStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGWorldPlayerGCGStateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGWorldPlayerGCGStateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGWorldPlayerGCGStateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGWorldPlayerGCGStateReq)
    MergeFrom(*source);
  }
}

void GCGWorldPlayerGCGStateReq::MergeFrom(const GCGWorldPlayerGCGStateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGWorldPlayerGCGStateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGWorldPlayerGCGStateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGWorldPlayerGCGStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGWorldPlayerGCGStateReq::CopyFrom(const GCGWorldPlayerGCGStateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGWorldPlayerGCGStateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGWorldPlayerGCGStateReq::IsInitialized() const {
  return true;
}

void GCGWorldPlayerGCGStateReq::Swap(GCGWorldPlayerGCGStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGWorldPlayerGCGStateReq::InternalSwap(GCGWorldPlayerGCGStateReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGWorldPlayerGCGStateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGWorldPlayerGCGStateReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGPlayerGCGState::kIsReasouceCompleteFieldNumber;
const int GCGPlayerGCGState::kIsGcgStateOpenFieldNumber;
const int GCGPlayerGCGState::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGPlayerGCGState::GCGPlayerGCGState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGPlayerGCGState)
}
GCGPlayerGCGState::GCGPlayerGCGState(const GCGPlayerGCGState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_gcg_state_open_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(is_gcg_state_open_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGPlayerGCGState)
}

void GCGPlayerGCGState::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_gcg_state_open_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_gcg_state_open_));
  _cached_size_ = 0;
}

GCGPlayerGCGState::~GCGPlayerGCGState() {
  // @@protoc_insertion_point(destructor:proto.GCGPlayerGCGState)
  SharedDtor();
}

void GCGPlayerGCGState::SharedDtor() {
}

void GCGPlayerGCGState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGPlayerGCGState::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGPlayerGCGState& GCGPlayerGCGState::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGPlayerGCGState* GCGPlayerGCGState::New(::google::protobuf::Arena* arena) const {
  GCGPlayerGCGState* n = new GCGPlayerGCGState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGPlayerGCGState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGPlayerGCGState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_gcg_state_open_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(is_gcg_state_open_));
  _internal_metadata_.Clear();
}

bool GCGPlayerGCGState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGPlayerGCGState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_gcg_state_open = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gcg_state_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_reasouce_complete = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reasouce_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGPlayerGCGState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGPlayerGCGState)
  return false;
#undef DO_
}

void GCGPlayerGCGState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGPlayerGCGState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 2;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // bool is_gcg_state_open = 5;
  if (this->is_gcg_state_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_gcg_state_open(), output);
  }

  // bool is_reasouce_complete = 7;
  if (this->is_reasouce_complete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_reasouce_complete(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGPlayerGCGState)
}

::google::protobuf::uint8* GCGPlayerGCGState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGPlayerGCGState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 2;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // bool is_gcg_state_open = 5;
  if (this->is_gcg_state_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_gcg_state_open(), target);
  }

  // bool is_reasouce_complete = 7;
  if (this->is_reasouce_complete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_reasouce_complete(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGPlayerGCGState)
  return target;
}

size_t GCGPlayerGCGState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGPlayerGCGState)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uid = 2;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // bool is_reasouce_complete = 7;
  if (this->is_reasouce_complete() != 0) {
    total_size += 1 + 1;
  }

  // bool is_gcg_state_open = 5;
  if (this->is_gcg_state_open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGPlayerGCGState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGPlayerGCGState)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGPlayerGCGState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGPlayerGCGState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGPlayerGCGState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGPlayerGCGState)
    MergeFrom(*source);
  }
}

void GCGPlayerGCGState::MergeFrom(const GCGPlayerGCGState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGPlayerGCGState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.is_reasouce_complete() != 0) {
    set_is_reasouce_complete(from.is_reasouce_complete());
  }
  if (from.is_gcg_state_open() != 0) {
    set_is_gcg_state_open(from.is_gcg_state_open());
  }
}

void GCGPlayerGCGState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGPlayerGCGState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGPlayerGCGState::CopyFrom(const GCGPlayerGCGState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGPlayerGCGState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGPlayerGCGState::IsInitialized() const {
  return true;
}

void GCGPlayerGCGState::Swap(GCGPlayerGCGState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGPlayerGCGState::InternalSwap(GCGPlayerGCGState* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(is_reasouce_complete_, other->is_reasouce_complete_);
  swap(is_gcg_state_open_, other->is_gcg_state_open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGPlayerGCGState::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGPlayerGCGState

// bool is_reasouce_complete = 7;
void GCGPlayerGCGState::clear_is_reasouce_complete() {
  is_reasouce_complete_ = false;
}
bool GCGPlayerGCGState::is_reasouce_complete() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerGCGState.is_reasouce_complete)
  return is_reasouce_complete_;
}
void GCGPlayerGCGState::set_is_reasouce_complete(bool value) {
  
  is_reasouce_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerGCGState.is_reasouce_complete)
}

// bool is_gcg_state_open = 5;
void GCGPlayerGCGState::clear_is_gcg_state_open() {
  is_gcg_state_open_ = false;
}
bool GCGPlayerGCGState::is_gcg_state_open() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerGCGState.is_gcg_state_open)
  return is_gcg_state_open_;
}
void GCGPlayerGCGState::set_is_gcg_state_open(bool value) {
  
  is_gcg_state_open_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerGCGState.is_gcg_state_open)
}

// uint32 uid = 2;
void GCGPlayerGCGState::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 GCGPlayerGCGState::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerGCGState.uid)
  return uid_;
}
void GCGPlayerGCGState::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerGCGState.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGWorldPlayerGCGStateRsp::kPlayerStateFieldNumber;
const int GCGWorldPlayerGCGStateRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGWorldPlayerGCGStateRsp::GCGWorldPlayerGCGStateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGWorldPlayerGCGStateRsp)
}
GCGWorldPlayerGCGStateRsp::GCGWorldPlayerGCGStateRsp(const GCGWorldPlayerGCGStateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_state_(from.player_state_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGWorldPlayerGCGStateRsp)
}

void GCGWorldPlayerGCGStateRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GCGWorldPlayerGCGStateRsp::~GCGWorldPlayerGCGStateRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGWorldPlayerGCGStateRsp)
  SharedDtor();
}

void GCGWorldPlayerGCGStateRsp::SharedDtor() {
}

void GCGWorldPlayerGCGStateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGWorldPlayerGCGStateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGWorldPlayerGCGStateRsp& GCGWorldPlayerGCGStateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGWorldPlayerGCGStateRsp* GCGWorldPlayerGCGStateRsp::New(::google::protobuf::Arena* arena) const {
  GCGWorldPlayerGCGStateRsp* n = new GCGWorldPlayerGCGStateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGWorldPlayerGCGStateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGWorldPlayerGCGStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_state_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GCGWorldPlayerGCGStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGWorldPlayerGCGStateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGPlayerGCGState player_state = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGWorldPlayerGCGStateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGWorldPlayerGCGStateRsp)
  return false;
#undef DO_
}

void GCGWorldPlayerGCGStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGWorldPlayerGCGStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->retcode(), output);
  }

  // repeated .proto.GCGPlayerGCGState player_state = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->player_state(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGWorldPlayerGCGStateRsp)
}

::google::protobuf::uint8* GCGWorldPlayerGCGStateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGWorldPlayerGCGStateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->retcode(), target);
  }

  // repeated .proto.GCGPlayerGCGState player_state = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->player_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->player_state(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGWorldPlayerGCGStateRsp)
  return target;
}

size_t GCGWorldPlayerGCGStateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGWorldPlayerGCGStateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGPlayerGCGState player_state = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->player_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_state(static_cast<int>(i)));
    }
  }

  // int32 retcode = 10;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGWorldPlayerGCGStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGWorldPlayerGCGStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGWorldPlayerGCGStateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGWorldPlayerGCGStateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGWorldPlayerGCGStateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGWorldPlayerGCGStateRsp)
    MergeFrom(*source);
  }
}

void GCGWorldPlayerGCGStateRsp::MergeFrom(const GCGWorldPlayerGCGStateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGWorldPlayerGCGStateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_state_.MergeFrom(from.player_state_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGWorldPlayerGCGStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGWorldPlayerGCGStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGWorldPlayerGCGStateRsp::CopyFrom(const GCGWorldPlayerGCGStateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGWorldPlayerGCGStateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGWorldPlayerGCGStateRsp::IsInitialized() const {
  return true;
}

void GCGWorldPlayerGCGStateRsp::Swap(GCGWorldPlayerGCGStateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGWorldPlayerGCGStateRsp::InternalSwap(GCGWorldPlayerGCGStateRsp* other) {
  using std::swap;
  player_state_.InternalSwap(&other->player_state_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGWorldPlayerGCGStateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGWorldPlayerGCGStateRsp

// repeated .proto.GCGPlayerGCGState player_state = 12;
int GCGWorldPlayerGCGStateRsp::player_state_size() const {
  return player_state_.size();
}
void GCGWorldPlayerGCGStateRsp::clear_player_state() {
  player_state_.Clear();
}
const ::proto::GCGPlayerGCGState& GCGWorldPlayerGCGStateRsp::player_state(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_.Get(index);
}
::proto::GCGPlayerGCGState* GCGWorldPlayerGCGStateRsp::mutable_player_state(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_.Mutable(index);
}
::proto::GCGPlayerGCGState* GCGWorldPlayerGCGStateRsp::add_player_state() {
  // @@protoc_insertion_point(field_add:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerGCGState >*
GCGWorldPlayerGCGStateRsp::mutable_player_state() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return &player_state_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerGCGState >&
GCGWorldPlayerGCGStateRsp::player_state() const {
  // @@protoc_insertion_point(field_list:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_;
}

// int32 retcode = 10;
void GCGWorldPlayerGCGStateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGWorldPlayerGCGStateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGWorldPlayerGCGStateRsp.retcode)
  return retcode_;
}
void GCGWorldPlayerGCGStateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWorldPlayerGCGStateRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSettleNotify::kIsWinFieldNumber;
const int GCGSettleNotify::kGameIdFieldNumber;
const int GCGSettleNotify::kReasonFieldNumber;
const int GCGSettleNotify::kBusinessTypeFieldNumber;
const int GCGSettleNotify::kFinishedChallengeIdListFieldNumber;
const int GCGSettleNotify::kWinControllerIdFieldNumber;
const int GCGSettleNotify::kForbidFinishChallengeListFieldNumber;
const int GCGSettleNotify::kRewardItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSettleNotify::GCGSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSettleNotify)
}
GCGSettleNotify::GCGSettleNotify(const GCGSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      finished_challenge_id_list_(from.finished_challenge_id_list_),
      reward_item_list_(from.reward_item_list_),
      forbid_finish_challenge_list_(from.forbid_finish_challenge_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&business_type_, &from.business_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_win_) -
    reinterpret_cast<char*>(&business_type_)) + sizeof(is_win_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSettleNotify)
}

void GCGSettleNotify::SharedCtor() {
  ::memset(&business_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_win_) -
      reinterpret_cast<char*>(&business_type_)) + sizeof(is_win_));
  _cached_size_ = 0;
}

GCGSettleNotify::~GCGSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGSettleNotify)
  SharedDtor();
}

void GCGSettleNotify::SharedDtor() {
}

void GCGSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSettleNotify& GCGSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSettleNotify* GCGSettleNotify::New(::google::protobuf::Arena* arena) const {
  GCGSettleNotify* n = new GCGSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finished_challenge_id_list_.Clear();
  reward_item_list_.Clear();
  forbid_finish_challenge_list_.Clear();
  ::memset(&business_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_win_) -
      reinterpret_cast<char*>(&business_type_)) + sizeof(is_win_));
  _internal_metadata_.Clear();
}

bool GCGSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGGameBusinessType business_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_business_type(static_cast< ::proto::GCGGameBusinessType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGEndReason reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GCGEndReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 finished_challenge_id_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finished_challenge_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_finished_challenge_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 game_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ItemParam reward_item_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 forbid_finish_challenge_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_forbid_finish_challenge_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_forbid_finish_challenge_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_win = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 win_controller_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_controller_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSettleNotify)
  return false;
#undef DO_
}

void GCGSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->business_type(), output);
  }

  // .proto.GCGEndReason reason = 3;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reason(), output);
  }

  // repeated uint32 finished_challenge_id_list = 6;
  if (this->finished_challenge_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _finished_challenge_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->finished_challenge_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->finished_challenge_id_list(i), output);
  }

  // uint32 game_id = 7;
  if (this->game_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->game_id(), output);
  }

  // repeated .proto.ItemParam reward_item_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->reward_item_list(static_cast<int>(i)), output);
  }

  // repeated uint32 forbid_finish_challenge_list = 12;
  if (this->forbid_finish_challenge_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _forbid_finish_challenge_list_cached_byte_size_));
  }
  for (int i = 0, n = this->forbid_finish_challenge_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->forbid_finish_challenge_list(i), output);
  }

  // bool is_win = 13;
  if (this->is_win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_win(), output);
  }

  // uint32 win_controller_id = 15;
  if (this->win_controller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->win_controller_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSettleNotify)
}

::google::protobuf::uint8* GCGSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->business_type(), target);
  }

  // .proto.GCGEndReason reason = 3;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reason(), target);
  }

  // repeated uint32 finished_challenge_id_list = 6;
  if (this->finished_challenge_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _finished_challenge_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->finished_challenge_id_list_, target);
  }

  // uint32 game_id = 7;
  if (this->game_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->game_id(), target);
  }

  // repeated .proto.ItemParam reward_item_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->reward_item_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 forbid_finish_challenge_list = 12;
  if (this->forbid_finish_challenge_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _forbid_finish_challenge_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->forbid_finish_challenge_list_, target);
  }

  // bool is_win = 13;
  if (this->is_win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_win(), target);
  }

  // uint32 win_controller_id = 15;
  if (this->win_controller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->win_controller_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSettleNotify)
  return target;
}

size_t GCGSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 finished_challenge_id_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->finished_challenge_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _finished_challenge_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.ItemParam reward_item_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->reward_item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward_item_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 forbid_finish_challenge_list = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->forbid_finish_challenge_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _forbid_finish_challenge_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.GCGGameBusinessType business_type = 2;
  if (this->business_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->business_type());
  }

  // .proto.GCGEndReason reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 win_controller_id = 15;
  if (this->win_controller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->win_controller_id());
  }

  // uint32 game_id = 7;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->game_id());
  }

  // bool is_win = 13;
  if (this->is_win() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSettleNotify)
    MergeFrom(*source);
  }
}

void GCGSettleNotify::MergeFrom(const GCGSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  finished_challenge_id_list_.MergeFrom(from.finished_challenge_id_list_);
  reward_item_list_.MergeFrom(from.reward_item_list_);
  forbid_finish_challenge_list_.MergeFrom(from.forbid_finish_challenge_list_);
  if (from.business_type() != 0) {
    set_business_type(from.business_type());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.win_controller_id() != 0) {
    set_win_controller_id(from.win_controller_id());
  }
  if (from.game_id() != 0) {
    set_game_id(from.game_id());
  }
  if (from.is_win() != 0) {
    set_is_win(from.is_win());
  }
}

void GCGSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSettleNotify::CopyFrom(const GCGSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSettleNotify::IsInitialized() const {
  return true;
}

void GCGSettleNotify::Swap(GCGSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSettleNotify::InternalSwap(GCGSettleNotify* other) {
  using std::swap;
  finished_challenge_id_list_.InternalSwap(&other->finished_challenge_id_list_);
  reward_item_list_.InternalSwap(&other->reward_item_list_);
  forbid_finish_challenge_list_.InternalSwap(&other->forbid_finish_challenge_list_);
  swap(business_type_, other->business_type_);
  swap(reason_, other->reason_);
  swap(win_controller_id_, other->win_controller_id_);
  swap(game_id_, other->game_id_);
  swap(is_win_, other->is_win_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSettleNotify

// bool is_win = 13;
void GCGSettleNotify::clear_is_win() {
  is_win_ = false;
}
bool GCGSettleNotify::is_win() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.is_win)
  return is_win_;
}
void GCGSettleNotify::set_is_win(bool value) {
  
  is_win_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.is_win)
}

// uint32 game_id = 7;
void GCGSettleNotify::clear_game_id() {
  game_id_ = 0u;
}
::google::protobuf::uint32 GCGSettleNotify::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.game_id)
  return game_id_;
}
void GCGSettleNotify::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.game_id)
}

// .proto.GCGEndReason reason = 3;
void GCGSettleNotify::clear_reason() {
  reason_ = 0;
}
::proto::GCGEndReason GCGSettleNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.reason)
  return static_cast< ::proto::GCGEndReason >(reason_);
}
void GCGSettleNotify::set_reason(::proto::GCGEndReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.reason)
}

// .proto.GCGGameBusinessType business_type = 2;
void GCGSettleNotify::clear_business_type() {
  business_type_ = 0;
}
::proto::GCGGameBusinessType GCGSettleNotify::business_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
void GCGSettleNotify::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.business_type)
}

// repeated uint32 finished_challenge_id_list = 6;
int GCGSettleNotify::finished_challenge_id_list_size() const {
  return finished_challenge_id_list_.size();
}
void GCGSettleNotify::clear_finished_challenge_id_list() {
  finished_challenge_id_list_.Clear();
}
::google::protobuf::uint32 GCGSettleNotify::finished_challenge_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.finished_challenge_id_list)
  return finished_challenge_id_list_.Get(index);
}
void GCGSettleNotify::set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.finished_challenge_id_list)
}
void GCGSettleNotify::add_finished_challenge_id_list(::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSettleNotify.finished_challenge_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSettleNotify::finished_challenge_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSettleNotify.finished_challenge_id_list)
  return finished_challenge_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSettleNotify::mutable_finished_challenge_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSettleNotify.finished_challenge_id_list)
  return &finished_challenge_id_list_;
}

// uint32 win_controller_id = 15;
void GCGSettleNotify::clear_win_controller_id() {
  win_controller_id_ = 0u;
}
::google::protobuf::uint32 GCGSettleNotify::win_controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.win_controller_id)
  return win_controller_id_;
}
void GCGSettleNotify::set_win_controller_id(::google::protobuf::uint32 value) {
  
  win_controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.win_controller_id)
}

// repeated uint32 forbid_finish_challenge_list = 12;
int GCGSettleNotify::forbid_finish_challenge_list_size() const {
  return forbid_finish_challenge_list_.size();
}
void GCGSettleNotify::clear_forbid_finish_challenge_list() {
  forbid_finish_challenge_list_.Clear();
}
::google::protobuf::uint32 GCGSettleNotify::forbid_finish_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_.Get(index);
}
void GCGSettleNotify::set_forbid_finish_challenge_list(int index, ::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.forbid_finish_challenge_list)
}
void GCGSettleNotify::add_forbid_finish_challenge_list(::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSettleNotify.forbid_finish_challenge_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSettleNotify::forbid_finish_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSettleNotify.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSettleNotify::mutable_forbid_finish_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSettleNotify.forbid_finish_challenge_list)
  return &forbid_finish_challenge_list_;
}

// repeated .proto.ItemParam reward_item_list = 9;
int GCGSettleNotify::reward_item_list_size() const {
  return reward_item_list_.size();
}
void GCGSettleNotify::clear_reward_item_list() {
  reward_item_list_.Clear();
}
const ::proto::ItemParam& GCGSettleNotify::reward_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_.Get(index);
}
::proto::ItemParam* GCGSettleNotify::mutable_reward_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_.Mutable(index);
}
::proto::ItemParam* GCGSettleNotify::add_reward_item_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
GCGSettleNotify::mutable_reward_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSettleNotify.reward_item_list)
  return &reward_item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
GCGSettleNotify::reward_item_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGResourceStateNotify::kIsCompleteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGResourceStateNotify::GCGResourceStateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGResourceStateNotify)
}
GCGResourceStateNotify::GCGResourceStateNotify(const GCGResourceStateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_complete_ = from.is_complete_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGResourceStateNotify)
}

void GCGResourceStateNotify::SharedCtor() {
  is_complete_ = false;
  _cached_size_ = 0;
}

GCGResourceStateNotify::~GCGResourceStateNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGResourceStateNotify)
  SharedDtor();
}

void GCGResourceStateNotify::SharedDtor() {
}

void GCGResourceStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGResourceStateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGResourceStateNotify& GCGResourceStateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGResourceStateNotify* GCGResourceStateNotify::New(::google::protobuf::Arena* arena) const {
  GCGResourceStateNotify* n = new GCGResourceStateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGResourceStateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGResourceStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_complete_ = false;
  _internal_metadata_.Clear();
}

bool GCGResourceStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGResourceStateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_complete = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_complete_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGResourceStateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGResourceStateNotify)
  return false;
#undef DO_
}

void GCGResourceStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGResourceStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_complete = 5;
  if (this->is_complete() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_complete(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGResourceStateNotify)
}

::google::protobuf::uint8* GCGResourceStateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGResourceStateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_complete = 5;
  if (this->is_complete() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_complete(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGResourceStateNotify)
  return target;
}

size_t GCGResourceStateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGResourceStateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_complete = 5;
  if (this->is_complete() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGResourceStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGResourceStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGResourceStateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGResourceStateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGResourceStateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGResourceStateNotify)
    MergeFrom(*source);
  }
}

void GCGResourceStateNotify::MergeFrom(const GCGResourceStateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGResourceStateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_complete() != 0) {
    set_is_complete(from.is_complete());
  }
}

void GCGResourceStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGResourceStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGResourceStateNotify::CopyFrom(const GCGResourceStateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGResourceStateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGResourceStateNotify::IsInitialized() const {
  return true;
}

void GCGResourceStateNotify::Swap(GCGResourceStateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGResourceStateNotify::InternalSwap(GCGResourceStateNotify* other) {
  using std::swap;
  swap(is_complete_, other->is_complete_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGResourceStateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGResourceStateNotify

// bool is_complete = 5;
void GCGResourceStateNotify::clear_is_complete() {
  is_complete_ = false;
}
bool GCGResourceStateNotify::is_complete() const {
  // @@protoc_insertion_point(field_get:proto.GCGResourceStateNotify.is_complete)
  return is_complete_;
}
void GCGResourceStateNotify::set_is_complete(bool value) {
  
  is_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGResourceStateNotify.is_complete)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGClientSettleReq::GCGClientSettleReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGClientSettleReq)
}
GCGClientSettleReq::GCGClientSettleReq(const GCGClientSettleReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGClientSettleReq)
}

void GCGClientSettleReq::SharedCtor() {
  _cached_size_ = 0;
}

GCGClientSettleReq::~GCGClientSettleReq() {
  // @@protoc_insertion_point(destructor:proto.GCGClientSettleReq)
  SharedDtor();
}

void GCGClientSettleReq::SharedDtor() {
}

void GCGClientSettleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGClientSettleReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGClientSettleReq& GCGClientSettleReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGClientSettleReq* GCGClientSettleReq::New(::google::protobuf::Arena* arena) const {
  GCGClientSettleReq* n = new GCGClientSettleReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGClientSettleReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGClientSettleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GCGClientSettleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGClientSettleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGClientSettleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGClientSettleReq)
  return false;
#undef DO_
}

void GCGClientSettleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGClientSettleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGClientSettleReq)
}

::google::protobuf::uint8* GCGClientSettleReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGClientSettleReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGClientSettleReq)
  return target;
}

size_t GCGClientSettleReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGClientSettleReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGClientSettleReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGClientSettleReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGClientSettleReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGClientSettleReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGClientSettleReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGClientSettleReq)
    MergeFrom(*source);
  }
}

void GCGClientSettleReq::MergeFrom(const GCGClientSettleReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGClientSettleReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GCGClientSettleReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGClientSettleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGClientSettleReq::CopyFrom(const GCGClientSettleReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGClientSettleReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGClientSettleReq::IsInitialized() const {
  return true;
}

void GCGClientSettleReq::Swap(GCGClientSettleReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGClientSettleReq::InternalSwap(GCGClientSettleReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGClientSettleReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGClientSettleReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGClientSettleRsp::kCloseTimeFieldNumber;
const int GCGClientSettleRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGClientSettleRsp::GCGClientSettleRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGClientSettleRsp)
}
GCGClientSettleRsp::GCGClientSettleRsp(const GCGClientSettleRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_time_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(close_time_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGClientSettleRsp)
}

void GCGClientSettleRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_time_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(close_time_));
  _cached_size_ = 0;
}

GCGClientSettleRsp::~GCGClientSettleRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGClientSettleRsp)
  SharedDtor();
}

void GCGClientSettleRsp::SharedDtor() {
}

void GCGClientSettleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGClientSettleRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGClientSettleRsp& GCGClientSettleRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGClientSettleRsp* GCGClientSettleRsp::New(::google::protobuf::Arena* arena) const {
  GCGClientSettleRsp* n = new GCGClientSettleRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGClientSettleRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGClientSettleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_time_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(close_time_));
  _internal_metadata_.Clear();
}

bool GCGClientSettleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGClientSettleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 close_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGClientSettleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGClientSettleRsp)
  return false;
#undef DO_
}

void GCGClientSettleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGClientSettleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 close_time = 4;
  if (this->close_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->close_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGClientSettleRsp)
}

::google::protobuf::uint8* GCGClientSettleRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGClientSettleRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 close_time = 4;
  if (this->close_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->close_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGClientSettleRsp)
  return target;
}

size_t GCGClientSettleRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGClientSettleRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 close_time = 4;
  if (this->close_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->close_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGClientSettleRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGClientSettleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGClientSettleRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGClientSettleRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGClientSettleRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGClientSettleRsp)
    MergeFrom(*source);
  }
}

void GCGClientSettleRsp::MergeFrom(const GCGClientSettleRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGClientSettleRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.close_time() != 0) {
    set_close_time(from.close_time());
  }
}

void GCGClientSettleRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGClientSettleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGClientSettleRsp::CopyFrom(const GCGClientSettleRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGClientSettleRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGClientSettleRsp::IsInitialized() const {
  return true;
}

void GCGClientSettleRsp::Swap(GCGClientSettleRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGClientSettleRsp::InternalSwap(GCGClientSettleRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(close_time_, other->close_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGClientSettleRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGClientSettleRsp

// uint32 close_time = 4;
void GCGClientSettleRsp::clear_close_time() {
  close_time_ = 0u;
}
::google::protobuf::uint32 GCGClientSettleRsp::close_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGClientSettleRsp.close_time)
  return close_time_;
}
void GCGClientSettleRsp::set_close_time(::google::protobuf::uint32 value) {
  
  close_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGClientSettleRsp.close_time)
}

// int32 retcode = 1;
void GCGClientSettleRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGClientSettleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGClientSettleRsp.retcode)
  return retcode_;
}
void GCGClientSettleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGClientSettleRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSettleOptionReq::kOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSettleOptionReq::GCGSettleOptionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSettleOptionReq)
}
GCGSettleOptionReq::GCGSettleOptionReq(const GCGSettleOptionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  option_ = from.option_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGSettleOptionReq)
}

void GCGSettleOptionReq::SharedCtor() {
  option_ = 0;
  _cached_size_ = 0;
}

GCGSettleOptionReq::~GCGSettleOptionReq() {
  // @@protoc_insertion_point(destructor:proto.GCGSettleOptionReq)
  SharedDtor();
}

void GCGSettleOptionReq::SharedDtor() {
}

void GCGSettleOptionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSettleOptionReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSettleOptionReq& GCGSettleOptionReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSettleOptionReq* GCGSettleOptionReq::New(::google::protobuf::Arena* arena) const {
  GCGSettleOptionReq* n = new GCGSettleOptionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSettleOptionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSettleOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_ = 0;
  _internal_metadata_.Clear();
}

bool GCGSettleOptionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSettleOptionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGSettleOption option = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_option(static_cast< ::proto::GCGSettleOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSettleOptionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSettleOptionReq)
  return false;
#undef DO_
}

void GCGSettleOptionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSettleOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSettleOption option = 5;
  if (this->option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->option(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSettleOptionReq)
}

::google::protobuf::uint8* GCGSettleOptionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSettleOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSettleOption option = 5;
  if (this->option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->option(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSettleOptionReq)
  return target;
}

size_t GCGSettleOptionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSettleOptionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGSettleOption option = 5;
  if (this->option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSettleOptionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSettleOptionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSettleOptionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSettleOptionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSettleOptionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSettleOptionReq)
    MergeFrom(*source);
  }
}

void GCGSettleOptionReq::MergeFrom(const GCGSettleOptionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSettleOptionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.option() != 0) {
    set_option(from.option());
  }
}

void GCGSettleOptionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSettleOptionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSettleOptionReq::CopyFrom(const GCGSettleOptionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSettleOptionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSettleOptionReq::IsInitialized() const {
  return true;
}

void GCGSettleOptionReq::Swap(GCGSettleOptionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSettleOptionReq::InternalSwap(GCGSettleOptionReq* other) {
  using std::swap;
  swap(option_, other->option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSettleOptionReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSettleOptionReq

// .proto.GCGSettleOption option = 5;
void GCGSettleOptionReq::clear_option() {
  option_ = 0;
}
::proto::GCGSettleOption GCGSettleOptionReq::option() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleOptionReq.option)
  return static_cast< ::proto::GCGSettleOption >(option_);
}
void GCGSettleOptionReq::set_option(::proto::GCGSettleOption value) {
  
  option_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleOptionReq.option)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGSettleOptionRsp::kOptionFieldNumber;
const int GCGSettleOptionRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGSettleOptionRsp::GCGSettleOptionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGSettleOptionRsp)
}
GCGSettleOptionRsp::GCGSettleOptionRsp(const GCGSettleOptionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&option_, &from.option_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&option_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGSettleOptionRsp)
}

void GCGSettleOptionRsp::SharedCtor() {
  ::memset(&option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&option_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGSettleOptionRsp::~GCGSettleOptionRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGSettleOptionRsp)
  SharedDtor();
}

void GCGSettleOptionRsp::SharedDtor() {
}

void GCGSettleOptionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGSettleOptionRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGSettleOptionRsp& GCGSettleOptionRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGSettleOptionRsp* GCGSettleOptionRsp::New(::google::protobuf::Arena* arena) const {
  GCGSettleOptionRsp* n = new GCGSettleOptionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGSettleOptionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGSettleOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&option_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GCGSettleOptionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGSettleOptionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGSettleOption option = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_option(static_cast< ::proto::GCGSettleOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGSettleOptionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGSettleOptionRsp)
  return false;
#undef DO_
}

void GCGSettleOptionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGSettleOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSettleOption option = 13;
  if (this->option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->option(), output);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGSettleOptionRsp)
}

::google::protobuf::uint8* GCGSettleOptionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGSettleOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGSettleOption option = 13;
  if (this->option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->option(), target);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGSettleOptionRsp)
  return target;
}

size_t GCGSettleOptionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGSettleOptionRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGSettleOption option = 13;
  if (this->option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->option());
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGSettleOptionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGSettleOptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGSettleOptionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGSettleOptionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGSettleOptionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGSettleOptionRsp)
    MergeFrom(*source);
  }
}

void GCGSettleOptionRsp::MergeFrom(const GCGSettleOptionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGSettleOptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.option() != 0) {
    set_option(from.option());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGSettleOptionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGSettleOptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGSettleOptionRsp::CopyFrom(const GCGSettleOptionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGSettleOptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGSettleOptionRsp::IsInitialized() const {
  return true;
}

void GCGSettleOptionRsp::Swap(GCGSettleOptionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGSettleOptionRsp::InternalSwap(GCGSettleOptionRsp* other) {
  using std::swap;
  swap(option_, other->option_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGSettleOptionRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGSettleOptionRsp

// .proto.GCGSettleOption option = 13;
void GCGSettleOptionRsp::clear_option() {
  option_ = 0;
}
::proto::GCGSettleOption GCGSettleOptionRsp::option() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleOptionRsp.option)
  return static_cast< ::proto::GCGSettleOption >(option_);
}
void GCGSettleOptionRsp::set_option(::proto::GCGSettleOption value) {
  
  option_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleOptionRsp.option)
}

// int32 retcode = 14;
void GCGSettleOptionRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGSettleOptionRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleOptionRsp.retcode)
  return retcode_;
}
void GCGSettleOptionRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleOptionRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGBasicDataNotify::kLevelFieldNumber;
const int GCGBasicDataNotify::kExpFieldNumber;
const int GCGBasicDataNotify::kLevelRewardTakenListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGBasicDataNotify::GCGBasicDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGBasicDataNotify)
}
GCGBasicDataNotify::GCGBasicDataNotify(const GCGBasicDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      level_reward_taken_list_(from.level_reward_taken_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&exp_, &from.exp_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&exp_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGBasicDataNotify)
}

void GCGBasicDataNotify::SharedCtor() {
  ::memset(&exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&exp_)) + sizeof(level_));
  _cached_size_ = 0;
}

GCGBasicDataNotify::~GCGBasicDataNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGBasicDataNotify)
  SharedDtor();
}

void GCGBasicDataNotify::SharedDtor() {
}

void GCGBasicDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGBasicDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGBasicDataNotify& GCGBasicDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGBasicDataNotify* GCGBasicDataNotify::New(::google::protobuf::Arena* arena) const {
  GCGBasicDataNotify* n = new GCGBasicDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGBasicDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGBasicDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_reward_taken_list_.Clear();
  ::memset(&exp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&exp_)) + sizeof(level_));
  _internal_metadata_.Clear();
}

bool GCGBasicDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGBasicDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 exp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 level_reward_taken_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level_reward_taken_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_level_reward_taken_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGBasicDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGBasicDataNotify)
  return false;
#undef DO_
}

void GCGBasicDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGBasicDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exp = 4;
  if (this->exp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // uint32 level = 9;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level(), output);
  }

  // repeated uint32 level_reward_taken_list = 12;
  if (this->level_reward_taken_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _level_reward_taken_list_cached_byte_size_));
  }
  for (int i = 0, n = this->level_reward_taken_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->level_reward_taken_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGBasicDataNotify)
}

::google::protobuf::uint8* GCGBasicDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGBasicDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 exp = 4;
  if (this->exp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // uint32 level = 9;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level(), target);
  }

  // repeated uint32 level_reward_taken_list = 12;
  if (this->level_reward_taken_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _level_reward_taken_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->level_reward_taken_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGBasicDataNotify)
  return target;
}

size_t GCGBasicDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGBasicDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 level_reward_taken_list = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->level_reward_taken_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _level_reward_taken_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 exp = 4;
  if (this->exp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp());
  }

  // uint32 level = 9;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGBasicDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGBasicDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGBasicDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGBasicDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGBasicDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGBasicDataNotify)
    MergeFrom(*source);
  }
}

void GCGBasicDataNotify::MergeFrom(const GCGBasicDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGBasicDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  level_reward_taken_list_.MergeFrom(from.level_reward_taken_list_);
  if (from.exp() != 0) {
    set_exp(from.exp());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
}

void GCGBasicDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGBasicDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGBasicDataNotify::CopyFrom(const GCGBasicDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGBasicDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGBasicDataNotify::IsInitialized() const {
  return true;
}

void GCGBasicDataNotify::Swap(GCGBasicDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGBasicDataNotify::InternalSwap(GCGBasicDataNotify* other) {
  using std::swap;
  level_reward_taken_list_.InternalSwap(&other->level_reward_taken_list_);
  swap(exp_, other->exp_);
  swap(level_, other->level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGBasicDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGBasicDataNotify

// uint32 level = 9;
void GCGBasicDataNotify::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 GCGBasicDataNotify::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGBasicDataNotify.level)
  return level_;
}
void GCGBasicDataNotify::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBasicDataNotify.level)
}

// uint32 exp = 4;
void GCGBasicDataNotify::clear_exp() {
  exp_ = 0u;
}
::google::protobuf::uint32 GCGBasicDataNotify::exp() const {
  // @@protoc_insertion_point(field_get:proto.GCGBasicDataNotify.exp)
  return exp_;
}
void GCGBasicDataNotify::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBasicDataNotify.exp)
}

// repeated uint32 level_reward_taken_list = 12;
int GCGBasicDataNotify::level_reward_taken_list_size() const {
  return level_reward_taken_list_.size();
}
void GCGBasicDataNotify::clear_level_reward_taken_list() {
  level_reward_taken_list_.Clear();
}
::google::protobuf::uint32 GCGBasicDataNotify::level_reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGBasicDataNotify.level_reward_taken_list)
  return level_reward_taken_list_.Get(index);
}
void GCGBasicDataNotify::set_level_reward_taken_list(int index, ::google::protobuf::uint32 value) {
  level_reward_taken_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGBasicDataNotify.level_reward_taken_list)
}
void GCGBasicDataNotify::add_level_reward_taken_list(::google::protobuf::uint32 value) {
  level_reward_taken_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGBasicDataNotify.level_reward_taken_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGBasicDataNotify::level_reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGBasicDataNotify.level_reward_taken_list)
  return level_reward_taken_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGBasicDataNotify::mutable_level_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGBasicDataNotify.level_reward_taken_list)
  return &level_reward_taken_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTavernNpcInfo::kIdFieldNumber;
const int GCGTavernNpcInfo::kLevelIdFieldNumber;
const int GCGTavernNpcInfo::kScenePointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTavernNpcInfo::GCGTavernNpcInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTavernNpcInfo)
}
GCGTavernNpcInfo::GCGTavernNpcInfo(const GCGTavernNpcInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_id_, &from.level_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&level_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGTavernNpcInfo)
}

void GCGTavernNpcInfo::SharedCtor() {
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(id_));
  _cached_size_ = 0;
}

GCGTavernNpcInfo::~GCGTavernNpcInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGTavernNpcInfo)
  SharedDtor();
}

void GCGTavernNpcInfo::SharedDtor() {
}

void GCGTavernNpcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTavernNpcInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTavernNpcInfo& GCGTavernNpcInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTavernNpcInfo* GCGTavernNpcInfo::New(::google::protobuf::Arena* arena) const {
  GCGTavernNpcInfo* n = new GCGTavernNpcInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTavernNpcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTavernNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(id_));
  _internal_metadata_.Clear();
}

bool GCGTavernNpcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTavernNpcInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_point_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTavernNpcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTavernNpcInfo)
  return false;
#undef DO_
}

void GCGTavernNpcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTavernNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_point_id = 3;
  if (this->scene_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->scene_point_id(), output);
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->id(), output);
  }

  // uint32 level_id = 10;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->level_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTavernNpcInfo)
}

::google::protobuf::uint8* GCGTavernNpcInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTavernNpcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_point_id = 3;
  if (this->scene_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->scene_point_id(), target);
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->id(), target);
  }

  // uint32 level_id = 10;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->level_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTavernNpcInfo)
  return target;
}

size_t GCGTavernNpcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTavernNpcInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level_id = 10;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 scene_point_id = 3;
  if (this->scene_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_point_id());
  }

  // uint32 id = 6;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTavernNpcInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTavernNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTavernNpcInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTavernNpcInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTavernNpcInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTavernNpcInfo)
    MergeFrom(*source);
  }
}

void GCGTavernNpcInfo::MergeFrom(const GCGTavernNpcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTavernNpcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.scene_point_id() != 0) {
    set_scene_point_id(from.scene_point_id());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GCGTavernNpcInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTavernNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTavernNpcInfo::CopyFrom(const GCGTavernNpcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTavernNpcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTavernNpcInfo::IsInitialized() const {
  return true;
}

void GCGTavernNpcInfo::Swap(GCGTavernNpcInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTavernNpcInfo::InternalSwap(GCGTavernNpcInfo* other) {
  using std::swap;
  swap(level_id_, other->level_id_);
  swap(scene_point_id_, other->scene_point_id_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTavernNpcInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTavernNpcInfo

// uint32 id = 6;
void GCGTavernNpcInfo::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 GCGTavernNpcInfo::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfo.id)
  return id_;
}
void GCGTavernNpcInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTavernNpcInfo.id)
}

// uint32 level_id = 10;
void GCGTavernNpcInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGTavernNpcInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfo.level_id)
  return level_id_;
}
void GCGTavernNpcInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTavernNpcInfo.level_id)
}

// uint32 scene_point_id = 3;
void GCGTavernNpcInfo::clear_scene_point_id() {
  scene_point_id_ = 0u;
}
::google::protobuf::uint32 GCGTavernNpcInfo::scene_point_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfo.scene_point_id)
  return scene_point_id_;
}
void GCGTavernNpcInfo::set_scene_point_id(::google::protobuf::uint32 value) {
  
  scene_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTavernNpcInfo.scene_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGTavernNpcInfoNotify::kWeekNpcListFieldNumber;
const int GCGTavernNpcInfoNotify::kCharacterNpcFieldNumber;
const int GCGTavernNpcInfoNotify::kConstNpcListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGTavernNpcInfoNotify::GCGTavernNpcInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGTavernNpcInfoNotify)
}
GCGTavernNpcInfoNotify::GCGTavernNpcInfoNotify(const GCGTavernNpcInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      week_npc_list_(from.week_npc_list_),
      const_npc_list_(from.const_npc_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_character_npc()) {
    character_npc_ = new ::proto::GCGTavernNpcInfo(*from.character_npc_);
  } else {
    character_npc_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGTavernNpcInfoNotify)
}

void GCGTavernNpcInfoNotify::SharedCtor() {
  character_npc_ = NULL;
  _cached_size_ = 0;
}

GCGTavernNpcInfoNotify::~GCGTavernNpcInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGTavernNpcInfoNotify)
  SharedDtor();
}

void GCGTavernNpcInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete character_npc_;
}

void GCGTavernNpcInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGTavernNpcInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGTavernNpcInfoNotify& GCGTavernNpcInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGTavernNpcInfoNotify* GCGTavernNpcInfoNotify::New(::google::protobuf::Arena* arena) const {
  GCGTavernNpcInfoNotify* n = new GCGTavernNpcInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGTavernNpcInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGTavernNpcInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  week_npc_list_.Clear();
  const_npc_list_.Clear();
  if (GetArenaNoVirtual() == NULL && character_npc_ != NULL) {
    delete character_npc_;
  }
  character_npc_ = NULL;
  _internal_metadata_.Clear();
}

bool GCGTavernNpcInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGTavernNpcInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGTavernNpcInfo week_npc_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week_npc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGTavernNpcInfo character_npc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_character_npc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGTavernNpcInfo const_npc_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_const_npc_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGTavernNpcInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGTavernNpcInfoNotify)
  return false;
#undef DO_
}

void GCGTavernNpcInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGTavernNpcInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGTavernNpcInfo week_npc_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->week_npc_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->week_npc_list(static_cast<int>(i)), output);
  }

  // .proto.GCGTavernNpcInfo character_npc = 5;
  if (this->has_character_npc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->character_npc_, output);
  }

  // repeated .proto.GCGTavernNpcInfo const_npc_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->const_npc_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->const_npc_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGTavernNpcInfoNotify)
}

::google::protobuf::uint8* GCGTavernNpcInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGTavernNpcInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGTavernNpcInfo week_npc_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->week_npc_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->week_npc_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.GCGTavernNpcInfo character_npc = 5;
  if (this->has_character_npc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->character_npc_, deterministic, target);
  }

  // repeated .proto.GCGTavernNpcInfo const_npc_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->const_npc_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->const_npc_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGTavernNpcInfoNotify)
  return target;
}

size_t GCGTavernNpcInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGTavernNpcInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGTavernNpcInfo week_npc_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->week_npc_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->week_npc_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.GCGTavernNpcInfo const_npc_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->const_npc_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->const_npc_list(static_cast<int>(i)));
    }
  }

  // .proto.GCGTavernNpcInfo character_npc = 5;
  if (this->has_character_npc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->character_npc_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGTavernNpcInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGTavernNpcInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGTavernNpcInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGTavernNpcInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGTavernNpcInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGTavernNpcInfoNotify)
    MergeFrom(*source);
  }
}

void GCGTavernNpcInfoNotify::MergeFrom(const GCGTavernNpcInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGTavernNpcInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  week_npc_list_.MergeFrom(from.week_npc_list_);
  const_npc_list_.MergeFrom(from.const_npc_list_);
  if (from.has_character_npc()) {
    mutable_character_npc()->::proto::GCGTavernNpcInfo::MergeFrom(from.character_npc());
  }
}

void GCGTavernNpcInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGTavernNpcInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGTavernNpcInfoNotify::CopyFrom(const GCGTavernNpcInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGTavernNpcInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGTavernNpcInfoNotify::IsInitialized() const {
  return true;
}

void GCGTavernNpcInfoNotify::Swap(GCGTavernNpcInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGTavernNpcInfoNotify::InternalSwap(GCGTavernNpcInfoNotify* other) {
  using std::swap;
  week_npc_list_.InternalSwap(&other->week_npc_list_);
  const_npc_list_.InternalSwap(&other->const_npc_list_);
  swap(character_npc_, other->character_npc_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGTavernNpcInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGTavernNpcInfoNotify

// repeated .proto.GCGTavernNpcInfo week_npc_list = 1;
int GCGTavernNpcInfoNotify::week_npc_list_size() const {
  return week_npc_list_.size();
}
void GCGTavernNpcInfoNotify::clear_week_npc_list() {
  week_npc_list_.Clear();
}
const ::proto::GCGTavernNpcInfo& GCGTavernNpcInfoNotify::week_npc_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_.Get(index);
}
::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::mutable_week_npc_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_.Mutable(index);
}
::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::add_week_npc_list() {
  // @@protoc_insertion_point(field_add:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >*
GCGTavernNpcInfoNotify::mutable_week_npc_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return &week_npc_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >&
GCGTavernNpcInfoNotify::week_npc_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_;
}

// .proto.GCGTavernNpcInfo character_npc = 5;
bool GCGTavernNpcInfoNotify::has_character_npc() const {
  return this != internal_default_instance() && character_npc_ != NULL;
}
void GCGTavernNpcInfoNotify::clear_character_npc() {
  if (GetArenaNoVirtual() == NULL && character_npc_ != NULL) delete character_npc_;
  character_npc_ = NULL;
}
const ::proto::GCGTavernNpcInfo& GCGTavernNpcInfoNotify::character_npc() const {
  const ::proto::GCGTavernNpcInfo* p = character_npc_;
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfoNotify.character_npc)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGTavernNpcInfo*>(
      &::proto::_GCGTavernNpcInfo_default_instance_);
}
::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::mutable_character_npc() {
  
  if (character_npc_ == NULL) {
    character_npc_ = new ::proto::GCGTavernNpcInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGTavernNpcInfoNotify.character_npc)
  return character_npc_;
}
::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::release_character_npc() {
  // @@protoc_insertion_point(field_release:proto.GCGTavernNpcInfoNotify.character_npc)
  
  ::proto::GCGTavernNpcInfo* temp = character_npc_;
  character_npc_ = NULL;
  return temp;
}
void GCGTavernNpcInfoNotify::set_allocated_character_npc(::proto::GCGTavernNpcInfo* character_npc) {
  delete character_npc_;
  character_npc_ = character_npc;
  if (character_npc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGTavernNpcInfoNotify.character_npc)
}

// repeated .proto.GCGTavernNpcInfo const_npc_list = 15;
int GCGTavernNpcInfoNotify::const_npc_list_size() const {
  return const_npc_list_.size();
}
void GCGTavernNpcInfoNotify::clear_const_npc_list() {
  const_npc_list_.Clear();
}
const ::proto::GCGTavernNpcInfo& GCGTavernNpcInfoNotify::const_npc_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_.Get(index);
}
::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::mutable_const_npc_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_.Mutable(index);
}
::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::add_const_npc_list() {
  // @@protoc_insertion_point(field_add:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >*
GCGTavernNpcInfoNotify::mutable_const_npc_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return &const_npc_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >&
GCGTavernNpcInfoNotify::const_npc_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGStartChallengeReq::kLevelTypeFieldNumber;
const int GCGStartChallengeReq::kConfigIdFieldNumber;
const int GCGStartChallengeReq::kLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGStartChallengeReq::GCGStartChallengeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGStartChallengeReq)
}
GCGStartChallengeReq::GCGStartChallengeReq(const GCGStartChallengeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&config_id_, &from.config_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_id_) -
    reinterpret_cast<char*>(&config_id_)) + sizeof(level_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGStartChallengeReq)
}

void GCGStartChallengeReq::SharedCtor() {
  ::memset(&config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&config_id_)) + sizeof(level_id_));
  _cached_size_ = 0;
}

GCGStartChallengeReq::~GCGStartChallengeReq() {
  // @@protoc_insertion_point(destructor:proto.GCGStartChallengeReq)
  SharedDtor();
}

void GCGStartChallengeReq::SharedDtor() {
}

void GCGStartChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGStartChallengeReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGStartChallengeReq& GCGStartChallengeReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGStartChallengeReq* GCGStartChallengeReq::New(::google::protobuf::Arena* arena) const {
  GCGStartChallengeReq* n = new GCGStartChallengeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGStartChallengeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGStartChallengeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&config_id_)) + sizeof(level_id_));
  _internal_metadata_.Clear();
}

bool GCGStartChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGStartChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGLevelType level_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level_type(static_cast< ::proto::GCGLevelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGStartChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGStartChallengeReq)
  return false;
#undef DO_
}

void GCGStartChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGStartChallengeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGLevelType level_type = 5;
  if (this->level_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->level_type(), output);
  }

  // uint32 level_id = 12;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level_id(), output);
  }

  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->config_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGStartChallengeReq)
}

::google::protobuf::uint8* GCGStartChallengeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGStartChallengeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGLevelType level_type = 5;
  if (this->level_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->level_type(), target);
  }

  // uint32 level_id = 12;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level_id(), target);
  }

  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->config_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGStartChallengeReq)
  return target;
}

size_t GCGStartChallengeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGStartChallengeReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // .proto.GCGLevelType level_type = 5;
  if (this->level_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level_type());
  }

  // uint32 level_id = 12;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGStartChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGStartChallengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGStartChallengeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGStartChallengeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGStartChallengeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGStartChallengeReq)
    MergeFrom(*source);
  }
}

void GCGStartChallengeReq::MergeFrom(const GCGStartChallengeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGStartChallengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.level_type() != 0) {
    set_level_type(from.level_type());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
}

void GCGStartChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGStartChallengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGStartChallengeReq::CopyFrom(const GCGStartChallengeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGStartChallengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGStartChallengeReq::IsInitialized() const {
  return true;
}

void GCGStartChallengeReq::Swap(GCGStartChallengeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGStartChallengeReq::InternalSwap(GCGStartChallengeReq* other) {
  using std::swap;
  swap(config_id_, other->config_id_);
  swap(level_type_, other->level_type_);
  swap(level_id_, other->level_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGStartChallengeReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGStartChallengeReq

// .proto.GCGLevelType level_type = 5;
void GCGStartChallengeReq::clear_level_type() {
  level_type_ = 0;
}
::proto::GCGLevelType GCGStartChallengeReq::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeReq.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
void GCGStartChallengeReq::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeReq.level_type)
}

// uint32 config_id = 13;
void GCGStartChallengeReq::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeReq::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeReq.config_id)
  return config_id_;
}
void GCGStartChallengeReq::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeReq.config_id)
}

// uint32 level_id = 12;
void GCGStartChallengeReq::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeReq::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeReq.level_id)
  return level_id_;
}
void GCGStartChallengeReq::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeReq.level_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGStartChallengeRsp::kLevelTypeFieldNumber;
const int GCGStartChallengeRsp::kRetcodeFieldNumber;
const int GCGStartChallengeRsp::kConfigIdFieldNumber;
const int GCGStartChallengeRsp::kLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGStartChallengeRsp::GCGStartChallengeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGStartChallengeRsp)
}
GCGStartChallengeRsp::GCGStartChallengeRsp(const GCGStartChallengeRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_id_, &from.level_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&level_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGStartChallengeRsp)
}

void GCGStartChallengeRsp::SharedCtor() {
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GCGStartChallengeRsp::~GCGStartChallengeRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGStartChallengeRsp)
  SharedDtor();
}

void GCGStartChallengeRsp::SharedDtor() {
}

void GCGStartChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGStartChallengeRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGStartChallengeRsp& GCGStartChallengeRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGStartChallengeRsp* GCGStartChallengeRsp::New(::google::protobuf::Arena* arena) const {
  GCGStartChallengeRsp* n = new GCGStartChallengeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGStartChallengeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGStartChallengeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GCGStartChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGStartChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGLevelType level_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level_type(static_cast< ::proto::GCGLevelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGStartChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGStartChallengeRsp)
  return false;
#undef DO_
}

void GCGStartChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGStartChallengeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 1;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level_id(), output);
  }

  // uint32 config_id = 6;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->config_id(), output);
  }

  // .proto.GCGLevelType level_type = 12;
  if (this->level_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->level_type(), output);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGStartChallengeRsp)
}

::google::protobuf::uint8* GCGStartChallengeRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGStartChallengeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 1;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level_id(), target);
  }

  // uint32 config_id = 6;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->config_id(), target);
  }

  // .proto.GCGLevelType level_type = 12;
  if (this->level_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->level_type(), target);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGStartChallengeRsp)
  return target;
}

size_t GCGStartChallengeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGStartChallengeRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level_id = 1;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 config_id = 6;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // .proto.GCGLevelType level_type = 12;
  if (this->level_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level_type());
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGStartChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGStartChallengeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGStartChallengeRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGStartChallengeRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGStartChallengeRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGStartChallengeRsp)
    MergeFrom(*source);
  }
}

void GCGStartChallengeRsp::MergeFrom(const GCGStartChallengeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGStartChallengeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.level_type() != 0) {
    set_level_type(from.level_type());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GCGStartChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGStartChallengeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGStartChallengeRsp::CopyFrom(const GCGStartChallengeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGStartChallengeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGStartChallengeRsp::IsInitialized() const {
  return true;
}

void GCGStartChallengeRsp::Swap(GCGStartChallengeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGStartChallengeRsp::InternalSwap(GCGStartChallengeRsp* other) {
  using std::swap;
  swap(level_id_, other->level_id_);
  swap(config_id_, other->config_id_);
  swap(level_type_, other->level_type_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGStartChallengeRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGStartChallengeRsp

// .proto.GCGLevelType level_type = 12;
void GCGStartChallengeRsp::clear_level_type() {
  level_type_ = 0;
}
::proto::GCGLevelType GCGStartChallengeRsp::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
void GCGStartChallengeRsp::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.level_type)
}

// int32 retcode = 15;
void GCGStartChallengeRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGStartChallengeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.retcode)
  return retcode_;
}
void GCGStartChallengeRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.retcode)
}

// uint32 config_id = 6;
void GCGStartChallengeRsp::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeRsp::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.config_id)
  return config_id_;
}
void GCGStartChallengeRsp::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.config_id)
}

// uint32 level_id = 1;
void GCGStartChallengeRsp::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeRsp::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.level_id)
  return level_id_;
}
void GCGStartChallengeRsp::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.level_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGWeekChallengeInfo::kNpcIdFieldNumber;
const int GCGWeekChallengeInfo::kIsFinishedFieldNumber;
const int GCGWeekChallengeInfo::kUnlockTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGWeekChallengeInfo::GCGWeekChallengeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGWeekChallengeInfo)
}
GCGWeekChallengeInfo::GCGWeekChallengeInfo(const GCGWeekChallengeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unlock_time_, &from.unlock_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_finished_) -
    reinterpret_cast<char*>(&unlock_time_)) + sizeof(is_finished_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGWeekChallengeInfo)
}

void GCGWeekChallengeInfo::SharedCtor() {
  ::memset(&unlock_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&unlock_time_)) + sizeof(is_finished_));
  _cached_size_ = 0;
}

GCGWeekChallengeInfo::~GCGWeekChallengeInfo() {
  // @@protoc_insertion_point(destructor:proto.GCGWeekChallengeInfo)
  SharedDtor();
}

void GCGWeekChallengeInfo::SharedDtor() {
}

void GCGWeekChallengeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGWeekChallengeInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGWeekChallengeInfo& GCGWeekChallengeInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGWeekChallengeInfo* GCGWeekChallengeInfo::New(::google::protobuf::Arena* arena) const {
  GCGWeekChallengeInfo* n = new GCGWeekChallengeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGWeekChallengeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGWeekChallengeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unlock_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&unlock_time_)) + sizeof(is_finished_));
  _internal_metadata_.Clear();
}

bool GCGWeekChallengeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGWeekChallengeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 unlock_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 npc_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npc_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finished = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finished_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGWeekChallengeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGWeekChallengeInfo)
  return false;
#undef DO_
}

void GCGWeekChallengeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGWeekChallengeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 unlock_time = 1;
  if (this->unlock_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unlock_time(), output);
  }

  // uint32 npc_id = 4;
  if (this->npc_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npc_id(), output);
  }

  // bool is_finished = 7;
  if (this->is_finished() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_finished(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGWeekChallengeInfo)
}

::google::protobuf::uint8* GCGWeekChallengeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGWeekChallengeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 unlock_time = 1;
  if (this->unlock_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unlock_time(), target);
  }

  // uint32 npc_id = 4;
  if (this->npc_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npc_id(), target);
  }

  // bool is_finished = 7;
  if (this->is_finished() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_finished(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGWeekChallengeInfo)
  return target;
}

size_t GCGWeekChallengeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGWeekChallengeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 unlock_time = 1;
  if (this->unlock_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->unlock_time());
  }

  // uint32 npc_id = 4;
  if (this->npc_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->npc_id());
  }

  // bool is_finished = 7;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGWeekChallengeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGWeekChallengeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGWeekChallengeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGWeekChallengeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGWeekChallengeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGWeekChallengeInfo)
    MergeFrom(*source);
  }
}

void GCGWeekChallengeInfo::MergeFrom(const GCGWeekChallengeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGWeekChallengeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unlock_time() != 0) {
    set_unlock_time(from.unlock_time());
  }
  if (from.npc_id() != 0) {
    set_npc_id(from.npc_id());
  }
  if (from.is_finished() != 0) {
    set_is_finished(from.is_finished());
  }
}

void GCGWeekChallengeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGWeekChallengeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGWeekChallengeInfo::CopyFrom(const GCGWeekChallengeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGWeekChallengeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGWeekChallengeInfo::IsInitialized() const {
  return true;
}

void GCGWeekChallengeInfo::Swap(GCGWeekChallengeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGWeekChallengeInfo::InternalSwap(GCGWeekChallengeInfo* other) {
  using std::swap;
  swap(unlock_time_, other->unlock_time_);
  swap(npc_id_, other->npc_id_);
  swap(is_finished_, other->is_finished_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGWeekChallengeInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGWeekChallengeInfo

// uint32 npc_id = 4;
void GCGWeekChallengeInfo::clear_npc_id() {
  npc_id_ = 0u;
}
::google::protobuf::uint32 GCGWeekChallengeInfo::npc_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfo.npc_id)
  return npc_id_;
}
void GCGWeekChallengeInfo::set_npc_id(::google::protobuf::uint32 value) {
  
  npc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfo.npc_id)
}

// bool is_finished = 7;
void GCGWeekChallengeInfo::clear_is_finished() {
  is_finished_ = false;
}
bool GCGWeekChallengeInfo::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfo.is_finished)
  return is_finished_;
}
void GCGWeekChallengeInfo::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfo.is_finished)
}

// uint32 unlock_time = 1;
void GCGWeekChallengeInfo::clear_unlock_time() {
  unlock_time_ = 0u;
}
::google::protobuf::uint32 GCGWeekChallengeInfo::unlock_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfo.unlock_time)
  return unlock_time_;
}
void GCGWeekChallengeInfo::set_unlock_time(::google::protobuf::uint32 value) {
  
  unlock_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfo.unlock_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGWeekChallengeInfoNotify::kChallengeInfoListFieldNumber;
const int GCGWeekChallengeInfoNotify::kNextRefreshTimeFieldNumber;
const int GCGWeekChallengeInfoNotify::kIsNotifyNpcChangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGWeekChallengeInfoNotify::GCGWeekChallengeInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGWeekChallengeInfoNotify)
}
GCGWeekChallengeInfoNotify::GCGWeekChallengeInfoNotify(const GCGWeekChallengeInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      challenge_info_list_(from.challenge_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&next_refresh_time_, &from.next_refresh_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_notify_npc_change_) -
    reinterpret_cast<char*>(&next_refresh_time_)) + sizeof(is_notify_npc_change_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGWeekChallengeInfoNotify)
}

void GCGWeekChallengeInfoNotify::SharedCtor() {
  ::memset(&next_refresh_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_notify_npc_change_) -
      reinterpret_cast<char*>(&next_refresh_time_)) + sizeof(is_notify_npc_change_));
  _cached_size_ = 0;
}

GCGWeekChallengeInfoNotify::~GCGWeekChallengeInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGWeekChallengeInfoNotify)
  SharedDtor();
}

void GCGWeekChallengeInfoNotify::SharedDtor() {
}

void GCGWeekChallengeInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGWeekChallengeInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGWeekChallengeInfoNotify& GCGWeekChallengeInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGWeekChallengeInfoNotify* GCGWeekChallengeInfoNotify::New(::google::protobuf::Arena* arena) const {
  GCGWeekChallengeInfoNotify* n = new GCGWeekChallengeInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGWeekChallengeInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGWeekChallengeInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_info_list_.Clear();
  ::memset(&next_refresh_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_notify_npc_change_) -
      reinterpret_cast<char*>(&next_refresh_time_)) + sizeof(is_notify_npc_change_));
  _internal_metadata_.Clear();
}

bool GCGWeekChallengeInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGWeekChallengeInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 next_refresh_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_notify_npc_change = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_notify_npc_change_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGWeekChallengeInfo challenge_info_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGWeekChallengeInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGWeekChallengeInfoNotify)
  return false;
#undef DO_
}

void GCGWeekChallengeInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGWeekChallengeInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 next_refresh_time = 7;
  if (this->next_refresh_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->next_refresh_time(), output);
  }

  // bool is_notify_npc_change = 9;
  if (this->is_notify_npc_change() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_notify_npc_change(), output);
  }

  // repeated .proto.GCGWeekChallengeInfo challenge_info_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->challenge_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGWeekChallengeInfoNotify)
}

::google::protobuf::uint8* GCGWeekChallengeInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGWeekChallengeInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 next_refresh_time = 7;
  if (this->next_refresh_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->next_refresh_time(), target);
  }

  // bool is_notify_npc_change = 9;
  if (this->is_notify_npc_change() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_notify_npc_change(), target);
  }

  // repeated .proto.GCGWeekChallengeInfo challenge_info_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->challenge_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGWeekChallengeInfoNotify)
  return target;
}

size_t GCGWeekChallengeInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGWeekChallengeInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGWeekChallengeInfo challenge_info_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->challenge_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge_info_list(static_cast<int>(i)));
    }
  }

  // uint32 next_refresh_time = 7;
  if (this->next_refresh_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->next_refresh_time());
  }

  // bool is_notify_npc_change = 9;
  if (this->is_notify_npc_change() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGWeekChallengeInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGWeekChallengeInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGWeekChallengeInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGWeekChallengeInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGWeekChallengeInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGWeekChallengeInfoNotify)
    MergeFrom(*source);
  }
}

void GCGWeekChallengeInfoNotify::MergeFrom(const GCGWeekChallengeInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGWeekChallengeInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  challenge_info_list_.MergeFrom(from.challenge_info_list_);
  if (from.next_refresh_time() != 0) {
    set_next_refresh_time(from.next_refresh_time());
  }
  if (from.is_notify_npc_change() != 0) {
    set_is_notify_npc_change(from.is_notify_npc_change());
  }
}

void GCGWeekChallengeInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGWeekChallengeInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGWeekChallengeInfoNotify::CopyFrom(const GCGWeekChallengeInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGWeekChallengeInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGWeekChallengeInfoNotify::IsInitialized() const {
  return true;
}

void GCGWeekChallengeInfoNotify::Swap(GCGWeekChallengeInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGWeekChallengeInfoNotify::InternalSwap(GCGWeekChallengeInfoNotify* other) {
  using std::swap;
  challenge_info_list_.InternalSwap(&other->challenge_info_list_);
  swap(next_refresh_time_, other->next_refresh_time_);
  swap(is_notify_npc_change_, other->is_notify_npc_change_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGWeekChallengeInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGWeekChallengeInfoNotify

// repeated .proto.GCGWeekChallengeInfo challenge_info_list = 15;
int GCGWeekChallengeInfoNotify::challenge_info_list_size() const {
  return challenge_info_list_.size();
}
void GCGWeekChallengeInfoNotify::clear_challenge_info_list() {
  challenge_info_list_.Clear();
}
const ::proto::GCGWeekChallengeInfo& GCGWeekChallengeInfoNotify::challenge_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_.Get(index);
}
::proto::GCGWeekChallengeInfo* GCGWeekChallengeInfoNotify::mutable_challenge_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_.Mutable(index);
}
::proto::GCGWeekChallengeInfo* GCGWeekChallengeInfoNotify::add_challenge_info_list() {
  // @@protoc_insertion_point(field_add:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGWeekChallengeInfo >*
GCGWeekChallengeInfoNotify::mutable_challenge_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return &challenge_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGWeekChallengeInfo >&
GCGWeekChallengeInfoNotify::challenge_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_;
}

// uint32 next_refresh_time = 7;
void GCGWeekChallengeInfoNotify::clear_next_refresh_time() {
  next_refresh_time_ = 0u;
}
::google::protobuf::uint32 GCGWeekChallengeInfoNotify::next_refresh_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfoNotify.next_refresh_time)
  return next_refresh_time_;
}
void GCGWeekChallengeInfoNotify::set_next_refresh_time(::google::protobuf::uint32 value) {
  
  next_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfoNotify.next_refresh_time)
}

// bool is_notify_npc_change = 9;
void GCGWeekChallengeInfoNotify::clear_is_notify_npc_change() {
  is_notify_npc_change_ = false;
}
bool GCGWeekChallengeInfoNotify::is_notify_npc_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfoNotify.is_notify_npc_change)
  return is_notify_npc_change_;
}
void GCGWeekChallengeInfoNotify::set_is_notify_npc_change(bool value) {
  
  is_notify_npc_change_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfoNotify.is_notify_npc_change)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGStartChallengeByCheckRewardReq::kLevelIdFieldNumber;
const int GCGStartChallengeByCheckRewardReq::kConfigIdFieldNumber;
const int GCGStartChallengeByCheckRewardReq::kLevelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGStartChallengeByCheckRewardReq::GCGStartChallengeByCheckRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGStartChallengeByCheckRewardReq)
}
GCGStartChallengeByCheckRewardReq::GCGStartChallengeByCheckRewardReq(const GCGStartChallengeByCheckRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&config_id_, &from.config_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_id_) -
    reinterpret_cast<char*>(&config_id_)) + sizeof(level_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGStartChallengeByCheckRewardReq)
}

void GCGStartChallengeByCheckRewardReq::SharedCtor() {
  ::memset(&config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&config_id_)) + sizeof(level_id_));
  _cached_size_ = 0;
}

GCGStartChallengeByCheckRewardReq::~GCGStartChallengeByCheckRewardReq() {
  // @@protoc_insertion_point(destructor:proto.GCGStartChallengeByCheckRewardReq)
  SharedDtor();
}

void GCGStartChallengeByCheckRewardReq::SharedDtor() {
}

void GCGStartChallengeByCheckRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGStartChallengeByCheckRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGStartChallengeByCheckRewardReq& GCGStartChallengeByCheckRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGStartChallengeByCheckRewardReq* GCGStartChallengeByCheckRewardReq::New(::google::protobuf::Arena* arena) const {
  GCGStartChallengeByCheckRewardReq* n = new GCGStartChallengeByCheckRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGStartChallengeByCheckRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGStartChallengeByCheckRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&config_id_)) + sizeof(level_id_));
  _internal_metadata_.Clear();
}

bool GCGStartChallengeByCheckRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGStartChallengeByCheckRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGLevelType level_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level_type(static_cast< ::proto::GCGLevelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGStartChallengeByCheckRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGStartChallengeByCheckRewardReq)
  return false;
#undef DO_
}

void GCGStartChallengeByCheckRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGStartChallengeByCheckRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGLevelType level_type = 5;
  if (this->level_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->level_type(), output);
  }

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level_id(), output);
  }

  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->config_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGStartChallengeByCheckRewardReq)
}

::google::protobuf::uint8* GCGStartChallengeByCheckRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGStartChallengeByCheckRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGLevelType level_type = 5;
  if (this->level_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->level_type(), target);
  }

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level_id(), target);
  }

  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->config_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGStartChallengeByCheckRewardReq)
  return target;
}

size_t GCGStartChallengeByCheckRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGStartChallengeByCheckRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 config_id = 13;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // .proto.GCGLevelType level_type = 5;
  if (this->level_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level_type());
  }

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGStartChallengeByCheckRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGStartChallengeByCheckRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGStartChallengeByCheckRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGStartChallengeByCheckRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGStartChallengeByCheckRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGStartChallengeByCheckRewardReq)
    MergeFrom(*source);
  }
}

void GCGStartChallengeByCheckRewardReq::MergeFrom(const GCGStartChallengeByCheckRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGStartChallengeByCheckRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.level_type() != 0) {
    set_level_type(from.level_type());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
}

void GCGStartChallengeByCheckRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGStartChallengeByCheckRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGStartChallengeByCheckRewardReq::CopyFrom(const GCGStartChallengeByCheckRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGStartChallengeByCheckRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGStartChallengeByCheckRewardReq::IsInitialized() const {
  return true;
}

void GCGStartChallengeByCheckRewardReq::Swap(GCGStartChallengeByCheckRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGStartChallengeByCheckRewardReq::InternalSwap(GCGStartChallengeByCheckRewardReq* other) {
  using std::swap;
  swap(config_id_, other->config_id_);
  swap(level_type_, other->level_type_);
  swap(level_id_, other->level_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGStartChallengeByCheckRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGStartChallengeByCheckRewardReq

// uint32 level_id = 9;
void GCGStartChallengeByCheckRewardReq::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeByCheckRewardReq::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardReq.level_id)
  return level_id_;
}
void GCGStartChallengeByCheckRewardReq::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardReq.level_id)
}

// uint32 config_id = 13;
void GCGStartChallengeByCheckRewardReq::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeByCheckRewardReq::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardReq.config_id)
  return config_id_;
}
void GCGStartChallengeByCheckRewardReq::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardReq.config_id)
}

// .proto.GCGLevelType level_type = 5;
void GCGStartChallengeByCheckRewardReq::clear_level_type() {
  level_type_ = 0;
}
::proto::GCGLevelType GCGStartChallengeByCheckRewardReq::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardReq.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
void GCGStartChallengeByCheckRewardReq::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardReq.level_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGStartChallengeByCheckRewardRsp::kLevelTypeFieldNumber;
const int GCGStartChallengeByCheckRewardRsp::kLevelIdFieldNumber;
const int GCGStartChallengeByCheckRewardRsp::kRetcodeFieldNumber;
const int GCGStartChallengeByCheckRewardRsp::kExceededItemListFieldNumber;
const int GCGStartChallengeByCheckRewardRsp::kConfigIdFieldNumber;
const int GCGStartChallengeByCheckRewardRsp::kExceededItemTypeListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGStartChallengeByCheckRewardRsp::GCGStartChallengeByCheckRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGStartChallengeByCheckRewardRsp)
}
GCGStartChallengeByCheckRewardRsp::GCGStartChallengeByCheckRewardRsp(const GCGStartChallengeByCheckRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      exceeded_item_list_(from.exceeded_item_list_),
      exceeded_item_type_list_(from.exceeded_item_type_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_id_, &from.level_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&level_id_)) + sizeof(level_type_));
  // @@protoc_insertion_point(copy_constructor:proto.GCGStartChallengeByCheckRewardRsp)
}

void GCGStartChallengeByCheckRewardRsp::SharedCtor() {
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_type_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(level_type_));
  _cached_size_ = 0;
}

GCGStartChallengeByCheckRewardRsp::~GCGStartChallengeByCheckRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.GCGStartChallengeByCheckRewardRsp)
  SharedDtor();
}

void GCGStartChallengeByCheckRewardRsp::SharedDtor() {
}

void GCGStartChallengeByCheckRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGStartChallengeByCheckRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGStartChallengeByCheckRewardRsp& GCGStartChallengeByCheckRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGStartChallengeByCheckRewardRsp* GCGStartChallengeByCheckRewardRsp::New(::google::protobuf::Arena* arena) const {
  GCGStartChallengeByCheckRewardRsp* n = new GCGStartChallengeByCheckRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGStartChallengeByCheckRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGStartChallengeByCheckRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exceeded_item_list_.Clear();
  exceeded_item_type_list_.Clear();
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_type_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(level_type_));
  _internal_metadata_.Clear();
}

bool GCGStartChallengeByCheckRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGStartChallengeByCheckRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 exceeded_item_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exceeded_item_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_exceeded_item_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 config_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GCGLevelType level_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_level_type(static_cast< ::proto::GCGLevelType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 exceeded_item_type_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_exceeded_item_type_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_exceeded_item_type_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGStartChallengeByCheckRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGStartChallengeByCheckRewardRsp)
  return false;
#undef DO_
}

void GCGStartChallengeByCheckRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGStartChallengeByCheckRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 exceeded_item_list = 1;
  if (this->exceeded_item_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _exceeded_item_list_cached_byte_size_));
  }
  for (int i = 0, n = this->exceeded_item_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->exceeded_item_list(i), output);
  }

  // uint32 level_id = 2;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level_id(), output);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // uint32 config_id = 10;
  if (this->config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->config_id(), output);
  }

  // .proto.GCGLevelType level_type = 11;
  if (this->level_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->level_type(), output);
  }

  // repeated uint32 exceeded_item_type_list = 14;
  if (this->exceeded_item_type_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _exceeded_item_type_list_cached_byte_size_));
  }
  for (int i = 0, n = this->exceeded_item_type_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->exceeded_item_type_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGStartChallengeByCheckRewardRsp)
}

::google::protobuf::uint8* GCGStartChallengeByCheckRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGStartChallengeByCheckRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 exceeded_item_list = 1;
  if (this->exceeded_item_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _exceeded_item_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->exceeded_item_list_, target);
  }

  // uint32 level_id = 2;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level_id(), target);
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // uint32 config_id = 10;
  if (this->config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->config_id(), target);
  }

  // .proto.GCGLevelType level_type = 11;
  if (this->level_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->level_type(), target);
  }

  // repeated uint32 exceeded_item_type_list = 14;
  if (this->exceeded_item_type_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _exceeded_item_type_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->exceeded_item_type_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGStartChallengeByCheckRewardRsp)
  return target;
}

size_t GCGStartChallengeByCheckRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGStartChallengeByCheckRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 exceeded_item_list = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->exceeded_item_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exceeded_item_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 exceeded_item_type_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->exceeded_item_type_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _exceeded_item_type_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 level_id = 2;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 config_id = 10;
  if (this->config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->config_id());
  }

  // .proto.GCGLevelType level_type = 11;
  if (this->level_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGStartChallengeByCheckRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGStartChallengeByCheckRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGStartChallengeByCheckRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGStartChallengeByCheckRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGStartChallengeByCheckRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGStartChallengeByCheckRewardRsp)
    MergeFrom(*source);
  }
}

void GCGStartChallengeByCheckRewardRsp::MergeFrom(const GCGStartChallengeByCheckRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGStartChallengeByCheckRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exceeded_item_list_.MergeFrom(from.exceeded_item_list_);
  exceeded_item_type_list_.MergeFrom(from.exceeded_item_type_list_);
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.config_id() != 0) {
    set_config_id(from.config_id());
  }
  if (from.level_type() != 0) {
    set_level_type(from.level_type());
  }
}

void GCGStartChallengeByCheckRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGStartChallengeByCheckRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGStartChallengeByCheckRewardRsp::CopyFrom(const GCGStartChallengeByCheckRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGStartChallengeByCheckRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGStartChallengeByCheckRewardRsp::IsInitialized() const {
  return true;
}

void GCGStartChallengeByCheckRewardRsp::Swap(GCGStartChallengeByCheckRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGStartChallengeByCheckRewardRsp::InternalSwap(GCGStartChallengeByCheckRewardRsp* other) {
  using std::swap;
  exceeded_item_list_.InternalSwap(&other->exceeded_item_list_);
  exceeded_item_type_list_.InternalSwap(&other->exceeded_item_type_list_);
  swap(level_id_, other->level_id_);
  swap(retcode_, other->retcode_);
  swap(config_id_, other->config_id_);
  swap(level_type_, other->level_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGStartChallengeByCheckRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGStartChallengeByCheckRewardRsp

// .proto.GCGLevelType level_type = 11;
void GCGStartChallengeByCheckRewardRsp::clear_level_type() {
  level_type_ = 0;
}
::proto::GCGLevelType GCGStartChallengeByCheckRewardRsp::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
void GCGStartChallengeByCheckRewardRsp::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.level_type)
}

// uint32 level_id = 2;
void GCGStartChallengeByCheckRewardRsp::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.level_id)
  return level_id_;
}
void GCGStartChallengeByCheckRewardRsp::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.level_id)
}

// int32 retcode = 4;
void GCGStartChallengeByCheckRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GCGStartChallengeByCheckRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.retcode)
  return retcode_;
}
void GCGStartChallengeByCheckRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.retcode)
}

// repeated uint32 exceeded_item_list = 1;
int GCGStartChallengeByCheckRewardRsp::exceeded_item_list_size() const {
  return exceeded_item_list_.size();
}
void GCGStartChallengeByCheckRewardRsp::clear_exceeded_item_list() {
  exceeded_item_list_.Clear();
}
::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::exceeded_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
  return exceeded_item_list_.Get(index);
}
void GCGStartChallengeByCheckRewardRsp::set_exceeded_item_list(int index, ::google::protobuf::uint32 value) {
  exceeded_item_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
}
void GCGStartChallengeByCheckRewardRsp::add_exceeded_item_list(::google::protobuf::uint32 value) {
  exceeded_item_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGStartChallengeByCheckRewardRsp::exceeded_item_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
  return exceeded_item_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGStartChallengeByCheckRewardRsp::mutable_exceeded_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
  return &exceeded_item_list_;
}

// uint32 config_id = 10;
void GCGStartChallengeByCheckRewardRsp::clear_config_id() {
  config_id_ = 0u;
}
::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.config_id)
  return config_id_;
}
void GCGStartChallengeByCheckRewardRsp::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.config_id)
}

// repeated uint32 exceeded_item_type_list = 14;
int GCGStartChallengeByCheckRewardRsp::exceeded_item_type_list_size() const {
  return exceeded_item_type_list_.size();
}
void GCGStartChallengeByCheckRewardRsp::clear_exceeded_item_type_list() {
  exceeded_item_type_list_.Clear();
}
::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::exceeded_item_type_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
  return exceeded_item_type_list_.Get(index);
}
void GCGStartChallengeByCheckRewardRsp::set_exceeded_item_type_list(int index, ::google::protobuf::uint32 value) {
  exceeded_item_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
}
void GCGStartChallengeByCheckRewardRsp::add_exceeded_item_type_list(::google::protobuf::uint32 value) {
  exceeded_item_type_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGStartChallengeByCheckRewardRsp::exceeded_item_type_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
  return exceeded_item_type_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGStartChallengeByCheckRewardRsp::mutable_exceeded_item_type_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
  return &exceeded_item_type_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGLevelData::kFinishedChallengeIdListFieldNumber;
const int GCGLevelData::kLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGLevelData::GCGLevelData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGLevelData)
}
GCGLevelData::GCGLevelData(const GCGLevelData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      finished_challenge_id_list_(from.finished_challenge_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_id_ = from.level_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGLevelData)
}

void GCGLevelData::SharedCtor() {
  level_id_ = 0u;
  _cached_size_ = 0;
}

GCGLevelData::~GCGLevelData() {
  // @@protoc_insertion_point(destructor:proto.GCGLevelData)
  SharedDtor();
}

void GCGLevelData::SharedDtor() {
}

void GCGLevelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGLevelData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGLevelData& GCGLevelData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGLevelData* GCGLevelData::New(::google::protobuf::Arena* arena) const {
  GCGLevelData* n = new GCGLevelData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGLevelData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGLevelData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finished_challenge_id_list_.Clear();
  level_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGLevelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGLevelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 finished_challenge_id_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finished_challenge_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_finished_challenge_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGLevelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGLevelData)
  return false;
#undef DO_
}

void GCGLevelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGLevelData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level_id(), output);
  }

  // repeated uint32 finished_challenge_id_list = 10;
  if (this->finished_challenge_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _finished_challenge_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->finished_challenge_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->finished_challenge_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGLevelData)
}

::google::protobuf::uint8* GCGLevelData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGLevelData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level_id(), target);
  }

  // repeated uint32 finished_challenge_id_list = 10;
  if (this->finished_challenge_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _finished_challenge_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->finished_challenge_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGLevelData)
  return target;
}

size_t GCGLevelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGLevelData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 finished_challenge_id_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->finished_challenge_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _finished_challenge_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGLevelData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGLevelData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGLevelData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGLevelData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGLevelData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGLevelData)
    MergeFrom(*source);
  }
}

void GCGLevelData::MergeFrom(const GCGLevelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGLevelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  finished_challenge_id_list_.MergeFrom(from.finished_challenge_id_list_);
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
}

void GCGLevelData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGLevelData::CopyFrom(const GCGLevelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGLevelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGLevelData::IsInitialized() const {
  return true;
}

void GCGLevelData::Swap(GCGLevelData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGLevelData::InternalSwap(GCGLevelData* other) {
  using std::swap;
  finished_challenge_id_list_.InternalSwap(&other->finished_challenge_id_list_);
  swap(level_id_, other->level_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGLevelData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGLevelData

// repeated uint32 finished_challenge_id_list = 10;
int GCGLevelData::finished_challenge_id_list_size() const {
  return finished_challenge_id_list_.size();
}
void GCGLevelData::clear_finished_challenge_id_list() {
  finished_challenge_id_list_.Clear();
}
::google::protobuf::uint32 GCGLevelData::finished_challenge_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelData.finished_challenge_id_list)
  return finished_challenge_id_list_.Get(index);
}
void GCGLevelData::set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelData.finished_challenge_id_list)
}
void GCGLevelData::add_finished_challenge_id_list(::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelData.finished_challenge_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelData::finished_challenge_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelData.finished_challenge_id_list)
  return finished_challenge_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelData::mutable_finished_challenge_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelData.finished_challenge_id_list)
  return &finished_challenge_id_list_;
}

// uint32 level_id = 9;
void GCGLevelData::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGLevelData::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelData.level_id)
  return level_id_;
}
void GCGLevelData::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLevelData.level_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGBossChallengeData::kIdFieldNumber;
const int GCGBossChallengeData::kUnlockLevelIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGBossChallengeData::GCGBossChallengeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGBossChallengeData)
}
GCGBossChallengeData::GCGBossChallengeData(const GCGBossChallengeData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      unlock_level_id_list_(from.unlock_level_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGBossChallengeData)
}

void GCGBossChallengeData::SharedCtor() {
  id_ = 0u;
  _cached_size_ = 0;
}

GCGBossChallengeData::~GCGBossChallengeData() {
  // @@protoc_insertion_point(destructor:proto.GCGBossChallengeData)
  SharedDtor();
}

void GCGBossChallengeData::SharedDtor() {
}

void GCGBossChallengeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGBossChallengeData::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGBossChallengeData& GCGBossChallengeData::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGBossChallengeData* GCGBossChallengeData::New(::google::protobuf::Arena* arena) const {
  GCGBossChallengeData* n = new GCGBossChallengeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGBossChallengeData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGBossChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlock_level_id_list_.Clear();
  id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGBossChallengeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGBossChallengeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unlock_level_id_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_level_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_unlock_level_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGBossChallengeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGBossChallengeData)
  return false;
#undef DO_
}

void GCGBossChallengeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGBossChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 9;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->id(), output);
  }

  // repeated uint32 unlock_level_id_list = 14;
  if (this->unlock_level_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_level_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_level_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_level_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGBossChallengeData)
}

::google::protobuf::uint8* GCGBossChallengeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGBossChallengeData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 9;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->id(), target);
  }

  // repeated uint32 unlock_level_id_list = 14;
  if (this->unlock_level_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_level_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_level_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGBossChallengeData)
  return target;
}

size_t GCGBossChallengeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGBossChallengeData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 unlock_level_id_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_level_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_level_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 id = 9;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGBossChallengeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGBossChallengeData)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGBossChallengeData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGBossChallengeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGBossChallengeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGBossChallengeData)
    MergeFrom(*source);
  }
}

void GCGBossChallengeData::MergeFrom(const GCGBossChallengeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGBossChallengeData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlock_level_id_list_.MergeFrom(from.unlock_level_id_list_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void GCGBossChallengeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGBossChallengeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGBossChallengeData::CopyFrom(const GCGBossChallengeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGBossChallengeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGBossChallengeData::IsInitialized() const {
  return true;
}

void GCGBossChallengeData::Swap(GCGBossChallengeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGBossChallengeData::InternalSwap(GCGBossChallengeData* other) {
  using std::swap;
  unlock_level_id_list_.InternalSwap(&other->unlock_level_id_list_);
  swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGBossChallengeData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGBossChallengeData

// uint32 id = 9;
void GCGBossChallengeData::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 GCGBossChallengeData::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGBossChallengeData.id)
  return id_;
}
void GCGBossChallengeData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBossChallengeData.id)
}

// repeated uint32 unlock_level_id_list = 14;
int GCGBossChallengeData::unlock_level_id_list_size() const {
  return unlock_level_id_list_.size();
}
void GCGBossChallengeData::clear_unlock_level_id_list() {
  unlock_level_id_list_.Clear();
}
::google::protobuf::uint32 GCGBossChallengeData::unlock_level_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGBossChallengeData.unlock_level_id_list)
  return unlock_level_id_list_.Get(index);
}
void GCGBossChallengeData::set_unlock_level_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_level_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGBossChallengeData.unlock_level_id_list)
}
void GCGBossChallengeData::add_unlock_level_id_list(::google::protobuf::uint32 value) {
  unlock_level_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGBossChallengeData.unlock_level_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGBossChallengeData::unlock_level_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGBossChallengeData.unlock_level_id_list)
  return unlock_level_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGBossChallengeData::mutable_unlock_level_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGBossChallengeData.unlock_level_id_list)
  return &unlock_level_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGLevelChallengeNotify::kUnlockBossChallengeListFieldNumber;
const int GCGLevelChallengeNotify::kUnlockWorldChallengeListFieldNumber;
const int GCGLevelChallengeNotify::kLevelListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGLevelChallengeNotify::GCGLevelChallengeNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGLevelChallengeNotify)
}
GCGLevelChallengeNotify::GCGLevelChallengeNotify(const GCGLevelChallengeNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      unlock_boss_challenge_list_(from.unlock_boss_challenge_list_),
      unlock_world_challenge_list_(from.unlock_world_challenge_list_),
      level_list_(from.level_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGLevelChallengeNotify)
}

void GCGLevelChallengeNotify::SharedCtor() {
  _cached_size_ = 0;
}

GCGLevelChallengeNotify::~GCGLevelChallengeNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGLevelChallengeNotify)
  SharedDtor();
}

void GCGLevelChallengeNotify::SharedDtor() {
}

void GCGLevelChallengeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGLevelChallengeNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGLevelChallengeNotify& GCGLevelChallengeNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGLevelChallengeNotify* GCGLevelChallengeNotify::New(::google::protobuf::Arena* arena) const {
  GCGLevelChallengeNotify* n = new GCGLevelChallengeNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGLevelChallengeNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGLevelChallengeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlock_boss_challenge_list_.Clear();
  unlock_world_challenge_list_.Clear();
  level_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGLevelChallengeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGLevelChallengeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.GCGBossChallengeData unlock_boss_challenge_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unlock_boss_challenge_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 unlock_world_challenge_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_world_challenge_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_unlock_world_challenge_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.GCGLevelData level_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGLevelChallengeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGLevelChallengeNotify)
  return false;
#undef DO_
}

void GCGLevelChallengeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGLevelChallengeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGBossChallengeData unlock_boss_challenge_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unlock_boss_challenge_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unlock_boss_challenge_list(static_cast<int>(i)), output);
  }

  // repeated uint32 unlock_world_challenge_list = 8;
  if (this->unlock_world_challenge_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_world_challenge_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_world_challenge_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_world_challenge_list(i), output);
  }

  // repeated .proto.GCGLevelData level_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->level_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->level_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGLevelChallengeNotify)
}

::google::protobuf::uint8* GCGLevelChallengeNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGLevelChallengeNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.GCGBossChallengeData unlock_boss_challenge_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->unlock_boss_challenge_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->unlock_boss_challenge_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated uint32 unlock_world_challenge_list = 8;
  if (this->unlock_world_challenge_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_world_challenge_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_world_challenge_list_, target);
  }

  // repeated .proto.GCGLevelData level_list = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->level_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->level_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGLevelChallengeNotify)
  return target;
}

size_t GCGLevelChallengeNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGLevelChallengeNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.GCGBossChallengeData unlock_boss_challenge_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->unlock_boss_challenge_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlock_boss_challenge_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 unlock_world_challenge_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_world_challenge_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_world_challenge_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto.GCGLevelData level_list = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->level_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGLevelChallengeNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGLevelChallengeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGLevelChallengeNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGLevelChallengeNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGLevelChallengeNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGLevelChallengeNotify)
    MergeFrom(*source);
  }
}

void GCGLevelChallengeNotify::MergeFrom(const GCGLevelChallengeNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGLevelChallengeNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlock_boss_challenge_list_.MergeFrom(from.unlock_boss_challenge_list_);
  unlock_world_challenge_list_.MergeFrom(from.unlock_world_challenge_list_);
  level_list_.MergeFrom(from.level_list_);
}

void GCGLevelChallengeNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGLevelChallengeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGLevelChallengeNotify::CopyFrom(const GCGLevelChallengeNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGLevelChallengeNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGLevelChallengeNotify::IsInitialized() const {
  return true;
}

void GCGLevelChallengeNotify::Swap(GCGLevelChallengeNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGLevelChallengeNotify::InternalSwap(GCGLevelChallengeNotify* other) {
  using std::swap;
  unlock_boss_challenge_list_.InternalSwap(&other->unlock_boss_challenge_list_);
  unlock_world_challenge_list_.InternalSwap(&other->unlock_world_challenge_list_);
  level_list_.InternalSwap(&other->level_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGLevelChallengeNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGLevelChallengeNotify

// repeated .proto.GCGBossChallengeData unlock_boss_challenge_list = 3;
int GCGLevelChallengeNotify::unlock_boss_challenge_list_size() const {
  return unlock_boss_challenge_list_.size();
}
void GCGLevelChallengeNotify::clear_unlock_boss_challenge_list() {
  unlock_boss_challenge_list_.Clear();
}
const ::proto::GCGBossChallengeData& GCGLevelChallengeNotify::unlock_boss_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_.Get(index);
}
::proto::GCGBossChallengeData* GCGLevelChallengeNotify::mutable_unlock_boss_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_.Mutable(index);
}
::proto::GCGBossChallengeData* GCGLevelChallengeNotify::add_unlock_boss_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGBossChallengeData >*
GCGLevelChallengeNotify::mutable_unlock_boss_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return &unlock_boss_challenge_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGBossChallengeData >&
GCGLevelChallengeNotify::unlock_boss_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_;
}

// repeated uint32 unlock_world_challenge_list = 8;
int GCGLevelChallengeNotify::unlock_world_challenge_list_size() const {
  return unlock_world_challenge_list_.size();
}
void GCGLevelChallengeNotify::clear_unlock_world_challenge_list() {
  unlock_world_challenge_list_.Clear();
}
::google::protobuf::uint32 GCGLevelChallengeNotify::unlock_world_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
  return unlock_world_challenge_list_.Get(index);
}
void GCGLevelChallengeNotify::set_unlock_world_challenge_list(int index, ::google::protobuf::uint32 value) {
  unlock_world_challenge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
}
void GCGLevelChallengeNotify::add_unlock_world_challenge_list(::google::protobuf::uint32 value) {
  unlock_world_challenge_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelChallengeNotify::unlock_world_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
  return unlock_world_challenge_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelChallengeNotify::mutable_unlock_world_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
  return &unlock_world_challenge_list_;
}

// repeated .proto.GCGLevelData level_list = 10;
int GCGLevelChallengeNotify::level_list_size() const {
  return level_list_.size();
}
void GCGLevelChallengeNotify::clear_level_list() {
  level_list_.Clear();
}
const ::proto::GCGLevelData& GCGLevelChallengeNotify::level_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeNotify.level_list)
  return level_list_.Get(index);
}
::proto::GCGLevelData* GCGLevelChallengeNotify::mutable_level_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGLevelChallengeNotify.level_list)
  return level_list_.Mutable(index);
}
::proto::GCGLevelData* GCGLevelChallengeNotify::add_level_list() {
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeNotify.level_list)
  return level_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::GCGLevelData >*
GCGLevelChallengeNotify::mutable_level_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeNotify.level_list)
  return &level_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::GCGLevelData >&
GCGLevelChallengeNotify::level_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeNotify.level_list)
  return level_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGLevelChallengeFinishNotify::kFinishedChallengeIdListFieldNumber;
const int GCGLevelChallengeFinishNotify::kLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGLevelChallengeFinishNotify::GCGLevelChallengeFinishNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGLevelChallengeFinishNotify)
}
GCGLevelChallengeFinishNotify::GCGLevelChallengeFinishNotify(const GCGLevelChallengeFinishNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      finished_challenge_id_list_(from.finished_challenge_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_id_ = from.level_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GCGLevelChallengeFinishNotify)
}

void GCGLevelChallengeFinishNotify::SharedCtor() {
  level_id_ = 0u;
  _cached_size_ = 0;
}

GCGLevelChallengeFinishNotify::~GCGLevelChallengeFinishNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGLevelChallengeFinishNotify)
  SharedDtor();
}

void GCGLevelChallengeFinishNotify::SharedDtor() {
}

void GCGLevelChallengeFinishNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGLevelChallengeFinishNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGLevelChallengeFinishNotify& GCGLevelChallengeFinishNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGLevelChallengeFinishNotify* GCGLevelChallengeFinishNotify::New(::google::protobuf::Arena* arena) const {
  GCGLevelChallengeFinishNotify* n = new GCGLevelChallengeFinishNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGLevelChallengeFinishNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGLevelChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finished_challenge_id_list_.Clear();
  level_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GCGLevelChallengeFinishNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGLevelChallengeFinishNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 finished_challenge_id_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finished_challenge_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_finished_challenge_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGLevelChallengeFinishNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGLevelChallengeFinishNotify)
  return false;
#undef DO_
}

void GCGLevelChallengeFinishNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGLevelChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 finished_challenge_id_list = 10;
  if (this->finished_challenge_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _finished_challenge_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->finished_challenge_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->finished_challenge_id_list(i), output);
  }

  // uint32 level_id = 15;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGLevelChallengeFinishNotify)
}

::google::protobuf::uint8* GCGLevelChallengeFinishNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGLevelChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 finished_challenge_id_list = 10;
  if (this->finished_challenge_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _finished_challenge_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->finished_challenge_id_list_, target);
  }

  // uint32 level_id = 15;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->level_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGLevelChallengeFinishNotify)
  return target;
}

size_t GCGLevelChallengeFinishNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGLevelChallengeFinishNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 finished_challenge_id_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->finished_challenge_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _finished_challenge_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 level_id = 15;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGLevelChallengeFinishNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGLevelChallengeFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGLevelChallengeFinishNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGLevelChallengeFinishNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGLevelChallengeFinishNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGLevelChallengeFinishNotify)
    MergeFrom(*source);
  }
}

void GCGLevelChallengeFinishNotify::MergeFrom(const GCGLevelChallengeFinishNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGLevelChallengeFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  finished_challenge_id_list_.MergeFrom(from.finished_challenge_id_list_);
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
}

void GCGLevelChallengeFinishNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGLevelChallengeFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGLevelChallengeFinishNotify::CopyFrom(const GCGLevelChallengeFinishNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGLevelChallengeFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGLevelChallengeFinishNotify::IsInitialized() const {
  return true;
}

void GCGLevelChallengeFinishNotify::Swap(GCGLevelChallengeFinishNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGLevelChallengeFinishNotify::InternalSwap(GCGLevelChallengeFinishNotify* other) {
  using std::swap;
  finished_challenge_id_list_.InternalSwap(&other->finished_challenge_id_list_);
  swap(level_id_, other->level_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGLevelChallengeFinishNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGLevelChallengeFinishNotify

// repeated uint32 finished_challenge_id_list = 10;
int GCGLevelChallengeFinishNotify::finished_challenge_id_list_size() const {
  return finished_challenge_id_list_.size();
}
void GCGLevelChallengeFinishNotify::clear_finished_challenge_id_list() {
  finished_challenge_id_list_.Clear();
}
::google::protobuf::uint32 GCGLevelChallengeFinishNotify::finished_challenge_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
  return finished_challenge_id_list_.Get(index);
}
void GCGLevelChallengeFinishNotify::set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
}
void GCGLevelChallengeFinishNotify::add_finished_challenge_id_list(::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelChallengeFinishNotify::finished_challenge_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
  return finished_challenge_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelChallengeFinishNotify::mutable_finished_challenge_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
  return &finished_challenge_id_list_;
}

// uint32 level_id = 15;
void GCGLevelChallengeFinishNotify::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 GCGLevelChallengeFinishNotify::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeFinishNotify.level_id)
  return level_id_;
}
void GCGLevelChallengeFinishNotify::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeFinishNotify.level_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGWorldChallengeUnlockNotify::kUnlockIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGWorldChallengeUnlockNotify::GCGWorldChallengeUnlockNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGWorldChallengeUnlockNotify)
}
GCGWorldChallengeUnlockNotify::GCGWorldChallengeUnlockNotify(const GCGWorldChallengeUnlockNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      unlock_id_list_(from.unlock_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGWorldChallengeUnlockNotify)
}

void GCGWorldChallengeUnlockNotify::SharedCtor() {
  _cached_size_ = 0;
}

GCGWorldChallengeUnlockNotify::~GCGWorldChallengeUnlockNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGWorldChallengeUnlockNotify)
  SharedDtor();
}

void GCGWorldChallengeUnlockNotify::SharedDtor() {
}

void GCGWorldChallengeUnlockNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGWorldChallengeUnlockNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGWorldChallengeUnlockNotify& GCGWorldChallengeUnlockNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGWorldChallengeUnlockNotify* GCGWorldChallengeUnlockNotify::New(::google::protobuf::Arena* arena) const {
  GCGWorldChallengeUnlockNotify* n = new GCGWorldChallengeUnlockNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGWorldChallengeUnlockNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGWorldChallengeUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unlock_id_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGWorldChallengeUnlockNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGWorldChallengeUnlockNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 unlock_id_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlock_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_unlock_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGWorldChallengeUnlockNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGWorldChallengeUnlockNotify)
  return false;
#undef DO_
}

void GCGWorldChallengeUnlockNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGWorldChallengeUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unlock_id_list = 8;
  if (this->unlock_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _unlock_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->unlock_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->unlock_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGWorldChallengeUnlockNotify)
}

::google::protobuf::uint8* GCGWorldChallengeUnlockNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGWorldChallengeUnlockNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 unlock_id_list = 8;
  if (this->unlock_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _unlock_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->unlock_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGWorldChallengeUnlockNotify)
  return target;
}

size_t GCGWorldChallengeUnlockNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGWorldChallengeUnlockNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 unlock_id_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->unlock_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _unlock_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGWorldChallengeUnlockNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGWorldChallengeUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGWorldChallengeUnlockNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGWorldChallengeUnlockNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGWorldChallengeUnlockNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGWorldChallengeUnlockNotify)
    MergeFrom(*source);
  }
}

void GCGWorldChallengeUnlockNotify::MergeFrom(const GCGWorldChallengeUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGWorldChallengeUnlockNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  unlock_id_list_.MergeFrom(from.unlock_id_list_);
}

void GCGWorldChallengeUnlockNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGWorldChallengeUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGWorldChallengeUnlockNotify::CopyFrom(const GCGWorldChallengeUnlockNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGWorldChallengeUnlockNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGWorldChallengeUnlockNotify::IsInitialized() const {
  return true;
}

void GCGWorldChallengeUnlockNotify::Swap(GCGWorldChallengeUnlockNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGWorldChallengeUnlockNotify::InternalSwap(GCGWorldChallengeUnlockNotify* other) {
  using std::swap;
  unlock_id_list_.InternalSwap(&other->unlock_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGWorldChallengeUnlockNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGWorldChallengeUnlockNotify

// repeated uint32 unlock_id_list = 8;
int GCGWorldChallengeUnlockNotify::unlock_id_list_size() const {
  return unlock_id_list_.size();
}
void GCGWorldChallengeUnlockNotify::clear_unlock_id_list() {
  unlock_id_list_.Clear();
}
::google::protobuf::uint32 GCGWorldChallengeUnlockNotify::unlock_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
  return unlock_id_list_.Get(index);
}
void GCGWorldChallengeUnlockNotify::set_unlock_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
}
void GCGWorldChallengeUnlockNotify::add_unlock_id_list(::google::protobuf::uint32 value) {
  unlock_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGWorldChallengeUnlockNotify::unlock_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
  return unlock_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGWorldChallengeUnlockNotify::mutable_unlock_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
  return &unlock_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGBossChallengeUpdateNotify::kBossChallengeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGBossChallengeUpdateNotify::GCGBossChallengeUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGBossChallengeUpdateNotify)
}
GCGBossChallengeUpdateNotify::GCGBossChallengeUpdateNotify(const GCGBossChallengeUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_boss_challenge()) {
    boss_challenge_ = new ::proto::GCGBossChallengeData(*from.boss_challenge_);
  } else {
    boss_challenge_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.GCGBossChallengeUpdateNotify)
}

void GCGBossChallengeUpdateNotify::SharedCtor() {
  boss_challenge_ = NULL;
  _cached_size_ = 0;
}

GCGBossChallengeUpdateNotify::~GCGBossChallengeUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGBossChallengeUpdateNotify)
  SharedDtor();
}

void GCGBossChallengeUpdateNotify::SharedDtor() {
  if (this != internal_default_instance()) delete boss_challenge_;
}

void GCGBossChallengeUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGBossChallengeUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGBossChallengeUpdateNotify& GCGBossChallengeUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGBossChallengeUpdateNotify* GCGBossChallengeUpdateNotify::New(::google::protobuf::Arena* arena) const {
  GCGBossChallengeUpdateNotify* n = new GCGBossChallengeUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGBossChallengeUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGBossChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && boss_challenge_ != NULL) {
    delete boss_challenge_;
  }
  boss_challenge_ = NULL;
  _internal_metadata_.Clear();
}

bool GCGBossChallengeUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGBossChallengeUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GCGBossChallengeData boss_challenge = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGBossChallengeUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGBossChallengeUpdateNotify)
  return false;
#undef DO_
}

void GCGBossChallengeUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGBossChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGBossChallengeData boss_challenge = 11;
  if (this->has_boss_challenge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->boss_challenge_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGBossChallengeUpdateNotify)
}

::google::protobuf::uint8* GCGBossChallengeUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGBossChallengeUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GCGBossChallengeData boss_challenge = 11;
  if (this->has_boss_challenge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->boss_challenge_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGBossChallengeUpdateNotify)
  return target;
}

size_t GCGBossChallengeUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGBossChallengeUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GCGBossChallengeData boss_challenge = 11;
  if (this->has_boss_challenge()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->boss_challenge_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGBossChallengeUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGBossChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGBossChallengeUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGBossChallengeUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGBossChallengeUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGBossChallengeUpdateNotify)
    MergeFrom(*source);
  }
}

void GCGBossChallengeUpdateNotify::MergeFrom(const GCGBossChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGBossChallengeUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_boss_challenge()) {
    mutable_boss_challenge()->::proto::GCGBossChallengeData::MergeFrom(from.boss_challenge());
  }
}

void GCGBossChallengeUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGBossChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGBossChallengeUpdateNotify::CopyFrom(const GCGBossChallengeUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGBossChallengeUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGBossChallengeUpdateNotify::IsInitialized() const {
  return true;
}

void GCGBossChallengeUpdateNotify::Swap(GCGBossChallengeUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGBossChallengeUpdateNotify::InternalSwap(GCGBossChallengeUpdateNotify* other) {
  using std::swap;
  swap(boss_challenge_, other->boss_challenge_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGBossChallengeUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGBossChallengeUpdateNotify

// .proto.GCGBossChallengeData boss_challenge = 11;
bool GCGBossChallengeUpdateNotify::has_boss_challenge() const {
  return this != internal_default_instance() && boss_challenge_ != NULL;
}
void GCGBossChallengeUpdateNotify::clear_boss_challenge() {
  if (GetArenaNoVirtual() == NULL && boss_challenge_ != NULL) delete boss_challenge_;
  boss_challenge_ = NULL;
}
const ::proto::GCGBossChallengeData& GCGBossChallengeUpdateNotify::boss_challenge() const {
  const ::proto::GCGBossChallengeData* p = boss_challenge_;
  // @@protoc_insertion_point(field_get:proto.GCGBossChallengeUpdateNotify.boss_challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGBossChallengeData*>(
      &::proto::_GCGBossChallengeData_default_instance_);
}
::proto::GCGBossChallengeData* GCGBossChallengeUpdateNotify::mutable_boss_challenge() {
  
  if (boss_challenge_ == NULL) {
    boss_challenge_ = new ::proto::GCGBossChallengeData;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGBossChallengeUpdateNotify.boss_challenge)
  return boss_challenge_;
}
::proto::GCGBossChallengeData* GCGBossChallengeUpdateNotify::release_boss_challenge() {
  // @@protoc_insertion_point(field_release:proto.GCGBossChallengeUpdateNotify.boss_challenge)
  
  ::proto::GCGBossChallengeData* temp = boss_challenge_;
  boss_challenge_ = NULL;
  return temp;
}
void GCGBossChallengeUpdateNotify::set_allocated_boss_challenge(::proto::GCGBossChallengeData* boss_challenge) {
  delete boss_challenge_;
  boss_challenge_ = boss_challenge;
  if (boss_challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGBossChallengeUpdateNotify.boss_challenge)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GCGLevelChallengeDeleteNotify::kLevelIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GCGLevelChallengeDeleteNotify::GCGLevelChallengeDeleteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GCGLevelChallengeDeleteNotify)
}
GCGLevelChallengeDeleteNotify::GCGLevelChallengeDeleteNotify(const GCGLevelChallengeDeleteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      level_id_list_(from.level_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GCGLevelChallengeDeleteNotify)
}

void GCGLevelChallengeDeleteNotify::SharedCtor() {
  _cached_size_ = 0;
}

GCGLevelChallengeDeleteNotify::~GCGLevelChallengeDeleteNotify() {
  // @@protoc_insertion_point(destructor:proto.GCGLevelChallengeDeleteNotify)
  SharedDtor();
}

void GCGLevelChallengeDeleteNotify::SharedDtor() {
}

void GCGLevelChallengeDeleteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCGLevelChallengeDeleteNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GCGLevelChallengeDeleteNotify& GCGLevelChallengeDeleteNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgcg_2eproto::InitDefaults();
  return *internal_default_instance();
}

GCGLevelChallengeDeleteNotify* GCGLevelChallengeDeleteNotify::New(::google::protobuf::Arena* arena) const {
  GCGLevelChallengeDeleteNotify* n = new GCGLevelChallengeDeleteNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GCGLevelChallengeDeleteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GCGLevelChallengeDeleteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_id_list_.Clear();
  _internal_metadata_.Clear();
}

bool GCGLevelChallengeDeleteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GCGLevelChallengeDeleteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 level_id_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_level_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GCGLevelChallengeDeleteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GCGLevelChallengeDeleteNotify)
  return false;
#undef DO_
}

void GCGLevelChallengeDeleteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GCGLevelChallengeDeleteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 level_id_list = 13;
  if (this->level_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _level_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->level_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->level_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GCGLevelChallengeDeleteNotify)
}

::google::protobuf::uint8* GCGLevelChallengeDeleteNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GCGLevelChallengeDeleteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 level_id_list = 13;
  if (this->level_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _level_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->level_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GCGLevelChallengeDeleteNotify)
  return target;
}

size_t GCGLevelChallengeDeleteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GCGLevelChallengeDeleteNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 level_id_list = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->level_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _level_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCGLevelChallengeDeleteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GCGLevelChallengeDeleteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GCGLevelChallengeDeleteNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GCGLevelChallengeDeleteNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GCGLevelChallengeDeleteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GCGLevelChallengeDeleteNotify)
    MergeFrom(*source);
  }
}

void GCGLevelChallengeDeleteNotify::MergeFrom(const GCGLevelChallengeDeleteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GCGLevelChallengeDeleteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  level_id_list_.MergeFrom(from.level_id_list_);
}

void GCGLevelChallengeDeleteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GCGLevelChallengeDeleteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCGLevelChallengeDeleteNotify::CopyFrom(const GCGLevelChallengeDeleteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GCGLevelChallengeDeleteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCGLevelChallengeDeleteNotify::IsInitialized() const {
  return true;
}

void GCGLevelChallengeDeleteNotify::Swap(GCGLevelChallengeDeleteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GCGLevelChallengeDeleteNotify::InternalSwap(GCGLevelChallengeDeleteNotify* other) {
  using std::swap;
  level_id_list_.InternalSwap(&other->level_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GCGLevelChallengeDeleteNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgcg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgcg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GCGLevelChallengeDeleteNotify

// repeated uint32 level_id_list = 13;
int GCGLevelChallengeDeleteNotify::level_id_list_size() const {
  return level_id_list_.size();
}
void GCGLevelChallengeDeleteNotify::clear_level_id_list() {
  level_id_list_.Clear();
}
::google::protobuf::uint32 GCGLevelChallengeDeleteNotify::level_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeDeleteNotify.level_id_list)
  return level_id_list_.Get(index);
}
void GCGLevelChallengeDeleteNotify::set_level_id_list(int index, ::google::protobuf::uint32 value) {
  level_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeDeleteNotify.level_id_list)
}
void GCGLevelChallengeDeleteNotify::add_level_id_list(::google::protobuf::uint32 value) {
  level_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeDeleteNotify.level_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelChallengeDeleteNotify::level_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeDeleteNotify.level_id_list)
  return level_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelChallengeDeleteNotify::mutable_level_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeDeleteNotify.level_id_list)
  return &level_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
