// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_scene_play.proto

#ifndef PROTOBUF_cmd_2fcmd_5fscene_5fplay_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fscene_5fplay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class ScenePlayBattleInfo;
class ScenePlayBattleInfoDefaultTypeInternal;
extern ScenePlayBattleInfoDefaultTypeInternal _ScenePlayBattleInfo_default_instance_;
class ScenePlayBattleInfoListNotify;
class ScenePlayBattleInfoListNotifyDefaultTypeInternal;
extern ScenePlayBattleInfoListNotifyDefaultTypeInternal _ScenePlayBattleInfoListNotify_default_instance_;
class ScenePlayBattleInfoNotify;
class ScenePlayBattleInfoNotifyDefaultTypeInternal;
extern ScenePlayBattleInfoNotifyDefaultTypeInternal _ScenePlayBattleInfoNotify_default_instance_;
class ScenePlayBattleInterruptNotify;
class ScenePlayBattleInterruptNotifyDefaultTypeInternal;
extern ScenePlayBattleInterruptNotifyDefaultTypeInternal _ScenePlayBattleInterruptNotify_default_instance_;
class ScenePlayBattleResultNotify;
class ScenePlayBattleResultNotifyDefaultTypeInternal;
extern ScenePlayBattleResultNotifyDefaultTypeInternal _ScenePlayBattleResultNotify_default_instance_;
class ScenePlayBattleSettlePlayerInfo;
class ScenePlayBattleSettlePlayerInfoDefaultTypeInternal;
extern ScenePlayBattleSettlePlayerInfoDefaultTypeInternal _ScenePlayBattleSettlePlayerInfo_default_instance_;
class ScenePlayBattleSettleRewardInfo;
class ScenePlayBattleSettleRewardInfoDefaultTypeInternal;
extern ScenePlayBattleSettleRewardInfoDefaultTypeInternal _ScenePlayBattleSettleRewardInfo_default_instance_;
class ScenePlayBattleUidOpNotify;
class ScenePlayBattleUidOpNotifyDefaultTypeInternal;
extern ScenePlayBattleUidOpNotifyDefaultTypeInternal _ScenePlayBattleUidOpNotify_default_instance_;
class ScenePlayGuestReplyInviteReq;
class ScenePlayGuestReplyInviteReqDefaultTypeInternal;
extern ScenePlayGuestReplyInviteReqDefaultTypeInternal _ScenePlayGuestReplyInviteReq_default_instance_;
class ScenePlayGuestReplyInviteRsp;
class ScenePlayGuestReplyInviteRspDefaultTypeInternal;
extern ScenePlayGuestReplyInviteRspDefaultTypeInternal _ScenePlayGuestReplyInviteRsp_default_instance_;
class ScenePlayGuestReplyNotify;
class ScenePlayGuestReplyNotifyDefaultTypeInternal;
extern ScenePlayGuestReplyNotifyDefaultTypeInternal _ScenePlayGuestReplyNotify_default_instance_;
class ScenePlayInfo;
class ScenePlayInfoDefaultTypeInternal;
extern ScenePlayInfoDefaultTypeInternal _ScenePlayInfo_default_instance_;
class ScenePlayInfoListNotify;
class ScenePlayInfoListNotifyDefaultTypeInternal;
extern ScenePlayInfoListNotifyDefaultTypeInternal _ScenePlayInfoListNotify_default_instance_;
class ScenePlayInviteResultNotify;
class ScenePlayInviteResultNotifyDefaultTypeInternal;
extern ScenePlayInviteResultNotifyDefaultTypeInternal _ScenePlayInviteResultNotify_default_instance_;
class ScenePlayOutofRegionNotify;
class ScenePlayOutofRegionNotifyDefaultTypeInternal;
extern ScenePlayOutofRegionNotifyDefaultTypeInternal _ScenePlayOutofRegionNotify_default_instance_;
class ScenePlayOwnerCheckReq;
class ScenePlayOwnerCheckReqDefaultTypeInternal;
extern ScenePlayOwnerCheckReqDefaultTypeInternal _ScenePlayOwnerCheckReq_default_instance_;
class ScenePlayOwnerCheckRsp;
class ScenePlayOwnerCheckRspDefaultTypeInternal;
extern ScenePlayOwnerCheckRspDefaultTypeInternal _ScenePlayOwnerCheckRsp_default_instance_;
class ScenePlayOwnerInviteNotify;
class ScenePlayOwnerInviteNotifyDefaultTypeInternal;
extern ScenePlayOwnerInviteNotifyDefaultTypeInternal _ScenePlayOwnerInviteNotify_default_instance_;
class ScenePlayOwnerStartInviteReq;
class ScenePlayOwnerStartInviteReqDefaultTypeInternal;
extern ScenePlayOwnerStartInviteReqDefaultTypeInternal _ScenePlayOwnerStartInviteReq_default_instance_;
class ScenePlayOwnerStartInviteRsp;
class ScenePlayOwnerStartInviteRspDefaultTypeInternal;
extern ScenePlayOwnerStartInviteRspDefaultTypeInternal _ScenePlayOwnerStartInviteRsp_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fscene_5fplay_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fscene_5fplay_2eproto

enum ScenePlayBattleState {
  SCENE_PLAY_BATTLE_NONE = 0,
  SCENE_PLAY_BATTLE_INIT = 1,
  SCENE_PLAY_BATTLE_PREPARE = 2,
  SCENE_PLAY_BATTLE_READY = 3,
  SCENE_PLAY_BATTLE_PRESTART = 4,
  SCENE_PLAY_BATTLE_START = 5,
  SCENE_PLAY_BATTLE_STOP = 6,
  ScenePlayBattleState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ScenePlayBattleState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ScenePlayBattleState_IsValid(int value);
const ScenePlayBattleState ScenePlayBattleState_MIN = SCENE_PLAY_BATTLE_NONE;
const ScenePlayBattleState ScenePlayBattleState_MAX = SCENE_PLAY_BATTLE_STOP;
const int ScenePlayBattleState_ARRAYSIZE = ScenePlayBattleState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ScenePlayBattleState_descriptor();
inline const ::std::string& ScenePlayBattleState_Name(ScenePlayBattleState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ScenePlayBattleState_descriptor(), value);
}
inline bool ScenePlayBattleState_Parse(
    const ::std::string& name, ScenePlayBattleState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ScenePlayBattleState>(
    ScenePlayBattleState_descriptor(), name, value);
}
// ===================================================================

class ScenePlayBattleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleInfo) */ {
 public:
  ScenePlayBattleInfo();
  virtual ~ScenePlayBattleInfo();

  ScenePlayBattleInfo(const ScenePlayBattleInfo& from);

  inline ScenePlayBattleInfo& operator=(const ScenePlayBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleInfo(ScenePlayBattleInfo&& from) noexcept
    : ScenePlayBattleInfo() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleInfo& operator=(ScenePlayBattleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleInfo& default_instance();

  static inline const ScenePlayBattleInfo* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleInfo*>(
               &_ScenePlayBattleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ScenePlayBattleInfo* other);
  friend void swap(ScenePlayBattleInfo& a, ScenePlayBattleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleInfo& from);
  void MergeFrom(const ScenePlayBattleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 progress_stage_list = 3;
  int progress_stage_list_size() const;
  void clear_progress_stage_list();
  static const int kProgressStageListFieldNumber = 3;
  ::google::protobuf::uint32 progress_stage_list(int index) const;
  void set_progress_stage_list(int index, ::google::protobuf::uint32 value);
  void add_progress_stage_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      progress_stage_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_progress_stage_list();

  // uint32 play_id = 1;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 1;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // uint32 mode = 4;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // uint32 prepare_end_time = 7;
  void clear_prepare_end_time();
  static const int kPrepareEndTimeFieldNumber = 7;
  ::google::protobuf::uint32 prepare_end_time() const;
  void set_prepare_end_time(::google::protobuf::uint32 value);

  // uint32 state = 8;
  void clear_state();
  static const int kStateFieldNumber = 8;
  ::google::protobuf::uint32 state() const;
  void set_state(::google::protobuf::uint32 value);

  // uint32 type = 9;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // uint32 start_time = 10;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 10;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // uint32 duration = 14;
  void clear_duration();
  static const int kDurationFieldNumber = 14;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // uint32 progress = 11;
  void clear_progress();
  static const int kProgressFieldNumber = 11;
  ::google::protobuf::uint32 progress() const;
  void set_progress(::google::protobuf::uint32 value);

  // uint32 play_type = 12;
  void clear_play_type();
  static const int kPlayTypeFieldNumber = 12;
  ::google::protobuf::uint32 play_type() const;
  void set_play_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > progress_stage_list_;
  mutable int _progress_stage_list_cached_byte_size_;
  ::google::protobuf::uint32 play_id_;
  ::google::protobuf::uint32 mode_;
  ::google::protobuf::uint32 prepare_end_time_;
  ::google::protobuf::uint32 state_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 progress_;
  ::google::protobuf::uint32 play_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayBattleInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleInfoNotify) */ {
 public:
  ScenePlayBattleInfoNotify();
  virtual ~ScenePlayBattleInfoNotify();

  ScenePlayBattleInfoNotify(const ScenePlayBattleInfoNotify& from);

  inline ScenePlayBattleInfoNotify& operator=(const ScenePlayBattleInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleInfoNotify(ScenePlayBattleInfoNotify&& from) noexcept
    : ScenePlayBattleInfoNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleInfoNotify& operator=(ScenePlayBattleInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleInfoNotify& default_instance();

  static inline const ScenePlayBattleInfoNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleInfoNotify*>(
               &_ScenePlayBattleInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ScenePlayBattleInfoNotify* other);
  friend void swap(ScenePlayBattleInfoNotify& a, ScenePlayBattleInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleInfoNotify& from);
  void MergeFrom(const ScenePlayBattleInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.ScenePlayBattleInfo battle_info = 11;
  bool has_battle_info() const;
  void clear_battle_info();
  static const int kBattleInfoFieldNumber = 11;
  const ::proto::ScenePlayBattleInfo& battle_info() const;
  ::proto::ScenePlayBattleInfo* mutable_battle_info();
  ::proto::ScenePlayBattleInfo* release_battle_info();
  void set_allocated_battle_info(::proto::ScenePlayBattleInfo* battle_info);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::ScenePlayBattleInfo* battle_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayOwnerCheckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayOwnerCheckReq) */ {
 public:
  ScenePlayOwnerCheckReq();
  virtual ~ScenePlayOwnerCheckReq();

  ScenePlayOwnerCheckReq(const ScenePlayOwnerCheckReq& from);

  inline ScenePlayOwnerCheckReq& operator=(const ScenePlayOwnerCheckReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayOwnerCheckReq(ScenePlayOwnerCheckReq&& from) noexcept
    : ScenePlayOwnerCheckReq() {
    *this = ::std::move(from);
  }

  inline ScenePlayOwnerCheckReq& operator=(ScenePlayOwnerCheckReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayOwnerCheckReq& default_instance();

  static inline const ScenePlayOwnerCheckReq* internal_default_instance() {
    return reinterpret_cast<const ScenePlayOwnerCheckReq*>(
               &_ScenePlayOwnerCheckReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ScenePlayOwnerCheckReq* other);
  friend void swap(ScenePlayOwnerCheckReq& a, ScenePlayOwnerCheckReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayOwnerCheckReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayOwnerCheckReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayOwnerCheckReq& from);
  void MergeFrom(const ScenePlayOwnerCheckReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayOwnerCheckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_skip_match = 6;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 6;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // uint32 play_id = 9;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 9;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayOwnerCheckReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_skip_match_;
  ::google::protobuf::uint32 play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayOwnerCheckRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayOwnerCheckRsp) */ {
 public:
  ScenePlayOwnerCheckRsp();
  virtual ~ScenePlayOwnerCheckRsp();

  ScenePlayOwnerCheckRsp(const ScenePlayOwnerCheckRsp& from);

  inline ScenePlayOwnerCheckRsp& operator=(const ScenePlayOwnerCheckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayOwnerCheckRsp(ScenePlayOwnerCheckRsp&& from) noexcept
    : ScenePlayOwnerCheckRsp() {
    *this = ::std::move(from);
  }

  inline ScenePlayOwnerCheckRsp& operator=(ScenePlayOwnerCheckRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayOwnerCheckRsp& default_instance();

  static inline const ScenePlayOwnerCheckRsp* internal_default_instance() {
    return reinterpret_cast<const ScenePlayOwnerCheckRsp*>(
               &_ScenePlayOwnerCheckRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ScenePlayOwnerCheckRsp* other);
  friend void swap(ScenePlayOwnerCheckRsp& a, ScenePlayOwnerCheckRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayOwnerCheckRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayOwnerCheckRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayOwnerCheckRsp& from);
  void MergeFrom(const ScenePlayOwnerCheckRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayOwnerCheckRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 param_list = 8;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 8;
  ::google::protobuf::uint32 param_list(int index) const;
  void set_param_list(int index, ::google::protobuf::uint32 value);
  void add_param_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_list();

  // bool is_skip_match = 1;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 1;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // int32 retcode = 3;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 wrong_uid = 5;
  void clear_wrong_uid();
  static const int kWrongUidFieldNumber = 5;
  ::google::protobuf::uint32 wrong_uid() const;
  void set_wrong_uid(::google::protobuf::uint32 value);

  // uint32 play_id = 9;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 9;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayOwnerCheckRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_list_;
  mutable int _param_list_cached_byte_size_;
  bool is_skip_match_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 wrong_uid_;
  ::google::protobuf::uint32 play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayOwnerStartInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayOwnerStartInviteReq) */ {
 public:
  ScenePlayOwnerStartInviteReq();
  virtual ~ScenePlayOwnerStartInviteReq();

  ScenePlayOwnerStartInviteReq(const ScenePlayOwnerStartInviteReq& from);

  inline ScenePlayOwnerStartInviteReq& operator=(const ScenePlayOwnerStartInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayOwnerStartInviteReq(ScenePlayOwnerStartInviteReq&& from) noexcept
    : ScenePlayOwnerStartInviteReq() {
    *this = ::std::move(from);
  }

  inline ScenePlayOwnerStartInviteReq& operator=(ScenePlayOwnerStartInviteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayOwnerStartInviteReq& default_instance();

  static inline const ScenePlayOwnerStartInviteReq* internal_default_instance() {
    return reinterpret_cast<const ScenePlayOwnerStartInviteReq*>(
               &_ScenePlayOwnerStartInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ScenePlayOwnerStartInviteReq* other);
  friend void swap(ScenePlayOwnerStartInviteReq& a, ScenePlayOwnerStartInviteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayOwnerStartInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayOwnerStartInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayOwnerStartInviteReq& from);
  void MergeFrom(const ScenePlayOwnerStartInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayOwnerStartInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_skip_match = 8;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 8;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // uint32 play_id = 13;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 13;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayOwnerStartInviteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_skip_match_;
  ::google::protobuf::uint32 play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayOwnerStartInviteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayOwnerStartInviteRsp) */ {
 public:
  ScenePlayOwnerStartInviteRsp();
  virtual ~ScenePlayOwnerStartInviteRsp();

  ScenePlayOwnerStartInviteRsp(const ScenePlayOwnerStartInviteRsp& from);

  inline ScenePlayOwnerStartInviteRsp& operator=(const ScenePlayOwnerStartInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayOwnerStartInviteRsp(ScenePlayOwnerStartInviteRsp&& from) noexcept
    : ScenePlayOwnerStartInviteRsp() {
    *this = ::std::move(from);
  }

  inline ScenePlayOwnerStartInviteRsp& operator=(ScenePlayOwnerStartInviteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayOwnerStartInviteRsp& default_instance();

  static inline const ScenePlayOwnerStartInviteRsp* internal_default_instance() {
    return reinterpret_cast<const ScenePlayOwnerStartInviteRsp*>(
               &_ScenePlayOwnerStartInviteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ScenePlayOwnerStartInviteRsp* other);
  friend void swap(ScenePlayOwnerStartInviteRsp& a, ScenePlayOwnerStartInviteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayOwnerStartInviteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayOwnerStartInviteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayOwnerStartInviteRsp& from);
  void MergeFrom(const ScenePlayOwnerStartInviteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayOwnerStartInviteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 15;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 15;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // bool is_skip_match = 7;
  void clear_is_skip_match();
  static const int kIsSkipMatchFieldNumber = 7;
  bool is_skip_match() const;
  void set_is_skip_match(bool value);

  // uint32 play_id = 11;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 11;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayOwnerStartInviteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  bool is_skip_match_;
  ::google::protobuf::uint32 play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayOwnerInviteNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayOwnerInviteNotify) */ {
 public:
  ScenePlayOwnerInviteNotify();
  virtual ~ScenePlayOwnerInviteNotify();

  ScenePlayOwnerInviteNotify(const ScenePlayOwnerInviteNotify& from);

  inline ScenePlayOwnerInviteNotify& operator=(const ScenePlayOwnerInviteNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayOwnerInviteNotify(ScenePlayOwnerInviteNotify&& from) noexcept
    : ScenePlayOwnerInviteNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayOwnerInviteNotify& operator=(ScenePlayOwnerInviteNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayOwnerInviteNotify& default_instance();

  static inline const ScenePlayOwnerInviteNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayOwnerInviteNotify*>(
               &_ScenePlayOwnerInviteNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ScenePlayOwnerInviteNotify* other);
  friend void swap(ScenePlayOwnerInviteNotify& a, ScenePlayOwnerInviteNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayOwnerInviteNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayOwnerInviteNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayOwnerInviteNotify& from);
  void MergeFrom(const ScenePlayOwnerInviteNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayOwnerInviteNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_remain_reward = 15;
  void clear_is_remain_reward();
  static const int kIsRemainRewardFieldNumber = 15;
  bool is_remain_reward() const;
  void set_is_remain_reward(bool value);

  // uint32 play_id = 5;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 5;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // uint32 invite_cd = 14;
  void clear_invite_cd();
  static const int kInviteCdFieldNumber = 14;
  ::google::protobuf::uint32 invite_cd() const;
  void set_invite_cd(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayOwnerInviteNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_remain_reward_;
  ::google::protobuf::uint32 play_id_;
  ::google::protobuf::uint32 invite_cd_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayGuestReplyInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayGuestReplyInviteReq) */ {
 public:
  ScenePlayGuestReplyInviteReq();
  virtual ~ScenePlayGuestReplyInviteReq();

  ScenePlayGuestReplyInviteReq(const ScenePlayGuestReplyInviteReq& from);

  inline ScenePlayGuestReplyInviteReq& operator=(const ScenePlayGuestReplyInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayGuestReplyInviteReq(ScenePlayGuestReplyInviteReq&& from) noexcept
    : ScenePlayGuestReplyInviteReq() {
    *this = ::std::move(from);
  }

  inline ScenePlayGuestReplyInviteReq& operator=(ScenePlayGuestReplyInviteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayGuestReplyInviteReq& default_instance();

  static inline const ScenePlayGuestReplyInviteReq* internal_default_instance() {
    return reinterpret_cast<const ScenePlayGuestReplyInviteReq*>(
               &_ScenePlayGuestReplyInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ScenePlayGuestReplyInviteReq* other);
  friend void swap(ScenePlayGuestReplyInviteReq& a, ScenePlayGuestReplyInviteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayGuestReplyInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayGuestReplyInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayGuestReplyInviteReq& from);
  void MergeFrom(const ScenePlayGuestReplyInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayGuestReplyInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 play_id = 6;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 6;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // bool is_agree = 15;
  void clear_is_agree();
  static const int kIsAgreeFieldNumber = 15;
  bool is_agree() const;
  void set_is_agree(bool value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayGuestReplyInviteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 play_id_;
  bool is_agree_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayGuestReplyInviteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayGuestReplyInviteRsp) */ {
 public:
  ScenePlayGuestReplyInviteRsp();
  virtual ~ScenePlayGuestReplyInviteRsp();

  ScenePlayGuestReplyInviteRsp(const ScenePlayGuestReplyInviteRsp& from);

  inline ScenePlayGuestReplyInviteRsp& operator=(const ScenePlayGuestReplyInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayGuestReplyInviteRsp(ScenePlayGuestReplyInviteRsp&& from) noexcept
    : ScenePlayGuestReplyInviteRsp() {
    *this = ::std::move(from);
  }

  inline ScenePlayGuestReplyInviteRsp& operator=(ScenePlayGuestReplyInviteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayGuestReplyInviteRsp& default_instance();

  static inline const ScenePlayGuestReplyInviteRsp* internal_default_instance() {
    return reinterpret_cast<const ScenePlayGuestReplyInviteRsp*>(
               &_ScenePlayGuestReplyInviteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ScenePlayGuestReplyInviteRsp* other);
  friend void swap(ScenePlayGuestReplyInviteRsp& a, ScenePlayGuestReplyInviteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayGuestReplyInviteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayGuestReplyInviteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayGuestReplyInviteRsp& from);
  void MergeFrom(const ScenePlayGuestReplyInviteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayGuestReplyInviteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_agree = 2;
  void clear_is_agree();
  static const int kIsAgreeFieldNumber = 2;
  bool is_agree() const;
  void set_is_agree(bool value);

  // int32 retcode = 6;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 play_id = 8;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 8;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayGuestReplyInviteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_agree_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayGuestReplyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayGuestReplyNotify) */ {
 public:
  ScenePlayGuestReplyNotify();
  virtual ~ScenePlayGuestReplyNotify();

  ScenePlayGuestReplyNotify(const ScenePlayGuestReplyNotify& from);

  inline ScenePlayGuestReplyNotify& operator=(const ScenePlayGuestReplyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayGuestReplyNotify(ScenePlayGuestReplyNotify&& from) noexcept
    : ScenePlayGuestReplyNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayGuestReplyNotify& operator=(ScenePlayGuestReplyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayGuestReplyNotify& default_instance();

  static inline const ScenePlayGuestReplyNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayGuestReplyNotify*>(
               &_ScenePlayGuestReplyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ScenePlayGuestReplyNotify* other);
  friend void swap(ScenePlayGuestReplyNotify& a, ScenePlayGuestReplyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayGuestReplyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayGuestReplyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayGuestReplyNotify& from);
  void MergeFrom(const ScenePlayGuestReplyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayGuestReplyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 play_id = 13;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 13;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // bool is_agree = 3;
  void clear_is_agree();
  static const int kIsAgreeFieldNumber = 3;
  bool is_agree() const;
  void set_is_agree(bool value);

  // uint32 guest_uid = 12;
  void clear_guest_uid();
  static const int kGuestUidFieldNumber = 12;
  ::google::protobuf::uint32 guest_uid() const;
  void set_guest_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayGuestReplyNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 play_id_;
  bool is_agree_;
  ::google::protobuf::uint32 guest_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayInviteResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayInviteResultNotify) */ {
 public:
  ScenePlayInviteResultNotify();
  virtual ~ScenePlayInviteResultNotify();

  ScenePlayInviteResultNotify(const ScenePlayInviteResultNotify& from);

  inline ScenePlayInviteResultNotify& operator=(const ScenePlayInviteResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayInviteResultNotify(ScenePlayInviteResultNotify&& from) noexcept
    : ScenePlayInviteResultNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayInviteResultNotify& operator=(ScenePlayInviteResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayInviteResultNotify& default_instance();

  static inline const ScenePlayInviteResultNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayInviteResultNotify*>(
               &_ScenePlayInviteResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(ScenePlayInviteResultNotify* other);
  friend void swap(ScenePlayInviteResultNotify& a, ScenePlayInviteResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayInviteResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayInviteResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayInviteResultNotify& from);
  void MergeFrom(const ScenePlayInviteResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayInviteResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_all_argee = 11;
  void clear_is_all_argee();
  static const int kIsAllArgeeFieldNumber = 11;
  bool is_all_argee() const;
  void set_is_all_argee(bool value);

  // uint32 play_id = 15;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 15;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayInviteResultNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_all_argee_;
  ::google::protobuf::uint32 play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayInfo) */ {
 public:
  ScenePlayInfo();
  virtual ~ScenePlayInfo();

  ScenePlayInfo(const ScenePlayInfo& from);

  inline ScenePlayInfo& operator=(const ScenePlayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayInfo(ScenePlayInfo&& from) noexcept
    : ScenePlayInfo() {
    *this = ::std::move(from);
  }

  inline ScenePlayInfo& operator=(ScenePlayInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayInfo& default_instance();

  static inline const ScenePlayInfo* internal_default_instance() {
    return reinterpret_cast<const ScenePlayInfo*>(
               &_ScenePlayInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(ScenePlayInfo* other);
  friend void swap(ScenePlayInfo& a, ScenePlayInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayInfo& from);
  void MergeFrom(const ScenePlayInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 play_type = 3;
  void clear_play_type();
  static const int kPlayTypeFieldNumber = 3;
  ::google::protobuf::uint32 play_type() const;
  void set_play_type(::google::protobuf::uint32 value);

  // bool is_open = 9;
  void clear_is_open();
  static const int kIsOpenFieldNumber = 9;
  bool is_open() const;
  void set_is_open(bool value);

  // uint32 play_id = 11;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 11;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // uint32 entry_id = 15;
  void clear_entry_id();
  static const int kEntryIdFieldNumber = 15;
  ::google::protobuf::uint32 entry_id() const;
  void set_entry_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 play_type_;
  bool is_open_;
  ::google::protobuf::uint32 play_id_;
  ::google::protobuf::uint32 entry_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayInfoListNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayInfoListNotify) */ {
 public:
  ScenePlayInfoListNotify();
  virtual ~ScenePlayInfoListNotify();

  ScenePlayInfoListNotify(const ScenePlayInfoListNotify& from);

  inline ScenePlayInfoListNotify& operator=(const ScenePlayInfoListNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayInfoListNotify(ScenePlayInfoListNotify&& from) noexcept
    : ScenePlayInfoListNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayInfoListNotify& operator=(ScenePlayInfoListNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayInfoListNotify& default_instance();

  static inline const ScenePlayInfoListNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayInfoListNotify*>(
               &_ScenePlayInfoListNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(ScenePlayInfoListNotify* other);
  friend void swap(ScenePlayInfoListNotify& a, ScenePlayInfoListNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayInfoListNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayInfoListNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayInfoListNotify& from);
  void MergeFrom(const ScenePlayInfoListNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayInfoListNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ScenePlayInfo play_info_list = 6;
  int play_info_list_size() const;
  void clear_play_info_list();
  static const int kPlayInfoListFieldNumber = 6;
  const ::proto::ScenePlayInfo& play_info_list(int index) const;
  ::proto::ScenePlayInfo* mutable_play_info_list(int index);
  ::proto::ScenePlayInfo* add_play_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayInfo >*
      mutable_play_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayInfo >&
      play_info_list() const;

  // @@protoc_insertion_point(class_scope:proto.ScenePlayInfoListNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayInfo > play_info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayBattleInterruptNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleInterruptNotify) */ {
 public:
  ScenePlayBattleInterruptNotify();
  virtual ~ScenePlayBattleInterruptNotify();

  ScenePlayBattleInterruptNotify(const ScenePlayBattleInterruptNotify& from);

  inline ScenePlayBattleInterruptNotify& operator=(const ScenePlayBattleInterruptNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleInterruptNotify(ScenePlayBattleInterruptNotify&& from) noexcept
    : ScenePlayBattleInterruptNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleInterruptNotify& operator=(ScenePlayBattleInterruptNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleInterruptNotify& default_instance();

  static inline const ScenePlayBattleInterruptNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleInterruptNotify*>(
               &_ScenePlayBattleInterruptNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ScenePlayBattleInterruptNotify* other);
  friend void swap(ScenePlayBattleInterruptNotify& a, ScenePlayBattleInterruptNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleInterruptNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleInterruptNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleInterruptNotify& from);
  void MergeFrom(const ScenePlayBattleInterruptNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleInterruptNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 play_type = 1;
  void clear_play_type();
  static const int kPlayTypeFieldNumber = 1;
  ::google::protobuf::uint32 play_type() const;
  void set_play_type(::google::protobuf::uint32 value);

  // uint32 play_id = 5;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 5;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // uint32 interrupt_state = 6;
  void clear_interrupt_state();
  static const int kInterruptStateFieldNumber = 6;
  ::google::protobuf::uint32 interrupt_state() const;
  void set_interrupt_state(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleInterruptNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 play_type_;
  ::google::protobuf::uint32 play_id_;
  ::google::protobuf::uint32 interrupt_state_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayBattleSettlePlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleSettlePlayerInfo) */ {
 public:
  ScenePlayBattleSettlePlayerInfo();
  virtual ~ScenePlayBattleSettlePlayerInfo();

  ScenePlayBattleSettlePlayerInfo(const ScenePlayBattleSettlePlayerInfo& from);

  inline ScenePlayBattleSettlePlayerInfo& operator=(const ScenePlayBattleSettlePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleSettlePlayerInfo(ScenePlayBattleSettlePlayerInfo&& from) noexcept
    : ScenePlayBattleSettlePlayerInfo() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleSettlePlayerInfo& operator=(ScenePlayBattleSettlePlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleSettlePlayerInfo& default_instance();

  static inline const ScenePlayBattleSettlePlayerInfo* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleSettlePlayerInfo*>(
               &_ScenePlayBattleSettlePlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ScenePlayBattleSettlePlayerInfo* other);
  friend void swap(ScenePlayBattleSettlePlayerInfo& a, ScenePlayBattleSettlePlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleSettlePlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleSettlePlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleSettlePlayerInfo& from);
  void MergeFrom(const ScenePlayBattleSettlePlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleSettlePlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ExhibitionDisplayInfo card_list = 14;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 14;
  const ::proto::ExhibitionDisplayInfo& card_list(int index) const;
  ::proto::ExhibitionDisplayInfo* mutable_card_list(int index);
  ::proto::ExhibitionDisplayInfo* add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
      mutable_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
      card_list() const;

  // string online_id = 12;
  void clear_online_id();
  static const int kOnlineIdFieldNumber = 12;
  const ::std::string& online_id() const;
  void set_online_id(const ::std::string& value);
  #if LANG_CXX11
  void set_online_id(::std::string&& value);
  #endif
  void set_online_id(const char* value);
  void set_online_id(const char* value, size_t size);
  ::std::string* mutable_online_id();
  ::std::string* release_online_id();
  void set_allocated_online_id(::std::string* online_id);

  // string nickname = 15;
  void clear_nickname();
  static const int kNicknameFieldNumber = 15;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // .proto.ProfilePicture profile_picture = 10;
  bool has_profile_picture() const;
  void clear_profile_picture();
  static const int kProfilePictureFieldNumber = 10;
  const ::proto::ProfilePicture& profile_picture() const;
  ::proto::ProfilePicture* mutable_profile_picture();
  ::proto::ProfilePicture* release_profile_picture();
  void set_allocated_profile_picture(::proto::ProfilePicture* profile_picture);

  // uint32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 statistic_id = 4;
  void clear_statistic_id();
  static const int kStatisticIdFieldNumber = 4;
  ::google::protobuf::uint32 statistic_id() const;
  void set_statistic_id(::google::protobuf::uint32 value);

  // int64 param = 5;
  void clear_param();
  static const int kParamFieldNumber = 5;
  ::google::protobuf::int64 param() const;
  void set_param(::google::protobuf::int64 value);

  // uint32 head_image = 11;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 11;
  ::google::protobuf::uint32 head_image() const;
  void set_head_image(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleSettlePlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo > card_list_;
  ::google::protobuf::internal::ArenaStringPtr online_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::proto::ProfilePicture* profile_picture_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 statistic_id_;
  ::google::protobuf::int64 param_;
  ::google::protobuf::uint32 head_image_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayBattleSettleRewardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleSettleRewardInfo) */ {
 public:
  ScenePlayBattleSettleRewardInfo();
  virtual ~ScenePlayBattleSettleRewardInfo();

  ScenePlayBattleSettleRewardInfo(const ScenePlayBattleSettleRewardInfo& from);

  inline ScenePlayBattleSettleRewardInfo& operator=(const ScenePlayBattleSettleRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleSettleRewardInfo(ScenePlayBattleSettleRewardInfo&& from) noexcept
    : ScenePlayBattleSettleRewardInfo() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleSettleRewardInfo& operator=(ScenePlayBattleSettleRewardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleSettleRewardInfo& default_instance();

  static inline const ScenePlayBattleSettleRewardInfo* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleSettleRewardInfo*>(
               &_ScenePlayBattleSettleRewardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(ScenePlayBattleSettleRewardInfo* other);
  friend void swap(ScenePlayBattleSettleRewardInfo& a, ScenePlayBattleSettleRewardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleSettleRewardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleSettleRewardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleSettleRewardInfo& from);
  void MergeFrom(const ScenePlayBattleSettleRewardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleSettleRewardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ItemParam reward_item_list = 4;
  int reward_item_list_size() const;
  void clear_reward_item_list();
  static const int kRewardItemListFieldNumber = 4;
  const ::proto::ItemParam& reward_item_list(int index) const;
  ::proto::ItemParam* mutable_reward_item_list(int index);
  ::proto::ItemParam* add_reward_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_reward_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      reward_item_list() const;

  // uint32 uid = 3;
  void clear_uid();
  static const int kUidFieldNumber = 3;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleSettleRewardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > reward_item_list_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayBattleResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleResultNotify) */ {
 public:
  ScenePlayBattleResultNotify();
  virtual ~ScenePlayBattleResultNotify();

  ScenePlayBattleResultNotify(const ScenePlayBattleResultNotify& from);

  inline ScenePlayBattleResultNotify& operator=(const ScenePlayBattleResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleResultNotify(ScenePlayBattleResultNotify&& from) noexcept
    : ScenePlayBattleResultNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleResultNotify& operator=(ScenePlayBattleResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleResultNotify& default_instance();

  static inline const ScenePlayBattleResultNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleResultNotify*>(
               &_ScenePlayBattleResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ScenePlayBattleResultNotify* other);
  friend void swap(ScenePlayBattleResultNotify& a, ScenePlayBattleResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleResultNotify& from);
  void MergeFrom(const ScenePlayBattleResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
  int settle_player_info_list_size() const;
  void clear_settle_player_info_list();
  static const int kSettlePlayerInfoListFieldNumber = 4;
  const ::proto::ScenePlayBattleSettlePlayerInfo& settle_player_info_list(int index) const;
  ::proto::ScenePlayBattleSettlePlayerInfo* mutable_settle_player_info_list(int index);
  ::proto::ScenePlayBattleSettlePlayerInfo* add_settle_player_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettlePlayerInfo >*
      mutable_settle_player_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettlePlayerInfo >&
      settle_player_info_list() const;

  // repeated .proto.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
  int settle_reward_info_list_size() const;
  void clear_settle_reward_info_list();
  static const int kSettleRewardInfoListFieldNumber = 14;
  const ::proto::ScenePlayBattleSettleRewardInfo& settle_reward_info_list(int index) const;
  ::proto::ScenePlayBattleSettleRewardInfo* mutable_settle_reward_info_list(int index);
  ::proto::ScenePlayBattleSettleRewardInfo* add_settle_reward_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettleRewardInfo >*
      mutable_settle_reward_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettleRewardInfo >&
      settle_reward_info_list() const;

  // bool is_win = 1;
  void clear_is_win();
  static const int kIsWinFieldNumber = 1;
  bool is_win() const;
  void set_is_win(bool value);

  // uint32 cost_time = 7;
  void clear_cost_time();
  static const int kCostTimeFieldNumber = 7;
  ::google::protobuf::uint32 cost_time() const;
  void set_cost_time(::google::protobuf::uint32 value);

  // uint32 play_id = 11;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 11;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // uint32 play_type = 15;
  void clear_play_type();
  static const int kPlayTypeFieldNumber = 15;
  ::google::protobuf::uint32 play_type() const;
  void set_play_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleResultNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettlePlayerInfo > settle_player_info_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettleRewardInfo > settle_reward_info_list_;
  bool is_win_;
  ::google::protobuf::uint32 cost_time_;
  ::google::protobuf::uint32 play_id_;
  ::google::protobuf::uint32 play_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayBattleUidOpNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleUidOpNotify) */ {
 public:
  ScenePlayBattleUidOpNotify();
  virtual ~ScenePlayBattleUidOpNotify();

  ScenePlayBattleUidOpNotify(const ScenePlayBattleUidOpNotify& from);

  inline ScenePlayBattleUidOpNotify& operator=(const ScenePlayBattleUidOpNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleUidOpNotify(ScenePlayBattleUidOpNotify&& from) noexcept
    : ScenePlayBattleUidOpNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleUidOpNotify& operator=(ScenePlayBattleUidOpNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleUidOpNotify& default_instance();

  static inline const ScenePlayBattleUidOpNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleUidOpNotify*>(
               &_ScenePlayBattleUidOpNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ScenePlayBattleUidOpNotify* other);
  friend void swap(ScenePlayBattleUidOpNotify& a, ScenePlayBattleUidOpNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleUidOpNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleUidOpNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleUidOpNotify& from);
  void MergeFrom(const ScenePlayBattleUidOpNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleUidOpNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uid_list = 6;
  int uid_list_size() const;
  void clear_uid_list();
  static const int kUidListFieldNumber = 6;
  ::google::protobuf::uint32 uid_list(int index) const;
  void set_uid_list(int index, ::google::protobuf::uint32 value);
  void add_uid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uid_list();

  // repeated uint32 param_target_list = 9;
  int param_target_list_size() const;
  void clear_param_target_list();
  static const int kParamTargetListFieldNumber = 9;
  ::google::protobuf::uint32 param_target_list(int index) const;
  void set_param_target_list(int index, ::google::protobuf::uint32 value);
  void add_param_target_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_target_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_target_list();

  // repeated uint32 param_list = 15;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 15;
  ::google::protobuf::uint32 param_list(int index) const;
  void set_param_list(int index, ::google::protobuf::uint32 value);
  void add_param_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_list();

  // string param_str = 3;
  void clear_param_str();
  static const int kParamStrFieldNumber = 3;
  const ::std::string& param_str() const;
  void set_param_str(const ::std::string& value);
  #if LANG_CXX11
  void set_param_str(::std::string&& value);
  #endif
  void set_param_str(const char* value);
  void set_param_str(const char* value, size_t size);
  ::std::string* mutable_param_str();
  ::std::string* release_param_str();
  void set_allocated_param_str(::std::string* param_str);

  // uint32 entity_id = 2;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // uint32 play_id = 5;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 5;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // uint32 op = 7;
  void clear_op();
  static const int kOpFieldNumber = 7;
  ::google::protobuf::uint32 op() const;
  void set_op(::google::protobuf::uint32 value);

  // uint32 play_type = 8;
  void clear_play_type();
  static const int kPlayTypeFieldNumber = 8;
  ::google::protobuf::uint32 play_type() const;
  void set_play_type(::google::protobuf::uint32 value);

  // uint32 param_index = 11;
  void clear_param_index();
  static const int kParamIndexFieldNumber = 11;
  ::google::protobuf::uint32 param_index() const;
  void set_param_index(::google::protobuf::uint32 value);

  // uint32 param_duration = 12;
  void clear_param_duration();
  static const int kParamDurationFieldNumber = 12;
  ::google::protobuf::uint32 param_duration() const;
  void set_param_duration(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleUidOpNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uid_list_;
  mutable int _uid_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_target_list_;
  mutable int _param_target_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_list_;
  mutable int _param_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr param_str_;
  ::google::protobuf::uint32 entity_id_;
  ::google::protobuf::uint32 play_id_;
  ::google::protobuf::uint32 op_;
  ::google::protobuf::uint32 play_type_;
  ::google::protobuf::uint32 param_index_;
  ::google::protobuf::uint32 param_duration_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayBattleInfoListNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayBattleInfoListNotify) */ {
 public:
  ScenePlayBattleInfoListNotify();
  virtual ~ScenePlayBattleInfoListNotify();

  ScenePlayBattleInfoListNotify(const ScenePlayBattleInfoListNotify& from);

  inline ScenePlayBattleInfoListNotify& operator=(const ScenePlayBattleInfoListNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayBattleInfoListNotify(ScenePlayBattleInfoListNotify&& from) noexcept
    : ScenePlayBattleInfoListNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayBattleInfoListNotify& operator=(ScenePlayBattleInfoListNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayBattleInfoListNotify& default_instance();

  static inline const ScenePlayBattleInfoListNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayBattleInfoListNotify*>(
               &_ScenePlayBattleInfoListNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(ScenePlayBattleInfoListNotify* other);
  friend void swap(ScenePlayBattleInfoListNotify& a, ScenePlayBattleInfoListNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayBattleInfoListNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayBattleInfoListNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayBattleInfoListNotify& from);
  void MergeFrom(const ScenePlayBattleInfoListNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayBattleInfoListNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ScenePlayBattleInfo battle_info_list = 12;
  int battle_info_list_size() const;
  void clear_battle_info_list();
  static const int kBattleInfoListFieldNumber = 12;
  const ::proto::ScenePlayBattleInfo& battle_info_list(int index) const;
  ::proto::ScenePlayBattleInfo* mutable_battle_info_list(int index);
  ::proto::ScenePlayBattleInfo* add_battle_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleInfo >*
      mutable_battle_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleInfo >&
      battle_info_list() const;

  // @@protoc_insertion_point(class_scope:proto.ScenePlayBattleInfoListNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleInfo > battle_info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScenePlayOutofRegionNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ScenePlayOutofRegionNotify) */ {
 public:
  ScenePlayOutofRegionNotify();
  virtual ~ScenePlayOutofRegionNotify();

  ScenePlayOutofRegionNotify(const ScenePlayOutofRegionNotify& from);

  inline ScenePlayOutofRegionNotify& operator=(const ScenePlayOutofRegionNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScenePlayOutofRegionNotify(ScenePlayOutofRegionNotify&& from) noexcept
    : ScenePlayOutofRegionNotify() {
    *this = ::std::move(from);
  }

  inline ScenePlayOutofRegionNotify& operator=(ScenePlayOutofRegionNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScenePlayOutofRegionNotify& default_instance();

  static inline const ScenePlayOutofRegionNotify* internal_default_instance() {
    return reinterpret_cast<const ScenePlayOutofRegionNotify*>(
               &_ScenePlayOutofRegionNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ScenePlayOutofRegionNotify* other);
  friend void swap(ScenePlayOutofRegionNotify& a, ScenePlayOutofRegionNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScenePlayOutofRegionNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ScenePlayOutofRegionNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ScenePlayOutofRegionNotify& from);
  void MergeFrom(const ScenePlayOutofRegionNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ScenePlayOutofRegionNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 play_id = 13;
  void clear_play_id();
  static const int kPlayIdFieldNumber = 13;
  ::google::protobuf::uint32 play_id() const;
  void set_play_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ScenePlayOutofRegionNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 play_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScenePlayBattleInfo

// uint32 mode = 4;
inline void ScenePlayBattleInfo::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::mode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.mode)
  return mode_;
}
inline void ScenePlayBattleInfo::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.mode)
}

// repeated uint32 progress_stage_list = 3;
inline int ScenePlayBattleInfo::progress_stage_list_size() const {
  return progress_stage_list_.size();
}
inline void ScenePlayBattleInfo::clear_progress_stage_list() {
  progress_stage_list_.Clear();
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::progress_stage_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.progress_stage_list)
  return progress_stage_list_.Get(index);
}
inline void ScenePlayBattleInfo::set_progress_stage_list(int index, ::google::protobuf::uint32 value) {
  progress_stage_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.progress_stage_list)
}
inline void ScenePlayBattleInfo::add_progress_stage_list(::google::protobuf::uint32 value) {
  progress_stage_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleInfo.progress_stage_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleInfo::progress_stage_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleInfo.progress_stage_list)
  return progress_stage_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleInfo::mutable_progress_stage_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleInfo.progress_stage_list)
  return &progress_stage_list_;
}

// uint32 start_time = 10;
inline void ScenePlayBattleInfo::clear_start_time() {
  start_time_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.start_time)
  return start_time_;
}
inline void ScenePlayBattleInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.start_time)
}

// uint32 duration = 14;
inline void ScenePlayBattleInfo::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::duration() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.duration)
  return duration_;
}
inline void ScenePlayBattleInfo::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.duration)
}

// uint32 play_type = 12;
inline void ScenePlayBattleInfo::clear_play_type() {
  play_type_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.play_type)
  return play_type_;
}
inline void ScenePlayBattleInfo::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.play_type)
}

// uint32 play_id = 1;
inline void ScenePlayBattleInfo::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.play_id)
  return play_id_;
}
inline void ScenePlayBattleInfo::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.play_id)
}

// uint32 prepare_end_time = 7;
inline void ScenePlayBattleInfo::clear_prepare_end_time() {
  prepare_end_time_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::prepare_end_time() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.prepare_end_time)
  return prepare_end_time_;
}
inline void ScenePlayBattleInfo::set_prepare_end_time(::google::protobuf::uint32 value) {
  
  prepare_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.prepare_end_time)
}

// uint32 progress = 11;
inline void ScenePlayBattleInfo::clear_progress() {
  progress_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.progress)
  return progress_;
}
inline void ScenePlayBattleInfo::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.progress)
}

// uint32 state = 8;
inline void ScenePlayBattleInfo::clear_state() {
  state_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::state() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.state)
  return state_;
}
inline void ScenePlayBattleInfo::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.state)
}

// uint32 type = 9;
inline void ScenePlayBattleInfo::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.type)
  return type_;
}
inline void ScenePlayBattleInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.type)
}

// -------------------------------------------------------------------

// ScenePlayBattleInfoNotify

// .proto.ScenePlayBattleInfo battle_info = 11;
inline bool ScenePlayBattleInfoNotify::has_battle_info() const {
  return this != internal_default_instance() && battle_info_ != NULL;
}
inline void ScenePlayBattleInfoNotify::clear_battle_info() {
  if (GetArenaNoVirtual() == NULL && battle_info_ != NULL) delete battle_info_;
  battle_info_ = NULL;
}
inline const ::proto::ScenePlayBattleInfo& ScenePlayBattleInfoNotify::battle_info() const {
  const ::proto::ScenePlayBattleInfo* p = battle_info_;
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfoNotify.battle_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ScenePlayBattleInfo*>(
      &::proto::_ScenePlayBattleInfo_default_instance_);
}
inline ::proto::ScenePlayBattleInfo* ScenePlayBattleInfoNotify::mutable_battle_info() {
  
  if (battle_info_ == NULL) {
    battle_info_ = new ::proto::ScenePlayBattleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleInfoNotify.battle_info)
  return battle_info_;
}
inline ::proto::ScenePlayBattleInfo* ScenePlayBattleInfoNotify::release_battle_info() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleInfoNotify.battle_info)
  
  ::proto::ScenePlayBattleInfo* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
inline void ScenePlayBattleInfoNotify::set_allocated_battle_info(::proto::ScenePlayBattleInfo* battle_info) {
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleInfoNotify.battle_info)
}

// -------------------------------------------------------------------

// ScenePlayOwnerCheckReq

// uint32 play_id = 9;
inline void ScenePlayOwnerCheckReq::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOwnerCheckReq::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckReq.play_id)
  return play_id_;
}
inline void ScenePlayOwnerCheckReq::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckReq.play_id)
}

// bool is_skip_match = 6;
inline void ScenePlayOwnerCheckReq::clear_is_skip_match() {
  is_skip_match_ = false;
}
inline bool ScenePlayOwnerCheckReq::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckReq.is_skip_match)
  return is_skip_match_;
}
inline void ScenePlayOwnerCheckReq::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckReq.is_skip_match)
}

// -------------------------------------------------------------------

// ScenePlayOwnerCheckRsp

// repeated uint32 param_list = 8;
inline int ScenePlayOwnerCheckRsp::param_list_size() const {
  return param_list_.size();
}
inline void ScenePlayOwnerCheckRsp::clear_param_list() {
  param_list_.Clear();
}
inline ::google::protobuf::uint32 ScenePlayOwnerCheckRsp::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.param_list)
  return param_list_.Get(index);
}
inline void ScenePlayOwnerCheckRsp::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.param_list)
}
inline void ScenePlayOwnerCheckRsp::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayOwnerCheckRsp.param_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayOwnerCheckRsp::param_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayOwnerCheckRsp.param_list)
  return param_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayOwnerCheckRsp::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayOwnerCheckRsp.param_list)
  return &param_list_;
}

// bool is_skip_match = 1;
inline void ScenePlayOwnerCheckRsp::clear_is_skip_match() {
  is_skip_match_ = false;
}
inline bool ScenePlayOwnerCheckRsp::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.is_skip_match)
  return is_skip_match_;
}
inline void ScenePlayOwnerCheckRsp::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.is_skip_match)
}

// uint32 play_id = 9;
inline void ScenePlayOwnerCheckRsp::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOwnerCheckRsp::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.play_id)
  return play_id_;
}
inline void ScenePlayOwnerCheckRsp::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.play_id)
}

// uint32 wrong_uid = 5;
inline void ScenePlayOwnerCheckRsp::clear_wrong_uid() {
  wrong_uid_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOwnerCheckRsp::wrong_uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.wrong_uid)
  return wrong_uid_;
}
inline void ScenePlayOwnerCheckRsp::set_wrong_uid(::google::protobuf::uint32 value) {
  
  wrong_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.wrong_uid)
}

// int32 retcode = 3;
inline void ScenePlayOwnerCheckRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 ScenePlayOwnerCheckRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.retcode)
  return retcode_;
}
inline void ScenePlayOwnerCheckRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.retcode)
}

// -------------------------------------------------------------------

// ScenePlayOwnerStartInviteReq

// bool is_skip_match = 8;
inline void ScenePlayOwnerStartInviteReq::clear_is_skip_match() {
  is_skip_match_ = false;
}
inline bool ScenePlayOwnerStartInviteReq::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteReq.is_skip_match)
  return is_skip_match_;
}
inline void ScenePlayOwnerStartInviteReq::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteReq.is_skip_match)
}

// uint32 play_id = 13;
inline void ScenePlayOwnerStartInviteReq::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOwnerStartInviteReq::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteReq.play_id)
  return play_id_;
}
inline void ScenePlayOwnerStartInviteReq::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteReq.play_id)
}

// -------------------------------------------------------------------

// ScenePlayOwnerStartInviteRsp

// bool is_skip_match = 7;
inline void ScenePlayOwnerStartInviteRsp::clear_is_skip_match() {
  is_skip_match_ = false;
}
inline bool ScenePlayOwnerStartInviteRsp::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteRsp.is_skip_match)
  return is_skip_match_;
}
inline void ScenePlayOwnerStartInviteRsp::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteRsp.is_skip_match)
}

// int32 retcode = 15;
inline void ScenePlayOwnerStartInviteRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 ScenePlayOwnerStartInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteRsp.retcode)
  return retcode_;
}
inline void ScenePlayOwnerStartInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteRsp.retcode)
}

// uint32 play_id = 11;
inline void ScenePlayOwnerStartInviteRsp::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOwnerStartInviteRsp::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteRsp.play_id)
  return play_id_;
}
inline void ScenePlayOwnerStartInviteRsp::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteRsp.play_id)
}

// -------------------------------------------------------------------

// ScenePlayOwnerInviteNotify

// uint32 invite_cd = 14;
inline void ScenePlayOwnerInviteNotify::clear_invite_cd() {
  invite_cd_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOwnerInviteNotify::invite_cd() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerInviteNotify.invite_cd)
  return invite_cd_;
}
inline void ScenePlayOwnerInviteNotify::set_invite_cd(::google::protobuf::uint32 value) {
  
  invite_cd_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerInviteNotify.invite_cd)
}

// uint32 play_id = 5;
inline void ScenePlayOwnerInviteNotify::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOwnerInviteNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerInviteNotify.play_id)
  return play_id_;
}
inline void ScenePlayOwnerInviteNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerInviteNotify.play_id)
}

// bool is_remain_reward = 15;
inline void ScenePlayOwnerInviteNotify::clear_is_remain_reward() {
  is_remain_reward_ = false;
}
inline bool ScenePlayOwnerInviteNotify::is_remain_reward() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerInviteNotify.is_remain_reward)
  return is_remain_reward_;
}
inline void ScenePlayOwnerInviteNotify::set_is_remain_reward(bool value) {
  
  is_remain_reward_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerInviteNotify.is_remain_reward)
}

// -------------------------------------------------------------------

// ScenePlayGuestReplyInviteReq

// bool is_agree = 15;
inline void ScenePlayGuestReplyInviteReq::clear_is_agree() {
  is_agree_ = false;
}
inline bool ScenePlayGuestReplyInviteReq::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteReq.is_agree)
  return is_agree_;
}
inline void ScenePlayGuestReplyInviteReq::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteReq.is_agree)
}

// uint32 play_id = 6;
inline void ScenePlayGuestReplyInviteReq::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayGuestReplyInviteReq::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteReq.play_id)
  return play_id_;
}
inline void ScenePlayGuestReplyInviteReq::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteReq.play_id)
}

// -------------------------------------------------------------------

// ScenePlayGuestReplyInviteRsp

// int32 retcode = 6;
inline void ScenePlayGuestReplyInviteRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 ScenePlayGuestReplyInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteRsp.retcode)
  return retcode_;
}
inline void ScenePlayGuestReplyInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteRsp.retcode)
}

// bool is_agree = 2;
inline void ScenePlayGuestReplyInviteRsp::clear_is_agree() {
  is_agree_ = false;
}
inline bool ScenePlayGuestReplyInviteRsp::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteRsp.is_agree)
  return is_agree_;
}
inline void ScenePlayGuestReplyInviteRsp::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteRsp.is_agree)
}

// uint32 play_id = 8;
inline void ScenePlayGuestReplyInviteRsp::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayGuestReplyInviteRsp::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteRsp.play_id)
  return play_id_;
}
inline void ScenePlayGuestReplyInviteRsp::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteRsp.play_id)
}

// -------------------------------------------------------------------

// ScenePlayGuestReplyNotify

// uint32 play_id = 13;
inline void ScenePlayGuestReplyNotify::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayGuestReplyNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyNotify.play_id)
  return play_id_;
}
inline void ScenePlayGuestReplyNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyNotify.play_id)
}

// uint32 guest_uid = 12;
inline void ScenePlayGuestReplyNotify::clear_guest_uid() {
  guest_uid_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayGuestReplyNotify::guest_uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyNotify.guest_uid)
  return guest_uid_;
}
inline void ScenePlayGuestReplyNotify::set_guest_uid(::google::protobuf::uint32 value) {
  
  guest_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyNotify.guest_uid)
}

// bool is_agree = 3;
inline void ScenePlayGuestReplyNotify::clear_is_agree() {
  is_agree_ = false;
}
inline bool ScenePlayGuestReplyNotify::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyNotify.is_agree)
  return is_agree_;
}
inline void ScenePlayGuestReplyNotify::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyNotify.is_agree)
}

// -------------------------------------------------------------------

// ScenePlayInviteResultNotify

// bool is_all_argee = 11;
inline void ScenePlayInviteResultNotify::clear_is_all_argee() {
  is_all_argee_ = false;
}
inline bool ScenePlayInviteResultNotify::is_all_argee() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInviteResultNotify.is_all_argee)
  return is_all_argee_;
}
inline void ScenePlayInviteResultNotify::set_is_all_argee(bool value) {
  
  is_all_argee_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInviteResultNotify.is_all_argee)
}

// uint32 play_id = 15;
inline void ScenePlayInviteResultNotify::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayInviteResultNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInviteResultNotify.play_id)
  return play_id_;
}
inline void ScenePlayInviteResultNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInviteResultNotify.play_id)
}

// -------------------------------------------------------------------

// ScenePlayInfo

// uint32 entry_id = 15;
inline void ScenePlayInfo::clear_entry_id() {
  entry_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayInfo::entry_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.entry_id)
  return entry_id_;
}
inline void ScenePlayInfo::set_entry_id(::google::protobuf::uint32 value) {
  
  entry_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.entry_id)
}

// uint32 play_id = 11;
inline void ScenePlayInfo::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayInfo::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.play_id)
  return play_id_;
}
inline void ScenePlayInfo::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.play_id)
}

// uint32 play_type = 3;
inline void ScenePlayInfo::clear_play_type() {
  play_type_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayInfo::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.play_type)
  return play_type_;
}
inline void ScenePlayInfo::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.play_type)
}

// bool is_open = 9;
inline void ScenePlayInfo::clear_is_open() {
  is_open_ = false;
}
inline bool ScenePlayInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.is_open)
  return is_open_;
}
inline void ScenePlayInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.is_open)
}

// -------------------------------------------------------------------

// ScenePlayInfoListNotify

// repeated .proto.ScenePlayInfo play_info_list = 6;
inline int ScenePlayInfoListNotify::play_info_list_size() const {
  return play_info_list_.size();
}
inline void ScenePlayInfoListNotify::clear_play_info_list() {
  play_info_list_.Clear();
}
inline const ::proto::ScenePlayInfo& ScenePlayInfoListNotify::play_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_.Get(index);
}
inline ::proto::ScenePlayInfo* ScenePlayInfoListNotify::mutable_play_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_.Mutable(index);
}
inline ::proto::ScenePlayInfo* ScenePlayInfoListNotify::add_play_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayInfo >*
ScenePlayInfoListNotify::mutable_play_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayInfoListNotify.play_info_list)
  return &play_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayInfo >&
ScenePlayInfoListNotify::play_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_;
}

// -------------------------------------------------------------------

// ScenePlayBattleInterruptNotify

// uint32 interrupt_state = 6;
inline void ScenePlayBattleInterruptNotify::clear_interrupt_state() {
  interrupt_state_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInterruptNotify::interrupt_state() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInterruptNotify.interrupt_state)
  return interrupt_state_;
}
inline void ScenePlayBattleInterruptNotify::set_interrupt_state(::google::protobuf::uint32 value) {
  
  interrupt_state_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInterruptNotify.interrupt_state)
}

// uint32 play_id = 5;
inline void ScenePlayBattleInterruptNotify::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInterruptNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInterruptNotify.play_id)
  return play_id_;
}
inline void ScenePlayBattleInterruptNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInterruptNotify.play_id)
}

// uint32 play_type = 1;
inline void ScenePlayBattleInterruptNotify::clear_play_type() {
  play_type_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleInterruptNotify::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInterruptNotify.play_type)
  return play_type_;
}
inline void ScenePlayBattleInterruptNotify::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInterruptNotify.play_type)
}

// -------------------------------------------------------------------

// ScenePlayBattleSettlePlayerInfo

// repeated .proto.ExhibitionDisplayInfo card_list = 14;
inline int ScenePlayBattleSettlePlayerInfo::card_list_size() const {
  return card_list_.size();
}
inline void ScenePlayBattleSettlePlayerInfo::clear_card_list() {
  card_list_.Clear();
}
inline const ::proto::ExhibitionDisplayInfo& ScenePlayBattleSettlePlayerInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_.Get(index);
}
inline ::proto::ExhibitionDisplayInfo* ScenePlayBattleSettlePlayerInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_.Mutable(index);
}
inline ::proto::ExhibitionDisplayInfo* ScenePlayBattleSettlePlayerInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
ScenePlayBattleSettlePlayerInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return &card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
ScenePlayBattleSettlePlayerInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_;
}

// .proto.ProfilePicture profile_picture = 10;
inline bool ScenePlayBattleSettlePlayerInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
inline void ScenePlayBattleSettlePlayerInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
inline const ::proto::ProfilePicture& ScenePlayBattleSettlePlayerInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
inline ::proto::ProfilePicture* ScenePlayBattleSettlePlayerInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
  return profile_picture_;
}
inline ::proto::ProfilePicture* ScenePlayBattleSettlePlayerInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
inline void ScenePlayBattleSettlePlayerInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
}

// uint32 head_image = 11;
inline void ScenePlayBattleSettlePlayerInfo::clear_head_image() {
  head_image_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleSettlePlayerInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.head_image)
  return head_image_;
}
inline void ScenePlayBattleSettlePlayerInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.head_image)
}

// uint32 statistic_id = 4;
inline void ScenePlayBattleSettlePlayerInfo::clear_statistic_id() {
  statistic_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleSettlePlayerInfo::statistic_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.statistic_id)
  return statistic_id_;
}
inline void ScenePlayBattleSettlePlayerInfo::set_statistic_id(::google::protobuf::uint32 value) {
  
  statistic_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.statistic_id)
}

// uint32 uid = 1;
inline void ScenePlayBattleSettlePlayerInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleSettlePlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.uid)
  return uid_;
}
inline void ScenePlayBattleSettlePlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.uid)
}

// int64 param = 5;
inline void ScenePlayBattleSettlePlayerInfo::clear_param() {
  param_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ScenePlayBattleSettlePlayerInfo::param() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.param)
  return param_;
}
inline void ScenePlayBattleSettlePlayerInfo::set_param(::google::protobuf::int64 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.param)
}

// string online_id = 12;
inline void ScenePlayBattleSettlePlayerInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScenePlayBattleSettlePlayerInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.online_id)
  return online_id_.GetNoArena();
}
inline void ScenePlayBattleSettlePlayerInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
#if LANG_CXX11
inline void ScenePlayBattleSettlePlayerInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
#endif
inline void ScenePlayBattleSettlePlayerInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
inline void ScenePlayBattleSettlePlayerInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
inline ::std::string* ScenePlayBattleSettlePlayerInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenePlayBattleSettlePlayerInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleSettlePlayerInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenePlayBattleSettlePlayerInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}

// string nickname = 15;
inline void ScenePlayBattleSettlePlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScenePlayBattleSettlePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.nickname)
  return nickname_.GetNoArena();
}
inline void ScenePlayBattleSettlePlayerInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
#if LANG_CXX11
inline void ScenePlayBattleSettlePlayerInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
#endif
inline void ScenePlayBattleSettlePlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
inline void ScenePlayBattleSettlePlayerInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
inline ::std::string* ScenePlayBattleSettlePlayerInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenePlayBattleSettlePlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleSettlePlayerInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenePlayBattleSettlePlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}

// -------------------------------------------------------------------

// ScenePlayBattleSettleRewardInfo

// repeated .proto.ItemParam reward_item_list = 4;
inline int ScenePlayBattleSettleRewardInfo::reward_item_list_size() const {
  return reward_item_list_.size();
}
inline void ScenePlayBattleSettleRewardInfo::clear_reward_item_list() {
  reward_item_list_.Clear();
}
inline const ::proto::ItemParam& ScenePlayBattleSettleRewardInfo::reward_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_.Get(index);
}
inline ::proto::ItemParam* ScenePlayBattleSettleRewardInfo::mutable_reward_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_.Mutable(index);
}
inline ::proto::ItemParam* ScenePlayBattleSettleRewardInfo::add_reward_item_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
ScenePlayBattleSettleRewardInfo::mutable_reward_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return &reward_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
ScenePlayBattleSettleRewardInfo::reward_item_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_;
}

// uint32 uid = 3;
inline void ScenePlayBattleSettleRewardInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleSettleRewardInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettleRewardInfo.uid)
  return uid_;
}
inline void ScenePlayBattleSettleRewardInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettleRewardInfo.uid)
}

// -------------------------------------------------------------------

// ScenePlayBattleResultNotify

// bool is_win = 1;
inline void ScenePlayBattleResultNotify::clear_is_win() {
  is_win_ = false;
}
inline bool ScenePlayBattleResultNotify::is_win() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.is_win)
  return is_win_;
}
inline void ScenePlayBattleResultNotify::set_is_win(bool value) {
  
  is_win_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.is_win)
}

// uint32 cost_time = 7;
inline void ScenePlayBattleResultNotify::clear_cost_time() {
  cost_time_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleResultNotify::cost_time() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.cost_time)
  return cost_time_;
}
inline void ScenePlayBattleResultNotify::set_cost_time(::google::protobuf::uint32 value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.cost_time)
}

// uint32 play_type = 15;
inline void ScenePlayBattleResultNotify::clear_play_type() {
  play_type_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleResultNotify::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.play_type)
  return play_type_;
}
inline void ScenePlayBattleResultNotify::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.play_type)
}

// uint32 play_id = 11;
inline void ScenePlayBattleResultNotify::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleResultNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.play_id)
  return play_id_;
}
inline void ScenePlayBattleResultNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.play_id)
}

// repeated .proto.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
inline int ScenePlayBattleResultNotify::settle_player_info_list_size() const {
  return settle_player_info_list_.size();
}
inline void ScenePlayBattleResultNotify::clear_settle_player_info_list() {
  settle_player_info_list_.Clear();
}
inline const ::proto::ScenePlayBattleSettlePlayerInfo& ScenePlayBattleResultNotify::settle_player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_.Get(index);
}
inline ::proto::ScenePlayBattleSettlePlayerInfo* ScenePlayBattleResultNotify::mutable_settle_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_.Mutable(index);
}
inline ::proto::ScenePlayBattleSettlePlayerInfo* ScenePlayBattleResultNotify::add_settle_player_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettlePlayerInfo >*
ScenePlayBattleResultNotify::mutable_settle_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return &settle_player_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettlePlayerInfo >&
ScenePlayBattleResultNotify::settle_player_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_;
}

// repeated .proto.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
inline int ScenePlayBattleResultNotify::settle_reward_info_list_size() const {
  return settle_reward_info_list_.size();
}
inline void ScenePlayBattleResultNotify::clear_settle_reward_info_list() {
  settle_reward_info_list_.Clear();
}
inline const ::proto::ScenePlayBattleSettleRewardInfo& ScenePlayBattleResultNotify::settle_reward_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_.Get(index);
}
inline ::proto::ScenePlayBattleSettleRewardInfo* ScenePlayBattleResultNotify::mutable_settle_reward_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_.Mutable(index);
}
inline ::proto::ScenePlayBattleSettleRewardInfo* ScenePlayBattleResultNotify::add_settle_reward_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettleRewardInfo >*
ScenePlayBattleResultNotify::mutable_settle_reward_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return &settle_reward_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettleRewardInfo >&
ScenePlayBattleResultNotify::settle_reward_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_;
}

// -------------------------------------------------------------------

// ScenePlayBattleUidOpNotify

// uint32 op = 7;
inline void ScenePlayBattleUidOpNotify::clear_op() {
  op_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::op() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.op)
  return op_;
}
inline void ScenePlayBattleUidOpNotify::set_op(::google::protobuf::uint32 value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.op)
}

// repeated uint32 param_target_list = 9;
inline int ScenePlayBattleUidOpNotify::param_target_list_size() const {
  return param_target_list_.size();
}
inline void ScenePlayBattleUidOpNotify::clear_param_target_list() {
  param_target_list_.Clear();
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_target_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_target_list)
  return param_target_list_.Get(index);
}
inline void ScenePlayBattleUidOpNotify::set_param_target_list(int index, ::google::protobuf::uint32 value) {
  param_target_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_target_list)
}
inline void ScenePlayBattleUidOpNotify::add_param_target_list(::google::protobuf::uint32 value) {
  param_target_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleUidOpNotify.param_target_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleUidOpNotify::param_target_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleUidOpNotify.param_target_list)
  return param_target_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleUidOpNotify::mutable_param_target_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleUidOpNotify.param_target_list)
  return &param_target_list_;
}

// uint32 entity_id = 2;
inline void ScenePlayBattleUidOpNotify::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.entity_id)
  return entity_id_;
}
inline void ScenePlayBattleUidOpNotify::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.entity_id)
}

// string param_str = 3;
inline void ScenePlayBattleUidOpNotify::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScenePlayBattleUidOpNotify::param_str() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_str)
  return param_str_.GetNoArena();
}
inline void ScenePlayBattleUidOpNotify::set_param_str(const ::std::string& value) {
  
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_str)
}
#if LANG_CXX11
inline void ScenePlayBattleUidOpNotify::set_param_str(::std::string&& value) {
  
  param_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ScenePlayBattleUidOpNotify.param_str)
}
#endif
inline void ScenePlayBattleUidOpNotify::set_param_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ScenePlayBattleUidOpNotify.param_str)
}
inline void ScenePlayBattleUidOpNotify::set_param_str(const char* value, size_t size) {
  
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ScenePlayBattleUidOpNotify.param_str)
}
inline ::std::string* ScenePlayBattleUidOpNotify::mutable_param_str() {
  
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleUidOpNotify.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScenePlayBattleUidOpNotify::release_param_str() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleUidOpNotify.param_str)
  
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScenePlayBattleUidOpNotify::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    
  } else {
    
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleUidOpNotify.param_str)
}

// repeated uint32 uid_list = 6;
inline int ScenePlayBattleUidOpNotify::uid_list_size() const {
  return uid_list_.size();
}
inline void ScenePlayBattleUidOpNotify::clear_uid_list() {
  uid_list_.Clear();
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.uid_list)
  return uid_list_.Get(index);
}
inline void ScenePlayBattleUidOpNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.uid_list)
}
inline void ScenePlayBattleUidOpNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleUidOpNotify.uid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleUidOpNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleUidOpNotify.uid_list)
  return uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleUidOpNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleUidOpNotify.uid_list)
  return &uid_list_;
}

// uint32 param_index = 11;
inline void ScenePlayBattleUidOpNotify::clear_param_index() {
  param_index_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_index() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_index)
  return param_index_;
}
inline void ScenePlayBattleUidOpNotify::set_param_index(::google::protobuf::uint32 value) {
  
  param_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_index)
}

// uint32 play_type = 8;
inline void ScenePlayBattleUidOpNotify::clear_play_type() {
  play_type_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.play_type)
  return play_type_;
}
inline void ScenePlayBattleUidOpNotify::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.play_type)
}

// uint32 param_duration = 12;
inline void ScenePlayBattleUidOpNotify::clear_param_duration() {
  param_duration_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_duration() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_duration)
  return param_duration_;
}
inline void ScenePlayBattleUidOpNotify::set_param_duration(::google::protobuf::uint32 value) {
  
  param_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_duration)
}

// repeated uint32 param_list = 15;
inline int ScenePlayBattleUidOpNotify::param_list_size() const {
  return param_list_.size();
}
inline void ScenePlayBattleUidOpNotify::clear_param_list() {
  param_list_.Clear();
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_list)
  return param_list_.Get(index);
}
inline void ScenePlayBattleUidOpNotify::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_list)
}
inline void ScenePlayBattleUidOpNotify::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleUidOpNotify.param_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleUidOpNotify::param_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleUidOpNotify.param_list)
  return param_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleUidOpNotify::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleUidOpNotify.param_list)
  return &param_list_;
}

// uint32 play_id = 5;
inline void ScenePlayBattleUidOpNotify::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayBattleUidOpNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.play_id)
  return play_id_;
}
inline void ScenePlayBattleUidOpNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.play_id)
}

// -------------------------------------------------------------------

// ScenePlayBattleInfoListNotify

// repeated .proto.ScenePlayBattleInfo battle_info_list = 12;
inline int ScenePlayBattleInfoListNotify::battle_info_list_size() const {
  return battle_info_list_.size();
}
inline void ScenePlayBattleInfoListNotify::clear_battle_info_list() {
  battle_info_list_.Clear();
}
inline const ::proto::ScenePlayBattleInfo& ScenePlayBattleInfoListNotify::battle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_.Get(index);
}
inline ::proto::ScenePlayBattleInfo* ScenePlayBattleInfoListNotify::mutable_battle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_.Mutable(index);
}
inline ::proto::ScenePlayBattleInfo* ScenePlayBattleInfoListNotify::add_battle_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleInfo >*
ScenePlayBattleInfoListNotify::mutable_battle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return &battle_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleInfo >&
ScenePlayBattleInfoListNotify::battle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_;
}

// -------------------------------------------------------------------

// ScenePlayOutofRegionNotify

// uint32 play_id = 13;
inline void ScenePlayOutofRegionNotify::clear_play_id() {
  play_id_ = 0u;
}
inline ::google::protobuf::uint32 ScenePlayOutofRegionNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOutofRegionNotify.play_id)
  return play_id_;
}
inline void ScenePlayOutofRegionNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOutofRegionNotify.play_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::ScenePlayBattleState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::ScenePlayBattleState>() {
  return ::proto::ScenePlayBattleState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fscene_5fplay_2eproto__INCLUDED
