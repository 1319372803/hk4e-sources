// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_gallery.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_gallery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class GalleryFlowerStartParamDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryFlowerStartParam>
     _instance;
} _GalleryFlowerStartParam_default_instance_;
class GalleryStartNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryStartNotify>
     _instance;
  const ::proto::GalleryFlowerStartParam* flower_start_param_;
} _GalleryStartNotify_default_instance_;
class GalleryBalloonShootNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryBalloonShootNotify>
     _instance;
} _GalleryBalloonShootNotify_default_instance_;
class GalleryBalloonScoreNotify_UidScoreMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryBalloonScoreNotify::GalleryBalloonScoreNotify_UidScoreMapEntry>
     _instance;
} _GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_;
class GalleryBalloonScoreNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryBalloonScoreNotify>
     _instance;
} _GalleryBalloonScoreNotify_default_instance_;
class BalloonSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BalloonSettleInfo>
     _instance;
} _BalloonSettleInfo_default_instance_;
class GalleryStopNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryStopNotify>
     _instance;
} _GalleryStopNotify_default_instance_;
class FallSettleInfo_FlowerRingCatchCountMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FallSettleInfo::FallSettleInfo_FlowerRingCatchCountMapEntry>
     _instance;
} _FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_;
class FallSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FallSettleInfo>
     _instance;
} _FallSettleInfo_default_instance_;
class GalleryFallCatchNotify_BallCatchCountMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryFallCatchNotify::GalleryFallCatchNotify_BallCatchCountMapEntry>
     _instance;
} _GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_;
class GalleryFallCatchNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryFallCatchNotify>
     _instance;
} _GalleryFallCatchNotify_default_instance_;
class FallPlayerBriefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FallPlayerBrief>
     _instance;
} _FallPlayerBrief_default_instance_;
class GalleryFallScoreNotify_UidBriefMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryFallScoreNotify::GalleryFallScoreNotify_UidBriefMapEntry>
     _instance;
} _GalleryFallScoreNotify_UidBriefMapEntry_default_instance_;
class GalleryFallScoreNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryFallScoreNotify>
     _instance;
} _GalleryFallScoreNotify_default_instance_;
class BalloonPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BalloonPlayerInfo>
     _instance;
} _BalloonPlayerInfo_default_instance_;
class FallPlayerInfo_BallCatchCountMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FallPlayerInfo::FallPlayerInfo_BallCatchCountMapEntry>
     _instance;
} _FallPlayerInfo_BallCatchCountMapEntry_default_instance_;
class FallPlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FallPlayerInfo>
     _instance;
} _FallPlayerInfo_default_instance_;
class SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBalloonInfo::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry>
     _instance;
} _SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_;
class SceneGalleryBalloonInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBalloonInfo>
     _instance;
} _SceneGalleryBalloonInfo_default_instance_;
class SceneGalleryFallInfo_ScenePlayerFallInfoMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryFallInfo::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry>
     _instance;
} _SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_;
class SceneGalleryFallInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryFallInfo>
     _instance;
} _SceneGalleryFallInfo_default_instance_;
class SceneGalleryFlowerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryFlowerInfo>
     _instance;
} _SceneGalleryFlowerInfo_default_instance_;
class SceneGalleryBulletInfo_HitCountMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBulletInfo::SceneGalleryBulletInfo_HitCountMapEntry>
     _instance;
} _SceneGalleryBulletInfo_HitCountMapEntry_default_instance_;
class SceneGalleryBulletInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBulletInfo>
     _instance;
} _SceneGalleryBulletInfo_default_instance_;
class SceneGalleryBrokenFloorInfo_FallCountMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo_FallCountMapEntry>
     _instance;
} _SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_;
class SceneGalleryBrokenFloorInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBrokenFloorInfo>
     _instance;
} _SceneGalleryBrokenFloorInfo_default_instance_;
class SceneGalleryHideAndSeekInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryHideAndSeekInfo>
     _instance;
} _SceneGalleryHideAndSeekInfo_default_instance_;
class SceneGalleryBuoyantCombatInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBuoyantCombatInfo>
     _instance;
} _SceneGalleryBuoyantCombatInfo_default_instance_;
class SceneGalleryProgressInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryProgressInfo>
     _instance;
} _SceneGalleryProgressInfo_default_instance_;
class SceneGalleryBounceConjuringInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBounceConjuringInfo>
     _instance;
} _SceneGalleryBounceConjuringInfo_default_instance_;
class SceneGalleryHandballInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryHandballInfo>
     _instance;
} _SceneGalleryHandballInfo_default_instance_;
class SceneGallerySumoInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGallerySumoInfo>
     _instance;
} _SceneGallerySumoInfo_default_instance_;
class SceneGallerySalvagePreventInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGallerySalvagePreventInfo>
     _instance;
} _SceneGallerySalvagePreventInfo_default_instance_;
class SceneGallerySalvageEscortInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGallerySalvageEscortInfo>
     _instance;
} _SceneGallerySalvageEscortInfo_default_instance_;
class SceneGalleryCrystalLinkInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryCrystalLinkInfo>
     _instance;
} _SceneGalleryCrystalLinkInfo_default_instance_;
class SceneGalleryIrodoriMasterInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryIrodoriMasterInfo>
     _instance;
} _SceneGalleryIrodoriMasterInfo_default_instance_;
class SceneGalleryHomeBalloonInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryHomeBalloonInfo>
     _instance;
} _SceneGalleryHomeBalloonInfo_default_instance_;
class SceneGalleryLuminanceStoneChallengeInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryLuminanceStoneChallengeInfo>
     _instance;
} _SceneGalleryLuminanceStoneChallengeInfo_default_instance_;
class SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry>
     _instance;
} _SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_;
class SceneGalleryHomeSeekFurnitureInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryHomeSeekFurnitureInfo>
     _instance;
} _SceneGalleryHomeSeekFurnitureInfo_default_instance_;
class SceneGalleryIslandPartyDownHillInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryIslandPartyDownHillInfo>
     _instance;
} _SceneGalleryIslandPartyDownHillInfo_default_instance_;
class SceneGallerySummerTimeV2BoatInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGallerySummerTimeV2BoatInfo>
     _instance;
} _SceneGallerySummerTimeV2BoatInfo_default_instance_;
class SceneGalleryIslandPartyRaftInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryIslandPartyRaftInfo>
     _instance;
} _SceneGalleryIslandPartyRaftInfo_default_instance_;
class SceneGalleryIslandPartySailInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryIslandPartySailInfo>
     _instance;
} _SceneGalleryIslandPartySailInfo_default_instance_;
class SceneGalleryInstableSprayBuffInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryInstableSprayBuffInfo>
     _instance;
} _SceneGalleryInstableSprayBuffInfo_default_instance_;
class SceneGalleryInstaleSprayInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryInstaleSprayInfo>
     _instance;
} _SceneGalleryInstaleSprayInfo_default_instance_;
class SceneGalleryTreasureSeelieInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryTreasureSeelieInfo>
     _instance;
} _SceneGalleryTreasureSeelieInfo_default_instance_;
class SceneGalleryWindFieldInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryWindFieldInfo>
     _instance;
} _SceneGalleryWindFieldInfo_default_instance_;
class SceneGalleryFungusFighterTrainingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryFungusFighterTrainingInfo>
     _instance;
} _SceneGalleryFungusFighterTrainingInfo_default_instance_;
class SceneGalleryFungusFighterCaptureInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryFungusFighterCaptureInfo>
     _instance;
} _SceneGalleryFungusFighterCaptureInfo_default_instance_;
class SceneGalleryEffigyChallengeV2InfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryEffigyChallengeV2Info>
     _instance;
} _SceneGalleryEffigyChallengeV2Info_default_instance_;
class SceneGalleryCharAmusementInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryCharAmusementInfo>
     _instance;
} _SceneGalleryCharAmusementInfo_default_instance_;
class SceneGalleryBrickBreakerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryBrickBreakerInfo>
     _instance;
} _SceneGalleryBrickBreakerInfo_default_instance_;
class SceneGalleryCoinCollectInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryCoinCollectInfo>
     _instance;
} _SceneGalleryCoinCollectInfo_default_instance_;
class SceneGalleryTeamChainInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryTeamChainInfo>
     _instance;
} _SceneGalleryTeamChainInfo_default_instance_;
class SceneGalleryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryInfo>
     _instance;
  const ::proto::SceneGalleryBalloonInfo* balloon_info_;
  const ::proto::SceneGalleryFallInfo* fall_info_;
  const ::proto::SceneGalleryFlowerInfo* flower_info_;
  const ::proto::SceneGalleryBulletInfo* bullet_info_;
  const ::proto::SceneGalleryBrokenFloorInfo* broken_floor_info_;
  const ::proto::SceneGalleryHideAndSeekInfo* hide_and_seek_info_;
  const ::proto::SceneGalleryBuoyantCombatInfo* buoyant_combat_info_;
  const ::proto::SceneGalleryBounceConjuringInfo* bounce_conjuring_info_;
  const ::proto::SceneGalleryHandballInfo* handball_info_;
  const ::proto::SceneGallerySumoInfo* sumo_info_;
  const ::proto::SceneGallerySalvagePreventInfo* salvage_prevent_info_;
  const ::proto::SceneGallerySalvageEscortInfo* salvage_escort_info_;
  const ::proto::SceneGalleryHomeBalloonInfo* home_balloon_info_;
  const ::proto::SceneGalleryCrystalLinkInfo* crystal_link_info_;
  const ::proto::SceneGalleryIrodoriMasterInfo* irodori_master_info_;
  const ::proto::SceneGalleryLuminanceStoneChallengeInfo* luminance_stone_challenge_info_;
  const ::proto::SceneGalleryHomeSeekFurnitureInfo* home_seek_furniture_info_;
  const ::proto::SceneGalleryIslandPartyDownHillInfo* island_party_down_hill_info_;
  const ::proto::SceneGallerySummerTimeV2BoatInfo* summer_time_v2_boat_info_;
  const ::proto::SceneGalleryIslandPartyRaftInfo* island_party_raft_info_;
  const ::proto::SceneGalleryIslandPartySailInfo* island_party_sail_info_;
  const ::proto::SceneGalleryInstaleSprayInfo* instable_spray_info_;
  const ::proto::SceneGalleryMuqadasPotionInfo* muqadas_potion_info_;
  const ::proto::SceneGalleryTreasureSeelieInfo* treasure_seelie_info_;
  const ::proto::SceneGalleryVintageHuntingInfo* vintage_hunting_info_;
  const ::proto::SceneGalleryWindFieldInfo* wind_field_info_;
  const ::proto::SceneGalleryFungusFighterTrainingInfo* fungus_fighter_training_info_;
  const ::proto::SceneGalleryEffigyChallengeV2Info* effigy_challenge_info_;
  const ::proto::SceneGalleryFungusFighterCaptureInfo* fungus_fighter_capture_info_;
  const ::proto::SceneGalleryCharAmusementInfo* char_amusement_info_;
  const ::proto::SceneGalleryBrickBreakerInfo* brick_breaker_info_;
  const ::proto::SceneGalleryCoinCollectInfo* coin_collect_info_;
  const ::proto::SceneGalleryTeamChainInfo* team_chain_info_;
} _SceneGalleryInfo_default_instance_;
class GetAllSceneGalleryInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAllSceneGalleryInfoReq>
     _instance;
} _GetAllSceneGalleryInfoReq_default_instance_;
class GetAllSceneGalleryInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAllSceneGalleryInfoRsp>
     _instance;
} _GetAllSceneGalleryInfoRsp_default_instance_;
class GalleryFlowerCatchNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryFlowerCatchNotify>
     _instance;
} _GalleryFlowerCatchNotify_default_instance_;
class GalleryPreStartNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryPreStartNotify>
     _instance;
} _GalleryPreStartNotify_default_instance_;
class GalleryBulletHitNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryBulletHitNotify>
     _instance;
} _GalleryBulletHitNotify_default_instance_;
class GalleryBrokenFloorFallNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryBrokenFloorFallNotify>
     _instance;
} _GalleryBrokenFloorFallNotify_default_instance_;
class InterruptGalleryReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InterruptGalleryReq>
     _instance;
} _InterruptGalleryReq_default_instance_;
class InterruptGalleryRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InterruptGalleryRsp>
     _instance;
} _InterruptGalleryRsp_default_instance_;
class SceneGalleryInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryInfoNotify>
     _instance;
} _SceneGalleryInfoNotify_default_instance_;
class BuoyantCombatGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BuoyantCombatGallerySettleInfo>
     _instance;
} _BuoyantCombatGallerySettleInfo_default_instance_;
class BounceConjuringGallerySettleInfo_GadgetCountMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo_GadgetCountMapEntry>
     _instance;
} _BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_;
class BounceConjuringGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BounceConjuringGallerySettleInfo>
     _instance;
} _BounceConjuringGallerySettleInfo_default_instance_;
class GalleryBounceConjuringHitNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryBounceConjuringHitNotify>
     _instance;
} _GalleryBounceConjuringHitNotify_default_instance_;
class GallerySumoKillMonsterNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GallerySumoKillMonsterNotify>
     _instance;
} _GallerySumoKillMonsterNotify_default_instance_;
class GalleryCrystalLinkKillMonsterNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryCrystalLinkKillMonsterNotify>
     _instance;
} _GalleryCrystalLinkKillMonsterNotify_default_instance_;
class GalleryCrystalLinkBuffInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryCrystalLinkBuffInfoNotify>
     _instance;
} _GalleryCrystalLinkBuffInfoNotify_default_instance_;
class FishInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FishInfo>
     _instance;
} _FishInfo_default_instance_;
class FishingScoreDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FishingScore>
     _instance;
} _FishingScore_default_instance_;
class FishingGallerySettleInfo_FishMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FishingGallerySettleInfo::FishingGallerySettleInfo_FishMapEntry>
     _instance;
} _FishingGallerySettleInfo_FishMapEntry_default_instance_;
class FishingGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FishingGallerySettleInfo>
     _instance;
} _FishingGallerySettleInfo_default_instance_;
class RacingGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RacingGallerySettleInfo>
     _instance;
} _RacingGallerySettleInfo_default_instance_;
class SalvagePreventGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SalvagePreventGallerySettleInfo>
     _instance;
} _SalvagePreventGallerySettleInfo_default_instance_;
class SalvageEscortGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SalvageEscortGallerySettleInfo>
     _instance;
} _SalvageEscortGallerySettleInfo_default_instance_;
class BalloonGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BalloonGallerySettleInfo>
     _instance;
} _BalloonGallerySettleInfo_default_instance_;
class IrodoriMasterGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IrodoriMasterGallerySettleInfo>
     _instance;
} _IrodoriMasterGallerySettleInfo_default_instance_;
class PhotoGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PhotoGallerySettleInfo>
     _instance;
} _PhotoGallerySettleInfo_default_instance_;
class LuminanceStoneChallengeGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LuminanceStoneChallengeGallerySettleInfo>
     _instance;
} _LuminanceStoneChallengeGallerySettleInfo_default_instance_;
class HomeGalleryInPlayingNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HomeGalleryInPlayingNotify>
     _instance;
} _HomeGalleryInPlayingNotify_default_instance_;
class SummerTimeV2BoatGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SummerTimeV2BoatGallerySettleInfo>
     _instance;
} _SummerTimeV2BoatGallerySettleInfo_default_instance_;
class GalleryIslandPartyDownHillInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryIslandPartyDownHillInfoNotify>
     _instance;
} _GalleryIslandPartyDownHillInfoNotify_default_instance_;
class IslandPartyRaftInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IslandPartyRaftInfoNotify>
     _instance;
} _IslandPartyRaftInfoNotify_default_instance_;
class IslandPartySailInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IslandPartySailInfoNotify>
     _instance;
} _IslandPartySailInfoNotify_default_instance_;
class IslandPartyGallerySettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IslandPartyGallerySettleInfo>
     _instance;
} _IslandPartyGallerySettleInfo_default_instance_;
class BackRebornGalleryReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BackRebornGalleryReq>
     _instance;
} _BackRebornGalleryReq_default_instance_;
class BackRebornGalleryRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BackRebornGalleryRsp>
     _instance;
} _BackRebornGalleryRsp_default_instance_;
class GalleryWillStartCountdownNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GalleryWillStartCountdownNotify>
     _instance;
} _GalleryWillStartCountdownNotify_default_instance_;
class InstableSprayGalleryInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InstableSprayGalleryInfoNotify>
     _instance;
} _InstableSprayGalleryInfoNotify_default_instance_;
class SceneGalleryMuqadasPotionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryMuqadasPotionInfo>
     _instance;
} _SceneGalleryMuqadasPotionInfo_default_instance_;
class VintageHuntingFirstStageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VintageHuntingFirstStageInfo>
     _instance;
} _VintageHuntingFirstStageInfo_default_instance_;
class VintageHuntingSecondStageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VintageHuntingSecondStageInfo>
     _instance;
} _VintageHuntingSecondStageInfo_default_instance_;
class VintageHuntingThirdStageInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VintageHuntingThirdStageInfo>
     _instance;
} _VintageHuntingThirdStageInfo_default_instance_;
class SceneGalleryVintageHuntingInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SceneGalleryVintageHuntingInfo>
     _instance;
  const ::proto::VintageHuntingFirstStageInfo* first_stage_info_;
  const ::proto::VintageHuntingSecondStageInfo* second_stage_info_;
  const ::proto::VintageHuntingThirdStageInfo* third_stage_info_;
} _SceneGalleryVintageHuntingInfo_default_instance_;
class WindFieldGalleryInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WindFieldGalleryInfoNotify>
     _instance;
} _WindFieldGalleryInfoNotify_default_instance_;
class WindFieldGalleryChallengeInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WindFieldGalleryChallengeInfoNotify>
     _instance;
} _WindFieldGalleryChallengeInfoNotify_default_instance_;
class FungusFighterTrainingInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FungusFighterTrainingInfoNotify>
     _instance;
} _FungusFighterTrainingInfoNotify_default_instance_;
class FungusFighterTrainingSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FungusFighterTrainingSettleInfo>
     _instance;
} _FungusFighterTrainingSettleInfo_default_instance_;
class FungusCaptureSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FungusCaptureSettleNotify>
     _instance;
} _FungusCaptureSettleNotify_default_instance_;
class HideAndSeekPlayerCapturedNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HideAndSeekPlayerCapturedNotify>
     _instance;
} _HideAndSeekPlayerCapturedNotify_default_instance_;
class CoinCollectGallerySettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CoinCollectGallerySettleNotify>
     _instance;
} _CoinCollectGallerySettleNotify_default_instance_;

namespace protobuf_cmd_2fcmd_5fgallery_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[105];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFlowerStartParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFlowerStartParam, target_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, player_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, owner_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, start_time_),
  offsetof(GalleryStartNotifyDefaultTypeInternal, flower_start_param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStartNotify, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonShootNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonShootNotify, trigger_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonShootNotify, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonShootNotify, combo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonShootNotify, combo_disable_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonShootNotify, add_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonShootNotify, cur_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonScoreNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonScoreNotify, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBalloonScoreNotify, uid_score_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonSettleInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonSettleInfo, shoot_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonSettleInfo, max_combo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonSettleInfo, final_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonSettleInfo, player_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStopNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryStopNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallSettleInfo, catch_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallSettleInfo, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallSettleInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallSettleInfo, flower_ring_catch_count_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallSettleInfo, remain_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallSettleInfo, final_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallCatchNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallCatchNotify, cur_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallCatchNotify, time_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallCatchNotify, ball_catch_count_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallCatchNotify, add_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallCatchNotify, is_ground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallCatchNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerBrief, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerBrief, is_ground_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerBrief, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallScoreNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallScoreNotify, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFallScoreNotify, uid_brief_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonPlayerInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonPlayerInfo, cur_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonPlayerInfo, combo_disable_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonPlayerInfo, combo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerInfo, time_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerInfo, ball_catch_count_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerInfo, cur_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FallPlayerInfo, is_ground_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBalloonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBalloonInfo, scene_player_balloon_info_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBalloonInfo, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFallInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFallInfo, scene_player_fall_info_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFallInfo, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFlowerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFlowerInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFlowerInfo, target_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFlowerInfo, cur_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBulletInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBulletInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBulletInfo, hit_count_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrokenFloorInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrokenFloorInfo, fall_count_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrokenFloorInfo, end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHideAndSeekInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHideAndSeekInfo, visible_uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHideAndSeekInfo, caught_uid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBuoyantCombatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBuoyantCombatInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBuoyantCombatInfo, kill_special_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBuoyantCombatInfo, kill_monster_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryProgressInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryProgressInfo, progress_stage_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryProgressInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryProgressInfo, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryProgressInfo, ui_form_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBounceConjuringInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBounceConjuringInfo, total_destroyed_machine_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBounceConjuringInfo, total_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHandballInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHandballInfo, ball_place_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHandballInfo, is_have_ball_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySumoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySumoInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySumoInfo, kill_normal_mosnter_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySumoInfo, kill_elite_monster_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySalvagePreventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySalvagePreventInfo, monster_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySalvageEscortInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySalvageEscortInfo, max_box_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySalvageEscortInfo, max_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySalvageEscortInfo, box_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySalvageEscortInfo, monster_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCrystalLinkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCrystalLinkInfo, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIrodoriMasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIrodoriMasterInfo, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIrodoriMasterInfo, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIrodoriMasterInfo, is_cg_viewed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHomeBalloonInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHomeBalloonInfo, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryLuminanceStoneChallengeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryLuminanceStoneChallengeInfo, kill_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryLuminanceStoneChallengeInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryLuminanceStoneChallengeInfo, clean_mud_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryLuminanceStoneChallengeInfo, kill_special_monster_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHomeSeekFurnitureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHomeSeekFurnitureInfo, cur_tide_left_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHomeSeekFurnitureInfo, player_score_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHomeSeekFurnitureInfo, cur_tide_duration_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryHomeSeekFurnitureInfo, cur_tide_total_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyDownHillInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyDownHillInfo, total_kill_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyDownHillInfo, start_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyDownHillInfo, max_kill_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyDownHillInfo, coin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySummerTimeV2BoatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySummerTimeV2BoatInfo, param1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySummerTimeV2BoatInfo, param3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySummerTimeV2BoatInfo, used_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGallerySummerTimeV2BoatInfo, param2_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyRaftInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyRaftInfo, coin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyRaftInfo, start_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyRaftInfo, component_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyRaftInfo, fuel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyRaftInfo, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartyRaftInfo, raft_entity_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, max_clean_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, clean_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, start_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, kill_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, coin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryIslandPartySailInfo, max_kill_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInstableSprayBuffInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInstableSprayBuffInfo, buff_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInstableSprayBuffInfo, buff_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInstableSprayBuffInfo, buff_max_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInstaleSprayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInstaleSprayInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInstaleSprayInfo, buff_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTreasureSeelieInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTreasureSeelieInfo, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTreasureSeelieInfo, goal_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, killed_monster_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, challenge_ball_max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, show_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, challenge_total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, challenge_ball_cur_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, coin_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, challenge_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryWindFieldInfo, element_ball_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, max_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, killed_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, buff_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, buff_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, max_skill_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, buff_last_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterTrainingInfo, rest_skill_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterCaptureInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryFungusFighterCaptureInfo, is_hide_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryEffigyChallengeV2Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryEffigyChallengeV2Info, killed_monster_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryEffigyChallengeV2Info, total_target_kill_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryEffigyChallengeV2Info, scene_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryEffigyChallengeV2Info, t_remain_use_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryEffigyChallengeV2Info, boss_violent_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCharAmusementInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCharAmusementInfo, is_last_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCharAmusementInfo, max_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCharAmusementInfo, cur_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCharAmusementInfo, is_finish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCharAmusementInfo, is_success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrickBreakerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrickBreakerInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrickBreakerInfo, life_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrickBreakerInfo, fever_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryBrickBreakerInfo, combo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCoinCollectInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCoinCollectInfo, coin_total_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryCoinCollectInfo, coin_collect_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTeamChainInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTeamChainInfo, gallery_score_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTeamChainInfo, cur_total_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTeamChainInfo, cur_gallery_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTeamChainInfo, total_target_kill_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryTeamChainInfo, killed_monster_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, progress_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, owner_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, player_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, pre_start_end_time_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, balloon_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, fall_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, flower_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, bullet_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, broken_floor_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, hide_and_seek_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, buoyant_combat_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, bounce_conjuring_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, handball_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, sumo_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, salvage_prevent_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, salvage_escort_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, home_balloon_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, crystal_link_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, irodori_master_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, luminance_stone_challenge_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, home_seek_furniture_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, island_party_down_hill_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, summer_time_v2_boat_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, island_party_raft_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, island_party_sail_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, instable_spray_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, muqadas_potion_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, treasure_seelie_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, vintage_hunting_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, wind_field_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, fungus_fighter_training_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, effigy_challenge_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, fungus_fighter_capture_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, char_amusement_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, brick_breaker_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, coin_collect_info_),
  offsetof(SceneGalleryInfoDefaultTypeInternal, team_chain_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfo, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSceneGalleryInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSceneGalleryInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSceneGalleryInfoRsp, gallery_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllSceneGalleryInfoRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFlowerCatchNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFlowerCatchNotify, cur_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFlowerCatchNotify, add_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryFlowerCatchNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryPreStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryPreStartNotify, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryPreStartNotify, pre_start_end_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBulletHitNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBulletHitNotify, hit_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBulletHitNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBrokenFloorFallNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBrokenFloorFallNotify, fall_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBrokenFloorFallNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterruptGalleryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterruptGalleryReq, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterruptGalleryRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterruptGalleryRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterruptGalleryRsp, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryInfoNotify, gallery_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, gallery_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, final_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, kill_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, kill_target_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, kill_special_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuoyantCombatGallerySettleInfo, gallery_multiple_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, destroyed_machine_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, fever_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, normal_hit_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, damage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, gadget_count_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, perfect_hit_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BounceConjuringGallerySettleInfo, card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBounceConjuringHitNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBounceConjuringHitNotify, add_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBounceConjuringHitNotify, is_perfect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryBounceConjuringHitNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallerySumoKillMonsterNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallerySumoKillMonsterNotify, kill_normal_mosnter_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallerySumoKillMonsterNotify, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallerySumoKillMonsterNotify, kill_elite_monster_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GallerySumoKillMonsterNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryCrystalLinkKillMonsterNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryCrystalLinkKillMonsterNotify, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryCrystalLinkKillMonsterNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryCrystalLinkBuffInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryCrystalLinkBuffInfoNotify, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryCrystalLinkBuffInfoNotify, is_buff_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryCrystalLinkBuffInfoNotify, buff_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, free_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishInfo, into_bag_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishingScore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishingScore, fishing_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishingScore, is_new_record_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishingGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishingGallerySettleInfo, fish_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FishingGallerySettleInfo, fishing_score_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacingGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacingGallerySettleInfo, winner_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacingGallerySettleInfo, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RacingGallerySettleInfo, use_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvagePreventGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvagePreventGallerySettleInfo, time_remain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvagePreventGallerySettleInfo, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvagePreventGallerySettleInfo, final_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvagePreventGallerySettleInfo, monster_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvageEscortGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvageEscortGallerySettleInfo, time_remain_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SalvageEscortGallerySettleInfo, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonGallerySettleInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonGallerySettleInfo, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonGallerySettleInfo, hit_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalloonGallerySettleInfo, owner_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriMasterGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriMasterGallerySettleInfo, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriMasterGallerySettleInfo, is_finish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriMasterGallerySettleInfo, finish_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriMasterGallerySettleInfo, difficult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IrodoriMasterGallerySettleInfo, level_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoGallerySettleInfo, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuminanceStoneChallengeGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuminanceStoneChallengeGallerySettleInfo, kill_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuminanceStoneChallengeGallerySettleInfo, kill_special_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuminanceStoneChallengeGallerySettleInfo, clean_mud_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuminanceStoneChallengeGallerySettleInfo, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuminanceStoneChallengeGallerySettleInfo, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuminanceStoneChallengeGallerySettleInfo, final_score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeGalleryInPlayingNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HomeGalleryInPlayingNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2BoatGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2BoatGallerySettleInfo, param1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2BoatGallerySettleInfo, param2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2BoatGallerySettleInfo, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2BoatGallerySettleInfo, param3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2BoatGallerySettleInfo, used_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2BoatGallerySettleInfo, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryIslandPartyDownHillInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryIslandPartyDownHillInfoNotify, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryIslandPartyDownHillInfoNotify, coin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryIslandPartyDownHillInfoNotify, total_kill_monster_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyRaftInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyRaftInfoNotify, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyRaftInfoNotify, coin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyRaftInfoNotify, fuel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyRaftInfoNotify, component_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartySailInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartySailInfoNotify, coin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartySailInfoNotify, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartySailInfoNotify, kill_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartySailInfoNotify, progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyGallerySettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyGallerySettleInfo, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IslandPartyGallerySettleInfo, card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRebornGalleryReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRebornGalleryReq, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRebornGalleryRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRebornGalleryRsp, gallery_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BackRebornGalleryRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryWillStartCountdownNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryWillStartCountdownNotify, start_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryWillStartCountdownNotify, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryWillStartCountdownNotify, is_end_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GalleryWillStartCountdownNotify, gallery_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstableSprayGalleryInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstableSprayGalleryInfoNotify, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryMuqadasPotionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryMuqadasPotionInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryMuqadasPotionInfo, capture_weakness_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryMuqadasPotionInfo, skill_energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryMuqadasPotionInfo, skill_use_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingFirstStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingFirstStageInfo, timid_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingFirstStageInfo, brutal_cnt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingFirstStageInfo, score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingFirstStageInfo, elite_cnt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingSecondStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingSecondStageInfo, total_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingSecondStageInfo, capture_animal_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingSecondStageInfo, left_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VintageHuntingThirdStageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryVintageHuntingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryVintageHuntingInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryVintageHuntingInfo, stage_id_),
  offsetof(SceneGalleryVintageHuntingInfoDefaultTypeInternal, first_stage_info_),
  offsetof(SceneGalleryVintageHuntingInfoDefaultTypeInternal, second_stage_info_),
  offsetof(SceneGalleryVintageHuntingInfoDefaultTypeInternal, third_stage_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneGalleryVintageHuntingInfo, info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, show_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, killed_monster_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, coin_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, challenge_ball_max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, challenge_total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, challenge_ball_cur_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, challenge_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryInfoNotify, element_ball_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, challenge_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, is_start_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, show_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, challenge_total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, challenge_ball_max_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldGalleryChallengeInfoNotify, challenge_ball_cur_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, buff_start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, max_skill_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, max_monster_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, buff_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, buff_last_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, rest_skill_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingInfoNotify, killed_monster_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingSettleInfo, used_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingSettleInfo, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusFighterTrainingSettleInfo, transaction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusCaptureSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FungusCaptureSettleNotify, is_success_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerCapturedNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HideAndSeekPlayerCapturedNotify, ghost_skill_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectGallerySettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectGallerySettleNotify, coin_collect_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectGallerySettleNotify, coin_total_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectGallerySettleNotify, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectGallerySettleNotify, coin_collect_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectGallerySettleNotify, multistage_play_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CoinCollectGallerySettleNotify, is_new_record_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(GalleryFlowerStartParam)},
  { 6, -1, sizeof(GalleryStartNotify)},
  { 18, -1, sizeof(GalleryBalloonShootNotify)},
  { 29, -1, sizeof(GalleryBalloonScoreNotify)},
  { 36, -1, sizeof(BalloonSettleInfo)},
  { 46, -1, sizeof(GalleryStopNotify)},
  { 52, -1, sizeof(FallSettleInfo)},
  { 63, -1, sizeof(GalleryFallCatchNotify)},
  { 74, -1, sizeof(FallPlayerBrief)},
  { 82, -1, sizeof(GalleryFallScoreNotify)},
  { 89, -1, sizeof(BalloonPlayerInfo)},
  { 98, -1, sizeof(FallPlayerInfo)},
  { 108, -1, sizeof(SceneGalleryBalloonInfo)},
  { 115, -1, sizeof(SceneGalleryFallInfo)},
  { 122, -1, sizeof(SceneGalleryFlowerInfo)},
  { 130, -1, sizeof(SceneGalleryBulletInfo)},
  { 137, -1, sizeof(SceneGalleryBrokenFloorInfo)},
  { 144, -1, sizeof(SceneGalleryHideAndSeekInfo)},
  { 151, -1, sizeof(SceneGalleryBuoyantCombatInfo)},
  { 159, -1, sizeof(SceneGalleryProgressInfo)},
  { 168, -1, sizeof(SceneGalleryBounceConjuringInfo)},
  { 175, -1, sizeof(SceneGalleryHandballInfo)},
  { 182, -1, sizeof(SceneGallerySumoInfo)},
  { 190, -1, sizeof(SceneGallerySalvagePreventInfo)},
  { 196, -1, sizeof(SceneGallerySalvageEscortInfo)},
  { 205, -1, sizeof(SceneGalleryCrystalLinkInfo)},
  { 211, -1, sizeof(SceneGalleryIrodoriMasterInfo)},
  { 219, -1, sizeof(SceneGalleryHomeBalloonInfo)},
  { 225, -1, sizeof(SceneGalleryLuminanceStoneChallengeInfo)},
  { 234, -1, sizeof(SceneGalleryHomeSeekFurnitureInfo)},
  { 243, -1, sizeof(SceneGalleryIslandPartyDownHillInfo)},
  { 252, -1, sizeof(SceneGallerySummerTimeV2BoatInfo)},
  { 261, -1, sizeof(SceneGalleryIslandPartyRaftInfo)},
  { 272, -1, sizeof(SceneGalleryIslandPartySailInfo)},
  { 284, -1, sizeof(SceneGalleryInstableSprayBuffInfo)},
  { 292, -1, sizeof(SceneGalleryInstaleSprayInfo)},
  { 299, -1, sizeof(SceneGalleryTreasureSeelieInfo)},
  { 306, -1, sizeof(SceneGalleryWindFieldInfo)},
  { 319, -1, sizeof(SceneGalleryFungusFighterTrainingInfo)},
  { 331, -1, sizeof(SceneGalleryFungusFighterCaptureInfo)},
  { 337, -1, sizeof(SceneGalleryEffigyChallengeV2Info)},
  { 347, -1, sizeof(SceneGalleryCharAmusementInfo)},
  { 357, -1, sizeof(SceneGalleryBrickBreakerInfo)},
  { 366, -1, sizeof(SceneGalleryCoinCollectInfo)},
  { 373, -1, sizeof(SceneGalleryTeamChainInfo)},
  { 383, -1, sizeof(SceneGalleryInfo)},
  { 430, -1, sizeof(GetAllSceneGalleryInfoReq)},
  { 435, -1, sizeof(GetAllSceneGalleryInfoRsp)},
  { 442, -1, sizeof(GalleryFlowerCatchNotify)},
  { 450, -1, sizeof(GalleryPreStartNotify)},
  { 457, -1, sizeof(GalleryBulletHitNotify)},
  { 464, -1, sizeof(GalleryBrokenFloorFallNotify)},
  { 471, -1, sizeof(InterruptGalleryReq)},
  { 477, -1, sizeof(InterruptGalleryRsp)},
  { 484, -1, sizeof(SceneGalleryInfoNotify)},
  { 490, -1, sizeof(BuoyantCombatGallerySettleInfo)},
  { 502, -1, sizeof(BounceConjuringGallerySettleInfo)},
  { 516, -1, sizeof(GalleryBounceConjuringHitNotify)},
  { 524, -1, sizeof(GallerySumoKillMonsterNotify)},
  { 533, -1, sizeof(GalleryCrystalLinkKillMonsterNotify)},
  { 540, -1, sizeof(GalleryCrystalLinkBuffInfoNotify)},
  { 548, -1, sizeof(FishInfo)},
  { 555, -1, sizeof(FishingScore)},
  { 562, -1, sizeof(FishingGallerySettleInfo)},
  { 569, -1, sizeof(RacingGallerySettleInfo)},
  { 577, -1, sizeof(SalvagePreventGallerySettleInfo)},
  { 586, -1, sizeof(SalvageEscortGallerySettleInfo)},
  { 593, -1, sizeof(BalloonGallerySettleInfo)},
  { 602, -1, sizeof(IrodoriMasterGallerySettleInfo)},
  { 612, -1, sizeof(PhotoGallerySettleInfo)},
  { 618, -1, sizeof(LuminanceStoneChallengeGallerySettleInfo)},
  { 629, -1, sizeof(HomeGalleryInPlayingNotify)},
  { 635, -1, sizeof(SummerTimeV2BoatGallerySettleInfo)},
  { 646, -1, sizeof(GalleryIslandPartyDownHillInfoNotify)},
  { 654, -1, sizeof(IslandPartyRaftInfoNotify)},
  { 663, -1, sizeof(IslandPartySailInfoNotify)},
  { 672, -1, sizeof(IslandPartyGallerySettleInfo)},
  { 679, -1, sizeof(BackRebornGalleryReq)},
  { 685, -1, sizeof(BackRebornGalleryRsp)},
  { 692, -1, sizeof(GalleryWillStartCountdownNotify)},
  { 701, -1, sizeof(InstableSprayGalleryInfoNotify)},
  { 707, -1, sizeof(SceneGalleryMuqadasPotionInfo)},
  { 716, -1, sizeof(VintageHuntingFirstStageInfo)},
  { 725, -1, sizeof(VintageHuntingSecondStageInfo)},
  { 733, -1, sizeof(VintageHuntingThirdStageInfo)},
  { 738, -1, sizeof(SceneGalleryVintageHuntingInfo)},
  { 748, -1, sizeof(WindFieldGalleryInfoNotify)},
  { 761, -1, sizeof(WindFieldGalleryChallengeInfoNotify)},
  { 773, -1, sizeof(FungusFighterTrainingInfoNotify)},
  { 785, -1, sizeof(FungusFighterTrainingSettleInfo)},
  { 793, -1, sizeof(FungusCaptureSettleNotify)},
  { 799, -1, sizeof(HideAndSeekPlayerCapturedNotify)},
  { 805, -1, sizeof(CoinCollectGallerySettleNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryFlowerStartParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryBalloonShootNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryBalloonScoreNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BalloonSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryStopNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FallSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryFallCatchNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FallPlayerBrief_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryFallScoreNotify_UidBriefMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryFallScoreNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BalloonPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FallPlayerInfo_BallCatchCountMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FallPlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBalloonInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryFallInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryFlowerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBulletInfo_HitCountMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBulletInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBrokenFloorInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryHideAndSeekInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBuoyantCombatInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryProgressInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBounceConjuringInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryHandballInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGallerySumoInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGallerySalvagePreventInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGallerySalvageEscortInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryCrystalLinkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryIrodoriMasterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryHomeBalloonInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryLuminanceStoneChallengeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryHomeSeekFurnitureInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryIslandPartyDownHillInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGallerySummerTimeV2BoatInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryIslandPartyRaftInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryIslandPartySailInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryInstableSprayBuffInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryInstaleSprayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryTreasureSeelieInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryWindFieldInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryFungusFighterTrainingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryFungusFighterCaptureInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryEffigyChallengeV2Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryCharAmusementInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryBrickBreakerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryCoinCollectInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryTeamChainInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAllSceneGalleryInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAllSceneGalleryInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryFlowerCatchNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryPreStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryBulletHitNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryBrokenFloorFallNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InterruptGalleryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InterruptGalleryRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuoyantCombatGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BounceConjuringGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryBounceConjuringHitNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GallerySumoKillMonsterNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryCrystalLinkKillMonsterNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryCrystalLinkBuffInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FishInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FishingScore_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FishingGallerySettleInfo_FishMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FishingGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RacingGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SalvagePreventGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SalvageEscortGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BalloonGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IrodoriMasterGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PhotoGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LuminanceStoneChallengeGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HomeGalleryInPlayingNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SummerTimeV2BoatGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryIslandPartyDownHillInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IslandPartyRaftInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IslandPartySailInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IslandPartyGallerySettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackRebornGalleryReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BackRebornGalleryRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GalleryWillStartCountdownNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstableSprayGalleryInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryMuqadasPotionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VintageHuntingFirstStageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VintageHuntingSecondStageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VintageHuntingThirdStageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SceneGalleryVintageHuntingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WindFieldGalleryInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WindFieldGalleryChallengeInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FungusFighterTrainingInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FungusFighterTrainingSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FungusCaptureSettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HideAndSeekPlayerCapturedNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CoinCollectGallerySettleNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_gallery.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[3].reflection = GalleryBalloonScoreNotify::GalleryBalloonScoreNotify_UidScoreMapEntry::CreateReflection(file_level_metadata[3].descriptor, _GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[7].reflection = FallSettleInfo::FallSettleInfo_FlowerRingCatchCountMapEntry::CreateReflection(file_level_metadata[7].descriptor, _FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[9].reflection = GalleryFallCatchNotify::GalleryFallCatchNotify_BallCatchCountMapEntry::CreateReflection(file_level_metadata[9].descriptor, _GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[12].reflection = GalleryFallScoreNotify::GalleryFallScoreNotify_UidBriefMapEntry::CreateReflection(file_level_metadata[12].descriptor, _GalleryFallScoreNotify_UidBriefMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[15].reflection = FallPlayerInfo::FallPlayerInfo_BallCatchCountMapEntry::CreateReflection(file_level_metadata[15].descriptor, _FallPlayerInfo_BallCatchCountMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[17].reflection = SceneGalleryBalloonInfo::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry::CreateReflection(file_level_metadata[17].descriptor, _SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[19].reflection = SceneGalleryFallInfo::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry::CreateReflection(file_level_metadata[19].descriptor, _SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[22].reflection = SceneGalleryBulletInfo::SceneGalleryBulletInfo_HitCountMapEntry::CreateReflection(file_level_metadata[22].descriptor, _SceneGalleryBulletInfo_HitCountMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[24].reflection = SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo_FallCountMapEntry::CreateReflection(file_level_metadata[24].descriptor, _SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[38].reflection = SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry::CreateReflection(file_level_metadata[38].descriptor, _SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[66].reflection = BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo_GadgetCountMapEntry::CreateReflection(file_level_metadata[66].descriptor, _BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[74].reflection = FishingGallerySettleInfo::FishingGallerySettleInfo_FishMapEntry::CreateReflection(file_level_metadata[74].descriptor, _FishingGallerySettleInfo_FishMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 105);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _GalleryFlowerStartParam_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryFlowerStartParam_default_instance_);_GalleryStartNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryStartNotify_default_instance_);_GalleryBalloonShootNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryBalloonShootNotify_default_instance_);_GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_);_GalleryBalloonScoreNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryBalloonScoreNotify_default_instance_);_BalloonSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BalloonSettleInfo_default_instance_);_GalleryStopNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryStopNotify_default_instance_);_FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_);_FallSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FallSettleInfo_default_instance_);_GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_);_GalleryFallCatchNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryFallCatchNotify_default_instance_);_FallPlayerBrief_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FallPlayerBrief_default_instance_);_GalleryFallScoreNotify_UidBriefMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryFallScoreNotify_UidBriefMapEntry_default_instance_);_GalleryFallScoreNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryFallScoreNotify_default_instance_);_BalloonPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BalloonPlayerInfo_default_instance_);_FallPlayerInfo_BallCatchCountMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FallPlayerInfo_BallCatchCountMapEntry_default_instance_);_FallPlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FallPlayerInfo_default_instance_);_SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_);_SceneGalleryBalloonInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBalloonInfo_default_instance_);_SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_);_SceneGalleryFallInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryFallInfo_default_instance_);_SceneGalleryFlowerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryFlowerInfo_default_instance_);_SceneGalleryBulletInfo_HitCountMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBulletInfo_HitCountMapEntry_default_instance_);_SceneGalleryBulletInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBulletInfo_default_instance_);_SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_);_SceneGalleryBrokenFloorInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBrokenFloorInfo_default_instance_);_SceneGalleryHideAndSeekInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryHideAndSeekInfo_default_instance_);_SceneGalleryBuoyantCombatInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBuoyantCombatInfo_default_instance_);_SceneGalleryProgressInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryProgressInfo_default_instance_);_SceneGalleryBounceConjuringInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBounceConjuringInfo_default_instance_);_SceneGalleryHandballInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryHandballInfo_default_instance_);_SceneGallerySumoInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGallerySumoInfo_default_instance_);_SceneGallerySalvagePreventInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGallerySalvagePreventInfo_default_instance_);_SceneGallerySalvageEscortInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGallerySalvageEscortInfo_default_instance_);_SceneGalleryCrystalLinkInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryCrystalLinkInfo_default_instance_);_SceneGalleryIrodoriMasterInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryIrodoriMasterInfo_default_instance_);_SceneGalleryHomeBalloonInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryHomeBalloonInfo_default_instance_);_SceneGalleryLuminanceStoneChallengeInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryLuminanceStoneChallengeInfo_default_instance_);_SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_);_SceneGalleryHomeSeekFurnitureInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryHomeSeekFurnitureInfo_default_instance_);_SceneGalleryIslandPartyDownHillInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryIslandPartyDownHillInfo_default_instance_);_SceneGallerySummerTimeV2BoatInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGallerySummerTimeV2BoatInfo_default_instance_);_SceneGalleryIslandPartyRaftInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryIslandPartyRaftInfo_default_instance_);_SceneGalleryIslandPartySailInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryIslandPartySailInfo_default_instance_);_SceneGalleryInstableSprayBuffInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryInstableSprayBuffInfo_default_instance_);_SceneGalleryInstaleSprayInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryInstaleSprayInfo_default_instance_);_SceneGalleryTreasureSeelieInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryTreasureSeelieInfo_default_instance_);_SceneGalleryWindFieldInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryWindFieldInfo_default_instance_);_SceneGalleryFungusFighterTrainingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryFungusFighterTrainingInfo_default_instance_);_SceneGalleryFungusFighterCaptureInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryFungusFighterCaptureInfo_default_instance_);_SceneGalleryEffigyChallengeV2Info_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryEffigyChallengeV2Info_default_instance_);_SceneGalleryCharAmusementInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryCharAmusementInfo_default_instance_);_SceneGalleryBrickBreakerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryBrickBreakerInfo_default_instance_);_SceneGalleryCoinCollectInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryCoinCollectInfo_default_instance_);_SceneGalleryTeamChainInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryTeamChainInfo_default_instance_);_SceneGalleryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryInfo_default_instance_);_GetAllSceneGalleryInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAllSceneGalleryInfoReq_default_instance_);_GetAllSceneGalleryInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAllSceneGalleryInfoRsp_default_instance_);_GalleryFlowerCatchNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryFlowerCatchNotify_default_instance_);_GalleryPreStartNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryPreStartNotify_default_instance_);_GalleryBulletHitNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryBulletHitNotify_default_instance_);_GalleryBrokenFloorFallNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryBrokenFloorFallNotify_default_instance_);_InterruptGalleryReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InterruptGalleryReq_default_instance_);_InterruptGalleryRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InterruptGalleryRsp_default_instance_);_SceneGalleryInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryInfoNotify_default_instance_);_BuoyantCombatGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BuoyantCombatGallerySettleInfo_default_instance_);_BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_);_BounceConjuringGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BounceConjuringGallerySettleInfo_default_instance_);_GalleryBounceConjuringHitNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryBounceConjuringHitNotify_default_instance_);_GallerySumoKillMonsterNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GallerySumoKillMonsterNotify_default_instance_);_GalleryCrystalLinkKillMonsterNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryCrystalLinkKillMonsterNotify_default_instance_);_GalleryCrystalLinkBuffInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryCrystalLinkBuffInfoNotify_default_instance_);_FishInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FishInfo_default_instance_);_FishingScore_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FishingScore_default_instance_);_FishingGallerySettleInfo_FishMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FishingGallerySettleInfo_FishMapEntry_default_instance_);_FishingGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FishingGallerySettleInfo_default_instance_);_RacingGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RacingGallerySettleInfo_default_instance_);_SalvagePreventGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SalvagePreventGallerySettleInfo_default_instance_);_SalvageEscortGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SalvageEscortGallerySettleInfo_default_instance_);_BalloonGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BalloonGallerySettleInfo_default_instance_);_IrodoriMasterGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IrodoriMasterGallerySettleInfo_default_instance_);_PhotoGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PhotoGallerySettleInfo_default_instance_);_LuminanceStoneChallengeGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LuminanceStoneChallengeGallerySettleInfo_default_instance_);_HomeGalleryInPlayingNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HomeGalleryInPlayingNotify_default_instance_);_SummerTimeV2BoatGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SummerTimeV2BoatGallerySettleInfo_default_instance_);_GalleryIslandPartyDownHillInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryIslandPartyDownHillInfoNotify_default_instance_);_IslandPartyRaftInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IslandPartyRaftInfoNotify_default_instance_);_IslandPartySailInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IslandPartySailInfoNotify_default_instance_);_IslandPartyGallerySettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IslandPartyGallerySettleInfo_default_instance_);_BackRebornGalleryReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BackRebornGalleryReq_default_instance_);_BackRebornGalleryRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BackRebornGalleryRsp_default_instance_);_GalleryWillStartCountdownNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GalleryWillStartCountdownNotify_default_instance_);_InstableSprayGalleryInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InstableSprayGalleryInfoNotify_default_instance_);_SceneGalleryMuqadasPotionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryMuqadasPotionInfo_default_instance_);_VintageHuntingFirstStageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VintageHuntingFirstStageInfo_default_instance_);_VintageHuntingSecondStageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VintageHuntingSecondStageInfo_default_instance_);_VintageHuntingThirdStageInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VintageHuntingThirdStageInfo_default_instance_);_SceneGalleryVintageHuntingInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SceneGalleryVintageHuntingInfo_default_instance_);_WindFieldGalleryInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WindFieldGalleryInfoNotify_default_instance_);_WindFieldGalleryChallengeInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WindFieldGalleryChallengeInfoNotify_default_instance_);_FungusFighterTrainingInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FungusFighterTrainingInfoNotify_default_instance_);_FungusFighterTrainingSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FungusFighterTrainingSettleInfo_default_instance_);_FungusCaptureSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FungusCaptureSettleNotify_default_instance_);_HideAndSeekPlayerCapturedNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HideAndSeekPlayerCapturedNotify_default_instance_);_CoinCollectGallerySettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CoinCollectGallerySettleNotify_default_instance_);_GalleryStartNotify_default_instance_.flower_start_param_ = const_cast< ::proto::GalleryFlowerStartParam*>(
      ::proto::GalleryFlowerStartParam::internal_default_instance());
  _GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_._instance.get_mutable());
  _GalleryBalloonScoreNotify_UidScoreMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _BalloonSettleInfo_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_._instance.get_mutable());
  _FallSettleInfo_FlowerRingCatchCountMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _FallSettleInfo_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_._instance.get_mutable());
  _GalleryFallCatchNotify_BallCatchCountMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _GalleryFallScoreNotify_UidBriefMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_GalleryFallScoreNotify_UidBriefMapEntry_default_instance_._instance.get_mutable());
  _GalleryFallScoreNotify_UidBriefMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _FallPlayerInfo_BallCatchCountMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_FallPlayerInfo_BallCatchCountMapEntry_default_instance_._instance.get_mutable());
  _FallPlayerInfo_BallCatchCountMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_._instance.get_mutable());
  _SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_._instance.get_mutable());
  _SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneGalleryBulletInfo_HitCountMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneGalleryBulletInfo_HitCountMapEntry_default_instance_._instance.get_mutable());
  _SceneGalleryBulletInfo_HitCountMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_._instance.get_mutable());
  _SceneGalleryBrokenFloorInfo_FallCountMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneGalleryHandballInfo_default_instance_._instance.get_mutable()->ball_place_info_ = const_cast< ::proto::PlaceInfo*>(
      ::proto::PlaceInfo::internal_default_instance());
  _SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_._instance.get_mutable());
  _SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _SceneGalleryInfo_default_instance_.balloon_info_ = const_cast< ::proto::SceneGalleryBalloonInfo*>(
      ::proto::SceneGalleryBalloonInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.fall_info_ = const_cast< ::proto::SceneGalleryFallInfo*>(
      ::proto::SceneGalleryFallInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.flower_info_ = const_cast< ::proto::SceneGalleryFlowerInfo*>(
      ::proto::SceneGalleryFlowerInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.bullet_info_ = const_cast< ::proto::SceneGalleryBulletInfo*>(
      ::proto::SceneGalleryBulletInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.broken_floor_info_ = const_cast< ::proto::SceneGalleryBrokenFloorInfo*>(
      ::proto::SceneGalleryBrokenFloorInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.hide_and_seek_info_ = const_cast< ::proto::SceneGalleryHideAndSeekInfo*>(
      ::proto::SceneGalleryHideAndSeekInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.buoyant_combat_info_ = const_cast< ::proto::SceneGalleryBuoyantCombatInfo*>(
      ::proto::SceneGalleryBuoyantCombatInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.bounce_conjuring_info_ = const_cast< ::proto::SceneGalleryBounceConjuringInfo*>(
      ::proto::SceneGalleryBounceConjuringInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.handball_info_ = const_cast< ::proto::SceneGalleryHandballInfo*>(
      ::proto::SceneGalleryHandballInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.sumo_info_ = const_cast< ::proto::SceneGallerySumoInfo*>(
      ::proto::SceneGallerySumoInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.salvage_prevent_info_ = const_cast< ::proto::SceneGallerySalvagePreventInfo*>(
      ::proto::SceneGallerySalvagePreventInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.salvage_escort_info_ = const_cast< ::proto::SceneGallerySalvageEscortInfo*>(
      ::proto::SceneGallerySalvageEscortInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.home_balloon_info_ = const_cast< ::proto::SceneGalleryHomeBalloonInfo*>(
      ::proto::SceneGalleryHomeBalloonInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.crystal_link_info_ = const_cast< ::proto::SceneGalleryCrystalLinkInfo*>(
      ::proto::SceneGalleryCrystalLinkInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.irodori_master_info_ = const_cast< ::proto::SceneGalleryIrodoriMasterInfo*>(
      ::proto::SceneGalleryIrodoriMasterInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.luminance_stone_challenge_info_ = const_cast< ::proto::SceneGalleryLuminanceStoneChallengeInfo*>(
      ::proto::SceneGalleryLuminanceStoneChallengeInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.home_seek_furniture_info_ = const_cast< ::proto::SceneGalleryHomeSeekFurnitureInfo*>(
      ::proto::SceneGalleryHomeSeekFurnitureInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.island_party_down_hill_info_ = const_cast< ::proto::SceneGalleryIslandPartyDownHillInfo*>(
      ::proto::SceneGalleryIslandPartyDownHillInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.summer_time_v2_boat_info_ = const_cast< ::proto::SceneGallerySummerTimeV2BoatInfo*>(
      ::proto::SceneGallerySummerTimeV2BoatInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.island_party_raft_info_ = const_cast< ::proto::SceneGalleryIslandPartyRaftInfo*>(
      ::proto::SceneGalleryIslandPartyRaftInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.island_party_sail_info_ = const_cast< ::proto::SceneGalleryIslandPartySailInfo*>(
      ::proto::SceneGalleryIslandPartySailInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.instable_spray_info_ = const_cast< ::proto::SceneGalleryInstaleSprayInfo*>(
      ::proto::SceneGalleryInstaleSprayInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.muqadas_potion_info_ = const_cast< ::proto::SceneGalleryMuqadasPotionInfo*>(
      ::proto::SceneGalleryMuqadasPotionInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.treasure_seelie_info_ = const_cast< ::proto::SceneGalleryTreasureSeelieInfo*>(
      ::proto::SceneGalleryTreasureSeelieInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.vintage_hunting_info_ = const_cast< ::proto::SceneGalleryVintageHuntingInfo*>(
      ::proto::SceneGalleryVintageHuntingInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.wind_field_info_ = const_cast< ::proto::SceneGalleryWindFieldInfo*>(
      ::proto::SceneGalleryWindFieldInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.fungus_fighter_training_info_ = const_cast< ::proto::SceneGalleryFungusFighterTrainingInfo*>(
      ::proto::SceneGalleryFungusFighterTrainingInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.effigy_challenge_info_ = const_cast< ::proto::SceneGalleryEffigyChallengeV2Info*>(
      ::proto::SceneGalleryEffigyChallengeV2Info::internal_default_instance());
  _SceneGalleryInfo_default_instance_.fungus_fighter_capture_info_ = const_cast< ::proto::SceneGalleryFungusFighterCaptureInfo*>(
      ::proto::SceneGalleryFungusFighterCaptureInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.char_amusement_info_ = const_cast< ::proto::SceneGalleryCharAmusementInfo*>(
      ::proto::SceneGalleryCharAmusementInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.brick_breaker_info_ = const_cast< ::proto::SceneGalleryBrickBreakerInfo*>(
      ::proto::SceneGalleryBrickBreakerInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.coin_collect_info_ = const_cast< ::proto::SceneGalleryCoinCollectInfo*>(
      ::proto::SceneGalleryCoinCollectInfo::internal_default_instance());
  _SceneGalleryInfo_default_instance_.team_chain_info_ = const_cast< ::proto::SceneGalleryTeamChainInfo*>(
      ::proto::SceneGalleryTeamChainInfo::internal_default_instance());
  _SceneGalleryInfoNotify_default_instance_._instance.get_mutable()->gallery_info_ = const_cast< ::proto::SceneGalleryInfo*>(
      ::proto::SceneGalleryInfo::internal_default_instance());
  _BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_._instance.get_mutable());
  _BounceConjuringGallerySettleInfo_GadgetCountMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _BounceConjuringGallerySettleInfo_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _FishingGallerySettleInfo_FishMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_FishingGallerySettleInfo_FishMapEntry_default_instance_._instance.get_mutable());
  _FishingGallerySettleInfo_FishMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _IslandPartyGallerySettleInfo_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _SceneGalleryVintageHuntingInfo_default_instance_.first_stage_info_ = const_cast< ::proto::VintageHuntingFirstStageInfo*>(
      ::proto::VintageHuntingFirstStageInfo::internal_default_instance());
  _SceneGalleryVintageHuntingInfo_default_instance_.second_stage_info_ = const_cast< ::proto::VintageHuntingSecondStageInfo*>(
      ::proto::VintageHuntingSecondStageInfo::internal_default_instance());
  _SceneGalleryVintageHuntingInfo_default_instance_.third_stage_info_ = const_cast< ::proto::VintageHuntingThirdStageInfo*>(
      ::proto::VintageHuntingThirdStageInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025cmd/cmd_gallery.proto\022\005proto\032\014define.p"
      "roto\"/\n\027GalleryFlowerStartParam\022\024\n\014targe"
      "t_score\030\005 \001(\r\"\277\001\n\022GalleryStartNotify\022\020\n\010"
      "end_time\030\006 \001(\r\022\024\n\014player_count\030\013 \001(\r\022\021\n\t"
      "owner_uid\030\t \001(\r\022\022\n\ngallery_id\030\r \001(\r\022\022\n\ns"
      "tart_time\030\005 \001(\r\022<\n\022flower_start_param\030\017 "
      "\001(\0132\036.proto.GalleryFlowerStartParamH\000B\010\n"
      "\006detail\"\233\001\n\031GalleryBalloonShootNotify\022\031\n"
      "\021trigger_entity_id\030\014 \001(\r\022\022\n\ngallery_id\030\005"
      " \001(\r\022\r\n\005combo\030\016 \001(\r\022\032\n\022combo_disable_tim"
      "e\030\006 \001(\004\022\021\n\tadd_score\030\013 \001(\005\022\021\n\tcur_score\030"
      "\r \001(\r\"\255\001\n\031GalleryBalloonScoreNotify\022\022\n\ng"
      "allery_id\030\t \001(\r\022H\n\ruid_score_map\030\007 \003(\01321"
      ".proto.GalleryBalloonScoreNotify.UidScor"
      "eMapEntry\0322\n\020UidScoreMapEntry\022\013\n\003key\030\001 \001"
      "(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\213\001\n\021BalloonSettleI"
      "nfo\022\013\n\003uid\030\003 \001(\r\022\023\n\013shoot_count\030\014 \001(\r\022\021\n"
      "\tmax_combo\030\t \001(\r\022\023\n\013final_score\030\007 \001(\r\022,\n"
      "\013player_info\030\002 \001(\0132\027.proto.OnlinePlayerI"
      "nfo\"\'\n\021GalleryStopNotify\022\022\n\ngallery_id\030\010"
      " \001(\r\"\243\002\n\016FallSettleInfo\022\023\n\013catch_count\030\017"
      " \001(\r\022,\n\013player_info\030\r \001(\0132\027.proto.Online"
      "PlayerInfo\022\013\n\003uid\030\016 \001(\r\022W\n\033flower_ring_c"
      "atch_count_map\030\003 \003(\01322.proto.FallSettleI"
      "nfo.FlowerRingCatchCountMapEntry\022\023\n\013rema"
      "in_time\030\n \001(\r\022\023\n\013final_score\030\001 \001(\r\032>\n\034Fl"
      "owerRingCatchCountMapEntry\022\013\n\003key\030\001 \001(\r\022"
      "\r\n\005value\030\002 \001(\r:\0028\001\"\206\002\n\026GalleryFallCatchN"
      "otify\022\021\n\tcur_score\030\006 \001(\r\022\021\n\ttime_cost\030\013 "
      "\001(\r\022R\n\024ball_catch_count_map\030\017 \003(\01324.prot"
      "o.GalleryFallCatchNotify.BallCatchCountM"
      "apEntry\022\021\n\tadd_score\030\001 \001(\r\022\021\n\tis_ground\030"
      "\014 \001(\010\022\022\n\ngallery_id\030\n \001(\r\0328\n\026BallCatchCo"
      "untMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:"
      "\0028\001\"@\n\017FallPlayerBrief\022\013\n\003uid\030\r \001(\r\022\021\n\ti"
      "s_ground\030\005 \001(\010\022\r\n\005score\030\n \001(\r\"\277\001\n\026Galler"
      "yFallScoreNotify\022\022\n\ngallery_id\030\007 \001(\r\022E\n\r"
      "uid_brief_map\030\001 \003(\0132..proto.GalleryFallS"
      "coreNotify.UidBriefMapEntry\032J\n\020UidBriefM"
      "apEntry\022\013\n\003key\030\001 \001(\r\022%\n\005value\030\002 \001(\0132\026.pr"
      "oto.FallPlayerBrief:\0028\001\"^\n\021BalloonPlayer"
      "Info\022\013\n\003uid\030\017 \001(\r\022\021\n\tcur_score\030\002 \001(\r\022\032\n\022"
      "combo_disable_time\030\016 \001(\r\022\r\n\005combo\030\013 \001(\r\""
      "\334\001\n\016FallPlayerInfo\022\021\n\ttime_cost\030\013 \001(\r\022\013\n"
      "\003uid\030\t \001(\r\022J\n\024ball_catch_count_map\030\006 \003(\013"
      "2,.proto.FallPlayerInfo.BallCatchCountMa"
      "pEntry\022\021\n\tcur_score\030\007 \001(\r\022\021\n\tis_ground\030\017"
      " \001(\010\0328\n\026BallCatchCountMapEntry\022\013\n\003key\030\001 "
      "\001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\355\001\n\027SceneGalleryB"
      "alloonInfo\022d\n\035scene_player_balloon_info_"
      "map\030\016 \003(\0132=.proto.SceneGalleryBalloonInf"
      "o.ScenePlayerBalloonInfoMapEntry\022\020\n\010end_"
      "time\030\005 \001(\r\032Z\n\036ScenePlayerBalloonInfoMapE"
      "ntry\022\013\n\003key\030\001 \001(\r\022\'\n\005value\030\002 \001(\0132\030.proto"
      ".BalloonPlayerInfo:\0028\001\"\333\001\n\024SceneGalleryF"
      "allInfo\022[\n\032scene_player_fall_info_map\030\014 "
      "\003(\01327.proto.SceneGalleryFallInfo.ScenePl"
      "ayerFallInfoMapEntry\022\020\n\010end_time\030\002 \001(\r\032T"
      "\n\033ScenePlayerFallInfoMapEntry\022\013\n\003key\030\001 \001"
      "(\r\022$\n\005value\030\002 \001(\0132\025.proto.FallPlayerInfo"
      ":\0028\001\"S\n\026SceneGalleryFlowerInfo\022\020\n\010end_ti"
      "me\030\007 \001(\r\022\024\n\014target_score\030\r \001(\r\022\021\n\tcur_sc"
      "ore\030\t \001(\r\"\245\001\n\026SceneGalleryBulletInfo\022\020\n\010"
      "end_time\030\001 \001(\r\022E\n\rhit_count_map\030\n \003(\0132.."
      "proto.SceneGalleryBulletInfo.HitCountMap"
      "Entry\0322\n\020HitCountMapEntry\022\013\n\003key\030\001 \001(\r\022\r"
      "\n\005value\030\002 \001(\r:\0028\001\"\262\001\n\033SceneGalleryBroken"
      "FloorInfo\022L\n\016fall_count_map\030\003 \003(\01324.prot"
      "o.SceneGalleryBrokenFloorInfo.FallCountM"
      "apEntry\022\020\n\010end_time\030\t \001(\r\0323\n\021FallCountMa"
      "pEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001\"P"
      "\n\033SceneGalleryHideAndSeekInfo\022\030\n\020visible"
      "_uid_list\030\r \003(\r\022\027\n\017caught_uid_list\030\004 \003(\r"
      "\"n\n\035SceneGalleryBuoyantCombatInfo\022\r\n\005sco"
      "re\030\006 \001(\r\022\"\n\032kill_special_monster_count\030\001"
      " \001(\r\022\032\n\022kill_monster_count\030\016 \001(\r\"g\n\030Scen"
      "eGalleryProgressInfo\022\033\n\023progress_stage_l"
      "ist\030\010 \003(\r\022\013\n\003key\030\013 \001(\t\022\020\n\010progress\030\005 \001(\r"
      "\022\017\n\007ui_form\030\014 \001(\r\"]\n\037SceneGalleryBounceC"
      "onjuringInfo\022%\n\035total_destroyed_machine_"
      "count\030\004 \001(\r\022\023\n\013total_score\030\006 \001(\r\"[\n\030Scen"
      "eGalleryHandballInfo\022)\n\017ball_place_info\030"
      "\t \001(\0132\020.proto.PlaceInfo\022\024\n\014is_have_ball\030"
      "\017 \001(\010\"f\n\024SceneGallerySumoInfo\022\r\n\005score\030\002"
      " \001(\r\022\037\n\027kill_normal_mosnter_num\030\017 \001(\r\022\036\n"
      "\026kill_elite_monster_num\030\016 \001(\r\"7\n\036SceneGa"
      "llerySalvagePreventInfo\022\025\n\rmonster_count"
      "\030\007 \001(\r\"{\n\035SceneGallerySalvageEscortInfo\022"
      "\025\n\rmax_box_count\030\016 \001(\r\022\031\n\021max_monster_co"
      "unt\030\003 \001(\r\022\021\n\tbox_count\030\007 \001(\r\022\025\n\rmonster_"
      "count\030\013 \001(\r\",\n\033SceneGalleryCrystalLinkIn"
      "fo\022\r\n\005score\030\n \001(\r\"[\n\035SceneGalleryIrodori"
      "MasterInfo\022\020\n\010level_id\030\010 \001(\r\022\022\n\ndifficul"
      "ty\030\001 \001(\r\022\024\n\014is_cg_viewed\030\005 \001(\010\",\n\033SceneG"
      "alleryHomeBalloonInfo\022\r\n\005score\030\007 \001(\r\"\221\001\n"
      "\'SceneGalleryLuminanceStoneChallengeInfo"
      "\022\032\n\022kill_monster_count\030\005 \001(\r\022\r\n\005score\030\003 "
      "\001(\r\022\027\n\017clean_mud_count\030\002 \001(\r\022\"\n\032kill_spe"
      "cial_monster_count\030\006 \001(\r\"\211\002\n!SceneGaller"
      "yHomeSeekFurnitureInfo\022\031\n\021cur_tide_left_"
      "num\030\006 \001(\r\022V\n\020player_score_map\030\010 \003(\0132<.pr"
      "oto.SceneGalleryHomeSeekFurnitureInfo.Pl"
      "ayerScoreMapEntry\022\036\n\026cur_tide_duration_t"
      "ime\030\014 \001(\r\022\032\n\022cur_tide_total_num\030\t \001(\r\0325\n"
      "\023PlayerScoreMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005val"
      "ue\030\002 \001(\r:\0028\001\"\246\001\n#SceneGalleryIslandParty"
      "DownHillInfo\022 \n\030total_kill_monster_count"
      "\030\016 \001(\r\022/\n\014start_source\030\017 \001(\0162\031.proto.Gal"
      "leryStartSource\022\036\n\026max_kill_monster_coun"
      "t\030\005 \001(\r\022\014\n\004coin\030\r \001(\r\"e\n SceneGallerySum"
      "merTimeV2BoatInfo\022\016\n\006param1\030\017 \001(\r\022\016\n\006par"
      "am3\030\003 \001(\r\022\021\n\tused_time\030\013 \001(\r\022\016\n\006param2\030\007"
      " \001(\r\"\253\001\n\037SceneGalleryIslandPartyRaftInfo"
      "\022\014\n\004coin\030\006 \001(\r\022/\n\014start_source\030\007 \001(\0162\031.p"
      "roto.GalleryStartSource\022\021\n\tcomponent\030\001 \001"
      "(\r\022\014\n\004fuel\030\017 \001(\r\022\020\n\010point_id\030\014 \001(\r\022\026\n\016ra"
      "ft_entity_id\030\004 \001(\r\"\362\001\n\037SceneGalleryIslan"
      "dPartySailInfo\022\032\n\022max_clean_progress\030\016 \001"
      "(\r\022\026\n\016clean_progress\030\n \001(\r\022/\n\014start_sour"
      "ce\030\001 \001(\0162\031.proto.GalleryStartSource\022\025\n\rk"
      "ill_progress\030\013 \001(\r\022\014\n\004coin\030\017 \001(\r\022*\n\005stag"
      "e\030\014 \001(\0162\033.proto.IslandPartySailStage\022\031\n\021"
      "max_kill_progress\030\010 \001(\r\"b\n!SceneGalleryI"
      "nstableSprayBuffInfo\022\017\n\007buff_id\030\006 \001(\r\022\025\n"
      "\rbuff_end_time\030\t \001(\004\022\025\n\rbuff_max_time\030\004 "
      "\001(\004\"o\n\034SceneGalleryInstaleSprayInfo\022\r\n\005s"
      "core\030\005 \001(\r\022@\n\016buff_info_list\030\014 \003(\0132(.pro"
      "to.SceneGalleryInstableSprayBuffInfo\"@\n\036"
      "SceneGalleryTreasureSeelieInfo\022\020\n\010progre"
      "ss\030\017 \001(\r\022\014\n\004goal\030\016 \001(\r\"\363\001\n\031SceneGalleryW"
      "indFieldInfo\022\032\n\022killed_monster_num\030\005 \001(\r"
      "\022 \n\030challenge_ball_max_count\030\014 \001(\r\022\017\n\007sh"
      "ow_id\030\017 \001(\r\022\034\n\024challenge_total_time\030\004 \001("
      "\r\022 \n\030challenge_ball_cur_count\030\t \001(\r\022\020\n\010c"
      "oin_num\030\001 \001(\r\022\033\n\023challenge_timestamp\030\r \001"
      "(\r\022\030\n\020element_ball_num\030\n \001(\r\"\325\001\n%SceneGa"
      "lleryFungusFighterTrainingInfo\022\031\n\021max_mo"
      "nster_count\030\004 \001(\r\022\034\n\024killed_monster_coun"
      "t\030\t \001(\r\022\027\n\017buff_start_time\030\r \001(\r\022\017\n\007buff"
      "_id\030\001 \001(\r\022\027\n\017max_skill_count\030\n \001(\r\022\026\n\016bu"
      "ff_last_time\030\016 \001(\r\022\030\n\020rest_skill_count\030\005"
      " \001(\r\"@\n$SceneGalleryFungusFighterCapture"
      "Info\022\030\n\020is_hide_progress\030\r \001(\010\"\257\001\n!Scene"
      "GalleryEffigyChallengeV2Info\022\032\n\022killed_m"
      "onster_cnt\030\n \001(\r\022\035\n\025total_target_kill_cn"
      "t\030\017 \001(\r\022\030\n\020scene_start_time\030\016 \001(\r\022\031\n\021t_r"
      "emain_use_time\030\006 \001(\r\022\032\n\022boss_violent_lev"
      "el\030\t \001(\r\"\203\001\n\035SceneGalleryCharAmusementIn"
      "fo\022\025\n\ris_last_level\030\002 \001(\010\022\021\n\tmax_score\030\t"
      " \001(\r\022\021\n\tcur_score\030\016 \001(\r\022\021\n\tis_finish\030\n \001"
      "(\010\022\022\n\nis_success\030\001 \001(\010\"_\n\034SceneGalleryBr"
      "ickBreakerInfo\022\r\n\005score\030\n \001(\r\022\022\n\nlife_co"
      "unt\030\004 \001(\r\022\r\n\005fever\030\002 \001(\r\022\r\n\005combo\030\001 \001(\r\""
      "O\n\033SceneGalleryCoinCollectInfo\022\026\n\016coin_t"
      "otal_num\030\004 \001(\r\022\030\n\020coin_collect_num\030\002 \001(\r"
      "\"\250\001\n\031SceneGalleryTeamChainInfo\022\036\n\026galler"
      "y_score_end_time\030\016 \001(\r\022\027\n\017cur_total_scor"
      "e\030\007 \001(\r\022\027\n\017cur_gallery_idx\030\003 \001(\r\022\035\n\025tota"
      "l_target_kill_cnt\030\n \001(\r\022\032\n\022killed_monste"
      "r_cnt\030\014 \001(\r\"\351\023\n\020SceneGalleryInfo\022&\n\005stag"
      "e\030\005 \001(\0162\027.proto.GalleryStageType\022;\n\022prog"
      "ress_info_list\030\004 \003(\0132\037.proto.SceneGaller"
      "yProgressInfo\022\022\n\ngallery_id\030\002 \001(\r\022\022\n\nsta"
      "rt_time\030\003 \001(\r\022\020\n\010end_time\030\013 \001(\r\022\021\n\towner"
      "_uid\030\t \001(\r\022\024\n\014player_count\030\001 \001(\r\022\032\n\022pre_"
      "start_end_time\030\017 \001(\r\0226\n\014balloon_info\030\016 \001"
      "(\0132\036.proto.SceneGalleryBalloonInfoH\000\0220\n\t"
      "fall_info\030\007 \001(\0132\033.proto.SceneGalleryFall"
      "InfoH\000\0224\n\013flower_info\030\010 \001(\0132\035.proto.Scen"
      "eGalleryFlowerInfoH\000\0224\n\013bullet_info\030\r \001("
      "\0132\035.proto.SceneGalleryBulletInfoH\000\022\?\n\021br"
      "oken_floor_info\030\n \001(\0132\".proto.SceneGalle"
      "ryBrokenFloorInfoH\000\022@\n\022hide_and_seek_inf"
      "o\030\006 \001(\0132\".proto.SceneGalleryHideAndSeekI"
      "nfoH\000\022D\n\023buoyant_combat_info\030\350\n \001(\0132$.pr"
      "oto.SceneGalleryBuoyantCombatInfoH\000\022H\n\025b"
      "ounce_conjuring_info\030\304\005 \001(\0132&.proto.Scen"
      "eGalleryBounceConjuringInfoH\000\0229\n\rhandbal"
      "l_info\030\315\017 \001(\0132\037.proto.SceneGalleryHandba"
      "llInfoH\000\0221\n\tsumo_info\030\253\006 \001(\0132\033.proto.Sce"
      "neGallerySumoInfoH\000\022F\n\024salvage_prevent_i"
      "nfo\030\244\r \001(\0132%.proto.SceneGallerySalvagePr"
      "eventInfoH\000\022D\n\023salvage_escort_info\030\367\005 \001("
      "\0132$.proto.SceneGallerySalvageEscortInfoH"
      "\000\022@\n\021home_balloon_info\030\212\010 \001(\0132\".proto.Sc"
      "eneGalleryHomeBalloonInfoH\000\022@\n\021crystal_l"
      "ink_info\030\324\017 \001(\0132\".proto.SceneGalleryCrys"
      "talLinkInfoH\000\022D\n\023irodori_master_info\030\241\017 "
      "\001(\0132$.proto.SceneGalleryIrodoriMasterInf"
      "oH\000\022X\n\036luminance_stone_challenge_info\030j "
      "\001(\0132..proto.SceneGalleryLuminanceStoneCh"
      "allengeInfoH\000\022M\n\030home_seek_furniture_inf"
      "o\030\260\013 \001(\0132(.proto.SceneGalleryHomeSeekFur"
      "nitureInfoH\000\022R\n\033island_party_down_hill_i"
      "nfo\030\316\003 \001(\0132*.proto.SceneGalleryIslandPar"
      "tyDownHillInfoH\000\022L\n\030summer_time_v2_boat_"
      "info\030\250\002 \001(\0132\'.proto.SceneGallerySummerTi"
      "meV2BoatInfoH\000\022I\n\026island_party_raft_info"
      "\030\215\016 \001(\0132&.proto.SceneGalleryIslandPartyR"
      "aftInfoH\000\022I\n\026island_party_sail_info\030\355\010 \001"
      "(\0132&.proto.SceneGalleryIslandPartySailIn"
      "foH\000\022C\n\023instable_spray_info\030\254\t \001(\0132#.pro"
      "to.SceneGalleryInstaleSprayInfoH\000\022D\n\023muq"
      "adas_potion_info\030\341\006 \001(\0132$.proto.SceneGal"
      "leryMuqadasPotionInfoH\000\022F\n\024treasure_seel"
      "ie_info\030\365\013 \001(\0132%.proto.SceneGalleryTreas"
      "ureSeelieInfoH\000\022F\n\024vintage_hunting_info\030"
      "\376\001 \001(\0132%.proto.SceneGalleryVintageHuntin"
      "gInfoH\000\022<\n\017wind_field_info\030\270\010 \001(\0132 .prot"
      "o.SceneGalleryWindFieldInfoH\000\022U\n\034fungus_"
      "fighter_training_info\030\260\n \001(\0132,.proto.Sce"
      "neGalleryFungusFighterTrainingInfoH\000\022J\n\025"
      "effigy_challenge_info\030\362\006 \001(\0132(.proto.Sce"
      "neGalleryEffigyChallengeV2InfoH\000\022S\n\033fung"
      "us_fighter_capture_info\030\246\003 \001(\0132+.proto.S"
      "ceneGalleryFungusFighterCaptureInfoH\000\022D\n"
      "\023char_amusement_info\030\276\010 \001(\0132$.proto.Scen"
      "eGalleryCharAmusementInfoH\000\022B\n\022brick_bre"
      "aker_info\030\221\013 \001(\0132#.proto.SceneGalleryBri"
      "ckBreakerInfoH\000\022@\n\021coin_collect_info\030\246\014 "
      "\001(\0132\".proto.SceneGalleryCoinCollectInfoH"
      "\000\022<\n\017team_chain_info\030\327\013 \001(\0132 .proto.Scen"
      "eGalleryTeamChainInfoH\000B\006\n\004info\"\033\n\031GetAl"
      "lSceneGalleryInfoReq\"`\n\031GetAllSceneGalle"
      "ryInfoRsp\0222\n\021gallery_info_list\030\014 \003(\0132\027.p"
      "roto.SceneGalleryInfo\022\017\n\007retcode\030\002 \001(\005\"T"
      "\n\030GalleryFlowerCatchNotify\022\021\n\tcur_score\030"
      "\014 \001(\r\022\021\n\tadd_score\030\016 \001(\r\022\022\n\ngallery_id\030\005"
      " \001(\r\"G\n\025GalleryPreStartNotify\022\022\n\ngallery"
      "_id\030\n \001(\r\022\032\n\022pre_start_end_time\030\t \001(\r\"\?\n"
      "\026GalleryBulletHitNotify\022\021\n\thit_count\030\016 \001"
      "(\r\022\022\n\ngallery_id\030\014 \001(\r\"F\n\034GalleryBrokenF"
      "loorFallNotify\022\022\n\nfall_count\030\003 \001(\r\022\022\n\nga"
      "llery_id\030\005 \001(\r\")\n\023InterruptGalleryReq\022\022\n"
      "\ngallery_id\030\r \001(\r\":\n\023InterruptGalleryRsp"
      "\022\017\n\007retcode\030\014 \001(\005\022\022\n\ngallery_id\030\t \001(\r\"G\n"
      "\026SceneGalleryInfoNotify\022-\n\014gallery_info\030"
      "\004 \001(\0132\027.proto.SceneGalleryInfo\"\325\001\n\036Buoya"
      "ntCombatGallerySettleInfo\022\025\n\rgallery_lev"
      "el\030\014 \001(\r\022\023\n\013final_score\030\017 \001(\r\022\032\n\022kill_mo"
      "nster_count\030\t \001(\r\022\031\n\021kill_target_count\030\001"
      " \001(\r\022\"\n\032kill_special_monster_count\030\004 \001(\r"
      "\022\022\n\ngallery_id\030\002 \001(\r\022\030\n\020gallery_multiple"
      "\030\013 \001(\r\"\231\003\n BounceConjuringGallerySettleI"
      "nfo\022,\n\013player_info\030\016 \001(\0132\027.proto.OnlineP"
      "layerInfo\022\037\n\027destroyed_machine_count\030\005 \001"
      "(\r\022\023\n\013fever_count\030\006 \001(\r\022\030\n\020normal_hit_co"
      "unt\030\004 \001(\r\022\016\n\006damage\030\013 \001(\002\022U\n\020gadget_coun"
      "t_map\030\017 \003(\0132;.proto.BounceConjuringGalle"
      "rySettleInfo.GadgetCountMapEntry\022\r\n\005scor"
      "e\030\014 \001(\r\022\031\n\021perfect_hit_count\030\010 \001(\r\022/\n\tca"
      "rd_list\030\007 \003(\0132\034.proto.ExhibitionDisplayI"
      "nfo\0325\n\023GadgetCountMapEntry\022\013\n\003key\030\001 \001(\r\022"
      "\r\n\005value\030\002 \001(\r:\0028\001\"\\\n\037GalleryBounceConju"
      "ringHitNotify\022\021\n\tadd_score\030\010 \001(\r\022\022\n\nis_p"
      "erfect\030\005 \001(\010\022\022\n\ngallery_id\030\n \001(\r\"\202\001\n\034Gal"
      "lerySumoKillMonsterNotify\022\037\n\027kill_normal"
      "_mosnter_num\030\004 \001(\r\022\r\n\005score\030\007 \001(\r\022\036\n\026kil"
      "l_elite_monster_num\030\016 \001(\r\022\022\n\ngallery_id\030"
      "\013 \001(\r\"H\n#GalleryCrystalLinkKillMonsterNo"
      "tify\022\r\n\005score\030\007 \001(\r\022\022\n\ngallery_id\030\t \001(\r\""
      "^\n GalleryCrystalLinkBuffInfoNotify\022\022\n\ng"
      "allery_id\030\r \001(\r\022\025\n\ris_buff_valid\030\013 \001(\010\022\017"
      "\n\007buff_id\030\016 \001(\r\"6\n\010FishInfo\022\022\n\nfree_coun"
      "t\030\013 \001(\r\022\026\n\016into_bag_count\030\014 \001(\r\"<\n\014Fishi"
      "ngScore\022\025\n\rfishing_score\030\002 \001(\r\022\025\n\ris_new"
      "_record\030\004 \001(\010\"\314\001\n\030FishingGallerySettleIn"
      "fo\022>\n\010fish_map\030\013 \003(\0132,.proto.FishingGall"
      "erySettleInfo.FishMapEntry\022/\n\022fishing_sc"
      "ore_list\030\017 \003(\0132\023.proto.FishingScore\032\?\n\014F"
      "ishMapEntry\022\013\n\003key\030\001 \001(\r\022\036\n\005value\030\002 \001(\0132"
      "\017.proto.FishInfo:\0028\001\"i\n\027RacingGallerySet"
      "tleInfo\022\022\n\nwinner_uid\030\006 \001(\r\022(\n\006reason\030\004 "
      "\001(\0162\030.proto.GalleryStopReason\022\020\n\010use_tim"
      "e\030\001 \001(\r\"\223\001\n\037SalvagePreventGallerySettleI"
      "nfo\022\023\n\013time_remain\030\010 \001(\r\022/\n\006reason\030\007 \001(\016"
      "2\037.proto.SalvagePreventStopReason\022\023\n\013fin"
      "al_score\030\r \001(\r\022\025\n\rmonster_count\030\017 \001(\r\"e\n"
      "\036SalvageEscortGallerySettleInfo\022\023\n\013time_"
      "remain\030\016 \001(\r\022.\n\006reason\030\007 \001(\0162\036.proto.Sal"
      "vageEscortStopReason\"y\n\030BalloonGallerySe"
      "ttleInfo\022\r\n\005score\030\010 \001(\r\022(\n\006reason\030\016 \001(\0162"
      "\030.proto.GalleryStopReason\022\021\n\thit_count\030\n"
      " \001(\r\022\021\n\towner_uid\030\006 \001(\r\"\227\001\n\036IrodoriMaste"
      "rGallerySettleInfo\022(\n\006reason\030\017 \001(\0162\030.pro"
      "to.GalleryStopReason\022\021\n\tis_finish\030\013 \001(\010\022"
      "\023\n\013finish_time\030\016 \001(\r\022\021\n\tdifficult\030\006 \001(\r\022"
      "\020\n\010level_id\030\004 \001(\r\"B\n\026PhotoGallerySettleI"
      "nfo\022(\n\006reason\030\007 \001(\0162\030.proto.GalleryStopR"
      "eason\"\326\001\n(LuminanceStoneChallengeGallery"
      "SettleInfo\022\032\n\022kill_monster_count\030\014 \001(\r\022\""
      "\n\032kill_special_monster_count\030\010 \001(\r\022\027\n\017cl"
      "ean_mud_count\030\n \001(\r\022\022\n\ngallery_id\030\002 \001(\r\022"
      "(\n\006reason\030\013 \001(\0162\030.proto.GalleryStopReaso"
      "n\022\023\n\013final_score\030\r \001(\r\"0\n\032HomeGalleryInP"
      "layingNotify\022\022\n\ngallery_id\030\r \001(\r\"\244\001\n!Sum"
      "merTimeV2BoatGallerySettleInfo\022\016\n\006param1"
      "\030\007 \001(\r\022\016\n\006param2\030\002 \001(\r\022(\n\006reason\030\003 \001(\0162\030"
      ".proto.GalleryStopReason\022\016\n\006param3\030\006 \001(\r"
      "\022\021\n\tused_time\030\014 \001(\r\022\022\n\ngallery_id\030\001 \001(\r\""
      "j\n$GalleryIslandPartyDownHillInfoNotify\022"
      "\022\n\ngallery_id\030\002 \001(\r\022\014\n\004coin\030\t \001(\r\022 \n\030tot"
      "al_kill_monster_count\030\013 \001(\r\"\\\n\031IslandPar"
      "tyRaftInfoNotify\022\020\n\010point_id\030\007 \001(\r\022\014\n\004co"
      "in\030\017 \001(\r\022\014\n\004fuel\030\003 \001(\r\022\021\n\tcomponent\030\r \001("
      "\r\"\203\001\n\031IslandPartySailInfoNotify\022\014\n\004coin\030"
      "\n \001(\r\022*\n\005stage\030\010 \001(\0162\033.proto.IslandParty"
      "SailStage\022\032\n\022kill_monster_count\030\004 \001(\r\022\020\n"
      "\010progress\030\017 \001(\r\"}\n\034IslandPartyGallerySet"
      "tleInfo\022,\n\013player_info\030\r \001(\0132\027.proto.Onl"
      "inePlayerInfo\022/\n\tcard_list\030\013 \003(\0132\034.proto"
      ".ExhibitionDisplayInfo\"*\n\024BackRebornGall"
      "eryReq\022\022\n\ngallery_id\030\017 \001(\r\";\n\024BackReborn"
      "GalleryRsp\022\022\n\ngallery_id\030\t \001(\r\022\017\n\007retcod"
      "e\030\005 \001(\005\"\210\001\n\037GalleryWillStartCountdownNot"
      "ify\022/\n\014start_source\030\013 \001(\0162\031.proto.Galler"
      "yStartSource\022\020\n\010end_time\030\014 \001(\r\022\016\n\006is_end"
      "\030\007 \001(\010\022\022\n\ngallery_id\030\016 \001(\r\"/\n\036InstableSp"
      "rayGalleryInfoNotify\022\r\n\005score\030\003 \001(\r\"}\n\035S"
      "ceneGalleryMuqadasPotionInfo\022\r\n\005score\030\006 "
      "\001(\r\022\036\n\026capture_weakness_count\030\004 \001(\r\022\024\n\014s"
      "kill_energy\030\n \001(\r\022\027\n\017skill_use_limit\030\t \001"
      "(\r\"g\n\034VintageHuntingFirstStageInfo\022\021\n\tti"
      "mid_cnt\030\017 \001(\r\022\022\n\nbrutal_cnt\030\007 \001(\r\022\r\n\005sco"
      "re\030\016 \001(\r\022\021\n\telite_cnt\030\013 \001(\r\"`\n\035VintageHu"
      "ntingSecondStageInfo\022\021\n\ttotal_num\030\013 \001(\r\022"
      "\032\n\022capture_animal_num\030\r \001(\r\022\020\n\010left_num\030"
      "\003 \001(\r\"\036\n\034VintageHuntingThirdStageInfo\"\377\001"
      "\n\036SceneGalleryVintageHuntingInfo\022\020\n\010stag"
      "e_id\030\007 \001(\r\022\?\n\020first_stage_info\030\002 \001(\0132#.p"
      "roto.VintageHuntingFirstStageInfoH\000\022A\n\021s"
      "econd_stage_info\030\017 \001(\0132$.proto.VintageHu"
      "ntingSecondStageInfoH\000\022\?\n\020third_stage_in"
      "fo\030\014 \001(\0132#.proto.VintageHuntingThirdStag"
      "eInfoH\000B\006\n\004info\"\364\001\n\032WindFieldGalleryInfo"
      "Notify\022\017\n\007show_id\030\003 \001(\r\022\032\n\022killed_monste"
      "r_num\030\007 \001(\r\022\020\n\010coin_num\030\t \001(\r\022 \n\030challen"
      "ge_ball_max_count\030\001 \001(\r\022\034\n\024challenge_tot"
      "al_time\030\005 \001(\r\022 \n\030challenge_ball_cur_coun"
      "t\030\n \001(\r\022\033\n\023challenge_timestamp\030\004 \001(\r\022\030\n\020"
      "element_ball_num\030\016 \001(\r\"\333\001\n#WindFieldGall"
      "eryChallengeInfoNotify\022\033\n\023challenge_time"
      "stamp\030\006 \001(\r\022\020\n\010is_start\030\010 \001(\010\022\017\n\007show_id"
      "\030\014 \001(\r\022\022\n\nis_success\030\007 \001(\010\022\034\n\024challenge_"
      "total_time\030\r \001(\r\022 \n\030challenge_ball_max_c"
      "ount\030\013 \001(\r\022 \n\030challenge_ball_cur_count\030\001"
      " \001(\r\"\317\001\n\037FungusFighterTrainingInfoNotify"
      "\022\027\n\017buff_start_time\030\003 \001(\r\022\027\n\017max_skill_c"
      "ount\030\007 \001(\r\022\031\n\021max_monster_count\030\010 \001(\r\022\017\n"
      "\007buff_id\030\016 \001(\r\022\026\n\016buff_last_time\030\004 \001(\r\022\030"
      "\n\020rest_skill_count\030\006 \001(\r\022\034\n\024killed_monst"
      "er_count\030\017 \001(\r\"s\n\037FungusFighterTrainingS"
      "ettleInfo\022\021\n\tused_time\030\017 \001(\r\022(\n\006reason\030\003"
      " \001(\0162\030.proto.GalleryStopReason\022\023\n\013transa"
      "ction\030\001 \001(\t\"/\n\031FungusCaptureSettleNotify"
      "\022\022\n\nis_success\030\002 \001(\010\"9\n\037HideAndSeekPlaye"
      "rCapturedNotify\022\026\n\016ghost_skill_id\030\014 \001(\r\""
      "\265\001\n\036CoinCollectGallerySettleNotify\022\030\n\020co"
      "in_collect_num\030\013 \001(\r\022\026\n\016coin_total_num\030\007"
      " \001(\r\022\020\n\010level_id\030\t \001(\r\022\031\n\021coin_collect_t"
      "ime\030\004 \001(\r\022\035\n\025multistage_play_index\030\006 \001(\r"
      "\022\025\n\ris_new_record\030\n \001(\010*M\n\020GalleryStageT"
      "ype\022\020\n\014GALLERY_NONE\020\000\022\024\n\020GALLERY_PRESTAR"
      "T\020\001\022\021\n\rGALLERY_START\020\002*\232\003\n\021GalleryStopRe"
      "ason\022\025\n\021GALLERY_STOP_NONE\020\000\022\027\n\023GALLERY_S"
      "TOP_TIMEUP\020\001\022!\n\035GALLERY_STOP_CLIENT_INTE"
      "RRUPT\020\002\022&\n\"GALLERY_STOP_LUA_INTERRUPT_SU"
      "CCESS\020\003\022#\n\037GALLERY_STOP_LUA_INTERRUPT_FA"
      "IL\020\004\022\"\n\036GALLERY_STOP_OWNER_LEAVE_SCENE\020\005"
      "\022!\n\035GALLERY_STOP_PLAY_INIT_FAILED\020\006\022#\n\037G"
      "ALLERY_STOP_OTHER_PLAYER_ENTER\020\007\022\033\n\027GALL"
      "ERY_STOP_AVATAR_DIE\020\010\022\031\n\025GALLERY_STOP_FI"
      "NISHED\020\t\022\037\n\033GALLERY_STOP_FUNGUS_ALL_DIE\020"
      "\n\022 \n\034GALLERY_STOP_LIFE_COUNT_ZERO\020\013*g\n\022G"
      "alleryStartSource\022\031\n\025GALLERY_START_BY_NO"
      "NE\020\000\022\032\n\026GALLERY_START_BY_MATCH\020\001\022\032\n\026GALL"
      "ERY_START_BY_DRAFT\020\002*\377\001\n\030SalvagePreventS"
      "topReason\022\035\n\031SALVAGE_PREVENT_STOP_NONE\020\000"
      "\022 \n\034SALVAGE_PREVENT_STOP_SUCCESS\020\001\022 \n\034SA"
      "LVAGE_PREVENT_STOP_ARRIVAL\020\002\022\"\n\036SALVAGE_"
      "PREVENT_STOP_INTERRUPT\020\003\022\036\n\032SALVAGE_PREV"
      "ENT_STOP_LEAVE\020\004\022\035\n\031SALVAGE_PREVENT_STOP"
      "_FULL\020\005\022\035\n\031SALVAGE_PREVENT_STOP_AWAY\020\006*\364"
      "\001\n\027SalvageEscortStopReason\022\034\n\030SALVAGE_ES"
      "CORT_STOP_NONE\020\000\022\037\n\033SALVAGE_ESCORT_STOP_"
      "SUCCESS\020\001\022\034\n\030SALVAGE_ESCORT_STOP_DUMP\020\002\022"
      "\034\n\030SALVAGE_ESCORT_STOP_TIME\020\003\022!\n\035SALVAGE"
      "_ESCORT_STOP_INTERRUPT\020\004\022\035\n\031SALVAGE_ESCO"
      "RT_STOP_LEAVE\020\005\022\034\n\030SALVAGE_ESCORT_STOP_F"
      "ULL\020\006*~\n\024IslandPartySailStage\022 \n\034ISLAND_"
      "PARTY_SAIL_STAGE_NONE\020\000\022 \n\034ISLAND_PARTY_"
      "SAIL_STAGE_SAIL\020\001\022\"\n\036ISLAND_PARTY_SAIL_S"
      "TAGE_BATTLE\020\002B(Z&github.com/teyvat-helpe"
      "r/hk4e-proto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 15743);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_gallery.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fgallery_2eproto

const ::google::protobuf::EnumDescriptor* GalleryStageType_descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_enum_descriptors[0];
}
bool GalleryStageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GalleryStopReason_descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_enum_descriptors[1];
}
bool GalleryStopReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GalleryStartSource_descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_enum_descriptors[2];
}
bool GalleryStartSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SalvagePreventStopReason_descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_enum_descriptors[3];
}
bool SalvagePreventStopReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SalvageEscortStopReason_descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_enum_descriptors[4];
}
bool SalvageEscortStopReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IslandPartySailStage_descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_enum_descriptors[5];
}
bool IslandPartySailStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryFlowerStartParam::kTargetScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryFlowerStartParam::GalleryFlowerStartParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryFlowerStartParam)
}
GalleryFlowerStartParam::GalleryFlowerStartParam(const GalleryFlowerStartParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_score_ = from.target_score_;
  // @@protoc_insertion_point(copy_constructor:proto.GalleryFlowerStartParam)
}

void GalleryFlowerStartParam::SharedCtor() {
  target_score_ = 0u;
  _cached_size_ = 0;
}

GalleryFlowerStartParam::~GalleryFlowerStartParam() {
  // @@protoc_insertion_point(destructor:proto.GalleryFlowerStartParam)
  SharedDtor();
}

void GalleryFlowerStartParam::SharedDtor() {
}

void GalleryFlowerStartParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryFlowerStartParam::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryFlowerStartParam& GalleryFlowerStartParam::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryFlowerStartParam* GalleryFlowerStartParam::New(::google::protobuf::Arena* arena) const {
  GalleryFlowerStartParam* n = new GalleryFlowerStartParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryFlowerStartParam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryFlowerStartParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_score_ = 0u;
  _internal_metadata_.Clear();
}

bool GalleryFlowerStartParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryFlowerStartParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryFlowerStartParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryFlowerStartParam)
  return false;
#undef DO_
}

void GalleryFlowerStartParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryFlowerStartParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_score = 5;
  if (this->target_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->target_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryFlowerStartParam)
}

::google::protobuf::uint8* GalleryFlowerStartParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryFlowerStartParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_score = 5;
  if (this->target_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->target_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryFlowerStartParam)
  return target;
}

size_t GalleryFlowerStartParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryFlowerStartParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_score = 5;
  if (this->target_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryFlowerStartParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryFlowerStartParam)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryFlowerStartParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryFlowerStartParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryFlowerStartParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryFlowerStartParam)
    MergeFrom(*source);
  }
}

void GalleryFlowerStartParam::MergeFrom(const GalleryFlowerStartParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryFlowerStartParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_score() != 0) {
    set_target_score(from.target_score());
  }
}

void GalleryFlowerStartParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryFlowerStartParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryFlowerStartParam::CopyFrom(const GalleryFlowerStartParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryFlowerStartParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryFlowerStartParam::IsInitialized() const {
  return true;
}

void GalleryFlowerStartParam::Swap(GalleryFlowerStartParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryFlowerStartParam::InternalSwap(GalleryFlowerStartParam* other) {
  using std::swap;
  swap(target_score_, other->target_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryFlowerStartParam::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryFlowerStartParam

// uint32 target_score = 5;
void GalleryFlowerStartParam::clear_target_score() {
  target_score_ = 0u;
}
::google::protobuf::uint32 GalleryFlowerStartParam::target_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFlowerStartParam.target_score)
  return target_score_;
}
void GalleryFlowerStartParam::set_target_score(::google::protobuf::uint32 value) {
  
  target_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFlowerStartParam.target_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryStartNotify::kEndTimeFieldNumber;
const int GalleryStartNotify::kPlayerCountFieldNumber;
const int GalleryStartNotify::kOwnerUidFieldNumber;
const int GalleryStartNotify::kGalleryIdFieldNumber;
const int GalleryStartNotify::kStartTimeFieldNumber;
const int GalleryStartNotify::kFlowerStartParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryStartNotify::GalleryStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryStartNotify)
}
GalleryStartNotify::GalleryStartNotify(const GalleryStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_count_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(player_count_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kFlowerStartParam: {
      mutable_flower_start_param()->::proto::GalleryFlowerStartParam::MergeFrom(from.flower_start_param());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.GalleryStartNotify)
}

void GalleryStartNotify::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_count_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(player_count_));
  clear_has_detail();
  _cached_size_ = 0;
}

GalleryStartNotify::~GalleryStartNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryStartNotify)
  SharedDtor();
}

void GalleryStartNotify::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void GalleryStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryStartNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryStartNotify& GalleryStartNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryStartNotify* GalleryStartNotify::New(::google::protobuf::Arena* arena) const {
  GalleryStartNotify* n = new GalleryStartNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryStartNotify::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.GalleryStartNotify)
  switch (detail_case()) {
    case kFlowerStartParam: {
      delete detail_.flower_start_param_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void GalleryStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_count_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(player_count_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool GalleryStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryStartNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryFlowerStartParam flower_start_param = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flower_start_param()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryStartNotify)
  return false;
#undef DO_
}

void GalleryStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_time = 5;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->start_time(), output);
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_time(), output);
  }

  // uint32 owner_uid = 9;
  if (this->owner_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->owner_uid(), output);
  }

  // uint32 player_count = 11;
  if (this->player_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->player_count(), output);
  }

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gallery_id(), output);
  }

  // .proto.GalleryFlowerStartParam flower_start_param = 15;
  if (has_flower_start_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *detail_.flower_start_param_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryStartNotify)
}

::google::protobuf::uint8* GalleryStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 start_time = 5;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->start_time(), target);
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end_time(), target);
  }

  // uint32 owner_uid = 9;
  if (this->owner_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->owner_uid(), target);
  }

  // uint32 player_count = 11;
  if (this->player_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->player_count(), target);
  }

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gallery_id(), target);
  }

  // .proto.GalleryFlowerStartParam flower_start_param = 15;
  if (has_flower_start_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *detail_.flower_start_param_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryStartNotify)
  return target;
}

size_t GalleryStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryStartNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 start_time = 5;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 owner_uid = 9;
  if (this->owner_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_uid());
  }

  // uint32 player_count = 11;
  if (this->player_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_count());
  }

  switch (detail_case()) {
    // .proto.GalleryFlowerStartParam flower_start_param = 15;
    case kFlowerStartParam: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.flower_start_param_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryStartNotify)
    MergeFrom(*source);
  }
}

void GalleryStartNotify::MergeFrom(const GalleryStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.owner_uid() != 0) {
    set_owner_uid(from.owner_uid());
  }
  if (from.player_count() != 0) {
    set_player_count(from.player_count());
  }
  switch (from.detail_case()) {
    case kFlowerStartParam: {
      mutable_flower_start_param()->::proto::GalleryFlowerStartParam::MergeFrom(from.flower_start_param());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void GalleryStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryStartNotify::CopyFrom(const GalleryStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryStartNotify::IsInitialized() const {
  return true;
}

void GalleryStartNotify::Swap(GalleryStartNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryStartNotify::InternalSwap(GalleryStartNotify* other) {
  using std::swap;
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(gallery_id_, other->gallery_id_);
  swap(owner_uid_, other->owner_uid_);
  swap(player_count_, other->player_count_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryStartNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryStartNotify

// uint32 end_time = 6;
void GalleryStartNotify::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 GalleryStartNotify::end_time() const {
  // @@protoc_insertion_point(field_get:proto.GalleryStartNotify.end_time)
  return end_time_;
}
void GalleryStartNotify::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryStartNotify.end_time)
}

// uint32 player_count = 11;
void GalleryStartNotify::clear_player_count() {
  player_count_ = 0u;
}
::google::protobuf::uint32 GalleryStartNotify::player_count() const {
  // @@protoc_insertion_point(field_get:proto.GalleryStartNotify.player_count)
  return player_count_;
}
void GalleryStartNotify::set_player_count(::google::protobuf::uint32 value) {
  
  player_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryStartNotify.player_count)
}

// uint32 owner_uid = 9;
void GalleryStartNotify::clear_owner_uid() {
  owner_uid_ = 0u;
}
::google::protobuf::uint32 GalleryStartNotify::owner_uid() const {
  // @@protoc_insertion_point(field_get:proto.GalleryStartNotify.owner_uid)
  return owner_uid_;
}
void GalleryStartNotify::set_owner_uid(::google::protobuf::uint32 value) {
  
  owner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryStartNotify.owner_uid)
}

// uint32 gallery_id = 13;
void GalleryStartNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryStartNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryStartNotify.gallery_id)
  return gallery_id_;
}
void GalleryStartNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryStartNotify.gallery_id)
}

// uint32 start_time = 5;
void GalleryStartNotify::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 GalleryStartNotify::start_time() const {
  // @@protoc_insertion_point(field_get:proto.GalleryStartNotify.start_time)
  return start_time_;
}
void GalleryStartNotify::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryStartNotify.start_time)
}

// .proto.GalleryFlowerStartParam flower_start_param = 15;
bool GalleryStartNotify::has_flower_start_param() const {
  return detail_case() == kFlowerStartParam;
}
void GalleryStartNotify::set_has_flower_start_param() {
  _oneof_case_[0] = kFlowerStartParam;
}
void GalleryStartNotify::clear_flower_start_param() {
  if (has_flower_start_param()) {
    delete detail_.flower_start_param_;
    clear_has_detail();
  }
}
 const ::proto::GalleryFlowerStartParam& GalleryStartNotify::flower_start_param() const {
  // @@protoc_insertion_point(field_get:proto.GalleryStartNotify.flower_start_param)
  return has_flower_start_param()
      ? *detail_.flower_start_param_
      : ::proto::GalleryFlowerStartParam::default_instance();
}
::proto::GalleryFlowerStartParam* GalleryStartNotify::mutable_flower_start_param() {
  if (!has_flower_start_param()) {
    clear_detail();
    set_has_flower_start_param();
    detail_.flower_start_param_ = new ::proto::GalleryFlowerStartParam;
  }
  // @@protoc_insertion_point(field_mutable:proto.GalleryStartNotify.flower_start_param)
  return detail_.flower_start_param_;
}
::proto::GalleryFlowerStartParam* GalleryStartNotify::release_flower_start_param() {
  // @@protoc_insertion_point(field_release:proto.GalleryStartNotify.flower_start_param)
  if (has_flower_start_param()) {
    clear_has_detail();
    ::proto::GalleryFlowerStartParam* temp = detail_.flower_start_param_;
    detail_.flower_start_param_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void GalleryStartNotify::set_allocated_flower_start_param(::proto::GalleryFlowerStartParam* flower_start_param) {
  clear_detail();
  if (flower_start_param) {
    set_has_flower_start_param();
    detail_.flower_start_param_ = flower_start_param;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GalleryStartNotify.flower_start_param)
}

bool GalleryStartNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void GalleryStartNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
GalleryStartNotify::DetailCase GalleryStartNotify::detail_case() const {
  return GalleryStartNotify::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryBalloonShootNotify::kTriggerEntityIdFieldNumber;
const int GalleryBalloonShootNotify::kGalleryIdFieldNumber;
const int GalleryBalloonShootNotify::kComboFieldNumber;
const int GalleryBalloonShootNotify::kComboDisableTimeFieldNumber;
const int GalleryBalloonShootNotify::kAddScoreFieldNumber;
const int GalleryBalloonShootNotify::kCurScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryBalloonShootNotify::GalleryBalloonShootNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryBalloonShootNotify)
}
GalleryBalloonShootNotify::GalleryBalloonShootNotify(const GalleryBalloonShootNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&combo_disable_time_, &from.combo_disable_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_score_) -
    reinterpret_cast<char*>(&combo_disable_time_)) + sizeof(cur_score_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryBalloonShootNotify)
}

void GalleryBalloonShootNotify::SharedCtor() {
  ::memset(&combo_disable_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&combo_disable_time_)) + sizeof(cur_score_));
  _cached_size_ = 0;
}

GalleryBalloonShootNotify::~GalleryBalloonShootNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryBalloonShootNotify)
  SharedDtor();
}

void GalleryBalloonShootNotify::SharedDtor() {
}

void GalleryBalloonShootNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryBalloonShootNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryBalloonShootNotify& GalleryBalloonShootNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryBalloonShootNotify* GalleryBalloonShootNotify::New(::google::protobuf::Arena* arena) const {
  GalleryBalloonShootNotify* n = new GalleryBalloonShootNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryBalloonShootNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryBalloonShootNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&combo_disable_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&combo_disable_time_)) + sizeof(cur_score_));
  _internal_metadata_.Clear();
}

bool GalleryBalloonShootNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryBalloonShootNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 combo_disable_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &combo_disable_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 add_score = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &add_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 trigger_entity_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trigger_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_score = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 combo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryBalloonShootNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryBalloonShootNotify)
  return false;
#undef DO_
}

void GalleryBalloonShootNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryBalloonShootNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gallery_id(), output);
  }

  // uint64 combo_disable_time = 6;
  if (this->combo_disable_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->combo_disable_time(), output);
  }

  // int32 add_score = 11;
  if (this->add_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->add_score(), output);
  }

  // uint32 trigger_entity_id = 12;
  if (this->trigger_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->trigger_entity_id(), output);
  }

  // uint32 cur_score = 13;
  if (this->cur_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cur_score(), output);
  }

  // uint32 combo = 14;
  if (this->combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->combo(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryBalloonShootNotify)
}

::google::protobuf::uint8* GalleryBalloonShootNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryBalloonShootNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gallery_id(), target);
  }

  // uint64 combo_disable_time = 6;
  if (this->combo_disable_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->combo_disable_time(), target);
  }

  // int32 add_score = 11;
  if (this->add_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->add_score(), target);
  }

  // uint32 trigger_entity_id = 12;
  if (this->trigger_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->trigger_entity_id(), target);
  }

  // uint32 cur_score = 13;
  if (this->cur_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cur_score(), target);
  }

  // uint32 combo = 14;
  if (this->combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->combo(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryBalloonShootNotify)
  return target;
}

size_t GalleryBalloonShootNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryBalloonShootNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 combo_disable_time = 6;
  if (this->combo_disable_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->combo_disable_time());
  }

  // uint32 combo = 14;
  if (this->combo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combo());
  }

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // int32 add_score = 11;
  if (this->add_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->add_score());
  }

  // uint32 trigger_entity_id = 12;
  if (this->trigger_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->trigger_entity_id());
  }

  // uint32 cur_score = 13;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryBalloonShootNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryBalloonShootNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryBalloonShootNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryBalloonShootNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryBalloonShootNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryBalloonShootNotify)
    MergeFrom(*source);
  }
}

void GalleryBalloonShootNotify::MergeFrom(const GalleryBalloonShootNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryBalloonShootNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.combo_disable_time() != 0) {
    set_combo_disable_time(from.combo_disable_time());
  }
  if (from.combo() != 0) {
    set_combo(from.combo());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.add_score() != 0) {
    set_add_score(from.add_score());
  }
  if (from.trigger_entity_id() != 0) {
    set_trigger_entity_id(from.trigger_entity_id());
  }
  if (from.cur_score() != 0) {
    set_cur_score(from.cur_score());
  }
}

void GalleryBalloonShootNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryBalloonShootNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryBalloonShootNotify::CopyFrom(const GalleryBalloonShootNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryBalloonShootNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryBalloonShootNotify::IsInitialized() const {
  return true;
}

void GalleryBalloonShootNotify::Swap(GalleryBalloonShootNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryBalloonShootNotify::InternalSwap(GalleryBalloonShootNotify* other) {
  using std::swap;
  swap(combo_disable_time_, other->combo_disable_time_);
  swap(combo_, other->combo_);
  swap(gallery_id_, other->gallery_id_);
  swap(add_score_, other->add_score_);
  swap(trigger_entity_id_, other->trigger_entity_id_);
  swap(cur_score_, other->cur_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryBalloonShootNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryBalloonShootNotify

// uint32 trigger_entity_id = 12;
void GalleryBalloonShootNotify::clear_trigger_entity_id() {
  trigger_entity_id_ = 0u;
}
::google::protobuf::uint32 GalleryBalloonShootNotify::trigger_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBalloonShootNotify.trigger_entity_id)
  return trigger_entity_id_;
}
void GalleryBalloonShootNotify::set_trigger_entity_id(::google::protobuf::uint32 value) {
  
  trigger_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBalloonShootNotify.trigger_entity_id)
}

// uint32 gallery_id = 5;
void GalleryBalloonShootNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryBalloonShootNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBalloonShootNotify.gallery_id)
  return gallery_id_;
}
void GalleryBalloonShootNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBalloonShootNotify.gallery_id)
}

// uint32 combo = 14;
void GalleryBalloonShootNotify::clear_combo() {
  combo_ = 0u;
}
::google::protobuf::uint32 GalleryBalloonShootNotify::combo() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBalloonShootNotify.combo)
  return combo_;
}
void GalleryBalloonShootNotify::set_combo(::google::protobuf::uint32 value) {
  
  combo_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBalloonShootNotify.combo)
}

// uint64 combo_disable_time = 6;
void GalleryBalloonShootNotify::clear_combo_disable_time() {
  combo_disable_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 GalleryBalloonShootNotify::combo_disable_time() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBalloonShootNotify.combo_disable_time)
  return combo_disable_time_;
}
void GalleryBalloonShootNotify::set_combo_disable_time(::google::protobuf::uint64 value) {
  
  combo_disable_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBalloonShootNotify.combo_disable_time)
}

// int32 add_score = 11;
void GalleryBalloonShootNotify::clear_add_score() {
  add_score_ = 0;
}
::google::protobuf::int32 GalleryBalloonShootNotify::add_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBalloonShootNotify.add_score)
  return add_score_;
}
void GalleryBalloonShootNotify::set_add_score(::google::protobuf::int32 value) {
  
  add_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBalloonShootNotify.add_score)
}

// uint32 cur_score = 13;
void GalleryBalloonShootNotify::clear_cur_score() {
  cur_score_ = 0u;
}
::google::protobuf::uint32 GalleryBalloonShootNotify::cur_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBalloonShootNotify.cur_score)
  return cur_score_;
}
void GalleryBalloonShootNotify::set_cur_score(::google::protobuf::uint32 value) {
  
  cur_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBalloonShootNotify.cur_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GalleryBalloonScoreNotify::GalleryBalloonScoreNotify_UidScoreMapEntry::GalleryBalloonScoreNotify_UidScoreMapEntry() {}
GalleryBalloonScoreNotify::GalleryBalloonScoreNotify_UidScoreMapEntry::GalleryBalloonScoreNotify_UidScoreMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GalleryBalloonScoreNotify::GalleryBalloonScoreNotify_UidScoreMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[3];
}
void GalleryBalloonScoreNotify::GalleryBalloonScoreNotify_UidScoreMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GalleryBalloonScoreNotify::GalleryBalloonScoreNotify_UidScoreMapEntry::MergeFrom(const GalleryBalloonScoreNotify_UidScoreMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryBalloonScoreNotify::kGalleryIdFieldNumber;
const int GalleryBalloonScoreNotify::kUidScoreMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryBalloonScoreNotify::GalleryBalloonScoreNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryBalloonScoreNotify)
}
GalleryBalloonScoreNotify::GalleryBalloonScoreNotify(const GalleryBalloonScoreNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_score_map_.MergeFrom(from.uid_score_map_);
  gallery_id_ = from.gallery_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GalleryBalloonScoreNotify)
}

void GalleryBalloonScoreNotify::SharedCtor() {
  gallery_id_ = 0u;
  _cached_size_ = 0;
}

GalleryBalloonScoreNotify::~GalleryBalloonScoreNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryBalloonScoreNotify)
  SharedDtor();
}

void GalleryBalloonScoreNotify::SharedDtor() {
}

void GalleryBalloonScoreNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryBalloonScoreNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryBalloonScoreNotify& GalleryBalloonScoreNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryBalloonScoreNotify* GalleryBalloonScoreNotify::New(::google::protobuf::Arena* arena) const {
  GalleryBalloonScoreNotify* n = new GalleryBalloonScoreNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryBalloonScoreNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryBalloonScoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_score_map_.Clear();
  gallery_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GalleryBalloonScoreNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryBalloonScoreNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> uid_score_map = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          GalleryBalloonScoreNotify_UidScoreMapEntry::Parser< ::google::protobuf::internal::MapField<
              GalleryBalloonScoreNotify_UidScoreMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&uid_score_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryBalloonScoreNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryBalloonScoreNotify)
  return false;
#undef DO_
}

void GalleryBalloonScoreNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryBalloonScoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> uid_score_map = 7;
  if (!this->uid_score_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->uid_score_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uid_score_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->uid_score_map().begin();
          it != this->uid_score_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GalleryBalloonScoreNotify_UidScoreMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uid_score_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GalleryBalloonScoreNotify_UidScoreMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->uid_score_map().begin();
          it != this->uid_score_map().end(); ++it) {
        entry.reset(uid_score_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    }
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryBalloonScoreNotify)
}

::google::protobuf::uint8* GalleryBalloonScoreNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryBalloonScoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> uid_score_map = 7;
  if (!this->uid_score_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->uid_score_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uid_score_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->uid_score_map().begin();
          it != this->uid_score_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GalleryBalloonScoreNotify_UidScoreMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uid_score_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GalleryBalloonScoreNotify_UidScoreMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->uid_score_map().begin();
          it != this->uid_score_map().end(); ++it) {
        entry.reset(uid_score_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryBalloonScoreNotify)
  return target;
}

size_t GalleryBalloonScoreNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryBalloonScoreNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> uid_score_map = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->uid_score_map_size());
  {
    ::google::protobuf::scoped_ptr<GalleryBalloonScoreNotify_UidScoreMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->uid_score_map().begin();
        it != this->uid_score_map().end(); ++it) {
      entry.reset(uid_score_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryBalloonScoreNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryBalloonScoreNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryBalloonScoreNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryBalloonScoreNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryBalloonScoreNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryBalloonScoreNotify)
    MergeFrom(*source);
  }
}

void GalleryBalloonScoreNotify::MergeFrom(const GalleryBalloonScoreNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryBalloonScoreNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_score_map_.MergeFrom(from.uid_score_map_);
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryBalloonScoreNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryBalloonScoreNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryBalloonScoreNotify::CopyFrom(const GalleryBalloonScoreNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryBalloonScoreNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryBalloonScoreNotify::IsInitialized() const {
  return true;
}

void GalleryBalloonScoreNotify::Swap(GalleryBalloonScoreNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryBalloonScoreNotify::InternalSwap(GalleryBalloonScoreNotify* other) {
  using std::swap;
  uid_score_map_.Swap(&other->uid_score_map_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryBalloonScoreNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryBalloonScoreNotify

// uint32 gallery_id = 9;
void GalleryBalloonScoreNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryBalloonScoreNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBalloonScoreNotify.gallery_id)
  return gallery_id_;
}
void GalleryBalloonScoreNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBalloonScoreNotify.gallery_id)
}

// map<uint32, uint32> uid_score_map = 7;
int GalleryBalloonScoreNotify::uid_score_map_size() const {
  return uid_score_map_.size();
}
void GalleryBalloonScoreNotify::clear_uid_score_map() {
  uid_score_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GalleryBalloonScoreNotify::uid_score_map() const {
  // @@protoc_insertion_point(field_map:proto.GalleryBalloonScoreNotify.uid_score_map)
  return uid_score_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GalleryBalloonScoreNotify::mutable_uid_score_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GalleryBalloonScoreNotify.uid_score_map)
  return uid_score_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalloonSettleInfo::kUidFieldNumber;
const int BalloonSettleInfo::kShootCountFieldNumber;
const int BalloonSettleInfo::kMaxComboFieldNumber;
const int BalloonSettleInfo::kFinalScoreFieldNumber;
const int BalloonSettleInfo::kPlayerInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalloonSettleInfo::BalloonSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BalloonSettleInfo)
}
BalloonSettleInfo::BalloonSettleInfo(const BalloonSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::OnlinePlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&shoot_count_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(shoot_count_));
  // @@protoc_insertion_point(copy_constructor:proto.BalloonSettleInfo)
}

void BalloonSettleInfo::SharedCtor() {
  ::memset(&player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoot_count_) -
      reinterpret_cast<char*>(&player_info_)) + sizeof(shoot_count_));
  _cached_size_ = 0;
}

BalloonSettleInfo::~BalloonSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.BalloonSettleInfo)
  SharedDtor();
}

void BalloonSettleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void BalloonSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalloonSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BalloonSettleInfo& BalloonSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BalloonSettleInfo* BalloonSettleInfo::New(::google::protobuf::Arena* arena) const {
  BalloonSettleInfo* n = new BalloonSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalloonSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BalloonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoot_count_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(shoot_count_));
  _internal_metadata_.Clear();
}

bool BalloonSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BalloonSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.OnlinePlayerInfo player_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 final_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_combo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 shoot_count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoot_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BalloonSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BalloonSettleInfo)
  return false;
#undef DO_
}

void BalloonSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BalloonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.OnlinePlayerInfo player_info = 2;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_info_, output);
  }

  // uint32 uid = 3;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // uint32 final_score = 7;
  if (this->final_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->final_score(), output);
  }

  // uint32 max_combo = 9;
  if (this->max_combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_combo(), output);
  }

  // uint32 shoot_count = 12;
  if (this->shoot_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->shoot_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BalloonSettleInfo)
}

::google::protobuf::uint8* BalloonSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BalloonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.OnlinePlayerInfo player_info = 2;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_info_, deterministic, target);
  }

  // uint32 uid = 3;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // uint32 final_score = 7;
  if (this->final_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->final_score(), target);
  }

  // uint32 max_combo = 9;
  if (this->max_combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_combo(), target);
  }

  // uint32 shoot_count = 12;
  if (this->shoot_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->shoot_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BalloonSettleInfo)
  return target;
}

size_t BalloonSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BalloonSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.OnlinePlayerInfo player_info = 2;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  // uint32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 final_score = 7;
  if (this->final_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->final_score());
  }

  // uint32 max_combo = 9;
  if (this->max_combo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_combo());
  }

  // uint32 shoot_count = 12;
  if (this->shoot_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shoot_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalloonSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BalloonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BalloonSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalloonSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BalloonSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BalloonSettleInfo)
    MergeFrom(*source);
  }
}

void BalloonSettleInfo::MergeFrom(const BalloonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BalloonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_info()) {
    mutable_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.player_info());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.final_score() != 0) {
    set_final_score(from.final_score());
  }
  if (from.max_combo() != 0) {
    set_max_combo(from.max_combo());
  }
  if (from.shoot_count() != 0) {
    set_shoot_count(from.shoot_count());
  }
}

void BalloonSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BalloonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalloonSettleInfo::CopyFrom(const BalloonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BalloonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalloonSettleInfo::IsInitialized() const {
  return true;
}

void BalloonSettleInfo::Swap(BalloonSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalloonSettleInfo::InternalSwap(BalloonSettleInfo* other) {
  using std::swap;
  swap(player_info_, other->player_info_);
  swap(uid_, other->uid_);
  swap(final_score_, other->final_score_);
  swap(max_combo_, other->max_combo_);
  swap(shoot_count_, other->shoot_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BalloonSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalloonSettleInfo

// uint32 uid = 3;
void BalloonSettleInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BalloonSettleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.BalloonSettleInfo.uid)
  return uid_;
}
void BalloonSettleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonSettleInfo.uid)
}

// uint32 shoot_count = 12;
void BalloonSettleInfo::clear_shoot_count() {
  shoot_count_ = 0u;
}
::google::protobuf::uint32 BalloonSettleInfo::shoot_count() const {
  // @@protoc_insertion_point(field_get:proto.BalloonSettleInfo.shoot_count)
  return shoot_count_;
}
void BalloonSettleInfo::set_shoot_count(::google::protobuf::uint32 value) {
  
  shoot_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonSettleInfo.shoot_count)
}

// uint32 max_combo = 9;
void BalloonSettleInfo::clear_max_combo() {
  max_combo_ = 0u;
}
::google::protobuf::uint32 BalloonSettleInfo::max_combo() const {
  // @@protoc_insertion_point(field_get:proto.BalloonSettleInfo.max_combo)
  return max_combo_;
}
void BalloonSettleInfo::set_max_combo(::google::protobuf::uint32 value) {
  
  max_combo_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonSettleInfo.max_combo)
}

// uint32 final_score = 7;
void BalloonSettleInfo::clear_final_score() {
  final_score_ = 0u;
}
::google::protobuf::uint32 BalloonSettleInfo::final_score() const {
  // @@protoc_insertion_point(field_get:proto.BalloonSettleInfo.final_score)
  return final_score_;
}
void BalloonSettleInfo::set_final_score(::google::protobuf::uint32 value) {
  
  final_score_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonSettleInfo.final_score)
}

// .proto.OnlinePlayerInfo player_info = 2;
bool BalloonSettleInfo::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void BalloonSettleInfo::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& BalloonSettleInfo::player_info() const {
  const ::proto::OnlinePlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.BalloonSettleInfo.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* BalloonSettleInfo::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.BalloonSettleInfo.player_info)
  return player_info_;
}
::proto::OnlinePlayerInfo* BalloonSettleInfo::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.BalloonSettleInfo.player_info)
  
  ::proto::OnlinePlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void BalloonSettleInfo::set_allocated_player_info(::proto::OnlinePlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BalloonSettleInfo.player_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryStopNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryStopNotify::GalleryStopNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryStopNotify)
}
GalleryStopNotify::GalleryStopNotify(const GalleryStopNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_id_ = from.gallery_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GalleryStopNotify)
}

void GalleryStopNotify::SharedCtor() {
  gallery_id_ = 0u;
  _cached_size_ = 0;
}

GalleryStopNotify::~GalleryStopNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryStopNotify)
  SharedDtor();
}

void GalleryStopNotify::SharedDtor() {
}

void GalleryStopNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryStopNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryStopNotify& GalleryStopNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryStopNotify* GalleryStopNotify::New(::google::protobuf::Arena* arena) const {
  GalleryStopNotify* n = new GalleryStopNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryStopNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryStopNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GalleryStopNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryStopNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryStopNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryStopNotify)
  return false;
#undef DO_
}

void GalleryStopNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryStopNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 8;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryStopNotify)
}

::google::protobuf::uint8* GalleryStopNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryStopNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 8;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryStopNotify)
  return target;
}

size_t GalleryStopNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryStopNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 8;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryStopNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryStopNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryStopNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryStopNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryStopNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryStopNotify)
    MergeFrom(*source);
  }
}

void GalleryStopNotify::MergeFrom(const GalleryStopNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryStopNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryStopNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryStopNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryStopNotify::CopyFrom(const GalleryStopNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryStopNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryStopNotify::IsInitialized() const {
  return true;
}

void GalleryStopNotify::Swap(GalleryStopNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryStopNotify::InternalSwap(GalleryStopNotify* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryStopNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryStopNotify

// uint32 gallery_id = 8;
void GalleryStopNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryStopNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryStopNotify.gallery_id)
  return gallery_id_;
}
void GalleryStopNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryStopNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FallSettleInfo::FallSettleInfo_FlowerRingCatchCountMapEntry::FallSettleInfo_FlowerRingCatchCountMapEntry() {}
FallSettleInfo::FallSettleInfo_FlowerRingCatchCountMapEntry::FallSettleInfo_FlowerRingCatchCountMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata FallSettleInfo::FallSettleInfo_FlowerRingCatchCountMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[7];
}
void FallSettleInfo::FallSettleInfo_FlowerRingCatchCountMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void FallSettleInfo::FallSettleInfo_FlowerRingCatchCountMapEntry::MergeFrom(const FallSettleInfo_FlowerRingCatchCountMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FallSettleInfo::kCatchCountFieldNumber;
const int FallSettleInfo::kPlayerInfoFieldNumber;
const int FallSettleInfo::kUidFieldNumber;
const int FallSettleInfo::kFlowerRingCatchCountMapFieldNumber;
const int FallSettleInfo::kRemainTimeFieldNumber;
const int FallSettleInfo::kFinalScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FallSettleInfo::FallSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FallSettleInfo)
}
FallSettleInfo::FallSettleInfo(const FallSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flower_ring_catch_count_map_.MergeFrom(from.flower_ring_catch_count_map_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::OnlinePlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  ::memcpy(&final_score_, &from.final_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&catch_count_) -
    reinterpret_cast<char*>(&final_score_)) + sizeof(catch_count_));
  // @@protoc_insertion_point(copy_constructor:proto.FallSettleInfo)
}

void FallSettleInfo::SharedCtor() {
  ::memset(&player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&catch_count_) -
      reinterpret_cast<char*>(&player_info_)) + sizeof(catch_count_));
  _cached_size_ = 0;
}

FallSettleInfo::~FallSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.FallSettleInfo)
  SharedDtor();
}

void FallSettleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void FallSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FallSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FallSettleInfo& FallSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FallSettleInfo* FallSettleInfo::New(::google::protobuf::Arena* arena) const {
  FallSettleInfo* n = new FallSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FallSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FallSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flower_ring_catch_count_map_.Clear();
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  ::memset(&final_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&catch_count_) -
      reinterpret_cast<char*>(&final_score_)) + sizeof(catch_count_));
  _internal_metadata_.Clear();
}

bool FallSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FallSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 final_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> flower_ring_catch_count_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          FallSettleInfo_FlowerRingCatchCountMapEntry::Parser< ::google::protobuf::internal::MapField<
              FallSettleInfo_FlowerRingCatchCountMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&flower_ring_catch_count_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 remain_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remain_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OnlinePlayerInfo player_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 catch_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &catch_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FallSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FallSettleInfo)
  return false;
#undef DO_
}

void FallSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FallSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 final_score = 1;
  if (this->final_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->final_score(), output);
  }

  // map<uint32, uint32> flower_ring_catch_count_map = 3;
  if (!this->flower_ring_catch_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->flower_ring_catch_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->flower_ring_catch_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->flower_ring_catch_count_map().begin();
          it != this->flower_ring_catch_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FallSettleInfo_FlowerRingCatchCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(flower_ring_catch_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FallSettleInfo_FlowerRingCatchCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->flower_ring_catch_count_map().begin();
          it != this->flower_ring_catch_count_map().end(); ++it) {
        entry.reset(flower_ring_catch_count_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // uint32 remain_time = 10;
  if (this->remain_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->remain_time(), output);
  }

  // .proto.OnlinePlayerInfo player_info = 13;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->player_info_, output);
  }

  // uint32 uid = 14;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->uid(), output);
  }

  // uint32 catch_count = 15;
  if (this->catch_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->catch_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FallSettleInfo)
}

::google::protobuf::uint8* FallSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FallSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 final_score = 1;
  if (this->final_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->final_score(), target);
  }

  // map<uint32, uint32> flower_ring_catch_count_map = 3;
  if (!this->flower_ring_catch_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->flower_ring_catch_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->flower_ring_catch_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->flower_ring_catch_count_map().begin();
          it != this->flower_ring_catch_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FallSettleInfo_FlowerRingCatchCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(flower_ring_catch_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FallSettleInfo_FlowerRingCatchCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->flower_ring_catch_count_map().begin();
          it != this->flower_ring_catch_count_map().end(); ++it) {
        entry.reset(flower_ring_catch_count_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 remain_time = 10;
  if (this->remain_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->remain_time(), target);
  }

  // .proto.OnlinePlayerInfo player_info = 13;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->player_info_, deterministic, target);
  }

  // uint32 uid = 14;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->uid(), target);
  }

  // uint32 catch_count = 15;
  if (this->catch_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->catch_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FallSettleInfo)
  return target;
}

size_t FallSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FallSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> flower_ring_catch_count_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->flower_ring_catch_count_map_size());
  {
    ::google::protobuf::scoped_ptr<FallSettleInfo_FlowerRingCatchCountMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->flower_ring_catch_count_map().begin();
        it != this->flower_ring_catch_count_map().end(); ++it) {
      entry.reset(flower_ring_catch_count_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .proto.OnlinePlayerInfo player_info = 13;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  // uint32 final_score = 1;
  if (this->final_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->final_score());
  }

  // uint32 remain_time = 10;
  if (this->remain_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->remain_time());
  }

  // uint32 uid = 14;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 catch_count = 15;
  if (this->catch_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->catch_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FallSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FallSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FallSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FallSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FallSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FallSettleInfo)
    MergeFrom(*source);
  }
}

void FallSettleInfo::MergeFrom(const FallSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FallSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flower_ring_catch_count_map_.MergeFrom(from.flower_ring_catch_count_map_);
  if (from.has_player_info()) {
    mutable_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.player_info());
  }
  if (from.final_score() != 0) {
    set_final_score(from.final_score());
  }
  if (from.remain_time() != 0) {
    set_remain_time(from.remain_time());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.catch_count() != 0) {
    set_catch_count(from.catch_count());
  }
}

void FallSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FallSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FallSettleInfo::CopyFrom(const FallSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FallSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FallSettleInfo::IsInitialized() const {
  return true;
}

void FallSettleInfo::Swap(FallSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FallSettleInfo::InternalSwap(FallSettleInfo* other) {
  using std::swap;
  flower_ring_catch_count_map_.Swap(&other->flower_ring_catch_count_map_);
  swap(player_info_, other->player_info_);
  swap(final_score_, other->final_score_);
  swap(remain_time_, other->remain_time_);
  swap(uid_, other->uid_);
  swap(catch_count_, other->catch_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FallSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FallSettleInfo

// uint32 catch_count = 15;
void FallSettleInfo::clear_catch_count() {
  catch_count_ = 0u;
}
::google::protobuf::uint32 FallSettleInfo::catch_count() const {
  // @@protoc_insertion_point(field_get:proto.FallSettleInfo.catch_count)
  return catch_count_;
}
void FallSettleInfo::set_catch_count(::google::protobuf::uint32 value) {
  
  catch_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FallSettleInfo.catch_count)
}

// .proto.OnlinePlayerInfo player_info = 13;
bool FallSettleInfo::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void FallSettleInfo::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& FallSettleInfo::player_info() const {
  const ::proto::OnlinePlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.FallSettleInfo.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* FallSettleInfo::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.FallSettleInfo.player_info)
  return player_info_;
}
::proto::OnlinePlayerInfo* FallSettleInfo::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.FallSettleInfo.player_info)
  
  ::proto::OnlinePlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void FallSettleInfo::set_allocated_player_info(::proto::OnlinePlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FallSettleInfo.player_info)
}

// uint32 uid = 14;
void FallSettleInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 FallSettleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.FallSettleInfo.uid)
  return uid_;
}
void FallSettleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FallSettleInfo.uid)
}

// map<uint32, uint32> flower_ring_catch_count_map = 3;
int FallSettleInfo::flower_ring_catch_count_map_size() const {
  return flower_ring_catch_count_map_.size();
}
void FallSettleInfo::clear_flower_ring_catch_count_map() {
  flower_ring_catch_count_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
FallSettleInfo::flower_ring_catch_count_map() const {
  // @@protoc_insertion_point(field_map:proto.FallSettleInfo.flower_ring_catch_count_map)
  return flower_ring_catch_count_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
FallSettleInfo::mutable_flower_ring_catch_count_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.FallSettleInfo.flower_ring_catch_count_map)
  return flower_ring_catch_count_map_.MutableMap();
}

// uint32 remain_time = 10;
void FallSettleInfo::clear_remain_time() {
  remain_time_ = 0u;
}
::google::protobuf::uint32 FallSettleInfo::remain_time() const {
  // @@protoc_insertion_point(field_get:proto.FallSettleInfo.remain_time)
  return remain_time_;
}
void FallSettleInfo::set_remain_time(::google::protobuf::uint32 value) {
  
  remain_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FallSettleInfo.remain_time)
}

// uint32 final_score = 1;
void FallSettleInfo::clear_final_score() {
  final_score_ = 0u;
}
::google::protobuf::uint32 FallSettleInfo::final_score() const {
  // @@protoc_insertion_point(field_get:proto.FallSettleInfo.final_score)
  return final_score_;
}
void FallSettleInfo::set_final_score(::google::protobuf::uint32 value) {
  
  final_score_ = value;
  // @@protoc_insertion_point(field_set:proto.FallSettleInfo.final_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GalleryFallCatchNotify::GalleryFallCatchNotify_BallCatchCountMapEntry::GalleryFallCatchNotify_BallCatchCountMapEntry() {}
GalleryFallCatchNotify::GalleryFallCatchNotify_BallCatchCountMapEntry::GalleryFallCatchNotify_BallCatchCountMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GalleryFallCatchNotify::GalleryFallCatchNotify_BallCatchCountMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[9];
}
void GalleryFallCatchNotify::GalleryFallCatchNotify_BallCatchCountMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GalleryFallCatchNotify::GalleryFallCatchNotify_BallCatchCountMapEntry::MergeFrom(const GalleryFallCatchNotify_BallCatchCountMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryFallCatchNotify::kCurScoreFieldNumber;
const int GalleryFallCatchNotify::kTimeCostFieldNumber;
const int GalleryFallCatchNotify::kBallCatchCountMapFieldNumber;
const int GalleryFallCatchNotify::kAddScoreFieldNumber;
const int GalleryFallCatchNotify::kIsGroundFieldNumber;
const int GalleryFallCatchNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryFallCatchNotify::GalleryFallCatchNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryFallCatchNotify)
}
GalleryFallCatchNotify::GalleryFallCatchNotify(const GalleryFallCatchNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ball_catch_count_map_.MergeFrom(from.ball_catch_count_map_);
  ::memcpy(&add_score_, &from.add_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_cost_) -
    reinterpret_cast<char*>(&add_score_)) + sizeof(time_cost_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryFallCatchNotify)
}

void GalleryFallCatchNotify::SharedCtor() {
  ::memset(&add_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_cost_) -
      reinterpret_cast<char*>(&add_score_)) + sizeof(time_cost_));
  _cached_size_ = 0;
}

GalleryFallCatchNotify::~GalleryFallCatchNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryFallCatchNotify)
  SharedDtor();
}

void GalleryFallCatchNotify::SharedDtor() {
}

void GalleryFallCatchNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryFallCatchNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryFallCatchNotify& GalleryFallCatchNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryFallCatchNotify* GalleryFallCatchNotify::New(::google::protobuf::Arena* arena) const {
  GalleryFallCatchNotify* n = new GalleryFallCatchNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryFallCatchNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryFallCatchNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ball_catch_count_map_.Clear();
  ::memset(&add_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_cost_) -
      reinterpret_cast<char*>(&add_score_)) + sizeof(time_cost_));
  _internal_metadata_.Clear();
}

bool GalleryFallCatchNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryFallCatchNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 add_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_cost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ground = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> ball_catch_count_map = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          GalleryFallCatchNotify_BallCatchCountMapEntry::Parser< ::google::protobuf::internal::MapField<
              GalleryFallCatchNotify_BallCatchCountMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&ball_catch_count_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryFallCatchNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryFallCatchNotify)
  return false;
#undef DO_
}

void GalleryFallCatchNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryFallCatchNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 add_score = 1;
  if (this->add_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->add_score(), output);
  }

  // uint32 cur_score = 6;
  if (this->cur_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_score(), output);
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gallery_id(), output);
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_cost(), output);
  }

  // bool is_ground = 12;
  if (this->is_ground() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_ground(), output);
  }

  // map<uint32, uint32> ball_catch_count_map = 15;
  if (!this->ball_catch_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->ball_catch_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ball_catch_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GalleryFallCatchNotify_BallCatchCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GalleryFallCatchNotify_BallCatchCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryFallCatchNotify)
}

::google::protobuf::uint8* GalleryFallCatchNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryFallCatchNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 add_score = 1;
  if (this->add_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->add_score(), target);
  }

  // uint32 cur_score = 6;
  if (this->cur_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_score(), target);
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gallery_id(), target);
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_cost(), target);
  }

  // bool is_ground = 12;
  if (this->is_ground() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_ground(), target);
  }

  // map<uint32, uint32> ball_catch_count_map = 15;
  if (!this->ball_catch_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->ball_catch_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ball_catch_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GalleryFallCatchNotify_BallCatchCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GalleryFallCatchNotify_BallCatchCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryFallCatchNotify)
  return target;
}

size_t GalleryFallCatchNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryFallCatchNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> ball_catch_count_map = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ball_catch_count_map_size());
  {
    ::google::protobuf::scoped_ptr<GalleryFallCatchNotify_BallCatchCountMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->ball_catch_count_map().begin();
        it != this->ball_catch_count_map().end(); ++it) {
      entry.reset(ball_catch_count_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 add_score = 1;
  if (this->add_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_score());
  }

  // uint32 cur_score = 6;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_score());
  }

  // bool is_ground = 12;
  if (this->is_ground() != 0) {
    total_size += 1 + 1;
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryFallCatchNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryFallCatchNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryFallCatchNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryFallCatchNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryFallCatchNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryFallCatchNotify)
    MergeFrom(*source);
  }
}

void GalleryFallCatchNotify::MergeFrom(const GalleryFallCatchNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryFallCatchNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ball_catch_count_map_.MergeFrom(from.ball_catch_count_map_);
  if (from.add_score() != 0) {
    set_add_score(from.add_score());
  }
  if (from.cur_score() != 0) {
    set_cur_score(from.cur_score());
  }
  if (from.is_ground() != 0) {
    set_is_ground(from.is_ground());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.time_cost() != 0) {
    set_time_cost(from.time_cost());
  }
}

void GalleryFallCatchNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryFallCatchNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryFallCatchNotify::CopyFrom(const GalleryFallCatchNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryFallCatchNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryFallCatchNotify::IsInitialized() const {
  return true;
}

void GalleryFallCatchNotify::Swap(GalleryFallCatchNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryFallCatchNotify::InternalSwap(GalleryFallCatchNotify* other) {
  using std::swap;
  ball_catch_count_map_.Swap(&other->ball_catch_count_map_);
  swap(add_score_, other->add_score_);
  swap(cur_score_, other->cur_score_);
  swap(is_ground_, other->is_ground_);
  swap(gallery_id_, other->gallery_id_);
  swap(time_cost_, other->time_cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryFallCatchNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryFallCatchNotify

// uint32 cur_score = 6;
void GalleryFallCatchNotify::clear_cur_score() {
  cur_score_ = 0u;
}
::google::protobuf::uint32 GalleryFallCatchNotify::cur_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFallCatchNotify.cur_score)
  return cur_score_;
}
void GalleryFallCatchNotify::set_cur_score(::google::protobuf::uint32 value) {
  
  cur_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFallCatchNotify.cur_score)
}

// uint32 time_cost = 11;
void GalleryFallCatchNotify::clear_time_cost() {
  time_cost_ = 0u;
}
::google::protobuf::uint32 GalleryFallCatchNotify::time_cost() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFallCatchNotify.time_cost)
  return time_cost_;
}
void GalleryFallCatchNotify::set_time_cost(::google::protobuf::uint32 value) {
  
  time_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFallCatchNotify.time_cost)
}

// map<uint32, uint32> ball_catch_count_map = 15;
int GalleryFallCatchNotify::ball_catch_count_map_size() const {
  return ball_catch_count_map_.size();
}
void GalleryFallCatchNotify::clear_ball_catch_count_map() {
  ball_catch_count_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GalleryFallCatchNotify::ball_catch_count_map() const {
  // @@protoc_insertion_point(field_map:proto.GalleryFallCatchNotify.ball_catch_count_map)
  return ball_catch_count_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GalleryFallCatchNotify::mutable_ball_catch_count_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GalleryFallCatchNotify.ball_catch_count_map)
  return ball_catch_count_map_.MutableMap();
}

// uint32 add_score = 1;
void GalleryFallCatchNotify::clear_add_score() {
  add_score_ = 0u;
}
::google::protobuf::uint32 GalleryFallCatchNotify::add_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFallCatchNotify.add_score)
  return add_score_;
}
void GalleryFallCatchNotify::set_add_score(::google::protobuf::uint32 value) {
  
  add_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFallCatchNotify.add_score)
}

// bool is_ground = 12;
void GalleryFallCatchNotify::clear_is_ground() {
  is_ground_ = false;
}
bool GalleryFallCatchNotify::is_ground() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFallCatchNotify.is_ground)
  return is_ground_;
}
void GalleryFallCatchNotify::set_is_ground(bool value) {
  
  is_ground_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFallCatchNotify.is_ground)
}

// uint32 gallery_id = 10;
void GalleryFallCatchNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryFallCatchNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFallCatchNotify.gallery_id)
  return gallery_id_;
}
void GalleryFallCatchNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFallCatchNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FallPlayerBrief::kUidFieldNumber;
const int FallPlayerBrief::kIsGroundFieldNumber;
const int FallPlayerBrief::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FallPlayerBrief::FallPlayerBrief()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FallPlayerBrief)
}
FallPlayerBrief::FallPlayerBrief(const FallPlayerBrief& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.FallPlayerBrief)
}

void FallPlayerBrief::SharedCtor() {
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(score_));
  _cached_size_ = 0;
}

FallPlayerBrief::~FallPlayerBrief() {
  // @@protoc_insertion_point(destructor:proto.FallPlayerBrief)
  SharedDtor();
}

void FallPlayerBrief::SharedDtor() {
}

void FallPlayerBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FallPlayerBrief::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FallPlayerBrief& FallPlayerBrief::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FallPlayerBrief* FallPlayerBrief::New(::google::protobuf::Arena* arena) const {
  FallPlayerBrief* n = new FallPlayerBrief;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FallPlayerBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FallPlayerBrief)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool FallPlayerBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FallPlayerBrief)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_ground = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FallPlayerBrief)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FallPlayerBrief)
  return false;
#undef DO_
}

void FallPlayerBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FallPlayerBrief)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ground = 5;
  if (this->is_ground() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_ground(), output);
  }

  // uint32 score = 10;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->score(), output);
  }

  // uint32 uid = 13;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FallPlayerBrief)
}

::google::protobuf::uint8* FallPlayerBrief::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FallPlayerBrief)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ground = 5;
  if (this->is_ground() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_ground(), target);
  }

  // uint32 score = 10;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->score(), target);
  }

  // uint32 uid = 13;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FallPlayerBrief)
  return target;
}

size_t FallPlayerBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FallPlayerBrief)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 uid = 13;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // bool is_ground = 5;
  if (this->is_ground() != 0) {
    total_size += 1 + 1;
  }

  // uint32 score = 10;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FallPlayerBrief::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FallPlayerBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const FallPlayerBrief* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FallPlayerBrief>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FallPlayerBrief)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FallPlayerBrief)
    MergeFrom(*source);
  }
}

void FallPlayerBrief::MergeFrom(const FallPlayerBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FallPlayerBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.is_ground() != 0) {
    set_is_ground(from.is_ground());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void FallPlayerBrief::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FallPlayerBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FallPlayerBrief::CopyFrom(const FallPlayerBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FallPlayerBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FallPlayerBrief::IsInitialized() const {
  return true;
}

void FallPlayerBrief::Swap(FallPlayerBrief* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FallPlayerBrief::InternalSwap(FallPlayerBrief* other) {
  using std::swap;
  swap(uid_, other->uid_);
  swap(is_ground_, other->is_ground_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FallPlayerBrief::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FallPlayerBrief

// uint32 uid = 13;
void FallPlayerBrief::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 FallPlayerBrief::uid() const {
  // @@protoc_insertion_point(field_get:proto.FallPlayerBrief.uid)
  return uid_;
}
void FallPlayerBrief::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FallPlayerBrief.uid)
}

// bool is_ground = 5;
void FallPlayerBrief::clear_is_ground() {
  is_ground_ = false;
}
bool FallPlayerBrief::is_ground() const {
  // @@protoc_insertion_point(field_get:proto.FallPlayerBrief.is_ground)
  return is_ground_;
}
void FallPlayerBrief::set_is_ground(bool value) {
  
  is_ground_ = value;
  // @@protoc_insertion_point(field_set:proto.FallPlayerBrief.is_ground)
}

// uint32 score = 10;
void FallPlayerBrief::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 FallPlayerBrief::score() const {
  // @@protoc_insertion_point(field_get:proto.FallPlayerBrief.score)
  return score_;
}
void FallPlayerBrief::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.FallPlayerBrief.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

GalleryFallScoreNotify::GalleryFallScoreNotify_UidBriefMapEntry::GalleryFallScoreNotify_UidBriefMapEntry() {}
GalleryFallScoreNotify::GalleryFallScoreNotify_UidBriefMapEntry::GalleryFallScoreNotify_UidBriefMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata GalleryFallScoreNotify::GalleryFallScoreNotify_UidBriefMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[12];
}
void GalleryFallScoreNotify::GalleryFallScoreNotify_UidBriefMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void GalleryFallScoreNotify::GalleryFallScoreNotify_UidBriefMapEntry::MergeFrom(const GalleryFallScoreNotify_UidBriefMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryFallScoreNotify::kGalleryIdFieldNumber;
const int GalleryFallScoreNotify::kUidBriefMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryFallScoreNotify::GalleryFallScoreNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryFallScoreNotify)
}
GalleryFallScoreNotify::GalleryFallScoreNotify(const GalleryFallScoreNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_brief_map_.MergeFrom(from.uid_brief_map_);
  gallery_id_ = from.gallery_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GalleryFallScoreNotify)
}

void GalleryFallScoreNotify::SharedCtor() {
  gallery_id_ = 0u;
  _cached_size_ = 0;
}

GalleryFallScoreNotify::~GalleryFallScoreNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryFallScoreNotify)
  SharedDtor();
}

void GalleryFallScoreNotify::SharedDtor() {
}

void GalleryFallScoreNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryFallScoreNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryFallScoreNotify& GalleryFallScoreNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryFallScoreNotify* GalleryFallScoreNotify::New(::google::protobuf::Arena* arena) const {
  GalleryFallScoreNotify* n = new GalleryFallScoreNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryFallScoreNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryFallScoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_brief_map_.Clear();
  gallery_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GalleryFallScoreNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryFallScoreNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .proto.FallPlayerBrief> uid_brief_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          GalleryFallScoreNotify_UidBriefMapEntry::Parser< ::google::protobuf::internal::MapField<
              GalleryFallScoreNotify_UidBriefMapEntry,
              ::google::protobuf::uint32, ::proto::FallPlayerBrief,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief > > parser(&uid_brief_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryFallScoreNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryFallScoreNotify)
  return false;
#undef DO_
}

void GalleryFallScoreNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryFallScoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.FallPlayerBrief> uid_brief_map = 1;
  if (!this->uid_brief_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->uid_brief_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uid_brief_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::const_iterator
          it = this->uid_brief_map().begin();
          it != this->uid_brief_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GalleryFallScoreNotify_UidBriefMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uid_brief_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<GalleryFallScoreNotify_UidBriefMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::const_iterator
          it = this->uid_brief_map().begin();
          it != this->uid_brief_map().end(); ++it) {
        entry.reset(uid_brief_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  // uint32 gallery_id = 7;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryFallScoreNotify)
}

::google::protobuf::uint8* GalleryFallScoreNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryFallScoreNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.FallPlayerBrief> uid_brief_map = 1;
  if (!this->uid_brief_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->uid_brief_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->uid_brief_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::const_iterator
          it = this->uid_brief_map().begin();
          it != this->uid_brief_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GalleryFallScoreNotify_UidBriefMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(uid_brief_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<GalleryFallScoreNotify_UidBriefMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::const_iterator
          it = this->uid_brief_map().begin();
          it != this->uid_brief_map().end(); ++it) {
        entry.reset(uid_brief_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 gallery_id = 7;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryFallScoreNotify)
  return target;
}

size_t GalleryFallScoreNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryFallScoreNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.FallPlayerBrief> uid_brief_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->uid_brief_map_size());
  {
    ::google::protobuf::scoped_ptr<GalleryFallScoreNotify_UidBriefMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >::const_iterator
        it = this->uid_brief_map().begin();
        it != this->uid_brief_map().end(); ++it) {
      entry.reset(uid_brief_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 gallery_id = 7;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryFallScoreNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryFallScoreNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryFallScoreNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryFallScoreNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryFallScoreNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryFallScoreNotify)
    MergeFrom(*source);
  }
}

void GalleryFallScoreNotify::MergeFrom(const GalleryFallScoreNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryFallScoreNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_brief_map_.MergeFrom(from.uid_brief_map_);
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryFallScoreNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryFallScoreNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryFallScoreNotify::CopyFrom(const GalleryFallScoreNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryFallScoreNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryFallScoreNotify::IsInitialized() const {
  return true;
}

void GalleryFallScoreNotify::Swap(GalleryFallScoreNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryFallScoreNotify::InternalSwap(GalleryFallScoreNotify* other) {
  using std::swap;
  uid_brief_map_.Swap(&other->uid_brief_map_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryFallScoreNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryFallScoreNotify

// uint32 gallery_id = 7;
void GalleryFallScoreNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryFallScoreNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFallScoreNotify.gallery_id)
  return gallery_id_;
}
void GalleryFallScoreNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFallScoreNotify.gallery_id)
}

// map<uint32, .proto.FallPlayerBrief> uid_brief_map = 1;
int GalleryFallScoreNotify::uid_brief_map_size() const {
  return uid_brief_map_.size();
}
void GalleryFallScoreNotify::clear_uid_brief_map() {
  uid_brief_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >&
GalleryFallScoreNotify::uid_brief_map() const {
  // @@protoc_insertion_point(field_map:proto.GalleryFallScoreNotify.uid_brief_map)
  return uid_brief_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerBrief >*
GalleryFallScoreNotify::mutable_uid_brief_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GalleryFallScoreNotify.uid_brief_map)
  return uid_brief_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalloonPlayerInfo::kUidFieldNumber;
const int BalloonPlayerInfo::kCurScoreFieldNumber;
const int BalloonPlayerInfo::kComboDisableTimeFieldNumber;
const int BalloonPlayerInfo::kComboFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalloonPlayerInfo::BalloonPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BalloonPlayerInfo)
}
BalloonPlayerInfo::BalloonPlayerInfo(const BalloonPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_score_, &from.cur_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&cur_score_)) + sizeof(uid_));
  // @@protoc_insertion_point(copy_constructor:proto.BalloonPlayerInfo)
}

void BalloonPlayerInfo::SharedCtor() {
  ::memset(&cur_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&cur_score_)) + sizeof(uid_));
  _cached_size_ = 0;
}

BalloonPlayerInfo::~BalloonPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.BalloonPlayerInfo)
  SharedDtor();
}

void BalloonPlayerInfo::SharedDtor() {
}

void BalloonPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalloonPlayerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BalloonPlayerInfo& BalloonPlayerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BalloonPlayerInfo* BalloonPlayerInfo::New(::google::protobuf::Arena* arena) const {
  BalloonPlayerInfo* n = new BalloonPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalloonPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BalloonPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&uid_) -
      reinterpret_cast<char*>(&cur_score_)) + sizeof(uid_));
  _internal_metadata_.Clear();
}

bool BalloonPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BalloonPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cur_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 combo = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 combo_disable_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combo_disable_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BalloonPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BalloonPlayerInfo)
  return false;
#undef DO_
}

void BalloonPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BalloonPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_score = 2;
  if (this->cur_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_score(), output);
  }

  // uint32 combo = 11;
  if (this->combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->combo(), output);
  }

  // uint32 combo_disable_time = 14;
  if (this->combo_disable_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->combo_disable_time(), output);
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BalloonPlayerInfo)
}

::google::protobuf::uint8* BalloonPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BalloonPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_score = 2;
  if (this->cur_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_score(), target);
  }

  // uint32 combo = 11;
  if (this->combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->combo(), target);
  }

  // uint32 combo_disable_time = 14;
  if (this->combo_disable_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->combo_disable_time(), target);
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BalloonPlayerInfo)
  return target;
}

size_t BalloonPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BalloonPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cur_score = 2;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_score());
  }

  // uint32 combo = 11;
  if (this->combo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combo());
  }

  // uint32 combo_disable_time = 14;
  if (this->combo_disable_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combo_disable_time());
  }

  // uint32 uid = 15;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalloonPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BalloonPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BalloonPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalloonPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BalloonPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BalloonPlayerInfo)
    MergeFrom(*source);
  }
}

void BalloonPlayerInfo::MergeFrom(const BalloonPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BalloonPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_score() != 0) {
    set_cur_score(from.cur_score());
  }
  if (from.combo() != 0) {
    set_combo(from.combo());
  }
  if (from.combo_disable_time() != 0) {
    set_combo_disable_time(from.combo_disable_time());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void BalloonPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BalloonPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalloonPlayerInfo::CopyFrom(const BalloonPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BalloonPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalloonPlayerInfo::IsInitialized() const {
  return true;
}

void BalloonPlayerInfo::Swap(BalloonPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalloonPlayerInfo::InternalSwap(BalloonPlayerInfo* other) {
  using std::swap;
  swap(cur_score_, other->cur_score_);
  swap(combo_, other->combo_);
  swap(combo_disable_time_, other->combo_disable_time_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BalloonPlayerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalloonPlayerInfo

// uint32 uid = 15;
void BalloonPlayerInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 BalloonPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.BalloonPlayerInfo.uid)
  return uid_;
}
void BalloonPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonPlayerInfo.uid)
}

// uint32 cur_score = 2;
void BalloonPlayerInfo::clear_cur_score() {
  cur_score_ = 0u;
}
::google::protobuf::uint32 BalloonPlayerInfo::cur_score() const {
  // @@protoc_insertion_point(field_get:proto.BalloonPlayerInfo.cur_score)
  return cur_score_;
}
void BalloonPlayerInfo::set_cur_score(::google::protobuf::uint32 value) {
  
  cur_score_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonPlayerInfo.cur_score)
}

// uint32 combo_disable_time = 14;
void BalloonPlayerInfo::clear_combo_disable_time() {
  combo_disable_time_ = 0u;
}
::google::protobuf::uint32 BalloonPlayerInfo::combo_disable_time() const {
  // @@protoc_insertion_point(field_get:proto.BalloonPlayerInfo.combo_disable_time)
  return combo_disable_time_;
}
void BalloonPlayerInfo::set_combo_disable_time(::google::protobuf::uint32 value) {
  
  combo_disable_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonPlayerInfo.combo_disable_time)
}

// uint32 combo = 11;
void BalloonPlayerInfo::clear_combo() {
  combo_ = 0u;
}
::google::protobuf::uint32 BalloonPlayerInfo::combo() const {
  // @@protoc_insertion_point(field_get:proto.BalloonPlayerInfo.combo)
  return combo_;
}
void BalloonPlayerInfo::set_combo(::google::protobuf::uint32 value) {
  
  combo_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonPlayerInfo.combo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FallPlayerInfo::FallPlayerInfo_BallCatchCountMapEntry::FallPlayerInfo_BallCatchCountMapEntry() {}
FallPlayerInfo::FallPlayerInfo_BallCatchCountMapEntry::FallPlayerInfo_BallCatchCountMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata FallPlayerInfo::FallPlayerInfo_BallCatchCountMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[15];
}
void FallPlayerInfo::FallPlayerInfo_BallCatchCountMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void FallPlayerInfo::FallPlayerInfo_BallCatchCountMapEntry::MergeFrom(const FallPlayerInfo_BallCatchCountMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FallPlayerInfo::kTimeCostFieldNumber;
const int FallPlayerInfo::kUidFieldNumber;
const int FallPlayerInfo::kBallCatchCountMapFieldNumber;
const int FallPlayerInfo::kCurScoreFieldNumber;
const int FallPlayerInfo::kIsGroundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FallPlayerInfo::FallPlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FallPlayerInfo)
}
FallPlayerInfo::FallPlayerInfo(const FallPlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ball_catch_count_map_.MergeFrom(from.ball_catch_count_map_);
  ::memcpy(&cur_score_, &from.cur_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_ground_) -
    reinterpret_cast<char*>(&cur_score_)) + sizeof(is_ground_));
  // @@protoc_insertion_point(copy_constructor:proto.FallPlayerInfo)
}

void FallPlayerInfo::SharedCtor() {
  ::memset(&cur_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ground_) -
      reinterpret_cast<char*>(&cur_score_)) + sizeof(is_ground_));
  _cached_size_ = 0;
}

FallPlayerInfo::~FallPlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.FallPlayerInfo)
  SharedDtor();
}

void FallPlayerInfo::SharedDtor() {
}

void FallPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FallPlayerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FallPlayerInfo& FallPlayerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FallPlayerInfo* FallPlayerInfo::New(::google::protobuf::Arena* arena) const {
  FallPlayerInfo* n = new FallPlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FallPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FallPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ball_catch_count_map_.Clear();
  ::memset(&cur_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_ground_) -
      reinterpret_cast<char*>(&cur_score_)) + sizeof(is_ground_));
  _internal_metadata_.Clear();
}

bool FallPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FallPlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> ball_catch_count_map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          FallPlayerInfo_BallCatchCountMapEntry::Parser< ::google::protobuf::internal::MapField<
              FallPlayerInfo_BallCatchCountMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&ball_catch_count_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_cost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_ground = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FallPlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FallPlayerInfo)
  return false;
#undef DO_
}

void FallPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FallPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> ball_catch_count_map = 6;
  if (!this->ball_catch_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->ball_catch_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ball_catch_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FallPlayerInfo_BallCatchCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FallPlayerInfo_BallCatchCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
      }
    }
  }

  // uint32 cur_score = 7;
  if (this->cur_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_score(), output);
  }

  // uint32 uid = 9;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->uid(), output);
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_cost(), output);
  }

  // bool is_ground = 15;
  if (this->is_ground() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_ground(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FallPlayerInfo)
}

::google::protobuf::uint8* FallPlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FallPlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> ball_catch_count_map = 6;
  if (!this->ball_catch_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->ball_catch_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->ball_catch_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FallPlayerInfo_BallCatchCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FallPlayerInfo_BallCatchCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->ball_catch_count_map().begin();
          it != this->ball_catch_count_map().end(); ++it) {
        entry.reset(ball_catch_count_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 cur_score = 7;
  if (this->cur_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_score(), target);
  }

  // uint32 uid = 9;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->uid(), target);
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_cost(), target);
  }

  // bool is_ground = 15;
  if (this->is_ground() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_ground(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FallPlayerInfo)
  return target;
}

size_t FallPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FallPlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> ball_catch_count_map = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ball_catch_count_map_size());
  {
    ::google::protobuf::scoped_ptr<FallPlayerInfo_BallCatchCountMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->ball_catch_count_map().begin();
        it != this->ball_catch_count_map().end(); ++it) {
      entry.reset(ball_catch_count_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 cur_score = 7;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_score());
  }

  // uint32 uid = 9;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_cost());
  }

  // bool is_ground = 15;
  if (this->is_ground() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FallPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FallPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FallPlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FallPlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FallPlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FallPlayerInfo)
    MergeFrom(*source);
  }
}

void FallPlayerInfo::MergeFrom(const FallPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FallPlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ball_catch_count_map_.MergeFrom(from.ball_catch_count_map_);
  if (from.cur_score() != 0) {
    set_cur_score(from.cur_score());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.time_cost() != 0) {
    set_time_cost(from.time_cost());
  }
  if (from.is_ground() != 0) {
    set_is_ground(from.is_ground());
  }
}

void FallPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FallPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FallPlayerInfo::CopyFrom(const FallPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FallPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FallPlayerInfo::IsInitialized() const {
  return true;
}

void FallPlayerInfo::Swap(FallPlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FallPlayerInfo::InternalSwap(FallPlayerInfo* other) {
  using std::swap;
  ball_catch_count_map_.Swap(&other->ball_catch_count_map_);
  swap(cur_score_, other->cur_score_);
  swap(uid_, other->uid_);
  swap(time_cost_, other->time_cost_);
  swap(is_ground_, other->is_ground_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FallPlayerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FallPlayerInfo

// uint32 time_cost = 11;
void FallPlayerInfo::clear_time_cost() {
  time_cost_ = 0u;
}
::google::protobuf::uint32 FallPlayerInfo::time_cost() const {
  // @@protoc_insertion_point(field_get:proto.FallPlayerInfo.time_cost)
  return time_cost_;
}
void FallPlayerInfo::set_time_cost(::google::protobuf::uint32 value) {
  
  time_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.FallPlayerInfo.time_cost)
}

// uint32 uid = 9;
void FallPlayerInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 FallPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.FallPlayerInfo.uid)
  return uid_;
}
void FallPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FallPlayerInfo.uid)
}

// map<uint32, uint32> ball_catch_count_map = 6;
int FallPlayerInfo::ball_catch_count_map_size() const {
  return ball_catch_count_map_.size();
}
void FallPlayerInfo::clear_ball_catch_count_map() {
  ball_catch_count_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
FallPlayerInfo::ball_catch_count_map() const {
  // @@protoc_insertion_point(field_map:proto.FallPlayerInfo.ball_catch_count_map)
  return ball_catch_count_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
FallPlayerInfo::mutable_ball_catch_count_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.FallPlayerInfo.ball_catch_count_map)
  return ball_catch_count_map_.MutableMap();
}

// uint32 cur_score = 7;
void FallPlayerInfo::clear_cur_score() {
  cur_score_ = 0u;
}
::google::protobuf::uint32 FallPlayerInfo::cur_score() const {
  // @@protoc_insertion_point(field_get:proto.FallPlayerInfo.cur_score)
  return cur_score_;
}
void FallPlayerInfo::set_cur_score(::google::protobuf::uint32 value) {
  
  cur_score_ = value;
  // @@protoc_insertion_point(field_set:proto.FallPlayerInfo.cur_score)
}

// bool is_ground = 15;
void FallPlayerInfo::clear_is_ground() {
  is_ground_ = false;
}
bool FallPlayerInfo::is_ground() const {
  // @@protoc_insertion_point(field_get:proto.FallPlayerInfo.is_ground)
  return is_ground_;
}
void FallPlayerInfo::set_is_ground(bool value) {
  
  is_ground_ = value;
  // @@protoc_insertion_point(field_set:proto.FallPlayerInfo.is_ground)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneGalleryBalloonInfo::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry() {}
SceneGalleryBalloonInfo::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneGalleryBalloonInfo::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[17];
}
void SceneGalleryBalloonInfo::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneGalleryBalloonInfo::SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry::MergeFrom(const SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryBalloonInfo::kScenePlayerBalloonInfoMapFieldNumber;
const int SceneGalleryBalloonInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryBalloonInfo::SceneGalleryBalloonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryBalloonInfo)
}
SceneGalleryBalloonInfo::SceneGalleryBalloonInfo(const SceneGalleryBalloonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_player_balloon_info_map_.MergeFrom(from.scene_player_balloon_info_map_);
  end_time_ = from.end_time_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryBalloonInfo)
}

void SceneGalleryBalloonInfo::SharedCtor() {
  end_time_ = 0u;
  _cached_size_ = 0;
}

SceneGalleryBalloonInfo::~SceneGalleryBalloonInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryBalloonInfo)
  SharedDtor();
}

void SceneGalleryBalloonInfo::SharedDtor() {
}

void SceneGalleryBalloonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryBalloonInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryBalloonInfo& SceneGalleryBalloonInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryBalloonInfo* SceneGalleryBalloonInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryBalloonInfo* n = new SceneGalleryBalloonInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryBalloonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryBalloonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_player_balloon_info_map_.Clear();
  end_time_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGalleryBalloonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryBalloonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 end_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.BalloonPlayerInfo> scene_player_balloon_info_map = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry,
              ::google::protobuf::uint32, ::proto::BalloonPlayerInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo > > parser(&scene_player_balloon_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryBalloonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryBalloonInfo)
  return false;
#undef DO_
}

void SceneGalleryBalloonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryBalloonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->end_time(), output);
  }

  // map<uint32, .proto.BalloonPlayerInfo> scene_player_balloon_info_map = 14;
  if (!this->scene_player_balloon_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->scene_player_balloon_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->scene_player_balloon_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::const_iterator
          it = this->scene_player_balloon_info_map().begin();
          it != this->scene_player_balloon_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(scene_player_balloon_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::const_iterator
          it = this->scene_player_balloon_info_map().begin();
          it != this->scene_player_balloon_info_map().end(); ++it) {
        entry.reset(scene_player_balloon_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryBalloonInfo)
}

::google::protobuf::uint8* SceneGalleryBalloonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryBalloonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->end_time(), target);
  }

  // map<uint32, .proto.BalloonPlayerInfo> scene_player_balloon_info_map = 14;
  if (!this->scene_player_balloon_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->scene_player_balloon_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->scene_player_balloon_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::const_iterator
          it = this->scene_player_balloon_info_map().begin();
          it != this->scene_player_balloon_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(scene_player_balloon_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::const_iterator
          it = this->scene_player_balloon_info_map().begin();
          it != this->scene_player_balloon_info_map().end(); ++it) {
        entry.reset(scene_player_balloon_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryBalloonInfo)
  return target;
}

size_t SceneGalleryBalloonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryBalloonInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.BalloonPlayerInfo> scene_player_balloon_info_map = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scene_player_balloon_info_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneGalleryBalloonInfo_ScenePlayerBalloonInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >::const_iterator
        it = this->scene_player_balloon_info_map().begin();
        it != this->scene_player_balloon_info_map().end(); ++it) {
      entry.reset(scene_player_balloon_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 end_time = 5;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryBalloonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryBalloonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryBalloonInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryBalloonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryBalloonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryBalloonInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryBalloonInfo::MergeFrom(const SceneGalleryBalloonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryBalloonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scene_player_balloon_info_map_.MergeFrom(from.scene_player_balloon_info_map_);
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void SceneGalleryBalloonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryBalloonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryBalloonInfo::CopyFrom(const SceneGalleryBalloonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryBalloonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryBalloonInfo::IsInitialized() const {
  return true;
}

void SceneGalleryBalloonInfo::Swap(SceneGalleryBalloonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryBalloonInfo::InternalSwap(SceneGalleryBalloonInfo* other) {
  using std::swap;
  scene_player_balloon_info_map_.Swap(&other->scene_player_balloon_info_map_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryBalloonInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryBalloonInfo

// map<uint32, .proto.BalloonPlayerInfo> scene_player_balloon_info_map = 14;
int SceneGalleryBalloonInfo::scene_player_balloon_info_map_size() const {
  return scene_player_balloon_info_map_.size();
}
void SceneGalleryBalloonInfo::clear_scene_player_balloon_info_map() {
  scene_player_balloon_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >&
SceneGalleryBalloonInfo::scene_player_balloon_info_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneGalleryBalloonInfo.scene_player_balloon_info_map)
  return scene_player_balloon_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::BalloonPlayerInfo >*
SceneGalleryBalloonInfo::mutable_scene_player_balloon_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneGalleryBalloonInfo.scene_player_balloon_info_map)
  return scene_player_balloon_info_map_.MutableMap();
}

// uint32 end_time = 5;
void SceneGalleryBalloonInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBalloonInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBalloonInfo.end_time)
  return end_time_;
}
void SceneGalleryBalloonInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBalloonInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneGalleryFallInfo::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry() {}
SceneGalleryFallInfo::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneGalleryFallInfo::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[19];
}
void SceneGalleryFallInfo::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneGalleryFallInfo::SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry::MergeFrom(const SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryFallInfo::kScenePlayerFallInfoMapFieldNumber;
const int SceneGalleryFallInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryFallInfo::SceneGalleryFallInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryFallInfo)
}
SceneGalleryFallInfo::SceneGalleryFallInfo(const SceneGalleryFallInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_player_fall_info_map_.MergeFrom(from.scene_player_fall_info_map_);
  end_time_ = from.end_time_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryFallInfo)
}

void SceneGalleryFallInfo::SharedCtor() {
  end_time_ = 0u;
  _cached_size_ = 0;
}

SceneGalleryFallInfo::~SceneGalleryFallInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryFallInfo)
  SharedDtor();
}

void SceneGalleryFallInfo::SharedDtor() {
}

void SceneGalleryFallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryFallInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryFallInfo& SceneGalleryFallInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryFallInfo* SceneGalleryFallInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryFallInfo* n = new SceneGalleryFallInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryFallInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryFallInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_player_fall_info_map_.Clear();
  end_time_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGalleryFallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryFallInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 end_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.FallPlayerInfo> scene_player_fall_info_map = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry,
              ::google::protobuf::uint32, ::proto::FallPlayerInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo > > parser(&scene_player_fall_info_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryFallInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryFallInfo)
  return false;
#undef DO_
}

void SceneGalleryFallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryFallInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 2;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->end_time(), output);
  }

  // map<uint32, .proto.FallPlayerInfo> scene_player_fall_info_map = 12;
  if (!this->scene_player_fall_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->scene_player_fall_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->scene_player_fall_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::const_iterator
          it = this->scene_player_fall_info_map().begin();
          it != this->scene_player_fall_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(scene_player_fall_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::const_iterator
          it = this->scene_player_fall_info_map().begin();
          it != this->scene_player_fall_info_map().end(); ++it) {
        entry.reset(scene_player_fall_info_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            12, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryFallInfo)
}

::google::protobuf::uint8* SceneGalleryFallInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryFallInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 2;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->end_time(), target);
  }

  // map<uint32, .proto.FallPlayerInfo> scene_player_fall_info_map = 12;
  if (!this->scene_player_fall_info_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->scene_player_fall_info_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->scene_player_fall_info_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::const_iterator
          it = this->scene_player_fall_info_map().begin();
          it != this->scene_player_fall_info_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(scene_player_fall_info_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::const_iterator
          it = this->scene_player_fall_info_map().begin();
          it != this->scene_player_fall_info_map().end(); ++it) {
        entry.reset(scene_player_fall_info_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       12, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryFallInfo)
  return target;
}

size_t SceneGalleryFallInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryFallInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.FallPlayerInfo> scene_player_fall_info_map = 12;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->scene_player_fall_info_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneGalleryFallInfo_ScenePlayerFallInfoMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >::const_iterator
        it = this->scene_player_fall_info_map().begin();
        it != this->scene_player_fall_info_map().end(); ++it) {
      entry.reset(scene_player_fall_info_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryFallInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryFallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryFallInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryFallInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryFallInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryFallInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryFallInfo::MergeFrom(const SceneGalleryFallInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryFallInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scene_player_fall_info_map_.MergeFrom(from.scene_player_fall_info_map_);
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void SceneGalleryFallInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryFallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryFallInfo::CopyFrom(const SceneGalleryFallInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryFallInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryFallInfo::IsInitialized() const {
  return true;
}

void SceneGalleryFallInfo::Swap(SceneGalleryFallInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryFallInfo::InternalSwap(SceneGalleryFallInfo* other) {
  using std::swap;
  scene_player_fall_info_map_.Swap(&other->scene_player_fall_info_map_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryFallInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryFallInfo

// map<uint32, .proto.FallPlayerInfo> scene_player_fall_info_map = 12;
int SceneGalleryFallInfo::scene_player_fall_info_map_size() const {
  return scene_player_fall_info_map_.size();
}
void SceneGalleryFallInfo::clear_scene_player_fall_info_map() {
  scene_player_fall_info_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >&
SceneGalleryFallInfo::scene_player_fall_info_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneGalleryFallInfo.scene_player_fall_info_map)
  return scene_player_fall_info_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FallPlayerInfo >*
SceneGalleryFallInfo::mutable_scene_player_fall_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneGalleryFallInfo.scene_player_fall_info_map)
  return scene_player_fall_info_map_.MutableMap();
}

// uint32 end_time = 2;
void SceneGalleryFallInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFallInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFallInfo.end_time)
  return end_time_;
}
void SceneGalleryFallInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFallInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryFlowerInfo::kEndTimeFieldNumber;
const int SceneGalleryFlowerInfo::kTargetScoreFieldNumber;
const int SceneGalleryFlowerInfo::kCurScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryFlowerInfo::SceneGalleryFlowerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryFlowerInfo)
}
SceneGalleryFlowerInfo::SceneGalleryFlowerInfo(const SceneGalleryFlowerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_score_, &from.target_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_score_) -
    reinterpret_cast<char*>(&target_score_)) + sizeof(cur_score_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryFlowerInfo)
}

void SceneGalleryFlowerInfo::SharedCtor() {
  ::memset(&target_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&target_score_)) + sizeof(cur_score_));
  _cached_size_ = 0;
}

SceneGalleryFlowerInfo::~SceneGalleryFlowerInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryFlowerInfo)
  SharedDtor();
}

void SceneGalleryFlowerInfo::SharedDtor() {
}

void SceneGalleryFlowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryFlowerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryFlowerInfo& SceneGalleryFlowerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryFlowerInfo* SceneGalleryFlowerInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryFlowerInfo* n = new SceneGalleryFlowerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryFlowerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryFlowerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&target_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&target_score_)) + sizeof(cur_score_));
  _internal_metadata_.Clear();
}

bool SceneGalleryFlowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryFlowerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 end_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_score = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_score = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryFlowerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryFlowerInfo)
  return false;
#undef DO_
}

void SceneGalleryFlowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryFlowerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 7;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->end_time(), output);
  }

  // uint32 cur_score = 9;
  if (this->cur_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cur_score(), output);
  }

  // uint32 target_score = 13;
  if (this->target_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->target_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryFlowerInfo)
}

::google::protobuf::uint8* SceneGalleryFlowerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryFlowerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 7;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->end_time(), target);
  }

  // uint32 cur_score = 9;
  if (this->cur_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cur_score(), target);
  }

  // uint32 target_score = 13;
  if (this->target_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->target_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryFlowerInfo)
  return target;
}

size_t SceneGalleryFlowerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryFlowerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_score = 13;
  if (this->target_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_score());
  }

  // uint32 end_time = 7;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 cur_score = 9;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryFlowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryFlowerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryFlowerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryFlowerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryFlowerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryFlowerInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryFlowerInfo::MergeFrom(const SceneGalleryFlowerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryFlowerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_score() != 0) {
    set_target_score(from.target_score());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.cur_score() != 0) {
    set_cur_score(from.cur_score());
  }
}

void SceneGalleryFlowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryFlowerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryFlowerInfo::CopyFrom(const SceneGalleryFlowerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryFlowerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryFlowerInfo::IsInitialized() const {
  return true;
}

void SceneGalleryFlowerInfo::Swap(SceneGalleryFlowerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryFlowerInfo::InternalSwap(SceneGalleryFlowerInfo* other) {
  using std::swap;
  swap(target_score_, other->target_score_);
  swap(end_time_, other->end_time_);
  swap(cur_score_, other->cur_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryFlowerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryFlowerInfo

// uint32 end_time = 7;
void SceneGalleryFlowerInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFlowerInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFlowerInfo.end_time)
  return end_time_;
}
void SceneGalleryFlowerInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFlowerInfo.end_time)
}

// uint32 target_score = 13;
void SceneGalleryFlowerInfo::clear_target_score() {
  target_score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFlowerInfo::target_score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFlowerInfo.target_score)
  return target_score_;
}
void SceneGalleryFlowerInfo::set_target_score(::google::protobuf::uint32 value) {
  
  target_score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFlowerInfo.target_score)
}

// uint32 cur_score = 9;
void SceneGalleryFlowerInfo::clear_cur_score() {
  cur_score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFlowerInfo::cur_score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFlowerInfo.cur_score)
  return cur_score_;
}
void SceneGalleryFlowerInfo::set_cur_score(::google::protobuf::uint32 value) {
  
  cur_score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFlowerInfo.cur_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneGalleryBulletInfo::SceneGalleryBulletInfo_HitCountMapEntry::SceneGalleryBulletInfo_HitCountMapEntry() {}
SceneGalleryBulletInfo::SceneGalleryBulletInfo_HitCountMapEntry::SceneGalleryBulletInfo_HitCountMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneGalleryBulletInfo::SceneGalleryBulletInfo_HitCountMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[22];
}
void SceneGalleryBulletInfo::SceneGalleryBulletInfo_HitCountMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneGalleryBulletInfo::SceneGalleryBulletInfo_HitCountMapEntry::MergeFrom(const SceneGalleryBulletInfo_HitCountMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryBulletInfo::kEndTimeFieldNumber;
const int SceneGalleryBulletInfo::kHitCountMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryBulletInfo::SceneGalleryBulletInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryBulletInfo)
}
SceneGalleryBulletInfo::SceneGalleryBulletInfo(const SceneGalleryBulletInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hit_count_map_.MergeFrom(from.hit_count_map_);
  end_time_ = from.end_time_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryBulletInfo)
}

void SceneGalleryBulletInfo::SharedCtor() {
  end_time_ = 0u;
  _cached_size_ = 0;
}

SceneGalleryBulletInfo::~SceneGalleryBulletInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryBulletInfo)
  SharedDtor();
}

void SceneGalleryBulletInfo::SharedDtor() {
}

void SceneGalleryBulletInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryBulletInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryBulletInfo& SceneGalleryBulletInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryBulletInfo* SceneGalleryBulletInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryBulletInfo* n = new SceneGalleryBulletInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryBulletInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryBulletInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hit_count_map_.Clear();
  end_time_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGalleryBulletInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryBulletInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 end_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> hit_count_map = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          SceneGalleryBulletInfo_HitCountMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneGalleryBulletInfo_HitCountMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&hit_count_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryBulletInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryBulletInfo)
  return false;
#undef DO_
}

void SceneGalleryBulletInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryBulletInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 1;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->end_time(), output);
  }

  // map<uint32, uint32> hit_count_map = 10;
  if (!this->hit_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->hit_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hit_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->hit_count_map().begin();
          it != this->hit_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryBulletInfo_HitCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hit_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryBulletInfo_HitCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->hit_count_map().begin();
          it != this->hit_count_map().end(); ++it) {
        entry.reset(hit_count_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryBulletInfo)
}

::google::protobuf::uint8* SceneGalleryBulletInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryBulletInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 end_time = 1;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->end_time(), target);
  }

  // map<uint32, uint32> hit_count_map = 10;
  if (!this->hit_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->hit_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hit_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->hit_count_map().begin();
          it != this->hit_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryBulletInfo_HitCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hit_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryBulletInfo_HitCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->hit_count_map().begin();
          it != this->hit_count_map().end(); ++it) {
        entry.reset(hit_count_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryBulletInfo)
  return target;
}

size_t SceneGalleryBulletInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryBulletInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> hit_count_map = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hit_count_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneGalleryBulletInfo_HitCountMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->hit_count_map().begin();
        it != this->hit_count_map().end(); ++it) {
      entry.reset(hit_count_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 end_time = 1;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryBulletInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryBulletInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryBulletInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryBulletInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryBulletInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryBulletInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryBulletInfo::MergeFrom(const SceneGalleryBulletInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryBulletInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hit_count_map_.MergeFrom(from.hit_count_map_);
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void SceneGalleryBulletInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryBulletInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryBulletInfo::CopyFrom(const SceneGalleryBulletInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryBulletInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryBulletInfo::IsInitialized() const {
  return true;
}

void SceneGalleryBulletInfo::Swap(SceneGalleryBulletInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryBulletInfo::InternalSwap(SceneGalleryBulletInfo* other) {
  using std::swap;
  hit_count_map_.Swap(&other->hit_count_map_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryBulletInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryBulletInfo

// uint32 end_time = 1;
void SceneGalleryBulletInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBulletInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBulletInfo.end_time)
  return end_time_;
}
void SceneGalleryBulletInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBulletInfo.end_time)
}

// map<uint32, uint32> hit_count_map = 10;
int SceneGalleryBulletInfo::hit_count_map_size() const {
  return hit_count_map_.size();
}
void SceneGalleryBulletInfo::clear_hit_count_map() {
  hit_count_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneGalleryBulletInfo::hit_count_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneGalleryBulletInfo.hit_count_map)
  return hit_count_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneGalleryBulletInfo::mutable_hit_count_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneGalleryBulletInfo.hit_count_map)
  return hit_count_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo_FallCountMapEntry::SceneGalleryBrokenFloorInfo_FallCountMapEntry() {}
SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo_FallCountMapEntry::SceneGalleryBrokenFloorInfo_FallCountMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo_FallCountMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[24];
}
void SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo_FallCountMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo_FallCountMapEntry::MergeFrom(const SceneGalleryBrokenFloorInfo_FallCountMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryBrokenFloorInfo::kFallCountMapFieldNumber;
const int SceneGalleryBrokenFloorInfo::kEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryBrokenFloorInfo)
}
SceneGalleryBrokenFloorInfo::SceneGalleryBrokenFloorInfo(const SceneGalleryBrokenFloorInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fall_count_map_.MergeFrom(from.fall_count_map_);
  end_time_ = from.end_time_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryBrokenFloorInfo)
}

void SceneGalleryBrokenFloorInfo::SharedCtor() {
  end_time_ = 0u;
  _cached_size_ = 0;
}

SceneGalleryBrokenFloorInfo::~SceneGalleryBrokenFloorInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryBrokenFloorInfo)
  SharedDtor();
}

void SceneGalleryBrokenFloorInfo::SharedDtor() {
}

void SceneGalleryBrokenFloorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryBrokenFloorInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryBrokenFloorInfo& SceneGalleryBrokenFloorInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryBrokenFloorInfo* SceneGalleryBrokenFloorInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryBrokenFloorInfo* n = new SceneGalleryBrokenFloorInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryBrokenFloorInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryBrokenFloorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fall_count_map_.Clear();
  end_time_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGalleryBrokenFloorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryBrokenFloorInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> fall_count_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          SceneGalleryBrokenFloorInfo_FallCountMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneGalleryBrokenFloorInfo_FallCountMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&fall_count_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryBrokenFloorInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryBrokenFloorInfo)
  return false;
#undef DO_
}

void SceneGalleryBrokenFloorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryBrokenFloorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> fall_count_map = 3;
  if (!this->fall_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->fall_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fall_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->fall_count_map().begin();
          it != this->fall_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryBrokenFloorInfo_FallCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fall_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryBrokenFloorInfo_FallCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->fall_count_map().begin();
          it != this->fall_count_map().end(); ++it) {
        entry.reset(fall_count_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
      }
    }
  }

  // uint32 end_time = 9;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryBrokenFloorInfo)
}

::google::protobuf::uint8* SceneGalleryBrokenFloorInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryBrokenFloorInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> fall_count_map = 3;
  if (!this->fall_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->fall_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fall_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->fall_count_map().begin();
          it != this->fall_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryBrokenFloorInfo_FallCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fall_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryBrokenFloorInfo_FallCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->fall_count_map().begin();
          it != this->fall_count_map().end(); ++it) {
        entry.reset(fall_count_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 end_time = 9;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryBrokenFloorInfo)
  return target;
}

size_t SceneGalleryBrokenFloorInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryBrokenFloorInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> fall_count_map = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fall_count_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneGalleryBrokenFloorInfo_FallCountMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->fall_count_map().begin();
        it != this->fall_count_map().end(); ++it) {
      entry.reset(fall_count_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 end_time = 9;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryBrokenFloorInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryBrokenFloorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryBrokenFloorInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryBrokenFloorInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryBrokenFloorInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryBrokenFloorInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryBrokenFloorInfo::MergeFrom(const SceneGalleryBrokenFloorInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryBrokenFloorInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fall_count_map_.MergeFrom(from.fall_count_map_);
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void SceneGalleryBrokenFloorInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryBrokenFloorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryBrokenFloorInfo::CopyFrom(const SceneGalleryBrokenFloorInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryBrokenFloorInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryBrokenFloorInfo::IsInitialized() const {
  return true;
}

void SceneGalleryBrokenFloorInfo::Swap(SceneGalleryBrokenFloorInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryBrokenFloorInfo::InternalSwap(SceneGalleryBrokenFloorInfo* other) {
  using std::swap;
  fall_count_map_.Swap(&other->fall_count_map_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryBrokenFloorInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryBrokenFloorInfo

// map<uint32, uint32> fall_count_map = 3;
int SceneGalleryBrokenFloorInfo::fall_count_map_size() const {
  return fall_count_map_.size();
}
void SceneGalleryBrokenFloorInfo::clear_fall_count_map() {
  fall_count_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneGalleryBrokenFloorInfo::fall_count_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneGalleryBrokenFloorInfo.fall_count_map)
  return fall_count_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneGalleryBrokenFloorInfo::mutable_fall_count_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneGalleryBrokenFloorInfo.fall_count_map)
  return fall_count_map_.MutableMap();
}

// uint32 end_time = 9;
void SceneGalleryBrokenFloorInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBrokenFloorInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBrokenFloorInfo.end_time)
  return end_time_;
}
void SceneGalleryBrokenFloorInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBrokenFloorInfo.end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryHideAndSeekInfo::kVisibleUidListFieldNumber;
const int SceneGalleryHideAndSeekInfo::kCaughtUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryHideAndSeekInfo::SceneGalleryHideAndSeekInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryHideAndSeekInfo)
}
SceneGalleryHideAndSeekInfo::SceneGalleryHideAndSeekInfo(const SceneGalleryHideAndSeekInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      caught_uid_list_(from.caught_uid_list_),
      visible_uid_list_(from.visible_uid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryHideAndSeekInfo)
}

void SceneGalleryHideAndSeekInfo::SharedCtor() {
  _cached_size_ = 0;
}

SceneGalleryHideAndSeekInfo::~SceneGalleryHideAndSeekInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryHideAndSeekInfo)
  SharedDtor();
}

void SceneGalleryHideAndSeekInfo::SharedDtor() {
}

void SceneGalleryHideAndSeekInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryHideAndSeekInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryHideAndSeekInfo& SceneGalleryHideAndSeekInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryHideAndSeekInfo* SceneGalleryHideAndSeekInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryHideAndSeekInfo* n = new SceneGalleryHideAndSeekInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryHideAndSeekInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryHideAndSeekInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  caught_uid_list_.Clear();
  visible_uid_list_.Clear();
  _internal_metadata_.Clear();
}

bool SceneGalleryHideAndSeekInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryHideAndSeekInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 caught_uid_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_caught_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_caught_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 visible_uid_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_visible_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_visible_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryHideAndSeekInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryHideAndSeekInfo)
  return false;
#undef DO_
}

void SceneGalleryHideAndSeekInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryHideAndSeekInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 caught_uid_list = 4;
  if (this->caught_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _caught_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->caught_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->caught_uid_list(i), output);
  }

  // repeated uint32 visible_uid_list = 13;
  if (this->visible_uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _visible_uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->visible_uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->visible_uid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryHideAndSeekInfo)
}

::google::protobuf::uint8* SceneGalleryHideAndSeekInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryHideAndSeekInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 caught_uid_list = 4;
  if (this->caught_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _caught_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->caught_uid_list_, target);
  }

  // repeated uint32 visible_uid_list = 13;
  if (this->visible_uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _visible_uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->visible_uid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryHideAndSeekInfo)
  return target;
}

size_t SceneGalleryHideAndSeekInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryHideAndSeekInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 caught_uid_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->caught_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _caught_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 visible_uid_list = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->visible_uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _visible_uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryHideAndSeekInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryHideAndSeekInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryHideAndSeekInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryHideAndSeekInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryHideAndSeekInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryHideAndSeekInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryHideAndSeekInfo::MergeFrom(const SceneGalleryHideAndSeekInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryHideAndSeekInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  caught_uid_list_.MergeFrom(from.caught_uid_list_);
  visible_uid_list_.MergeFrom(from.visible_uid_list_);
}

void SceneGalleryHideAndSeekInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryHideAndSeekInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryHideAndSeekInfo::CopyFrom(const SceneGalleryHideAndSeekInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryHideAndSeekInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryHideAndSeekInfo::IsInitialized() const {
  return true;
}

void SceneGalleryHideAndSeekInfo::Swap(SceneGalleryHideAndSeekInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryHideAndSeekInfo::InternalSwap(SceneGalleryHideAndSeekInfo* other) {
  using std::swap;
  caught_uid_list_.InternalSwap(&other->caught_uid_list_);
  visible_uid_list_.InternalSwap(&other->visible_uid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryHideAndSeekInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryHideAndSeekInfo

// repeated uint32 visible_uid_list = 13;
int SceneGalleryHideAndSeekInfo::visible_uid_list_size() const {
  return visible_uid_list_.size();
}
void SceneGalleryHideAndSeekInfo::clear_visible_uid_list() {
  visible_uid_list_.Clear();
}
::google::protobuf::uint32 SceneGalleryHideAndSeekInfo::visible_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHideAndSeekInfo.visible_uid_list)
  return visible_uid_list_.Get(index);
}
void SceneGalleryHideAndSeekInfo::set_visible_uid_list(int index, ::google::protobuf::uint32 value) {
  visible_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneGalleryHideAndSeekInfo.visible_uid_list)
}
void SceneGalleryHideAndSeekInfo::add_visible_uid_list(::google::protobuf::uint32 value) {
  visible_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneGalleryHideAndSeekInfo.visible_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneGalleryHideAndSeekInfo::visible_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneGalleryHideAndSeekInfo.visible_uid_list)
  return visible_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneGalleryHideAndSeekInfo::mutable_visible_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneGalleryHideAndSeekInfo.visible_uid_list)
  return &visible_uid_list_;
}

// repeated uint32 caught_uid_list = 4;
int SceneGalleryHideAndSeekInfo::caught_uid_list_size() const {
  return caught_uid_list_.size();
}
void SceneGalleryHideAndSeekInfo::clear_caught_uid_list() {
  caught_uid_list_.Clear();
}
::google::protobuf::uint32 SceneGalleryHideAndSeekInfo::caught_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHideAndSeekInfo.caught_uid_list)
  return caught_uid_list_.Get(index);
}
void SceneGalleryHideAndSeekInfo::set_caught_uid_list(int index, ::google::protobuf::uint32 value) {
  caught_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneGalleryHideAndSeekInfo.caught_uid_list)
}
void SceneGalleryHideAndSeekInfo::add_caught_uid_list(::google::protobuf::uint32 value) {
  caught_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneGalleryHideAndSeekInfo.caught_uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneGalleryHideAndSeekInfo::caught_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneGalleryHideAndSeekInfo.caught_uid_list)
  return caught_uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneGalleryHideAndSeekInfo::mutable_caught_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneGalleryHideAndSeekInfo.caught_uid_list)
  return &caught_uid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryBuoyantCombatInfo::kScoreFieldNumber;
const int SceneGalleryBuoyantCombatInfo::kKillSpecialMonsterCountFieldNumber;
const int SceneGalleryBuoyantCombatInfo::kKillMonsterCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryBuoyantCombatInfo::SceneGalleryBuoyantCombatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryBuoyantCombatInfo)
}
SceneGalleryBuoyantCombatInfo::SceneGalleryBuoyantCombatInfo(const SceneGalleryBuoyantCombatInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kill_special_monster_count_, &from.kill_special_monster_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_monster_count_) -
    reinterpret_cast<char*>(&kill_special_monster_count_)) + sizeof(kill_monster_count_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryBuoyantCombatInfo)
}

void SceneGalleryBuoyantCombatInfo::SharedCtor() {
  ::memset(&kill_special_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_monster_count_) -
      reinterpret_cast<char*>(&kill_special_monster_count_)) + sizeof(kill_monster_count_));
  _cached_size_ = 0;
}

SceneGalleryBuoyantCombatInfo::~SceneGalleryBuoyantCombatInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryBuoyantCombatInfo)
  SharedDtor();
}

void SceneGalleryBuoyantCombatInfo::SharedDtor() {
}

void SceneGalleryBuoyantCombatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryBuoyantCombatInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryBuoyantCombatInfo& SceneGalleryBuoyantCombatInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryBuoyantCombatInfo* SceneGalleryBuoyantCombatInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryBuoyantCombatInfo* n = new SceneGalleryBuoyantCombatInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryBuoyantCombatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryBuoyantCombatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kill_special_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_monster_count_) -
      reinterpret_cast<char*>(&kill_special_monster_count_)) + sizeof(kill_monster_count_));
  _internal_metadata_.Clear();
}

bool SceneGalleryBuoyantCombatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryBuoyantCombatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 kill_special_monster_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_special_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_monster_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryBuoyantCombatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryBuoyantCombatInfo)
  return false;
#undef DO_
}

void SceneGalleryBuoyantCombatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryBuoyantCombatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_special_monster_count = 1;
  if (this->kill_special_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kill_special_monster_count(), output);
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

  // uint32 kill_monster_count = 14;
  if (this->kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->kill_monster_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryBuoyantCombatInfo)
}

::google::protobuf::uint8* SceneGalleryBuoyantCombatInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryBuoyantCombatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_special_monster_count = 1;
  if (this->kill_special_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kill_special_monster_count(), target);
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->score(), target);
  }

  // uint32 kill_monster_count = 14;
  if (this->kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->kill_monster_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryBuoyantCombatInfo)
  return target;
}

size_t SceneGalleryBuoyantCombatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryBuoyantCombatInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 kill_special_monster_count = 1;
  if (this->kill_special_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_special_monster_count());
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 kill_monster_count = 14;
  if (this->kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_monster_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryBuoyantCombatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryBuoyantCombatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryBuoyantCombatInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryBuoyantCombatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryBuoyantCombatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryBuoyantCombatInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryBuoyantCombatInfo::MergeFrom(const SceneGalleryBuoyantCombatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryBuoyantCombatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kill_special_monster_count() != 0) {
    set_kill_special_monster_count(from.kill_special_monster_count());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.kill_monster_count() != 0) {
    set_kill_monster_count(from.kill_monster_count());
  }
}

void SceneGalleryBuoyantCombatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryBuoyantCombatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryBuoyantCombatInfo::CopyFrom(const SceneGalleryBuoyantCombatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryBuoyantCombatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryBuoyantCombatInfo::IsInitialized() const {
  return true;
}

void SceneGalleryBuoyantCombatInfo::Swap(SceneGalleryBuoyantCombatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryBuoyantCombatInfo::InternalSwap(SceneGalleryBuoyantCombatInfo* other) {
  using std::swap;
  swap(kill_special_monster_count_, other->kill_special_monster_count_);
  swap(score_, other->score_);
  swap(kill_monster_count_, other->kill_monster_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryBuoyantCombatInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryBuoyantCombatInfo

// uint32 score = 6;
void SceneGalleryBuoyantCombatInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBuoyantCombatInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBuoyantCombatInfo.score)
  return score_;
}
void SceneGalleryBuoyantCombatInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBuoyantCombatInfo.score)
}

// uint32 kill_special_monster_count = 1;
void SceneGalleryBuoyantCombatInfo::clear_kill_special_monster_count() {
  kill_special_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBuoyantCombatInfo::kill_special_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBuoyantCombatInfo.kill_special_monster_count)
  return kill_special_monster_count_;
}
void SceneGalleryBuoyantCombatInfo::set_kill_special_monster_count(::google::protobuf::uint32 value) {
  
  kill_special_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBuoyantCombatInfo.kill_special_monster_count)
}

// uint32 kill_monster_count = 14;
void SceneGalleryBuoyantCombatInfo::clear_kill_monster_count() {
  kill_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBuoyantCombatInfo::kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBuoyantCombatInfo.kill_monster_count)
  return kill_monster_count_;
}
void SceneGalleryBuoyantCombatInfo::set_kill_monster_count(::google::protobuf::uint32 value) {
  
  kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBuoyantCombatInfo.kill_monster_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryProgressInfo::kProgressStageListFieldNumber;
const int SceneGalleryProgressInfo::kKeyFieldNumber;
const int SceneGalleryProgressInfo::kProgressFieldNumber;
const int SceneGalleryProgressInfo::kUiFormFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryProgressInfo::SceneGalleryProgressInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryProgressInfo)
}
SceneGalleryProgressInfo::SceneGalleryProgressInfo(const SceneGalleryProgressInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      progress_stage_list_(from.progress_stage_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&ui_form_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(ui_form_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryProgressInfo)
}

void SceneGalleryProgressInfo::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ui_form_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(ui_form_));
  _cached_size_ = 0;
}

SceneGalleryProgressInfo::~SceneGalleryProgressInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryProgressInfo)
  SharedDtor();
}

void SceneGalleryProgressInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SceneGalleryProgressInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryProgressInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryProgressInfo& SceneGalleryProgressInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryProgressInfo* SceneGalleryProgressInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryProgressInfo* n = new SceneGalleryProgressInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryProgressInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryProgressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_stage_list_.Clear();
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ui_form_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(ui_form_));
  _internal_metadata_.Clear();
}

bool SceneGalleryProgressInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryProgressInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 progress = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 progress_stage_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_progress_stage_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_progress_stage_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SceneGalleryProgressInfo.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ui_form = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ui_form_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryProgressInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryProgressInfo)
  return false;
#undef DO_
}

void SceneGalleryProgressInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryProgressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 progress = 5;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->progress(), output);
  }

  // repeated uint32 progress_stage_list = 8;
  if (this->progress_stage_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _progress_stage_list_cached_byte_size_));
  }
  for (int i = 0, n = this->progress_stage_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->progress_stage_list(i), output);
  }

  // string key = 11;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SceneGalleryProgressInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->key(), output);
  }

  // uint32 ui_form = 12;
  if (this->ui_form() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ui_form(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryProgressInfo)
}

::google::protobuf::uint8* SceneGalleryProgressInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryProgressInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 progress = 5;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->progress(), target);
  }

  // repeated uint32 progress_stage_list = 8;
  if (this->progress_stage_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _progress_stage_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->progress_stage_list_, target);
  }

  // string key = 11;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SceneGalleryProgressInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->key(), target);
  }

  // uint32 ui_form = 12;
  if (this->ui_form() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ui_form(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryProgressInfo)
  return target;
}

size_t SceneGalleryProgressInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryProgressInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 progress_stage_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->progress_stage_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _progress_stage_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string key = 11;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // uint32 progress = 5;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  // uint32 ui_form = 12;
  if (this->ui_form() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ui_form());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryProgressInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryProgressInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryProgressInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryProgressInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryProgressInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryProgressInfo::MergeFrom(const SceneGalleryProgressInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryProgressInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  progress_stage_list_.MergeFrom(from.progress_stage_list_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.ui_form() != 0) {
    set_ui_form(from.ui_form());
  }
}

void SceneGalleryProgressInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryProgressInfo::CopyFrom(const SceneGalleryProgressInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryProgressInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryProgressInfo::IsInitialized() const {
  return true;
}

void SceneGalleryProgressInfo::Swap(SceneGalleryProgressInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryProgressInfo::InternalSwap(SceneGalleryProgressInfo* other) {
  using std::swap;
  progress_stage_list_.InternalSwap(&other->progress_stage_list_);
  key_.Swap(&other->key_);
  swap(progress_, other->progress_);
  swap(ui_form_, other->ui_form_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryProgressInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryProgressInfo

// repeated uint32 progress_stage_list = 8;
int SceneGalleryProgressInfo::progress_stage_list_size() const {
  return progress_stage_list_.size();
}
void SceneGalleryProgressInfo::clear_progress_stage_list() {
  progress_stage_list_.Clear();
}
::google::protobuf::uint32 SceneGalleryProgressInfo::progress_stage_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryProgressInfo.progress_stage_list)
  return progress_stage_list_.Get(index);
}
void SceneGalleryProgressInfo::set_progress_stage_list(int index, ::google::protobuf::uint32 value) {
  progress_stage_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.SceneGalleryProgressInfo.progress_stage_list)
}
void SceneGalleryProgressInfo::add_progress_stage_list(::google::protobuf::uint32 value) {
  progress_stage_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.SceneGalleryProgressInfo.progress_stage_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SceneGalleryProgressInfo::progress_stage_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneGalleryProgressInfo.progress_stage_list)
  return progress_stage_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SceneGalleryProgressInfo::mutable_progress_stage_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneGalleryProgressInfo.progress_stage_list)
  return &progress_stage_list_;
}

// string key = 11;
void SceneGalleryProgressInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SceneGalleryProgressInfo::key() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryProgressInfo.key)
  return key_.GetNoArena();
}
void SceneGalleryProgressInfo::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SceneGalleryProgressInfo.key)
}
#if LANG_CXX11
void SceneGalleryProgressInfo::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SceneGalleryProgressInfo.key)
}
#endif
void SceneGalleryProgressInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SceneGalleryProgressInfo.key)
}
void SceneGalleryProgressInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SceneGalleryProgressInfo.key)
}
::std::string* SceneGalleryProgressInfo::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryProgressInfo.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SceneGalleryProgressInfo::release_key() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryProgressInfo.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SceneGalleryProgressInfo::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryProgressInfo.key)
}

// uint32 progress = 5;
void SceneGalleryProgressInfo::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 SceneGalleryProgressInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryProgressInfo.progress)
  return progress_;
}
void SceneGalleryProgressInfo::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryProgressInfo.progress)
}

// uint32 ui_form = 12;
void SceneGalleryProgressInfo::clear_ui_form() {
  ui_form_ = 0u;
}
::google::protobuf::uint32 SceneGalleryProgressInfo::ui_form() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryProgressInfo.ui_form)
  return ui_form_;
}
void SceneGalleryProgressInfo::set_ui_form(::google::protobuf::uint32 value) {
  
  ui_form_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryProgressInfo.ui_form)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryBounceConjuringInfo::kTotalDestroyedMachineCountFieldNumber;
const int SceneGalleryBounceConjuringInfo::kTotalScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryBounceConjuringInfo::SceneGalleryBounceConjuringInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryBounceConjuringInfo)
}
SceneGalleryBounceConjuringInfo::SceneGalleryBounceConjuringInfo(const SceneGalleryBounceConjuringInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_destroyed_machine_count_, &from.total_destroyed_machine_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_score_) -
    reinterpret_cast<char*>(&total_destroyed_machine_count_)) + sizeof(total_score_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryBounceConjuringInfo)
}

void SceneGalleryBounceConjuringInfo::SharedCtor() {
  ::memset(&total_destroyed_machine_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_score_) -
      reinterpret_cast<char*>(&total_destroyed_machine_count_)) + sizeof(total_score_));
  _cached_size_ = 0;
}

SceneGalleryBounceConjuringInfo::~SceneGalleryBounceConjuringInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryBounceConjuringInfo)
  SharedDtor();
}

void SceneGalleryBounceConjuringInfo::SharedDtor() {
}

void SceneGalleryBounceConjuringInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryBounceConjuringInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryBounceConjuringInfo& SceneGalleryBounceConjuringInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryBounceConjuringInfo* SceneGalleryBounceConjuringInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryBounceConjuringInfo* n = new SceneGalleryBounceConjuringInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryBounceConjuringInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryBounceConjuringInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_destroyed_machine_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_score_) -
      reinterpret_cast<char*>(&total_destroyed_machine_count_)) + sizeof(total_score_));
  _internal_metadata_.Clear();
}

bool SceneGalleryBounceConjuringInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryBounceConjuringInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 total_destroyed_machine_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_destroyed_machine_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryBounceConjuringInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryBounceConjuringInfo)
  return false;
#undef DO_
}

void SceneGalleryBounceConjuringInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryBounceConjuringInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_destroyed_machine_count = 4;
  if (this->total_destroyed_machine_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_destroyed_machine_count(), output);
  }

  // uint32 total_score = 6;
  if (this->total_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryBounceConjuringInfo)
}

::google::protobuf::uint8* SceneGalleryBounceConjuringInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryBounceConjuringInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_destroyed_machine_count = 4;
  if (this->total_destroyed_machine_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_destroyed_machine_count(), target);
  }

  // uint32 total_score = 6;
  if (this->total_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryBounceConjuringInfo)
  return target;
}

size_t SceneGalleryBounceConjuringInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryBounceConjuringInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 total_destroyed_machine_count = 4;
  if (this->total_destroyed_machine_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_destroyed_machine_count());
  }

  // uint32 total_score = 6;
  if (this->total_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryBounceConjuringInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryBounceConjuringInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryBounceConjuringInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryBounceConjuringInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryBounceConjuringInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryBounceConjuringInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryBounceConjuringInfo::MergeFrom(const SceneGalleryBounceConjuringInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryBounceConjuringInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_destroyed_machine_count() != 0) {
    set_total_destroyed_machine_count(from.total_destroyed_machine_count());
  }
  if (from.total_score() != 0) {
    set_total_score(from.total_score());
  }
}

void SceneGalleryBounceConjuringInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryBounceConjuringInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryBounceConjuringInfo::CopyFrom(const SceneGalleryBounceConjuringInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryBounceConjuringInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryBounceConjuringInfo::IsInitialized() const {
  return true;
}

void SceneGalleryBounceConjuringInfo::Swap(SceneGalleryBounceConjuringInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryBounceConjuringInfo::InternalSwap(SceneGalleryBounceConjuringInfo* other) {
  using std::swap;
  swap(total_destroyed_machine_count_, other->total_destroyed_machine_count_);
  swap(total_score_, other->total_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryBounceConjuringInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryBounceConjuringInfo

// uint32 total_destroyed_machine_count = 4;
void SceneGalleryBounceConjuringInfo::clear_total_destroyed_machine_count() {
  total_destroyed_machine_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBounceConjuringInfo::total_destroyed_machine_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBounceConjuringInfo.total_destroyed_machine_count)
  return total_destroyed_machine_count_;
}
void SceneGalleryBounceConjuringInfo::set_total_destroyed_machine_count(::google::protobuf::uint32 value) {
  
  total_destroyed_machine_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBounceConjuringInfo.total_destroyed_machine_count)
}

// uint32 total_score = 6;
void SceneGalleryBounceConjuringInfo::clear_total_score() {
  total_score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBounceConjuringInfo::total_score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBounceConjuringInfo.total_score)
  return total_score_;
}
void SceneGalleryBounceConjuringInfo::set_total_score(::google::protobuf::uint32 value) {
  
  total_score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBounceConjuringInfo.total_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryHandballInfo::kBallPlaceInfoFieldNumber;
const int SceneGalleryHandballInfo::kIsHaveBallFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryHandballInfo::SceneGalleryHandballInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryHandballInfo)
}
SceneGalleryHandballInfo::SceneGalleryHandballInfo(const SceneGalleryHandballInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ball_place_info()) {
    ball_place_info_ = new ::proto::PlaceInfo(*from.ball_place_info_);
  } else {
    ball_place_info_ = NULL;
  }
  is_have_ball_ = from.is_have_ball_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryHandballInfo)
}

void SceneGalleryHandballInfo::SharedCtor() {
  ::memset(&ball_place_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_have_ball_) -
      reinterpret_cast<char*>(&ball_place_info_)) + sizeof(is_have_ball_));
  _cached_size_ = 0;
}

SceneGalleryHandballInfo::~SceneGalleryHandballInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryHandballInfo)
  SharedDtor();
}

void SceneGalleryHandballInfo::SharedDtor() {
  if (this != internal_default_instance()) delete ball_place_info_;
}

void SceneGalleryHandballInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryHandballInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryHandballInfo& SceneGalleryHandballInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryHandballInfo* SceneGalleryHandballInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryHandballInfo* n = new SceneGalleryHandballInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryHandballInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryHandballInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ball_place_info_ != NULL) {
    delete ball_place_info_;
  }
  ball_place_info_ = NULL;
  is_have_ball_ = false;
  _internal_metadata_.Clear();
}

bool SceneGalleryHandballInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryHandballInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.PlaceInfo ball_place_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ball_place_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_have_ball = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_have_ball_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryHandballInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryHandballInfo)
  return false;
#undef DO_
}

void SceneGalleryHandballInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryHandballInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlaceInfo ball_place_info = 9;
  if (this->has_ball_place_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->ball_place_info_, output);
  }

  // bool is_have_ball = 15;
  if (this->is_have_ball() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_have_ball(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryHandballInfo)
}

::google::protobuf::uint8* SceneGalleryHandballInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryHandballInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlaceInfo ball_place_info = 9;
  if (this->has_ball_place_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->ball_place_info_, deterministic, target);
  }

  // bool is_have_ball = 15;
  if (this->is_have_ball() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_have_ball(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryHandballInfo)
  return target;
}

size_t SceneGalleryHandballInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryHandballInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.PlaceInfo ball_place_info = 9;
  if (this->has_ball_place_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ball_place_info_);
  }

  // bool is_have_ball = 15;
  if (this->is_have_ball() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryHandballInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryHandballInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryHandballInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryHandballInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryHandballInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryHandballInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryHandballInfo::MergeFrom(const SceneGalleryHandballInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryHandballInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ball_place_info()) {
    mutable_ball_place_info()->::proto::PlaceInfo::MergeFrom(from.ball_place_info());
  }
  if (from.is_have_ball() != 0) {
    set_is_have_ball(from.is_have_ball());
  }
}

void SceneGalleryHandballInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryHandballInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryHandballInfo::CopyFrom(const SceneGalleryHandballInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryHandballInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryHandballInfo::IsInitialized() const {
  return true;
}

void SceneGalleryHandballInfo::Swap(SceneGalleryHandballInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryHandballInfo::InternalSwap(SceneGalleryHandballInfo* other) {
  using std::swap;
  swap(ball_place_info_, other->ball_place_info_);
  swap(is_have_ball_, other->is_have_ball_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryHandballInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryHandballInfo

// .proto.PlaceInfo ball_place_info = 9;
bool SceneGalleryHandballInfo::has_ball_place_info() const {
  return this != internal_default_instance() && ball_place_info_ != NULL;
}
void SceneGalleryHandballInfo::clear_ball_place_info() {
  if (GetArenaNoVirtual() == NULL && ball_place_info_ != NULL) delete ball_place_info_;
  ball_place_info_ = NULL;
}
const ::proto::PlaceInfo& SceneGalleryHandballInfo::ball_place_info() const {
  const ::proto::PlaceInfo* p = ball_place_info_;
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHandballInfo.ball_place_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::PlaceInfo*>(
      &::proto::_PlaceInfo_default_instance_);
}
::proto::PlaceInfo* SceneGalleryHandballInfo::mutable_ball_place_info() {
  
  if (ball_place_info_ == NULL) {
    ball_place_info_ = new ::proto::PlaceInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryHandballInfo.ball_place_info)
  return ball_place_info_;
}
::proto::PlaceInfo* SceneGalleryHandballInfo::release_ball_place_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryHandballInfo.ball_place_info)
  
  ::proto::PlaceInfo* temp = ball_place_info_;
  ball_place_info_ = NULL;
  return temp;
}
void SceneGalleryHandballInfo::set_allocated_ball_place_info(::proto::PlaceInfo* ball_place_info) {
  delete ball_place_info_;
  ball_place_info_ = ball_place_info;
  if (ball_place_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryHandballInfo.ball_place_info)
}

// bool is_have_ball = 15;
void SceneGalleryHandballInfo::clear_is_have_ball() {
  is_have_ball_ = false;
}
bool SceneGalleryHandballInfo::is_have_ball() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHandballInfo.is_have_ball)
  return is_have_ball_;
}
void SceneGalleryHandballInfo::set_is_have_ball(bool value) {
  
  is_have_ball_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryHandballInfo.is_have_ball)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGallerySumoInfo::kScoreFieldNumber;
const int SceneGallerySumoInfo::kKillNormalMosnterNumFieldNumber;
const int SceneGallerySumoInfo::kKillEliteMonsterNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGallerySumoInfo::SceneGallerySumoInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGallerySumoInfo)
}
SceneGallerySumoInfo::SceneGallerySumoInfo(const SceneGallerySumoInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kill_normal_mosnter_num_, &from.kill_normal_mosnter_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_elite_monster_num_) -
    reinterpret_cast<char*>(&kill_normal_mosnter_num_)) + sizeof(kill_elite_monster_num_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGallerySumoInfo)
}

void SceneGallerySumoInfo::SharedCtor() {
  ::memset(&kill_normal_mosnter_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_elite_monster_num_) -
      reinterpret_cast<char*>(&kill_normal_mosnter_num_)) + sizeof(kill_elite_monster_num_));
  _cached_size_ = 0;
}

SceneGallerySumoInfo::~SceneGallerySumoInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGallerySumoInfo)
  SharedDtor();
}

void SceneGallerySumoInfo::SharedDtor() {
}

void SceneGallerySumoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGallerySumoInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGallerySumoInfo& SceneGallerySumoInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGallerySumoInfo* SceneGallerySumoInfo::New(::google::protobuf::Arena* arena) const {
  SceneGallerySumoInfo* n = new SceneGallerySumoInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGallerySumoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGallerySumoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kill_normal_mosnter_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_elite_monster_num_) -
      reinterpret_cast<char*>(&kill_normal_mosnter_num_)) + sizeof(kill_elite_monster_num_));
  _internal_metadata_.Clear();
}

bool SceneGallerySumoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGallerySumoInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_elite_monster_num = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_elite_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_normal_mosnter_num = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_normal_mosnter_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGallerySumoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGallerySumoInfo)
  return false;
#undef DO_
}

void SceneGallerySumoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGallerySumoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 2;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // uint32 kill_elite_monster_num = 14;
  if (this->kill_elite_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->kill_elite_monster_num(), output);
  }

  // uint32 kill_normal_mosnter_num = 15;
  if (this->kill_normal_mosnter_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->kill_normal_mosnter_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGallerySumoInfo)
}

::google::protobuf::uint8* SceneGallerySumoInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGallerySumoInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 2;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // uint32 kill_elite_monster_num = 14;
  if (this->kill_elite_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->kill_elite_monster_num(), target);
  }

  // uint32 kill_normal_mosnter_num = 15;
  if (this->kill_normal_mosnter_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->kill_normal_mosnter_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGallerySumoInfo)
  return target;
}

size_t SceneGallerySumoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGallerySumoInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 kill_normal_mosnter_num = 15;
  if (this->kill_normal_mosnter_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_normal_mosnter_num());
  }

  // uint32 score = 2;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 kill_elite_monster_num = 14;
  if (this->kill_elite_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_elite_monster_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGallerySumoInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGallerySumoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGallerySumoInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGallerySumoInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGallerySumoInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGallerySumoInfo)
    MergeFrom(*source);
  }
}

void SceneGallerySumoInfo::MergeFrom(const SceneGallerySumoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGallerySumoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kill_normal_mosnter_num() != 0) {
    set_kill_normal_mosnter_num(from.kill_normal_mosnter_num());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.kill_elite_monster_num() != 0) {
    set_kill_elite_monster_num(from.kill_elite_monster_num());
  }
}

void SceneGallerySumoInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGallerySumoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGallerySumoInfo::CopyFrom(const SceneGallerySumoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGallerySumoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGallerySumoInfo::IsInitialized() const {
  return true;
}

void SceneGallerySumoInfo::Swap(SceneGallerySumoInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGallerySumoInfo::InternalSwap(SceneGallerySumoInfo* other) {
  using std::swap;
  swap(kill_normal_mosnter_num_, other->kill_normal_mosnter_num_);
  swap(score_, other->score_);
  swap(kill_elite_monster_num_, other->kill_elite_monster_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGallerySumoInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGallerySumoInfo

// uint32 score = 2;
void SceneGallerySumoInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGallerySumoInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySumoInfo.score)
  return score_;
}
void SceneGallerySumoInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySumoInfo.score)
}

// uint32 kill_normal_mosnter_num = 15;
void SceneGallerySumoInfo::clear_kill_normal_mosnter_num() {
  kill_normal_mosnter_num_ = 0u;
}
::google::protobuf::uint32 SceneGallerySumoInfo::kill_normal_mosnter_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySumoInfo.kill_normal_mosnter_num)
  return kill_normal_mosnter_num_;
}
void SceneGallerySumoInfo::set_kill_normal_mosnter_num(::google::protobuf::uint32 value) {
  
  kill_normal_mosnter_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySumoInfo.kill_normal_mosnter_num)
}

// uint32 kill_elite_monster_num = 14;
void SceneGallerySumoInfo::clear_kill_elite_monster_num() {
  kill_elite_monster_num_ = 0u;
}
::google::protobuf::uint32 SceneGallerySumoInfo::kill_elite_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySumoInfo.kill_elite_monster_num)
  return kill_elite_monster_num_;
}
void SceneGallerySumoInfo::set_kill_elite_monster_num(::google::protobuf::uint32 value) {
  
  kill_elite_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySumoInfo.kill_elite_monster_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGallerySalvagePreventInfo::kMonsterCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGallerySalvagePreventInfo::SceneGallerySalvagePreventInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGallerySalvagePreventInfo)
}
SceneGallerySalvagePreventInfo::SceneGallerySalvagePreventInfo(const SceneGallerySalvagePreventInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  monster_count_ = from.monster_count_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGallerySalvagePreventInfo)
}

void SceneGallerySalvagePreventInfo::SharedCtor() {
  monster_count_ = 0u;
  _cached_size_ = 0;
}

SceneGallerySalvagePreventInfo::~SceneGallerySalvagePreventInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGallerySalvagePreventInfo)
  SharedDtor();
}

void SceneGallerySalvagePreventInfo::SharedDtor() {
}

void SceneGallerySalvagePreventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGallerySalvagePreventInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGallerySalvagePreventInfo& SceneGallerySalvagePreventInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGallerySalvagePreventInfo* SceneGallerySalvagePreventInfo::New(::google::protobuf::Arena* arena) const {
  SceneGallerySalvagePreventInfo* n = new SceneGallerySalvagePreventInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGallerySalvagePreventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGallerySalvagePreventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_count_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGallerySalvagePreventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGallerySalvagePreventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 monster_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGallerySalvagePreventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGallerySalvagePreventInfo)
  return false;
#undef DO_
}

void SceneGallerySalvagePreventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGallerySalvagePreventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_count = 7;
  if (this->monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->monster_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGallerySalvagePreventInfo)
}

::google::protobuf::uint8* SceneGallerySalvagePreventInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGallerySalvagePreventInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_count = 7;
  if (this->monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->monster_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGallerySalvagePreventInfo)
  return target;
}

size_t SceneGallerySalvagePreventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGallerySalvagePreventInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 monster_count = 7;
  if (this->monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGallerySalvagePreventInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGallerySalvagePreventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGallerySalvagePreventInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGallerySalvagePreventInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGallerySalvagePreventInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGallerySalvagePreventInfo)
    MergeFrom(*source);
  }
}

void SceneGallerySalvagePreventInfo::MergeFrom(const SceneGallerySalvagePreventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGallerySalvagePreventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monster_count() != 0) {
    set_monster_count(from.monster_count());
  }
}

void SceneGallerySalvagePreventInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGallerySalvagePreventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGallerySalvagePreventInfo::CopyFrom(const SceneGallerySalvagePreventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGallerySalvagePreventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGallerySalvagePreventInfo::IsInitialized() const {
  return true;
}

void SceneGallerySalvagePreventInfo::Swap(SceneGallerySalvagePreventInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGallerySalvagePreventInfo::InternalSwap(SceneGallerySalvagePreventInfo* other) {
  using std::swap;
  swap(monster_count_, other->monster_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGallerySalvagePreventInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGallerySalvagePreventInfo

// uint32 monster_count = 7;
void SceneGallerySalvagePreventInfo::clear_monster_count() {
  monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGallerySalvagePreventInfo::monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySalvagePreventInfo.monster_count)
  return monster_count_;
}
void SceneGallerySalvagePreventInfo::set_monster_count(::google::protobuf::uint32 value) {
  
  monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySalvagePreventInfo.monster_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGallerySalvageEscortInfo::kMaxBoxCountFieldNumber;
const int SceneGallerySalvageEscortInfo::kMaxMonsterCountFieldNumber;
const int SceneGallerySalvageEscortInfo::kBoxCountFieldNumber;
const int SceneGallerySalvageEscortInfo::kMonsterCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGallerySalvageEscortInfo::SceneGallerySalvageEscortInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGallerySalvageEscortInfo)
}
SceneGallerySalvageEscortInfo::SceneGallerySalvageEscortInfo(const SceneGallerySalvageEscortInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_monster_count_, &from.max_monster_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_box_count_) -
    reinterpret_cast<char*>(&max_monster_count_)) + sizeof(max_box_count_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGallerySalvageEscortInfo)
}

void SceneGallerySalvageEscortInfo::SharedCtor() {
  ::memset(&max_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_box_count_) -
      reinterpret_cast<char*>(&max_monster_count_)) + sizeof(max_box_count_));
  _cached_size_ = 0;
}

SceneGallerySalvageEscortInfo::~SceneGallerySalvageEscortInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGallerySalvageEscortInfo)
  SharedDtor();
}

void SceneGallerySalvageEscortInfo::SharedDtor() {
}

void SceneGallerySalvageEscortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGallerySalvageEscortInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGallerySalvageEscortInfo& SceneGallerySalvageEscortInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGallerySalvageEscortInfo* SceneGallerySalvageEscortInfo::New(::google::protobuf::Arena* arena) const {
  SceneGallerySalvageEscortInfo* n = new SceneGallerySalvageEscortInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGallerySalvageEscortInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGallerySalvageEscortInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_box_count_) -
      reinterpret_cast<char*>(&max_monster_count_)) + sizeof(max_box_count_));
  _internal_metadata_.Clear();
}

bool SceneGallerySalvageEscortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGallerySalvageEscortInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_monster_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 box_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monster_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_box_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_box_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGallerySalvageEscortInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGallerySalvageEscortInfo)
  return false;
#undef DO_
}

void SceneGallerySalvageEscortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGallerySalvageEscortInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_monster_count = 3;
  if (this->max_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_monster_count(), output);
  }

  // uint32 box_count = 7;
  if (this->box_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->box_count(), output);
  }

  // uint32 monster_count = 11;
  if (this->monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->monster_count(), output);
  }

  // uint32 max_box_count = 14;
  if (this->max_box_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->max_box_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGallerySalvageEscortInfo)
}

::google::protobuf::uint8* SceneGallerySalvageEscortInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGallerySalvageEscortInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_monster_count = 3;
  if (this->max_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_monster_count(), target);
  }

  // uint32 box_count = 7;
  if (this->box_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->box_count(), target);
  }

  // uint32 monster_count = 11;
  if (this->monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->monster_count(), target);
  }

  // uint32 max_box_count = 14;
  if (this->max_box_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->max_box_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGallerySalvageEscortInfo)
  return target;
}

size_t SceneGallerySalvageEscortInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGallerySalvageEscortInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 max_monster_count = 3;
  if (this->max_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_monster_count());
  }

  // uint32 box_count = 7;
  if (this->box_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->box_count());
  }

  // uint32 monster_count = 11;
  if (this->monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_count());
  }

  // uint32 max_box_count = 14;
  if (this->max_box_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_box_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGallerySalvageEscortInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGallerySalvageEscortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGallerySalvageEscortInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGallerySalvageEscortInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGallerySalvageEscortInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGallerySalvageEscortInfo)
    MergeFrom(*source);
  }
}

void SceneGallerySalvageEscortInfo::MergeFrom(const SceneGallerySalvageEscortInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGallerySalvageEscortInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_monster_count() != 0) {
    set_max_monster_count(from.max_monster_count());
  }
  if (from.box_count() != 0) {
    set_box_count(from.box_count());
  }
  if (from.monster_count() != 0) {
    set_monster_count(from.monster_count());
  }
  if (from.max_box_count() != 0) {
    set_max_box_count(from.max_box_count());
  }
}

void SceneGallerySalvageEscortInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGallerySalvageEscortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGallerySalvageEscortInfo::CopyFrom(const SceneGallerySalvageEscortInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGallerySalvageEscortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGallerySalvageEscortInfo::IsInitialized() const {
  return true;
}

void SceneGallerySalvageEscortInfo::Swap(SceneGallerySalvageEscortInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGallerySalvageEscortInfo::InternalSwap(SceneGallerySalvageEscortInfo* other) {
  using std::swap;
  swap(max_monster_count_, other->max_monster_count_);
  swap(box_count_, other->box_count_);
  swap(monster_count_, other->monster_count_);
  swap(max_box_count_, other->max_box_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGallerySalvageEscortInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGallerySalvageEscortInfo

// uint32 max_box_count = 14;
void SceneGallerySalvageEscortInfo::clear_max_box_count() {
  max_box_count_ = 0u;
}
::google::protobuf::uint32 SceneGallerySalvageEscortInfo::max_box_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySalvageEscortInfo.max_box_count)
  return max_box_count_;
}
void SceneGallerySalvageEscortInfo::set_max_box_count(::google::protobuf::uint32 value) {
  
  max_box_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySalvageEscortInfo.max_box_count)
}

// uint32 max_monster_count = 3;
void SceneGallerySalvageEscortInfo::clear_max_monster_count() {
  max_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGallerySalvageEscortInfo::max_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySalvageEscortInfo.max_monster_count)
  return max_monster_count_;
}
void SceneGallerySalvageEscortInfo::set_max_monster_count(::google::protobuf::uint32 value) {
  
  max_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySalvageEscortInfo.max_monster_count)
}

// uint32 box_count = 7;
void SceneGallerySalvageEscortInfo::clear_box_count() {
  box_count_ = 0u;
}
::google::protobuf::uint32 SceneGallerySalvageEscortInfo::box_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySalvageEscortInfo.box_count)
  return box_count_;
}
void SceneGallerySalvageEscortInfo::set_box_count(::google::protobuf::uint32 value) {
  
  box_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySalvageEscortInfo.box_count)
}

// uint32 monster_count = 11;
void SceneGallerySalvageEscortInfo::clear_monster_count() {
  monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGallerySalvageEscortInfo::monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySalvageEscortInfo.monster_count)
  return monster_count_;
}
void SceneGallerySalvageEscortInfo::set_monster_count(::google::protobuf::uint32 value) {
  
  monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySalvageEscortInfo.monster_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryCrystalLinkInfo::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryCrystalLinkInfo::SceneGalleryCrystalLinkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryCrystalLinkInfo)
}
SceneGalleryCrystalLinkInfo::SceneGalleryCrystalLinkInfo(const SceneGalleryCrystalLinkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryCrystalLinkInfo)
}

void SceneGalleryCrystalLinkInfo::SharedCtor() {
  score_ = 0u;
  _cached_size_ = 0;
}

SceneGalleryCrystalLinkInfo::~SceneGalleryCrystalLinkInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryCrystalLinkInfo)
  SharedDtor();
}

void SceneGalleryCrystalLinkInfo::SharedDtor() {
}

void SceneGalleryCrystalLinkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryCrystalLinkInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryCrystalLinkInfo& SceneGalleryCrystalLinkInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryCrystalLinkInfo* SceneGalleryCrystalLinkInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryCrystalLinkInfo* n = new SceneGalleryCrystalLinkInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryCrystalLinkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryCrystalLinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGalleryCrystalLinkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryCrystalLinkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryCrystalLinkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryCrystalLinkInfo)
  return false;
#undef DO_
}

void SceneGalleryCrystalLinkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryCrystalLinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 10;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryCrystalLinkInfo)
}

::google::protobuf::uint8* SceneGalleryCrystalLinkInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryCrystalLinkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 10;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryCrystalLinkInfo)
  return target;
}

size_t SceneGalleryCrystalLinkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryCrystalLinkInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 score = 10;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryCrystalLinkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryCrystalLinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryCrystalLinkInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryCrystalLinkInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryCrystalLinkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryCrystalLinkInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryCrystalLinkInfo::MergeFrom(const SceneGalleryCrystalLinkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryCrystalLinkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    set_score(from.score());
  }
}

void SceneGalleryCrystalLinkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryCrystalLinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryCrystalLinkInfo::CopyFrom(const SceneGalleryCrystalLinkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryCrystalLinkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryCrystalLinkInfo::IsInitialized() const {
  return true;
}

void SceneGalleryCrystalLinkInfo::Swap(SceneGalleryCrystalLinkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryCrystalLinkInfo::InternalSwap(SceneGalleryCrystalLinkInfo* other) {
  using std::swap;
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryCrystalLinkInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryCrystalLinkInfo

// uint32 score = 10;
void SceneGalleryCrystalLinkInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryCrystalLinkInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCrystalLinkInfo.score)
  return score_;
}
void SceneGalleryCrystalLinkInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCrystalLinkInfo.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryIrodoriMasterInfo::kLevelIdFieldNumber;
const int SceneGalleryIrodoriMasterInfo::kDifficultyFieldNumber;
const int SceneGalleryIrodoriMasterInfo::kIsCgViewedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryIrodoriMasterInfo::SceneGalleryIrodoriMasterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryIrodoriMasterInfo)
}
SceneGalleryIrodoriMasterInfo::SceneGalleryIrodoriMasterInfo(const SceneGalleryIrodoriMasterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&difficulty_, &from.difficulty_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_id_) -
    reinterpret_cast<char*>(&difficulty_)) + sizeof(level_id_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryIrodoriMasterInfo)
}

void SceneGalleryIrodoriMasterInfo::SharedCtor() {
  ::memset(&difficulty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&difficulty_)) + sizeof(level_id_));
  _cached_size_ = 0;
}

SceneGalleryIrodoriMasterInfo::~SceneGalleryIrodoriMasterInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryIrodoriMasterInfo)
  SharedDtor();
}

void SceneGalleryIrodoriMasterInfo::SharedDtor() {
}

void SceneGalleryIrodoriMasterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryIrodoriMasterInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryIrodoriMasterInfo& SceneGalleryIrodoriMasterInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryIrodoriMasterInfo* SceneGalleryIrodoriMasterInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryIrodoriMasterInfo* n = new SceneGalleryIrodoriMasterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryIrodoriMasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryIrodoriMasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&difficulty_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_id_) -
      reinterpret_cast<char*>(&difficulty_)) + sizeof(level_id_));
  _internal_metadata_.Clear();
}

bool SceneGalleryIrodoriMasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryIrodoriMasterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 difficulty = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_cg_viewed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_cg_viewed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryIrodoriMasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryIrodoriMasterInfo)
  return false;
#undef DO_
}

void SceneGalleryIrodoriMasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryIrodoriMasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->difficulty(), output);
  }

  // bool is_cg_viewed = 5;
  if (this->is_cg_viewed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_cg_viewed(), output);
  }

  // uint32 level_id = 8;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryIrodoriMasterInfo)
}

::google::protobuf::uint8* SceneGalleryIrodoriMasterInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryIrodoriMasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->difficulty(), target);
  }

  // bool is_cg_viewed = 5;
  if (this->is_cg_viewed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_cg_viewed(), target);
  }

  // uint32 level_id = 8;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryIrodoriMasterInfo)
  return target;
}

size_t SceneGalleryIrodoriMasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryIrodoriMasterInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 difficulty = 1;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  // bool is_cg_viewed = 5;
  if (this->is_cg_viewed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 level_id = 8;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryIrodoriMasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryIrodoriMasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryIrodoriMasterInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryIrodoriMasterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryIrodoriMasterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryIrodoriMasterInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryIrodoriMasterInfo::MergeFrom(const SceneGalleryIrodoriMasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryIrodoriMasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.is_cg_viewed() != 0) {
    set_is_cg_viewed(from.is_cg_viewed());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
}

void SceneGalleryIrodoriMasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryIrodoriMasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryIrodoriMasterInfo::CopyFrom(const SceneGalleryIrodoriMasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryIrodoriMasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryIrodoriMasterInfo::IsInitialized() const {
  return true;
}

void SceneGalleryIrodoriMasterInfo::Swap(SceneGalleryIrodoriMasterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryIrodoriMasterInfo::InternalSwap(SceneGalleryIrodoriMasterInfo* other) {
  using std::swap;
  swap(difficulty_, other->difficulty_);
  swap(is_cg_viewed_, other->is_cg_viewed_);
  swap(level_id_, other->level_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryIrodoriMasterInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryIrodoriMasterInfo

// uint32 level_id = 8;
void SceneGalleryIrodoriMasterInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIrodoriMasterInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIrodoriMasterInfo.level_id)
  return level_id_;
}
void SceneGalleryIrodoriMasterInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIrodoriMasterInfo.level_id)
}

// uint32 difficulty = 1;
void SceneGalleryIrodoriMasterInfo::clear_difficulty() {
  difficulty_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIrodoriMasterInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIrodoriMasterInfo.difficulty)
  return difficulty_;
}
void SceneGalleryIrodoriMasterInfo::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIrodoriMasterInfo.difficulty)
}

// bool is_cg_viewed = 5;
void SceneGalleryIrodoriMasterInfo::clear_is_cg_viewed() {
  is_cg_viewed_ = false;
}
bool SceneGalleryIrodoriMasterInfo::is_cg_viewed() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIrodoriMasterInfo.is_cg_viewed)
  return is_cg_viewed_;
}
void SceneGalleryIrodoriMasterInfo::set_is_cg_viewed(bool value) {
  
  is_cg_viewed_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIrodoriMasterInfo.is_cg_viewed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryHomeBalloonInfo::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryHomeBalloonInfo::SceneGalleryHomeBalloonInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryHomeBalloonInfo)
}
SceneGalleryHomeBalloonInfo::SceneGalleryHomeBalloonInfo(const SceneGalleryHomeBalloonInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryHomeBalloonInfo)
}

void SceneGalleryHomeBalloonInfo::SharedCtor() {
  score_ = 0u;
  _cached_size_ = 0;
}

SceneGalleryHomeBalloonInfo::~SceneGalleryHomeBalloonInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryHomeBalloonInfo)
  SharedDtor();
}

void SceneGalleryHomeBalloonInfo::SharedDtor() {
}

void SceneGalleryHomeBalloonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryHomeBalloonInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryHomeBalloonInfo& SceneGalleryHomeBalloonInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryHomeBalloonInfo* SceneGalleryHomeBalloonInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryHomeBalloonInfo* n = new SceneGalleryHomeBalloonInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryHomeBalloonInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryHomeBalloonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGalleryHomeBalloonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryHomeBalloonInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryHomeBalloonInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryHomeBalloonInfo)
  return false;
#undef DO_
}

void SceneGalleryHomeBalloonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryHomeBalloonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 7;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryHomeBalloonInfo)
}

::google::protobuf::uint8* SceneGalleryHomeBalloonInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryHomeBalloonInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 7;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryHomeBalloonInfo)
  return target;
}

size_t SceneGalleryHomeBalloonInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryHomeBalloonInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 score = 7;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryHomeBalloonInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryHomeBalloonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryHomeBalloonInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryHomeBalloonInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryHomeBalloonInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryHomeBalloonInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryHomeBalloonInfo::MergeFrom(const SceneGalleryHomeBalloonInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryHomeBalloonInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    set_score(from.score());
  }
}

void SceneGalleryHomeBalloonInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryHomeBalloonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryHomeBalloonInfo::CopyFrom(const SceneGalleryHomeBalloonInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryHomeBalloonInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryHomeBalloonInfo::IsInitialized() const {
  return true;
}

void SceneGalleryHomeBalloonInfo::Swap(SceneGalleryHomeBalloonInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryHomeBalloonInfo::InternalSwap(SceneGalleryHomeBalloonInfo* other) {
  using std::swap;
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryHomeBalloonInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryHomeBalloonInfo

// uint32 score = 7;
void SceneGalleryHomeBalloonInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryHomeBalloonInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHomeBalloonInfo.score)
  return score_;
}
void SceneGalleryHomeBalloonInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryHomeBalloonInfo.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryLuminanceStoneChallengeInfo::kKillMonsterCountFieldNumber;
const int SceneGalleryLuminanceStoneChallengeInfo::kScoreFieldNumber;
const int SceneGalleryLuminanceStoneChallengeInfo::kCleanMudCountFieldNumber;
const int SceneGalleryLuminanceStoneChallengeInfo::kKillSpecialMonsterCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryLuminanceStoneChallengeInfo::SceneGalleryLuminanceStoneChallengeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryLuminanceStoneChallengeInfo)
}
SceneGalleryLuminanceStoneChallengeInfo::SceneGalleryLuminanceStoneChallengeInfo(const SceneGalleryLuminanceStoneChallengeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&clean_mud_count_, &from.clean_mud_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_special_monster_count_) -
    reinterpret_cast<char*>(&clean_mud_count_)) + sizeof(kill_special_monster_count_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryLuminanceStoneChallengeInfo)
}

void SceneGalleryLuminanceStoneChallengeInfo::SharedCtor() {
  ::memset(&clean_mud_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_special_monster_count_) -
      reinterpret_cast<char*>(&clean_mud_count_)) + sizeof(kill_special_monster_count_));
  _cached_size_ = 0;
}

SceneGalleryLuminanceStoneChallengeInfo::~SceneGalleryLuminanceStoneChallengeInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryLuminanceStoneChallengeInfo)
  SharedDtor();
}

void SceneGalleryLuminanceStoneChallengeInfo::SharedDtor() {
}

void SceneGalleryLuminanceStoneChallengeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryLuminanceStoneChallengeInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryLuminanceStoneChallengeInfo& SceneGalleryLuminanceStoneChallengeInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryLuminanceStoneChallengeInfo* SceneGalleryLuminanceStoneChallengeInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryLuminanceStoneChallengeInfo* n = new SceneGalleryLuminanceStoneChallengeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryLuminanceStoneChallengeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&clean_mud_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_special_monster_count_) -
      reinterpret_cast<char*>(&clean_mud_count_)) + sizeof(kill_special_monster_count_));
  _internal_metadata_.Clear();
}

bool SceneGalleryLuminanceStoneChallengeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 clean_mud_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clean_mud_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_monster_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_special_monster_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_special_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryLuminanceStoneChallengeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryLuminanceStoneChallengeInfo)
  return false;
#undef DO_
}

void SceneGalleryLuminanceStoneChallengeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clean_mud_count = 2;
  if (this->clean_mud_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->clean_mud_count(), output);
  }

  // uint32 score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // uint32 kill_monster_count = 5;
  if (this->kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->kill_monster_count(), output);
  }

  // uint32 kill_special_monster_count = 6;
  if (this->kill_special_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->kill_special_monster_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryLuminanceStoneChallengeInfo)
}

::google::protobuf::uint8* SceneGalleryLuminanceStoneChallengeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clean_mud_count = 2;
  if (this->clean_mud_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->clean_mud_count(), target);
  }

  // uint32 score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // uint32 kill_monster_count = 5;
  if (this->kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->kill_monster_count(), target);
  }

  // uint32 kill_special_monster_count = 6;
  if (this->kill_special_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->kill_special_monster_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryLuminanceStoneChallengeInfo)
  return target;
}

size_t SceneGalleryLuminanceStoneChallengeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 clean_mud_count = 2;
  if (this->clean_mud_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clean_mud_count());
  }

  // uint32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 kill_monster_count = 5;
  if (this->kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_monster_count());
  }

  // uint32 kill_special_monster_count = 6;
  if (this->kill_special_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_special_monster_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryLuminanceStoneChallengeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryLuminanceStoneChallengeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryLuminanceStoneChallengeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryLuminanceStoneChallengeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryLuminanceStoneChallengeInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryLuminanceStoneChallengeInfo::MergeFrom(const SceneGalleryLuminanceStoneChallengeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clean_mud_count() != 0) {
    set_clean_mud_count(from.clean_mud_count());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.kill_monster_count() != 0) {
    set_kill_monster_count(from.kill_monster_count());
  }
  if (from.kill_special_monster_count() != 0) {
    set_kill_special_monster_count(from.kill_special_monster_count());
  }
}

void SceneGalleryLuminanceStoneChallengeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryLuminanceStoneChallengeInfo::CopyFrom(const SceneGalleryLuminanceStoneChallengeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryLuminanceStoneChallengeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryLuminanceStoneChallengeInfo::IsInitialized() const {
  return true;
}

void SceneGalleryLuminanceStoneChallengeInfo::Swap(SceneGalleryLuminanceStoneChallengeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryLuminanceStoneChallengeInfo::InternalSwap(SceneGalleryLuminanceStoneChallengeInfo* other) {
  using std::swap;
  swap(clean_mud_count_, other->clean_mud_count_);
  swap(score_, other->score_);
  swap(kill_monster_count_, other->kill_monster_count_);
  swap(kill_special_monster_count_, other->kill_special_monster_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryLuminanceStoneChallengeInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryLuminanceStoneChallengeInfo

// uint32 kill_monster_count = 5;
void SceneGalleryLuminanceStoneChallengeInfo::clear_kill_monster_count() {
  kill_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryLuminanceStoneChallengeInfo::kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryLuminanceStoneChallengeInfo.kill_monster_count)
  return kill_monster_count_;
}
void SceneGalleryLuminanceStoneChallengeInfo::set_kill_monster_count(::google::protobuf::uint32 value) {
  
  kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryLuminanceStoneChallengeInfo.kill_monster_count)
}

// uint32 score = 3;
void SceneGalleryLuminanceStoneChallengeInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryLuminanceStoneChallengeInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryLuminanceStoneChallengeInfo.score)
  return score_;
}
void SceneGalleryLuminanceStoneChallengeInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryLuminanceStoneChallengeInfo.score)
}

// uint32 clean_mud_count = 2;
void SceneGalleryLuminanceStoneChallengeInfo::clear_clean_mud_count() {
  clean_mud_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryLuminanceStoneChallengeInfo::clean_mud_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryLuminanceStoneChallengeInfo.clean_mud_count)
  return clean_mud_count_;
}
void SceneGalleryLuminanceStoneChallengeInfo::set_clean_mud_count(::google::protobuf::uint32 value) {
  
  clean_mud_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryLuminanceStoneChallengeInfo.clean_mud_count)
}

// uint32 kill_special_monster_count = 6;
void SceneGalleryLuminanceStoneChallengeInfo::clear_kill_special_monster_count() {
  kill_special_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryLuminanceStoneChallengeInfo::kill_special_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryLuminanceStoneChallengeInfo.kill_special_monster_count)
  return kill_special_monster_count_;
}
void SceneGalleryLuminanceStoneChallengeInfo::set_kill_special_monster_count(::google::protobuf::uint32 value) {
  
  kill_special_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryLuminanceStoneChallengeInfo.kill_special_monster_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry() {}
SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[38];
}
void SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry::MergeFrom(const SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryHomeSeekFurnitureInfo::kCurTideLeftNumFieldNumber;
const int SceneGalleryHomeSeekFurnitureInfo::kPlayerScoreMapFieldNumber;
const int SceneGalleryHomeSeekFurnitureInfo::kCurTideDurationTimeFieldNumber;
const int SceneGalleryHomeSeekFurnitureInfo::kCurTideTotalNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryHomeSeekFurnitureInfo)
}
SceneGalleryHomeSeekFurnitureInfo::SceneGalleryHomeSeekFurnitureInfo(const SceneGalleryHomeSeekFurnitureInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_score_map_.MergeFrom(from.player_score_map_);
  ::memcpy(&cur_tide_duration_time_, &from.cur_tide_duration_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_tide_total_num_) -
    reinterpret_cast<char*>(&cur_tide_duration_time_)) + sizeof(cur_tide_total_num_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryHomeSeekFurnitureInfo)
}

void SceneGalleryHomeSeekFurnitureInfo::SharedCtor() {
  ::memset(&cur_tide_duration_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_tide_total_num_) -
      reinterpret_cast<char*>(&cur_tide_duration_time_)) + sizeof(cur_tide_total_num_));
  _cached_size_ = 0;
}

SceneGalleryHomeSeekFurnitureInfo::~SceneGalleryHomeSeekFurnitureInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryHomeSeekFurnitureInfo)
  SharedDtor();
}

void SceneGalleryHomeSeekFurnitureInfo::SharedDtor() {
}

void SceneGalleryHomeSeekFurnitureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryHomeSeekFurnitureInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryHomeSeekFurnitureInfo& SceneGalleryHomeSeekFurnitureInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryHomeSeekFurnitureInfo* SceneGalleryHomeSeekFurnitureInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryHomeSeekFurnitureInfo* n = new SceneGalleryHomeSeekFurnitureInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryHomeSeekFurnitureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_score_map_.Clear();
  ::memset(&cur_tide_duration_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_tide_total_num_) -
      reinterpret_cast<char*>(&cur_tide_duration_time_)) + sizeof(cur_tide_total_num_));
  _internal_metadata_.Clear();
}

bool SceneGalleryHomeSeekFurnitureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cur_tide_left_num = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_tide_left_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> player_score_map = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry::Parser< ::google::protobuf::internal::MapField<
              SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&player_score_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_tide_total_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_tide_total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_tide_duration_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_tide_duration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryHomeSeekFurnitureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryHomeSeekFurnitureInfo)
  return false;
#undef DO_
}

void SceneGalleryHomeSeekFurnitureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_tide_left_num = 6;
  if (this->cur_tide_left_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_tide_left_num(), output);
  }

  // map<uint32, uint32> player_score_map = 8;
  if (!this->player_score_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->player_score_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_score_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_score_map().begin();
          it != this->player_score_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_score_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_score_map().begin();
          it != this->player_score_map().end(); ++it) {
        entry.reset(player_score_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  // uint32 cur_tide_total_num = 9;
  if (this->cur_tide_total_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cur_tide_total_num(), output);
  }

  // uint32 cur_tide_duration_time = 12;
  if (this->cur_tide_duration_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cur_tide_duration_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryHomeSeekFurnitureInfo)
}

::google::protobuf::uint8* SceneGalleryHomeSeekFurnitureInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_tide_left_num = 6;
  if (this->cur_tide_left_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_tide_left_num(), target);
  }

  // map<uint32, uint32> player_score_map = 8;
  if (!this->player_score_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->player_score_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_score_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_score_map().begin();
          it != this->player_score_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_score_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->player_score_map().begin();
          it != this->player_score_map().end(); ++it) {
        entry.reset(player_score_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 cur_tide_total_num = 9;
  if (this->cur_tide_total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cur_tide_total_num(), target);
  }

  // uint32 cur_tide_duration_time = 12;
  if (this->cur_tide_duration_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cur_tide_duration_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryHomeSeekFurnitureInfo)
  return target;
}

size_t SceneGalleryHomeSeekFurnitureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> player_score_map = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->player_score_map_size());
  {
    ::google::protobuf::scoped_ptr<SceneGalleryHomeSeekFurnitureInfo_PlayerScoreMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->player_score_map().begin();
        it != this->player_score_map().end(); ++it) {
      entry.reset(player_score_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 cur_tide_duration_time = 12;
  if (this->cur_tide_duration_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_tide_duration_time());
  }

  // uint32 cur_tide_left_num = 6;
  if (this->cur_tide_left_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_tide_left_num());
  }

  // uint32 cur_tide_total_num = 9;
  if (this->cur_tide_total_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_tide_total_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryHomeSeekFurnitureInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryHomeSeekFurnitureInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryHomeSeekFurnitureInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryHomeSeekFurnitureInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryHomeSeekFurnitureInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryHomeSeekFurnitureInfo::MergeFrom(const SceneGalleryHomeSeekFurnitureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_score_map_.MergeFrom(from.player_score_map_);
  if (from.cur_tide_duration_time() != 0) {
    set_cur_tide_duration_time(from.cur_tide_duration_time());
  }
  if (from.cur_tide_left_num() != 0) {
    set_cur_tide_left_num(from.cur_tide_left_num());
  }
  if (from.cur_tide_total_num() != 0) {
    set_cur_tide_total_num(from.cur_tide_total_num());
  }
}

void SceneGalleryHomeSeekFurnitureInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryHomeSeekFurnitureInfo::CopyFrom(const SceneGalleryHomeSeekFurnitureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryHomeSeekFurnitureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryHomeSeekFurnitureInfo::IsInitialized() const {
  return true;
}

void SceneGalleryHomeSeekFurnitureInfo::Swap(SceneGalleryHomeSeekFurnitureInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryHomeSeekFurnitureInfo::InternalSwap(SceneGalleryHomeSeekFurnitureInfo* other) {
  using std::swap;
  player_score_map_.Swap(&other->player_score_map_);
  swap(cur_tide_duration_time_, other->cur_tide_duration_time_);
  swap(cur_tide_left_num_, other->cur_tide_left_num_);
  swap(cur_tide_total_num_, other->cur_tide_total_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryHomeSeekFurnitureInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryHomeSeekFurnitureInfo

// uint32 cur_tide_left_num = 6;
void SceneGalleryHomeSeekFurnitureInfo::clear_cur_tide_left_num() {
  cur_tide_left_num_ = 0u;
}
::google::protobuf::uint32 SceneGalleryHomeSeekFurnitureInfo::cur_tide_left_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHomeSeekFurnitureInfo.cur_tide_left_num)
  return cur_tide_left_num_;
}
void SceneGalleryHomeSeekFurnitureInfo::set_cur_tide_left_num(::google::protobuf::uint32 value) {
  
  cur_tide_left_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryHomeSeekFurnitureInfo.cur_tide_left_num)
}

// map<uint32, uint32> player_score_map = 8;
int SceneGalleryHomeSeekFurnitureInfo::player_score_map_size() const {
  return player_score_map_.size();
}
void SceneGalleryHomeSeekFurnitureInfo::clear_player_score_map() {
  player_score_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
SceneGalleryHomeSeekFurnitureInfo::player_score_map() const {
  // @@protoc_insertion_point(field_map:proto.SceneGalleryHomeSeekFurnitureInfo.player_score_map)
  return player_score_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
SceneGalleryHomeSeekFurnitureInfo::mutable_player_score_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.SceneGalleryHomeSeekFurnitureInfo.player_score_map)
  return player_score_map_.MutableMap();
}

// uint32 cur_tide_duration_time = 12;
void SceneGalleryHomeSeekFurnitureInfo::clear_cur_tide_duration_time() {
  cur_tide_duration_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryHomeSeekFurnitureInfo::cur_tide_duration_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHomeSeekFurnitureInfo.cur_tide_duration_time)
  return cur_tide_duration_time_;
}
void SceneGalleryHomeSeekFurnitureInfo::set_cur_tide_duration_time(::google::protobuf::uint32 value) {
  
  cur_tide_duration_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryHomeSeekFurnitureInfo.cur_tide_duration_time)
}

// uint32 cur_tide_total_num = 9;
void SceneGalleryHomeSeekFurnitureInfo::clear_cur_tide_total_num() {
  cur_tide_total_num_ = 0u;
}
::google::protobuf::uint32 SceneGalleryHomeSeekFurnitureInfo::cur_tide_total_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryHomeSeekFurnitureInfo.cur_tide_total_num)
  return cur_tide_total_num_;
}
void SceneGalleryHomeSeekFurnitureInfo::set_cur_tide_total_num(::google::protobuf::uint32 value) {
  
  cur_tide_total_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryHomeSeekFurnitureInfo.cur_tide_total_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryIslandPartyDownHillInfo::kTotalKillMonsterCountFieldNumber;
const int SceneGalleryIslandPartyDownHillInfo::kStartSourceFieldNumber;
const int SceneGalleryIslandPartyDownHillInfo::kMaxKillMonsterCountFieldNumber;
const int SceneGalleryIslandPartyDownHillInfo::kCoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryIslandPartyDownHillInfo::SceneGalleryIslandPartyDownHillInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryIslandPartyDownHillInfo)
}
SceneGalleryIslandPartyDownHillInfo::SceneGalleryIslandPartyDownHillInfo(const SceneGalleryIslandPartyDownHillInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_kill_monster_count_, &from.max_kill_monster_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_source_) -
    reinterpret_cast<char*>(&max_kill_monster_count_)) + sizeof(start_source_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryIslandPartyDownHillInfo)
}

void SceneGalleryIslandPartyDownHillInfo::SharedCtor() {
  ::memset(&max_kill_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_source_) -
      reinterpret_cast<char*>(&max_kill_monster_count_)) + sizeof(start_source_));
  _cached_size_ = 0;
}

SceneGalleryIslandPartyDownHillInfo::~SceneGalleryIslandPartyDownHillInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryIslandPartyDownHillInfo)
  SharedDtor();
}

void SceneGalleryIslandPartyDownHillInfo::SharedDtor() {
}

void SceneGalleryIslandPartyDownHillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryIslandPartyDownHillInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryIslandPartyDownHillInfo& SceneGalleryIslandPartyDownHillInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryIslandPartyDownHillInfo* SceneGalleryIslandPartyDownHillInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryIslandPartyDownHillInfo* n = new SceneGalleryIslandPartyDownHillInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryIslandPartyDownHillInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryIslandPartyDownHillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_kill_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_source_) -
      reinterpret_cast<char*>(&max_kill_monster_count_)) + sizeof(start_source_));
  _internal_metadata_.Clear();
}

bool SceneGalleryIslandPartyDownHillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryIslandPartyDownHillInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 max_kill_monster_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_kill_monster_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStartSource start_source = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_start_source(static_cast< ::proto::GalleryStartSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryIslandPartyDownHillInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryIslandPartyDownHillInfo)
  return false;
#undef DO_
}

void SceneGalleryIslandPartyDownHillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryIslandPartyDownHillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_kill_monster_count = 5;
  if (this->max_kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->max_kill_monster_count(), output);
  }

  // uint32 coin = 13;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->coin(), output);
  }

  // uint32 total_kill_monster_count = 14;
  if (this->total_kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->total_kill_monster_count(), output);
  }

  // .proto.GalleryStartSource start_source = 15;
  if (this->start_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->start_source(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryIslandPartyDownHillInfo)
}

::google::protobuf::uint8* SceneGalleryIslandPartyDownHillInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryIslandPartyDownHillInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_kill_monster_count = 5;
  if (this->max_kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->max_kill_monster_count(), target);
  }

  // uint32 coin = 13;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->coin(), target);
  }

  // uint32 total_kill_monster_count = 14;
  if (this->total_kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->total_kill_monster_count(), target);
  }

  // .proto.GalleryStartSource start_source = 15;
  if (this->start_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->start_source(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryIslandPartyDownHillInfo)
  return target;
}

size_t SceneGalleryIslandPartyDownHillInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryIslandPartyDownHillInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 max_kill_monster_count = 5;
  if (this->max_kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_kill_monster_count());
  }

  // uint32 coin = 13;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // uint32 total_kill_monster_count = 14;
  if (this->total_kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_kill_monster_count());
  }

  // .proto.GalleryStartSource start_source = 15;
  if (this->start_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->start_source());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryIslandPartyDownHillInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryIslandPartyDownHillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryIslandPartyDownHillInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryIslandPartyDownHillInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryIslandPartyDownHillInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryIslandPartyDownHillInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryIslandPartyDownHillInfo::MergeFrom(const SceneGalleryIslandPartyDownHillInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryIslandPartyDownHillInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_kill_monster_count() != 0) {
    set_max_kill_monster_count(from.max_kill_monster_count());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.total_kill_monster_count() != 0) {
    set_total_kill_monster_count(from.total_kill_monster_count());
  }
  if (from.start_source() != 0) {
    set_start_source(from.start_source());
  }
}

void SceneGalleryIslandPartyDownHillInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryIslandPartyDownHillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryIslandPartyDownHillInfo::CopyFrom(const SceneGalleryIslandPartyDownHillInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryIslandPartyDownHillInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryIslandPartyDownHillInfo::IsInitialized() const {
  return true;
}

void SceneGalleryIslandPartyDownHillInfo::Swap(SceneGalleryIslandPartyDownHillInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryIslandPartyDownHillInfo::InternalSwap(SceneGalleryIslandPartyDownHillInfo* other) {
  using std::swap;
  swap(max_kill_monster_count_, other->max_kill_monster_count_);
  swap(coin_, other->coin_);
  swap(total_kill_monster_count_, other->total_kill_monster_count_);
  swap(start_source_, other->start_source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryIslandPartyDownHillInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryIslandPartyDownHillInfo

// uint32 total_kill_monster_count = 14;
void SceneGalleryIslandPartyDownHillInfo::clear_total_kill_monster_count() {
  total_kill_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyDownHillInfo::total_kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyDownHillInfo.total_kill_monster_count)
  return total_kill_monster_count_;
}
void SceneGalleryIslandPartyDownHillInfo::set_total_kill_monster_count(::google::protobuf::uint32 value) {
  
  total_kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyDownHillInfo.total_kill_monster_count)
}

// .proto.GalleryStartSource start_source = 15;
void SceneGalleryIslandPartyDownHillInfo::clear_start_source() {
  start_source_ = 0;
}
::proto::GalleryStartSource SceneGalleryIslandPartyDownHillInfo::start_source() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyDownHillInfo.start_source)
  return static_cast< ::proto::GalleryStartSource >(start_source_);
}
void SceneGalleryIslandPartyDownHillInfo::set_start_source(::proto::GalleryStartSource value) {
  
  start_source_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyDownHillInfo.start_source)
}

// uint32 max_kill_monster_count = 5;
void SceneGalleryIslandPartyDownHillInfo::clear_max_kill_monster_count() {
  max_kill_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyDownHillInfo::max_kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyDownHillInfo.max_kill_monster_count)
  return max_kill_monster_count_;
}
void SceneGalleryIslandPartyDownHillInfo::set_max_kill_monster_count(::google::protobuf::uint32 value) {
  
  max_kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyDownHillInfo.max_kill_monster_count)
}

// uint32 coin = 13;
void SceneGalleryIslandPartyDownHillInfo::clear_coin() {
  coin_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyDownHillInfo::coin() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyDownHillInfo.coin)
  return coin_;
}
void SceneGalleryIslandPartyDownHillInfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyDownHillInfo.coin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGallerySummerTimeV2BoatInfo::kParam1FieldNumber;
const int SceneGallerySummerTimeV2BoatInfo::kParam3FieldNumber;
const int SceneGallerySummerTimeV2BoatInfo::kUsedTimeFieldNumber;
const int SceneGallerySummerTimeV2BoatInfo::kParam2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGallerySummerTimeV2BoatInfo::SceneGallerySummerTimeV2BoatInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGallerySummerTimeV2BoatInfo)
}
SceneGallerySummerTimeV2BoatInfo::SceneGallerySummerTimeV2BoatInfo(const SceneGallerySummerTimeV2BoatInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&param3_, &from.param3_,
    static_cast<size_t>(reinterpret_cast<char*>(&param1_) -
    reinterpret_cast<char*>(&param3_)) + sizeof(param1_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGallerySummerTimeV2BoatInfo)
}

void SceneGallerySummerTimeV2BoatInfo::SharedCtor() {
  ::memset(&param3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param1_) -
      reinterpret_cast<char*>(&param3_)) + sizeof(param1_));
  _cached_size_ = 0;
}

SceneGallerySummerTimeV2BoatInfo::~SceneGallerySummerTimeV2BoatInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGallerySummerTimeV2BoatInfo)
  SharedDtor();
}

void SceneGallerySummerTimeV2BoatInfo::SharedDtor() {
}

void SceneGallerySummerTimeV2BoatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGallerySummerTimeV2BoatInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGallerySummerTimeV2BoatInfo& SceneGallerySummerTimeV2BoatInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGallerySummerTimeV2BoatInfo* SceneGallerySummerTimeV2BoatInfo::New(::google::protobuf::Arena* arena) const {
  SceneGallerySummerTimeV2BoatInfo* n = new SceneGallerySummerTimeV2BoatInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGallerySummerTimeV2BoatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGallerySummerTimeV2BoatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&param3_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param1_) -
      reinterpret_cast<char*>(&param3_)) + sizeof(param1_));
  _internal_metadata_.Clear();
}

bool SceneGallerySummerTimeV2BoatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGallerySummerTimeV2BoatInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 param3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 used_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param1 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGallerySummerTimeV2BoatInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGallerySummerTimeV2BoatInfo)
  return false;
#undef DO_
}

void SceneGallerySummerTimeV2BoatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGallerySummerTimeV2BoatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 param3 = 3;
  if (this->param3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param3(), output);
  }

  // uint32 param2 = 7;
  if (this->param2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->param2(), output);
  }

  // uint32 used_time = 11;
  if (this->used_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->used_time(), output);
  }

  // uint32 param1 = 15;
  if (this->param1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->param1(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGallerySummerTimeV2BoatInfo)
}

::google::protobuf::uint8* SceneGallerySummerTimeV2BoatInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGallerySummerTimeV2BoatInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 param3 = 3;
  if (this->param3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->param3(), target);
  }

  // uint32 param2 = 7;
  if (this->param2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->param2(), target);
  }

  // uint32 used_time = 11;
  if (this->used_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->used_time(), target);
  }

  // uint32 param1 = 15;
  if (this->param1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->param1(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGallerySummerTimeV2BoatInfo)
  return target;
}

size_t SceneGallerySummerTimeV2BoatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGallerySummerTimeV2BoatInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 param3 = 3;
  if (this->param3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param3());
  }

  // uint32 param2 = 7;
  if (this->param2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param2());
  }

  // uint32 used_time = 11;
  if (this->used_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->used_time());
  }

  // uint32 param1 = 15;
  if (this->param1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGallerySummerTimeV2BoatInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGallerySummerTimeV2BoatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGallerySummerTimeV2BoatInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGallerySummerTimeV2BoatInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGallerySummerTimeV2BoatInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGallerySummerTimeV2BoatInfo)
    MergeFrom(*source);
  }
}

void SceneGallerySummerTimeV2BoatInfo::MergeFrom(const SceneGallerySummerTimeV2BoatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGallerySummerTimeV2BoatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.param3() != 0) {
    set_param3(from.param3());
  }
  if (from.param2() != 0) {
    set_param2(from.param2());
  }
  if (from.used_time() != 0) {
    set_used_time(from.used_time());
  }
  if (from.param1() != 0) {
    set_param1(from.param1());
  }
}

void SceneGallerySummerTimeV2BoatInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGallerySummerTimeV2BoatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGallerySummerTimeV2BoatInfo::CopyFrom(const SceneGallerySummerTimeV2BoatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGallerySummerTimeV2BoatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGallerySummerTimeV2BoatInfo::IsInitialized() const {
  return true;
}

void SceneGallerySummerTimeV2BoatInfo::Swap(SceneGallerySummerTimeV2BoatInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGallerySummerTimeV2BoatInfo::InternalSwap(SceneGallerySummerTimeV2BoatInfo* other) {
  using std::swap;
  swap(param3_, other->param3_);
  swap(param2_, other->param2_);
  swap(used_time_, other->used_time_);
  swap(param1_, other->param1_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGallerySummerTimeV2BoatInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGallerySummerTimeV2BoatInfo

// uint32 param1 = 15;
void SceneGallerySummerTimeV2BoatInfo::clear_param1() {
  param1_ = 0u;
}
::google::protobuf::uint32 SceneGallerySummerTimeV2BoatInfo::param1() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySummerTimeV2BoatInfo.param1)
  return param1_;
}
void SceneGallerySummerTimeV2BoatInfo::set_param1(::google::protobuf::uint32 value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySummerTimeV2BoatInfo.param1)
}

// uint32 param3 = 3;
void SceneGallerySummerTimeV2BoatInfo::clear_param3() {
  param3_ = 0u;
}
::google::protobuf::uint32 SceneGallerySummerTimeV2BoatInfo::param3() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySummerTimeV2BoatInfo.param3)
  return param3_;
}
void SceneGallerySummerTimeV2BoatInfo::set_param3(::google::protobuf::uint32 value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySummerTimeV2BoatInfo.param3)
}

// uint32 used_time = 11;
void SceneGallerySummerTimeV2BoatInfo::clear_used_time() {
  used_time_ = 0u;
}
::google::protobuf::uint32 SceneGallerySummerTimeV2BoatInfo::used_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySummerTimeV2BoatInfo.used_time)
  return used_time_;
}
void SceneGallerySummerTimeV2BoatInfo::set_used_time(::google::protobuf::uint32 value) {
  
  used_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySummerTimeV2BoatInfo.used_time)
}

// uint32 param2 = 7;
void SceneGallerySummerTimeV2BoatInfo::clear_param2() {
  param2_ = 0u;
}
::google::protobuf::uint32 SceneGallerySummerTimeV2BoatInfo::param2() const {
  // @@protoc_insertion_point(field_get:proto.SceneGallerySummerTimeV2BoatInfo.param2)
  return param2_;
}
void SceneGallerySummerTimeV2BoatInfo::set_param2(::google::protobuf::uint32 value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGallerySummerTimeV2BoatInfo.param2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryIslandPartyRaftInfo::kCoinFieldNumber;
const int SceneGalleryIslandPartyRaftInfo::kStartSourceFieldNumber;
const int SceneGalleryIslandPartyRaftInfo::kComponentFieldNumber;
const int SceneGalleryIslandPartyRaftInfo::kFuelFieldNumber;
const int SceneGalleryIslandPartyRaftInfo::kPointIdFieldNumber;
const int SceneGalleryIslandPartyRaftInfo::kRaftEntityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryIslandPartyRaftInfo::SceneGalleryIslandPartyRaftInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryIslandPartyRaftInfo)
}
SceneGalleryIslandPartyRaftInfo::SceneGalleryIslandPartyRaftInfo(const SceneGalleryIslandPartyRaftInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&component_, &from.component_,
    static_cast<size_t>(reinterpret_cast<char*>(&fuel_) -
    reinterpret_cast<char*>(&component_)) + sizeof(fuel_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryIslandPartyRaftInfo)
}

void SceneGalleryIslandPartyRaftInfo::SharedCtor() {
  ::memset(&component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_) -
      reinterpret_cast<char*>(&component_)) + sizeof(fuel_));
  _cached_size_ = 0;
}

SceneGalleryIslandPartyRaftInfo::~SceneGalleryIslandPartyRaftInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryIslandPartyRaftInfo)
  SharedDtor();
}

void SceneGalleryIslandPartyRaftInfo::SharedDtor() {
}

void SceneGalleryIslandPartyRaftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryIslandPartyRaftInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryIslandPartyRaftInfo& SceneGalleryIslandPartyRaftInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryIslandPartyRaftInfo* SceneGalleryIslandPartyRaftInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryIslandPartyRaftInfo* n = new SceneGalleryIslandPartyRaftInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryIslandPartyRaftInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryIslandPartyRaftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&component_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fuel_) -
      reinterpret_cast<char*>(&component_)) + sizeof(fuel_));
  _internal_metadata_.Clear();
}

bool SceneGalleryIslandPartyRaftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryIslandPartyRaftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 component = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 raft_entity_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raft_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStartSource start_source = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_start_source(static_cast< ::proto::GalleryStartSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fuel = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryIslandPartyRaftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryIslandPartyRaftInfo)
  return false;
#undef DO_
}

void SceneGalleryIslandPartyRaftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryIslandPartyRaftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component = 1;
  if (this->component() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->component(), output);
  }

  // uint32 raft_entity_id = 4;
  if (this->raft_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raft_entity_id(), output);
  }

  // uint32 coin = 6;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->coin(), output);
  }

  // .proto.GalleryStartSource start_source = 7;
  if (this->start_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->start_source(), output);
  }

  // uint32 point_id = 12;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->point_id(), output);
  }

  // uint32 fuel = 15;
  if (this->fuel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fuel(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryIslandPartyRaftInfo)
}

::google::protobuf::uint8* SceneGalleryIslandPartyRaftInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryIslandPartyRaftInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 component = 1;
  if (this->component() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->component(), target);
  }

  // uint32 raft_entity_id = 4;
  if (this->raft_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raft_entity_id(), target);
  }

  // uint32 coin = 6;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->coin(), target);
  }

  // .proto.GalleryStartSource start_source = 7;
  if (this->start_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->start_source(), target);
  }

  // uint32 point_id = 12;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->point_id(), target);
  }

  // uint32 fuel = 15;
  if (this->fuel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fuel(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryIslandPartyRaftInfo)
  return target;
}

size_t SceneGalleryIslandPartyRaftInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryIslandPartyRaftInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 component = 1;
  if (this->component() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->component());
  }

  // uint32 raft_entity_id = 4;
  if (this->raft_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->raft_entity_id());
  }

  // uint32 coin = 6;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // .proto.GalleryStartSource start_source = 7;
  if (this->start_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->start_source());
  }

  // uint32 point_id = 12;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 fuel = 15;
  if (this->fuel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fuel());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryIslandPartyRaftInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryIslandPartyRaftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryIslandPartyRaftInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryIslandPartyRaftInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryIslandPartyRaftInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryIslandPartyRaftInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryIslandPartyRaftInfo::MergeFrom(const SceneGalleryIslandPartyRaftInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryIslandPartyRaftInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.component() != 0) {
    set_component(from.component());
  }
  if (from.raft_entity_id() != 0) {
    set_raft_entity_id(from.raft_entity_id());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.start_source() != 0) {
    set_start_source(from.start_source());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.fuel() != 0) {
    set_fuel(from.fuel());
  }
}

void SceneGalleryIslandPartyRaftInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryIslandPartyRaftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryIslandPartyRaftInfo::CopyFrom(const SceneGalleryIslandPartyRaftInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryIslandPartyRaftInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryIslandPartyRaftInfo::IsInitialized() const {
  return true;
}

void SceneGalleryIslandPartyRaftInfo::Swap(SceneGalleryIslandPartyRaftInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryIslandPartyRaftInfo::InternalSwap(SceneGalleryIslandPartyRaftInfo* other) {
  using std::swap;
  swap(component_, other->component_);
  swap(raft_entity_id_, other->raft_entity_id_);
  swap(coin_, other->coin_);
  swap(start_source_, other->start_source_);
  swap(point_id_, other->point_id_);
  swap(fuel_, other->fuel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryIslandPartyRaftInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryIslandPartyRaftInfo

// uint32 coin = 6;
void SceneGalleryIslandPartyRaftInfo::clear_coin() {
  coin_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyRaftInfo::coin() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyRaftInfo.coin)
  return coin_;
}
void SceneGalleryIslandPartyRaftInfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyRaftInfo.coin)
}

// .proto.GalleryStartSource start_source = 7;
void SceneGalleryIslandPartyRaftInfo::clear_start_source() {
  start_source_ = 0;
}
::proto::GalleryStartSource SceneGalleryIslandPartyRaftInfo::start_source() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyRaftInfo.start_source)
  return static_cast< ::proto::GalleryStartSource >(start_source_);
}
void SceneGalleryIslandPartyRaftInfo::set_start_source(::proto::GalleryStartSource value) {
  
  start_source_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyRaftInfo.start_source)
}

// uint32 component = 1;
void SceneGalleryIslandPartyRaftInfo::clear_component() {
  component_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyRaftInfo::component() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyRaftInfo.component)
  return component_;
}
void SceneGalleryIslandPartyRaftInfo::set_component(::google::protobuf::uint32 value) {
  
  component_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyRaftInfo.component)
}

// uint32 fuel = 15;
void SceneGalleryIslandPartyRaftInfo::clear_fuel() {
  fuel_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyRaftInfo::fuel() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyRaftInfo.fuel)
  return fuel_;
}
void SceneGalleryIslandPartyRaftInfo::set_fuel(::google::protobuf::uint32 value) {
  
  fuel_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyRaftInfo.fuel)
}

// uint32 point_id = 12;
void SceneGalleryIslandPartyRaftInfo::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyRaftInfo::point_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyRaftInfo.point_id)
  return point_id_;
}
void SceneGalleryIslandPartyRaftInfo::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyRaftInfo.point_id)
}

// uint32 raft_entity_id = 4;
void SceneGalleryIslandPartyRaftInfo::clear_raft_entity_id() {
  raft_entity_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartyRaftInfo::raft_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartyRaftInfo.raft_entity_id)
  return raft_entity_id_;
}
void SceneGalleryIslandPartyRaftInfo::set_raft_entity_id(::google::protobuf::uint32 value) {
  
  raft_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartyRaftInfo.raft_entity_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryIslandPartySailInfo::kMaxCleanProgressFieldNumber;
const int SceneGalleryIslandPartySailInfo::kCleanProgressFieldNumber;
const int SceneGalleryIslandPartySailInfo::kStartSourceFieldNumber;
const int SceneGalleryIslandPartySailInfo::kKillProgressFieldNumber;
const int SceneGalleryIslandPartySailInfo::kCoinFieldNumber;
const int SceneGalleryIslandPartySailInfo::kStageFieldNumber;
const int SceneGalleryIslandPartySailInfo::kMaxKillProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryIslandPartySailInfo::SceneGalleryIslandPartySailInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryIslandPartySailInfo)
}
SceneGalleryIslandPartySailInfo::SceneGalleryIslandPartySailInfo(const SceneGalleryIslandPartySailInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_source_, &from.start_source_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_clean_progress_) -
    reinterpret_cast<char*>(&start_source_)) + sizeof(max_clean_progress_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryIslandPartySailInfo)
}

void SceneGalleryIslandPartySailInfo::SharedCtor() {
  ::memset(&start_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_clean_progress_) -
      reinterpret_cast<char*>(&start_source_)) + sizeof(max_clean_progress_));
  _cached_size_ = 0;
}

SceneGalleryIslandPartySailInfo::~SceneGalleryIslandPartySailInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryIslandPartySailInfo)
  SharedDtor();
}

void SceneGalleryIslandPartySailInfo::SharedDtor() {
}

void SceneGalleryIslandPartySailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryIslandPartySailInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryIslandPartySailInfo& SceneGalleryIslandPartySailInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryIslandPartySailInfo* SceneGalleryIslandPartySailInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryIslandPartySailInfo* n = new SceneGalleryIslandPartySailInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryIslandPartySailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryIslandPartySailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_clean_progress_) -
      reinterpret_cast<char*>(&start_source_)) + sizeof(max_clean_progress_));
  _internal_metadata_.Clear();
}

bool SceneGalleryIslandPartySailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryIslandPartySailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GalleryStartSource start_source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_start_source(static_cast< ::proto::GalleryStartSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_kill_progress = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_kill_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 clean_progress = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clean_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_progress = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.IslandPartySailStage stage = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage(static_cast< ::proto::IslandPartySailStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_clean_progress = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_clean_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryIslandPartySailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryIslandPartySailInfo)
  return false;
#undef DO_
}

void SceneGalleryIslandPartySailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryIslandPartySailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GalleryStartSource start_source = 1;
  if (this->start_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->start_source(), output);
  }

  // uint32 max_kill_progress = 8;
  if (this->max_kill_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_kill_progress(), output);
  }

  // uint32 clean_progress = 10;
  if (this->clean_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->clean_progress(), output);
  }

  // uint32 kill_progress = 11;
  if (this->kill_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->kill_progress(), output);
  }

  // .proto.IslandPartySailStage stage = 12;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->stage(), output);
  }

  // uint32 max_clean_progress = 14;
  if (this->max_clean_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->max_clean_progress(), output);
  }

  // uint32 coin = 15;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->coin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryIslandPartySailInfo)
}

::google::protobuf::uint8* SceneGalleryIslandPartySailInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryIslandPartySailInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GalleryStartSource start_source = 1;
  if (this->start_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->start_source(), target);
  }

  // uint32 max_kill_progress = 8;
  if (this->max_kill_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_kill_progress(), target);
  }

  // uint32 clean_progress = 10;
  if (this->clean_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->clean_progress(), target);
  }

  // uint32 kill_progress = 11;
  if (this->kill_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->kill_progress(), target);
  }

  // .proto.IslandPartySailStage stage = 12;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->stage(), target);
  }

  // uint32 max_clean_progress = 14;
  if (this->max_clean_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->max_clean_progress(), target);
  }

  // uint32 coin = 15;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->coin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryIslandPartySailInfo)
  return target;
}

size_t SceneGalleryIslandPartySailInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryIslandPartySailInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GalleryStartSource start_source = 1;
  if (this->start_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->start_source());
  }

  // uint32 max_kill_progress = 8;
  if (this->max_kill_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_kill_progress());
  }

  // uint32 coin = 15;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // uint32 clean_progress = 10;
  if (this->clean_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clean_progress());
  }

  // uint32 kill_progress = 11;
  if (this->kill_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_progress());
  }

  // .proto.IslandPartySailStage stage = 12;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  // uint32 max_clean_progress = 14;
  if (this->max_clean_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_clean_progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryIslandPartySailInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryIslandPartySailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryIslandPartySailInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryIslandPartySailInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryIslandPartySailInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryIslandPartySailInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryIslandPartySailInfo::MergeFrom(const SceneGalleryIslandPartySailInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryIslandPartySailInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_source() != 0) {
    set_start_source(from.start_source());
  }
  if (from.max_kill_progress() != 0) {
    set_max_kill_progress(from.max_kill_progress());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.clean_progress() != 0) {
    set_clean_progress(from.clean_progress());
  }
  if (from.kill_progress() != 0) {
    set_kill_progress(from.kill_progress());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.max_clean_progress() != 0) {
    set_max_clean_progress(from.max_clean_progress());
  }
}

void SceneGalleryIslandPartySailInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryIslandPartySailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryIslandPartySailInfo::CopyFrom(const SceneGalleryIslandPartySailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryIslandPartySailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryIslandPartySailInfo::IsInitialized() const {
  return true;
}

void SceneGalleryIslandPartySailInfo::Swap(SceneGalleryIslandPartySailInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryIslandPartySailInfo::InternalSwap(SceneGalleryIslandPartySailInfo* other) {
  using std::swap;
  swap(start_source_, other->start_source_);
  swap(max_kill_progress_, other->max_kill_progress_);
  swap(coin_, other->coin_);
  swap(clean_progress_, other->clean_progress_);
  swap(kill_progress_, other->kill_progress_);
  swap(stage_, other->stage_);
  swap(max_clean_progress_, other->max_clean_progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryIslandPartySailInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryIslandPartySailInfo

// uint32 max_clean_progress = 14;
void SceneGalleryIslandPartySailInfo::clear_max_clean_progress() {
  max_clean_progress_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartySailInfo::max_clean_progress() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartySailInfo.max_clean_progress)
  return max_clean_progress_;
}
void SceneGalleryIslandPartySailInfo::set_max_clean_progress(::google::protobuf::uint32 value) {
  
  max_clean_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartySailInfo.max_clean_progress)
}

// uint32 clean_progress = 10;
void SceneGalleryIslandPartySailInfo::clear_clean_progress() {
  clean_progress_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartySailInfo::clean_progress() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartySailInfo.clean_progress)
  return clean_progress_;
}
void SceneGalleryIslandPartySailInfo::set_clean_progress(::google::protobuf::uint32 value) {
  
  clean_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartySailInfo.clean_progress)
}

// .proto.GalleryStartSource start_source = 1;
void SceneGalleryIslandPartySailInfo::clear_start_source() {
  start_source_ = 0;
}
::proto::GalleryStartSource SceneGalleryIslandPartySailInfo::start_source() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartySailInfo.start_source)
  return static_cast< ::proto::GalleryStartSource >(start_source_);
}
void SceneGalleryIslandPartySailInfo::set_start_source(::proto::GalleryStartSource value) {
  
  start_source_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartySailInfo.start_source)
}

// uint32 kill_progress = 11;
void SceneGalleryIslandPartySailInfo::clear_kill_progress() {
  kill_progress_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartySailInfo::kill_progress() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartySailInfo.kill_progress)
  return kill_progress_;
}
void SceneGalleryIslandPartySailInfo::set_kill_progress(::google::protobuf::uint32 value) {
  
  kill_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartySailInfo.kill_progress)
}

// uint32 coin = 15;
void SceneGalleryIslandPartySailInfo::clear_coin() {
  coin_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartySailInfo::coin() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartySailInfo.coin)
  return coin_;
}
void SceneGalleryIslandPartySailInfo::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartySailInfo.coin)
}

// .proto.IslandPartySailStage stage = 12;
void SceneGalleryIslandPartySailInfo::clear_stage() {
  stage_ = 0;
}
::proto::IslandPartySailStage SceneGalleryIslandPartySailInfo::stage() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartySailInfo.stage)
  return static_cast< ::proto::IslandPartySailStage >(stage_);
}
void SceneGalleryIslandPartySailInfo::set_stage(::proto::IslandPartySailStage value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartySailInfo.stage)
}

// uint32 max_kill_progress = 8;
void SceneGalleryIslandPartySailInfo::clear_max_kill_progress() {
  max_kill_progress_ = 0u;
}
::google::protobuf::uint32 SceneGalleryIslandPartySailInfo::max_kill_progress() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryIslandPartySailInfo.max_kill_progress)
  return max_kill_progress_;
}
void SceneGalleryIslandPartySailInfo::set_max_kill_progress(::google::protobuf::uint32 value) {
  
  max_kill_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryIslandPartySailInfo.max_kill_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryInstableSprayBuffInfo::kBuffIdFieldNumber;
const int SceneGalleryInstableSprayBuffInfo::kBuffEndTimeFieldNumber;
const int SceneGalleryInstableSprayBuffInfo::kBuffMaxTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryInstableSprayBuffInfo::SceneGalleryInstableSprayBuffInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryInstableSprayBuffInfo)
}
SceneGalleryInstableSprayBuffInfo::SceneGalleryInstableSprayBuffInfo(const SceneGalleryInstableSprayBuffInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_max_time_, &from.buff_max_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&buff_end_time_) -
    reinterpret_cast<char*>(&buff_max_time_)) + sizeof(buff_end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryInstableSprayBuffInfo)
}

void SceneGalleryInstableSprayBuffInfo::SharedCtor() {
  ::memset(&buff_max_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buff_end_time_) -
      reinterpret_cast<char*>(&buff_max_time_)) + sizeof(buff_end_time_));
  _cached_size_ = 0;
}

SceneGalleryInstableSprayBuffInfo::~SceneGalleryInstableSprayBuffInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryInstableSprayBuffInfo)
  SharedDtor();
}

void SceneGalleryInstableSprayBuffInfo::SharedDtor() {
}

void SceneGalleryInstableSprayBuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryInstableSprayBuffInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryInstableSprayBuffInfo& SceneGalleryInstableSprayBuffInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryInstableSprayBuffInfo* SceneGalleryInstableSprayBuffInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryInstableSprayBuffInfo* n = new SceneGalleryInstableSprayBuffInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryInstableSprayBuffInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryInstableSprayBuffInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buff_max_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buff_end_time_) -
      reinterpret_cast<char*>(&buff_max_time_)) + sizeof(buff_end_time_));
  _internal_metadata_.Clear();
}

bool SceneGalleryInstableSprayBuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryInstableSprayBuffInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 buff_max_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buff_max_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 buff_end_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buff_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryInstableSprayBuffInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryInstableSprayBuffInfo)
  return false;
#undef DO_
}

void SceneGalleryInstableSprayBuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryInstableSprayBuffInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 buff_max_time = 4;
  if (this->buff_max_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->buff_max_time(), output);
  }

  // uint32 buff_id = 6;
  if (this->buff_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buff_id(), output);
  }

  // uint64 buff_end_time = 9;
  if (this->buff_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->buff_end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryInstableSprayBuffInfo)
}

::google::protobuf::uint8* SceneGalleryInstableSprayBuffInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryInstableSprayBuffInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 buff_max_time = 4;
  if (this->buff_max_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->buff_max_time(), target);
  }

  // uint32 buff_id = 6;
  if (this->buff_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->buff_id(), target);
  }

  // uint64 buff_end_time = 9;
  if (this->buff_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->buff_end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryInstableSprayBuffInfo)
  return target;
}

size_t SceneGalleryInstableSprayBuffInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryInstableSprayBuffInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 buff_max_time = 4;
  if (this->buff_max_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buff_max_time());
  }

  // uint32 buff_id = 6;
  if (this->buff_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_id());
  }

  // uint64 buff_end_time = 9;
  if (this->buff_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->buff_end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryInstableSprayBuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryInstableSprayBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryInstableSprayBuffInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryInstableSprayBuffInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryInstableSprayBuffInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryInstableSprayBuffInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryInstableSprayBuffInfo::MergeFrom(const SceneGalleryInstableSprayBuffInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryInstableSprayBuffInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buff_max_time() != 0) {
    set_buff_max_time(from.buff_max_time());
  }
  if (from.buff_id() != 0) {
    set_buff_id(from.buff_id());
  }
  if (from.buff_end_time() != 0) {
    set_buff_end_time(from.buff_end_time());
  }
}

void SceneGalleryInstableSprayBuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryInstableSprayBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryInstableSprayBuffInfo::CopyFrom(const SceneGalleryInstableSprayBuffInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryInstableSprayBuffInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryInstableSprayBuffInfo::IsInitialized() const {
  return true;
}

void SceneGalleryInstableSprayBuffInfo::Swap(SceneGalleryInstableSprayBuffInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryInstableSprayBuffInfo::InternalSwap(SceneGalleryInstableSprayBuffInfo* other) {
  using std::swap;
  swap(buff_max_time_, other->buff_max_time_);
  swap(buff_id_, other->buff_id_);
  swap(buff_end_time_, other->buff_end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryInstableSprayBuffInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryInstableSprayBuffInfo

// uint32 buff_id = 6;
void SceneGalleryInstableSprayBuffInfo::clear_buff_id() {
  buff_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInstableSprayBuffInfo::buff_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInstableSprayBuffInfo.buff_id)
  return buff_id_;
}
void SceneGalleryInstableSprayBuffInfo::set_buff_id(::google::protobuf::uint32 value) {
  
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInstableSprayBuffInfo.buff_id)
}

// uint64 buff_end_time = 9;
void SceneGalleryInstableSprayBuffInfo::clear_buff_end_time() {
  buff_end_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SceneGalleryInstableSprayBuffInfo::buff_end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInstableSprayBuffInfo.buff_end_time)
  return buff_end_time_;
}
void SceneGalleryInstableSprayBuffInfo::set_buff_end_time(::google::protobuf::uint64 value) {
  
  buff_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInstableSprayBuffInfo.buff_end_time)
}

// uint64 buff_max_time = 4;
void SceneGalleryInstableSprayBuffInfo::clear_buff_max_time() {
  buff_max_time_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 SceneGalleryInstableSprayBuffInfo::buff_max_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInstableSprayBuffInfo.buff_max_time)
  return buff_max_time_;
}
void SceneGalleryInstableSprayBuffInfo::set_buff_max_time(::google::protobuf::uint64 value) {
  
  buff_max_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInstableSprayBuffInfo.buff_max_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryInstaleSprayInfo::kScoreFieldNumber;
const int SceneGalleryInstaleSprayInfo::kBuffInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryInstaleSprayInfo::SceneGalleryInstaleSprayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryInstaleSprayInfo)
}
SceneGalleryInstaleSprayInfo::SceneGalleryInstaleSprayInfo(const SceneGalleryInstaleSprayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      buff_info_list_(from.buff_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryInstaleSprayInfo)
}

void SceneGalleryInstaleSprayInfo::SharedCtor() {
  score_ = 0u;
  _cached_size_ = 0;
}

SceneGalleryInstaleSprayInfo::~SceneGalleryInstaleSprayInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryInstaleSprayInfo)
  SharedDtor();
}

void SceneGalleryInstaleSprayInfo::SharedDtor() {
}

void SceneGalleryInstaleSprayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryInstaleSprayInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryInstaleSprayInfo& SceneGalleryInstaleSprayInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryInstaleSprayInfo* SceneGalleryInstaleSprayInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryInstaleSprayInfo* n = new SceneGalleryInstaleSprayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryInstaleSprayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryInstaleSprayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buff_info_list_.Clear();
  score_ = 0u;
  _internal_metadata_.Clear();
}

bool SceneGalleryInstaleSprayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryInstaleSprayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.SceneGalleryInstableSprayBuffInfo buff_info_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryInstaleSprayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryInstaleSprayInfo)
  return false;
#undef DO_
}

void SceneGalleryInstaleSprayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryInstaleSprayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 5;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score(), output);
  }

  // repeated .proto.SceneGalleryInstableSprayBuffInfo buff_info_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->buff_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryInstaleSprayInfo)
}

::google::protobuf::uint8* SceneGalleryInstaleSprayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryInstaleSprayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 5;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score(), target);
  }

  // repeated .proto.SceneGalleryInstableSprayBuffInfo buff_info_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->buff_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->buff_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryInstaleSprayInfo)
  return target;
}

size_t SceneGalleryInstaleSprayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryInstaleSprayInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.SceneGalleryInstableSprayBuffInfo buff_info_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->buff_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff_info_list(static_cast<int>(i)));
    }
  }

  // uint32 score = 5;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryInstaleSprayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryInstaleSprayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryInstaleSprayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryInstaleSprayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryInstaleSprayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryInstaleSprayInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryInstaleSprayInfo::MergeFrom(const SceneGalleryInstaleSprayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryInstaleSprayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buff_info_list_.MergeFrom(from.buff_info_list_);
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void SceneGalleryInstaleSprayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryInstaleSprayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryInstaleSprayInfo::CopyFrom(const SceneGalleryInstaleSprayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryInstaleSprayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryInstaleSprayInfo::IsInitialized() const {
  return true;
}

void SceneGalleryInstaleSprayInfo::Swap(SceneGalleryInstaleSprayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryInstaleSprayInfo::InternalSwap(SceneGalleryInstaleSprayInfo* other) {
  using std::swap;
  buff_info_list_.InternalSwap(&other->buff_info_list_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryInstaleSprayInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryInstaleSprayInfo

// uint32 score = 5;
void SceneGalleryInstaleSprayInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInstaleSprayInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInstaleSprayInfo.score)
  return score_;
}
void SceneGalleryInstaleSprayInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInstaleSprayInfo.score)
}

// repeated .proto.SceneGalleryInstableSprayBuffInfo buff_info_list = 12;
int SceneGalleryInstaleSprayInfo::buff_info_list_size() const {
  return buff_info_list_.size();
}
void SceneGalleryInstaleSprayInfo::clear_buff_info_list() {
  buff_info_list_.Clear();
}
const ::proto::SceneGalleryInstableSprayBuffInfo& SceneGalleryInstaleSprayInfo::buff_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInstaleSprayInfo.buff_info_list)
  return buff_info_list_.Get(index);
}
::proto::SceneGalleryInstableSprayBuffInfo* SceneGalleryInstaleSprayInfo::mutable_buff_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInstaleSprayInfo.buff_info_list)
  return buff_info_list_.Mutable(index);
}
::proto::SceneGalleryInstableSprayBuffInfo* SceneGalleryInstaleSprayInfo::add_buff_info_list() {
  // @@protoc_insertion_point(field_add:proto.SceneGalleryInstaleSprayInfo.buff_info_list)
  return buff_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::SceneGalleryInstableSprayBuffInfo >*
SceneGalleryInstaleSprayInfo::mutable_buff_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneGalleryInstaleSprayInfo.buff_info_list)
  return &buff_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::SceneGalleryInstableSprayBuffInfo >&
SceneGalleryInstaleSprayInfo::buff_info_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneGalleryInstaleSprayInfo.buff_info_list)
  return buff_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryTreasureSeelieInfo::kProgressFieldNumber;
const int SceneGalleryTreasureSeelieInfo::kGoalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryTreasureSeelieInfo::SceneGalleryTreasureSeelieInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryTreasureSeelieInfo)
}
SceneGalleryTreasureSeelieInfo::SceneGalleryTreasureSeelieInfo(const SceneGalleryTreasureSeelieInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&goal_, &from.goal_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&goal_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryTreasureSeelieInfo)
}

void SceneGalleryTreasureSeelieInfo::SharedCtor() {
  ::memset(&goal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&goal_)) + sizeof(progress_));
  _cached_size_ = 0;
}

SceneGalleryTreasureSeelieInfo::~SceneGalleryTreasureSeelieInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryTreasureSeelieInfo)
  SharedDtor();
}

void SceneGalleryTreasureSeelieInfo::SharedDtor() {
}

void SceneGalleryTreasureSeelieInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryTreasureSeelieInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryTreasureSeelieInfo& SceneGalleryTreasureSeelieInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryTreasureSeelieInfo* SceneGalleryTreasureSeelieInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryTreasureSeelieInfo* n = new SceneGalleryTreasureSeelieInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryTreasureSeelieInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryTreasureSeelieInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&goal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&goal_)) + sizeof(progress_));
  _internal_metadata_.Clear();
}

bool SceneGalleryTreasureSeelieInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryTreasureSeelieInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 goal = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryTreasureSeelieInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryTreasureSeelieInfo)
  return false;
#undef DO_
}

void SceneGalleryTreasureSeelieInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryTreasureSeelieInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 goal = 14;
  if (this->goal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->goal(), output);
  }

  // uint32 progress = 15;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryTreasureSeelieInfo)
}

::google::protobuf::uint8* SceneGalleryTreasureSeelieInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryTreasureSeelieInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 goal = 14;
  if (this->goal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->goal(), target);
  }

  // uint32 progress = 15;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryTreasureSeelieInfo)
  return target;
}

size_t SceneGalleryTreasureSeelieInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryTreasureSeelieInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 goal = 14;
  if (this->goal() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->goal());
  }

  // uint32 progress = 15;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryTreasureSeelieInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryTreasureSeelieInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryTreasureSeelieInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryTreasureSeelieInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryTreasureSeelieInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryTreasureSeelieInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryTreasureSeelieInfo::MergeFrom(const SceneGalleryTreasureSeelieInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryTreasureSeelieInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.goal() != 0) {
    set_goal(from.goal());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void SceneGalleryTreasureSeelieInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryTreasureSeelieInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryTreasureSeelieInfo::CopyFrom(const SceneGalleryTreasureSeelieInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryTreasureSeelieInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryTreasureSeelieInfo::IsInitialized() const {
  return true;
}

void SceneGalleryTreasureSeelieInfo::Swap(SceneGalleryTreasureSeelieInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryTreasureSeelieInfo::InternalSwap(SceneGalleryTreasureSeelieInfo* other) {
  using std::swap;
  swap(goal_, other->goal_);
  swap(progress_, other->progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryTreasureSeelieInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryTreasureSeelieInfo

// uint32 progress = 15;
void SceneGalleryTreasureSeelieInfo::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 SceneGalleryTreasureSeelieInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryTreasureSeelieInfo.progress)
  return progress_;
}
void SceneGalleryTreasureSeelieInfo::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryTreasureSeelieInfo.progress)
}

// uint32 goal = 14;
void SceneGalleryTreasureSeelieInfo::clear_goal() {
  goal_ = 0u;
}
::google::protobuf::uint32 SceneGalleryTreasureSeelieInfo::goal() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryTreasureSeelieInfo.goal)
  return goal_;
}
void SceneGalleryTreasureSeelieInfo::set_goal(::google::protobuf::uint32 value) {
  
  goal_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryTreasureSeelieInfo.goal)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryWindFieldInfo::kKilledMonsterNumFieldNumber;
const int SceneGalleryWindFieldInfo::kChallengeBallMaxCountFieldNumber;
const int SceneGalleryWindFieldInfo::kShowIdFieldNumber;
const int SceneGalleryWindFieldInfo::kChallengeTotalTimeFieldNumber;
const int SceneGalleryWindFieldInfo::kChallengeBallCurCountFieldNumber;
const int SceneGalleryWindFieldInfo::kCoinNumFieldNumber;
const int SceneGalleryWindFieldInfo::kChallengeTimestampFieldNumber;
const int SceneGalleryWindFieldInfo::kElementBallNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryWindFieldInfo::SceneGalleryWindFieldInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryWindFieldInfo)
}
SceneGalleryWindFieldInfo::SceneGalleryWindFieldInfo(const SceneGalleryWindFieldInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coin_num_, &from.coin_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_id_) -
    reinterpret_cast<char*>(&coin_num_)) + sizeof(show_id_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryWindFieldInfo)
}

void SceneGalleryWindFieldInfo::SharedCtor() {
  ::memset(&coin_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_id_) -
      reinterpret_cast<char*>(&coin_num_)) + sizeof(show_id_));
  _cached_size_ = 0;
}

SceneGalleryWindFieldInfo::~SceneGalleryWindFieldInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryWindFieldInfo)
  SharedDtor();
}

void SceneGalleryWindFieldInfo::SharedDtor() {
}

void SceneGalleryWindFieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryWindFieldInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryWindFieldInfo& SceneGalleryWindFieldInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryWindFieldInfo* SceneGalleryWindFieldInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryWindFieldInfo* n = new SceneGalleryWindFieldInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryWindFieldInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryWindFieldInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_id_) -
      reinterpret_cast<char*>(&coin_num_)) + sizeof(show_id_));
  _internal_metadata_.Clear();
}

bool SceneGalleryWindFieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryWindFieldInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 coin_num = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_total_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_monster_num = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_ball_cur_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_ball_cur_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_ball_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_ball_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_ball_max_count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_ball_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_timestamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 show_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryWindFieldInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryWindFieldInfo)
  return false;
#undef DO_
}

void SceneGalleryWindFieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryWindFieldInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 coin_num = 1;
  if (this->coin_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin_num(), output);
  }

  // uint32 challenge_total_time = 4;
  if (this->challenge_total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_total_time(), output);
  }

  // uint32 killed_monster_num = 5;
  if (this->killed_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killed_monster_num(), output);
  }

  // uint32 challenge_ball_cur_count = 9;
  if (this->challenge_ball_cur_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->challenge_ball_cur_count(), output);
  }

  // uint32 element_ball_num = 10;
  if (this->element_ball_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->element_ball_num(), output);
  }

  // uint32 challenge_ball_max_count = 12;
  if (this->challenge_ball_max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->challenge_ball_max_count(), output);
  }

  // uint32 challenge_timestamp = 13;
  if (this->challenge_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->challenge_timestamp(), output);
  }

  // uint32 show_id = 15;
  if (this->show_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->show_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryWindFieldInfo)
}

::google::protobuf::uint8* SceneGalleryWindFieldInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryWindFieldInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 coin_num = 1;
  if (this->coin_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coin_num(), target);
  }

  // uint32 challenge_total_time = 4;
  if (this->challenge_total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_total_time(), target);
  }

  // uint32 killed_monster_num = 5;
  if (this->killed_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killed_monster_num(), target);
  }

  // uint32 challenge_ball_cur_count = 9;
  if (this->challenge_ball_cur_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->challenge_ball_cur_count(), target);
  }

  // uint32 element_ball_num = 10;
  if (this->element_ball_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->element_ball_num(), target);
  }

  // uint32 challenge_ball_max_count = 12;
  if (this->challenge_ball_max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->challenge_ball_max_count(), target);
  }

  // uint32 challenge_timestamp = 13;
  if (this->challenge_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->challenge_timestamp(), target);
  }

  // uint32 show_id = 15;
  if (this->show_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->show_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryWindFieldInfo)
  return target;
}

size_t SceneGalleryWindFieldInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryWindFieldInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 coin_num = 1;
  if (this->coin_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_num());
  }

  // uint32 challenge_total_time = 4;
  if (this->challenge_total_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_total_time());
  }

  // uint32 killed_monster_num = 5;
  if (this->killed_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_monster_num());
  }

  // uint32 challenge_ball_cur_count = 9;
  if (this->challenge_ball_cur_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_ball_cur_count());
  }

  // uint32 element_ball_num = 10;
  if (this->element_ball_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_ball_num());
  }

  // uint32 challenge_ball_max_count = 12;
  if (this->challenge_ball_max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_ball_max_count());
  }

  // uint32 challenge_timestamp = 13;
  if (this->challenge_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_timestamp());
  }

  // uint32 show_id = 15;
  if (this->show_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryWindFieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryWindFieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryWindFieldInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryWindFieldInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryWindFieldInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryWindFieldInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryWindFieldInfo::MergeFrom(const SceneGalleryWindFieldInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryWindFieldInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin_num() != 0) {
    set_coin_num(from.coin_num());
  }
  if (from.challenge_total_time() != 0) {
    set_challenge_total_time(from.challenge_total_time());
  }
  if (from.killed_monster_num() != 0) {
    set_killed_monster_num(from.killed_monster_num());
  }
  if (from.challenge_ball_cur_count() != 0) {
    set_challenge_ball_cur_count(from.challenge_ball_cur_count());
  }
  if (from.element_ball_num() != 0) {
    set_element_ball_num(from.element_ball_num());
  }
  if (from.challenge_ball_max_count() != 0) {
    set_challenge_ball_max_count(from.challenge_ball_max_count());
  }
  if (from.challenge_timestamp() != 0) {
    set_challenge_timestamp(from.challenge_timestamp());
  }
  if (from.show_id() != 0) {
    set_show_id(from.show_id());
  }
}

void SceneGalleryWindFieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryWindFieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryWindFieldInfo::CopyFrom(const SceneGalleryWindFieldInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryWindFieldInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryWindFieldInfo::IsInitialized() const {
  return true;
}

void SceneGalleryWindFieldInfo::Swap(SceneGalleryWindFieldInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryWindFieldInfo::InternalSwap(SceneGalleryWindFieldInfo* other) {
  using std::swap;
  swap(coin_num_, other->coin_num_);
  swap(challenge_total_time_, other->challenge_total_time_);
  swap(killed_monster_num_, other->killed_monster_num_);
  swap(challenge_ball_cur_count_, other->challenge_ball_cur_count_);
  swap(element_ball_num_, other->element_ball_num_);
  swap(challenge_ball_max_count_, other->challenge_ball_max_count_);
  swap(challenge_timestamp_, other->challenge_timestamp_);
  swap(show_id_, other->show_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryWindFieldInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryWindFieldInfo

// uint32 killed_monster_num = 5;
void SceneGalleryWindFieldInfo::clear_killed_monster_num() {
  killed_monster_num_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::killed_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.killed_monster_num)
  return killed_monster_num_;
}
void SceneGalleryWindFieldInfo::set_killed_monster_num(::google::protobuf::uint32 value) {
  
  killed_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.killed_monster_num)
}

// uint32 challenge_ball_max_count = 12;
void SceneGalleryWindFieldInfo::clear_challenge_ball_max_count() {
  challenge_ball_max_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::challenge_ball_max_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.challenge_ball_max_count)
  return challenge_ball_max_count_;
}
void SceneGalleryWindFieldInfo::set_challenge_ball_max_count(::google::protobuf::uint32 value) {
  
  challenge_ball_max_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.challenge_ball_max_count)
}

// uint32 show_id = 15;
void SceneGalleryWindFieldInfo::clear_show_id() {
  show_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::show_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.show_id)
  return show_id_;
}
void SceneGalleryWindFieldInfo::set_show_id(::google::protobuf::uint32 value) {
  
  show_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.show_id)
}

// uint32 challenge_total_time = 4;
void SceneGalleryWindFieldInfo::clear_challenge_total_time() {
  challenge_total_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::challenge_total_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.challenge_total_time)
  return challenge_total_time_;
}
void SceneGalleryWindFieldInfo::set_challenge_total_time(::google::protobuf::uint32 value) {
  
  challenge_total_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.challenge_total_time)
}

// uint32 challenge_ball_cur_count = 9;
void SceneGalleryWindFieldInfo::clear_challenge_ball_cur_count() {
  challenge_ball_cur_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::challenge_ball_cur_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.challenge_ball_cur_count)
  return challenge_ball_cur_count_;
}
void SceneGalleryWindFieldInfo::set_challenge_ball_cur_count(::google::protobuf::uint32 value) {
  
  challenge_ball_cur_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.challenge_ball_cur_count)
}

// uint32 coin_num = 1;
void SceneGalleryWindFieldInfo::clear_coin_num() {
  coin_num_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::coin_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.coin_num)
  return coin_num_;
}
void SceneGalleryWindFieldInfo::set_coin_num(::google::protobuf::uint32 value) {
  
  coin_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.coin_num)
}

// uint32 challenge_timestamp = 13;
void SceneGalleryWindFieldInfo::clear_challenge_timestamp() {
  challenge_timestamp_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::challenge_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.challenge_timestamp)
  return challenge_timestamp_;
}
void SceneGalleryWindFieldInfo::set_challenge_timestamp(::google::protobuf::uint32 value) {
  
  challenge_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.challenge_timestamp)
}

// uint32 element_ball_num = 10;
void SceneGalleryWindFieldInfo::clear_element_ball_num() {
  element_ball_num_ = 0u;
}
::google::protobuf::uint32 SceneGalleryWindFieldInfo::element_ball_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryWindFieldInfo.element_ball_num)
  return element_ball_num_;
}
void SceneGalleryWindFieldInfo::set_element_ball_num(::google::protobuf::uint32 value) {
  
  element_ball_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryWindFieldInfo.element_ball_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryFungusFighterTrainingInfo::kMaxMonsterCountFieldNumber;
const int SceneGalleryFungusFighterTrainingInfo::kKilledMonsterCountFieldNumber;
const int SceneGalleryFungusFighterTrainingInfo::kBuffStartTimeFieldNumber;
const int SceneGalleryFungusFighterTrainingInfo::kBuffIdFieldNumber;
const int SceneGalleryFungusFighterTrainingInfo::kMaxSkillCountFieldNumber;
const int SceneGalleryFungusFighterTrainingInfo::kBuffLastTimeFieldNumber;
const int SceneGalleryFungusFighterTrainingInfo::kRestSkillCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryFungusFighterTrainingInfo::SceneGalleryFungusFighterTrainingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryFungusFighterTrainingInfo)
}
SceneGalleryFungusFighterTrainingInfo::SceneGalleryFungusFighterTrainingInfo(const SceneGalleryFungusFighterTrainingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_id_, &from.buff_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&buff_start_time_) -
    reinterpret_cast<char*>(&buff_id_)) + sizeof(buff_start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryFungusFighterTrainingInfo)
}

void SceneGalleryFungusFighterTrainingInfo::SharedCtor() {
  ::memset(&buff_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buff_start_time_) -
      reinterpret_cast<char*>(&buff_id_)) + sizeof(buff_start_time_));
  _cached_size_ = 0;
}

SceneGalleryFungusFighterTrainingInfo::~SceneGalleryFungusFighterTrainingInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryFungusFighterTrainingInfo)
  SharedDtor();
}

void SceneGalleryFungusFighterTrainingInfo::SharedDtor() {
}

void SceneGalleryFungusFighterTrainingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryFungusFighterTrainingInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryFungusFighterTrainingInfo& SceneGalleryFungusFighterTrainingInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryFungusFighterTrainingInfo* SceneGalleryFungusFighterTrainingInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryFungusFighterTrainingInfo* n = new SceneGalleryFungusFighterTrainingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryFungusFighterTrainingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryFungusFighterTrainingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buff_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buff_start_time_) -
      reinterpret_cast<char*>(&buff_id_)) + sizeof(buff_start_time_));
  _internal_metadata_.Clear();
}

bool SceneGalleryFungusFighterTrainingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryFungusFighterTrainingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 buff_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_monster_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rest_skill_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rest_skill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_monster_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_skill_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_skill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_start_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_last_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_last_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryFungusFighterTrainingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryFungusFighterTrainingInfo)
  return false;
#undef DO_
}

void SceneGalleryFungusFighterTrainingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryFungusFighterTrainingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 buff_id = 1;
  if (this->buff_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buff_id(), output);
  }

  // uint32 max_monster_count = 4;
  if (this->max_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_monster_count(), output);
  }

  // uint32 rest_skill_count = 5;
  if (this->rest_skill_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rest_skill_count(), output);
  }

  // uint32 killed_monster_count = 9;
  if (this->killed_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->killed_monster_count(), output);
  }

  // uint32 max_skill_count = 10;
  if (this->max_skill_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->max_skill_count(), output);
  }

  // uint32 buff_start_time = 13;
  if (this->buff_start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->buff_start_time(), output);
  }

  // uint32 buff_last_time = 14;
  if (this->buff_last_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->buff_last_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryFungusFighterTrainingInfo)
}

::google::protobuf::uint8* SceneGalleryFungusFighterTrainingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryFungusFighterTrainingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 buff_id = 1;
  if (this->buff_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buff_id(), target);
  }

  // uint32 max_monster_count = 4;
  if (this->max_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_monster_count(), target);
  }

  // uint32 rest_skill_count = 5;
  if (this->rest_skill_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rest_skill_count(), target);
  }

  // uint32 killed_monster_count = 9;
  if (this->killed_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->killed_monster_count(), target);
  }

  // uint32 max_skill_count = 10;
  if (this->max_skill_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_skill_count(), target);
  }

  // uint32 buff_start_time = 13;
  if (this->buff_start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->buff_start_time(), target);
  }

  // uint32 buff_last_time = 14;
  if (this->buff_last_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->buff_last_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryFungusFighterTrainingInfo)
  return target;
}

size_t SceneGalleryFungusFighterTrainingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryFungusFighterTrainingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 buff_id = 1;
  if (this->buff_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_id());
  }

  // uint32 max_monster_count = 4;
  if (this->max_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_monster_count());
  }

  // uint32 rest_skill_count = 5;
  if (this->rest_skill_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rest_skill_count());
  }

  // uint32 killed_monster_count = 9;
  if (this->killed_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_monster_count());
  }

  // uint32 buff_last_time = 14;
  if (this->buff_last_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_last_time());
  }

  // uint32 max_skill_count = 10;
  if (this->max_skill_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_skill_count());
  }

  // uint32 buff_start_time = 13;
  if (this->buff_start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_start_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryFungusFighterTrainingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryFungusFighterTrainingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryFungusFighterTrainingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryFungusFighterTrainingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryFungusFighterTrainingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryFungusFighterTrainingInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryFungusFighterTrainingInfo::MergeFrom(const SceneGalleryFungusFighterTrainingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryFungusFighterTrainingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buff_id() != 0) {
    set_buff_id(from.buff_id());
  }
  if (from.max_monster_count() != 0) {
    set_max_monster_count(from.max_monster_count());
  }
  if (from.rest_skill_count() != 0) {
    set_rest_skill_count(from.rest_skill_count());
  }
  if (from.killed_monster_count() != 0) {
    set_killed_monster_count(from.killed_monster_count());
  }
  if (from.buff_last_time() != 0) {
    set_buff_last_time(from.buff_last_time());
  }
  if (from.max_skill_count() != 0) {
    set_max_skill_count(from.max_skill_count());
  }
  if (from.buff_start_time() != 0) {
    set_buff_start_time(from.buff_start_time());
  }
}

void SceneGalleryFungusFighterTrainingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryFungusFighterTrainingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryFungusFighterTrainingInfo::CopyFrom(const SceneGalleryFungusFighterTrainingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryFungusFighterTrainingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryFungusFighterTrainingInfo::IsInitialized() const {
  return true;
}

void SceneGalleryFungusFighterTrainingInfo::Swap(SceneGalleryFungusFighterTrainingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryFungusFighterTrainingInfo::InternalSwap(SceneGalleryFungusFighterTrainingInfo* other) {
  using std::swap;
  swap(buff_id_, other->buff_id_);
  swap(max_monster_count_, other->max_monster_count_);
  swap(rest_skill_count_, other->rest_skill_count_);
  swap(killed_monster_count_, other->killed_monster_count_);
  swap(buff_last_time_, other->buff_last_time_);
  swap(max_skill_count_, other->max_skill_count_);
  swap(buff_start_time_, other->buff_start_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryFungusFighterTrainingInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryFungusFighterTrainingInfo

// uint32 max_monster_count = 4;
void SceneGalleryFungusFighterTrainingInfo::clear_max_monster_count() {
  max_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFungusFighterTrainingInfo::max_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterTrainingInfo.max_monster_count)
  return max_monster_count_;
}
void SceneGalleryFungusFighterTrainingInfo::set_max_monster_count(::google::protobuf::uint32 value) {
  
  max_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterTrainingInfo.max_monster_count)
}

// uint32 killed_monster_count = 9;
void SceneGalleryFungusFighterTrainingInfo::clear_killed_monster_count() {
  killed_monster_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFungusFighterTrainingInfo::killed_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterTrainingInfo.killed_monster_count)
  return killed_monster_count_;
}
void SceneGalleryFungusFighterTrainingInfo::set_killed_monster_count(::google::protobuf::uint32 value) {
  
  killed_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterTrainingInfo.killed_monster_count)
}

// uint32 buff_start_time = 13;
void SceneGalleryFungusFighterTrainingInfo::clear_buff_start_time() {
  buff_start_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFungusFighterTrainingInfo::buff_start_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterTrainingInfo.buff_start_time)
  return buff_start_time_;
}
void SceneGalleryFungusFighterTrainingInfo::set_buff_start_time(::google::protobuf::uint32 value) {
  
  buff_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterTrainingInfo.buff_start_time)
}

// uint32 buff_id = 1;
void SceneGalleryFungusFighterTrainingInfo::clear_buff_id() {
  buff_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFungusFighterTrainingInfo::buff_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterTrainingInfo.buff_id)
  return buff_id_;
}
void SceneGalleryFungusFighterTrainingInfo::set_buff_id(::google::protobuf::uint32 value) {
  
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterTrainingInfo.buff_id)
}

// uint32 max_skill_count = 10;
void SceneGalleryFungusFighterTrainingInfo::clear_max_skill_count() {
  max_skill_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFungusFighterTrainingInfo::max_skill_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterTrainingInfo.max_skill_count)
  return max_skill_count_;
}
void SceneGalleryFungusFighterTrainingInfo::set_max_skill_count(::google::protobuf::uint32 value) {
  
  max_skill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterTrainingInfo.max_skill_count)
}

// uint32 buff_last_time = 14;
void SceneGalleryFungusFighterTrainingInfo::clear_buff_last_time() {
  buff_last_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFungusFighterTrainingInfo::buff_last_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterTrainingInfo.buff_last_time)
  return buff_last_time_;
}
void SceneGalleryFungusFighterTrainingInfo::set_buff_last_time(::google::protobuf::uint32 value) {
  
  buff_last_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterTrainingInfo.buff_last_time)
}

// uint32 rest_skill_count = 5;
void SceneGalleryFungusFighterTrainingInfo::clear_rest_skill_count() {
  rest_skill_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryFungusFighterTrainingInfo::rest_skill_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterTrainingInfo.rest_skill_count)
  return rest_skill_count_;
}
void SceneGalleryFungusFighterTrainingInfo::set_rest_skill_count(::google::protobuf::uint32 value) {
  
  rest_skill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterTrainingInfo.rest_skill_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryFungusFighterCaptureInfo::kIsHideProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryFungusFighterCaptureInfo::SceneGalleryFungusFighterCaptureInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryFungusFighterCaptureInfo)
}
SceneGalleryFungusFighterCaptureInfo::SceneGalleryFungusFighterCaptureInfo(const SceneGalleryFungusFighterCaptureInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_hide_progress_ = from.is_hide_progress_;
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryFungusFighterCaptureInfo)
}

void SceneGalleryFungusFighterCaptureInfo::SharedCtor() {
  is_hide_progress_ = false;
  _cached_size_ = 0;
}

SceneGalleryFungusFighterCaptureInfo::~SceneGalleryFungusFighterCaptureInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryFungusFighterCaptureInfo)
  SharedDtor();
}

void SceneGalleryFungusFighterCaptureInfo::SharedDtor() {
}

void SceneGalleryFungusFighterCaptureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryFungusFighterCaptureInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryFungusFighterCaptureInfo& SceneGalleryFungusFighterCaptureInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryFungusFighterCaptureInfo* SceneGalleryFungusFighterCaptureInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryFungusFighterCaptureInfo* n = new SceneGalleryFungusFighterCaptureInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryFungusFighterCaptureInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryFungusFighterCaptureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_hide_progress_ = false;
  _internal_metadata_.Clear();
}

bool SceneGalleryFungusFighterCaptureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryFungusFighterCaptureInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_hide_progress = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_hide_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryFungusFighterCaptureInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryFungusFighterCaptureInfo)
  return false;
#undef DO_
}

void SceneGalleryFungusFighterCaptureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryFungusFighterCaptureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_hide_progress = 13;
  if (this->is_hide_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_hide_progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryFungusFighterCaptureInfo)
}

::google::protobuf::uint8* SceneGalleryFungusFighterCaptureInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryFungusFighterCaptureInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_hide_progress = 13;
  if (this->is_hide_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_hide_progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryFungusFighterCaptureInfo)
  return target;
}

size_t SceneGalleryFungusFighterCaptureInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryFungusFighterCaptureInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_hide_progress = 13;
  if (this->is_hide_progress() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryFungusFighterCaptureInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryFungusFighterCaptureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryFungusFighterCaptureInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryFungusFighterCaptureInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryFungusFighterCaptureInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryFungusFighterCaptureInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryFungusFighterCaptureInfo::MergeFrom(const SceneGalleryFungusFighterCaptureInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryFungusFighterCaptureInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_hide_progress() != 0) {
    set_is_hide_progress(from.is_hide_progress());
  }
}

void SceneGalleryFungusFighterCaptureInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryFungusFighterCaptureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryFungusFighterCaptureInfo::CopyFrom(const SceneGalleryFungusFighterCaptureInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryFungusFighterCaptureInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryFungusFighterCaptureInfo::IsInitialized() const {
  return true;
}

void SceneGalleryFungusFighterCaptureInfo::Swap(SceneGalleryFungusFighterCaptureInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryFungusFighterCaptureInfo::InternalSwap(SceneGalleryFungusFighterCaptureInfo* other) {
  using std::swap;
  swap(is_hide_progress_, other->is_hide_progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryFungusFighterCaptureInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryFungusFighterCaptureInfo

// bool is_hide_progress = 13;
void SceneGalleryFungusFighterCaptureInfo::clear_is_hide_progress() {
  is_hide_progress_ = false;
}
bool SceneGalleryFungusFighterCaptureInfo::is_hide_progress() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryFungusFighterCaptureInfo.is_hide_progress)
  return is_hide_progress_;
}
void SceneGalleryFungusFighterCaptureInfo::set_is_hide_progress(bool value) {
  
  is_hide_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryFungusFighterCaptureInfo.is_hide_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryEffigyChallengeV2Info::kKilledMonsterCntFieldNumber;
const int SceneGalleryEffigyChallengeV2Info::kTotalTargetKillCntFieldNumber;
const int SceneGalleryEffigyChallengeV2Info::kSceneStartTimeFieldNumber;
const int SceneGalleryEffigyChallengeV2Info::kTRemainUseTimeFieldNumber;
const int SceneGalleryEffigyChallengeV2Info::kBossViolentLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryEffigyChallengeV2Info::SceneGalleryEffigyChallengeV2Info()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryEffigyChallengeV2Info)
}
SceneGalleryEffigyChallengeV2Info::SceneGalleryEffigyChallengeV2Info(const SceneGalleryEffigyChallengeV2Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_target_kill_cnt_, &from.total_target_kill_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_start_time_) -
    reinterpret_cast<char*>(&total_target_kill_cnt_)) + sizeof(scene_start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryEffigyChallengeV2Info)
}

void SceneGalleryEffigyChallengeV2Info::SharedCtor() {
  ::memset(&total_target_kill_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_start_time_) -
      reinterpret_cast<char*>(&total_target_kill_cnt_)) + sizeof(scene_start_time_));
  _cached_size_ = 0;
}

SceneGalleryEffigyChallengeV2Info::~SceneGalleryEffigyChallengeV2Info() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryEffigyChallengeV2Info)
  SharedDtor();
}

void SceneGalleryEffigyChallengeV2Info::SharedDtor() {
}

void SceneGalleryEffigyChallengeV2Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryEffigyChallengeV2Info::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryEffigyChallengeV2Info& SceneGalleryEffigyChallengeV2Info::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryEffigyChallengeV2Info* SceneGalleryEffigyChallengeV2Info::New(::google::protobuf::Arena* arena) const {
  SceneGalleryEffigyChallengeV2Info* n = new SceneGalleryEffigyChallengeV2Info;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryEffigyChallengeV2Info::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryEffigyChallengeV2Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_target_kill_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_start_time_) -
      reinterpret_cast<char*>(&total_target_kill_cnt_)) + sizeof(scene_start_time_));
  _internal_metadata_.Clear();
}

bool SceneGalleryEffigyChallengeV2Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryEffigyChallengeV2Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 t_remain_use_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &t_remain_use_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 boss_violent_level = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_violent_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_monster_cnt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_monster_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_start_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_target_kill_cnt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_target_kill_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryEffigyChallengeV2Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryEffigyChallengeV2Info)
  return false;
#undef DO_
}

void SceneGalleryEffigyChallengeV2Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryEffigyChallengeV2Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 t_remain_use_time = 6;
  if (this->t_remain_use_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->t_remain_use_time(), output);
  }

  // uint32 boss_violent_level = 9;
  if (this->boss_violent_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->boss_violent_level(), output);
  }

  // uint32 killed_monster_cnt = 10;
  if (this->killed_monster_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->killed_monster_cnt(), output);
  }

  // uint32 scene_start_time = 14;
  if (this->scene_start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->scene_start_time(), output);
  }

  // uint32 total_target_kill_cnt = 15;
  if (this->total_target_kill_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->total_target_kill_cnt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryEffigyChallengeV2Info)
}

::google::protobuf::uint8* SceneGalleryEffigyChallengeV2Info::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryEffigyChallengeV2Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 t_remain_use_time = 6;
  if (this->t_remain_use_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->t_remain_use_time(), target);
  }

  // uint32 boss_violent_level = 9;
  if (this->boss_violent_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->boss_violent_level(), target);
  }

  // uint32 killed_monster_cnt = 10;
  if (this->killed_monster_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->killed_monster_cnt(), target);
  }

  // uint32 scene_start_time = 14;
  if (this->scene_start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->scene_start_time(), target);
  }

  // uint32 total_target_kill_cnt = 15;
  if (this->total_target_kill_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->total_target_kill_cnt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryEffigyChallengeV2Info)
  return target;
}

size_t SceneGalleryEffigyChallengeV2Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryEffigyChallengeV2Info)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 total_target_kill_cnt = 15;
  if (this->total_target_kill_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_target_kill_cnt());
  }

  // uint32 t_remain_use_time = 6;
  if (this->t_remain_use_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->t_remain_use_time());
  }

  // uint32 boss_violent_level = 9;
  if (this->boss_violent_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->boss_violent_level());
  }

  // uint32 killed_monster_cnt = 10;
  if (this->killed_monster_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_monster_cnt());
  }

  // uint32 scene_start_time = 14;
  if (this->scene_start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_start_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryEffigyChallengeV2Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryEffigyChallengeV2Info)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryEffigyChallengeV2Info* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryEffigyChallengeV2Info>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryEffigyChallengeV2Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryEffigyChallengeV2Info)
    MergeFrom(*source);
  }
}

void SceneGalleryEffigyChallengeV2Info::MergeFrom(const SceneGalleryEffigyChallengeV2Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryEffigyChallengeV2Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_target_kill_cnt() != 0) {
    set_total_target_kill_cnt(from.total_target_kill_cnt());
  }
  if (from.t_remain_use_time() != 0) {
    set_t_remain_use_time(from.t_remain_use_time());
  }
  if (from.boss_violent_level() != 0) {
    set_boss_violent_level(from.boss_violent_level());
  }
  if (from.killed_monster_cnt() != 0) {
    set_killed_monster_cnt(from.killed_monster_cnt());
  }
  if (from.scene_start_time() != 0) {
    set_scene_start_time(from.scene_start_time());
  }
}

void SceneGalleryEffigyChallengeV2Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryEffigyChallengeV2Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryEffigyChallengeV2Info::CopyFrom(const SceneGalleryEffigyChallengeV2Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryEffigyChallengeV2Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryEffigyChallengeV2Info::IsInitialized() const {
  return true;
}

void SceneGalleryEffigyChallengeV2Info::Swap(SceneGalleryEffigyChallengeV2Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryEffigyChallengeV2Info::InternalSwap(SceneGalleryEffigyChallengeV2Info* other) {
  using std::swap;
  swap(total_target_kill_cnt_, other->total_target_kill_cnt_);
  swap(t_remain_use_time_, other->t_remain_use_time_);
  swap(boss_violent_level_, other->boss_violent_level_);
  swap(killed_monster_cnt_, other->killed_monster_cnt_);
  swap(scene_start_time_, other->scene_start_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryEffigyChallengeV2Info::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryEffigyChallengeV2Info

// uint32 killed_monster_cnt = 10;
void SceneGalleryEffigyChallengeV2Info::clear_killed_monster_cnt() {
  killed_monster_cnt_ = 0u;
}
::google::protobuf::uint32 SceneGalleryEffigyChallengeV2Info::killed_monster_cnt() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryEffigyChallengeV2Info.killed_monster_cnt)
  return killed_monster_cnt_;
}
void SceneGalleryEffigyChallengeV2Info::set_killed_monster_cnt(::google::protobuf::uint32 value) {
  
  killed_monster_cnt_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryEffigyChallengeV2Info.killed_monster_cnt)
}

// uint32 total_target_kill_cnt = 15;
void SceneGalleryEffigyChallengeV2Info::clear_total_target_kill_cnt() {
  total_target_kill_cnt_ = 0u;
}
::google::protobuf::uint32 SceneGalleryEffigyChallengeV2Info::total_target_kill_cnt() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryEffigyChallengeV2Info.total_target_kill_cnt)
  return total_target_kill_cnt_;
}
void SceneGalleryEffigyChallengeV2Info::set_total_target_kill_cnt(::google::protobuf::uint32 value) {
  
  total_target_kill_cnt_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryEffigyChallengeV2Info.total_target_kill_cnt)
}

// uint32 scene_start_time = 14;
void SceneGalleryEffigyChallengeV2Info::clear_scene_start_time() {
  scene_start_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryEffigyChallengeV2Info::scene_start_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryEffigyChallengeV2Info.scene_start_time)
  return scene_start_time_;
}
void SceneGalleryEffigyChallengeV2Info::set_scene_start_time(::google::protobuf::uint32 value) {
  
  scene_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryEffigyChallengeV2Info.scene_start_time)
}

// uint32 t_remain_use_time = 6;
void SceneGalleryEffigyChallengeV2Info::clear_t_remain_use_time() {
  t_remain_use_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryEffigyChallengeV2Info::t_remain_use_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryEffigyChallengeV2Info.t_remain_use_time)
  return t_remain_use_time_;
}
void SceneGalleryEffigyChallengeV2Info::set_t_remain_use_time(::google::protobuf::uint32 value) {
  
  t_remain_use_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryEffigyChallengeV2Info.t_remain_use_time)
}

// uint32 boss_violent_level = 9;
void SceneGalleryEffigyChallengeV2Info::clear_boss_violent_level() {
  boss_violent_level_ = 0u;
}
::google::protobuf::uint32 SceneGalleryEffigyChallengeV2Info::boss_violent_level() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryEffigyChallengeV2Info.boss_violent_level)
  return boss_violent_level_;
}
void SceneGalleryEffigyChallengeV2Info::set_boss_violent_level(::google::protobuf::uint32 value) {
  
  boss_violent_level_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryEffigyChallengeV2Info.boss_violent_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryCharAmusementInfo::kIsLastLevelFieldNumber;
const int SceneGalleryCharAmusementInfo::kMaxScoreFieldNumber;
const int SceneGalleryCharAmusementInfo::kCurScoreFieldNumber;
const int SceneGalleryCharAmusementInfo::kIsFinishFieldNumber;
const int SceneGalleryCharAmusementInfo::kIsSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryCharAmusementInfo::SceneGalleryCharAmusementInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryCharAmusementInfo)
}
SceneGalleryCharAmusementInfo::SceneGalleryCharAmusementInfo(const SceneGalleryCharAmusementInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_last_level_, &from.is_last_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_score_) -
    reinterpret_cast<char*>(&is_last_level_)) + sizeof(cur_score_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryCharAmusementInfo)
}

void SceneGalleryCharAmusementInfo::SharedCtor() {
  ::memset(&is_last_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&is_last_level_)) + sizeof(cur_score_));
  _cached_size_ = 0;
}

SceneGalleryCharAmusementInfo::~SceneGalleryCharAmusementInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryCharAmusementInfo)
  SharedDtor();
}

void SceneGalleryCharAmusementInfo::SharedDtor() {
}

void SceneGalleryCharAmusementInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryCharAmusementInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryCharAmusementInfo& SceneGalleryCharAmusementInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryCharAmusementInfo* SceneGalleryCharAmusementInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryCharAmusementInfo* n = new SceneGalleryCharAmusementInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryCharAmusementInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryCharAmusementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_last_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&is_last_level_)) + sizeof(cur_score_));
  _internal_metadata_.Clear();
}

bool SceneGalleryCharAmusementInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryCharAmusementInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_last_level = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_last_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_score = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finish = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryCharAmusementInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryCharAmusementInfo)
  return false;
#undef DO_
}

void SceneGalleryCharAmusementInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryCharAmusementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }

  // bool is_last_level = 2;
  if (this->is_last_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_last_level(), output);
  }

  // uint32 max_score = 9;
  if (this->max_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->max_score(), output);
  }

  // bool is_finish = 10;
  if (this->is_finish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_finish(), output);
  }

  // uint32 cur_score = 14;
  if (this->cur_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->cur_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryCharAmusementInfo)
}

::google::protobuf::uint8* SceneGalleryCharAmusementInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryCharAmusementInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 1;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }

  // bool is_last_level = 2;
  if (this->is_last_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_last_level(), target);
  }

  // uint32 max_score = 9;
  if (this->max_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->max_score(), target);
  }

  // bool is_finish = 10;
  if (this->is_finish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_finish(), target);
  }

  // uint32 cur_score = 14;
  if (this->cur_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->cur_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryCharAmusementInfo)
  return target;
}

size_t SceneGalleryCharAmusementInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryCharAmusementInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_last_level = 2;
  if (this->is_last_level() != 0) {
    total_size += 1 + 1;
  }

  // bool is_finish = 10;
  if (this->is_finish() != 0) {
    total_size += 1 + 1;
  }

  // bool is_success = 1;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 max_score = 9;
  if (this->max_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_score());
  }

  // uint32 cur_score = 14;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryCharAmusementInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryCharAmusementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryCharAmusementInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryCharAmusementInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryCharAmusementInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryCharAmusementInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryCharAmusementInfo::MergeFrom(const SceneGalleryCharAmusementInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryCharAmusementInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_last_level() != 0) {
    set_is_last_level(from.is_last_level());
  }
  if (from.is_finish() != 0) {
    set_is_finish(from.is_finish());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.max_score() != 0) {
    set_max_score(from.max_score());
  }
  if (from.cur_score() != 0) {
    set_cur_score(from.cur_score());
  }
}

void SceneGalleryCharAmusementInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryCharAmusementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryCharAmusementInfo::CopyFrom(const SceneGalleryCharAmusementInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryCharAmusementInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryCharAmusementInfo::IsInitialized() const {
  return true;
}

void SceneGalleryCharAmusementInfo::Swap(SceneGalleryCharAmusementInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryCharAmusementInfo::InternalSwap(SceneGalleryCharAmusementInfo* other) {
  using std::swap;
  swap(is_last_level_, other->is_last_level_);
  swap(is_finish_, other->is_finish_);
  swap(is_success_, other->is_success_);
  swap(max_score_, other->max_score_);
  swap(cur_score_, other->cur_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryCharAmusementInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryCharAmusementInfo

// bool is_last_level = 2;
void SceneGalleryCharAmusementInfo::clear_is_last_level() {
  is_last_level_ = false;
}
bool SceneGalleryCharAmusementInfo::is_last_level() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCharAmusementInfo.is_last_level)
  return is_last_level_;
}
void SceneGalleryCharAmusementInfo::set_is_last_level(bool value) {
  
  is_last_level_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCharAmusementInfo.is_last_level)
}

// uint32 max_score = 9;
void SceneGalleryCharAmusementInfo::clear_max_score() {
  max_score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryCharAmusementInfo::max_score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCharAmusementInfo.max_score)
  return max_score_;
}
void SceneGalleryCharAmusementInfo::set_max_score(::google::protobuf::uint32 value) {
  
  max_score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCharAmusementInfo.max_score)
}

// uint32 cur_score = 14;
void SceneGalleryCharAmusementInfo::clear_cur_score() {
  cur_score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryCharAmusementInfo::cur_score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCharAmusementInfo.cur_score)
  return cur_score_;
}
void SceneGalleryCharAmusementInfo::set_cur_score(::google::protobuf::uint32 value) {
  
  cur_score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCharAmusementInfo.cur_score)
}

// bool is_finish = 10;
void SceneGalleryCharAmusementInfo::clear_is_finish() {
  is_finish_ = false;
}
bool SceneGalleryCharAmusementInfo::is_finish() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCharAmusementInfo.is_finish)
  return is_finish_;
}
void SceneGalleryCharAmusementInfo::set_is_finish(bool value) {
  
  is_finish_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCharAmusementInfo.is_finish)
}

// bool is_success = 1;
void SceneGalleryCharAmusementInfo::clear_is_success() {
  is_success_ = false;
}
bool SceneGalleryCharAmusementInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCharAmusementInfo.is_success)
  return is_success_;
}
void SceneGalleryCharAmusementInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCharAmusementInfo.is_success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryBrickBreakerInfo::kScoreFieldNumber;
const int SceneGalleryBrickBreakerInfo::kLifeCountFieldNumber;
const int SceneGalleryBrickBreakerInfo::kFeverFieldNumber;
const int SceneGalleryBrickBreakerInfo::kComboFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryBrickBreakerInfo::SceneGalleryBrickBreakerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryBrickBreakerInfo)
}
SceneGalleryBrickBreakerInfo::SceneGalleryBrickBreakerInfo(const SceneGalleryBrickBreakerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&combo_, &from.combo_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&combo_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryBrickBreakerInfo)
}

void SceneGalleryBrickBreakerInfo::SharedCtor() {
  ::memset(&combo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&combo_)) + sizeof(score_));
  _cached_size_ = 0;
}

SceneGalleryBrickBreakerInfo::~SceneGalleryBrickBreakerInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryBrickBreakerInfo)
  SharedDtor();
}

void SceneGalleryBrickBreakerInfo::SharedDtor() {
}

void SceneGalleryBrickBreakerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryBrickBreakerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryBrickBreakerInfo& SceneGalleryBrickBreakerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryBrickBreakerInfo* SceneGalleryBrickBreakerInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryBrickBreakerInfo* n = new SceneGalleryBrickBreakerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryBrickBreakerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryBrickBreakerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&combo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&combo_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool SceneGalleryBrickBreakerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryBrickBreakerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 combo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fever = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fever_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 life_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &life_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryBrickBreakerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryBrickBreakerInfo)
  return false;
#undef DO_
}

void SceneGalleryBrickBreakerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryBrickBreakerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 combo = 1;
  if (this->combo() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combo(), output);
  }

  // uint32 fever = 2;
  if (this->fever() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fever(), output);
  }

  // uint32 life_count = 4;
  if (this->life_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->life_count(), output);
  }

  // uint32 score = 10;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryBrickBreakerInfo)
}

::google::protobuf::uint8* SceneGalleryBrickBreakerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryBrickBreakerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 combo = 1;
  if (this->combo() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combo(), target);
  }

  // uint32 fever = 2;
  if (this->fever() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fever(), target);
  }

  // uint32 life_count = 4;
  if (this->life_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->life_count(), target);
  }

  // uint32 score = 10;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryBrickBreakerInfo)
  return target;
}

size_t SceneGalleryBrickBreakerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryBrickBreakerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 combo = 1;
  if (this->combo() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->combo());
  }

  // uint32 fever = 2;
  if (this->fever() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fever());
  }

  // uint32 life_count = 4;
  if (this->life_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->life_count());
  }

  // uint32 score = 10;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryBrickBreakerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryBrickBreakerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryBrickBreakerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryBrickBreakerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryBrickBreakerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryBrickBreakerInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryBrickBreakerInfo::MergeFrom(const SceneGalleryBrickBreakerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryBrickBreakerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.combo() != 0) {
    set_combo(from.combo());
  }
  if (from.fever() != 0) {
    set_fever(from.fever());
  }
  if (from.life_count() != 0) {
    set_life_count(from.life_count());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void SceneGalleryBrickBreakerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryBrickBreakerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryBrickBreakerInfo::CopyFrom(const SceneGalleryBrickBreakerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryBrickBreakerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryBrickBreakerInfo::IsInitialized() const {
  return true;
}

void SceneGalleryBrickBreakerInfo::Swap(SceneGalleryBrickBreakerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryBrickBreakerInfo::InternalSwap(SceneGalleryBrickBreakerInfo* other) {
  using std::swap;
  swap(combo_, other->combo_);
  swap(fever_, other->fever_);
  swap(life_count_, other->life_count_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryBrickBreakerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryBrickBreakerInfo

// uint32 score = 10;
void SceneGalleryBrickBreakerInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBrickBreakerInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBrickBreakerInfo.score)
  return score_;
}
void SceneGalleryBrickBreakerInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBrickBreakerInfo.score)
}

// uint32 life_count = 4;
void SceneGalleryBrickBreakerInfo::clear_life_count() {
  life_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBrickBreakerInfo::life_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBrickBreakerInfo.life_count)
  return life_count_;
}
void SceneGalleryBrickBreakerInfo::set_life_count(::google::protobuf::uint32 value) {
  
  life_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBrickBreakerInfo.life_count)
}

// uint32 fever = 2;
void SceneGalleryBrickBreakerInfo::clear_fever() {
  fever_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBrickBreakerInfo::fever() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBrickBreakerInfo.fever)
  return fever_;
}
void SceneGalleryBrickBreakerInfo::set_fever(::google::protobuf::uint32 value) {
  
  fever_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBrickBreakerInfo.fever)
}

// uint32 combo = 1;
void SceneGalleryBrickBreakerInfo::clear_combo() {
  combo_ = 0u;
}
::google::protobuf::uint32 SceneGalleryBrickBreakerInfo::combo() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryBrickBreakerInfo.combo)
  return combo_;
}
void SceneGalleryBrickBreakerInfo::set_combo(::google::protobuf::uint32 value) {
  
  combo_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryBrickBreakerInfo.combo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryCoinCollectInfo::kCoinTotalNumFieldNumber;
const int SceneGalleryCoinCollectInfo::kCoinCollectNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryCoinCollectInfo::SceneGalleryCoinCollectInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryCoinCollectInfo)
}
SceneGalleryCoinCollectInfo::SceneGalleryCoinCollectInfo(const SceneGalleryCoinCollectInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coin_collect_num_, &from.coin_collect_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_total_num_) -
    reinterpret_cast<char*>(&coin_collect_num_)) + sizeof(coin_total_num_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryCoinCollectInfo)
}

void SceneGalleryCoinCollectInfo::SharedCtor() {
  ::memset(&coin_collect_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_total_num_) -
      reinterpret_cast<char*>(&coin_collect_num_)) + sizeof(coin_total_num_));
  _cached_size_ = 0;
}

SceneGalleryCoinCollectInfo::~SceneGalleryCoinCollectInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryCoinCollectInfo)
  SharedDtor();
}

void SceneGalleryCoinCollectInfo::SharedDtor() {
}

void SceneGalleryCoinCollectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryCoinCollectInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryCoinCollectInfo& SceneGalleryCoinCollectInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryCoinCollectInfo* SceneGalleryCoinCollectInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryCoinCollectInfo* n = new SceneGalleryCoinCollectInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryCoinCollectInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryCoinCollectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_collect_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_total_num_) -
      reinterpret_cast<char*>(&coin_collect_num_)) + sizeof(coin_total_num_));
  _internal_metadata_.Clear();
}

bool SceneGalleryCoinCollectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryCoinCollectInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 coin_collect_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_collect_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin_total_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryCoinCollectInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryCoinCollectInfo)
  return false;
#undef DO_
}

void SceneGalleryCoinCollectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryCoinCollectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 coin_collect_num = 2;
  if (this->coin_collect_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coin_collect_num(), output);
  }

  // uint32 coin_total_num = 4;
  if (this->coin_total_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin_total_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryCoinCollectInfo)
}

::google::protobuf::uint8* SceneGalleryCoinCollectInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryCoinCollectInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 coin_collect_num = 2;
  if (this->coin_collect_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coin_collect_num(), target);
  }

  // uint32 coin_total_num = 4;
  if (this->coin_total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coin_total_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryCoinCollectInfo)
  return target;
}

size_t SceneGalleryCoinCollectInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryCoinCollectInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 coin_collect_num = 2;
  if (this->coin_collect_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_collect_num());
  }

  // uint32 coin_total_num = 4;
  if (this->coin_total_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_total_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryCoinCollectInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryCoinCollectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryCoinCollectInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryCoinCollectInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryCoinCollectInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryCoinCollectInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryCoinCollectInfo::MergeFrom(const SceneGalleryCoinCollectInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryCoinCollectInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin_collect_num() != 0) {
    set_coin_collect_num(from.coin_collect_num());
  }
  if (from.coin_total_num() != 0) {
    set_coin_total_num(from.coin_total_num());
  }
}

void SceneGalleryCoinCollectInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryCoinCollectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryCoinCollectInfo::CopyFrom(const SceneGalleryCoinCollectInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryCoinCollectInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryCoinCollectInfo::IsInitialized() const {
  return true;
}

void SceneGalleryCoinCollectInfo::Swap(SceneGalleryCoinCollectInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryCoinCollectInfo::InternalSwap(SceneGalleryCoinCollectInfo* other) {
  using std::swap;
  swap(coin_collect_num_, other->coin_collect_num_);
  swap(coin_total_num_, other->coin_total_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryCoinCollectInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryCoinCollectInfo

// uint32 coin_total_num = 4;
void SceneGalleryCoinCollectInfo::clear_coin_total_num() {
  coin_total_num_ = 0u;
}
::google::protobuf::uint32 SceneGalleryCoinCollectInfo::coin_total_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCoinCollectInfo.coin_total_num)
  return coin_total_num_;
}
void SceneGalleryCoinCollectInfo::set_coin_total_num(::google::protobuf::uint32 value) {
  
  coin_total_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCoinCollectInfo.coin_total_num)
}

// uint32 coin_collect_num = 2;
void SceneGalleryCoinCollectInfo::clear_coin_collect_num() {
  coin_collect_num_ = 0u;
}
::google::protobuf::uint32 SceneGalleryCoinCollectInfo::coin_collect_num() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryCoinCollectInfo.coin_collect_num)
  return coin_collect_num_;
}
void SceneGalleryCoinCollectInfo::set_coin_collect_num(::google::protobuf::uint32 value) {
  
  coin_collect_num_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryCoinCollectInfo.coin_collect_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryTeamChainInfo::kGalleryScoreEndTimeFieldNumber;
const int SceneGalleryTeamChainInfo::kCurTotalScoreFieldNumber;
const int SceneGalleryTeamChainInfo::kCurGalleryIdxFieldNumber;
const int SceneGalleryTeamChainInfo::kTotalTargetKillCntFieldNumber;
const int SceneGalleryTeamChainInfo::kKilledMonsterCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryTeamChainInfo::SceneGalleryTeamChainInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryTeamChainInfo)
}
SceneGalleryTeamChainInfo::SceneGalleryTeamChainInfo(const SceneGalleryTeamChainInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_gallery_idx_, &from.cur_gallery_idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&killed_monster_cnt_) -
    reinterpret_cast<char*>(&cur_gallery_idx_)) + sizeof(killed_monster_cnt_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryTeamChainInfo)
}

void SceneGalleryTeamChainInfo::SharedCtor() {
  ::memset(&cur_gallery_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&killed_monster_cnt_) -
      reinterpret_cast<char*>(&cur_gallery_idx_)) + sizeof(killed_monster_cnt_));
  _cached_size_ = 0;
}

SceneGalleryTeamChainInfo::~SceneGalleryTeamChainInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryTeamChainInfo)
  SharedDtor();
}

void SceneGalleryTeamChainInfo::SharedDtor() {
}

void SceneGalleryTeamChainInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryTeamChainInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryTeamChainInfo& SceneGalleryTeamChainInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryTeamChainInfo* SceneGalleryTeamChainInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryTeamChainInfo* n = new SceneGalleryTeamChainInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryTeamChainInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryTeamChainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cur_gallery_idx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&killed_monster_cnt_) -
      reinterpret_cast<char*>(&cur_gallery_idx_)) + sizeof(killed_monster_cnt_));
  _internal_metadata_.Clear();
}

bool SceneGalleryTeamChainInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryTeamChainInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cur_gallery_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_gallery_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_total_score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_total_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_target_kill_cnt = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_target_kill_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_monster_cnt = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_monster_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_score_end_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_score_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryTeamChainInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryTeamChainInfo)
  return false;
#undef DO_
}

void SceneGalleryTeamChainInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryTeamChainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_gallery_idx = 3;
  if (this->cur_gallery_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_gallery_idx(), output);
  }

  // uint32 cur_total_score = 7;
  if (this->cur_total_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_total_score(), output);
  }

  // uint32 total_target_kill_cnt = 10;
  if (this->total_target_kill_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->total_target_kill_cnt(), output);
  }

  // uint32 killed_monster_cnt = 12;
  if (this->killed_monster_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->killed_monster_cnt(), output);
  }

  // uint32 gallery_score_end_time = 14;
  if (this->gallery_score_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gallery_score_end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryTeamChainInfo)
}

::google::protobuf::uint8* SceneGalleryTeamChainInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryTeamChainInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_gallery_idx = 3;
  if (this->cur_gallery_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_gallery_idx(), target);
  }

  // uint32 cur_total_score = 7;
  if (this->cur_total_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_total_score(), target);
  }

  // uint32 total_target_kill_cnt = 10;
  if (this->total_target_kill_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->total_target_kill_cnt(), target);
  }

  // uint32 killed_monster_cnt = 12;
  if (this->killed_monster_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->killed_monster_cnt(), target);
  }

  // uint32 gallery_score_end_time = 14;
  if (this->gallery_score_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gallery_score_end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryTeamChainInfo)
  return target;
}

size_t SceneGalleryTeamChainInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryTeamChainInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 cur_gallery_idx = 3;
  if (this->cur_gallery_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_gallery_idx());
  }

  // uint32 cur_total_score = 7;
  if (this->cur_total_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_total_score());
  }

  // uint32 gallery_score_end_time = 14;
  if (this->gallery_score_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_score_end_time());
  }

  // uint32 total_target_kill_cnt = 10;
  if (this->total_target_kill_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_target_kill_cnt());
  }

  // uint32 killed_monster_cnt = 12;
  if (this->killed_monster_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_monster_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryTeamChainInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryTeamChainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryTeamChainInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryTeamChainInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryTeamChainInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryTeamChainInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryTeamChainInfo::MergeFrom(const SceneGalleryTeamChainInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryTeamChainInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cur_gallery_idx() != 0) {
    set_cur_gallery_idx(from.cur_gallery_idx());
  }
  if (from.cur_total_score() != 0) {
    set_cur_total_score(from.cur_total_score());
  }
  if (from.gallery_score_end_time() != 0) {
    set_gallery_score_end_time(from.gallery_score_end_time());
  }
  if (from.total_target_kill_cnt() != 0) {
    set_total_target_kill_cnt(from.total_target_kill_cnt());
  }
  if (from.killed_monster_cnt() != 0) {
    set_killed_monster_cnt(from.killed_monster_cnt());
  }
}

void SceneGalleryTeamChainInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryTeamChainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryTeamChainInfo::CopyFrom(const SceneGalleryTeamChainInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryTeamChainInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryTeamChainInfo::IsInitialized() const {
  return true;
}

void SceneGalleryTeamChainInfo::Swap(SceneGalleryTeamChainInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryTeamChainInfo::InternalSwap(SceneGalleryTeamChainInfo* other) {
  using std::swap;
  swap(cur_gallery_idx_, other->cur_gallery_idx_);
  swap(cur_total_score_, other->cur_total_score_);
  swap(gallery_score_end_time_, other->gallery_score_end_time_);
  swap(total_target_kill_cnt_, other->total_target_kill_cnt_);
  swap(killed_monster_cnt_, other->killed_monster_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryTeamChainInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryTeamChainInfo

// uint32 gallery_score_end_time = 14;
void SceneGalleryTeamChainInfo::clear_gallery_score_end_time() {
  gallery_score_end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryTeamChainInfo::gallery_score_end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryTeamChainInfo.gallery_score_end_time)
  return gallery_score_end_time_;
}
void SceneGalleryTeamChainInfo::set_gallery_score_end_time(::google::protobuf::uint32 value) {
  
  gallery_score_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryTeamChainInfo.gallery_score_end_time)
}

// uint32 cur_total_score = 7;
void SceneGalleryTeamChainInfo::clear_cur_total_score() {
  cur_total_score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryTeamChainInfo::cur_total_score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryTeamChainInfo.cur_total_score)
  return cur_total_score_;
}
void SceneGalleryTeamChainInfo::set_cur_total_score(::google::protobuf::uint32 value) {
  
  cur_total_score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryTeamChainInfo.cur_total_score)
}

// uint32 cur_gallery_idx = 3;
void SceneGalleryTeamChainInfo::clear_cur_gallery_idx() {
  cur_gallery_idx_ = 0u;
}
::google::protobuf::uint32 SceneGalleryTeamChainInfo::cur_gallery_idx() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryTeamChainInfo.cur_gallery_idx)
  return cur_gallery_idx_;
}
void SceneGalleryTeamChainInfo::set_cur_gallery_idx(::google::protobuf::uint32 value) {
  
  cur_gallery_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryTeamChainInfo.cur_gallery_idx)
}

// uint32 total_target_kill_cnt = 10;
void SceneGalleryTeamChainInfo::clear_total_target_kill_cnt() {
  total_target_kill_cnt_ = 0u;
}
::google::protobuf::uint32 SceneGalleryTeamChainInfo::total_target_kill_cnt() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryTeamChainInfo.total_target_kill_cnt)
  return total_target_kill_cnt_;
}
void SceneGalleryTeamChainInfo::set_total_target_kill_cnt(::google::protobuf::uint32 value) {
  
  total_target_kill_cnt_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryTeamChainInfo.total_target_kill_cnt)
}

// uint32 killed_monster_cnt = 12;
void SceneGalleryTeamChainInfo::clear_killed_monster_cnt() {
  killed_monster_cnt_ = 0u;
}
::google::protobuf::uint32 SceneGalleryTeamChainInfo::killed_monster_cnt() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryTeamChainInfo.killed_monster_cnt)
  return killed_monster_cnt_;
}
void SceneGalleryTeamChainInfo::set_killed_monster_cnt(::google::protobuf::uint32 value) {
  
  killed_monster_cnt_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryTeamChainInfo.killed_monster_cnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryInfo::kStageFieldNumber;
const int SceneGalleryInfo::kProgressInfoListFieldNumber;
const int SceneGalleryInfo::kGalleryIdFieldNumber;
const int SceneGalleryInfo::kStartTimeFieldNumber;
const int SceneGalleryInfo::kEndTimeFieldNumber;
const int SceneGalleryInfo::kOwnerUidFieldNumber;
const int SceneGalleryInfo::kPlayerCountFieldNumber;
const int SceneGalleryInfo::kPreStartEndTimeFieldNumber;
const int SceneGalleryInfo::kBalloonInfoFieldNumber;
const int SceneGalleryInfo::kFallInfoFieldNumber;
const int SceneGalleryInfo::kFlowerInfoFieldNumber;
const int SceneGalleryInfo::kBulletInfoFieldNumber;
const int SceneGalleryInfo::kBrokenFloorInfoFieldNumber;
const int SceneGalleryInfo::kHideAndSeekInfoFieldNumber;
const int SceneGalleryInfo::kBuoyantCombatInfoFieldNumber;
const int SceneGalleryInfo::kBounceConjuringInfoFieldNumber;
const int SceneGalleryInfo::kHandballInfoFieldNumber;
const int SceneGalleryInfo::kSumoInfoFieldNumber;
const int SceneGalleryInfo::kSalvagePreventInfoFieldNumber;
const int SceneGalleryInfo::kSalvageEscortInfoFieldNumber;
const int SceneGalleryInfo::kHomeBalloonInfoFieldNumber;
const int SceneGalleryInfo::kCrystalLinkInfoFieldNumber;
const int SceneGalleryInfo::kIrodoriMasterInfoFieldNumber;
const int SceneGalleryInfo::kLuminanceStoneChallengeInfoFieldNumber;
const int SceneGalleryInfo::kHomeSeekFurnitureInfoFieldNumber;
const int SceneGalleryInfo::kIslandPartyDownHillInfoFieldNumber;
const int SceneGalleryInfo::kSummerTimeV2BoatInfoFieldNumber;
const int SceneGalleryInfo::kIslandPartyRaftInfoFieldNumber;
const int SceneGalleryInfo::kIslandPartySailInfoFieldNumber;
const int SceneGalleryInfo::kInstableSprayInfoFieldNumber;
const int SceneGalleryInfo::kMuqadasPotionInfoFieldNumber;
const int SceneGalleryInfo::kTreasureSeelieInfoFieldNumber;
const int SceneGalleryInfo::kVintageHuntingInfoFieldNumber;
const int SceneGalleryInfo::kWindFieldInfoFieldNumber;
const int SceneGalleryInfo::kFungusFighterTrainingInfoFieldNumber;
const int SceneGalleryInfo::kEffigyChallengeInfoFieldNumber;
const int SceneGalleryInfo::kFungusFighterCaptureInfoFieldNumber;
const int SceneGalleryInfo::kCharAmusementInfoFieldNumber;
const int SceneGalleryInfo::kBrickBreakerInfoFieldNumber;
const int SceneGalleryInfo::kCoinCollectInfoFieldNumber;
const int SceneGalleryInfo::kTeamChainInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryInfo::SceneGalleryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryInfo)
}
SceneGalleryInfo::SceneGalleryInfo(const SceneGalleryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      progress_info_list_(from.progress_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_count_, &from.player_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&player_count_)) + sizeof(end_time_));
  clear_has_info();
  switch (from.info_case()) {
    case kBalloonInfo: {
      mutable_balloon_info()->::proto::SceneGalleryBalloonInfo::MergeFrom(from.balloon_info());
      break;
    }
    case kFallInfo: {
      mutable_fall_info()->::proto::SceneGalleryFallInfo::MergeFrom(from.fall_info());
      break;
    }
    case kFlowerInfo: {
      mutable_flower_info()->::proto::SceneGalleryFlowerInfo::MergeFrom(from.flower_info());
      break;
    }
    case kBulletInfo: {
      mutable_bullet_info()->::proto::SceneGalleryBulletInfo::MergeFrom(from.bullet_info());
      break;
    }
    case kBrokenFloorInfo: {
      mutable_broken_floor_info()->::proto::SceneGalleryBrokenFloorInfo::MergeFrom(from.broken_floor_info());
      break;
    }
    case kHideAndSeekInfo: {
      mutable_hide_and_seek_info()->::proto::SceneGalleryHideAndSeekInfo::MergeFrom(from.hide_and_seek_info());
      break;
    }
    case kBuoyantCombatInfo: {
      mutable_buoyant_combat_info()->::proto::SceneGalleryBuoyantCombatInfo::MergeFrom(from.buoyant_combat_info());
      break;
    }
    case kBounceConjuringInfo: {
      mutable_bounce_conjuring_info()->::proto::SceneGalleryBounceConjuringInfo::MergeFrom(from.bounce_conjuring_info());
      break;
    }
    case kHandballInfo: {
      mutable_handball_info()->::proto::SceneGalleryHandballInfo::MergeFrom(from.handball_info());
      break;
    }
    case kSumoInfo: {
      mutable_sumo_info()->::proto::SceneGallerySumoInfo::MergeFrom(from.sumo_info());
      break;
    }
    case kSalvagePreventInfo: {
      mutable_salvage_prevent_info()->::proto::SceneGallerySalvagePreventInfo::MergeFrom(from.salvage_prevent_info());
      break;
    }
    case kSalvageEscortInfo: {
      mutable_salvage_escort_info()->::proto::SceneGallerySalvageEscortInfo::MergeFrom(from.salvage_escort_info());
      break;
    }
    case kHomeBalloonInfo: {
      mutable_home_balloon_info()->::proto::SceneGalleryHomeBalloonInfo::MergeFrom(from.home_balloon_info());
      break;
    }
    case kCrystalLinkInfo: {
      mutable_crystal_link_info()->::proto::SceneGalleryCrystalLinkInfo::MergeFrom(from.crystal_link_info());
      break;
    }
    case kIrodoriMasterInfo: {
      mutable_irodori_master_info()->::proto::SceneGalleryIrodoriMasterInfo::MergeFrom(from.irodori_master_info());
      break;
    }
    case kLuminanceStoneChallengeInfo: {
      mutable_luminance_stone_challenge_info()->::proto::SceneGalleryLuminanceStoneChallengeInfo::MergeFrom(from.luminance_stone_challenge_info());
      break;
    }
    case kHomeSeekFurnitureInfo: {
      mutable_home_seek_furniture_info()->::proto::SceneGalleryHomeSeekFurnitureInfo::MergeFrom(from.home_seek_furniture_info());
      break;
    }
    case kIslandPartyDownHillInfo: {
      mutable_island_party_down_hill_info()->::proto::SceneGalleryIslandPartyDownHillInfo::MergeFrom(from.island_party_down_hill_info());
      break;
    }
    case kSummerTimeV2BoatInfo: {
      mutable_summer_time_v2_boat_info()->::proto::SceneGallerySummerTimeV2BoatInfo::MergeFrom(from.summer_time_v2_boat_info());
      break;
    }
    case kIslandPartyRaftInfo: {
      mutable_island_party_raft_info()->::proto::SceneGalleryIslandPartyRaftInfo::MergeFrom(from.island_party_raft_info());
      break;
    }
    case kIslandPartySailInfo: {
      mutable_island_party_sail_info()->::proto::SceneGalleryIslandPartySailInfo::MergeFrom(from.island_party_sail_info());
      break;
    }
    case kInstableSprayInfo: {
      mutable_instable_spray_info()->::proto::SceneGalleryInstaleSprayInfo::MergeFrom(from.instable_spray_info());
      break;
    }
    case kMuqadasPotionInfo: {
      mutable_muqadas_potion_info()->::proto::SceneGalleryMuqadasPotionInfo::MergeFrom(from.muqadas_potion_info());
      break;
    }
    case kTreasureSeelieInfo: {
      mutable_treasure_seelie_info()->::proto::SceneGalleryTreasureSeelieInfo::MergeFrom(from.treasure_seelie_info());
      break;
    }
    case kVintageHuntingInfo: {
      mutable_vintage_hunting_info()->::proto::SceneGalleryVintageHuntingInfo::MergeFrom(from.vintage_hunting_info());
      break;
    }
    case kWindFieldInfo: {
      mutable_wind_field_info()->::proto::SceneGalleryWindFieldInfo::MergeFrom(from.wind_field_info());
      break;
    }
    case kFungusFighterTrainingInfo: {
      mutable_fungus_fighter_training_info()->::proto::SceneGalleryFungusFighterTrainingInfo::MergeFrom(from.fungus_fighter_training_info());
      break;
    }
    case kEffigyChallengeInfo: {
      mutable_effigy_challenge_info()->::proto::SceneGalleryEffigyChallengeV2Info::MergeFrom(from.effigy_challenge_info());
      break;
    }
    case kFungusFighterCaptureInfo: {
      mutable_fungus_fighter_capture_info()->::proto::SceneGalleryFungusFighterCaptureInfo::MergeFrom(from.fungus_fighter_capture_info());
      break;
    }
    case kCharAmusementInfo: {
      mutable_char_amusement_info()->::proto::SceneGalleryCharAmusementInfo::MergeFrom(from.char_amusement_info());
      break;
    }
    case kBrickBreakerInfo: {
      mutable_brick_breaker_info()->::proto::SceneGalleryBrickBreakerInfo::MergeFrom(from.brick_breaker_info());
      break;
    }
    case kCoinCollectInfo: {
      mutable_coin_collect_info()->::proto::SceneGalleryCoinCollectInfo::MergeFrom(from.coin_collect_info());
      break;
    }
    case kTeamChainInfo: {
      mutable_team_chain_info()->::proto::SceneGalleryTeamChainInfo::MergeFrom(from.team_chain_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryInfo)
}

void SceneGalleryInfo::SharedCtor() {
  ::memset(&player_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&player_count_)) + sizeof(end_time_));
  clear_has_info();
  _cached_size_ = 0;
}

SceneGalleryInfo::~SceneGalleryInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryInfo)
  SharedDtor();
}

void SceneGalleryInfo::SharedDtor() {
  if (has_info()) {
    clear_info();
  }
}

void SceneGalleryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryInfo& SceneGalleryInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryInfo* SceneGalleryInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryInfo* n = new SceneGalleryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryInfo::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:proto.SceneGalleryInfo)
  switch (info_case()) {
    case kBalloonInfo: {
      delete info_.balloon_info_;
      break;
    }
    case kFallInfo: {
      delete info_.fall_info_;
      break;
    }
    case kFlowerInfo: {
      delete info_.flower_info_;
      break;
    }
    case kBulletInfo: {
      delete info_.bullet_info_;
      break;
    }
    case kBrokenFloorInfo: {
      delete info_.broken_floor_info_;
      break;
    }
    case kHideAndSeekInfo: {
      delete info_.hide_and_seek_info_;
      break;
    }
    case kBuoyantCombatInfo: {
      delete info_.buoyant_combat_info_;
      break;
    }
    case kBounceConjuringInfo: {
      delete info_.bounce_conjuring_info_;
      break;
    }
    case kHandballInfo: {
      delete info_.handball_info_;
      break;
    }
    case kSumoInfo: {
      delete info_.sumo_info_;
      break;
    }
    case kSalvagePreventInfo: {
      delete info_.salvage_prevent_info_;
      break;
    }
    case kSalvageEscortInfo: {
      delete info_.salvage_escort_info_;
      break;
    }
    case kHomeBalloonInfo: {
      delete info_.home_balloon_info_;
      break;
    }
    case kCrystalLinkInfo: {
      delete info_.crystal_link_info_;
      break;
    }
    case kIrodoriMasterInfo: {
      delete info_.irodori_master_info_;
      break;
    }
    case kLuminanceStoneChallengeInfo: {
      delete info_.luminance_stone_challenge_info_;
      break;
    }
    case kHomeSeekFurnitureInfo: {
      delete info_.home_seek_furniture_info_;
      break;
    }
    case kIslandPartyDownHillInfo: {
      delete info_.island_party_down_hill_info_;
      break;
    }
    case kSummerTimeV2BoatInfo: {
      delete info_.summer_time_v2_boat_info_;
      break;
    }
    case kIslandPartyRaftInfo: {
      delete info_.island_party_raft_info_;
      break;
    }
    case kIslandPartySailInfo: {
      delete info_.island_party_sail_info_;
      break;
    }
    case kInstableSprayInfo: {
      delete info_.instable_spray_info_;
      break;
    }
    case kMuqadasPotionInfo: {
      delete info_.muqadas_potion_info_;
      break;
    }
    case kTreasureSeelieInfo: {
      delete info_.treasure_seelie_info_;
      break;
    }
    case kVintageHuntingInfo: {
      delete info_.vintage_hunting_info_;
      break;
    }
    case kWindFieldInfo: {
      delete info_.wind_field_info_;
      break;
    }
    case kFungusFighterTrainingInfo: {
      delete info_.fungus_fighter_training_info_;
      break;
    }
    case kEffigyChallengeInfo: {
      delete info_.effigy_challenge_info_;
      break;
    }
    case kFungusFighterCaptureInfo: {
      delete info_.fungus_fighter_capture_info_;
      break;
    }
    case kCharAmusementInfo: {
      delete info_.char_amusement_info_;
      break;
    }
    case kBrickBreakerInfo: {
      delete info_.brick_breaker_info_;
      break;
    }
    case kCoinCollectInfo: {
      delete info_.coin_collect_info_;
      break;
    }
    case kTeamChainInfo: {
      delete info_.team_chain_info_;
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_NOT_SET;
}


void SceneGalleryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_info_list_.Clear();
  ::memset(&player_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&player_count_)) + sizeof(end_time_));
  clear_info();
  _internal_metadata_.Clear();
}

bool SceneGalleryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.SceneGalleryProgressInfo progress_info_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progress_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStageType stage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage(static_cast< ::proto::GalleryStageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryHideAndSeekInfo hide_and_seek_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hide_and_seek_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryFallInfo fall_info = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fall_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryFlowerInfo flower_info = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flower_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 owner_uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryBrokenFloorInfo broken_floor_info = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_broken_floor_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryBulletInfo bullet_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bullet_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryBalloonInfo balloon_info = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balloon_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pre_start_end_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_start_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 106;
      case 106: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 850 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_luminance_stone_challenge_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryVintageHuntingInfo vintage_hunting_info = 254;
      case 254: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 2034 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vintage_hunting_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 296;
      case 296: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2370 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summer_time_v2_boat_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 422;
      case 422: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 3378 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fungus_fighter_capture_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 462;
      case 462: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 3698 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_island_party_down_hill_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryBounceConjuringInfo bounce_conjuring_info = 708;
      case 708: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 5666 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bounce_conjuring_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGallerySalvageEscortInfo salvage_escort_info = 759;
      case 759: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 6074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salvage_escort_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGallerySumoInfo sumo_info = 811;
      case 811: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 6490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sumo_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryMuqadasPotionInfo muqadas_potion_info = 865;
      case 865: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 6922 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_muqadas_potion_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 882;
      case 882: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 7058 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effigy_challenge_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryHomeBalloonInfo home_balloon_info = 1034;
      case 1034: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 8274 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_home_balloon_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryWindFieldInfo wind_field_info = 1080;
      case 1080: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 8642 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wind_field_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryCharAmusementInfo char_amusement_info = 1086;
      case 1086: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(242u /* 8690 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_char_amusement_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryIslandPartySailInfo island_party_sail_info = 1133;
      case 1133: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 9066 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_island_party_sail_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryInstaleSprayInfo instable_spray_info = 1196;
      case 1196: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 9570 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instable_spray_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 1328;
      case 1328: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 10626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fungus_fighter_training_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1384;
      case 1384: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 11074 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buoyant_combat_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryBrickBreakerInfo brick_breaker_info = 1425;
      case 1425: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 11402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brick_breaker_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 1456;
      case 1456: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 11650 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_home_seek_furniture_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryTeamChainInfo team_chain_info = 1495;
      case 1495: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(186u /* 11962 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_chain_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryTreasureSeelieInfo treasure_seelie_info = 1525;
      case 1525: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u /* 12202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_treasure_seelie_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryCoinCollectInfo coin_collect_info = 1574;
      case 1574: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 12594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_coin_collect_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGallerySalvagePreventInfo salvage_prevent_info = 1700;
      case 1700: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 13602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_salvage_prevent_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryIslandPartyRaftInfo island_party_raft_info = 1805;
      case 1805: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 14442 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_island_party_raft_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryIrodoriMasterInfo irodori_master_info = 1953;
      case 1953: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 15626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_irodori_master_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryHandballInfo handball_info = 1997;
      case 1997: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 15978 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_handball_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SceneGalleryCrystalLinkInfo crystal_link_info = 2004;
      case 2004: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u /* 16034 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crystal_link_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryInfo)
  return false;
#undef DO_
}

void SceneGalleryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_count = 1;
  if (this->player_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_count(), output);
  }

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gallery_id(), output);
  }

  // uint32 start_time = 3;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // repeated .proto.SceneGalleryProgressInfo progress_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->progress_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->progress_info_list(static_cast<int>(i)), output);
  }

  // .proto.GalleryStageType stage = 5;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->stage(), output);
  }

  // .proto.SceneGalleryHideAndSeekInfo hide_and_seek_info = 6;
  if (has_hide_and_seek_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *info_.hide_and_seek_info_, output);
  }

  // .proto.SceneGalleryFallInfo fall_info = 7;
  if (has_fall_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *info_.fall_info_, output);
  }

  // .proto.SceneGalleryFlowerInfo flower_info = 8;
  if (has_flower_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *info_.flower_info_, output);
  }

  // uint32 owner_uid = 9;
  if (this->owner_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->owner_uid(), output);
  }

  // .proto.SceneGalleryBrokenFloorInfo broken_floor_info = 10;
  if (has_broken_floor_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *info_.broken_floor_info_, output);
  }

  // uint32 end_time = 11;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->end_time(), output);
  }

  // .proto.SceneGalleryBulletInfo bullet_info = 13;
  if (has_bullet_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *info_.bullet_info_, output);
  }

  // .proto.SceneGalleryBalloonInfo balloon_info = 14;
  if (has_balloon_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *info_.balloon_info_, output);
  }

  // uint32 pre_start_end_time = 15;
  if (this->pre_start_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->pre_start_end_time(), output);
  }

  // .proto.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 106;
  if (has_luminance_stone_challenge_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, *info_.luminance_stone_challenge_info_, output);
  }

  // .proto.SceneGalleryVintageHuntingInfo vintage_hunting_info = 254;
  if (has_vintage_hunting_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      254, *info_.vintage_hunting_info_, output);
  }

  // .proto.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 296;
  if (has_summer_time_v2_boat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      296, *info_.summer_time_v2_boat_info_, output);
  }

  // .proto.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 422;
  if (has_fungus_fighter_capture_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      422, *info_.fungus_fighter_capture_info_, output);
  }

  // .proto.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 462;
  if (has_island_party_down_hill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      462, *info_.island_party_down_hill_info_, output);
  }

  // .proto.SceneGalleryBounceConjuringInfo bounce_conjuring_info = 708;
  if (has_bounce_conjuring_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      708, *info_.bounce_conjuring_info_, output);
  }

  // .proto.SceneGallerySalvageEscortInfo salvage_escort_info = 759;
  if (has_salvage_escort_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      759, *info_.salvage_escort_info_, output);
  }

  // .proto.SceneGallerySumoInfo sumo_info = 811;
  if (has_sumo_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      811, *info_.sumo_info_, output);
  }

  // .proto.SceneGalleryMuqadasPotionInfo muqadas_potion_info = 865;
  if (has_muqadas_potion_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      865, *info_.muqadas_potion_info_, output);
  }

  // .proto.SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 882;
  if (has_effigy_challenge_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      882, *info_.effigy_challenge_info_, output);
  }

  // .proto.SceneGalleryHomeBalloonInfo home_balloon_info = 1034;
  if (has_home_balloon_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1034, *info_.home_balloon_info_, output);
  }

  // .proto.SceneGalleryWindFieldInfo wind_field_info = 1080;
  if (has_wind_field_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1080, *info_.wind_field_info_, output);
  }

  // .proto.SceneGalleryCharAmusementInfo char_amusement_info = 1086;
  if (has_char_amusement_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1086, *info_.char_amusement_info_, output);
  }

  // .proto.SceneGalleryIslandPartySailInfo island_party_sail_info = 1133;
  if (has_island_party_sail_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1133, *info_.island_party_sail_info_, output);
  }

  // .proto.SceneGalleryInstaleSprayInfo instable_spray_info = 1196;
  if (has_instable_spray_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1196, *info_.instable_spray_info_, output);
  }

  // .proto.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 1328;
  if (has_fungus_fighter_training_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1328, *info_.fungus_fighter_training_info_, output);
  }

  // .proto.SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1384;
  if (has_buoyant_combat_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1384, *info_.buoyant_combat_info_, output);
  }

  // .proto.SceneGalleryBrickBreakerInfo brick_breaker_info = 1425;
  if (has_brick_breaker_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1425, *info_.brick_breaker_info_, output);
  }

  // .proto.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 1456;
  if (has_home_seek_furniture_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1456, *info_.home_seek_furniture_info_, output);
  }

  // .proto.SceneGalleryTeamChainInfo team_chain_info = 1495;
  if (has_team_chain_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1495, *info_.team_chain_info_, output);
  }

  // .proto.SceneGalleryTreasureSeelieInfo treasure_seelie_info = 1525;
  if (has_treasure_seelie_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1525, *info_.treasure_seelie_info_, output);
  }

  // .proto.SceneGalleryCoinCollectInfo coin_collect_info = 1574;
  if (has_coin_collect_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1574, *info_.coin_collect_info_, output);
  }

  // .proto.SceneGallerySalvagePreventInfo salvage_prevent_info = 1700;
  if (has_salvage_prevent_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1700, *info_.salvage_prevent_info_, output);
  }

  // .proto.SceneGalleryIslandPartyRaftInfo island_party_raft_info = 1805;
  if (has_island_party_raft_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1805, *info_.island_party_raft_info_, output);
  }

  // .proto.SceneGalleryIrodoriMasterInfo irodori_master_info = 1953;
  if (has_irodori_master_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1953, *info_.irodori_master_info_, output);
  }

  // .proto.SceneGalleryHandballInfo handball_info = 1997;
  if (has_handball_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1997, *info_.handball_info_, output);
  }

  // .proto.SceneGalleryCrystalLinkInfo crystal_link_info = 2004;
  if (has_crystal_link_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2004, *info_.crystal_link_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryInfo)
}

::google::protobuf::uint8* SceneGalleryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_count = 1;
  if (this->player_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_count(), target);
  }

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gallery_id(), target);
  }

  // uint32 start_time = 3;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // repeated .proto.SceneGalleryProgressInfo progress_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->progress_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->progress_info_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.GalleryStageType stage = 5;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->stage(), target);
  }

  // .proto.SceneGalleryHideAndSeekInfo hide_and_seek_info = 6;
  if (has_hide_and_seek_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *info_.hide_and_seek_info_, deterministic, target);
  }

  // .proto.SceneGalleryFallInfo fall_info = 7;
  if (has_fall_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *info_.fall_info_, deterministic, target);
  }

  // .proto.SceneGalleryFlowerInfo flower_info = 8;
  if (has_flower_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *info_.flower_info_, deterministic, target);
  }

  // uint32 owner_uid = 9;
  if (this->owner_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->owner_uid(), target);
  }

  // .proto.SceneGalleryBrokenFloorInfo broken_floor_info = 10;
  if (has_broken_floor_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *info_.broken_floor_info_, deterministic, target);
  }

  // uint32 end_time = 11;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->end_time(), target);
  }

  // .proto.SceneGalleryBulletInfo bullet_info = 13;
  if (has_bullet_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *info_.bullet_info_, deterministic, target);
  }

  // .proto.SceneGalleryBalloonInfo balloon_info = 14;
  if (has_balloon_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *info_.balloon_info_, deterministic, target);
  }

  // uint32 pre_start_end_time = 15;
  if (this->pre_start_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->pre_start_end_time(), target);
  }

  // .proto.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 106;
  if (has_luminance_stone_challenge_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        106, *info_.luminance_stone_challenge_info_, deterministic, target);
  }

  // .proto.SceneGalleryVintageHuntingInfo vintage_hunting_info = 254;
  if (has_vintage_hunting_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        254, *info_.vintage_hunting_info_, deterministic, target);
  }

  // .proto.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 296;
  if (has_summer_time_v2_boat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        296, *info_.summer_time_v2_boat_info_, deterministic, target);
  }

  // .proto.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 422;
  if (has_fungus_fighter_capture_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        422, *info_.fungus_fighter_capture_info_, deterministic, target);
  }

  // .proto.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 462;
  if (has_island_party_down_hill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        462, *info_.island_party_down_hill_info_, deterministic, target);
  }

  // .proto.SceneGalleryBounceConjuringInfo bounce_conjuring_info = 708;
  if (has_bounce_conjuring_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        708, *info_.bounce_conjuring_info_, deterministic, target);
  }

  // .proto.SceneGallerySalvageEscortInfo salvage_escort_info = 759;
  if (has_salvage_escort_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        759, *info_.salvage_escort_info_, deterministic, target);
  }

  // .proto.SceneGallerySumoInfo sumo_info = 811;
  if (has_sumo_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        811, *info_.sumo_info_, deterministic, target);
  }

  // .proto.SceneGalleryMuqadasPotionInfo muqadas_potion_info = 865;
  if (has_muqadas_potion_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        865, *info_.muqadas_potion_info_, deterministic, target);
  }

  // .proto.SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 882;
  if (has_effigy_challenge_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        882, *info_.effigy_challenge_info_, deterministic, target);
  }

  // .proto.SceneGalleryHomeBalloonInfo home_balloon_info = 1034;
  if (has_home_balloon_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1034, *info_.home_balloon_info_, deterministic, target);
  }

  // .proto.SceneGalleryWindFieldInfo wind_field_info = 1080;
  if (has_wind_field_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1080, *info_.wind_field_info_, deterministic, target);
  }

  // .proto.SceneGalleryCharAmusementInfo char_amusement_info = 1086;
  if (has_char_amusement_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1086, *info_.char_amusement_info_, deterministic, target);
  }

  // .proto.SceneGalleryIslandPartySailInfo island_party_sail_info = 1133;
  if (has_island_party_sail_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1133, *info_.island_party_sail_info_, deterministic, target);
  }

  // .proto.SceneGalleryInstaleSprayInfo instable_spray_info = 1196;
  if (has_instable_spray_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1196, *info_.instable_spray_info_, deterministic, target);
  }

  // .proto.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 1328;
  if (has_fungus_fighter_training_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1328, *info_.fungus_fighter_training_info_, deterministic, target);
  }

  // .proto.SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1384;
  if (has_buoyant_combat_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1384, *info_.buoyant_combat_info_, deterministic, target);
  }

  // .proto.SceneGalleryBrickBreakerInfo brick_breaker_info = 1425;
  if (has_brick_breaker_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1425, *info_.brick_breaker_info_, deterministic, target);
  }

  // .proto.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 1456;
  if (has_home_seek_furniture_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1456, *info_.home_seek_furniture_info_, deterministic, target);
  }

  // .proto.SceneGalleryTeamChainInfo team_chain_info = 1495;
  if (has_team_chain_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1495, *info_.team_chain_info_, deterministic, target);
  }

  // .proto.SceneGalleryTreasureSeelieInfo treasure_seelie_info = 1525;
  if (has_treasure_seelie_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1525, *info_.treasure_seelie_info_, deterministic, target);
  }

  // .proto.SceneGalleryCoinCollectInfo coin_collect_info = 1574;
  if (has_coin_collect_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1574, *info_.coin_collect_info_, deterministic, target);
  }

  // .proto.SceneGallerySalvagePreventInfo salvage_prevent_info = 1700;
  if (has_salvage_prevent_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1700, *info_.salvage_prevent_info_, deterministic, target);
  }

  // .proto.SceneGalleryIslandPartyRaftInfo island_party_raft_info = 1805;
  if (has_island_party_raft_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1805, *info_.island_party_raft_info_, deterministic, target);
  }

  // .proto.SceneGalleryIrodoriMasterInfo irodori_master_info = 1953;
  if (has_irodori_master_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1953, *info_.irodori_master_info_, deterministic, target);
  }

  // .proto.SceneGalleryHandballInfo handball_info = 1997;
  if (has_handball_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1997, *info_.handball_info_, deterministic, target);
  }

  // .proto.SceneGalleryCrystalLinkInfo crystal_link_info = 2004;
  if (has_crystal_link_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2004, *info_.crystal_link_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryInfo)
  return target;
}

size_t SceneGalleryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.SceneGalleryProgressInfo progress_info_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->progress_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progress_info_list(static_cast<int>(i)));
    }
  }

  // uint32 player_count = 1;
  if (this->player_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_count());
  }

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 start_time = 3;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // .proto.GalleryStageType stage = 5;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  // uint32 pre_start_end_time = 15;
  if (this->pre_start_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pre_start_end_time());
  }

  // uint32 owner_uid = 9;
  if (this->owner_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_uid());
  }

  // uint32 end_time = 11;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  switch (info_case()) {
    // .proto.SceneGalleryBalloonInfo balloon_info = 14;
    case kBalloonInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.balloon_info_);
      break;
    }
    // .proto.SceneGalleryFallInfo fall_info = 7;
    case kFallInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.fall_info_);
      break;
    }
    // .proto.SceneGalleryFlowerInfo flower_info = 8;
    case kFlowerInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.flower_info_);
      break;
    }
    // .proto.SceneGalleryBulletInfo bullet_info = 13;
    case kBulletInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.bullet_info_);
      break;
    }
    // .proto.SceneGalleryBrokenFloorInfo broken_floor_info = 10;
    case kBrokenFloorInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.broken_floor_info_);
      break;
    }
    // .proto.SceneGalleryHideAndSeekInfo hide_and_seek_info = 6;
    case kHideAndSeekInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.hide_and_seek_info_);
      break;
    }
    // .proto.SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1384;
    case kBuoyantCombatInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.buoyant_combat_info_);
      break;
    }
    // .proto.SceneGalleryBounceConjuringInfo bounce_conjuring_info = 708;
    case kBounceConjuringInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.bounce_conjuring_info_);
      break;
    }
    // .proto.SceneGalleryHandballInfo handball_info = 1997;
    case kHandballInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.handball_info_);
      break;
    }
    // .proto.SceneGallerySumoInfo sumo_info = 811;
    case kSumoInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.sumo_info_);
      break;
    }
    // .proto.SceneGallerySalvagePreventInfo salvage_prevent_info = 1700;
    case kSalvagePreventInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.salvage_prevent_info_);
      break;
    }
    // .proto.SceneGallerySalvageEscortInfo salvage_escort_info = 759;
    case kSalvageEscortInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.salvage_escort_info_);
      break;
    }
    // .proto.SceneGalleryHomeBalloonInfo home_balloon_info = 1034;
    case kHomeBalloonInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.home_balloon_info_);
      break;
    }
    // .proto.SceneGalleryCrystalLinkInfo crystal_link_info = 2004;
    case kCrystalLinkInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.crystal_link_info_);
      break;
    }
    // .proto.SceneGalleryIrodoriMasterInfo irodori_master_info = 1953;
    case kIrodoriMasterInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.irodori_master_info_);
      break;
    }
    // .proto.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 106;
    case kLuminanceStoneChallengeInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.luminance_stone_challenge_info_);
      break;
    }
    // .proto.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 1456;
    case kHomeSeekFurnitureInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.home_seek_furniture_info_);
      break;
    }
    // .proto.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 462;
    case kIslandPartyDownHillInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.island_party_down_hill_info_);
      break;
    }
    // .proto.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 296;
    case kSummerTimeV2BoatInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.summer_time_v2_boat_info_);
      break;
    }
    // .proto.SceneGalleryIslandPartyRaftInfo island_party_raft_info = 1805;
    case kIslandPartyRaftInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.island_party_raft_info_);
      break;
    }
    // .proto.SceneGalleryIslandPartySailInfo island_party_sail_info = 1133;
    case kIslandPartySailInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.island_party_sail_info_);
      break;
    }
    // .proto.SceneGalleryInstaleSprayInfo instable_spray_info = 1196;
    case kInstableSprayInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.instable_spray_info_);
      break;
    }
    // .proto.SceneGalleryMuqadasPotionInfo muqadas_potion_info = 865;
    case kMuqadasPotionInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.muqadas_potion_info_);
      break;
    }
    // .proto.SceneGalleryTreasureSeelieInfo treasure_seelie_info = 1525;
    case kTreasureSeelieInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.treasure_seelie_info_);
      break;
    }
    // .proto.SceneGalleryVintageHuntingInfo vintage_hunting_info = 254;
    case kVintageHuntingInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.vintage_hunting_info_);
      break;
    }
    // .proto.SceneGalleryWindFieldInfo wind_field_info = 1080;
    case kWindFieldInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.wind_field_info_);
      break;
    }
    // .proto.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 1328;
    case kFungusFighterTrainingInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.fungus_fighter_training_info_);
      break;
    }
    // .proto.SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 882;
    case kEffigyChallengeInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.effigy_challenge_info_);
      break;
    }
    // .proto.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 422;
    case kFungusFighterCaptureInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.fungus_fighter_capture_info_);
      break;
    }
    // .proto.SceneGalleryCharAmusementInfo char_amusement_info = 1086;
    case kCharAmusementInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.char_amusement_info_);
      break;
    }
    // .proto.SceneGalleryBrickBreakerInfo brick_breaker_info = 1425;
    case kBrickBreakerInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.brick_breaker_info_);
      break;
    }
    // .proto.SceneGalleryCoinCollectInfo coin_collect_info = 1574;
    case kCoinCollectInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.coin_collect_info_);
      break;
    }
    // .proto.SceneGalleryTeamChainInfo team_chain_info = 1495;
    case kTeamChainInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.team_chain_info_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryInfo::MergeFrom(const SceneGalleryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  progress_info_list_.MergeFrom(from.progress_info_list_);
  if (from.player_count() != 0) {
    set_player_count(from.player_count());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.pre_start_end_time() != 0) {
    set_pre_start_end_time(from.pre_start_end_time());
  }
  if (from.owner_uid() != 0) {
    set_owner_uid(from.owner_uid());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  switch (from.info_case()) {
    case kBalloonInfo: {
      mutable_balloon_info()->::proto::SceneGalleryBalloonInfo::MergeFrom(from.balloon_info());
      break;
    }
    case kFallInfo: {
      mutable_fall_info()->::proto::SceneGalleryFallInfo::MergeFrom(from.fall_info());
      break;
    }
    case kFlowerInfo: {
      mutable_flower_info()->::proto::SceneGalleryFlowerInfo::MergeFrom(from.flower_info());
      break;
    }
    case kBulletInfo: {
      mutable_bullet_info()->::proto::SceneGalleryBulletInfo::MergeFrom(from.bullet_info());
      break;
    }
    case kBrokenFloorInfo: {
      mutable_broken_floor_info()->::proto::SceneGalleryBrokenFloorInfo::MergeFrom(from.broken_floor_info());
      break;
    }
    case kHideAndSeekInfo: {
      mutable_hide_and_seek_info()->::proto::SceneGalleryHideAndSeekInfo::MergeFrom(from.hide_and_seek_info());
      break;
    }
    case kBuoyantCombatInfo: {
      mutable_buoyant_combat_info()->::proto::SceneGalleryBuoyantCombatInfo::MergeFrom(from.buoyant_combat_info());
      break;
    }
    case kBounceConjuringInfo: {
      mutable_bounce_conjuring_info()->::proto::SceneGalleryBounceConjuringInfo::MergeFrom(from.bounce_conjuring_info());
      break;
    }
    case kHandballInfo: {
      mutable_handball_info()->::proto::SceneGalleryHandballInfo::MergeFrom(from.handball_info());
      break;
    }
    case kSumoInfo: {
      mutable_sumo_info()->::proto::SceneGallerySumoInfo::MergeFrom(from.sumo_info());
      break;
    }
    case kSalvagePreventInfo: {
      mutable_salvage_prevent_info()->::proto::SceneGallerySalvagePreventInfo::MergeFrom(from.salvage_prevent_info());
      break;
    }
    case kSalvageEscortInfo: {
      mutable_salvage_escort_info()->::proto::SceneGallerySalvageEscortInfo::MergeFrom(from.salvage_escort_info());
      break;
    }
    case kHomeBalloonInfo: {
      mutable_home_balloon_info()->::proto::SceneGalleryHomeBalloonInfo::MergeFrom(from.home_balloon_info());
      break;
    }
    case kCrystalLinkInfo: {
      mutable_crystal_link_info()->::proto::SceneGalleryCrystalLinkInfo::MergeFrom(from.crystal_link_info());
      break;
    }
    case kIrodoriMasterInfo: {
      mutable_irodori_master_info()->::proto::SceneGalleryIrodoriMasterInfo::MergeFrom(from.irodori_master_info());
      break;
    }
    case kLuminanceStoneChallengeInfo: {
      mutable_luminance_stone_challenge_info()->::proto::SceneGalleryLuminanceStoneChallengeInfo::MergeFrom(from.luminance_stone_challenge_info());
      break;
    }
    case kHomeSeekFurnitureInfo: {
      mutable_home_seek_furniture_info()->::proto::SceneGalleryHomeSeekFurnitureInfo::MergeFrom(from.home_seek_furniture_info());
      break;
    }
    case kIslandPartyDownHillInfo: {
      mutable_island_party_down_hill_info()->::proto::SceneGalleryIslandPartyDownHillInfo::MergeFrom(from.island_party_down_hill_info());
      break;
    }
    case kSummerTimeV2BoatInfo: {
      mutable_summer_time_v2_boat_info()->::proto::SceneGallerySummerTimeV2BoatInfo::MergeFrom(from.summer_time_v2_boat_info());
      break;
    }
    case kIslandPartyRaftInfo: {
      mutable_island_party_raft_info()->::proto::SceneGalleryIslandPartyRaftInfo::MergeFrom(from.island_party_raft_info());
      break;
    }
    case kIslandPartySailInfo: {
      mutable_island_party_sail_info()->::proto::SceneGalleryIslandPartySailInfo::MergeFrom(from.island_party_sail_info());
      break;
    }
    case kInstableSprayInfo: {
      mutable_instable_spray_info()->::proto::SceneGalleryInstaleSprayInfo::MergeFrom(from.instable_spray_info());
      break;
    }
    case kMuqadasPotionInfo: {
      mutable_muqadas_potion_info()->::proto::SceneGalleryMuqadasPotionInfo::MergeFrom(from.muqadas_potion_info());
      break;
    }
    case kTreasureSeelieInfo: {
      mutable_treasure_seelie_info()->::proto::SceneGalleryTreasureSeelieInfo::MergeFrom(from.treasure_seelie_info());
      break;
    }
    case kVintageHuntingInfo: {
      mutable_vintage_hunting_info()->::proto::SceneGalleryVintageHuntingInfo::MergeFrom(from.vintage_hunting_info());
      break;
    }
    case kWindFieldInfo: {
      mutable_wind_field_info()->::proto::SceneGalleryWindFieldInfo::MergeFrom(from.wind_field_info());
      break;
    }
    case kFungusFighterTrainingInfo: {
      mutable_fungus_fighter_training_info()->::proto::SceneGalleryFungusFighterTrainingInfo::MergeFrom(from.fungus_fighter_training_info());
      break;
    }
    case kEffigyChallengeInfo: {
      mutable_effigy_challenge_info()->::proto::SceneGalleryEffigyChallengeV2Info::MergeFrom(from.effigy_challenge_info());
      break;
    }
    case kFungusFighterCaptureInfo: {
      mutable_fungus_fighter_capture_info()->::proto::SceneGalleryFungusFighterCaptureInfo::MergeFrom(from.fungus_fighter_capture_info());
      break;
    }
    case kCharAmusementInfo: {
      mutable_char_amusement_info()->::proto::SceneGalleryCharAmusementInfo::MergeFrom(from.char_amusement_info());
      break;
    }
    case kBrickBreakerInfo: {
      mutable_brick_breaker_info()->::proto::SceneGalleryBrickBreakerInfo::MergeFrom(from.brick_breaker_info());
      break;
    }
    case kCoinCollectInfo: {
      mutable_coin_collect_info()->::proto::SceneGalleryCoinCollectInfo::MergeFrom(from.coin_collect_info());
      break;
    }
    case kTeamChainInfo: {
      mutable_team_chain_info()->::proto::SceneGalleryTeamChainInfo::MergeFrom(from.team_chain_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
}

void SceneGalleryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryInfo::CopyFrom(const SceneGalleryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryInfo::IsInitialized() const {
  return true;
}

void SceneGalleryInfo::Swap(SceneGalleryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryInfo::InternalSwap(SceneGalleryInfo* other) {
  using std::swap;
  progress_info_list_.InternalSwap(&other->progress_info_list_);
  swap(player_count_, other->player_count_);
  swap(gallery_id_, other->gallery_id_);
  swap(start_time_, other->start_time_);
  swap(stage_, other->stage_);
  swap(pre_start_end_time_, other->pre_start_end_time_);
  swap(owner_uid_, other->owner_uid_);
  swap(end_time_, other->end_time_);
  swap(info_, other->info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryInfo

// .proto.GalleryStageType stage = 5;
void SceneGalleryInfo::clear_stage() {
  stage_ = 0;
}
::proto::GalleryStageType SceneGalleryInfo::stage() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.stage)
  return static_cast< ::proto::GalleryStageType >(stage_);
}
void SceneGalleryInfo::set_stage(::proto::GalleryStageType value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInfo.stage)
}

// repeated .proto.SceneGalleryProgressInfo progress_info_list = 4;
int SceneGalleryInfo::progress_info_list_size() const {
  return progress_info_list_.size();
}
void SceneGalleryInfo::clear_progress_info_list() {
  progress_info_list_.Clear();
}
const ::proto::SceneGalleryProgressInfo& SceneGalleryInfo::progress_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.progress_info_list)
  return progress_info_list_.Get(index);
}
::proto::SceneGalleryProgressInfo* SceneGalleryInfo::mutable_progress_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.progress_info_list)
  return progress_info_list_.Mutable(index);
}
::proto::SceneGalleryProgressInfo* SceneGalleryInfo::add_progress_info_list() {
  // @@protoc_insertion_point(field_add:proto.SceneGalleryInfo.progress_info_list)
  return progress_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::SceneGalleryProgressInfo >*
SceneGalleryInfo::mutable_progress_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.SceneGalleryInfo.progress_info_list)
  return &progress_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::SceneGalleryProgressInfo >&
SceneGalleryInfo::progress_info_list() const {
  // @@protoc_insertion_point(field_list:proto.SceneGalleryInfo.progress_info_list)
  return progress_info_list_;
}

// uint32 gallery_id = 2;
void SceneGalleryInfo::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInfo::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.gallery_id)
  return gallery_id_;
}
void SceneGalleryInfo::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInfo.gallery_id)
}

// uint32 start_time = 3;
void SceneGalleryInfo::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.start_time)
  return start_time_;
}
void SceneGalleryInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInfo.start_time)
}

// uint32 end_time = 11;
void SceneGalleryInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.end_time)
  return end_time_;
}
void SceneGalleryInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInfo.end_time)
}

// uint32 owner_uid = 9;
void SceneGalleryInfo::clear_owner_uid() {
  owner_uid_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInfo::owner_uid() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.owner_uid)
  return owner_uid_;
}
void SceneGalleryInfo::set_owner_uid(::google::protobuf::uint32 value) {
  
  owner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInfo.owner_uid)
}

// uint32 player_count = 1;
void SceneGalleryInfo::clear_player_count() {
  player_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInfo::player_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.player_count)
  return player_count_;
}
void SceneGalleryInfo::set_player_count(::google::protobuf::uint32 value) {
  
  player_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInfo.player_count)
}

// uint32 pre_start_end_time = 15;
void SceneGalleryInfo::clear_pre_start_end_time() {
  pre_start_end_time_ = 0u;
}
::google::protobuf::uint32 SceneGalleryInfo::pre_start_end_time() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.pre_start_end_time)
  return pre_start_end_time_;
}
void SceneGalleryInfo::set_pre_start_end_time(::google::protobuf::uint32 value) {
  
  pre_start_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryInfo.pre_start_end_time)
}

// .proto.SceneGalleryBalloonInfo balloon_info = 14;
bool SceneGalleryInfo::has_balloon_info() const {
  return info_case() == kBalloonInfo;
}
void SceneGalleryInfo::set_has_balloon_info() {
  _oneof_case_[0] = kBalloonInfo;
}
void SceneGalleryInfo::clear_balloon_info() {
  if (has_balloon_info()) {
    delete info_.balloon_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryBalloonInfo& SceneGalleryInfo::balloon_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.balloon_info)
  return has_balloon_info()
      ? *info_.balloon_info_
      : ::proto::SceneGalleryBalloonInfo::default_instance();
}
::proto::SceneGalleryBalloonInfo* SceneGalleryInfo::mutable_balloon_info() {
  if (!has_balloon_info()) {
    clear_info();
    set_has_balloon_info();
    info_.balloon_info_ = new ::proto::SceneGalleryBalloonInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.balloon_info)
  return info_.balloon_info_;
}
::proto::SceneGalleryBalloonInfo* SceneGalleryInfo::release_balloon_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.balloon_info)
  if (has_balloon_info()) {
    clear_has_info();
    ::proto::SceneGalleryBalloonInfo* temp = info_.balloon_info_;
    info_.balloon_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_balloon_info(::proto::SceneGalleryBalloonInfo* balloon_info) {
  clear_info();
  if (balloon_info) {
    set_has_balloon_info();
    info_.balloon_info_ = balloon_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.balloon_info)
}

// .proto.SceneGalleryFallInfo fall_info = 7;
bool SceneGalleryInfo::has_fall_info() const {
  return info_case() == kFallInfo;
}
void SceneGalleryInfo::set_has_fall_info() {
  _oneof_case_[0] = kFallInfo;
}
void SceneGalleryInfo::clear_fall_info() {
  if (has_fall_info()) {
    delete info_.fall_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryFallInfo& SceneGalleryInfo::fall_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.fall_info)
  return has_fall_info()
      ? *info_.fall_info_
      : ::proto::SceneGalleryFallInfo::default_instance();
}
::proto::SceneGalleryFallInfo* SceneGalleryInfo::mutable_fall_info() {
  if (!has_fall_info()) {
    clear_info();
    set_has_fall_info();
    info_.fall_info_ = new ::proto::SceneGalleryFallInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.fall_info)
  return info_.fall_info_;
}
::proto::SceneGalleryFallInfo* SceneGalleryInfo::release_fall_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.fall_info)
  if (has_fall_info()) {
    clear_has_info();
    ::proto::SceneGalleryFallInfo* temp = info_.fall_info_;
    info_.fall_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_fall_info(::proto::SceneGalleryFallInfo* fall_info) {
  clear_info();
  if (fall_info) {
    set_has_fall_info();
    info_.fall_info_ = fall_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.fall_info)
}

// .proto.SceneGalleryFlowerInfo flower_info = 8;
bool SceneGalleryInfo::has_flower_info() const {
  return info_case() == kFlowerInfo;
}
void SceneGalleryInfo::set_has_flower_info() {
  _oneof_case_[0] = kFlowerInfo;
}
void SceneGalleryInfo::clear_flower_info() {
  if (has_flower_info()) {
    delete info_.flower_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryFlowerInfo& SceneGalleryInfo::flower_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.flower_info)
  return has_flower_info()
      ? *info_.flower_info_
      : ::proto::SceneGalleryFlowerInfo::default_instance();
}
::proto::SceneGalleryFlowerInfo* SceneGalleryInfo::mutable_flower_info() {
  if (!has_flower_info()) {
    clear_info();
    set_has_flower_info();
    info_.flower_info_ = new ::proto::SceneGalleryFlowerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.flower_info)
  return info_.flower_info_;
}
::proto::SceneGalleryFlowerInfo* SceneGalleryInfo::release_flower_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.flower_info)
  if (has_flower_info()) {
    clear_has_info();
    ::proto::SceneGalleryFlowerInfo* temp = info_.flower_info_;
    info_.flower_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_flower_info(::proto::SceneGalleryFlowerInfo* flower_info) {
  clear_info();
  if (flower_info) {
    set_has_flower_info();
    info_.flower_info_ = flower_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.flower_info)
}

// .proto.SceneGalleryBulletInfo bullet_info = 13;
bool SceneGalleryInfo::has_bullet_info() const {
  return info_case() == kBulletInfo;
}
void SceneGalleryInfo::set_has_bullet_info() {
  _oneof_case_[0] = kBulletInfo;
}
void SceneGalleryInfo::clear_bullet_info() {
  if (has_bullet_info()) {
    delete info_.bullet_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryBulletInfo& SceneGalleryInfo::bullet_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.bullet_info)
  return has_bullet_info()
      ? *info_.bullet_info_
      : ::proto::SceneGalleryBulletInfo::default_instance();
}
::proto::SceneGalleryBulletInfo* SceneGalleryInfo::mutable_bullet_info() {
  if (!has_bullet_info()) {
    clear_info();
    set_has_bullet_info();
    info_.bullet_info_ = new ::proto::SceneGalleryBulletInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.bullet_info)
  return info_.bullet_info_;
}
::proto::SceneGalleryBulletInfo* SceneGalleryInfo::release_bullet_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.bullet_info)
  if (has_bullet_info()) {
    clear_has_info();
    ::proto::SceneGalleryBulletInfo* temp = info_.bullet_info_;
    info_.bullet_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_bullet_info(::proto::SceneGalleryBulletInfo* bullet_info) {
  clear_info();
  if (bullet_info) {
    set_has_bullet_info();
    info_.bullet_info_ = bullet_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.bullet_info)
}

// .proto.SceneGalleryBrokenFloorInfo broken_floor_info = 10;
bool SceneGalleryInfo::has_broken_floor_info() const {
  return info_case() == kBrokenFloorInfo;
}
void SceneGalleryInfo::set_has_broken_floor_info() {
  _oneof_case_[0] = kBrokenFloorInfo;
}
void SceneGalleryInfo::clear_broken_floor_info() {
  if (has_broken_floor_info()) {
    delete info_.broken_floor_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryBrokenFloorInfo& SceneGalleryInfo::broken_floor_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.broken_floor_info)
  return has_broken_floor_info()
      ? *info_.broken_floor_info_
      : ::proto::SceneGalleryBrokenFloorInfo::default_instance();
}
::proto::SceneGalleryBrokenFloorInfo* SceneGalleryInfo::mutable_broken_floor_info() {
  if (!has_broken_floor_info()) {
    clear_info();
    set_has_broken_floor_info();
    info_.broken_floor_info_ = new ::proto::SceneGalleryBrokenFloorInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.broken_floor_info)
  return info_.broken_floor_info_;
}
::proto::SceneGalleryBrokenFloorInfo* SceneGalleryInfo::release_broken_floor_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.broken_floor_info)
  if (has_broken_floor_info()) {
    clear_has_info();
    ::proto::SceneGalleryBrokenFloorInfo* temp = info_.broken_floor_info_;
    info_.broken_floor_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_broken_floor_info(::proto::SceneGalleryBrokenFloorInfo* broken_floor_info) {
  clear_info();
  if (broken_floor_info) {
    set_has_broken_floor_info();
    info_.broken_floor_info_ = broken_floor_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.broken_floor_info)
}

// .proto.SceneGalleryHideAndSeekInfo hide_and_seek_info = 6;
bool SceneGalleryInfo::has_hide_and_seek_info() const {
  return info_case() == kHideAndSeekInfo;
}
void SceneGalleryInfo::set_has_hide_and_seek_info() {
  _oneof_case_[0] = kHideAndSeekInfo;
}
void SceneGalleryInfo::clear_hide_and_seek_info() {
  if (has_hide_and_seek_info()) {
    delete info_.hide_and_seek_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryHideAndSeekInfo& SceneGalleryInfo::hide_and_seek_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.hide_and_seek_info)
  return has_hide_and_seek_info()
      ? *info_.hide_and_seek_info_
      : ::proto::SceneGalleryHideAndSeekInfo::default_instance();
}
::proto::SceneGalleryHideAndSeekInfo* SceneGalleryInfo::mutable_hide_and_seek_info() {
  if (!has_hide_and_seek_info()) {
    clear_info();
    set_has_hide_and_seek_info();
    info_.hide_and_seek_info_ = new ::proto::SceneGalleryHideAndSeekInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.hide_and_seek_info)
  return info_.hide_and_seek_info_;
}
::proto::SceneGalleryHideAndSeekInfo* SceneGalleryInfo::release_hide_and_seek_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.hide_and_seek_info)
  if (has_hide_and_seek_info()) {
    clear_has_info();
    ::proto::SceneGalleryHideAndSeekInfo* temp = info_.hide_and_seek_info_;
    info_.hide_and_seek_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_hide_and_seek_info(::proto::SceneGalleryHideAndSeekInfo* hide_and_seek_info) {
  clear_info();
  if (hide_and_seek_info) {
    set_has_hide_and_seek_info();
    info_.hide_and_seek_info_ = hide_and_seek_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.hide_and_seek_info)
}

// .proto.SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1384;
bool SceneGalleryInfo::has_buoyant_combat_info() const {
  return info_case() == kBuoyantCombatInfo;
}
void SceneGalleryInfo::set_has_buoyant_combat_info() {
  _oneof_case_[0] = kBuoyantCombatInfo;
}
void SceneGalleryInfo::clear_buoyant_combat_info() {
  if (has_buoyant_combat_info()) {
    delete info_.buoyant_combat_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryBuoyantCombatInfo& SceneGalleryInfo::buoyant_combat_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.buoyant_combat_info)
  return has_buoyant_combat_info()
      ? *info_.buoyant_combat_info_
      : ::proto::SceneGalleryBuoyantCombatInfo::default_instance();
}
::proto::SceneGalleryBuoyantCombatInfo* SceneGalleryInfo::mutable_buoyant_combat_info() {
  if (!has_buoyant_combat_info()) {
    clear_info();
    set_has_buoyant_combat_info();
    info_.buoyant_combat_info_ = new ::proto::SceneGalleryBuoyantCombatInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.buoyant_combat_info)
  return info_.buoyant_combat_info_;
}
::proto::SceneGalleryBuoyantCombatInfo* SceneGalleryInfo::release_buoyant_combat_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.buoyant_combat_info)
  if (has_buoyant_combat_info()) {
    clear_has_info();
    ::proto::SceneGalleryBuoyantCombatInfo* temp = info_.buoyant_combat_info_;
    info_.buoyant_combat_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_buoyant_combat_info(::proto::SceneGalleryBuoyantCombatInfo* buoyant_combat_info) {
  clear_info();
  if (buoyant_combat_info) {
    set_has_buoyant_combat_info();
    info_.buoyant_combat_info_ = buoyant_combat_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.buoyant_combat_info)
}

// .proto.SceneGalleryBounceConjuringInfo bounce_conjuring_info = 708;
bool SceneGalleryInfo::has_bounce_conjuring_info() const {
  return info_case() == kBounceConjuringInfo;
}
void SceneGalleryInfo::set_has_bounce_conjuring_info() {
  _oneof_case_[0] = kBounceConjuringInfo;
}
void SceneGalleryInfo::clear_bounce_conjuring_info() {
  if (has_bounce_conjuring_info()) {
    delete info_.bounce_conjuring_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryBounceConjuringInfo& SceneGalleryInfo::bounce_conjuring_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.bounce_conjuring_info)
  return has_bounce_conjuring_info()
      ? *info_.bounce_conjuring_info_
      : ::proto::SceneGalleryBounceConjuringInfo::default_instance();
}
::proto::SceneGalleryBounceConjuringInfo* SceneGalleryInfo::mutable_bounce_conjuring_info() {
  if (!has_bounce_conjuring_info()) {
    clear_info();
    set_has_bounce_conjuring_info();
    info_.bounce_conjuring_info_ = new ::proto::SceneGalleryBounceConjuringInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.bounce_conjuring_info)
  return info_.bounce_conjuring_info_;
}
::proto::SceneGalleryBounceConjuringInfo* SceneGalleryInfo::release_bounce_conjuring_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.bounce_conjuring_info)
  if (has_bounce_conjuring_info()) {
    clear_has_info();
    ::proto::SceneGalleryBounceConjuringInfo* temp = info_.bounce_conjuring_info_;
    info_.bounce_conjuring_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_bounce_conjuring_info(::proto::SceneGalleryBounceConjuringInfo* bounce_conjuring_info) {
  clear_info();
  if (bounce_conjuring_info) {
    set_has_bounce_conjuring_info();
    info_.bounce_conjuring_info_ = bounce_conjuring_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.bounce_conjuring_info)
}

// .proto.SceneGalleryHandballInfo handball_info = 1997;
bool SceneGalleryInfo::has_handball_info() const {
  return info_case() == kHandballInfo;
}
void SceneGalleryInfo::set_has_handball_info() {
  _oneof_case_[0] = kHandballInfo;
}
void SceneGalleryInfo::clear_handball_info() {
  if (has_handball_info()) {
    delete info_.handball_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryHandballInfo& SceneGalleryInfo::handball_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.handball_info)
  return has_handball_info()
      ? *info_.handball_info_
      : ::proto::SceneGalleryHandballInfo::default_instance();
}
::proto::SceneGalleryHandballInfo* SceneGalleryInfo::mutable_handball_info() {
  if (!has_handball_info()) {
    clear_info();
    set_has_handball_info();
    info_.handball_info_ = new ::proto::SceneGalleryHandballInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.handball_info)
  return info_.handball_info_;
}
::proto::SceneGalleryHandballInfo* SceneGalleryInfo::release_handball_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.handball_info)
  if (has_handball_info()) {
    clear_has_info();
    ::proto::SceneGalleryHandballInfo* temp = info_.handball_info_;
    info_.handball_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_handball_info(::proto::SceneGalleryHandballInfo* handball_info) {
  clear_info();
  if (handball_info) {
    set_has_handball_info();
    info_.handball_info_ = handball_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.handball_info)
}

// .proto.SceneGallerySumoInfo sumo_info = 811;
bool SceneGalleryInfo::has_sumo_info() const {
  return info_case() == kSumoInfo;
}
void SceneGalleryInfo::set_has_sumo_info() {
  _oneof_case_[0] = kSumoInfo;
}
void SceneGalleryInfo::clear_sumo_info() {
  if (has_sumo_info()) {
    delete info_.sumo_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGallerySumoInfo& SceneGalleryInfo::sumo_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.sumo_info)
  return has_sumo_info()
      ? *info_.sumo_info_
      : ::proto::SceneGallerySumoInfo::default_instance();
}
::proto::SceneGallerySumoInfo* SceneGalleryInfo::mutable_sumo_info() {
  if (!has_sumo_info()) {
    clear_info();
    set_has_sumo_info();
    info_.sumo_info_ = new ::proto::SceneGallerySumoInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.sumo_info)
  return info_.sumo_info_;
}
::proto::SceneGallerySumoInfo* SceneGalleryInfo::release_sumo_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.sumo_info)
  if (has_sumo_info()) {
    clear_has_info();
    ::proto::SceneGallerySumoInfo* temp = info_.sumo_info_;
    info_.sumo_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_sumo_info(::proto::SceneGallerySumoInfo* sumo_info) {
  clear_info();
  if (sumo_info) {
    set_has_sumo_info();
    info_.sumo_info_ = sumo_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.sumo_info)
}

// .proto.SceneGallerySalvagePreventInfo salvage_prevent_info = 1700;
bool SceneGalleryInfo::has_salvage_prevent_info() const {
  return info_case() == kSalvagePreventInfo;
}
void SceneGalleryInfo::set_has_salvage_prevent_info() {
  _oneof_case_[0] = kSalvagePreventInfo;
}
void SceneGalleryInfo::clear_salvage_prevent_info() {
  if (has_salvage_prevent_info()) {
    delete info_.salvage_prevent_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGallerySalvagePreventInfo& SceneGalleryInfo::salvage_prevent_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.salvage_prevent_info)
  return has_salvage_prevent_info()
      ? *info_.salvage_prevent_info_
      : ::proto::SceneGallerySalvagePreventInfo::default_instance();
}
::proto::SceneGallerySalvagePreventInfo* SceneGalleryInfo::mutable_salvage_prevent_info() {
  if (!has_salvage_prevent_info()) {
    clear_info();
    set_has_salvage_prevent_info();
    info_.salvage_prevent_info_ = new ::proto::SceneGallerySalvagePreventInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.salvage_prevent_info)
  return info_.salvage_prevent_info_;
}
::proto::SceneGallerySalvagePreventInfo* SceneGalleryInfo::release_salvage_prevent_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.salvage_prevent_info)
  if (has_salvage_prevent_info()) {
    clear_has_info();
    ::proto::SceneGallerySalvagePreventInfo* temp = info_.salvage_prevent_info_;
    info_.salvage_prevent_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_salvage_prevent_info(::proto::SceneGallerySalvagePreventInfo* salvage_prevent_info) {
  clear_info();
  if (salvage_prevent_info) {
    set_has_salvage_prevent_info();
    info_.salvage_prevent_info_ = salvage_prevent_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.salvage_prevent_info)
}

// .proto.SceneGallerySalvageEscortInfo salvage_escort_info = 759;
bool SceneGalleryInfo::has_salvage_escort_info() const {
  return info_case() == kSalvageEscortInfo;
}
void SceneGalleryInfo::set_has_salvage_escort_info() {
  _oneof_case_[0] = kSalvageEscortInfo;
}
void SceneGalleryInfo::clear_salvage_escort_info() {
  if (has_salvage_escort_info()) {
    delete info_.salvage_escort_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGallerySalvageEscortInfo& SceneGalleryInfo::salvage_escort_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.salvage_escort_info)
  return has_salvage_escort_info()
      ? *info_.salvage_escort_info_
      : ::proto::SceneGallerySalvageEscortInfo::default_instance();
}
::proto::SceneGallerySalvageEscortInfo* SceneGalleryInfo::mutable_salvage_escort_info() {
  if (!has_salvage_escort_info()) {
    clear_info();
    set_has_salvage_escort_info();
    info_.salvage_escort_info_ = new ::proto::SceneGallerySalvageEscortInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.salvage_escort_info)
  return info_.salvage_escort_info_;
}
::proto::SceneGallerySalvageEscortInfo* SceneGalleryInfo::release_salvage_escort_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.salvage_escort_info)
  if (has_salvage_escort_info()) {
    clear_has_info();
    ::proto::SceneGallerySalvageEscortInfo* temp = info_.salvage_escort_info_;
    info_.salvage_escort_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_salvage_escort_info(::proto::SceneGallerySalvageEscortInfo* salvage_escort_info) {
  clear_info();
  if (salvage_escort_info) {
    set_has_salvage_escort_info();
    info_.salvage_escort_info_ = salvage_escort_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.salvage_escort_info)
}

// .proto.SceneGalleryHomeBalloonInfo home_balloon_info = 1034;
bool SceneGalleryInfo::has_home_balloon_info() const {
  return info_case() == kHomeBalloonInfo;
}
void SceneGalleryInfo::set_has_home_balloon_info() {
  _oneof_case_[0] = kHomeBalloonInfo;
}
void SceneGalleryInfo::clear_home_balloon_info() {
  if (has_home_balloon_info()) {
    delete info_.home_balloon_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryHomeBalloonInfo& SceneGalleryInfo::home_balloon_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.home_balloon_info)
  return has_home_balloon_info()
      ? *info_.home_balloon_info_
      : ::proto::SceneGalleryHomeBalloonInfo::default_instance();
}
::proto::SceneGalleryHomeBalloonInfo* SceneGalleryInfo::mutable_home_balloon_info() {
  if (!has_home_balloon_info()) {
    clear_info();
    set_has_home_balloon_info();
    info_.home_balloon_info_ = new ::proto::SceneGalleryHomeBalloonInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.home_balloon_info)
  return info_.home_balloon_info_;
}
::proto::SceneGalleryHomeBalloonInfo* SceneGalleryInfo::release_home_balloon_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.home_balloon_info)
  if (has_home_balloon_info()) {
    clear_has_info();
    ::proto::SceneGalleryHomeBalloonInfo* temp = info_.home_balloon_info_;
    info_.home_balloon_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_home_balloon_info(::proto::SceneGalleryHomeBalloonInfo* home_balloon_info) {
  clear_info();
  if (home_balloon_info) {
    set_has_home_balloon_info();
    info_.home_balloon_info_ = home_balloon_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.home_balloon_info)
}

// .proto.SceneGalleryCrystalLinkInfo crystal_link_info = 2004;
bool SceneGalleryInfo::has_crystal_link_info() const {
  return info_case() == kCrystalLinkInfo;
}
void SceneGalleryInfo::set_has_crystal_link_info() {
  _oneof_case_[0] = kCrystalLinkInfo;
}
void SceneGalleryInfo::clear_crystal_link_info() {
  if (has_crystal_link_info()) {
    delete info_.crystal_link_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryCrystalLinkInfo& SceneGalleryInfo::crystal_link_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.crystal_link_info)
  return has_crystal_link_info()
      ? *info_.crystal_link_info_
      : ::proto::SceneGalleryCrystalLinkInfo::default_instance();
}
::proto::SceneGalleryCrystalLinkInfo* SceneGalleryInfo::mutable_crystal_link_info() {
  if (!has_crystal_link_info()) {
    clear_info();
    set_has_crystal_link_info();
    info_.crystal_link_info_ = new ::proto::SceneGalleryCrystalLinkInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.crystal_link_info)
  return info_.crystal_link_info_;
}
::proto::SceneGalleryCrystalLinkInfo* SceneGalleryInfo::release_crystal_link_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.crystal_link_info)
  if (has_crystal_link_info()) {
    clear_has_info();
    ::proto::SceneGalleryCrystalLinkInfo* temp = info_.crystal_link_info_;
    info_.crystal_link_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_crystal_link_info(::proto::SceneGalleryCrystalLinkInfo* crystal_link_info) {
  clear_info();
  if (crystal_link_info) {
    set_has_crystal_link_info();
    info_.crystal_link_info_ = crystal_link_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.crystal_link_info)
}

// .proto.SceneGalleryIrodoriMasterInfo irodori_master_info = 1953;
bool SceneGalleryInfo::has_irodori_master_info() const {
  return info_case() == kIrodoriMasterInfo;
}
void SceneGalleryInfo::set_has_irodori_master_info() {
  _oneof_case_[0] = kIrodoriMasterInfo;
}
void SceneGalleryInfo::clear_irodori_master_info() {
  if (has_irodori_master_info()) {
    delete info_.irodori_master_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryIrodoriMasterInfo& SceneGalleryInfo::irodori_master_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.irodori_master_info)
  return has_irodori_master_info()
      ? *info_.irodori_master_info_
      : ::proto::SceneGalleryIrodoriMasterInfo::default_instance();
}
::proto::SceneGalleryIrodoriMasterInfo* SceneGalleryInfo::mutable_irodori_master_info() {
  if (!has_irodori_master_info()) {
    clear_info();
    set_has_irodori_master_info();
    info_.irodori_master_info_ = new ::proto::SceneGalleryIrodoriMasterInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.irodori_master_info)
  return info_.irodori_master_info_;
}
::proto::SceneGalleryIrodoriMasterInfo* SceneGalleryInfo::release_irodori_master_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.irodori_master_info)
  if (has_irodori_master_info()) {
    clear_has_info();
    ::proto::SceneGalleryIrodoriMasterInfo* temp = info_.irodori_master_info_;
    info_.irodori_master_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_irodori_master_info(::proto::SceneGalleryIrodoriMasterInfo* irodori_master_info) {
  clear_info();
  if (irodori_master_info) {
    set_has_irodori_master_info();
    info_.irodori_master_info_ = irodori_master_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.irodori_master_info)
}

// .proto.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 106;
bool SceneGalleryInfo::has_luminance_stone_challenge_info() const {
  return info_case() == kLuminanceStoneChallengeInfo;
}
void SceneGalleryInfo::set_has_luminance_stone_challenge_info() {
  _oneof_case_[0] = kLuminanceStoneChallengeInfo;
}
void SceneGalleryInfo::clear_luminance_stone_challenge_info() {
  if (has_luminance_stone_challenge_info()) {
    delete info_.luminance_stone_challenge_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryLuminanceStoneChallengeInfo& SceneGalleryInfo::luminance_stone_challenge_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.luminance_stone_challenge_info)
  return has_luminance_stone_challenge_info()
      ? *info_.luminance_stone_challenge_info_
      : ::proto::SceneGalleryLuminanceStoneChallengeInfo::default_instance();
}
::proto::SceneGalleryLuminanceStoneChallengeInfo* SceneGalleryInfo::mutable_luminance_stone_challenge_info() {
  if (!has_luminance_stone_challenge_info()) {
    clear_info();
    set_has_luminance_stone_challenge_info();
    info_.luminance_stone_challenge_info_ = new ::proto::SceneGalleryLuminanceStoneChallengeInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.luminance_stone_challenge_info)
  return info_.luminance_stone_challenge_info_;
}
::proto::SceneGalleryLuminanceStoneChallengeInfo* SceneGalleryInfo::release_luminance_stone_challenge_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.luminance_stone_challenge_info)
  if (has_luminance_stone_challenge_info()) {
    clear_has_info();
    ::proto::SceneGalleryLuminanceStoneChallengeInfo* temp = info_.luminance_stone_challenge_info_;
    info_.luminance_stone_challenge_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_luminance_stone_challenge_info(::proto::SceneGalleryLuminanceStoneChallengeInfo* luminance_stone_challenge_info) {
  clear_info();
  if (luminance_stone_challenge_info) {
    set_has_luminance_stone_challenge_info();
    info_.luminance_stone_challenge_info_ = luminance_stone_challenge_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.luminance_stone_challenge_info)
}

// .proto.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 1456;
bool SceneGalleryInfo::has_home_seek_furniture_info() const {
  return info_case() == kHomeSeekFurnitureInfo;
}
void SceneGalleryInfo::set_has_home_seek_furniture_info() {
  _oneof_case_[0] = kHomeSeekFurnitureInfo;
}
void SceneGalleryInfo::clear_home_seek_furniture_info() {
  if (has_home_seek_furniture_info()) {
    delete info_.home_seek_furniture_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryHomeSeekFurnitureInfo& SceneGalleryInfo::home_seek_furniture_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.home_seek_furniture_info)
  return has_home_seek_furniture_info()
      ? *info_.home_seek_furniture_info_
      : ::proto::SceneGalleryHomeSeekFurnitureInfo::default_instance();
}
::proto::SceneGalleryHomeSeekFurnitureInfo* SceneGalleryInfo::mutable_home_seek_furniture_info() {
  if (!has_home_seek_furniture_info()) {
    clear_info();
    set_has_home_seek_furniture_info();
    info_.home_seek_furniture_info_ = new ::proto::SceneGalleryHomeSeekFurnitureInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.home_seek_furniture_info)
  return info_.home_seek_furniture_info_;
}
::proto::SceneGalleryHomeSeekFurnitureInfo* SceneGalleryInfo::release_home_seek_furniture_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.home_seek_furniture_info)
  if (has_home_seek_furniture_info()) {
    clear_has_info();
    ::proto::SceneGalleryHomeSeekFurnitureInfo* temp = info_.home_seek_furniture_info_;
    info_.home_seek_furniture_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_home_seek_furniture_info(::proto::SceneGalleryHomeSeekFurnitureInfo* home_seek_furniture_info) {
  clear_info();
  if (home_seek_furniture_info) {
    set_has_home_seek_furniture_info();
    info_.home_seek_furniture_info_ = home_seek_furniture_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.home_seek_furniture_info)
}

// .proto.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 462;
bool SceneGalleryInfo::has_island_party_down_hill_info() const {
  return info_case() == kIslandPartyDownHillInfo;
}
void SceneGalleryInfo::set_has_island_party_down_hill_info() {
  _oneof_case_[0] = kIslandPartyDownHillInfo;
}
void SceneGalleryInfo::clear_island_party_down_hill_info() {
  if (has_island_party_down_hill_info()) {
    delete info_.island_party_down_hill_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryIslandPartyDownHillInfo& SceneGalleryInfo::island_party_down_hill_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.island_party_down_hill_info)
  return has_island_party_down_hill_info()
      ? *info_.island_party_down_hill_info_
      : ::proto::SceneGalleryIslandPartyDownHillInfo::default_instance();
}
::proto::SceneGalleryIslandPartyDownHillInfo* SceneGalleryInfo::mutable_island_party_down_hill_info() {
  if (!has_island_party_down_hill_info()) {
    clear_info();
    set_has_island_party_down_hill_info();
    info_.island_party_down_hill_info_ = new ::proto::SceneGalleryIslandPartyDownHillInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.island_party_down_hill_info)
  return info_.island_party_down_hill_info_;
}
::proto::SceneGalleryIslandPartyDownHillInfo* SceneGalleryInfo::release_island_party_down_hill_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.island_party_down_hill_info)
  if (has_island_party_down_hill_info()) {
    clear_has_info();
    ::proto::SceneGalleryIslandPartyDownHillInfo* temp = info_.island_party_down_hill_info_;
    info_.island_party_down_hill_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_island_party_down_hill_info(::proto::SceneGalleryIslandPartyDownHillInfo* island_party_down_hill_info) {
  clear_info();
  if (island_party_down_hill_info) {
    set_has_island_party_down_hill_info();
    info_.island_party_down_hill_info_ = island_party_down_hill_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.island_party_down_hill_info)
}

// .proto.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 296;
bool SceneGalleryInfo::has_summer_time_v2_boat_info() const {
  return info_case() == kSummerTimeV2BoatInfo;
}
void SceneGalleryInfo::set_has_summer_time_v2_boat_info() {
  _oneof_case_[0] = kSummerTimeV2BoatInfo;
}
void SceneGalleryInfo::clear_summer_time_v2_boat_info() {
  if (has_summer_time_v2_boat_info()) {
    delete info_.summer_time_v2_boat_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGallerySummerTimeV2BoatInfo& SceneGalleryInfo::summer_time_v2_boat_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.summer_time_v2_boat_info)
  return has_summer_time_v2_boat_info()
      ? *info_.summer_time_v2_boat_info_
      : ::proto::SceneGallerySummerTimeV2BoatInfo::default_instance();
}
::proto::SceneGallerySummerTimeV2BoatInfo* SceneGalleryInfo::mutable_summer_time_v2_boat_info() {
  if (!has_summer_time_v2_boat_info()) {
    clear_info();
    set_has_summer_time_v2_boat_info();
    info_.summer_time_v2_boat_info_ = new ::proto::SceneGallerySummerTimeV2BoatInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.summer_time_v2_boat_info)
  return info_.summer_time_v2_boat_info_;
}
::proto::SceneGallerySummerTimeV2BoatInfo* SceneGalleryInfo::release_summer_time_v2_boat_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.summer_time_v2_boat_info)
  if (has_summer_time_v2_boat_info()) {
    clear_has_info();
    ::proto::SceneGallerySummerTimeV2BoatInfo* temp = info_.summer_time_v2_boat_info_;
    info_.summer_time_v2_boat_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_summer_time_v2_boat_info(::proto::SceneGallerySummerTimeV2BoatInfo* summer_time_v2_boat_info) {
  clear_info();
  if (summer_time_v2_boat_info) {
    set_has_summer_time_v2_boat_info();
    info_.summer_time_v2_boat_info_ = summer_time_v2_boat_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.summer_time_v2_boat_info)
}

// .proto.SceneGalleryIslandPartyRaftInfo island_party_raft_info = 1805;
bool SceneGalleryInfo::has_island_party_raft_info() const {
  return info_case() == kIslandPartyRaftInfo;
}
void SceneGalleryInfo::set_has_island_party_raft_info() {
  _oneof_case_[0] = kIslandPartyRaftInfo;
}
void SceneGalleryInfo::clear_island_party_raft_info() {
  if (has_island_party_raft_info()) {
    delete info_.island_party_raft_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryIslandPartyRaftInfo& SceneGalleryInfo::island_party_raft_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.island_party_raft_info)
  return has_island_party_raft_info()
      ? *info_.island_party_raft_info_
      : ::proto::SceneGalleryIslandPartyRaftInfo::default_instance();
}
::proto::SceneGalleryIslandPartyRaftInfo* SceneGalleryInfo::mutable_island_party_raft_info() {
  if (!has_island_party_raft_info()) {
    clear_info();
    set_has_island_party_raft_info();
    info_.island_party_raft_info_ = new ::proto::SceneGalleryIslandPartyRaftInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.island_party_raft_info)
  return info_.island_party_raft_info_;
}
::proto::SceneGalleryIslandPartyRaftInfo* SceneGalleryInfo::release_island_party_raft_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.island_party_raft_info)
  if (has_island_party_raft_info()) {
    clear_has_info();
    ::proto::SceneGalleryIslandPartyRaftInfo* temp = info_.island_party_raft_info_;
    info_.island_party_raft_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_island_party_raft_info(::proto::SceneGalleryIslandPartyRaftInfo* island_party_raft_info) {
  clear_info();
  if (island_party_raft_info) {
    set_has_island_party_raft_info();
    info_.island_party_raft_info_ = island_party_raft_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.island_party_raft_info)
}

// .proto.SceneGalleryIslandPartySailInfo island_party_sail_info = 1133;
bool SceneGalleryInfo::has_island_party_sail_info() const {
  return info_case() == kIslandPartySailInfo;
}
void SceneGalleryInfo::set_has_island_party_sail_info() {
  _oneof_case_[0] = kIslandPartySailInfo;
}
void SceneGalleryInfo::clear_island_party_sail_info() {
  if (has_island_party_sail_info()) {
    delete info_.island_party_sail_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryIslandPartySailInfo& SceneGalleryInfo::island_party_sail_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.island_party_sail_info)
  return has_island_party_sail_info()
      ? *info_.island_party_sail_info_
      : ::proto::SceneGalleryIslandPartySailInfo::default_instance();
}
::proto::SceneGalleryIslandPartySailInfo* SceneGalleryInfo::mutable_island_party_sail_info() {
  if (!has_island_party_sail_info()) {
    clear_info();
    set_has_island_party_sail_info();
    info_.island_party_sail_info_ = new ::proto::SceneGalleryIslandPartySailInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.island_party_sail_info)
  return info_.island_party_sail_info_;
}
::proto::SceneGalleryIslandPartySailInfo* SceneGalleryInfo::release_island_party_sail_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.island_party_sail_info)
  if (has_island_party_sail_info()) {
    clear_has_info();
    ::proto::SceneGalleryIslandPartySailInfo* temp = info_.island_party_sail_info_;
    info_.island_party_sail_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_island_party_sail_info(::proto::SceneGalleryIslandPartySailInfo* island_party_sail_info) {
  clear_info();
  if (island_party_sail_info) {
    set_has_island_party_sail_info();
    info_.island_party_sail_info_ = island_party_sail_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.island_party_sail_info)
}

// .proto.SceneGalleryInstaleSprayInfo instable_spray_info = 1196;
bool SceneGalleryInfo::has_instable_spray_info() const {
  return info_case() == kInstableSprayInfo;
}
void SceneGalleryInfo::set_has_instable_spray_info() {
  _oneof_case_[0] = kInstableSprayInfo;
}
void SceneGalleryInfo::clear_instable_spray_info() {
  if (has_instable_spray_info()) {
    delete info_.instable_spray_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryInstaleSprayInfo& SceneGalleryInfo::instable_spray_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.instable_spray_info)
  return has_instable_spray_info()
      ? *info_.instable_spray_info_
      : ::proto::SceneGalleryInstaleSprayInfo::default_instance();
}
::proto::SceneGalleryInstaleSprayInfo* SceneGalleryInfo::mutable_instable_spray_info() {
  if (!has_instable_spray_info()) {
    clear_info();
    set_has_instable_spray_info();
    info_.instable_spray_info_ = new ::proto::SceneGalleryInstaleSprayInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.instable_spray_info)
  return info_.instable_spray_info_;
}
::proto::SceneGalleryInstaleSprayInfo* SceneGalleryInfo::release_instable_spray_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.instable_spray_info)
  if (has_instable_spray_info()) {
    clear_has_info();
    ::proto::SceneGalleryInstaleSprayInfo* temp = info_.instable_spray_info_;
    info_.instable_spray_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_instable_spray_info(::proto::SceneGalleryInstaleSprayInfo* instable_spray_info) {
  clear_info();
  if (instable_spray_info) {
    set_has_instable_spray_info();
    info_.instable_spray_info_ = instable_spray_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.instable_spray_info)
}

// .proto.SceneGalleryMuqadasPotionInfo muqadas_potion_info = 865;
bool SceneGalleryInfo::has_muqadas_potion_info() const {
  return info_case() == kMuqadasPotionInfo;
}
void SceneGalleryInfo::set_has_muqadas_potion_info() {
  _oneof_case_[0] = kMuqadasPotionInfo;
}
void SceneGalleryInfo::clear_muqadas_potion_info() {
  if (has_muqadas_potion_info()) {
    delete info_.muqadas_potion_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryMuqadasPotionInfo& SceneGalleryInfo::muqadas_potion_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.muqadas_potion_info)
  return has_muqadas_potion_info()
      ? *info_.muqadas_potion_info_
      : ::proto::SceneGalleryMuqadasPotionInfo::default_instance();
}
::proto::SceneGalleryMuqadasPotionInfo* SceneGalleryInfo::mutable_muqadas_potion_info() {
  if (!has_muqadas_potion_info()) {
    clear_info();
    set_has_muqadas_potion_info();
    info_.muqadas_potion_info_ = new ::proto::SceneGalleryMuqadasPotionInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.muqadas_potion_info)
  return info_.muqadas_potion_info_;
}
::proto::SceneGalleryMuqadasPotionInfo* SceneGalleryInfo::release_muqadas_potion_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.muqadas_potion_info)
  if (has_muqadas_potion_info()) {
    clear_has_info();
    ::proto::SceneGalleryMuqadasPotionInfo* temp = info_.muqadas_potion_info_;
    info_.muqadas_potion_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_muqadas_potion_info(::proto::SceneGalleryMuqadasPotionInfo* muqadas_potion_info) {
  clear_info();
  if (muqadas_potion_info) {
    set_has_muqadas_potion_info();
    info_.muqadas_potion_info_ = muqadas_potion_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.muqadas_potion_info)
}

// .proto.SceneGalleryTreasureSeelieInfo treasure_seelie_info = 1525;
bool SceneGalleryInfo::has_treasure_seelie_info() const {
  return info_case() == kTreasureSeelieInfo;
}
void SceneGalleryInfo::set_has_treasure_seelie_info() {
  _oneof_case_[0] = kTreasureSeelieInfo;
}
void SceneGalleryInfo::clear_treasure_seelie_info() {
  if (has_treasure_seelie_info()) {
    delete info_.treasure_seelie_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryTreasureSeelieInfo& SceneGalleryInfo::treasure_seelie_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.treasure_seelie_info)
  return has_treasure_seelie_info()
      ? *info_.treasure_seelie_info_
      : ::proto::SceneGalleryTreasureSeelieInfo::default_instance();
}
::proto::SceneGalleryTreasureSeelieInfo* SceneGalleryInfo::mutable_treasure_seelie_info() {
  if (!has_treasure_seelie_info()) {
    clear_info();
    set_has_treasure_seelie_info();
    info_.treasure_seelie_info_ = new ::proto::SceneGalleryTreasureSeelieInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.treasure_seelie_info)
  return info_.treasure_seelie_info_;
}
::proto::SceneGalleryTreasureSeelieInfo* SceneGalleryInfo::release_treasure_seelie_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.treasure_seelie_info)
  if (has_treasure_seelie_info()) {
    clear_has_info();
    ::proto::SceneGalleryTreasureSeelieInfo* temp = info_.treasure_seelie_info_;
    info_.treasure_seelie_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_treasure_seelie_info(::proto::SceneGalleryTreasureSeelieInfo* treasure_seelie_info) {
  clear_info();
  if (treasure_seelie_info) {
    set_has_treasure_seelie_info();
    info_.treasure_seelie_info_ = treasure_seelie_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.treasure_seelie_info)
}

// .proto.SceneGalleryVintageHuntingInfo vintage_hunting_info = 254;
bool SceneGalleryInfo::has_vintage_hunting_info() const {
  return info_case() == kVintageHuntingInfo;
}
void SceneGalleryInfo::set_has_vintage_hunting_info() {
  _oneof_case_[0] = kVintageHuntingInfo;
}
void SceneGalleryInfo::clear_vintage_hunting_info() {
  if (has_vintage_hunting_info()) {
    delete info_.vintage_hunting_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryVintageHuntingInfo& SceneGalleryInfo::vintage_hunting_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.vintage_hunting_info)
  return has_vintage_hunting_info()
      ? *info_.vintage_hunting_info_
      : ::proto::SceneGalleryVintageHuntingInfo::default_instance();
}
::proto::SceneGalleryVintageHuntingInfo* SceneGalleryInfo::mutable_vintage_hunting_info() {
  if (!has_vintage_hunting_info()) {
    clear_info();
    set_has_vintage_hunting_info();
    info_.vintage_hunting_info_ = new ::proto::SceneGalleryVintageHuntingInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.vintage_hunting_info)
  return info_.vintage_hunting_info_;
}
::proto::SceneGalleryVintageHuntingInfo* SceneGalleryInfo::release_vintage_hunting_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.vintage_hunting_info)
  if (has_vintage_hunting_info()) {
    clear_has_info();
    ::proto::SceneGalleryVintageHuntingInfo* temp = info_.vintage_hunting_info_;
    info_.vintage_hunting_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_vintage_hunting_info(::proto::SceneGalleryVintageHuntingInfo* vintage_hunting_info) {
  clear_info();
  if (vintage_hunting_info) {
    set_has_vintage_hunting_info();
    info_.vintage_hunting_info_ = vintage_hunting_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.vintage_hunting_info)
}

// .proto.SceneGalleryWindFieldInfo wind_field_info = 1080;
bool SceneGalleryInfo::has_wind_field_info() const {
  return info_case() == kWindFieldInfo;
}
void SceneGalleryInfo::set_has_wind_field_info() {
  _oneof_case_[0] = kWindFieldInfo;
}
void SceneGalleryInfo::clear_wind_field_info() {
  if (has_wind_field_info()) {
    delete info_.wind_field_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryWindFieldInfo& SceneGalleryInfo::wind_field_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.wind_field_info)
  return has_wind_field_info()
      ? *info_.wind_field_info_
      : ::proto::SceneGalleryWindFieldInfo::default_instance();
}
::proto::SceneGalleryWindFieldInfo* SceneGalleryInfo::mutable_wind_field_info() {
  if (!has_wind_field_info()) {
    clear_info();
    set_has_wind_field_info();
    info_.wind_field_info_ = new ::proto::SceneGalleryWindFieldInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.wind_field_info)
  return info_.wind_field_info_;
}
::proto::SceneGalleryWindFieldInfo* SceneGalleryInfo::release_wind_field_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.wind_field_info)
  if (has_wind_field_info()) {
    clear_has_info();
    ::proto::SceneGalleryWindFieldInfo* temp = info_.wind_field_info_;
    info_.wind_field_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_wind_field_info(::proto::SceneGalleryWindFieldInfo* wind_field_info) {
  clear_info();
  if (wind_field_info) {
    set_has_wind_field_info();
    info_.wind_field_info_ = wind_field_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.wind_field_info)
}

// .proto.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 1328;
bool SceneGalleryInfo::has_fungus_fighter_training_info() const {
  return info_case() == kFungusFighterTrainingInfo;
}
void SceneGalleryInfo::set_has_fungus_fighter_training_info() {
  _oneof_case_[0] = kFungusFighterTrainingInfo;
}
void SceneGalleryInfo::clear_fungus_fighter_training_info() {
  if (has_fungus_fighter_training_info()) {
    delete info_.fungus_fighter_training_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryFungusFighterTrainingInfo& SceneGalleryInfo::fungus_fighter_training_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.fungus_fighter_training_info)
  return has_fungus_fighter_training_info()
      ? *info_.fungus_fighter_training_info_
      : ::proto::SceneGalleryFungusFighterTrainingInfo::default_instance();
}
::proto::SceneGalleryFungusFighterTrainingInfo* SceneGalleryInfo::mutable_fungus_fighter_training_info() {
  if (!has_fungus_fighter_training_info()) {
    clear_info();
    set_has_fungus_fighter_training_info();
    info_.fungus_fighter_training_info_ = new ::proto::SceneGalleryFungusFighterTrainingInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.fungus_fighter_training_info)
  return info_.fungus_fighter_training_info_;
}
::proto::SceneGalleryFungusFighterTrainingInfo* SceneGalleryInfo::release_fungus_fighter_training_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.fungus_fighter_training_info)
  if (has_fungus_fighter_training_info()) {
    clear_has_info();
    ::proto::SceneGalleryFungusFighterTrainingInfo* temp = info_.fungus_fighter_training_info_;
    info_.fungus_fighter_training_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_fungus_fighter_training_info(::proto::SceneGalleryFungusFighterTrainingInfo* fungus_fighter_training_info) {
  clear_info();
  if (fungus_fighter_training_info) {
    set_has_fungus_fighter_training_info();
    info_.fungus_fighter_training_info_ = fungus_fighter_training_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.fungus_fighter_training_info)
}

// .proto.SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 882;
bool SceneGalleryInfo::has_effigy_challenge_info() const {
  return info_case() == kEffigyChallengeInfo;
}
void SceneGalleryInfo::set_has_effigy_challenge_info() {
  _oneof_case_[0] = kEffigyChallengeInfo;
}
void SceneGalleryInfo::clear_effigy_challenge_info() {
  if (has_effigy_challenge_info()) {
    delete info_.effigy_challenge_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryEffigyChallengeV2Info& SceneGalleryInfo::effigy_challenge_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.effigy_challenge_info)
  return has_effigy_challenge_info()
      ? *info_.effigy_challenge_info_
      : ::proto::SceneGalleryEffigyChallengeV2Info::default_instance();
}
::proto::SceneGalleryEffigyChallengeV2Info* SceneGalleryInfo::mutable_effigy_challenge_info() {
  if (!has_effigy_challenge_info()) {
    clear_info();
    set_has_effigy_challenge_info();
    info_.effigy_challenge_info_ = new ::proto::SceneGalleryEffigyChallengeV2Info;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.effigy_challenge_info)
  return info_.effigy_challenge_info_;
}
::proto::SceneGalleryEffigyChallengeV2Info* SceneGalleryInfo::release_effigy_challenge_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.effigy_challenge_info)
  if (has_effigy_challenge_info()) {
    clear_has_info();
    ::proto::SceneGalleryEffigyChallengeV2Info* temp = info_.effigy_challenge_info_;
    info_.effigy_challenge_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_effigy_challenge_info(::proto::SceneGalleryEffigyChallengeV2Info* effigy_challenge_info) {
  clear_info();
  if (effigy_challenge_info) {
    set_has_effigy_challenge_info();
    info_.effigy_challenge_info_ = effigy_challenge_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.effigy_challenge_info)
}

// .proto.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 422;
bool SceneGalleryInfo::has_fungus_fighter_capture_info() const {
  return info_case() == kFungusFighterCaptureInfo;
}
void SceneGalleryInfo::set_has_fungus_fighter_capture_info() {
  _oneof_case_[0] = kFungusFighterCaptureInfo;
}
void SceneGalleryInfo::clear_fungus_fighter_capture_info() {
  if (has_fungus_fighter_capture_info()) {
    delete info_.fungus_fighter_capture_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryFungusFighterCaptureInfo& SceneGalleryInfo::fungus_fighter_capture_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.fungus_fighter_capture_info)
  return has_fungus_fighter_capture_info()
      ? *info_.fungus_fighter_capture_info_
      : ::proto::SceneGalleryFungusFighterCaptureInfo::default_instance();
}
::proto::SceneGalleryFungusFighterCaptureInfo* SceneGalleryInfo::mutable_fungus_fighter_capture_info() {
  if (!has_fungus_fighter_capture_info()) {
    clear_info();
    set_has_fungus_fighter_capture_info();
    info_.fungus_fighter_capture_info_ = new ::proto::SceneGalleryFungusFighterCaptureInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.fungus_fighter_capture_info)
  return info_.fungus_fighter_capture_info_;
}
::proto::SceneGalleryFungusFighterCaptureInfo* SceneGalleryInfo::release_fungus_fighter_capture_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.fungus_fighter_capture_info)
  if (has_fungus_fighter_capture_info()) {
    clear_has_info();
    ::proto::SceneGalleryFungusFighterCaptureInfo* temp = info_.fungus_fighter_capture_info_;
    info_.fungus_fighter_capture_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_fungus_fighter_capture_info(::proto::SceneGalleryFungusFighterCaptureInfo* fungus_fighter_capture_info) {
  clear_info();
  if (fungus_fighter_capture_info) {
    set_has_fungus_fighter_capture_info();
    info_.fungus_fighter_capture_info_ = fungus_fighter_capture_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.fungus_fighter_capture_info)
}

// .proto.SceneGalleryCharAmusementInfo char_amusement_info = 1086;
bool SceneGalleryInfo::has_char_amusement_info() const {
  return info_case() == kCharAmusementInfo;
}
void SceneGalleryInfo::set_has_char_amusement_info() {
  _oneof_case_[0] = kCharAmusementInfo;
}
void SceneGalleryInfo::clear_char_amusement_info() {
  if (has_char_amusement_info()) {
    delete info_.char_amusement_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryCharAmusementInfo& SceneGalleryInfo::char_amusement_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.char_amusement_info)
  return has_char_amusement_info()
      ? *info_.char_amusement_info_
      : ::proto::SceneGalleryCharAmusementInfo::default_instance();
}
::proto::SceneGalleryCharAmusementInfo* SceneGalleryInfo::mutable_char_amusement_info() {
  if (!has_char_amusement_info()) {
    clear_info();
    set_has_char_amusement_info();
    info_.char_amusement_info_ = new ::proto::SceneGalleryCharAmusementInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.char_amusement_info)
  return info_.char_amusement_info_;
}
::proto::SceneGalleryCharAmusementInfo* SceneGalleryInfo::release_char_amusement_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.char_amusement_info)
  if (has_char_amusement_info()) {
    clear_has_info();
    ::proto::SceneGalleryCharAmusementInfo* temp = info_.char_amusement_info_;
    info_.char_amusement_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_char_amusement_info(::proto::SceneGalleryCharAmusementInfo* char_amusement_info) {
  clear_info();
  if (char_amusement_info) {
    set_has_char_amusement_info();
    info_.char_amusement_info_ = char_amusement_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.char_amusement_info)
}

// .proto.SceneGalleryBrickBreakerInfo brick_breaker_info = 1425;
bool SceneGalleryInfo::has_brick_breaker_info() const {
  return info_case() == kBrickBreakerInfo;
}
void SceneGalleryInfo::set_has_brick_breaker_info() {
  _oneof_case_[0] = kBrickBreakerInfo;
}
void SceneGalleryInfo::clear_brick_breaker_info() {
  if (has_brick_breaker_info()) {
    delete info_.brick_breaker_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryBrickBreakerInfo& SceneGalleryInfo::brick_breaker_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.brick_breaker_info)
  return has_brick_breaker_info()
      ? *info_.brick_breaker_info_
      : ::proto::SceneGalleryBrickBreakerInfo::default_instance();
}
::proto::SceneGalleryBrickBreakerInfo* SceneGalleryInfo::mutable_brick_breaker_info() {
  if (!has_brick_breaker_info()) {
    clear_info();
    set_has_brick_breaker_info();
    info_.brick_breaker_info_ = new ::proto::SceneGalleryBrickBreakerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.brick_breaker_info)
  return info_.brick_breaker_info_;
}
::proto::SceneGalleryBrickBreakerInfo* SceneGalleryInfo::release_brick_breaker_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.brick_breaker_info)
  if (has_brick_breaker_info()) {
    clear_has_info();
    ::proto::SceneGalleryBrickBreakerInfo* temp = info_.brick_breaker_info_;
    info_.brick_breaker_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_brick_breaker_info(::proto::SceneGalleryBrickBreakerInfo* brick_breaker_info) {
  clear_info();
  if (brick_breaker_info) {
    set_has_brick_breaker_info();
    info_.brick_breaker_info_ = brick_breaker_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.brick_breaker_info)
}

// .proto.SceneGalleryCoinCollectInfo coin_collect_info = 1574;
bool SceneGalleryInfo::has_coin_collect_info() const {
  return info_case() == kCoinCollectInfo;
}
void SceneGalleryInfo::set_has_coin_collect_info() {
  _oneof_case_[0] = kCoinCollectInfo;
}
void SceneGalleryInfo::clear_coin_collect_info() {
  if (has_coin_collect_info()) {
    delete info_.coin_collect_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryCoinCollectInfo& SceneGalleryInfo::coin_collect_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.coin_collect_info)
  return has_coin_collect_info()
      ? *info_.coin_collect_info_
      : ::proto::SceneGalleryCoinCollectInfo::default_instance();
}
::proto::SceneGalleryCoinCollectInfo* SceneGalleryInfo::mutable_coin_collect_info() {
  if (!has_coin_collect_info()) {
    clear_info();
    set_has_coin_collect_info();
    info_.coin_collect_info_ = new ::proto::SceneGalleryCoinCollectInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.coin_collect_info)
  return info_.coin_collect_info_;
}
::proto::SceneGalleryCoinCollectInfo* SceneGalleryInfo::release_coin_collect_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.coin_collect_info)
  if (has_coin_collect_info()) {
    clear_has_info();
    ::proto::SceneGalleryCoinCollectInfo* temp = info_.coin_collect_info_;
    info_.coin_collect_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_coin_collect_info(::proto::SceneGalleryCoinCollectInfo* coin_collect_info) {
  clear_info();
  if (coin_collect_info) {
    set_has_coin_collect_info();
    info_.coin_collect_info_ = coin_collect_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.coin_collect_info)
}

// .proto.SceneGalleryTeamChainInfo team_chain_info = 1495;
bool SceneGalleryInfo::has_team_chain_info() const {
  return info_case() == kTeamChainInfo;
}
void SceneGalleryInfo::set_has_team_chain_info() {
  _oneof_case_[0] = kTeamChainInfo;
}
void SceneGalleryInfo::clear_team_chain_info() {
  if (has_team_chain_info()) {
    delete info_.team_chain_info_;
    clear_has_info();
  }
}
 const ::proto::SceneGalleryTeamChainInfo& SceneGalleryInfo::team_chain_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfo.team_chain_info)
  return has_team_chain_info()
      ? *info_.team_chain_info_
      : ::proto::SceneGalleryTeamChainInfo::default_instance();
}
::proto::SceneGalleryTeamChainInfo* SceneGalleryInfo::mutable_team_chain_info() {
  if (!has_team_chain_info()) {
    clear_info();
    set_has_team_chain_info();
    info_.team_chain_info_ = new ::proto::SceneGalleryTeamChainInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfo.team_chain_info)
  return info_.team_chain_info_;
}
::proto::SceneGalleryTeamChainInfo* SceneGalleryInfo::release_team_chain_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfo.team_chain_info)
  if (has_team_chain_info()) {
    clear_has_info();
    ::proto::SceneGalleryTeamChainInfo* temp = info_.team_chain_info_;
    info_.team_chain_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryInfo::set_allocated_team_chain_info(::proto::SceneGalleryTeamChainInfo* team_chain_info) {
  clear_info();
  if (team_chain_info) {
    set_has_team_chain_info();
    info_.team_chain_info_ = team_chain_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfo.team_chain_info)
}

bool SceneGalleryInfo::has_info() const {
  return info_case() != INFO_NOT_SET;
}
void SceneGalleryInfo::clear_has_info() {
  _oneof_case_[0] = INFO_NOT_SET;
}
SceneGalleryInfo::InfoCase SceneGalleryInfo::info_case() const {
  return SceneGalleryInfo::InfoCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllSceneGalleryInfoReq::GetAllSceneGalleryInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetAllSceneGalleryInfoReq)
}
GetAllSceneGalleryInfoReq::GetAllSceneGalleryInfoReq(const GetAllSceneGalleryInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.GetAllSceneGalleryInfoReq)
}

void GetAllSceneGalleryInfoReq::SharedCtor() {
  _cached_size_ = 0;
}

GetAllSceneGalleryInfoReq::~GetAllSceneGalleryInfoReq() {
  // @@protoc_insertion_point(destructor:proto.GetAllSceneGalleryInfoReq)
  SharedDtor();
}

void GetAllSceneGalleryInfoReq::SharedDtor() {
}

void GetAllSceneGalleryInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllSceneGalleryInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAllSceneGalleryInfoReq& GetAllSceneGalleryInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAllSceneGalleryInfoReq* GetAllSceneGalleryInfoReq::New(::google::protobuf::Arena* arena) const {
  GetAllSceneGalleryInfoReq* n = new GetAllSceneGalleryInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAllSceneGalleryInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetAllSceneGalleryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetAllSceneGalleryInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetAllSceneGalleryInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetAllSceneGalleryInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetAllSceneGalleryInfoReq)
  return false;
#undef DO_
}

void GetAllSceneGalleryInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetAllSceneGalleryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetAllSceneGalleryInfoReq)
}

::google::protobuf::uint8* GetAllSceneGalleryInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetAllSceneGalleryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetAllSceneGalleryInfoReq)
  return target;
}

size_t GetAllSceneGalleryInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetAllSceneGalleryInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllSceneGalleryInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetAllSceneGalleryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllSceneGalleryInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAllSceneGalleryInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetAllSceneGalleryInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetAllSceneGalleryInfoReq)
    MergeFrom(*source);
  }
}

void GetAllSceneGalleryInfoReq::MergeFrom(const GetAllSceneGalleryInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetAllSceneGalleryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetAllSceneGalleryInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetAllSceneGalleryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSceneGalleryInfoReq::CopyFrom(const GetAllSceneGalleryInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetAllSceneGalleryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSceneGalleryInfoReq::IsInitialized() const {
  return true;
}

void GetAllSceneGalleryInfoReq::Swap(GetAllSceneGalleryInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllSceneGalleryInfoReq::InternalSwap(GetAllSceneGalleryInfoReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAllSceneGalleryInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAllSceneGalleryInfoReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAllSceneGalleryInfoRsp::kGalleryInfoListFieldNumber;
const int GetAllSceneGalleryInfoRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAllSceneGalleryInfoRsp::GetAllSceneGalleryInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetAllSceneGalleryInfoRsp)
}
GetAllSceneGalleryInfoRsp::GetAllSceneGalleryInfoRsp(const GetAllSceneGalleryInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      gallery_info_list_(from.gallery_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GetAllSceneGalleryInfoRsp)
}

void GetAllSceneGalleryInfoRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GetAllSceneGalleryInfoRsp::~GetAllSceneGalleryInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetAllSceneGalleryInfoRsp)
  SharedDtor();
}

void GetAllSceneGalleryInfoRsp::SharedDtor() {
}

void GetAllSceneGalleryInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllSceneGalleryInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAllSceneGalleryInfoRsp& GetAllSceneGalleryInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAllSceneGalleryInfoRsp* GetAllSceneGalleryInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetAllSceneGalleryInfoRsp* n = new GetAllSceneGalleryInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAllSceneGalleryInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetAllSceneGalleryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_info_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GetAllSceneGalleryInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetAllSceneGalleryInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.SceneGalleryInfo gallery_info_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gallery_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetAllSceneGalleryInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetAllSceneGalleryInfoRsp)
  return false;
#undef DO_
}

void GetAllSceneGalleryInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetAllSceneGalleryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // repeated .proto.SceneGalleryInfo gallery_info_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gallery_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gallery_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetAllSceneGalleryInfoRsp)
}

::google::protobuf::uint8* GetAllSceneGalleryInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetAllSceneGalleryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // repeated .proto.SceneGalleryInfo gallery_info_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gallery_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->gallery_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetAllSceneGalleryInfoRsp)
  return target;
}

size_t GetAllSceneGalleryInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetAllSceneGalleryInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.SceneGalleryInfo gallery_info_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->gallery_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gallery_info_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllSceneGalleryInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetAllSceneGalleryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAllSceneGalleryInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAllSceneGalleryInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetAllSceneGalleryInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetAllSceneGalleryInfoRsp)
    MergeFrom(*source);
  }
}

void GetAllSceneGalleryInfoRsp::MergeFrom(const GetAllSceneGalleryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetAllSceneGalleryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gallery_info_list_.MergeFrom(from.gallery_info_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetAllSceneGalleryInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetAllSceneGalleryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllSceneGalleryInfoRsp::CopyFrom(const GetAllSceneGalleryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetAllSceneGalleryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllSceneGalleryInfoRsp::IsInitialized() const {
  return true;
}

void GetAllSceneGalleryInfoRsp::Swap(GetAllSceneGalleryInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAllSceneGalleryInfoRsp::InternalSwap(GetAllSceneGalleryInfoRsp* other) {
  using std::swap;
  gallery_info_list_.InternalSwap(&other->gallery_info_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAllSceneGalleryInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAllSceneGalleryInfoRsp

// repeated .proto.SceneGalleryInfo gallery_info_list = 12;
int GetAllSceneGalleryInfoRsp::gallery_info_list_size() const {
  return gallery_info_list_.size();
}
void GetAllSceneGalleryInfoRsp::clear_gallery_info_list() {
  gallery_info_list_.Clear();
}
const ::proto::SceneGalleryInfo& GetAllSceneGalleryInfoRsp::gallery_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllSceneGalleryInfoRsp.gallery_info_list)
  return gallery_info_list_.Get(index);
}
::proto::SceneGalleryInfo* GetAllSceneGalleryInfoRsp::mutable_gallery_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllSceneGalleryInfoRsp.gallery_info_list)
  return gallery_info_list_.Mutable(index);
}
::proto::SceneGalleryInfo* GetAllSceneGalleryInfoRsp::add_gallery_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetAllSceneGalleryInfoRsp.gallery_info_list)
  return gallery_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::SceneGalleryInfo >*
GetAllSceneGalleryInfoRsp::mutable_gallery_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllSceneGalleryInfoRsp.gallery_info_list)
  return &gallery_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::SceneGalleryInfo >&
GetAllSceneGalleryInfoRsp::gallery_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetAllSceneGalleryInfoRsp.gallery_info_list)
  return gallery_info_list_;
}

// int32 retcode = 2;
void GetAllSceneGalleryInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetAllSceneGalleryInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSceneGalleryInfoRsp.retcode)
  return retcode_;
}
void GetAllSceneGalleryInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetAllSceneGalleryInfoRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryFlowerCatchNotify::kCurScoreFieldNumber;
const int GalleryFlowerCatchNotify::kAddScoreFieldNumber;
const int GalleryFlowerCatchNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryFlowerCatchNotify::GalleryFlowerCatchNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryFlowerCatchNotify)
}
GalleryFlowerCatchNotify::GalleryFlowerCatchNotify(const GalleryFlowerCatchNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&add_score_, &from.add_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_score_) -
    reinterpret_cast<char*>(&add_score_)) + sizeof(cur_score_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryFlowerCatchNotify)
}

void GalleryFlowerCatchNotify::SharedCtor() {
  ::memset(&add_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&add_score_)) + sizeof(cur_score_));
  _cached_size_ = 0;
}

GalleryFlowerCatchNotify::~GalleryFlowerCatchNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryFlowerCatchNotify)
  SharedDtor();
}

void GalleryFlowerCatchNotify::SharedDtor() {
}

void GalleryFlowerCatchNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryFlowerCatchNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryFlowerCatchNotify& GalleryFlowerCatchNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryFlowerCatchNotify* GalleryFlowerCatchNotify::New(::google::protobuf::Arena* arena) const {
  GalleryFlowerCatchNotify* n = new GalleryFlowerCatchNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryFlowerCatchNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryFlowerCatchNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_score_) -
      reinterpret_cast<char*>(&add_score_)) + sizeof(cur_score_));
  _internal_metadata_.Clear();
}

bool GalleryFlowerCatchNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryFlowerCatchNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_score = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryFlowerCatchNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryFlowerCatchNotify)
  return false;
#undef DO_
}

void GalleryFlowerCatchNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryFlowerCatchNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gallery_id(), output);
  }

  // uint32 cur_score = 12;
  if (this->cur_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cur_score(), output);
  }

  // uint32 add_score = 14;
  if (this->add_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->add_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryFlowerCatchNotify)
}

::google::protobuf::uint8* GalleryFlowerCatchNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryFlowerCatchNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gallery_id(), target);
  }

  // uint32 cur_score = 12;
  if (this->cur_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cur_score(), target);
  }

  // uint32 add_score = 14;
  if (this->add_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->add_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryFlowerCatchNotify)
  return target;
}

size_t GalleryFlowerCatchNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryFlowerCatchNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 add_score = 14;
  if (this->add_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_score());
  }

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 cur_score = 12;
  if (this->cur_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryFlowerCatchNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryFlowerCatchNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryFlowerCatchNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryFlowerCatchNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryFlowerCatchNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryFlowerCatchNotify)
    MergeFrom(*source);
  }
}

void GalleryFlowerCatchNotify::MergeFrom(const GalleryFlowerCatchNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryFlowerCatchNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_score() != 0) {
    set_add_score(from.add_score());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.cur_score() != 0) {
    set_cur_score(from.cur_score());
  }
}

void GalleryFlowerCatchNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryFlowerCatchNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryFlowerCatchNotify::CopyFrom(const GalleryFlowerCatchNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryFlowerCatchNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryFlowerCatchNotify::IsInitialized() const {
  return true;
}

void GalleryFlowerCatchNotify::Swap(GalleryFlowerCatchNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryFlowerCatchNotify::InternalSwap(GalleryFlowerCatchNotify* other) {
  using std::swap;
  swap(add_score_, other->add_score_);
  swap(gallery_id_, other->gallery_id_);
  swap(cur_score_, other->cur_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryFlowerCatchNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryFlowerCatchNotify

// uint32 cur_score = 12;
void GalleryFlowerCatchNotify::clear_cur_score() {
  cur_score_ = 0u;
}
::google::protobuf::uint32 GalleryFlowerCatchNotify::cur_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFlowerCatchNotify.cur_score)
  return cur_score_;
}
void GalleryFlowerCatchNotify::set_cur_score(::google::protobuf::uint32 value) {
  
  cur_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFlowerCatchNotify.cur_score)
}

// uint32 add_score = 14;
void GalleryFlowerCatchNotify::clear_add_score() {
  add_score_ = 0u;
}
::google::protobuf::uint32 GalleryFlowerCatchNotify::add_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFlowerCatchNotify.add_score)
  return add_score_;
}
void GalleryFlowerCatchNotify::set_add_score(::google::protobuf::uint32 value) {
  
  add_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFlowerCatchNotify.add_score)
}

// uint32 gallery_id = 5;
void GalleryFlowerCatchNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryFlowerCatchNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryFlowerCatchNotify.gallery_id)
  return gallery_id_;
}
void GalleryFlowerCatchNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryFlowerCatchNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryPreStartNotify::kGalleryIdFieldNumber;
const int GalleryPreStartNotify::kPreStartEndTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryPreStartNotify::GalleryPreStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryPreStartNotify)
}
GalleryPreStartNotify::GalleryPreStartNotify(const GalleryPreStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pre_start_end_time_, &from.pre_start_end_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_id_) -
    reinterpret_cast<char*>(&pre_start_end_time_)) + sizeof(gallery_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryPreStartNotify)
}

void GalleryPreStartNotify::SharedCtor() {
  ::memset(&pre_start_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&pre_start_end_time_)) + sizeof(gallery_id_));
  _cached_size_ = 0;
}

GalleryPreStartNotify::~GalleryPreStartNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryPreStartNotify)
  SharedDtor();
}

void GalleryPreStartNotify::SharedDtor() {
}

void GalleryPreStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryPreStartNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryPreStartNotify& GalleryPreStartNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryPreStartNotify* GalleryPreStartNotify::New(::google::protobuf::Arena* arena) const {
  GalleryPreStartNotify* n = new GalleryPreStartNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryPreStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryPreStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pre_start_end_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&pre_start_end_time_)) + sizeof(gallery_id_));
  _internal_metadata_.Clear();
}

bool GalleryPreStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryPreStartNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pre_start_end_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_start_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryPreStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryPreStartNotify)
  return false;
#undef DO_
}

void GalleryPreStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryPreStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pre_start_end_time = 9;
  if (this->pre_start_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pre_start_end_time(), output);
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryPreStartNotify)
}

::google::protobuf::uint8* GalleryPreStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryPreStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pre_start_end_time = 9;
  if (this->pre_start_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pre_start_end_time(), target);
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryPreStartNotify)
  return target;
}

size_t GalleryPreStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryPreStartNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 pre_start_end_time = 9;
  if (this->pre_start_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pre_start_end_time());
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryPreStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryPreStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryPreStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryPreStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryPreStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryPreStartNotify)
    MergeFrom(*source);
  }
}

void GalleryPreStartNotify::MergeFrom(const GalleryPreStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryPreStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_start_end_time() != 0) {
    set_pre_start_end_time(from.pre_start_end_time());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryPreStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryPreStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryPreStartNotify::CopyFrom(const GalleryPreStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryPreStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryPreStartNotify::IsInitialized() const {
  return true;
}

void GalleryPreStartNotify::Swap(GalleryPreStartNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryPreStartNotify::InternalSwap(GalleryPreStartNotify* other) {
  using std::swap;
  swap(pre_start_end_time_, other->pre_start_end_time_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryPreStartNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryPreStartNotify

// uint32 gallery_id = 10;
void GalleryPreStartNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryPreStartNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryPreStartNotify.gallery_id)
  return gallery_id_;
}
void GalleryPreStartNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryPreStartNotify.gallery_id)
}

// uint32 pre_start_end_time = 9;
void GalleryPreStartNotify::clear_pre_start_end_time() {
  pre_start_end_time_ = 0u;
}
::google::protobuf::uint32 GalleryPreStartNotify::pre_start_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GalleryPreStartNotify.pre_start_end_time)
  return pre_start_end_time_;
}
void GalleryPreStartNotify::set_pre_start_end_time(::google::protobuf::uint32 value) {
  
  pre_start_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryPreStartNotify.pre_start_end_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryBulletHitNotify::kHitCountFieldNumber;
const int GalleryBulletHitNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryBulletHitNotify::GalleryBulletHitNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryBulletHitNotify)
}
GalleryBulletHitNotify::GalleryBulletHitNotify(const GalleryBulletHitNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gallery_id_, &from.gallery_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hit_count_) -
    reinterpret_cast<char*>(&gallery_id_)) + sizeof(hit_count_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryBulletHitNotify)
}

void GalleryBulletHitNotify::SharedCtor() {
  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hit_count_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(hit_count_));
  _cached_size_ = 0;
}

GalleryBulletHitNotify::~GalleryBulletHitNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryBulletHitNotify)
  SharedDtor();
}

void GalleryBulletHitNotify::SharedDtor() {
}

void GalleryBulletHitNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryBulletHitNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryBulletHitNotify& GalleryBulletHitNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryBulletHitNotify* GalleryBulletHitNotify::New(::google::protobuf::Arena* arena) const {
  GalleryBulletHitNotify* n = new GalleryBulletHitNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryBulletHitNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryBulletHitNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hit_count_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(hit_count_));
  _internal_metadata_.Clear();
}

bool GalleryBulletHitNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryBulletHitNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hit_count = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryBulletHitNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryBulletHitNotify)
  return false;
#undef DO_
}

void GalleryBulletHitNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryBulletHitNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 12;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gallery_id(), output);
  }

  // uint32 hit_count = 14;
  if (this->hit_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->hit_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryBulletHitNotify)
}

::google::protobuf::uint8* GalleryBulletHitNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryBulletHitNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 12;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gallery_id(), target);
  }

  // uint32 hit_count = 14;
  if (this->hit_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->hit_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryBulletHitNotify)
  return target;
}

size_t GalleryBulletHitNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryBulletHitNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 12;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 hit_count = 14;
  if (this->hit_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hit_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryBulletHitNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryBulletHitNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryBulletHitNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryBulletHitNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryBulletHitNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryBulletHitNotify)
    MergeFrom(*source);
  }
}

void GalleryBulletHitNotify::MergeFrom(const GalleryBulletHitNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryBulletHitNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.hit_count() != 0) {
    set_hit_count(from.hit_count());
  }
}

void GalleryBulletHitNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryBulletHitNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryBulletHitNotify::CopyFrom(const GalleryBulletHitNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryBulletHitNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryBulletHitNotify::IsInitialized() const {
  return true;
}

void GalleryBulletHitNotify::Swap(GalleryBulletHitNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryBulletHitNotify::InternalSwap(GalleryBulletHitNotify* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  swap(hit_count_, other->hit_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryBulletHitNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryBulletHitNotify

// uint32 hit_count = 14;
void GalleryBulletHitNotify::clear_hit_count() {
  hit_count_ = 0u;
}
::google::protobuf::uint32 GalleryBulletHitNotify::hit_count() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBulletHitNotify.hit_count)
  return hit_count_;
}
void GalleryBulletHitNotify::set_hit_count(::google::protobuf::uint32 value) {
  
  hit_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBulletHitNotify.hit_count)
}

// uint32 gallery_id = 12;
void GalleryBulletHitNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryBulletHitNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBulletHitNotify.gallery_id)
  return gallery_id_;
}
void GalleryBulletHitNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBulletHitNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryBrokenFloorFallNotify::kFallCountFieldNumber;
const int GalleryBrokenFloorFallNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryBrokenFloorFallNotify::GalleryBrokenFloorFallNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryBrokenFloorFallNotify)
}
GalleryBrokenFloorFallNotify::GalleryBrokenFloorFallNotify(const GalleryBrokenFloorFallNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fall_count_, &from.fall_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_id_) -
    reinterpret_cast<char*>(&fall_count_)) + sizeof(gallery_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryBrokenFloorFallNotify)
}

void GalleryBrokenFloorFallNotify::SharedCtor() {
  ::memset(&fall_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&fall_count_)) + sizeof(gallery_id_));
  _cached_size_ = 0;
}

GalleryBrokenFloorFallNotify::~GalleryBrokenFloorFallNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryBrokenFloorFallNotify)
  SharedDtor();
}

void GalleryBrokenFloorFallNotify::SharedDtor() {
}

void GalleryBrokenFloorFallNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryBrokenFloorFallNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryBrokenFloorFallNotify& GalleryBrokenFloorFallNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryBrokenFloorFallNotify* GalleryBrokenFloorFallNotify::New(::google::protobuf::Arena* arena) const {
  GalleryBrokenFloorFallNotify* n = new GalleryBrokenFloorFallNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryBrokenFloorFallNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryBrokenFloorFallNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fall_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&fall_count_)) + sizeof(gallery_id_));
  _internal_metadata_.Clear();
}

bool GalleryBrokenFloorFallNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryBrokenFloorFallNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fall_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fall_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryBrokenFloorFallNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryBrokenFloorFallNotify)
  return false;
#undef DO_
}

void GalleryBrokenFloorFallNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryBrokenFloorFallNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fall_count = 3;
  if (this->fall_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fall_count(), output);
  }

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryBrokenFloorFallNotify)
}

::google::protobuf::uint8* GalleryBrokenFloorFallNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryBrokenFloorFallNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fall_count = 3;
  if (this->fall_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fall_count(), target);
  }

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryBrokenFloorFallNotify)
  return target;
}

size_t GalleryBrokenFloorFallNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryBrokenFloorFallNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 fall_count = 3;
  if (this->fall_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fall_count());
  }

  // uint32 gallery_id = 5;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryBrokenFloorFallNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryBrokenFloorFallNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryBrokenFloorFallNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryBrokenFloorFallNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryBrokenFloorFallNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryBrokenFloorFallNotify)
    MergeFrom(*source);
  }
}

void GalleryBrokenFloorFallNotify::MergeFrom(const GalleryBrokenFloorFallNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryBrokenFloorFallNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fall_count() != 0) {
    set_fall_count(from.fall_count());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryBrokenFloorFallNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryBrokenFloorFallNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryBrokenFloorFallNotify::CopyFrom(const GalleryBrokenFloorFallNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryBrokenFloorFallNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryBrokenFloorFallNotify::IsInitialized() const {
  return true;
}

void GalleryBrokenFloorFallNotify::Swap(GalleryBrokenFloorFallNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryBrokenFloorFallNotify::InternalSwap(GalleryBrokenFloorFallNotify* other) {
  using std::swap;
  swap(fall_count_, other->fall_count_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryBrokenFloorFallNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryBrokenFloorFallNotify

// uint32 fall_count = 3;
void GalleryBrokenFloorFallNotify::clear_fall_count() {
  fall_count_ = 0u;
}
::google::protobuf::uint32 GalleryBrokenFloorFallNotify::fall_count() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBrokenFloorFallNotify.fall_count)
  return fall_count_;
}
void GalleryBrokenFloorFallNotify::set_fall_count(::google::protobuf::uint32 value) {
  
  fall_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBrokenFloorFallNotify.fall_count)
}

// uint32 gallery_id = 5;
void GalleryBrokenFloorFallNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryBrokenFloorFallNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBrokenFloorFallNotify.gallery_id)
  return gallery_id_;
}
void GalleryBrokenFloorFallNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBrokenFloorFallNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterruptGalleryReq::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterruptGalleryReq::InterruptGalleryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InterruptGalleryReq)
}
InterruptGalleryReq::InterruptGalleryReq(const InterruptGalleryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_id_ = from.gallery_id_;
  // @@protoc_insertion_point(copy_constructor:proto.InterruptGalleryReq)
}

void InterruptGalleryReq::SharedCtor() {
  gallery_id_ = 0u;
  _cached_size_ = 0;
}

InterruptGalleryReq::~InterruptGalleryReq() {
  // @@protoc_insertion_point(destructor:proto.InterruptGalleryReq)
  SharedDtor();
}

void InterruptGalleryReq::SharedDtor() {
}

void InterruptGalleryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterruptGalleryReq::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InterruptGalleryReq& InterruptGalleryReq::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

InterruptGalleryReq* InterruptGalleryReq::New(::google::protobuf::Arena* arena) const {
  InterruptGalleryReq* n = new InterruptGalleryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterruptGalleryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InterruptGalleryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_id_ = 0u;
  _internal_metadata_.Clear();
}

bool InterruptGalleryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InterruptGalleryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InterruptGalleryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InterruptGalleryReq)
  return false;
#undef DO_
}

void InterruptGalleryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InterruptGalleryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InterruptGalleryReq)
}

::google::protobuf::uint8* InterruptGalleryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InterruptGalleryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InterruptGalleryReq)
  return target;
}

size_t InterruptGalleryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InterruptGalleryReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterruptGalleryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InterruptGalleryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const InterruptGalleryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InterruptGalleryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InterruptGalleryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InterruptGalleryReq)
    MergeFrom(*source);
  }
}

void InterruptGalleryReq::MergeFrom(const InterruptGalleryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InterruptGalleryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void InterruptGalleryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InterruptGalleryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterruptGalleryReq::CopyFrom(const InterruptGalleryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InterruptGalleryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterruptGalleryReq::IsInitialized() const {
  return true;
}

void InterruptGalleryReq::Swap(InterruptGalleryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterruptGalleryReq::InternalSwap(InterruptGalleryReq* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterruptGalleryReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterruptGalleryReq

// uint32 gallery_id = 13;
void InterruptGalleryReq::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 InterruptGalleryReq::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.InterruptGalleryReq.gallery_id)
  return gallery_id_;
}
void InterruptGalleryReq::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InterruptGalleryReq.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterruptGalleryRsp::kRetcodeFieldNumber;
const int InterruptGalleryRsp::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterruptGalleryRsp::InterruptGalleryRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InterruptGalleryRsp)
}
InterruptGalleryRsp::InterruptGalleryRsp(const InterruptGalleryRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gallery_id_, &from.gallery_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&gallery_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.InterruptGalleryRsp)
}

void InterruptGalleryRsp::SharedCtor() {
  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

InterruptGalleryRsp::~InterruptGalleryRsp() {
  // @@protoc_insertion_point(destructor:proto.InterruptGalleryRsp)
  SharedDtor();
}

void InterruptGalleryRsp::SharedDtor() {
}

void InterruptGalleryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterruptGalleryRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InterruptGalleryRsp& InterruptGalleryRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

InterruptGalleryRsp* InterruptGalleryRsp::New(::google::protobuf::Arena* arena) const {
  InterruptGalleryRsp* n = new InterruptGalleryRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterruptGalleryRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InterruptGalleryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool InterruptGalleryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InterruptGalleryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InterruptGalleryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InterruptGalleryRsp)
  return false;
#undef DO_
}

void InterruptGalleryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InterruptGalleryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gallery_id(), output);
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InterruptGalleryRsp)
}

::google::protobuf::uint8* InterruptGalleryRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InterruptGalleryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gallery_id(), target);
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InterruptGalleryRsp)
  return target;
}

size_t InterruptGalleryRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InterruptGalleryRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterruptGalleryRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InterruptGalleryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const InterruptGalleryRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InterruptGalleryRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InterruptGalleryRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InterruptGalleryRsp)
    MergeFrom(*source);
  }
}

void InterruptGalleryRsp::MergeFrom(const InterruptGalleryRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InterruptGalleryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void InterruptGalleryRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InterruptGalleryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterruptGalleryRsp::CopyFrom(const InterruptGalleryRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InterruptGalleryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterruptGalleryRsp::IsInitialized() const {
  return true;
}

void InterruptGalleryRsp::Swap(InterruptGalleryRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterruptGalleryRsp::InternalSwap(InterruptGalleryRsp* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterruptGalleryRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterruptGalleryRsp

// int32 retcode = 12;
void InterruptGalleryRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 InterruptGalleryRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.InterruptGalleryRsp.retcode)
  return retcode_;
}
void InterruptGalleryRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.InterruptGalleryRsp.retcode)
}

// uint32 gallery_id = 9;
void InterruptGalleryRsp::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 InterruptGalleryRsp::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.InterruptGalleryRsp.gallery_id)
  return gallery_id_;
}
void InterruptGalleryRsp::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InterruptGalleryRsp.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryInfoNotify::kGalleryInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryInfoNotify::SceneGalleryInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryInfoNotify)
}
SceneGalleryInfoNotify::SceneGalleryInfoNotify(const SceneGalleryInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_gallery_info()) {
    gallery_info_ = new ::proto::SceneGalleryInfo(*from.gallery_info_);
  } else {
    gallery_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryInfoNotify)
}

void SceneGalleryInfoNotify::SharedCtor() {
  gallery_info_ = NULL;
  _cached_size_ = 0;
}

SceneGalleryInfoNotify::~SceneGalleryInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryInfoNotify)
  SharedDtor();
}

void SceneGalleryInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete gallery_info_;
}

void SceneGalleryInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryInfoNotify& SceneGalleryInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryInfoNotify* SceneGalleryInfoNotify::New(::google::protobuf::Arena* arena) const {
  SceneGalleryInfoNotify* n = new SceneGalleryInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && gallery_info_ != NULL) {
    delete gallery_info_;
  }
  gallery_info_ = NULL;
  _internal_metadata_.Clear();
}

bool SceneGalleryInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SceneGalleryInfo gallery_info = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gallery_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryInfoNotify)
  return false;
#undef DO_
}

void SceneGalleryInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SceneGalleryInfo gallery_info = 4;
  if (this->has_gallery_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->gallery_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryInfoNotify)
}

::google::protobuf::uint8* SceneGalleryInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SceneGalleryInfo gallery_info = 4;
  if (this->has_gallery_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->gallery_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryInfoNotify)
  return target;
}

size_t SceneGalleryInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.SceneGalleryInfo gallery_info = 4;
  if (this->has_gallery_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gallery_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryInfoNotify)
    MergeFrom(*source);
  }
}

void SceneGalleryInfoNotify::MergeFrom(const SceneGalleryInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_gallery_info()) {
    mutable_gallery_info()->::proto::SceneGalleryInfo::MergeFrom(from.gallery_info());
  }
}

void SceneGalleryInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryInfoNotify::CopyFrom(const SceneGalleryInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryInfoNotify::IsInitialized() const {
  return true;
}

void SceneGalleryInfoNotify::Swap(SceneGalleryInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryInfoNotify::InternalSwap(SceneGalleryInfoNotify* other) {
  using std::swap;
  swap(gallery_info_, other->gallery_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryInfoNotify

// .proto.SceneGalleryInfo gallery_info = 4;
bool SceneGalleryInfoNotify::has_gallery_info() const {
  return this != internal_default_instance() && gallery_info_ != NULL;
}
void SceneGalleryInfoNotify::clear_gallery_info() {
  if (GetArenaNoVirtual() == NULL && gallery_info_ != NULL) delete gallery_info_;
  gallery_info_ = NULL;
}
const ::proto::SceneGalleryInfo& SceneGalleryInfoNotify::gallery_info() const {
  const ::proto::SceneGalleryInfo* p = gallery_info_;
  // @@protoc_insertion_point(field_get:proto.SceneGalleryInfoNotify.gallery_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::SceneGalleryInfo*>(
      &::proto::_SceneGalleryInfo_default_instance_);
}
::proto::SceneGalleryInfo* SceneGalleryInfoNotify::mutable_gallery_info() {
  
  if (gallery_info_ == NULL) {
    gallery_info_ = new ::proto::SceneGalleryInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryInfoNotify.gallery_info)
  return gallery_info_;
}
::proto::SceneGalleryInfo* SceneGalleryInfoNotify::release_gallery_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryInfoNotify.gallery_info)
  
  ::proto::SceneGalleryInfo* temp = gallery_info_;
  gallery_info_ = NULL;
  return temp;
}
void SceneGalleryInfoNotify::set_allocated_gallery_info(::proto::SceneGalleryInfo* gallery_info) {
  delete gallery_info_;
  gallery_info_ = gallery_info;
  if (gallery_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryInfoNotify.gallery_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuoyantCombatGallerySettleInfo::kGalleryLevelFieldNumber;
const int BuoyantCombatGallerySettleInfo::kFinalScoreFieldNumber;
const int BuoyantCombatGallerySettleInfo::kKillMonsterCountFieldNumber;
const int BuoyantCombatGallerySettleInfo::kKillTargetCountFieldNumber;
const int BuoyantCombatGallerySettleInfo::kKillSpecialMonsterCountFieldNumber;
const int BuoyantCombatGallerySettleInfo::kGalleryIdFieldNumber;
const int BuoyantCombatGallerySettleInfo::kGalleryMultipleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuoyantCombatGallerySettleInfo::BuoyantCombatGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BuoyantCombatGallerySettleInfo)
}
BuoyantCombatGallerySettleInfo::BuoyantCombatGallerySettleInfo(const BuoyantCombatGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kill_target_count_, &from.kill_target_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_level_) -
    reinterpret_cast<char*>(&kill_target_count_)) + sizeof(gallery_level_));
  // @@protoc_insertion_point(copy_constructor:proto.BuoyantCombatGallerySettleInfo)
}

void BuoyantCombatGallerySettleInfo::SharedCtor() {
  ::memset(&kill_target_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_level_) -
      reinterpret_cast<char*>(&kill_target_count_)) + sizeof(gallery_level_));
  _cached_size_ = 0;
}

BuoyantCombatGallerySettleInfo::~BuoyantCombatGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.BuoyantCombatGallerySettleInfo)
  SharedDtor();
}

void BuoyantCombatGallerySettleInfo::SharedDtor() {
}

void BuoyantCombatGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuoyantCombatGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuoyantCombatGallerySettleInfo& BuoyantCombatGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuoyantCombatGallerySettleInfo* BuoyantCombatGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  BuoyantCombatGallerySettleInfo* n = new BuoyantCombatGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuoyantCombatGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BuoyantCombatGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kill_target_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_level_) -
      reinterpret_cast<char*>(&kill_target_count_)) + sizeof(gallery_level_));
  _internal_metadata_.Clear();
}

bool BuoyantCombatGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BuoyantCombatGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 kill_target_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_target_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_special_monster_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_special_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_monster_count = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_multiple = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_multiple_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_level = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 final_score = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BuoyantCombatGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BuoyantCombatGallerySettleInfo)
  return false;
#undef DO_
}

void BuoyantCombatGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BuoyantCombatGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_target_count = 1;
  if (this->kill_target_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->kill_target_count(), output);
  }

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gallery_id(), output);
  }

  // uint32 kill_special_monster_count = 4;
  if (this->kill_special_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill_special_monster_count(), output);
  }

  // uint32 kill_monster_count = 9;
  if (this->kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->kill_monster_count(), output);
  }

  // uint32 gallery_multiple = 11;
  if (this->gallery_multiple() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gallery_multiple(), output);
  }

  // uint32 gallery_level = 12;
  if (this->gallery_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->gallery_level(), output);
  }

  // uint32 final_score = 15;
  if (this->final_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->final_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BuoyantCombatGallerySettleInfo)
}

::google::protobuf::uint8* BuoyantCombatGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BuoyantCombatGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_target_count = 1;
  if (this->kill_target_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->kill_target_count(), target);
  }

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gallery_id(), target);
  }

  // uint32 kill_special_monster_count = 4;
  if (this->kill_special_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill_special_monster_count(), target);
  }

  // uint32 kill_monster_count = 9;
  if (this->kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->kill_monster_count(), target);
  }

  // uint32 gallery_multiple = 11;
  if (this->gallery_multiple() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gallery_multiple(), target);
  }

  // uint32 gallery_level = 12;
  if (this->gallery_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->gallery_level(), target);
  }

  // uint32 final_score = 15;
  if (this->final_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->final_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BuoyantCombatGallerySettleInfo)
  return target;
}

size_t BuoyantCombatGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BuoyantCombatGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 kill_target_count = 1;
  if (this->kill_target_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_target_count());
  }

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 kill_special_monster_count = 4;
  if (this->kill_special_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_special_monster_count());
  }

  // uint32 kill_monster_count = 9;
  if (this->kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_monster_count());
  }

  // uint32 final_score = 15;
  if (this->final_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->final_score());
  }

  // uint32 gallery_multiple = 11;
  if (this->gallery_multiple() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_multiple());
  }

  // uint32 gallery_level = 12;
  if (this->gallery_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuoyantCombatGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BuoyantCombatGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BuoyantCombatGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuoyantCombatGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BuoyantCombatGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BuoyantCombatGallerySettleInfo)
    MergeFrom(*source);
  }
}

void BuoyantCombatGallerySettleInfo::MergeFrom(const BuoyantCombatGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BuoyantCombatGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kill_target_count() != 0) {
    set_kill_target_count(from.kill_target_count());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.kill_special_monster_count() != 0) {
    set_kill_special_monster_count(from.kill_special_monster_count());
  }
  if (from.kill_monster_count() != 0) {
    set_kill_monster_count(from.kill_monster_count());
  }
  if (from.final_score() != 0) {
    set_final_score(from.final_score());
  }
  if (from.gallery_multiple() != 0) {
    set_gallery_multiple(from.gallery_multiple());
  }
  if (from.gallery_level() != 0) {
    set_gallery_level(from.gallery_level());
  }
}

void BuoyantCombatGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BuoyantCombatGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuoyantCombatGallerySettleInfo::CopyFrom(const BuoyantCombatGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BuoyantCombatGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuoyantCombatGallerySettleInfo::IsInitialized() const {
  return true;
}

void BuoyantCombatGallerySettleInfo::Swap(BuoyantCombatGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuoyantCombatGallerySettleInfo::InternalSwap(BuoyantCombatGallerySettleInfo* other) {
  using std::swap;
  swap(kill_target_count_, other->kill_target_count_);
  swap(gallery_id_, other->gallery_id_);
  swap(kill_special_monster_count_, other->kill_special_monster_count_);
  swap(kill_monster_count_, other->kill_monster_count_);
  swap(final_score_, other->final_score_);
  swap(gallery_multiple_, other->gallery_multiple_);
  swap(gallery_level_, other->gallery_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuoyantCombatGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuoyantCombatGallerySettleInfo

// uint32 gallery_level = 12;
void BuoyantCombatGallerySettleInfo::clear_gallery_level() {
  gallery_level_ = 0u;
}
::google::protobuf::uint32 BuoyantCombatGallerySettleInfo::gallery_level() const {
  // @@protoc_insertion_point(field_get:proto.BuoyantCombatGallerySettleInfo.gallery_level)
  return gallery_level_;
}
void BuoyantCombatGallerySettleInfo::set_gallery_level(::google::protobuf::uint32 value) {
  
  gallery_level_ = value;
  // @@protoc_insertion_point(field_set:proto.BuoyantCombatGallerySettleInfo.gallery_level)
}

// uint32 final_score = 15;
void BuoyantCombatGallerySettleInfo::clear_final_score() {
  final_score_ = 0u;
}
::google::protobuf::uint32 BuoyantCombatGallerySettleInfo::final_score() const {
  // @@protoc_insertion_point(field_get:proto.BuoyantCombatGallerySettleInfo.final_score)
  return final_score_;
}
void BuoyantCombatGallerySettleInfo::set_final_score(::google::protobuf::uint32 value) {
  
  final_score_ = value;
  // @@protoc_insertion_point(field_set:proto.BuoyantCombatGallerySettleInfo.final_score)
}

// uint32 kill_monster_count = 9;
void BuoyantCombatGallerySettleInfo::clear_kill_monster_count() {
  kill_monster_count_ = 0u;
}
::google::protobuf::uint32 BuoyantCombatGallerySettleInfo::kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.BuoyantCombatGallerySettleInfo.kill_monster_count)
  return kill_monster_count_;
}
void BuoyantCombatGallerySettleInfo::set_kill_monster_count(::google::protobuf::uint32 value) {
  
  kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BuoyantCombatGallerySettleInfo.kill_monster_count)
}

// uint32 kill_target_count = 1;
void BuoyantCombatGallerySettleInfo::clear_kill_target_count() {
  kill_target_count_ = 0u;
}
::google::protobuf::uint32 BuoyantCombatGallerySettleInfo::kill_target_count() const {
  // @@protoc_insertion_point(field_get:proto.BuoyantCombatGallerySettleInfo.kill_target_count)
  return kill_target_count_;
}
void BuoyantCombatGallerySettleInfo::set_kill_target_count(::google::protobuf::uint32 value) {
  
  kill_target_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BuoyantCombatGallerySettleInfo.kill_target_count)
}

// uint32 kill_special_monster_count = 4;
void BuoyantCombatGallerySettleInfo::clear_kill_special_monster_count() {
  kill_special_monster_count_ = 0u;
}
::google::protobuf::uint32 BuoyantCombatGallerySettleInfo::kill_special_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.BuoyantCombatGallerySettleInfo.kill_special_monster_count)
  return kill_special_monster_count_;
}
void BuoyantCombatGallerySettleInfo::set_kill_special_monster_count(::google::protobuf::uint32 value) {
  
  kill_special_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BuoyantCombatGallerySettleInfo.kill_special_monster_count)
}

// uint32 gallery_id = 2;
void BuoyantCombatGallerySettleInfo::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 BuoyantCombatGallerySettleInfo::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.BuoyantCombatGallerySettleInfo.gallery_id)
  return gallery_id_;
}
void BuoyantCombatGallerySettleInfo::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BuoyantCombatGallerySettleInfo.gallery_id)
}

// uint32 gallery_multiple = 11;
void BuoyantCombatGallerySettleInfo::clear_gallery_multiple() {
  gallery_multiple_ = 0u;
}
::google::protobuf::uint32 BuoyantCombatGallerySettleInfo::gallery_multiple() const {
  // @@protoc_insertion_point(field_get:proto.BuoyantCombatGallerySettleInfo.gallery_multiple)
  return gallery_multiple_;
}
void BuoyantCombatGallerySettleInfo::set_gallery_multiple(::google::protobuf::uint32 value) {
  
  gallery_multiple_ = value;
  // @@protoc_insertion_point(field_set:proto.BuoyantCombatGallerySettleInfo.gallery_multiple)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo_GadgetCountMapEntry::BounceConjuringGallerySettleInfo_GadgetCountMapEntry() {}
BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo_GadgetCountMapEntry::BounceConjuringGallerySettleInfo_GadgetCountMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo_GadgetCountMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[66];
}
void BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo_GadgetCountMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo_GadgetCountMapEntry::MergeFrom(const BounceConjuringGallerySettleInfo_GadgetCountMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BounceConjuringGallerySettleInfo::kPlayerInfoFieldNumber;
const int BounceConjuringGallerySettleInfo::kDestroyedMachineCountFieldNumber;
const int BounceConjuringGallerySettleInfo::kFeverCountFieldNumber;
const int BounceConjuringGallerySettleInfo::kNormalHitCountFieldNumber;
const int BounceConjuringGallerySettleInfo::kDamageFieldNumber;
const int BounceConjuringGallerySettleInfo::kGadgetCountMapFieldNumber;
const int BounceConjuringGallerySettleInfo::kScoreFieldNumber;
const int BounceConjuringGallerySettleInfo::kPerfectHitCountFieldNumber;
const int BounceConjuringGallerySettleInfo::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BounceConjuringGallerySettleInfo)
}
BounceConjuringGallerySettleInfo::BounceConjuringGallerySettleInfo(const BounceConjuringGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gadget_count_map_.MergeFrom(from.gadget_count_map_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::OnlinePlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  ::memcpy(&normal_hit_count_, &from.normal_hit_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&normal_hit_count_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.BounceConjuringGallerySettleInfo)
}

void BounceConjuringGallerySettleInfo::SharedCtor() {
  ::memset(&player_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&player_info_)) + sizeof(score_));
  _cached_size_ = 0;
}

BounceConjuringGallerySettleInfo::~BounceConjuringGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.BounceConjuringGallerySettleInfo)
  SharedDtor();
}

void BounceConjuringGallerySettleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void BounceConjuringGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BounceConjuringGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BounceConjuringGallerySettleInfo& BounceConjuringGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BounceConjuringGallerySettleInfo* BounceConjuringGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  BounceConjuringGallerySettleInfo* n = new BounceConjuringGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BounceConjuringGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BounceConjuringGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  gadget_count_map_.Clear();
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  ::memset(&normal_hit_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&normal_hit_count_)) + sizeof(score_));
  _internal_metadata_.Clear();
}

bool BounceConjuringGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BounceConjuringGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 normal_hit_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_hit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 destroyed_machine_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destroyed_machine_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fever_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fever_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ExhibitionDisplayInfo card_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 perfect_hit_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perfect_hit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float damage = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OnlinePlayerInfo player_info = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, uint32> gadget_count_map = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          BounceConjuringGallerySettleInfo_GadgetCountMapEntry::Parser< ::google::protobuf::internal::MapField<
              BounceConjuringGallerySettleInfo_GadgetCountMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&gadget_count_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BounceConjuringGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BounceConjuringGallerySettleInfo)
  return false;
#undef DO_
}

void BounceConjuringGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BounceConjuringGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 normal_hit_count = 4;
  if (this->normal_hit_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->normal_hit_count(), output);
  }

  // uint32 destroyed_machine_count = 5;
  if (this->destroyed_machine_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->destroyed_machine_count(), output);
  }

  // uint32 fever_count = 6;
  if (this->fever_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fever_count(), output);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->card_list(static_cast<int>(i)), output);
  }

  // uint32 perfect_hit_count = 8;
  if (this->perfect_hit_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->perfect_hit_count(), output);
  }

  // float damage = 11;
  if (this->damage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->damage(), output);
  }

  // uint32 score = 12;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->score(), output);
  }

  // .proto.OnlinePlayerInfo player_info = 14;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->player_info_, output);
  }

  // map<uint32, uint32> gadget_count_map = 15;
  if (!this->gadget_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->gadget_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gadget_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->gadget_count_map().begin();
          it != this->gadget_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<BounceConjuringGallerySettleInfo_GadgetCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gadget_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<BounceConjuringGallerySettleInfo_GadgetCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->gadget_count_map().begin();
          it != this->gadget_count_map().end(); ++it) {
        entry.reset(gadget_count_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BounceConjuringGallerySettleInfo)
}

::google::protobuf::uint8* BounceConjuringGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BounceConjuringGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 normal_hit_count = 4;
  if (this->normal_hit_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->normal_hit_count(), target);
  }

  // uint32 destroyed_machine_count = 5;
  if (this->destroyed_machine_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->destroyed_machine_count(), target);
  }

  // uint32 fever_count = 6;
  if (this->fever_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fever_count(), target);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 perfect_hit_count = 8;
  if (this->perfect_hit_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->perfect_hit_count(), target);
  }

  // float damage = 11;
  if (this->damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->damage(), target);
  }

  // uint32 score = 12;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->score(), target);
  }

  // .proto.OnlinePlayerInfo player_info = 14;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->player_info_, deterministic, target);
  }

  // map<uint32, uint32> gadget_count_map = 15;
  if (!this->gadget_count_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->gadget_count_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gadget_count_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->gadget_count_map().begin();
          it != this->gadget_count_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<BounceConjuringGallerySettleInfo_GadgetCountMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gadget_count_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<BounceConjuringGallerySettleInfo_GadgetCountMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->gadget_count_map().begin();
          it != this->gadget_count_map().end(); ++it) {
        entry.reset(gadget_count_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BounceConjuringGallerySettleInfo)
  return target;
}

size_t BounceConjuringGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BounceConjuringGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo card_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // map<uint32, uint32> gadget_count_map = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gadget_count_map_size());
  {
    ::google::protobuf::scoped_ptr<BounceConjuringGallerySettleInfo_GadgetCountMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->gadget_count_map().begin();
        it != this->gadget_count_map().end(); ++it) {
      entry.reset(gadget_count_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // .proto.OnlinePlayerInfo player_info = 14;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  // uint32 normal_hit_count = 4;
  if (this->normal_hit_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->normal_hit_count());
  }

  // uint32 destroyed_machine_count = 5;
  if (this->destroyed_machine_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->destroyed_machine_count());
  }

  // uint32 fever_count = 6;
  if (this->fever_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fever_count());
  }

  // uint32 perfect_hit_count = 8;
  if (this->perfect_hit_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->perfect_hit_count());
  }

  // float damage = 11;
  if (this->damage() != 0) {
    total_size += 1 + 4;
  }

  // uint32 score = 12;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BounceConjuringGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BounceConjuringGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BounceConjuringGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BounceConjuringGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BounceConjuringGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BounceConjuringGallerySettleInfo)
    MergeFrom(*source);
  }
}

void BounceConjuringGallerySettleInfo::MergeFrom(const BounceConjuringGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BounceConjuringGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  gadget_count_map_.MergeFrom(from.gadget_count_map_);
  if (from.has_player_info()) {
    mutable_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.player_info());
  }
  if (from.normal_hit_count() != 0) {
    set_normal_hit_count(from.normal_hit_count());
  }
  if (from.destroyed_machine_count() != 0) {
    set_destroyed_machine_count(from.destroyed_machine_count());
  }
  if (from.fever_count() != 0) {
    set_fever_count(from.fever_count());
  }
  if (from.perfect_hit_count() != 0) {
    set_perfect_hit_count(from.perfect_hit_count());
  }
  if (from.damage() != 0) {
    set_damage(from.damage());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void BounceConjuringGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BounceConjuringGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BounceConjuringGallerySettleInfo::CopyFrom(const BounceConjuringGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BounceConjuringGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BounceConjuringGallerySettleInfo::IsInitialized() const {
  return true;
}

void BounceConjuringGallerySettleInfo::Swap(BounceConjuringGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BounceConjuringGallerySettleInfo::InternalSwap(BounceConjuringGallerySettleInfo* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  gadget_count_map_.Swap(&other->gadget_count_map_);
  swap(player_info_, other->player_info_);
  swap(normal_hit_count_, other->normal_hit_count_);
  swap(destroyed_machine_count_, other->destroyed_machine_count_);
  swap(fever_count_, other->fever_count_);
  swap(perfect_hit_count_, other->perfect_hit_count_);
  swap(damage_, other->damage_);
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BounceConjuringGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BounceConjuringGallerySettleInfo

// .proto.OnlinePlayerInfo player_info = 14;
bool BounceConjuringGallerySettleInfo::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void BounceConjuringGallerySettleInfo::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& BounceConjuringGallerySettleInfo::player_info() const {
  const ::proto::OnlinePlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* BounceConjuringGallerySettleInfo::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.BounceConjuringGallerySettleInfo.player_info)
  return player_info_;
}
::proto::OnlinePlayerInfo* BounceConjuringGallerySettleInfo::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.BounceConjuringGallerySettleInfo.player_info)
  
  ::proto::OnlinePlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void BounceConjuringGallerySettleInfo::set_allocated_player_info(::proto::OnlinePlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BounceConjuringGallerySettleInfo.player_info)
}

// uint32 destroyed_machine_count = 5;
void BounceConjuringGallerySettleInfo::clear_destroyed_machine_count() {
  destroyed_machine_count_ = 0u;
}
::google::protobuf::uint32 BounceConjuringGallerySettleInfo::destroyed_machine_count() const {
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.destroyed_machine_count)
  return destroyed_machine_count_;
}
void BounceConjuringGallerySettleInfo::set_destroyed_machine_count(::google::protobuf::uint32 value) {
  
  destroyed_machine_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BounceConjuringGallerySettleInfo.destroyed_machine_count)
}

// uint32 fever_count = 6;
void BounceConjuringGallerySettleInfo::clear_fever_count() {
  fever_count_ = 0u;
}
::google::protobuf::uint32 BounceConjuringGallerySettleInfo::fever_count() const {
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.fever_count)
  return fever_count_;
}
void BounceConjuringGallerySettleInfo::set_fever_count(::google::protobuf::uint32 value) {
  
  fever_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BounceConjuringGallerySettleInfo.fever_count)
}

// uint32 normal_hit_count = 4;
void BounceConjuringGallerySettleInfo::clear_normal_hit_count() {
  normal_hit_count_ = 0u;
}
::google::protobuf::uint32 BounceConjuringGallerySettleInfo::normal_hit_count() const {
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.normal_hit_count)
  return normal_hit_count_;
}
void BounceConjuringGallerySettleInfo::set_normal_hit_count(::google::protobuf::uint32 value) {
  
  normal_hit_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BounceConjuringGallerySettleInfo.normal_hit_count)
}

// float damage = 11;
void BounceConjuringGallerySettleInfo::clear_damage() {
  damage_ = 0;
}
float BounceConjuringGallerySettleInfo::damage() const {
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.damage)
  return damage_;
}
void BounceConjuringGallerySettleInfo::set_damage(float value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.BounceConjuringGallerySettleInfo.damage)
}

// map<uint32, uint32> gadget_count_map = 15;
int BounceConjuringGallerySettleInfo::gadget_count_map_size() const {
  return gadget_count_map_.size();
}
void BounceConjuringGallerySettleInfo::clear_gadget_count_map() {
  gadget_count_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
BounceConjuringGallerySettleInfo::gadget_count_map() const {
  // @@protoc_insertion_point(field_map:proto.BounceConjuringGallerySettleInfo.gadget_count_map)
  return gadget_count_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
BounceConjuringGallerySettleInfo::mutable_gadget_count_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.BounceConjuringGallerySettleInfo.gadget_count_map)
  return gadget_count_map_.MutableMap();
}

// uint32 score = 12;
void BounceConjuringGallerySettleInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 BounceConjuringGallerySettleInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.score)
  return score_;
}
void BounceConjuringGallerySettleInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.BounceConjuringGallerySettleInfo.score)
}

// uint32 perfect_hit_count = 8;
void BounceConjuringGallerySettleInfo::clear_perfect_hit_count() {
  perfect_hit_count_ = 0u;
}
::google::protobuf::uint32 BounceConjuringGallerySettleInfo::perfect_hit_count() const {
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.perfect_hit_count)
  return perfect_hit_count_;
}
void BounceConjuringGallerySettleInfo::set_perfect_hit_count(::google::protobuf::uint32 value) {
  
  perfect_hit_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BounceConjuringGallerySettleInfo.perfect_hit_count)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 7;
int BounceConjuringGallerySettleInfo::card_list_size() const {
  return card_list_.size();
}
void BounceConjuringGallerySettleInfo::clear_card_list() {
  card_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& BounceConjuringGallerySettleInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BounceConjuringGallerySettleInfo.card_list)
  return card_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* BounceConjuringGallerySettleInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BounceConjuringGallerySettleInfo.card_list)
  return card_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* BounceConjuringGallerySettleInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.BounceConjuringGallerySettleInfo.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
BounceConjuringGallerySettleInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BounceConjuringGallerySettleInfo.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
BounceConjuringGallerySettleInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.BounceConjuringGallerySettleInfo.card_list)
  return card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryBounceConjuringHitNotify::kAddScoreFieldNumber;
const int GalleryBounceConjuringHitNotify::kIsPerfectFieldNumber;
const int GalleryBounceConjuringHitNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryBounceConjuringHitNotify::GalleryBounceConjuringHitNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryBounceConjuringHitNotify)
}
GalleryBounceConjuringHitNotify::GalleryBounceConjuringHitNotify(const GalleryBounceConjuringHitNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gallery_id_, &from.gallery_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&add_score_) -
    reinterpret_cast<char*>(&gallery_id_)) + sizeof(add_score_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryBounceConjuringHitNotify)
}

void GalleryBounceConjuringHitNotify::SharedCtor() {
  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_score_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(add_score_));
  _cached_size_ = 0;
}

GalleryBounceConjuringHitNotify::~GalleryBounceConjuringHitNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryBounceConjuringHitNotify)
  SharedDtor();
}

void GalleryBounceConjuringHitNotify::SharedDtor() {
}

void GalleryBounceConjuringHitNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryBounceConjuringHitNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryBounceConjuringHitNotify& GalleryBounceConjuringHitNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryBounceConjuringHitNotify* GalleryBounceConjuringHitNotify::New(::google::protobuf::Arena* arena) const {
  GalleryBounceConjuringHitNotify* n = new GalleryBounceConjuringHitNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryBounceConjuringHitNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryBounceConjuringHitNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&add_score_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(add_score_));
  _internal_metadata_.Clear();
}

bool GalleryBounceConjuringHitNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryBounceConjuringHitNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_perfect = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_perfect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryBounceConjuringHitNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryBounceConjuringHitNotify)
  return false;
#undef DO_
}

void GalleryBounceConjuringHitNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryBounceConjuringHitNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_perfect = 5;
  if (this->is_perfect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_perfect(), output);
  }

  // uint32 add_score = 8;
  if (this->add_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->add_score(), output);
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryBounceConjuringHitNotify)
}

::google::protobuf::uint8* GalleryBounceConjuringHitNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryBounceConjuringHitNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_perfect = 5;
  if (this->is_perfect() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_perfect(), target);
  }

  // uint32 add_score = 8;
  if (this->add_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->add_score(), target);
  }

  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryBounceConjuringHitNotify)
  return target;
}

size_t GalleryBounceConjuringHitNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryBounceConjuringHitNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 10;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // bool is_perfect = 5;
  if (this->is_perfect() != 0) {
    total_size += 1 + 1;
  }

  // uint32 add_score = 8;
  if (this->add_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryBounceConjuringHitNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryBounceConjuringHitNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryBounceConjuringHitNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryBounceConjuringHitNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryBounceConjuringHitNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryBounceConjuringHitNotify)
    MergeFrom(*source);
  }
}

void GalleryBounceConjuringHitNotify::MergeFrom(const GalleryBounceConjuringHitNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryBounceConjuringHitNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.is_perfect() != 0) {
    set_is_perfect(from.is_perfect());
  }
  if (from.add_score() != 0) {
    set_add_score(from.add_score());
  }
}

void GalleryBounceConjuringHitNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryBounceConjuringHitNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryBounceConjuringHitNotify::CopyFrom(const GalleryBounceConjuringHitNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryBounceConjuringHitNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryBounceConjuringHitNotify::IsInitialized() const {
  return true;
}

void GalleryBounceConjuringHitNotify::Swap(GalleryBounceConjuringHitNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryBounceConjuringHitNotify::InternalSwap(GalleryBounceConjuringHitNotify* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  swap(is_perfect_, other->is_perfect_);
  swap(add_score_, other->add_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryBounceConjuringHitNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryBounceConjuringHitNotify

// uint32 add_score = 8;
void GalleryBounceConjuringHitNotify::clear_add_score() {
  add_score_ = 0u;
}
::google::protobuf::uint32 GalleryBounceConjuringHitNotify::add_score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBounceConjuringHitNotify.add_score)
  return add_score_;
}
void GalleryBounceConjuringHitNotify::set_add_score(::google::protobuf::uint32 value) {
  
  add_score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBounceConjuringHitNotify.add_score)
}

// bool is_perfect = 5;
void GalleryBounceConjuringHitNotify::clear_is_perfect() {
  is_perfect_ = false;
}
bool GalleryBounceConjuringHitNotify::is_perfect() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBounceConjuringHitNotify.is_perfect)
  return is_perfect_;
}
void GalleryBounceConjuringHitNotify::set_is_perfect(bool value) {
  
  is_perfect_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBounceConjuringHitNotify.is_perfect)
}

// uint32 gallery_id = 10;
void GalleryBounceConjuringHitNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryBounceConjuringHitNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryBounceConjuringHitNotify.gallery_id)
  return gallery_id_;
}
void GalleryBounceConjuringHitNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryBounceConjuringHitNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GallerySumoKillMonsterNotify::kKillNormalMosnterNumFieldNumber;
const int GallerySumoKillMonsterNotify::kScoreFieldNumber;
const int GallerySumoKillMonsterNotify::kKillEliteMonsterNumFieldNumber;
const int GallerySumoKillMonsterNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GallerySumoKillMonsterNotify::GallerySumoKillMonsterNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GallerySumoKillMonsterNotify)
}
GallerySumoKillMonsterNotify::GallerySumoKillMonsterNotify(const GallerySumoKillMonsterNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kill_normal_mosnter_num_, &from.kill_normal_mosnter_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&kill_elite_monster_num_) -
    reinterpret_cast<char*>(&kill_normal_mosnter_num_)) + sizeof(kill_elite_monster_num_));
  // @@protoc_insertion_point(copy_constructor:proto.GallerySumoKillMonsterNotify)
}

void GallerySumoKillMonsterNotify::SharedCtor() {
  ::memset(&kill_normal_mosnter_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_elite_monster_num_) -
      reinterpret_cast<char*>(&kill_normal_mosnter_num_)) + sizeof(kill_elite_monster_num_));
  _cached_size_ = 0;
}

GallerySumoKillMonsterNotify::~GallerySumoKillMonsterNotify() {
  // @@protoc_insertion_point(destructor:proto.GallerySumoKillMonsterNotify)
  SharedDtor();
}

void GallerySumoKillMonsterNotify::SharedDtor() {
}

void GallerySumoKillMonsterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GallerySumoKillMonsterNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GallerySumoKillMonsterNotify& GallerySumoKillMonsterNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GallerySumoKillMonsterNotify* GallerySumoKillMonsterNotify::New(::google::protobuf::Arena* arena) const {
  GallerySumoKillMonsterNotify* n = new GallerySumoKillMonsterNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GallerySumoKillMonsterNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GallerySumoKillMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kill_normal_mosnter_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kill_elite_monster_num_) -
      reinterpret_cast<char*>(&kill_normal_mosnter_num_)) + sizeof(kill_elite_monster_num_));
  _internal_metadata_.Clear();
}

bool GallerySumoKillMonsterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GallerySumoKillMonsterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 kill_normal_mosnter_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_normal_mosnter_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_elite_monster_num = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_elite_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GallerySumoKillMonsterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GallerySumoKillMonsterNotify)
  return false;
#undef DO_
}

void GallerySumoKillMonsterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GallerySumoKillMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_normal_mosnter_num = 4;
  if (this->kill_normal_mosnter_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill_normal_mosnter_num(), output);
  }

  // uint32 score = 7;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->score(), output);
  }

  // uint32 gallery_id = 11;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->gallery_id(), output);
  }

  // uint32 kill_elite_monster_num = 14;
  if (this->kill_elite_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->kill_elite_monster_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GallerySumoKillMonsterNotify)
}

::google::protobuf::uint8* GallerySumoKillMonsterNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GallerySumoKillMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_normal_mosnter_num = 4;
  if (this->kill_normal_mosnter_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill_normal_mosnter_num(), target);
  }

  // uint32 score = 7;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->score(), target);
  }

  // uint32 gallery_id = 11;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->gallery_id(), target);
  }

  // uint32 kill_elite_monster_num = 14;
  if (this->kill_elite_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->kill_elite_monster_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GallerySumoKillMonsterNotify)
  return target;
}

size_t GallerySumoKillMonsterNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GallerySumoKillMonsterNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 kill_normal_mosnter_num = 4;
  if (this->kill_normal_mosnter_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_normal_mosnter_num());
  }

  // uint32 score = 7;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 gallery_id = 11;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 kill_elite_monster_num = 14;
  if (this->kill_elite_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_elite_monster_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GallerySumoKillMonsterNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GallerySumoKillMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GallerySumoKillMonsterNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GallerySumoKillMonsterNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GallerySumoKillMonsterNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GallerySumoKillMonsterNotify)
    MergeFrom(*source);
  }
}

void GallerySumoKillMonsterNotify::MergeFrom(const GallerySumoKillMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GallerySumoKillMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kill_normal_mosnter_num() != 0) {
    set_kill_normal_mosnter_num(from.kill_normal_mosnter_num());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.kill_elite_monster_num() != 0) {
    set_kill_elite_monster_num(from.kill_elite_monster_num());
  }
}

void GallerySumoKillMonsterNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GallerySumoKillMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GallerySumoKillMonsterNotify::CopyFrom(const GallerySumoKillMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GallerySumoKillMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GallerySumoKillMonsterNotify::IsInitialized() const {
  return true;
}

void GallerySumoKillMonsterNotify::Swap(GallerySumoKillMonsterNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GallerySumoKillMonsterNotify::InternalSwap(GallerySumoKillMonsterNotify* other) {
  using std::swap;
  swap(kill_normal_mosnter_num_, other->kill_normal_mosnter_num_);
  swap(score_, other->score_);
  swap(gallery_id_, other->gallery_id_);
  swap(kill_elite_monster_num_, other->kill_elite_monster_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GallerySumoKillMonsterNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GallerySumoKillMonsterNotify

// uint32 kill_normal_mosnter_num = 4;
void GallerySumoKillMonsterNotify::clear_kill_normal_mosnter_num() {
  kill_normal_mosnter_num_ = 0u;
}
::google::protobuf::uint32 GallerySumoKillMonsterNotify::kill_normal_mosnter_num() const {
  // @@protoc_insertion_point(field_get:proto.GallerySumoKillMonsterNotify.kill_normal_mosnter_num)
  return kill_normal_mosnter_num_;
}
void GallerySumoKillMonsterNotify::set_kill_normal_mosnter_num(::google::protobuf::uint32 value) {
  
  kill_normal_mosnter_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GallerySumoKillMonsterNotify.kill_normal_mosnter_num)
}

// uint32 score = 7;
void GallerySumoKillMonsterNotify::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 GallerySumoKillMonsterNotify::score() const {
  // @@protoc_insertion_point(field_get:proto.GallerySumoKillMonsterNotify.score)
  return score_;
}
void GallerySumoKillMonsterNotify::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.GallerySumoKillMonsterNotify.score)
}

// uint32 kill_elite_monster_num = 14;
void GallerySumoKillMonsterNotify::clear_kill_elite_monster_num() {
  kill_elite_monster_num_ = 0u;
}
::google::protobuf::uint32 GallerySumoKillMonsterNotify::kill_elite_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.GallerySumoKillMonsterNotify.kill_elite_monster_num)
  return kill_elite_monster_num_;
}
void GallerySumoKillMonsterNotify::set_kill_elite_monster_num(::google::protobuf::uint32 value) {
  
  kill_elite_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GallerySumoKillMonsterNotify.kill_elite_monster_num)
}

// uint32 gallery_id = 11;
void GallerySumoKillMonsterNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GallerySumoKillMonsterNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GallerySumoKillMonsterNotify.gallery_id)
  return gallery_id_;
}
void GallerySumoKillMonsterNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GallerySumoKillMonsterNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryCrystalLinkKillMonsterNotify::kScoreFieldNumber;
const int GalleryCrystalLinkKillMonsterNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryCrystalLinkKillMonsterNotify::GalleryCrystalLinkKillMonsterNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryCrystalLinkKillMonsterNotify)
}
GalleryCrystalLinkKillMonsterNotify::GalleryCrystalLinkKillMonsterNotify(const GalleryCrystalLinkKillMonsterNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&score_, &from.score_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_id_) -
    reinterpret_cast<char*>(&score_)) + sizeof(gallery_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryCrystalLinkKillMonsterNotify)
}

void GalleryCrystalLinkKillMonsterNotify::SharedCtor() {
  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&score_)) + sizeof(gallery_id_));
  _cached_size_ = 0;
}

GalleryCrystalLinkKillMonsterNotify::~GalleryCrystalLinkKillMonsterNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryCrystalLinkKillMonsterNotify)
  SharedDtor();
}

void GalleryCrystalLinkKillMonsterNotify::SharedDtor() {
}

void GalleryCrystalLinkKillMonsterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryCrystalLinkKillMonsterNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryCrystalLinkKillMonsterNotify& GalleryCrystalLinkKillMonsterNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryCrystalLinkKillMonsterNotify* GalleryCrystalLinkKillMonsterNotify::New(::google::protobuf::Arena* arena) const {
  GalleryCrystalLinkKillMonsterNotify* n = new GalleryCrystalLinkKillMonsterNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryCrystalLinkKillMonsterNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryCrystalLinkKillMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&score_)) + sizeof(gallery_id_));
  _internal_metadata_.Clear();
}

bool GalleryCrystalLinkKillMonsterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryCrystalLinkKillMonsterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 score = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryCrystalLinkKillMonsterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryCrystalLinkKillMonsterNotify)
  return false;
#undef DO_
}

void GalleryCrystalLinkKillMonsterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryCrystalLinkKillMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 7;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->score(), output);
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryCrystalLinkKillMonsterNotify)
}

::google::protobuf::uint8* GalleryCrystalLinkKillMonsterNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryCrystalLinkKillMonsterNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 7;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->score(), target);
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryCrystalLinkKillMonsterNotify)
  return target;
}

size_t GalleryCrystalLinkKillMonsterNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryCrystalLinkKillMonsterNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 score = 7;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryCrystalLinkKillMonsterNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryCrystalLinkKillMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryCrystalLinkKillMonsterNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryCrystalLinkKillMonsterNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryCrystalLinkKillMonsterNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryCrystalLinkKillMonsterNotify)
    MergeFrom(*source);
  }
}

void GalleryCrystalLinkKillMonsterNotify::MergeFrom(const GalleryCrystalLinkKillMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryCrystalLinkKillMonsterNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryCrystalLinkKillMonsterNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryCrystalLinkKillMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryCrystalLinkKillMonsterNotify::CopyFrom(const GalleryCrystalLinkKillMonsterNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryCrystalLinkKillMonsterNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryCrystalLinkKillMonsterNotify::IsInitialized() const {
  return true;
}

void GalleryCrystalLinkKillMonsterNotify::Swap(GalleryCrystalLinkKillMonsterNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryCrystalLinkKillMonsterNotify::InternalSwap(GalleryCrystalLinkKillMonsterNotify* other) {
  using std::swap;
  swap(score_, other->score_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryCrystalLinkKillMonsterNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryCrystalLinkKillMonsterNotify

// uint32 score = 7;
void GalleryCrystalLinkKillMonsterNotify::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 GalleryCrystalLinkKillMonsterNotify::score() const {
  // @@protoc_insertion_point(field_get:proto.GalleryCrystalLinkKillMonsterNotify.score)
  return score_;
}
void GalleryCrystalLinkKillMonsterNotify::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryCrystalLinkKillMonsterNotify.score)
}

// uint32 gallery_id = 9;
void GalleryCrystalLinkKillMonsterNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryCrystalLinkKillMonsterNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryCrystalLinkKillMonsterNotify.gallery_id)
  return gallery_id_;
}
void GalleryCrystalLinkKillMonsterNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryCrystalLinkKillMonsterNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryCrystalLinkBuffInfoNotify::kGalleryIdFieldNumber;
const int GalleryCrystalLinkBuffInfoNotify::kIsBuffValidFieldNumber;
const int GalleryCrystalLinkBuffInfoNotify::kBuffIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryCrystalLinkBuffInfoNotify::GalleryCrystalLinkBuffInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryCrystalLinkBuffInfoNotify)
}
GalleryCrystalLinkBuffInfoNotify::GalleryCrystalLinkBuffInfoNotify(const GalleryCrystalLinkBuffInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_id_, &from.buff_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_id_) -
    reinterpret_cast<char*>(&buff_id_)) + sizeof(gallery_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryCrystalLinkBuffInfoNotify)
}

void GalleryCrystalLinkBuffInfoNotify::SharedCtor() {
  ::memset(&buff_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&buff_id_)) + sizeof(gallery_id_));
  _cached_size_ = 0;
}

GalleryCrystalLinkBuffInfoNotify::~GalleryCrystalLinkBuffInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryCrystalLinkBuffInfoNotify)
  SharedDtor();
}

void GalleryCrystalLinkBuffInfoNotify::SharedDtor() {
}

void GalleryCrystalLinkBuffInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryCrystalLinkBuffInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryCrystalLinkBuffInfoNotify& GalleryCrystalLinkBuffInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryCrystalLinkBuffInfoNotify* GalleryCrystalLinkBuffInfoNotify::New(::google::protobuf::Arena* arena) const {
  GalleryCrystalLinkBuffInfoNotify* n = new GalleryCrystalLinkBuffInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryCrystalLinkBuffInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryCrystalLinkBuffInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buff_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&buff_id_)) + sizeof(gallery_id_));
  _internal_metadata_.Clear();
}

bool GalleryCrystalLinkBuffInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryCrystalLinkBuffInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_buff_valid = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_buff_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryCrystalLinkBuffInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryCrystalLinkBuffInfoNotify)
  return false;
#undef DO_
}

void GalleryCrystalLinkBuffInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryCrystalLinkBuffInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_buff_valid = 11;
  if (this->is_buff_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_buff_valid(), output);
  }

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gallery_id(), output);
  }

  // uint32 buff_id = 14;
  if (this->buff_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->buff_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryCrystalLinkBuffInfoNotify)
}

::google::protobuf::uint8* GalleryCrystalLinkBuffInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryCrystalLinkBuffInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_buff_valid = 11;
  if (this->is_buff_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_buff_valid(), target);
  }

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gallery_id(), target);
  }

  // uint32 buff_id = 14;
  if (this->buff_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->buff_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryCrystalLinkBuffInfoNotify)
  return target;
}

size_t GalleryCrystalLinkBuffInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryCrystalLinkBuffInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 buff_id = 14;
  if (this->buff_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_id());
  }

  // bool is_buff_valid = 11;
  if (this->is_buff_valid() != 0) {
    total_size += 1 + 1;
  }

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryCrystalLinkBuffInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryCrystalLinkBuffInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryCrystalLinkBuffInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryCrystalLinkBuffInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryCrystalLinkBuffInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryCrystalLinkBuffInfoNotify)
    MergeFrom(*source);
  }
}

void GalleryCrystalLinkBuffInfoNotify::MergeFrom(const GalleryCrystalLinkBuffInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryCrystalLinkBuffInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buff_id() != 0) {
    set_buff_id(from.buff_id());
  }
  if (from.is_buff_valid() != 0) {
    set_is_buff_valid(from.is_buff_valid());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryCrystalLinkBuffInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryCrystalLinkBuffInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryCrystalLinkBuffInfoNotify::CopyFrom(const GalleryCrystalLinkBuffInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryCrystalLinkBuffInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryCrystalLinkBuffInfoNotify::IsInitialized() const {
  return true;
}

void GalleryCrystalLinkBuffInfoNotify::Swap(GalleryCrystalLinkBuffInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryCrystalLinkBuffInfoNotify::InternalSwap(GalleryCrystalLinkBuffInfoNotify* other) {
  using std::swap;
  swap(buff_id_, other->buff_id_);
  swap(is_buff_valid_, other->is_buff_valid_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryCrystalLinkBuffInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryCrystalLinkBuffInfoNotify

// uint32 gallery_id = 13;
void GalleryCrystalLinkBuffInfoNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryCrystalLinkBuffInfoNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryCrystalLinkBuffInfoNotify.gallery_id)
  return gallery_id_;
}
void GalleryCrystalLinkBuffInfoNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryCrystalLinkBuffInfoNotify.gallery_id)
}

// bool is_buff_valid = 11;
void GalleryCrystalLinkBuffInfoNotify::clear_is_buff_valid() {
  is_buff_valid_ = false;
}
bool GalleryCrystalLinkBuffInfoNotify::is_buff_valid() const {
  // @@protoc_insertion_point(field_get:proto.GalleryCrystalLinkBuffInfoNotify.is_buff_valid)
  return is_buff_valid_;
}
void GalleryCrystalLinkBuffInfoNotify::set_is_buff_valid(bool value) {
  
  is_buff_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryCrystalLinkBuffInfoNotify.is_buff_valid)
}

// uint32 buff_id = 14;
void GalleryCrystalLinkBuffInfoNotify::clear_buff_id() {
  buff_id_ = 0u;
}
::google::protobuf::uint32 GalleryCrystalLinkBuffInfoNotify::buff_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryCrystalLinkBuffInfoNotify.buff_id)
  return buff_id_;
}
void GalleryCrystalLinkBuffInfoNotify::set_buff_id(::google::protobuf::uint32 value) {
  
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryCrystalLinkBuffInfoNotify.buff_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishInfo::kFreeCountFieldNumber;
const int FishInfo::kIntoBagCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishInfo::FishInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FishInfo)
}
FishInfo::FishInfo(const FishInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&free_count_, &from.free_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&into_bag_count_) -
    reinterpret_cast<char*>(&free_count_)) + sizeof(into_bag_count_));
  // @@protoc_insertion_point(copy_constructor:proto.FishInfo)
}

void FishInfo::SharedCtor() {
  ::memset(&free_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&into_bag_count_) -
      reinterpret_cast<char*>(&free_count_)) + sizeof(into_bag_count_));
  _cached_size_ = 0;
}

FishInfo::~FishInfo() {
  // @@protoc_insertion_point(destructor:proto.FishInfo)
  SharedDtor();
}

void FishInfo::SharedDtor() {
}

void FishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FishInfo& FishInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FishInfo* FishInfo::New(::google::protobuf::Arena* arena) const {
  FishInfo* n = new FishInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&free_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&into_bag_count_) -
      reinterpret_cast<char*>(&free_count_)) + sizeof(into_bag_count_));
  _internal_metadata_.Clear();
}

bool FishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FishInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 free_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 into_bag_count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &into_bag_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FishInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FishInfo)
  return false;
#undef DO_
}

void FishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 free_count = 11;
  if (this->free_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->free_count(), output);
  }

  // uint32 into_bag_count = 12;
  if (this->into_bag_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->into_bag_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FishInfo)
}

::google::protobuf::uint8* FishInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FishInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 free_count = 11;
  if (this->free_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->free_count(), target);
  }

  // uint32 into_bag_count = 12;
  if (this->into_bag_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->into_bag_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FishInfo)
  return target;
}

size_t FishInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FishInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 free_count = 11;
  if (this->free_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->free_count());
  }

  // uint32 into_bag_count = 12;
  if (this->into_bag_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->into_bag_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FishInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FishInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FishInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FishInfo)
    MergeFrom(*source);
  }
}

void FishInfo::MergeFrom(const FishInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FishInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.free_count() != 0) {
    set_free_count(from.free_count());
  }
  if (from.into_bag_count() != 0) {
    set_into_bag_count(from.into_bag_count());
  }
}

void FishInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishInfo::CopyFrom(const FishInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FishInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishInfo::IsInitialized() const {
  return true;
}

void FishInfo::Swap(FishInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishInfo::InternalSwap(FishInfo* other) {
  using std::swap;
  swap(free_count_, other->free_count_);
  swap(into_bag_count_, other->into_bag_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishInfo

// uint32 free_count = 11;
void FishInfo::clear_free_count() {
  free_count_ = 0u;
}
::google::protobuf::uint32 FishInfo::free_count() const {
  // @@protoc_insertion_point(field_get:proto.FishInfo.free_count)
  return free_count_;
}
void FishInfo::set_free_count(::google::protobuf::uint32 value) {
  
  free_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FishInfo.free_count)
}

// uint32 into_bag_count = 12;
void FishInfo::clear_into_bag_count() {
  into_bag_count_ = 0u;
}
::google::protobuf::uint32 FishInfo::into_bag_count() const {
  // @@protoc_insertion_point(field_get:proto.FishInfo.into_bag_count)
  return into_bag_count_;
}
void FishInfo::set_into_bag_count(::google::protobuf::uint32 value) {
  
  into_bag_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FishInfo.into_bag_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishingScore::kFishingScoreFieldNumber;
const int FishingScore::kIsNewRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishingScore::FishingScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FishingScore)
}
FishingScore::FishingScore(const FishingScore& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fishing_score_, &from.fishing_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_record_) -
    reinterpret_cast<char*>(&fishing_score_)) + sizeof(is_new_record_));
  // @@protoc_insertion_point(copy_constructor:proto.FishingScore)
}

void FishingScore::SharedCtor() {
  ::memset(&fishing_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_record_) -
      reinterpret_cast<char*>(&fishing_score_)) + sizeof(is_new_record_));
  _cached_size_ = 0;
}

FishingScore::~FishingScore() {
  // @@protoc_insertion_point(destructor:proto.FishingScore)
  SharedDtor();
}

void FishingScore::SharedDtor() {
}

void FishingScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishingScore::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FishingScore& FishingScore::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FishingScore* FishingScore::New(::google::protobuf::Arena* arena) const {
  FishingScore* n = new FishingScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishingScore::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FishingScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fishing_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_record_) -
      reinterpret_cast<char*>(&fishing_score_)) + sizeof(is_new_record_));
  _internal_metadata_.Clear();
}

bool FishingScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FishingScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fishing_score = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fishing_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FishingScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FishingScore)
  return false;
#undef DO_
}

void FishingScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FishingScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fishing_score = 2;
  if (this->fishing_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fishing_score(), output);
  }

  // bool is_new_record = 4;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_new_record(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FishingScore)
}

::google::protobuf::uint8* FishingScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FishingScore)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fishing_score = 2;
  if (this->fishing_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fishing_score(), target);
  }

  // bool is_new_record = 4;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_new_record(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FishingScore)
  return target;
}

size_t FishingScore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FishingScore)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 fishing_score = 2;
  if (this->fishing_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fishing_score());
  }

  // bool is_new_record = 4;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishingScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FishingScore)
  GOOGLE_DCHECK_NE(&from, this);
  const FishingScore* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FishingScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FishingScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FishingScore)
    MergeFrom(*source);
  }
}

void FishingScore::MergeFrom(const FishingScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FishingScore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fishing_score() != 0) {
    set_fishing_score(from.fishing_score());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
}

void FishingScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FishingScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishingScore::CopyFrom(const FishingScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FishingScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishingScore::IsInitialized() const {
  return true;
}

void FishingScore::Swap(FishingScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishingScore::InternalSwap(FishingScore* other) {
  using std::swap;
  swap(fishing_score_, other->fishing_score_);
  swap(is_new_record_, other->is_new_record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishingScore::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishingScore

// uint32 fishing_score = 2;
void FishingScore::clear_fishing_score() {
  fishing_score_ = 0u;
}
::google::protobuf::uint32 FishingScore::fishing_score() const {
  // @@protoc_insertion_point(field_get:proto.FishingScore.fishing_score)
  return fishing_score_;
}
void FishingScore::set_fishing_score(::google::protobuf::uint32 value) {
  
  fishing_score_ = value;
  // @@protoc_insertion_point(field_set:proto.FishingScore.fishing_score)
}

// bool is_new_record = 4;
void FishingScore::clear_is_new_record() {
  is_new_record_ = false;
}
bool FishingScore::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.FishingScore.is_new_record)
  return is_new_record_;
}
void FishingScore::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.FishingScore.is_new_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

FishingGallerySettleInfo::FishingGallerySettleInfo_FishMapEntry::FishingGallerySettleInfo_FishMapEntry() {}
FishingGallerySettleInfo::FishingGallerySettleInfo_FishMapEntry::FishingGallerySettleInfo_FishMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata FishingGallerySettleInfo::FishingGallerySettleInfo_FishMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[74];
}
void FishingGallerySettleInfo::FishingGallerySettleInfo_FishMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void FishingGallerySettleInfo::FishingGallerySettleInfo_FishMapEntry::MergeFrom(const FishingGallerySettleInfo_FishMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FishingGallerySettleInfo::kFishMapFieldNumber;
const int FishingGallerySettleInfo::kFishingScoreListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FishingGallerySettleInfo::FishingGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FishingGallerySettleInfo)
}
FishingGallerySettleInfo::FishingGallerySettleInfo(const FishingGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fishing_score_list_(from.fishing_score_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fish_map_.MergeFrom(from.fish_map_);
  // @@protoc_insertion_point(copy_constructor:proto.FishingGallerySettleInfo)
}

void FishingGallerySettleInfo::SharedCtor() {
  _cached_size_ = 0;
}

FishingGallerySettleInfo::~FishingGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.FishingGallerySettleInfo)
  SharedDtor();
}

void FishingGallerySettleInfo::SharedDtor() {
}

void FishingGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FishingGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FishingGallerySettleInfo& FishingGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FishingGallerySettleInfo* FishingGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  FishingGallerySettleInfo* n = new FishingGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FishingGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FishingGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fish_map_.Clear();
  fishing_score_list_.Clear();
  _internal_metadata_.Clear();
}

bool FishingGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FishingGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, .proto.FishInfo> fish_map = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          FishingGallerySettleInfo_FishMapEntry::Parser< ::google::protobuf::internal::MapField<
              FishingGallerySettleInfo_FishMapEntry,
              ::google::protobuf::uint32, ::proto::FishInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo > > parser(&fish_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.FishingScore fishing_score_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fishing_score_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FishingGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FishingGallerySettleInfo)
  return false;
#undef DO_
}

void FishingGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FishingGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.FishInfo> fish_map = 11;
  if (!this->fish_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->fish_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fish_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::const_iterator
          it = this->fish_map().begin();
          it != this->fish_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FishingGallerySettleInfo_FishMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fish_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<FishingGallerySettleInfo_FishMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::const_iterator
          it = this->fish_map().begin();
          it != this->fish_map().end(); ++it) {
        entry.reset(fish_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            11, *entry, output);
      }
    }
  }

  // repeated .proto.FishingScore fishing_score_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fishing_score_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->fishing_score_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FishingGallerySettleInfo)
}

::google::protobuf::uint8* FishingGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FishingGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .proto.FishInfo> fish_map = 11;
  if (!this->fish_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->fish_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->fish_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::const_iterator
          it = this->fish_map().begin();
          it != this->fish_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<FishingGallerySettleInfo_FishMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(fish_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<FishingGallerySettleInfo_FishMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::const_iterator
          it = this->fish_map().begin();
          it != this->fish_map().end(); ++it) {
        entry.reset(fish_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       11, *entry, deterministic, target);
;
      }
    }
  }

  // repeated .proto.FishingScore fishing_score_list = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fishing_score_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->fishing_score_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FishingGallerySettleInfo)
  return target;
}

size_t FishingGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FishingGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.FishInfo> fish_map = 11;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fish_map_size());
  {
    ::google::protobuf::scoped_ptr<FishingGallerySettleInfo_FishMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >::const_iterator
        it = this->fish_map().begin();
        it != this->fish_map().end(); ++it) {
      entry.reset(fish_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.FishingScore fishing_score_list = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->fishing_score_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fishing_score_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FishingGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FishingGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FishingGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FishingGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FishingGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FishingGallerySettleInfo)
    MergeFrom(*source);
  }
}

void FishingGallerySettleInfo::MergeFrom(const FishingGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FishingGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fish_map_.MergeFrom(from.fish_map_);
  fishing_score_list_.MergeFrom(from.fishing_score_list_);
}

void FishingGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FishingGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FishingGallerySettleInfo::CopyFrom(const FishingGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FishingGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FishingGallerySettleInfo::IsInitialized() const {
  return true;
}

void FishingGallerySettleInfo::Swap(FishingGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FishingGallerySettleInfo::InternalSwap(FishingGallerySettleInfo* other) {
  using std::swap;
  fish_map_.Swap(&other->fish_map_);
  fishing_score_list_.InternalSwap(&other->fishing_score_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FishingGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FishingGallerySettleInfo

// map<uint32, .proto.FishInfo> fish_map = 11;
int FishingGallerySettleInfo::fish_map_size() const {
  return fish_map_.size();
}
void FishingGallerySettleInfo::clear_fish_map() {
  fish_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >&
FishingGallerySettleInfo::fish_map() const {
  // @@protoc_insertion_point(field_map:proto.FishingGallerySettleInfo.fish_map)
  return fish_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::FishInfo >*
FishingGallerySettleInfo::mutable_fish_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.FishingGallerySettleInfo.fish_map)
  return fish_map_.MutableMap();
}

// repeated .proto.FishingScore fishing_score_list = 15;
int FishingGallerySettleInfo::fishing_score_list_size() const {
  return fishing_score_list_.size();
}
void FishingGallerySettleInfo::clear_fishing_score_list() {
  fishing_score_list_.Clear();
}
const ::proto::FishingScore& FishingGallerySettleInfo::fishing_score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FishingGallerySettleInfo.fishing_score_list)
  return fishing_score_list_.Get(index);
}
::proto::FishingScore* FishingGallerySettleInfo::mutable_fishing_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FishingGallerySettleInfo.fishing_score_list)
  return fishing_score_list_.Mutable(index);
}
::proto::FishingScore* FishingGallerySettleInfo::add_fishing_score_list() {
  // @@protoc_insertion_point(field_add:proto.FishingGallerySettleInfo.fishing_score_list)
  return fishing_score_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::FishingScore >*
FishingGallerySettleInfo::mutable_fishing_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FishingGallerySettleInfo.fishing_score_list)
  return &fishing_score_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::FishingScore >&
FishingGallerySettleInfo::fishing_score_list() const {
  // @@protoc_insertion_point(field_list:proto.FishingGallerySettleInfo.fishing_score_list)
  return fishing_score_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RacingGallerySettleInfo::kWinnerUidFieldNumber;
const int RacingGallerySettleInfo::kReasonFieldNumber;
const int RacingGallerySettleInfo::kUseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RacingGallerySettleInfo::RacingGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RacingGallerySettleInfo)
}
RacingGallerySettleInfo::RacingGallerySettleInfo(const RacingGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&use_time_, &from.use_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&winner_uid_) -
    reinterpret_cast<char*>(&use_time_)) + sizeof(winner_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.RacingGallerySettleInfo)
}

void RacingGallerySettleInfo::SharedCtor() {
  ::memset(&use_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_uid_) -
      reinterpret_cast<char*>(&use_time_)) + sizeof(winner_uid_));
  _cached_size_ = 0;
}

RacingGallerySettleInfo::~RacingGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.RacingGallerySettleInfo)
  SharedDtor();
}

void RacingGallerySettleInfo::SharedDtor() {
}

void RacingGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RacingGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RacingGallerySettleInfo& RacingGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

RacingGallerySettleInfo* RacingGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  RacingGallerySettleInfo* n = new RacingGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RacingGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RacingGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&use_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_uid_) -
      reinterpret_cast<char*>(&use_time_)) + sizeof(winner_uid_));
  _internal_metadata_.Clear();
}

bool RacingGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RacingGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 use_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStopReason reason = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GalleryStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 winner_uid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RacingGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RacingGallerySettleInfo)
  return false;
#undef DO_
}

void RacingGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RacingGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 use_time = 1;
  if (this->use_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->use_time(), output);
  }

  // .proto.GalleryStopReason reason = 4;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reason(), output);
  }

  // uint32 winner_uid = 6;
  if (this->winner_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->winner_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.RacingGallerySettleInfo)
}

::google::protobuf::uint8* RacingGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.RacingGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 use_time = 1;
  if (this->use_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->use_time(), target);
  }

  // .proto.GalleryStopReason reason = 4;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reason(), target);
  }

  // uint32 winner_uid = 6;
  if (this->winner_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->winner_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.RacingGallerySettleInfo)
  return target;
}

size_t RacingGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RacingGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 use_time = 1;
  if (this->use_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->use_time());
  }

  // .proto.GalleryStopReason reason = 4;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 winner_uid = 6;
  if (this->winner_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->winner_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RacingGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.RacingGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RacingGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RacingGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.RacingGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.RacingGallerySettleInfo)
    MergeFrom(*source);
  }
}

void RacingGallerySettleInfo::MergeFrom(const RacingGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RacingGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.use_time() != 0) {
    set_use_time(from.use_time());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.winner_uid() != 0) {
    set_winner_uid(from.winner_uid());
  }
}

void RacingGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.RacingGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RacingGallerySettleInfo::CopyFrom(const RacingGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RacingGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RacingGallerySettleInfo::IsInitialized() const {
  return true;
}

void RacingGallerySettleInfo::Swap(RacingGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RacingGallerySettleInfo::InternalSwap(RacingGallerySettleInfo* other) {
  using std::swap;
  swap(use_time_, other->use_time_);
  swap(reason_, other->reason_);
  swap(winner_uid_, other->winner_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RacingGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RacingGallerySettleInfo

// uint32 winner_uid = 6;
void RacingGallerySettleInfo::clear_winner_uid() {
  winner_uid_ = 0u;
}
::google::protobuf::uint32 RacingGallerySettleInfo::winner_uid() const {
  // @@protoc_insertion_point(field_get:proto.RacingGallerySettleInfo.winner_uid)
  return winner_uid_;
}
void RacingGallerySettleInfo::set_winner_uid(::google::protobuf::uint32 value) {
  
  winner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.RacingGallerySettleInfo.winner_uid)
}

// .proto.GalleryStopReason reason = 4;
void RacingGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::GalleryStopReason RacingGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.RacingGallerySettleInfo.reason)
  return static_cast< ::proto::GalleryStopReason >(reason_);
}
void RacingGallerySettleInfo::set_reason(::proto::GalleryStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.RacingGallerySettleInfo.reason)
}

// uint32 use_time = 1;
void RacingGallerySettleInfo::clear_use_time() {
  use_time_ = 0u;
}
::google::protobuf::uint32 RacingGallerySettleInfo::use_time() const {
  // @@protoc_insertion_point(field_get:proto.RacingGallerySettleInfo.use_time)
  return use_time_;
}
void RacingGallerySettleInfo::set_use_time(::google::protobuf::uint32 value) {
  
  use_time_ = value;
  // @@protoc_insertion_point(field_set:proto.RacingGallerySettleInfo.use_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SalvagePreventGallerySettleInfo::kTimeRemainFieldNumber;
const int SalvagePreventGallerySettleInfo::kReasonFieldNumber;
const int SalvagePreventGallerySettleInfo::kFinalScoreFieldNumber;
const int SalvagePreventGallerySettleInfo::kMonsterCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SalvagePreventGallerySettleInfo::SalvagePreventGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SalvagePreventGallerySettleInfo)
}
SalvagePreventGallerySettleInfo::SalvagePreventGallerySettleInfo(const SalvagePreventGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&monster_count_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(monster_count_));
  // @@protoc_insertion_point(copy_constructor:proto.SalvagePreventGallerySettleInfo)
}

void SalvagePreventGallerySettleInfo::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_count_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(monster_count_));
  _cached_size_ = 0;
}

SalvagePreventGallerySettleInfo::~SalvagePreventGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.SalvagePreventGallerySettleInfo)
  SharedDtor();
}

void SalvagePreventGallerySettleInfo::SharedDtor() {
}

void SalvagePreventGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SalvagePreventGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SalvagePreventGallerySettleInfo& SalvagePreventGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SalvagePreventGallerySettleInfo* SalvagePreventGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  SalvagePreventGallerySettleInfo* n = new SalvagePreventGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SalvagePreventGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SalvagePreventGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_count_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(monster_count_));
  _internal_metadata_.Clear();
}

bool SalvagePreventGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SalvagePreventGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SalvagePreventStopReason reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::SalvagePreventStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_remain = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 final_score = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monster_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SalvagePreventGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SalvagePreventGallerySettleInfo)
  return false;
#undef DO_
}

void SalvagePreventGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SalvagePreventGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SalvagePreventStopReason reason = 7;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reason(), output);
  }

  // uint32 time_remain = 8;
  if (this->time_remain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->time_remain(), output);
  }

  // uint32 final_score = 13;
  if (this->final_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->final_score(), output);
  }

  // uint32 monster_count = 15;
  if (this->monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->monster_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SalvagePreventGallerySettleInfo)
}

::google::protobuf::uint8* SalvagePreventGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SalvagePreventGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SalvagePreventStopReason reason = 7;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reason(), target);
  }

  // uint32 time_remain = 8;
  if (this->time_remain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->time_remain(), target);
  }

  // uint32 final_score = 13;
  if (this->final_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->final_score(), target);
  }

  // uint32 monster_count = 15;
  if (this->monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->monster_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SalvagePreventGallerySettleInfo)
  return target;
}

size_t SalvagePreventGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SalvagePreventGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.SalvagePreventStopReason reason = 7;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 time_remain = 8;
  if (this->time_remain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_remain());
  }

  // uint32 final_score = 13;
  if (this->final_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->final_score());
  }

  // uint32 monster_count = 15;
  if (this->monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SalvagePreventGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SalvagePreventGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SalvagePreventGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SalvagePreventGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SalvagePreventGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SalvagePreventGallerySettleInfo)
    MergeFrom(*source);
  }
}

void SalvagePreventGallerySettleInfo::MergeFrom(const SalvagePreventGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SalvagePreventGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.time_remain() != 0) {
    set_time_remain(from.time_remain());
  }
  if (from.final_score() != 0) {
    set_final_score(from.final_score());
  }
  if (from.monster_count() != 0) {
    set_monster_count(from.monster_count());
  }
}

void SalvagePreventGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SalvagePreventGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalvagePreventGallerySettleInfo::CopyFrom(const SalvagePreventGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SalvagePreventGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalvagePreventGallerySettleInfo::IsInitialized() const {
  return true;
}

void SalvagePreventGallerySettleInfo::Swap(SalvagePreventGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SalvagePreventGallerySettleInfo::InternalSwap(SalvagePreventGallerySettleInfo* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(time_remain_, other->time_remain_);
  swap(final_score_, other->final_score_);
  swap(monster_count_, other->monster_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SalvagePreventGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SalvagePreventGallerySettleInfo

// uint32 time_remain = 8;
void SalvagePreventGallerySettleInfo::clear_time_remain() {
  time_remain_ = 0u;
}
::google::protobuf::uint32 SalvagePreventGallerySettleInfo::time_remain() const {
  // @@protoc_insertion_point(field_get:proto.SalvagePreventGallerySettleInfo.time_remain)
  return time_remain_;
}
void SalvagePreventGallerySettleInfo::set_time_remain(::google::protobuf::uint32 value) {
  
  time_remain_ = value;
  // @@protoc_insertion_point(field_set:proto.SalvagePreventGallerySettleInfo.time_remain)
}

// .proto.SalvagePreventStopReason reason = 7;
void SalvagePreventGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::SalvagePreventStopReason SalvagePreventGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.SalvagePreventGallerySettleInfo.reason)
  return static_cast< ::proto::SalvagePreventStopReason >(reason_);
}
void SalvagePreventGallerySettleInfo::set_reason(::proto::SalvagePreventStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.SalvagePreventGallerySettleInfo.reason)
}

// uint32 final_score = 13;
void SalvagePreventGallerySettleInfo::clear_final_score() {
  final_score_ = 0u;
}
::google::protobuf::uint32 SalvagePreventGallerySettleInfo::final_score() const {
  // @@protoc_insertion_point(field_get:proto.SalvagePreventGallerySettleInfo.final_score)
  return final_score_;
}
void SalvagePreventGallerySettleInfo::set_final_score(::google::protobuf::uint32 value) {
  
  final_score_ = value;
  // @@protoc_insertion_point(field_set:proto.SalvagePreventGallerySettleInfo.final_score)
}

// uint32 monster_count = 15;
void SalvagePreventGallerySettleInfo::clear_monster_count() {
  monster_count_ = 0u;
}
::google::protobuf::uint32 SalvagePreventGallerySettleInfo::monster_count() const {
  // @@protoc_insertion_point(field_get:proto.SalvagePreventGallerySettleInfo.monster_count)
  return monster_count_;
}
void SalvagePreventGallerySettleInfo::set_monster_count(::google::protobuf::uint32 value) {
  
  monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SalvagePreventGallerySettleInfo.monster_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SalvageEscortGallerySettleInfo::kTimeRemainFieldNumber;
const int SalvageEscortGallerySettleInfo::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SalvageEscortGallerySettleInfo::SalvageEscortGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SalvageEscortGallerySettleInfo)
}
SalvageEscortGallerySettleInfo::SalvageEscortGallerySettleInfo(const SalvageEscortGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_remain_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(time_remain_));
  // @@protoc_insertion_point(copy_constructor:proto.SalvageEscortGallerySettleInfo)
}

void SalvageEscortGallerySettleInfo::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_remain_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(time_remain_));
  _cached_size_ = 0;
}

SalvageEscortGallerySettleInfo::~SalvageEscortGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.SalvageEscortGallerySettleInfo)
  SharedDtor();
}

void SalvageEscortGallerySettleInfo::SharedDtor() {
}

void SalvageEscortGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SalvageEscortGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SalvageEscortGallerySettleInfo& SalvageEscortGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SalvageEscortGallerySettleInfo* SalvageEscortGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  SalvageEscortGallerySettleInfo* n = new SalvageEscortGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SalvageEscortGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SalvageEscortGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_remain_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(time_remain_));
  _internal_metadata_.Clear();
}

bool SalvageEscortGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SalvageEscortGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SalvageEscortStopReason reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::SalvageEscortStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_remain = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_remain_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SalvageEscortGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SalvageEscortGallerySettleInfo)
  return false;
#undef DO_
}

void SalvageEscortGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SalvageEscortGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SalvageEscortStopReason reason = 7;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reason(), output);
  }

  // uint32 time_remain = 14;
  if (this->time_remain() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->time_remain(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SalvageEscortGallerySettleInfo)
}

::google::protobuf::uint8* SalvageEscortGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SalvageEscortGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.SalvageEscortStopReason reason = 7;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reason(), target);
  }

  // uint32 time_remain = 14;
  if (this->time_remain() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->time_remain(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SalvageEscortGallerySettleInfo)
  return target;
}

size_t SalvageEscortGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SalvageEscortGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.SalvageEscortStopReason reason = 7;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 time_remain = 14;
  if (this->time_remain() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_remain());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SalvageEscortGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SalvageEscortGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SalvageEscortGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SalvageEscortGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SalvageEscortGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SalvageEscortGallerySettleInfo)
    MergeFrom(*source);
  }
}

void SalvageEscortGallerySettleInfo::MergeFrom(const SalvageEscortGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SalvageEscortGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.time_remain() != 0) {
    set_time_remain(from.time_remain());
  }
}

void SalvageEscortGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SalvageEscortGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SalvageEscortGallerySettleInfo::CopyFrom(const SalvageEscortGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SalvageEscortGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SalvageEscortGallerySettleInfo::IsInitialized() const {
  return true;
}

void SalvageEscortGallerySettleInfo::Swap(SalvageEscortGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SalvageEscortGallerySettleInfo::InternalSwap(SalvageEscortGallerySettleInfo* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(time_remain_, other->time_remain_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SalvageEscortGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SalvageEscortGallerySettleInfo

// uint32 time_remain = 14;
void SalvageEscortGallerySettleInfo::clear_time_remain() {
  time_remain_ = 0u;
}
::google::protobuf::uint32 SalvageEscortGallerySettleInfo::time_remain() const {
  // @@protoc_insertion_point(field_get:proto.SalvageEscortGallerySettleInfo.time_remain)
  return time_remain_;
}
void SalvageEscortGallerySettleInfo::set_time_remain(::google::protobuf::uint32 value) {
  
  time_remain_ = value;
  // @@protoc_insertion_point(field_set:proto.SalvageEscortGallerySettleInfo.time_remain)
}

// .proto.SalvageEscortStopReason reason = 7;
void SalvageEscortGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::SalvageEscortStopReason SalvageEscortGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.SalvageEscortGallerySettleInfo.reason)
  return static_cast< ::proto::SalvageEscortStopReason >(reason_);
}
void SalvageEscortGallerySettleInfo::set_reason(::proto::SalvageEscortStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.SalvageEscortGallerySettleInfo.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalloonGallerySettleInfo::kScoreFieldNumber;
const int BalloonGallerySettleInfo::kReasonFieldNumber;
const int BalloonGallerySettleInfo::kHitCountFieldNumber;
const int BalloonGallerySettleInfo::kOwnerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalloonGallerySettleInfo::BalloonGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BalloonGallerySettleInfo)
}
BalloonGallerySettleInfo::BalloonGallerySettleInfo(const BalloonGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&owner_uid_, &from.owner_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
    reinterpret_cast<char*>(&owner_uid_)) + sizeof(reason_));
  // @@protoc_insertion_point(copy_constructor:proto.BalloonGallerySettleInfo)
}

void BalloonGallerySettleInfo::SharedCtor() {
  ::memset(&owner_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&owner_uid_)) + sizeof(reason_));
  _cached_size_ = 0;
}

BalloonGallerySettleInfo::~BalloonGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.BalloonGallerySettleInfo)
  SharedDtor();
}

void BalloonGallerySettleInfo::SharedDtor() {
}

void BalloonGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalloonGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BalloonGallerySettleInfo& BalloonGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BalloonGallerySettleInfo* BalloonGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  BalloonGallerySettleInfo* n = new BalloonGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalloonGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BalloonGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&owner_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&owner_uid_)) + sizeof(reason_));
  _internal_metadata_.Clear();
}

bool BalloonGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BalloonGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 owner_uid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hit_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStopReason reason = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GalleryStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BalloonGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BalloonGallerySettleInfo)
  return false;
#undef DO_
}

void BalloonGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BalloonGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_uid = 6;
  if (this->owner_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->owner_uid(), output);
  }

  // uint32 score = 8;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->score(), output);
  }

  // uint32 hit_count = 10;
  if (this->hit_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hit_count(), output);
  }

  // .proto.GalleryStopReason reason = 14;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BalloonGallerySettleInfo)
}

::google::protobuf::uint8* BalloonGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BalloonGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 owner_uid = 6;
  if (this->owner_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->owner_uid(), target);
  }

  // uint32 score = 8;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->score(), target);
  }

  // uint32 hit_count = 10;
  if (this->hit_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hit_count(), target);
  }

  // .proto.GalleryStopReason reason = 14;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      14, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BalloonGallerySettleInfo)
  return target;
}

size_t BalloonGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BalloonGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 owner_uid = 6;
  if (this->owner_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->owner_uid());
  }

  // uint32 score = 8;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 hit_count = 10;
  if (this->hit_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hit_count());
  }

  // .proto.GalleryStopReason reason = 14;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BalloonGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BalloonGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BalloonGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalloonGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BalloonGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BalloonGallerySettleInfo)
    MergeFrom(*source);
  }
}

void BalloonGallerySettleInfo::MergeFrom(const BalloonGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BalloonGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_uid() != 0) {
    set_owner_uid(from.owner_uid());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.hit_count() != 0) {
    set_hit_count(from.hit_count());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void BalloonGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BalloonGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalloonGallerySettleInfo::CopyFrom(const BalloonGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BalloonGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalloonGallerySettleInfo::IsInitialized() const {
  return true;
}

void BalloonGallerySettleInfo::Swap(BalloonGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalloonGallerySettleInfo::InternalSwap(BalloonGallerySettleInfo* other) {
  using std::swap;
  swap(owner_uid_, other->owner_uid_);
  swap(score_, other->score_);
  swap(hit_count_, other->hit_count_);
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BalloonGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalloonGallerySettleInfo

// uint32 score = 8;
void BalloonGallerySettleInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 BalloonGallerySettleInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.BalloonGallerySettleInfo.score)
  return score_;
}
void BalloonGallerySettleInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonGallerySettleInfo.score)
}

// .proto.GalleryStopReason reason = 14;
void BalloonGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::GalleryStopReason BalloonGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.BalloonGallerySettleInfo.reason)
  return static_cast< ::proto::GalleryStopReason >(reason_);
}
void BalloonGallerySettleInfo::set_reason(::proto::GalleryStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonGallerySettleInfo.reason)
}

// uint32 hit_count = 10;
void BalloonGallerySettleInfo::clear_hit_count() {
  hit_count_ = 0u;
}
::google::protobuf::uint32 BalloonGallerySettleInfo::hit_count() const {
  // @@protoc_insertion_point(field_get:proto.BalloonGallerySettleInfo.hit_count)
  return hit_count_;
}
void BalloonGallerySettleInfo::set_hit_count(::google::protobuf::uint32 value) {
  
  hit_count_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonGallerySettleInfo.hit_count)
}

// uint32 owner_uid = 6;
void BalloonGallerySettleInfo::clear_owner_uid() {
  owner_uid_ = 0u;
}
::google::protobuf::uint32 BalloonGallerySettleInfo::owner_uid() const {
  // @@protoc_insertion_point(field_get:proto.BalloonGallerySettleInfo.owner_uid)
  return owner_uid_;
}
void BalloonGallerySettleInfo::set_owner_uid(::google::protobuf::uint32 value) {
  
  owner_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BalloonGallerySettleInfo.owner_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IrodoriMasterGallerySettleInfo::kReasonFieldNumber;
const int IrodoriMasterGallerySettleInfo::kIsFinishFieldNumber;
const int IrodoriMasterGallerySettleInfo::kFinishTimeFieldNumber;
const int IrodoriMasterGallerySettleInfo::kDifficultFieldNumber;
const int IrodoriMasterGallerySettleInfo::kLevelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IrodoriMasterGallerySettleInfo::IrodoriMasterGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IrodoriMasterGallerySettleInfo)
}
IrodoriMasterGallerySettleInfo::IrodoriMasterGallerySettleInfo(const IrodoriMasterGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&level_id_, &from.level_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_time_) -
    reinterpret_cast<char*>(&level_id_)) + sizeof(finish_time_));
  // @@protoc_insertion_point(copy_constructor:proto.IrodoriMasterGallerySettleInfo)
}

void IrodoriMasterGallerySettleInfo::SharedCtor() {
  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_time_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(finish_time_));
  _cached_size_ = 0;
}

IrodoriMasterGallerySettleInfo::~IrodoriMasterGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.IrodoriMasterGallerySettleInfo)
  SharedDtor();
}

void IrodoriMasterGallerySettleInfo::SharedDtor() {
}

void IrodoriMasterGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IrodoriMasterGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IrodoriMasterGallerySettleInfo& IrodoriMasterGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

IrodoriMasterGallerySettleInfo* IrodoriMasterGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  IrodoriMasterGallerySettleInfo* n = new IrodoriMasterGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IrodoriMasterGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IrodoriMasterGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&level_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_time_) -
      reinterpret_cast<char*>(&level_id_)) + sizeof(finish_time_));
  _internal_metadata_.Clear();
}

bool IrodoriMasterGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IrodoriMasterGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 level_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficult = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficult_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_finish = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finish_time = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStopReason reason = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GalleryStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IrodoriMasterGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IrodoriMasterGallerySettleInfo)
  return false;
#undef DO_
}

void IrodoriMasterGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IrodoriMasterGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 4;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level_id(), output);
  }

  // uint32 difficult = 6;
  if (this->difficult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->difficult(), output);
  }

  // bool is_finish = 11;
  if (this->is_finish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_finish(), output);
  }

  // uint32 finish_time = 14;
  if (this->finish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->finish_time(), output);
  }

  // .proto.GalleryStopReason reason = 15;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IrodoriMasterGallerySettleInfo)
}

::google::protobuf::uint8* IrodoriMasterGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IrodoriMasterGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 level_id = 4;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level_id(), target);
  }

  // uint32 difficult = 6;
  if (this->difficult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->difficult(), target);
  }

  // bool is_finish = 11;
  if (this->is_finish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_finish(), target);
  }

  // uint32 finish_time = 14;
  if (this->finish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->finish_time(), target);
  }

  // .proto.GalleryStopReason reason = 15;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IrodoriMasterGallerySettleInfo)
  return target;
}

size_t IrodoriMasterGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IrodoriMasterGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 level_id = 4;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // uint32 difficult = 6;
  if (this->difficult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficult());
  }

  // .proto.GalleryStopReason reason = 15;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // bool is_finish = 11;
  if (this->is_finish() != 0) {
    total_size += 1 + 1;
  }

  // uint32 finish_time = 14;
  if (this->finish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finish_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IrodoriMasterGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IrodoriMasterGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IrodoriMasterGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IrodoriMasterGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IrodoriMasterGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IrodoriMasterGallerySettleInfo)
    MergeFrom(*source);
  }
}

void IrodoriMasterGallerySettleInfo::MergeFrom(const IrodoriMasterGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IrodoriMasterGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.difficult() != 0) {
    set_difficult(from.difficult());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.is_finish() != 0) {
    set_is_finish(from.is_finish());
  }
  if (from.finish_time() != 0) {
    set_finish_time(from.finish_time());
  }
}

void IrodoriMasterGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IrodoriMasterGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IrodoriMasterGallerySettleInfo::CopyFrom(const IrodoriMasterGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IrodoriMasterGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrodoriMasterGallerySettleInfo::IsInitialized() const {
  return true;
}

void IrodoriMasterGallerySettleInfo::Swap(IrodoriMasterGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IrodoriMasterGallerySettleInfo::InternalSwap(IrodoriMasterGallerySettleInfo* other) {
  using std::swap;
  swap(level_id_, other->level_id_);
  swap(difficult_, other->difficult_);
  swap(reason_, other->reason_);
  swap(is_finish_, other->is_finish_);
  swap(finish_time_, other->finish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IrodoriMasterGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IrodoriMasterGallerySettleInfo

// .proto.GalleryStopReason reason = 15;
void IrodoriMasterGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::GalleryStopReason IrodoriMasterGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriMasterGallerySettleInfo.reason)
  return static_cast< ::proto::GalleryStopReason >(reason_);
}
void IrodoriMasterGallerySettleInfo::set_reason(::proto::GalleryStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriMasterGallerySettleInfo.reason)
}

// bool is_finish = 11;
void IrodoriMasterGallerySettleInfo::clear_is_finish() {
  is_finish_ = false;
}
bool IrodoriMasterGallerySettleInfo::is_finish() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriMasterGallerySettleInfo.is_finish)
  return is_finish_;
}
void IrodoriMasterGallerySettleInfo::set_is_finish(bool value) {
  
  is_finish_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriMasterGallerySettleInfo.is_finish)
}

// uint32 finish_time = 14;
void IrodoriMasterGallerySettleInfo::clear_finish_time() {
  finish_time_ = 0u;
}
::google::protobuf::uint32 IrodoriMasterGallerySettleInfo::finish_time() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriMasterGallerySettleInfo.finish_time)
  return finish_time_;
}
void IrodoriMasterGallerySettleInfo::set_finish_time(::google::protobuf::uint32 value) {
  
  finish_time_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriMasterGallerySettleInfo.finish_time)
}

// uint32 difficult = 6;
void IrodoriMasterGallerySettleInfo::clear_difficult() {
  difficult_ = 0u;
}
::google::protobuf::uint32 IrodoriMasterGallerySettleInfo::difficult() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriMasterGallerySettleInfo.difficult)
  return difficult_;
}
void IrodoriMasterGallerySettleInfo::set_difficult(::google::protobuf::uint32 value) {
  
  difficult_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriMasterGallerySettleInfo.difficult)
}

// uint32 level_id = 4;
void IrodoriMasterGallerySettleInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 IrodoriMasterGallerySettleInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriMasterGallerySettleInfo.level_id)
  return level_id_;
}
void IrodoriMasterGallerySettleInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriMasterGallerySettleInfo.level_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhotoGallerySettleInfo::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhotoGallerySettleInfo::PhotoGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PhotoGallerySettleInfo)
}
PhotoGallerySettleInfo::PhotoGallerySettleInfo(const PhotoGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:proto.PhotoGallerySettleInfo)
}

void PhotoGallerySettleInfo::SharedCtor() {
  reason_ = 0;
  _cached_size_ = 0;
}

PhotoGallerySettleInfo::~PhotoGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.PhotoGallerySettleInfo)
  SharedDtor();
}

void PhotoGallerySettleInfo::SharedDtor() {
}

void PhotoGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PhotoGallerySettleInfo& PhotoGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

PhotoGallerySettleInfo* PhotoGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  PhotoGallerySettleInfo* n = new PhotoGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhotoGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PhotoGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear();
}

bool PhotoGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PhotoGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.GalleryStopReason reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GalleryStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PhotoGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PhotoGallerySettleInfo)
  return false;
#undef DO_
}

void PhotoGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PhotoGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GalleryStopReason reason = 7;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->reason(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PhotoGallerySettleInfo)
}

::google::protobuf::uint8* PhotoGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PhotoGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.GalleryStopReason reason = 7;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->reason(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PhotoGallerySettleInfo)
  return target;
}

size_t PhotoGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PhotoGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.GalleryStopReason reason = 7;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PhotoGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PhotoGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PhotoGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PhotoGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PhotoGallerySettleInfo)
    MergeFrom(*source);
  }
}

void PhotoGallerySettleInfo::MergeFrom(const PhotoGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PhotoGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void PhotoGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PhotoGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoGallerySettleInfo::CopyFrom(const PhotoGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PhotoGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoGallerySettleInfo::IsInitialized() const {
  return true;
}

void PhotoGallerySettleInfo::Swap(PhotoGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhotoGallerySettleInfo::InternalSwap(PhotoGallerySettleInfo* other) {
  using std::swap;
  swap(reason_, other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhotoGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhotoGallerySettleInfo

// .proto.GalleryStopReason reason = 7;
void PhotoGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::GalleryStopReason PhotoGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.PhotoGallerySettleInfo.reason)
  return static_cast< ::proto::GalleryStopReason >(reason_);
}
void PhotoGallerySettleInfo::set_reason(::proto::GalleryStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.PhotoGallerySettleInfo.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LuminanceStoneChallengeGallerySettleInfo::kKillMonsterCountFieldNumber;
const int LuminanceStoneChallengeGallerySettleInfo::kKillSpecialMonsterCountFieldNumber;
const int LuminanceStoneChallengeGallerySettleInfo::kCleanMudCountFieldNumber;
const int LuminanceStoneChallengeGallerySettleInfo::kGalleryIdFieldNumber;
const int LuminanceStoneChallengeGallerySettleInfo::kReasonFieldNumber;
const int LuminanceStoneChallengeGallerySettleInfo::kFinalScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LuminanceStoneChallengeGallerySettleInfo::LuminanceStoneChallengeGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.LuminanceStoneChallengeGallerySettleInfo)
}
LuminanceStoneChallengeGallerySettleInfo::LuminanceStoneChallengeGallerySettleInfo(const LuminanceStoneChallengeGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gallery_id_, &from.gallery_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&final_score_) -
    reinterpret_cast<char*>(&gallery_id_)) + sizeof(final_score_));
  // @@protoc_insertion_point(copy_constructor:proto.LuminanceStoneChallengeGallerySettleInfo)
}

void LuminanceStoneChallengeGallerySettleInfo::SharedCtor() {
  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_score_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(final_score_));
  _cached_size_ = 0;
}

LuminanceStoneChallengeGallerySettleInfo::~LuminanceStoneChallengeGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.LuminanceStoneChallengeGallerySettleInfo)
  SharedDtor();
}

void LuminanceStoneChallengeGallerySettleInfo::SharedDtor() {
}

void LuminanceStoneChallengeGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuminanceStoneChallengeGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LuminanceStoneChallengeGallerySettleInfo& LuminanceStoneChallengeGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

LuminanceStoneChallengeGallerySettleInfo* LuminanceStoneChallengeGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  LuminanceStoneChallengeGallerySettleInfo* n = new LuminanceStoneChallengeGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LuminanceStoneChallengeGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_score_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(final_score_));
  _internal_metadata_.Clear();
}

bool LuminanceStoneChallengeGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_special_monster_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_special_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 clean_mud_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clean_mud_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStopReason reason = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GalleryStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_monster_count = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 final_score = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.LuminanceStoneChallengeGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.LuminanceStoneChallengeGallerySettleInfo)
  return false;
#undef DO_
}

void LuminanceStoneChallengeGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gallery_id(), output);
  }

  // uint32 kill_special_monster_count = 8;
  if (this->kill_special_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->kill_special_monster_count(), output);
  }

  // uint32 clean_mud_count = 10;
  if (this->clean_mud_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->clean_mud_count(), output);
  }

  // .proto.GalleryStopReason reason = 11;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->reason(), output);
  }

  // uint32 kill_monster_count = 12;
  if (this->kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->kill_monster_count(), output);
  }

  // uint32 final_score = 13;
  if (this->final_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->final_score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.LuminanceStoneChallengeGallerySettleInfo)
}

::google::protobuf::uint8* LuminanceStoneChallengeGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gallery_id(), target);
  }

  // uint32 kill_special_monster_count = 8;
  if (this->kill_special_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->kill_special_monster_count(), target);
  }

  // uint32 clean_mud_count = 10;
  if (this->clean_mud_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->clean_mud_count(), target);
  }

  // .proto.GalleryStopReason reason = 11;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->reason(), target);
  }

  // uint32 kill_monster_count = 12;
  if (this->kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->kill_monster_count(), target);
  }

  // uint32 final_score = 13;
  if (this->final_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->final_score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.LuminanceStoneChallengeGallerySettleInfo)
  return target;
}

size_t LuminanceStoneChallengeGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 kill_special_monster_count = 8;
  if (this->kill_special_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_special_monster_count());
  }

  // uint32 clean_mud_count = 10;
  if (this->clean_mud_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->clean_mud_count());
  }

  // .proto.GalleryStopReason reason = 11;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 kill_monster_count = 12;
  if (this->kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_monster_count());
  }

  // uint32 final_score = 13;
  if (this->final_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->final_score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuminanceStoneChallengeGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LuminanceStoneChallengeGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LuminanceStoneChallengeGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.LuminanceStoneChallengeGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.LuminanceStoneChallengeGallerySettleInfo)
    MergeFrom(*source);
  }
}

void LuminanceStoneChallengeGallerySettleInfo::MergeFrom(const LuminanceStoneChallengeGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.kill_special_monster_count() != 0) {
    set_kill_special_monster_count(from.kill_special_monster_count());
  }
  if (from.clean_mud_count() != 0) {
    set_clean_mud_count(from.clean_mud_count());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.kill_monster_count() != 0) {
    set_kill_monster_count(from.kill_monster_count());
  }
  if (from.final_score() != 0) {
    set_final_score(from.final_score());
  }
}

void LuminanceStoneChallengeGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuminanceStoneChallengeGallerySettleInfo::CopyFrom(const LuminanceStoneChallengeGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.LuminanceStoneChallengeGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuminanceStoneChallengeGallerySettleInfo::IsInitialized() const {
  return true;
}

void LuminanceStoneChallengeGallerySettleInfo::Swap(LuminanceStoneChallengeGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LuminanceStoneChallengeGallerySettleInfo::InternalSwap(LuminanceStoneChallengeGallerySettleInfo* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  swap(kill_special_monster_count_, other->kill_special_monster_count_);
  swap(clean_mud_count_, other->clean_mud_count_);
  swap(reason_, other->reason_);
  swap(kill_monster_count_, other->kill_monster_count_);
  swap(final_score_, other->final_score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LuminanceStoneChallengeGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LuminanceStoneChallengeGallerySettleInfo

// uint32 kill_monster_count = 12;
void LuminanceStoneChallengeGallerySettleInfo::clear_kill_monster_count() {
  kill_monster_count_ = 0u;
}
::google::protobuf::uint32 LuminanceStoneChallengeGallerySettleInfo::kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.LuminanceStoneChallengeGallerySettleInfo.kill_monster_count)
  return kill_monster_count_;
}
void LuminanceStoneChallengeGallerySettleInfo::set_kill_monster_count(::google::protobuf::uint32 value) {
  
  kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.LuminanceStoneChallengeGallerySettleInfo.kill_monster_count)
}

// uint32 kill_special_monster_count = 8;
void LuminanceStoneChallengeGallerySettleInfo::clear_kill_special_monster_count() {
  kill_special_monster_count_ = 0u;
}
::google::protobuf::uint32 LuminanceStoneChallengeGallerySettleInfo::kill_special_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.LuminanceStoneChallengeGallerySettleInfo.kill_special_monster_count)
  return kill_special_monster_count_;
}
void LuminanceStoneChallengeGallerySettleInfo::set_kill_special_monster_count(::google::protobuf::uint32 value) {
  
  kill_special_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.LuminanceStoneChallengeGallerySettleInfo.kill_special_monster_count)
}

// uint32 clean_mud_count = 10;
void LuminanceStoneChallengeGallerySettleInfo::clear_clean_mud_count() {
  clean_mud_count_ = 0u;
}
::google::protobuf::uint32 LuminanceStoneChallengeGallerySettleInfo::clean_mud_count() const {
  // @@protoc_insertion_point(field_get:proto.LuminanceStoneChallengeGallerySettleInfo.clean_mud_count)
  return clean_mud_count_;
}
void LuminanceStoneChallengeGallerySettleInfo::set_clean_mud_count(::google::protobuf::uint32 value) {
  
  clean_mud_count_ = value;
  // @@protoc_insertion_point(field_set:proto.LuminanceStoneChallengeGallerySettleInfo.clean_mud_count)
}

// uint32 gallery_id = 2;
void LuminanceStoneChallengeGallerySettleInfo::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 LuminanceStoneChallengeGallerySettleInfo::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.LuminanceStoneChallengeGallerySettleInfo.gallery_id)
  return gallery_id_;
}
void LuminanceStoneChallengeGallerySettleInfo::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.LuminanceStoneChallengeGallerySettleInfo.gallery_id)
}

// .proto.GalleryStopReason reason = 11;
void LuminanceStoneChallengeGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::GalleryStopReason LuminanceStoneChallengeGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.LuminanceStoneChallengeGallerySettleInfo.reason)
  return static_cast< ::proto::GalleryStopReason >(reason_);
}
void LuminanceStoneChallengeGallerySettleInfo::set_reason(::proto::GalleryStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.LuminanceStoneChallengeGallerySettleInfo.reason)
}

// uint32 final_score = 13;
void LuminanceStoneChallengeGallerySettleInfo::clear_final_score() {
  final_score_ = 0u;
}
::google::protobuf::uint32 LuminanceStoneChallengeGallerySettleInfo::final_score() const {
  // @@protoc_insertion_point(field_get:proto.LuminanceStoneChallengeGallerySettleInfo.final_score)
  return final_score_;
}
void LuminanceStoneChallengeGallerySettleInfo::set_final_score(::google::protobuf::uint32 value) {
  
  final_score_ = value;
  // @@protoc_insertion_point(field_set:proto.LuminanceStoneChallengeGallerySettleInfo.final_score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HomeGalleryInPlayingNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HomeGalleryInPlayingNotify::HomeGalleryInPlayingNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HomeGalleryInPlayingNotify)
}
HomeGalleryInPlayingNotify::HomeGalleryInPlayingNotify(const HomeGalleryInPlayingNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_id_ = from.gallery_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HomeGalleryInPlayingNotify)
}

void HomeGalleryInPlayingNotify::SharedCtor() {
  gallery_id_ = 0u;
  _cached_size_ = 0;
}

HomeGalleryInPlayingNotify::~HomeGalleryInPlayingNotify() {
  // @@protoc_insertion_point(destructor:proto.HomeGalleryInPlayingNotify)
  SharedDtor();
}

void HomeGalleryInPlayingNotify::SharedDtor() {
}

void HomeGalleryInPlayingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HomeGalleryInPlayingNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HomeGalleryInPlayingNotify& HomeGalleryInPlayingNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

HomeGalleryInPlayingNotify* HomeGalleryInPlayingNotify::New(::google::protobuf::Arena* arena) const {
  HomeGalleryInPlayingNotify* n = new HomeGalleryInPlayingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HomeGalleryInPlayingNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HomeGalleryInPlayingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_id_ = 0u;
  _internal_metadata_.Clear();
}

bool HomeGalleryInPlayingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HomeGalleryInPlayingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HomeGalleryInPlayingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HomeGalleryInPlayingNotify)
  return false;
#undef DO_
}

void HomeGalleryInPlayingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HomeGalleryInPlayingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HomeGalleryInPlayingNotify)
}

::google::protobuf::uint8* HomeGalleryInPlayingNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HomeGalleryInPlayingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HomeGalleryInPlayingNotify)
  return target;
}

size_t HomeGalleryInPlayingNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HomeGalleryInPlayingNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 13;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HomeGalleryInPlayingNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HomeGalleryInPlayingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HomeGalleryInPlayingNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HomeGalleryInPlayingNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HomeGalleryInPlayingNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HomeGalleryInPlayingNotify)
    MergeFrom(*source);
  }
}

void HomeGalleryInPlayingNotify::MergeFrom(const HomeGalleryInPlayingNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HomeGalleryInPlayingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void HomeGalleryInPlayingNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HomeGalleryInPlayingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HomeGalleryInPlayingNotify::CopyFrom(const HomeGalleryInPlayingNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HomeGalleryInPlayingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HomeGalleryInPlayingNotify::IsInitialized() const {
  return true;
}

void HomeGalleryInPlayingNotify::Swap(HomeGalleryInPlayingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HomeGalleryInPlayingNotify::InternalSwap(HomeGalleryInPlayingNotify* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HomeGalleryInPlayingNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HomeGalleryInPlayingNotify

// uint32 gallery_id = 13;
void HomeGalleryInPlayingNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 HomeGalleryInPlayingNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.HomeGalleryInPlayingNotify.gallery_id)
  return gallery_id_;
}
void HomeGalleryInPlayingNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HomeGalleryInPlayingNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SummerTimeV2BoatGallerySettleInfo::kParam1FieldNumber;
const int SummerTimeV2BoatGallerySettleInfo::kParam2FieldNumber;
const int SummerTimeV2BoatGallerySettleInfo::kReasonFieldNumber;
const int SummerTimeV2BoatGallerySettleInfo::kParam3FieldNumber;
const int SummerTimeV2BoatGallerySettleInfo::kUsedTimeFieldNumber;
const int SummerTimeV2BoatGallerySettleInfo::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SummerTimeV2BoatGallerySettleInfo::SummerTimeV2BoatGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SummerTimeV2BoatGallerySettleInfo)
}
SummerTimeV2BoatGallerySettleInfo::SummerTimeV2BoatGallerySettleInfo(const SummerTimeV2BoatGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gallery_id_, &from.gallery_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_time_) -
    reinterpret_cast<char*>(&gallery_id_)) + sizeof(used_time_));
  // @@protoc_insertion_point(copy_constructor:proto.SummerTimeV2BoatGallerySettleInfo)
}

void SummerTimeV2BoatGallerySettleInfo::SharedCtor() {
  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_time_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(used_time_));
  _cached_size_ = 0;
}

SummerTimeV2BoatGallerySettleInfo::~SummerTimeV2BoatGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.SummerTimeV2BoatGallerySettleInfo)
  SharedDtor();
}

void SummerTimeV2BoatGallerySettleInfo::SharedDtor() {
}

void SummerTimeV2BoatGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummerTimeV2BoatGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SummerTimeV2BoatGallerySettleInfo& SummerTimeV2BoatGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SummerTimeV2BoatGallerySettleInfo* SummerTimeV2BoatGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  SummerTimeV2BoatGallerySettleInfo* n = new SummerTimeV2BoatGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SummerTimeV2BoatGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SummerTimeV2BoatGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&gallery_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_time_) -
      reinterpret_cast<char*>(&gallery_id_)) + sizeof(used_time_));
  _internal_metadata_.Clear();
}

bool SummerTimeV2BoatGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SummerTimeV2BoatGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStopReason reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GalleryStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 used_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SummerTimeV2BoatGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SummerTimeV2BoatGallerySettleInfo)
  return false;
#undef DO_
}

void SummerTimeV2BoatGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SummerTimeV2BoatGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 1;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gallery_id(), output);
  }

  // uint32 param2 = 2;
  if (this->param2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->param2(), output);
  }

  // .proto.GalleryStopReason reason = 3;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reason(), output);
  }

  // uint32 param3 = 6;
  if (this->param3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->param3(), output);
  }

  // uint32 param1 = 7;
  if (this->param1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->param1(), output);
  }

  // uint32 used_time = 12;
  if (this->used_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->used_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SummerTimeV2BoatGallerySettleInfo)
}

::google::protobuf::uint8* SummerTimeV2BoatGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SummerTimeV2BoatGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 1;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gallery_id(), target);
  }

  // uint32 param2 = 2;
  if (this->param2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->param2(), target);
  }

  // .proto.GalleryStopReason reason = 3;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reason(), target);
  }

  // uint32 param3 = 6;
  if (this->param3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->param3(), target);
  }

  // uint32 param1 = 7;
  if (this->param1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->param1(), target);
  }

  // uint32 used_time = 12;
  if (this->used_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->used_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SummerTimeV2BoatGallerySettleInfo)
  return target;
}

size_t SummerTimeV2BoatGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SummerTimeV2BoatGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 1;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 param2 = 2;
  if (this->param2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param2());
  }

  // .proto.GalleryStopReason reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 param3 = 6;
  if (this->param3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param3());
  }

  // uint32 param1 = 7;
  if (this->param1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param1());
  }

  // uint32 used_time = 12;
  if (this->used_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->used_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummerTimeV2BoatGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SummerTimeV2BoatGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SummerTimeV2BoatGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SummerTimeV2BoatGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SummerTimeV2BoatGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SummerTimeV2BoatGallerySettleInfo)
    MergeFrom(*source);
  }
}

void SummerTimeV2BoatGallerySettleInfo::MergeFrom(const SummerTimeV2BoatGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SummerTimeV2BoatGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.param2() != 0) {
    set_param2(from.param2());
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.param3() != 0) {
    set_param3(from.param3());
  }
  if (from.param1() != 0) {
    set_param1(from.param1());
  }
  if (from.used_time() != 0) {
    set_used_time(from.used_time());
  }
}

void SummerTimeV2BoatGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SummerTimeV2BoatGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummerTimeV2BoatGallerySettleInfo::CopyFrom(const SummerTimeV2BoatGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SummerTimeV2BoatGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummerTimeV2BoatGallerySettleInfo::IsInitialized() const {
  return true;
}

void SummerTimeV2BoatGallerySettleInfo::Swap(SummerTimeV2BoatGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SummerTimeV2BoatGallerySettleInfo::InternalSwap(SummerTimeV2BoatGallerySettleInfo* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  swap(param2_, other->param2_);
  swap(reason_, other->reason_);
  swap(param3_, other->param3_);
  swap(param1_, other->param1_);
  swap(used_time_, other->used_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SummerTimeV2BoatGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SummerTimeV2BoatGallerySettleInfo

// uint32 param1 = 7;
void SummerTimeV2BoatGallerySettleInfo::clear_param1() {
  param1_ = 0u;
}
::google::protobuf::uint32 SummerTimeV2BoatGallerySettleInfo::param1() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2BoatGallerySettleInfo.param1)
  return param1_;
}
void SummerTimeV2BoatGallerySettleInfo::set_param1(::google::protobuf::uint32 value) {
  
  param1_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2BoatGallerySettleInfo.param1)
}

// uint32 param2 = 2;
void SummerTimeV2BoatGallerySettleInfo::clear_param2() {
  param2_ = 0u;
}
::google::protobuf::uint32 SummerTimeV2BoatGallerySettleInfo::param2() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2BoatGallerySettleInfo.param2)
  return param2_;
}
void SummerTimeV2BoatGallerySettleInfo::set_param2(::google::protobuf::uint32 value) {
  
  param2_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2BoatGallerySettleInfo.param2)
}

// .proto.GalleryStopReason reason = 3;
void SummerTimeV2BoatGallerySettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::GalleryStopReason SummerTimeV2BoatGallerySettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2BoatGallerySettleInfo.reason)
  return static_cast< ::proto::GalleryStopReason >(reason_);
}
void SummerTimeV2BoatGallerySettleInfo::set_reason(::proto::GalleryStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2BoatGallerySettleInfo.reason)
}

// uint32 param3 = 6;
void SummerTimeV2BoatGallerySettleInfo::clear_param3() {
  param3_ = 0u;
}
::google::protobuf::uint32 SummerTimeV2BoatGallerySettleInfo::param3() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2BoatGallerySettleInfo.param3)
  return param3_;
}
void SummerTimeV2BoatGallerySettleInfo::set_param3(::google::protobuf::uint32 value) {
  
  param3_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2BoatGallerySettleInfo.param3)
}

// uint32 used_time = 12;
void SummerTimeV2BoatGallerySettleInfo::clear_used_time() {
  used_time_ = 0u;
}
::google::protobuf::uint32 SummerTimeV2BoatGallerySettleInfo::used_time() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2BoatGallerySettleInfo.used_time)
  return used_time_;
}
void SummerTimeV2BoatGallerySettleInfo::set_used_time(::google::protobuf::uint32 value) {
  
  used_time_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2BoatGallerySettleInfo.used_time)
}

// uint32 gallery_id = 1;
void SummerTimeV2BoatGallerySettleInfo::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 SummerTimeV2BoatGallerySettleInfo::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2BoatGallerySettleInfo.gallery_id)
  return gallery_id_;
}
void SummerTimeV2BoatGallerySettleInfo::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2BoatGallerySettleInfo.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryIslandPartyDownHillInfoNotify::kGalleryIdFieldNumber;
const int GalleryIslandPartyDownHillInfoNotify::kCoinFieldNumber;
const int GalleryIslandPartyDownHillInfoNotify::kTotalKillMonsterCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryIslandPartyDownHillInfoNotify::GalleryIslandPartyDownHillInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryIslandPartyDownHillInfoNotify)
}
GalleryIslandPartyDownHillInfoNotify::GalleryIslandPartyDownHillInfoNotify(const GalleryIslandPartyDownHillInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_kill_monster_count_, &from.total_kill_monster_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&total_kill_monster_count_)) + sizeof(coin_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryIslandPartyDownHillInfoNotify)
}

void GalleryIslandPartyDownHillInfoNotify::SharedCtor() {
  ::memset(&total_kill_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&total_kill_monster_count_)) + sizeof(coin_));
  _cached_size_ = 0;
}

GalleryIslandPartyDownHillInfoNotify::~GalleryIslandPartyDownHillInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryIslandPartyDownHillInfoNotify)
  SharedDtor();
}

void GalleryIslandPartyDownHillInfoNotify::SharedDtor() {
}

void GalleryIslandPartyDownHillInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryIslandPartyDownHillInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryIslandPartyDownHillInfoNotify& GalleryIslandPartyDownHillInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryIslandPartyDownHillInfoNotify* GalleryIslandPartyDownHillInfoNotify::New(::google::protobuf::Arena* arena) const {
  GalleryIslandPartyDownHillInfoNotify* n = new GalleryIslandPartyDownHillInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryIslandPartyDownHillInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryIslandPartyDownHillInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_kill_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&total_kill_monster_count_)) + sizeof(coin_));
  _internal_metadata_.Clear();
}

bool GalleryIslandPartyDownHillInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryIslandPartyDownHillInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_kill_monster_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryIslandPartyDownHillInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryIslandPartyDownHillInfoNotify)
  return false;
#undef DO_
}

void GalleryIslandPartyDownHillInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryIslandPartyDownHillInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gallery_id(), output);
  }

  // uint32 coin = 9;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->coin(), output);
  }

  // uint32 total_kill_monster_count = 11;
  if (this->total_kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_kill_monster_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryIslandPartyDownHillInfoNotify)
}

::google::protobuf::uint8* GalleryIslandPartyDownHillInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryIslandPartyDownHillInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gallery_id(), target);
  }

  // uint32 coin = 9;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->coin(), target);
  }

  // uint32 total_kill_monster_count = 11;
  if (this->total_kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_kill_monster_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryIslandPartyDownHillInfoNotify)
  return target;
}

size_t GalleryIslandPartyDownHillInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryIslandPartyDownHillInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 total_kill_monster_count = 11;
  if (this->total_kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_kill_monster_count());
  }

  // uint32 gallery_id = 2;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  // uint32 coin = 9;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryIslandPartyDownHillInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryIslandPartyDownHillInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryIslandPartyDownHillInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryIslandPartyDownHillInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryIslandPartyDownHillInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryIslandPartyDownHillInfoNotify)
    MergeFrom(*source);
  }
}

void GalleryIslandPartyDownHillInfoNotify::MergeFrom(const GalleryIslandPartyDownHillInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryIslandPartyDownHillInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total_kill_monster_count() != 0) {
    set_total_kill_monster_count(from.total_kill_monster_count());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
}

void GalleryIslandPartyDownHillInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryIslandPartyDownHillInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryIslandPartyDownHillInfoNotify::CopyFrom(const GalleryIslandPartyDownHillInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryIslandPartyDownHillInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryIslandPartyDownHillInfoNotify::IsInitialized() const {
  return true;
}

void GalleryIslandPartyDownHillInfoNotify::Swap(GalleryIslandPartyDownHillInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryIslandPartyDownHillInfoNotify::InternalSwap(GalleryIslandPartyDownHillInfoNotify* other) {
  using std::swap;
  swap(total_kill_monster_count_, other->total_kill_monster_count_);
  swap(gallery_id_, other->gallery_id_);
  swap(coin_, other->coin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryIslandPartyDownHillInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryIslandPartyDownHillInfoNotify

// uint32 gallery_id = 2;
void GalleryIslandPartyDownHillInfoNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryIslandPartyDownHillInfoNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryIslandPartyDownHillInfoNotify.gallery_id)
  return gallery_id_;
}
void GalleryIslandPartyDownHillInfoNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryIslandPartyDownHillInfoNotify.gallery_id)
}

// uint32 coin = 9;
void GalleryIslandPartyDownHillInfoNotify::clear_coin() {
  coin_ = 0u;
}
::google::protobuf::uint32 GalleryIslandPartyDownHillInfoNotify::coin() const {
  // @@protoc_insertion_point(field_get:proto.GalleryIslandPartyDownHillInfoNotify.coin)
  return coin_;
}
void GalleryIslandPartyDownHillInfoNotify::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryIslandPartyDownHillInfoNotify.coin)
}

// uint32 total_kill_monster_count = 11;
void GalleryIslandPartyDownHillInfoNotify::clear_total_kill_monster_count() {
  total_kill_monster_count_ = 0u;
}
::google::protobuf::uint32 GalleryIslandPartyDownHillInfoNotify::total_kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.GalleryIslandPartyDownHillInfoNotify.total_kill_monster_count)
  return total_kill_monster_count_;
}
void GalleryIslandPartyDownHillInfoNotify::set_total_kill_monster_count(::google::protobuf::uint32 value) {
  
  total_kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryIslandPartyDownHillInfoNotify.total_kill_monster_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IslandPartyRaftInfoNotify::kPointIdFieldNumber;
const int IslandPartyRaftInfoNotify::kCoinFieldNumber;
const int IslandPartyRaftInfoNotify::kFuelFieldNumber;
const int IslandPartyRaftInfoNotify::kComponentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IslandPartyRaftInfoNotify::IslandPartyRaftInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IslandPartyRaftInfoNotify)
}
IslandPartyRaftInfoNotify::IslandPartyRaftInfoNotify(const IslandPartyRaftInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fuel_, &from.fuel_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_) -
    reinterpret_cast<char*>(&fuel_)) + sizeof(coin_));
  // @@protoc_insertion_point(copy_constructor:proto.IslandPartyRaftInfoNotify)
}

void IslandPartyRaftInfoNotify::SharedCtor() {
  ::memset(&fuel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&fuel_)) + sizeof(coin_));
  _cached_size_ = 0;
}

IslandPartyRaftInfoNotify::~IslandPartyRaftInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.IslandPartyRaftInfoNotify)
  SharedDtor();
}

void IslandPartyRaftInfoNotify::SharedDtor() {
}

void IslandPartyRaftInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IslandPartyRaftInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IslandPartyRaftInfoNotify& IslandPartyRaftInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

IslandPartyRaftInfoNotify* IslandPartyRaftInfoNotify::New(::google::protobuf::Arena* arena) const {
  IslandPartyRaftInfoNotify* n = new IslandPartyRaftInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IslandPartyRaftInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IslandPartyRaftInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fuel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_) -
      reinterpret_cast<char*>(&fuel_)) + sizeof(coin_));
  _internal_metadata_.Clear();
}

bool IslandPartyRaftInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IslandPartyRaftInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 fuel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fuel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 component = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IslandPartyRaftInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IslandPartyRaftInfoNotify)
  return false;
#undef DO_
}

void IslandPartyRaftInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IslandPartyRaftInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fuel = 3;
  if (this->fuel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fuel(), output);
  }

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->point_id(), output);
  }

  // uint32 component = 13;
  if (this->component() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->component(), output);
  }

  // uint32 coin = 15;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->coin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IslandPartyRaftInfoNotify)
}

::google::protobuf::uint8* IslandPartyRaftInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IslandPartyRaftInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 fuel = 3;
  if (this->fuel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fuel(), target);
  }

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->point_id(), target);
  }

  // uint32 component = 13;
  if (this->component() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->component(), target);
  }

  // uint32 coin = 15;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->coin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IslandPartyRaftInfoNotify)
  return target;
}

size_t IslandPartyRaftInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IslandPartyRaftInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 fuel = 3;
  if (this->fuel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fuel());
  }

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 component = 13;
  if (this->component() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->component());
  }

  // uint32 coin = 15;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IslandPartyRaftInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IslandPartyRaftInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const IslandPartyRaftInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IslandPartyRaftInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IslandPartyRaftInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IslandPartyRaftInfoNotify)
    MergeFrom(*source);
  }
}

void IslandPartyRaftInfoNotify::MergeFrom(const IslandPartyRaftInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IslandPartyRaftInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fuel() != 0) {
    set_fuel(from.fuel());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.component() != 0) {
    set_component(from.component());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
}

void IslandPartyRaftInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IslandPartyRaftInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IslandPartyRaftInfoNotify::CopyFrom(const IslandPartyRaftInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IslandPartyRaftInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IslandPartyRaftInfoNotify::IsInitialized() const {
  return true;
}

void IslandPartyRaftInfoNotify::Swap(IslandPartyRaftInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IslandPartyRaftInfoNotify::InternalSwap(IslandPartyRaftInfoNotify* other) {
  using std::swap;
  swap(fuel_, other->fuel_);
  swap(point_id_, other->point_id_);
  swap(component_, other->component_);
  swap(coin_, other->coin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IslandPartyRaftInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IslandPartyRaftInfoNotify

// uint32 point_id = 7;
void IslandPartyRaftInfoNotify::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 IslandPartyRaftInfoNotify::point_id() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartyRaftInfoNotify.point_id)
  return point_id_;
}
void IslandPartyRaftInfoNotify::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartyRaftInfoNotify.point_id)
}

// uint32 coin = 15;
void IslandPartyRaftInfoNotify::clear_coin() {
  coin_ = 0u;
}
::google::protobuf::uint32 IslandPartyRaftInfoNotify::coin() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartyRaftInfoNotify.coin)
  return coin_;
}
void IslandPartyRaftInfoNotify::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartyRaftInfoNotify.coin)
}

// uint32 fuel = 3;
void IslandPartyRaftInfoNotify::clear_fuel() {
  fuel_ = 0u;
}
::google::protobuf::uint32 IslandPartyRaftInfoNotify::fuel() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartyRaftInfoNotify.fuel)
  return fuel_;
}
void IslandPartyRaftInfoNotify::set_fuel(::google::protobuf::uint32 value) {
  
  fuel_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartyRaftInfoNotify.fuel)
}

// uint32 component = 13;
void IslandPartyRaftInfoNotify::clear_component() {
  component_ = 0u;
}
::google::protobuf::uint32 IslandPartyRaftInfoNotify::component() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartyRaftInfoNotify.component)
  return component_;
}
void IslandPartyRaftInfoNotify::set_component(::google::protobuf::uint32 value) {
  
  component_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartyRaftInfoNotify.component)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IslandPartySailInfoNotify::kCoinFieldNumber;
const int IslandPartySailInfoNotify::kStageFieldNumber;
const int IslandPartySailInfoNotify::kKillMonsterCountFieldNumber;
const int IslandPartySailInfoNotify::kProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IslandPartySailInfoNotify::IslandPartySailInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IslandPartySailInfoNotify)
}
IslandPartySailInfoNotify::IslandPartySailInfoNotify(const IslandPartySailInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kill_monster_count_, &from.kill_monster_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&progress_) -
    reinterpret_cast<char*>(&kill_monster_count_)) + sizeof(progress_));
  // @@protoc_insertion_point(copy_constructor:proto.IslandPartySailInfoNotify)
}

void IslandPartySailInfoNotify::SharedCtor() {
  ::memset(&kill_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&kill_monster_count_)) + sizeof(progress_));
  _cached_size_ = 0;
}

IslandPartySailInfoNotify::~IslandPartySailInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.IslandPartySailInfoNotify)
  SharedDtor();
}

void IslandPartySailInfoNotify::SharedDtor() {
}

void IslandPartySailInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IslandPartySailInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IslandPartySailInfoNotify& IslandPartySailInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

IslandPartySailInfoNotify* IslandPartySailInfoNotify::New(::google::protobuf::Arena* arena) const {
  IslandPartySailInfoNotify* n = new IslandPartySailInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IslandPartySailInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IslandPartySailInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kill_monster_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&progress_) -
      reinterpret_cast<char*>(&kill_monster_count_)) + sizeof(progress_));
  _internal_metadata_.Clear();
}

bool IslandPartySailInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IslandPartySailInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 kill_monster_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.IslandPartySailStage stage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage(static_cast< ::proto::IslandPartySailStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IslandPartySailInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IslandPartySailInfoNotify)
  return false;
#undef DO_
}

void IslandPartySailInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IslandPartySailInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_monster_count = 4;
  if (this->kill_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->kill_monster_count(), output);
  }

  // .proto.IslandPartySailStage stage = 8;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->stage(), output);
  }

  // uint32 coin = 10;
  if (this->coin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->coin(), output);
  }

  // uint32 progress = 15;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->progress(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IslandPartySailInfoNotify)
}

::google::protobuf::uint8* IslandPartySailInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IslandPartySailInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_monster_count = 4;
  if (this->kill_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->kill_monster_count(), target);
  }

  // .proto.IslandPartySailStage stage = 8;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->stage(), target);
  }

  // uint32 coin = 10;
  if (this->coin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->coin(), target);
  }

  // uint32 progress = 15;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->progress(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IslandPartySailInfoNotify)
  return target;
}

size_t IslandPartySailInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IslandPartySailInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 kill_monster_count = 4;
  if (this->kill_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_monster_count());
  }

  // .proto.IslandPartySailStage stage = 8;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  // uint32 coin = 10;
  if (this->coin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin());
  }

  // uint32 progress = 15;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IslandPartySailInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IslandPartySailInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const IslandPartySailInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IslandPartySailInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IslandPartySailInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IslandPartySailInfoNotify)
    MergeFrom(*source);
  }
}

void IslandPartySailInfoNotify::MergeFrom(const IslandPartySailInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IslandPartySailInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kill_monster_count() != 0) {
    set_kill_monster_count(from.kill_monster_count());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.coin() != 0) {
    set_coin(from.coin());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
}

void IslandPartySailInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IslandPartySailInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IslandPartySailInfoNotify::CopyFrom(const IslandPartySailInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IslandPartySailInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IslandPartySailInfoNotify::IsInitialized() const {
  return true;
}

void IslandPartySailInfoNotify::Swap(IslandPartySailInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IslandPartySailInfoNotify::InternalSwap(IslandPartySailInfoNotify* other) {
  using std::swap;
  swap(kill_monster_count_, other->kill_monster_count_);
  swap(stage_, other->stage_);
  swap(coin_, other->coin_);
  swap(progress_, other->progress_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IslandPartySailInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IslandPartySailInfoNotify

// uint32 coin = 10;
void IslandPartySailInfoNotify::clear_coin() {
  coin_ = 0u;
}
::google::protobuf::uint32 IslandPartySailInfoNotify::coin() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartySailInfoNotify.coin)
  return coin_;
}
void IslandPartySailInfoNotify::set_coin(::google::protobuf::uint32 value) {
  
  coin_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartySailInfoNotify.coin)
}

// .proto.IslandPartySailStage stage = 8;
void IslandPartySailInfoNotify::clear_stage() {
  stage_ = 0;
}
::proto::IslandPartySailStage IslandPartySailInfoNotify::stage() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartySailInfoNotify.stage)
  return static_cast< ::proto::IslandPartySailStage >(stage_);
}
void IslandPartySailInfoNotify::set_stage(::proto::IslandPartySailStage value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartySailInfoNotify.stage)
}

// uint32 kill_monster_count = 4;
void IslandPartySailInfoNotify::clear_kill_monster_count() {
  kill_monster_count_ = 0u;
}
::google::protobuf::uint32 IslandPartySailInfoNotify::kill_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartySailInfoNotify.kill_monster_count)
  return kill_monster_count_;
}
void IslandPartySailInfoNotify::set_kill_monster_count(::google::protobuf::uint32 value) {
  
  kill_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartySailInfoNotify.kill_monster_count)
}

// uint32 progress = 15;
void IslandPartySailInfoNotify::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 IslandPartySailInfoNotify::progress() const {
  // @@protoc_insertion_point(field_get:proto.IslandPartySailInfoNotify.progress)
  return progress_;
}
void IslandPartySailInfoNotify::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.IslandPartySailInfoNotify.progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IslandPartyGallerySettleInfo::kPlayerInfoFieldNumber;
const int IslandPartyGallerySettleInfo::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IslandPartyGallerySettleInfo::IslandPartyGallerySettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.IslandPartyGallerySettleInfo)
}
IslandPartyGallerySettleInfo::IslandPartyGallerySettleInfo(const IslandPartyGallerySettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::OnlinePlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.IslandPartyGallerySettleInfo)
}

void IslandPartyGallerySettleInfo::SharedCtor() {
  player_info_ = NULL;
  _cached_size_ = 0;
}

IslandPartyGallerySettleInfo::~IslandPartyGallerySettleInfo() {
  // @@protoc_insertion_point(destructor:proto.IslandPartyGallerySettleInfo)
  SharedDtor();
}

void IslandPartyGallerySettleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void IslandPartyGallerySettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IslandPartyGallerySettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IslandPartyGallerySettleInfo& IslandPartyGallerySettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

IslandPartyGallerySettleInfo* IslandPartyGallerySettleInfo::New(::google::protobuf::Arena* arena) const {
  IslandPartyGallerySettleInfo* n = new IslandPartyGallerySettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IslandPartyGallerySettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.IslandPartyGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  _internal_metadata_.Clear();
}

bool IslandPartyGallerySettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.IslandPartyGallerySettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ExhibitionDisplayInfo card_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.OnlinePlayerInfo player_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.IslandPartyGallerySettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.IslandPartyGallerySettleInfo)
  return false;
#undef DO_
}

void IslandPartyGallerySettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.IslandPartyGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->card_list(static_cast<int>(i)), output);
  }

  // .proto.OnlinePlayerInfo player_info = 13;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->player_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.IslandPartyGallerySettleInfo)
}

::google::protobuf::uint8* IslandPartyGallerySettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.IslandPartyGallerySettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ExhibitionDisplayInfo card_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.OnlinePlayerInfo player_info = 13;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->player_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.IslandPartyGallerySettleInfo)
  return target;
}

size_t IslandPartyGallerySettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.IslandPartyGallerySettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo card_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // .proto.OnlinePlayerInfo player_info = 13;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IslandPartyGallerySettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.IslandPartyGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IslandPartyGallerySettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IslandPartyGallerySettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.IslandPartyGallerySettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.IslandPartyGallerySettleInfo)
    MergeFrom(*source);
  }
}

void IslandPartyGallerySettleInfo::MergeFrom(const IslandPartyGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.IslandPartyGallerySettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  if (from.has_player_info()) {
    mutable_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.player_info());
  }
}

void IslandPartyGallerySettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.IslandPartyGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IslandPartyGallerySettleInfo::CopyFrom(const IslandPartyGallerySettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.IslandPartyGallerySettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IslandPartyGallerySettleInfo::IsInitialized() const {
  return true;
}

void IslandPartyGallerySettleInfo::Swap(IslandPartyGallerySettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IslandPartyGallerySettleInfo::InternalSwap(IslandPartyGallerySettleInfo* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  swap(player_info_, other->player_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IslandPartyGallerySettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IslandPartyGallerySettleInfo

// .proto.OnlinePlayerInfo player_info = 13;
bool IslandPartyGallerySettleInfo::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void IslandPartyGallerySettleInfo::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& IslandPartyGallerySettleInfo::player_info() const {
  const ::proto::OnlinePlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.IslandPartyGallerySettleInfo.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* IslandPartyGallerySettleInfo::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.IslandPartyGallerySettleInfo.player_info)
  return player_info_;
}
::proto::OnlinePlayerInfo* IslandPartyGallerySettleInfo::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.IslandPartyGallerySettleInfo.player_info)
  
  ::proto::OnlinePlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void IslandPartyGallerySettleInfo::set_allocated_player_info(::proto::OnlinePlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.IslandPartyGallerySettleInfo.player_info)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 11;
int IslandPartyGallerySettleInfo::card_list_size() const {
  return card_list_.size();
}
void IslandPartyGallerySettleInfo::clear_card_list() {
  card_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& IslandPartyGallerySettleInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IslandPartyGallerySettleInfo.card_list)
  return card_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* IslandPartyGallerySettleInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.IslandPartyGallerySettleInfo.card_list)
  return card_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* IslandPartyGallerySettleInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.IslandPartyGallerySettleInfo.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
IslandPartyGallerySettleInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IslandPartyGallerySettleInfo.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
IslandPartyGallerySettleInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.IslandPartyGallerySettleInfo.card_list)
  return card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackRebornGalleryReq::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackRebornGalleryReq::BackRebornGalleryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BackRebornGalleryReq)
}
BackRebornGalleryReq::BackRebornGalleryReq(const BackRebornGalleryReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gallery_id_ = from.gallery_id_;
  // @@protoc_insertion_point(copy_constructor:proto.BackRebornGalleryReq)
}

void BackRebornGalleryReq::SharedCtor() {
  gallery_id_ = 0u;
  _cached_size_ = 0;
}

BackRebornGalleryReq::~BackRebornGalleryReq() {
  // @@protoc_insertion_point(destructor:proto.BackRebornGalleryReq)
  SharedDtor();
}

void BackRebornGalleryReq::SharedDtor() {
}

void BackRebornGalleryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackRebornGalleryReq::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackRebornGalleryReq& BackRebornGalleryReq::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackRebornGalleryReq* BackRebornGalleryReq::New(::google::protobuf::Arena* arena) const {
  BackRebornGalleryReq* n = new BackRebornGalleryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackRebornGalleryReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BackRebornGalleryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gallery_id_ = 0u;
  _internal_metadata_.Clear();
}

bool BackRebornGalleryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BackRebornGalleryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 gallery_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BackRebornGalleryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BackRebornGalleryReq)
  return false;
#undef DO_
}

void BackRebornGalleryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BackRebornGalleryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 15;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BackRebornGalleryReq)
}

::google::protobuf::uint8* BackRebornGalleryReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BackRebornGalleryReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gallery_id = 15;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BackRebornGalleryReq)
  return target;
}

size_t BackRebornGalleryReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BackRebornGalleryReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 gallery_id = 15;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackRebornGalleryReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BackRebornGalleryReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BackRebornGalleryReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackRebornGalleryReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BackRebornGalleryReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BackRebornGalleryReq)
    MergeFrom(*source);
  }
}

void BackRebornGalleryReq::MergeFrom(const BackRebornGalleryReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BackRebornGalleryReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void BackRebornGalleryReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BackRebornGalleryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackRebornGalleryReq::CopyFrom(const BackRebornGalleryReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BackRebornGalleryReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackRebornGalleryReq::IsInitialized() const {
  return true;
}

void BackRebornGalleryReq::Swap(BackRebornGalleryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackRebornGalleryReq::InternalSwap(BackRebornGalleryReq* other) {
  using std::swap;
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackRebornGalleryReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackRebornGalleryReq

// uint32 gallery_id = 15;
void BackRebornGalleryReq::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 BackRebornGalleryReq::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.BackRebornGalleryReq.gallery_id)
  return gallery_id_;
}
void BackRebornGalleryReq::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BackRebornGalleryReq.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BackRebornGalleryRsp::kGalleryIdFieldNumber;
const int BackRebornGalleryRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BackRebornGalleryRsp::BackRebornGalleryRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BackRebornGalleryRsp)
}
BackRebornGalleryRsp::BackRebornGalleryRsp(const BackRebornGalleryRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(gallery_id_));
  // @@protoc_insertion_point(copy_constructor:proto.BackRebornGalleryRsp)
}

void BackRebornGalleryRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gallery_id_));
  _cached_size_ = 0;
}

BackRebornGalleryRsp::~BackRebornGalleryRsp() {
  // @@protoc_insertion_point(destructor:proto.BackRebornGalleryRsp)
  SharedDtor();
}

void BackRebornGalleryRsp::SharedDtor() {
}

void BackRebornGalleryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BackRebornGalleryRsp::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BackRebornGalleryRsp& BackRebornGalleryRsp::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

BackRebornGalleryRsp* BackRebornGalleryRsp::New(::google::protobuf::Arena* arena) const {
  BackRebornGalleryRsp* n = new BackRebornGalleryRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BackRebornGalleryRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BackRebornGalleryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(gallery_id_));
  _internal_metadata_.Clear();
}

bool BackRebornGalleryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BackRebornGalleryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BackRebornGalleryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BackRebornGalleryRsp)
  return false;
#undef DO_
}

void BackRebornGalleryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BackRebornGalleryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BackRebornGalleryRsp)
}

::google::protobuf::uint8* BackRebornGalleryRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BackRebornGalleryRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BackRebornGalleryRsp)
  return target;
}

size_t BackRebornGalleryRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BackRebornGalleryRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 gallery_id = 9;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BackRebornGalleryRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BackRebornGalleryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BackRebornGalleryRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BackRebornGalleryRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BackRebornGalleryRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BackRebornGalleryRsp)
    MergeFrom(*source);
  }
}

void BackRebornGalleryRsp::MergeFrom(const BackRebornGalleryRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BackRebornGalleryRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void BackRebornGalleryRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BackRebornGalleryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BackRebornGalleryRsp::CopyFrom(const BackRebornGalleryRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BackRebornGalleryRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackRebornGalleryRsp::IsInitialized() const {
  return true;
}

void BackRebornGalleryRsp::Swap(BackRebornGalleryRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BackRebornGalleryRsp::InternalSwap(BackRebornGalleryRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BackRebornGalleryRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BackRebornGalleryRsp

// uint32 gallery_id = 9;
void BackRebornGalleryRsp::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 BackRebornGalleryRsp::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.BackRebornGalleryRsp.gallery_id)
  return gallery_id_;
}
void BackRebornGalleryRsp::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BackRebornGalleryRsp.gallery_id)
}

// int32 retcode = 5;
void BackRebornGalleryRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 BackRebornGalleryRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BackRebornGalleryRsp.retcode)
  return retcode_;
}
void BackRebornGalleryRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BackRebornGalleryRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GalleryWillStartCountdownNotify::kStartSourceFieldNumber;
const int GalleryWillStartCountdownNotify::kEndTimeFieldNumber;
const int GalleryWillStartCountdownNotify::kIsEndFieldNumber;
const int GalleryWillStartCountdownNotify::kGalleryIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GalleryWillStartCountdownNotify::GalleryWillStartCountdownNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GalleryWillStartCountdownNotify)
}
GalleryWillStartCountdownNotify::GalleryWillStartCountdownNotify(const GalleryWillStartCountdownNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_end_, &from.is_end_,
    static_cast<size_t>(reinterpret_cast<char*>(&gallery_id_) -
    reinterpret_cast<char*>(&is_end_)) + sizeof(gallery_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GalleryWillStartCountdownNotify)
}

void GalleryWillStartCountdownNotify::SharedCtor() {
  ::memset(&is_end_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&is_end_)) + sizeof(gallery_id_));
  _cached_size_ = 0;
}

GalleryWillStartCountdownNotify::~GalleryWillStartCountdownNotify() {
  // @@protoc_insertion_point(destructor:proto.GalleryWillStartCountdownNotify)
  SharedDtor();
}

void GalleryWillStartCountdownNotify::SharedDtor() {
}

void GalleryWillStartCountdownNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GalleryWillStartCountdownNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GalleryWillStartCountdownNotify& GalleryWillStartCountdownNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

GalleryWillStartCountdownNotify* GalleryWillStartCountdownNotify::New(::google::protobuf::Arena* arena) const {
  GalleryWillStartCountdownNotify* n = new GalleryWillStartCountdownNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GalleryWillStartCountdownNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GalleryWillStartCountdownNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_end_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gallery_id_) -
      reinterpret_cast<char*>(&is_end_)) + sizeof(gallery_id_));
  _internal_metadata_.Clear();
}

bool GalleryWillStartCountdownNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GalleryWillStartCountdownNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_end = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStartSource start_source = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_start_source(static_cast< ::proto::GalleryStartSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gallery_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gallery_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GalleryWillStartCountdownNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GalleryWillStartCountdownNotify)
  return false;
#undef DO_
}

void GalleryWillStartCountdownNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GalleryWillStartCountdownNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_end = 7;
  if (this->is_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_end(), output);
  }

  // .proto.GalleryStartSource start_source = 11;
  if (this->start_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->start_source(), output);
  }

  // uint32 end_time = 12;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->end_time(), output);
  }

  // uint32 gallery_id = 14;
  if (this->gallery_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->gallery_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GalleryWillStartCountdownNotify)
}

::google::protobuf::uint8* GalleryWillStartCountdownNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GalleryWillStartCountdownNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_end = 7;
  if (this->is_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_end(), target);
  }

  // .proto.GalleryStartSource start_source = 11;
  if (this->start_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->start_source(), target);
  }

  // uint32 end_time = 12;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->end_time(), target);
  }

  // uint32 gallery_id = 14;
  if (this->gallery_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->gallery_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GalleryWillStartCountdownNotify)
  return target;
}

size_t GalleryWillStartCountdownNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GalleryWillStartCountdownNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_end = 7;
  if (this->is_end() != 0) {
    total_size += 1 + 1;
  }

  // .proto.GalleryStartSource start_source = 11;
  if (this->start_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->start_source());
  }

  // uint32 end_time = 12;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 gallery_id = 14;
  if (this->gallery_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gallery_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GalleryWillStartCountdownNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GalleryWillStartCountdownNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const GalleryWillStartCountdownNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GalleryWillStartCountdownNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GalleryWillStartCountdownNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GalleryWillStartCountdownNotify)
    MergeFrom(*source);
  }
}

void GalleryWillStartCountdownNotify::MergeFrom(const GalleryWillStartCountdownNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GalleryWillStartCountdownNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_end() != 0) {
    set_is_end(from.is_end());
  }
  if (from.start_source() != 0) {
    set_start_source(from.start_source());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.gallery_id() != 0) {
    set_gallery_id(from.gallery_id());
  }
}

void GalleryWillStartCountdownNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GalleryWillStartCountdownNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GalleryWillStartCountdownNotify::CopyFrom(const GalleryWillStartCountdownNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GalleryWillStartCountdownNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GalleryWillStartCountdownNotify::IsInitialized() const {
  return true;
}

void GalleryWillStartCountdownNotify::Swap(GalleryWillStartCountdownNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GalleryWillStartCountdownNotify::InternalSwap(GalleryWillStartCountdownNotify* other) {
  using std::swap;
  swap(is_end_, other->is_end_);
  swap(start_source_, other->start_source_);
  swap(end_time_, other->end_time_);
  swap(gallery_id_, other->gallery_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GalleryWillStartCountdownNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GalleryWillStartCountdownNotify

// .proto.GalleryStartSource start_source = 11;
void GalleryWillStartCountdownNotify::clear_start_source() {
  start_source_ = 0;
}
::proto::GalleryStartSource GalleryWillStartCountdownNotify::start_source() const {
  // @@protoc_insertion_point(field_get:proto.GalleryWillStartCountdownNotify.start_source)
  return static_cast< ::proto::GalleryStartSource >(start_source_);
}
void GalleryWillStartCountdownNotify::set_start_source(::proto::GalleryStartSource value) {
  
  start_source_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryWillStartCountdownNotify.start_source)
}

// uint32 end_time = 12;
void GalleryWillStartCountdownNotify::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 GalleryWillStartCountdownNotify::end_time() const {
  // @@protoc_insertion_point(field_get:proto.GalleryWillStartCountdownNotify.end_time)
  return end_time_;
}
void GalleryWillStartCountdownNotify::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryWillStartCountdownNotify.end_time)
}

// bool is_end = 7;
void GalleryWillStartCountdownNotify::clear_is_end() {
  is_end_ = false;
}
bool GalleryWillStartCountdownNotify::is_end() const {
  // @@protoc_insertion_point(field_get:proto.GalleryWillStartCountdownNotify.is_end)
  return is_end_;
}
void GalleryWillStartCountdownNotify::set_is_end(bool value) {
  
  is_end_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryWillStartCountdownNotify.is_end)
}

// uint32 gallery_id = 14;
void GalleryWillStartCountdownNotify::clear_gallery_id() {
  gallery_id_ = 0u;
}
::google::protobuf::uint32 GalleryWillStartCountdownNotify::gallery_id() const {
  // @@protoc_insertion_point(field_get:proto.GalleryWillStartCountdownNotify.gallery_id)
  return gallery_id_;
}
void GalleryWillStartCountdownNotify::set_gallery_id(::google::protobuf::uint32 value) {
  
  gallery_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GalleryWillStartCountdownNotify.gallery_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstableSprayGalleryInfoNotify::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstableSprayGalleryInfoNotify::InstableSprayGalleryInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InstableSprayGalleryInfoNotify)
}
InstableSprayGalleryInfoNotify::InstableSprayGalleryInfoNotify(const InstableSprayGalleryInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  score_ = from.score_;
  // @@protoc_insertion_point(copy_constructor:proto.InstableSprayGalleryInfoNotify)
}

void InstableSprayGalleryInfoNotify::SharedCtor() {
  score_ = 0u;
  _cached_size_ = 0;
}

InstableSprayGalleryInfoNotify::~InstableSprayGalleryInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.InstableSprayGalleryInfoNotify)
  SharedDtor();
}

void InstableSprayGalleryInfoNotify::SharedDtor() {
}

void InstableSprayGalleryInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstableSprayGalleryInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstableSprayGalleryInfoNotify& InstableSprayGalleryInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstableSprayGalleryInfoNotify* InstableSprayGalleryInfoNotify::New(::google::protobuf::Arena* arena) const {
  InstableSprayGalleryInfoNotify* n = new InstableSprayGalleryInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstableSprayGalleryInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InstableSprayGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_ = 0u;
  _internal_metadata_.Clear();
}

bool InstableSprayGalleryInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InstableSprayGalleryInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InstableSprayGalleryInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InstableSprayGalleryInfoNotify)
  return false;
#undef DO_
}

void InstableSprayGalleryInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InstableSprayGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 3;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InstableSprayGalleryInfoNotify)
}

::google::protobuf::uint8* InstableSprayGalleryInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InstableSprayGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 score = 3;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InstableSprayGalleryInfoNotify)
  return target;
}

size_t InstableSprayGalleryInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InstableSprayGalleryInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 score = 3;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstableSprayGalleryInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InstableSprayGalleryInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InstableSprayGalleryInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstableSprayGalleryInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InstableSprayGalleryInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InstableSprayGalleryInfoNotify)
    MergeFrom(*source);
  }
}

void InstableSprayGalleryInfoNotify::MergeFrom(const InstableSprayGalleryInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InstableSprayGalleryInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.score() != 0) {
    set_score(from.score());
  }
}

void InstableSprayGalleryInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InstableSprayGalleryInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstableSprayGalleryInfoNotify::CopyFrom(const InstableSprayGalleryInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InstableSprayGalleryInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstableSprayGalleryInfoNotify::IsInitialized() const {
  return true;
}

void InstableSprayGalleryInfoNotify::Swap(InstableSprayGalleryInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstableSprayGalleryInfoNotify::InternalSwap(InstableSprayGalleryInfoNotify* other) {
  using std::swap;
  swap(score_, other->score_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstableSprayGalleryInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstableSprayGalleryInfoNotify

// uint32 score = 3;
void InstableSprayGalleryInfoNotify::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 InstableSprayGalleryInfoNotify::score() const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayGalleryInfoNotify.score)
  return score_;
}
void InstableSprayGalleryInfoNotify::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.InstableSprayGalleryInfoNotify.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryMuqadasPotionInfo::kScoreFieldNumber;
const int SceneGalleryMuqadasPotionInfo::kCaptureWeaknessCountFieldNumber;
const int SceneGalleryMuqadasPotionInfo::kSkillEnergyFieldNumber;
const int SceneGalleryMuqadasPotionInfo::kSkillUseLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryMuqadasPotionInfo::SceneGalleryMuqadasPotionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryMuqadasPotionInfo)
}
SceneGalleryMuqadasPotionInfo::SceneGalleryMuqadasPotionInfo(const SceneGalleryMuqadasPotionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capture_weakness_count_, &from.capture_weakness_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&skill_energy_) -
    reinterpret_cast<char*>(&capture_weakness_count_)) + sizeof(skill_energy_));
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryMuqadasPotionInfo)
}

void SceneGalleryMuqadasPotionInfo::SharedCtor() {
  ::memset(&capture_weakness_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_energy_) -
      reinterpret_cast<char*>(&capture_weakness_count_)) + sizeof(skill_energy_));
  _cached_size_ = 0;
}

SceneGalleryMuqadasPotionInfo::~SceneGalleryMuqadasPotionInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryMuqadasPotionInfo)
  SharedDtor();
}

void SceneGalleryMuqadasPotionInfo::SharedDtor() {
}

void SceneGalleryMuqadasPotionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryMuqadasPotionInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryMuqadasPotionInfo& SceneGalleryMuqadasPotionInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryMuqadasPotionInfo* SceneGalleryMuqadasPotionInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryMuqadasPotionInfo* n = new SceneGalleryMuqadasPotionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryMuqadasPotionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryMuqadasPotionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&capture_weakness_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skill_energy_) -
      reinterpret_cast<char*>(&capture_weakness_count_)) + sizeof(skill_energy_));
  _internal_metadata_.Clear();
}

bool SceneGalleryMuqadasPotionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryMuqadasPotionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 capture_weakness_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capture_weakness_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_use_limit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_use_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 skill_energy = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryMuqadasPotionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryMuqadasPotionInfo)
  return false;
#undef DO_
}

void SceneGalleryMuqadasPotionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryMuqadasPotionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 capture_weakness_count = 4;
  if (this->capture_weakness_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->capture_weakness_count(), output);
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score(), output);
  }

  // uint32 skill_use_limit = 9;
  if (this->skill_use_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->skill_use_limit(), output);
  }

  // uint32 skill_energy = 10;
  if (this->skill_energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->skill_energy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryMuqadasPotionInfo)
}

::google::protobuf::uint8* SceneGalleryMuqadasPotionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryMuqadasPotionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 capture_weakness_count = 4;
  if (this->capture_weakness_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->capture_weakness_count(), target);
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->score(), target);
  }

  // uint32 skill_use_limit = 9;
  if (this->skill_use_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->skill_use_limit(), target);
  }

  // uint32 skill_energy = 10;
  if (this->skill_energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->skill_energy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryMuqadasPotionInfo)
  return target;
}

size_t SceneGalleryMuqadasPotionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryMuqadasPotionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 capture_weakness_count = 4;
  if (this->capture_weakness_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capture_weakness_count());
  }

  // uint32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 skill_use_limit = 9;
  if (this->skill_use_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_use_limit());
  }

  // uint32 skill_energy = 10;
  if (this->skill_energy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->skill_energy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryMuqadasPotionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryMuqadasPotionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryMuqadasPotionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryMuqadasPotionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryMuqadasPotionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryMuqadasPotionInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryMuqadasPotionInfo::MergeFrom(const SceneGalleryMuqadasPotionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryMuqadasPotionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capture_weakness_count() != 0) {
    set_capture_weakness_count(from.capture_weakness_count());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.skill_use_limit() != 0) {
    set_skill_use_limit(from.skill_use_limit());
  }
  if (from.skill_energy() != 0) {
    set_skill_energy(from.skill_energy());
  }
}

void SceneGalleryMuqadasPotionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryMuqadasPotionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryMuqadasPotionInfo::CopyFrom(const SceneGalleryMuqadasPotionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryMuqadasPotionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryMuqadasPotionInfo::IsInitialized() const {
  return true;
}

void SceneGalleryMuqadasPotionInfo::Swap(SceneGalleryMuqadasPotionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryMuqadasPotionInfo::InternalSwap(SceneGalleryMuqadasPotionInfo* other) {
  using std::swap;
  swap(capture_weakness_count_, other->capture_weakness_count_);
  swap(score_, other->score_);
  swap(skill_use_limit_, other->skill_use_limit_);
  swap(skill_energy_, other->skill_energy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryMuqadasPotionInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryMuqadasPotionInfo

// uint32 score = 6;
void SceneGalleryMuqadasPotionInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 SceneGalleryMuqadasPotionInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryMuqadasPotionInfo.score)
  return score_;
}
void SceneGalleryMuqadasPotionInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryMuqadasPotionInfo.score)
}

// uint32 capture_weakness_count = 4;
void SceneGalleryMuqadasPotionInfo::clear_capture_weakness_count() {
  capture_weakness_count_ = 0u;
}
::google::protobuf::uint32 SceneGalleryMuqadasPotionInfo::capture_weakness_count() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryMuqadasPotionInfo.capture_weakness_count)
  return capture_weakness_count_;
}
void SceneGalleryMuqadasPotionInfo::set_capture_weakness_count(::google::protobuf::uint32 value) {
  
  capture_weakness_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryMuqadasPotionInfo.capture_weakness_count)
}

// uint32 skill_energy = 10;
void SceneGalleryMuqadasPotionInfo::clear_skill_energy() {
  skill_energy_ = 0u;
}
::google::protobuf::uint32 SceneGalleryMuqadasPotionInfo::skill_energy() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryMuqadasPotionInfo.skill_energy)
  return skill_energy_;
}
void SceneGalleryMuqadasPotionInfo::set_skill_energy(::google::protobuf::uint32 value) {
  
  skill_energy_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryMuqadasPotionInfo.skill_energy)
}

// uint32 skill_use_limit = 9;
void SceneGalleryMuqadasPotionInfo::clear_skill_use_limit() {
  skill_use_limit_ = 0u;
}
::google::protobuf::uint32 SceneGalleryMuqadasPotionInfo::skill_use_limit() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryMuqadasPotionInfo.skill_use_limit)
  return skill_use_limit_;
}
void SceneGalleryMuqadasPotionInfo::set_skill_use_limit(::google::protobuf::uint32 value) {
  
  skill_use_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryMuqadasPotionInfo.skill_use_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VintageHuntingFirstStageInfo::kTimidCntFieldNumber;
const int VintageHuntingFirstStageInfo::kBrutalCntFieldNumber;
const int VintageHuntingFirstStageInfo::kScoreFieldNumber;
const int VintageHuntingFirstStageInfo::kEliteCntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VintageHuntingFirstStageInfo::VintageHuntingFirstStageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VintageHuntingFirstStageInfo)
}
VintageHuntingFirstStageInfo::VintageHuntingFirstStageInfo(const VintageHuntingFirstStageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&brutal_cnt_, &from.brutal_cnt_,
    static_cast<size_t>(reinterpret_cast<char*>(&timid_cnt_) -
    reinterpret_cast<char*>(&brutal_cnt_)) + sizeof(timid_cnt_));
  // @@protoc_insertion_point(copy_constructor:proto.VintageHuntingFirstStageInfo)
}

void VintageHuntingFirstStageInfo::SharedCtor() {
  ::memset(&brutal_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timid_cnt_) -
      reinterpret_cast<char*>(&brutal_cnt_)) + sizeof(timid_cnt_));
  _cached_size_ = 0;
}

VintageHuntingFirstStageInfo::~VintageHuntingFirstStageInfo() {
  // @@protoc_insertion_point(destructor:proto.VintageHuntingFirstStageInfo)
  SharedDtor();
}

void VintageHuntingFirstStageInfo::SharedDtor() {
}

void VintageHuntingFirstStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VintageHuntingFirstStageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VintageHuntingFirstStageInfo& VintageHuntingFirstStageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

VintageHuntingFirstStageInfo* VintageHuntingFirstStageInfo::New(::google::protobuf::Arena* arena) const {
  VintageHuntingFirstStageInfo* n = new VintageHuntingFirstStageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VintageHuntingFirstStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VintageHuntingFirstStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&brutal_cnt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timid_cnt_) -
      reinterpret_cast<char*>(&brutal_cnt_)) + sizeof(timid_cnt_));
  _internal_metadata_.Clear();
}

bool VintageHuntingFirstStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VintageHuntingFirstStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 brutal_cnt = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &brutal_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 elite_cnt = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 score = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timid_cnt = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timid_cnt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VintageHuntingFirstStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VintageHuntingFirstStageInfo)
  return false;
#undef DO_
}

void VintageHuntingFirstStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VintageHuntingFirstStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 brutal_cnt = 7;
  if (this->brutal_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->brutal_cnt(), output);
  }

  // uint32 elite_cnt = 11;
  if (this->elite_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->elite_cnt(), output);
  }

  // uint32 score = 14;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->score(), output);
  }

  // uint32 timid_cnt = 15;
  if (this->timid_cnt() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->timid_cnt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.VintageHuntingFirstStageInfo)
}

::google::protobuf::uint8* VintageHuntingFirstStageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.VintageHuntingFirstStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 brutal_cnt = 7;
  if (this->brutal_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->brutal_cnt(), target);
  }

  // uint32 elite_cnt = 11;
  if (this->elite_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->elite_cnt(), target);
  }

  // uint32 score = 14;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->score(), target);
  }

  // uint32 timid_cnt = 15;
  if (this->timid_cnt() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->timid_cnt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VintageHuntingFirstStageInfo)
  return target;
}

size_t VintageHuntingFirstStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VintageHuntingFirstStageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 brutal_cnt = 7;
  if (this->brutal_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->brutal_cnt());
  }

  // uint32 elite_cnt = 11;
  if (this->elite_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->elite_cnt());
  }

  // uint32 score = 14;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->score());
  }

  // uint32 timid_cnt = 15;
  if (this->timid_cnt() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->timid_cnt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VintageHuntingFirstStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VintageHuntingFirstStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VintageHuntingFirstStageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VintageHuntingFirstStageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VintageHuntingFirstStageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VintageHuntingFirstStageInfo)
    MergeFrom(*source);
  }
}

void VintageHuntingFirstStageInfo::MergeFrom(const VintageHuntingFirstStageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VintageHuntingFirstStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.brutal_cnt() != 0) {
    set_brutal_cnt(from.brutal_cnt());
  }
  if (from.elite_cnt() != 0) {
    set_elite_cnt(from.elite_cnt());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.timid_cnt() != 0) {
    set_timid_cnt(from.timid_cnt());
  }
}

void VintageHuntingFirstStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VintageHuntingFirstStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VintageHuntingFirstStageInfo::CopyFrom(const VintageHuntingFirstStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VintageHuntingFirstStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VintageHuntingFirstStageInfo::IsInitialized() const {
  return true;
}

void VintageHuntingFirstStageInfo::Swap(VintageHuntingFirstStageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VintageHuntingFirstStageInfo::InternalSwap(VintageHuntingFirstStageInfo* other) {
  using std::swap;
  swap(brutal_cnt_, other->brutal_cnt_);
  swap(elite_cnt_, other->elite_cnt_);
  swap(score_, other->score_);
  swap(timid_cnt_, other->timid_cnt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VintageHuntingFirstStageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VintageHuntingFirstStageInfo

// uint32 timid_cnt = 15;
void VintageHuntingFirstStageInfo::clear_timid_cnt() {
  timid_cnt_ = 0u;
}
::google::protobuf::uint32 VintageHuntingFirstStageInfo::timid_cnt() const {
  // @@protoc_insertion_point(field_get:proto.VintageHuntingFirstStageInfo.timid_cnt)
  return timid_cnt_;
}
void VintageHuntingFirstStageInfo::set_timid_cnt(::google::protobuf::uint32 value) {
  
  timid_cnt_ = value;
  // @@protoc_insertion_point(field_set:proto.VintageHuntingFirstStageInfo.timid_cnt)
}

// uint32 brutal_cnt = 7;
void VintageHuntingFirstStageInfo::clear_brutal_cnt() {
  brutal_cnt_ = 0u;
}
::google::protobuf::uint32 VintageHuntingFirstStageInfo::brutal_cnt() const {
  // @@protoc_insertion_point(field_get:proto.VintageHuntingFirstStageInfo.brutal_cnt)
  return brutal_cnt_;
}
void VintageHuntingFirstStageInfo::set_brutal_cnt(::google::protobuf::uint32 value) {
  
  brutal_cnt_ = value;
  // @@protoc_insertion_point(field_set:proto.VintageHuntingFirstStageInfo.brutal_cnt)
}

// uint32 score = 14;
void VintageHuntingFirstStageInfo::clear_score() {
  score_ = 0u;
}
::google::protobuf::uint32 VintageHuntingFirstStageInfo::score() const {
  // @@protoc_insertion_point(field_get:proto.VintageHuntingFirstStageInfo.score)
  return score_;
}
void VintageHuntingFirstStageInfo::set_score(::google::protobuf::uint32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto.VintageHuntingFirstStageInfo.score)
}

// uint32 elite_cnt = 11;
void VintageHuntingFirstStageInfo::clear_elite_cnt() {
  elite_cnt_ = 0u;
}
::google::protobuf::uint32 VintageHuntingFirstStageInfo::elite_cnt() const {
  // @@protoc_insertion_point(field_get:proto.VintageHuntingFirstStageInfo.elite_cnt)
  return elite_cnt_;
}
void VintageHuntingFirstStageInfo::set_elite_cnt(::google::protobuf::uint32 value) {
  
  elite_cnt_ = value;
  // @@protoc_insertion_point(field_set:proto.VintageHuntingFirstStageInfo.elite_cnt)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VintageHuntingSecondStageInfo::kTotalNumFieldNumber;
const int VintageHuntingSecondStageInfo::kCaptureAnimalNumFieldNumber;
const int VintageHuntingSecondStageInfo::kLeftNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VintageHuntingSecondStageInfo::VintageHuntingSecondStageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VintageHuntingSecondStageInfo)
}
VintageHuntingSecondStageInfo::VintageHuntingSecondStageInfo(const VintageHuntingSecondStageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capture_animal_num_, &from.capture_animal_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_num_) -
    reinterpret_cast<char*>(&capture_animal_num_)) + sizeof(total_num_));
  // @@protoc_insertion_point(copy_constructor:proto.VintageHuntingSecondStageInfo)
}

void VintageHuntingSecondStageInfo::SharedCtor() {
  ::memset(&capture_animal_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_num_) -
      reinterpret_cast<char*>(&capture_animal_num_)) + sizeof(total_num_));
  _cached_size_ = 0;
}

VintageHuntingSecondStageInfo::~VintageHuntingSecondStageInfo() {
  // @@protoc_insertion_point(destructor:proto.VintageHuntingSecondStageInfo)
  SharedDtor();
}

void VintageHuntingSecondStageInfo::SharedDtor() {
}

void VintageHuntingSecondStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VintageHuntingSecondStageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VintageHuntingSecondStageInfo& VintageHuntingSecondStageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

VintageHuntingSecondStageInfo* VintageHuntingSecondStageInfo::New(::google::protobuf::Arena* arena) const {
  VintageHuntingSecondStageInfo* n = new VintageHuntingSecondStageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VintageHuntingSecondStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VintageHuntingSecondStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&capture_animal_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_num_) -
      reinterpret_cast<char*>(&capture_animal_num_)) + sizeof(total_num_));
  _internal_metadata_.Clear();
}

bool VintageHuntingSecondStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VintageHuntingSecondStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 left_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 capture_animal_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capture_animal_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VintageHuntingSecondStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VintageHuntingSecondStageInfo)
  return false;
#undef DO_
}

void VintageHuntingSecondStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VintageHuntingSecondStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_num = 3;
  if (this->left_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->left_num(), output);
  }

  // uint32 total_num = 11;
  if (this->total_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->total_num(), output);
  }

  // uint32 capture_animal_num = 13;
  if (this->capture_animal_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->capture_animal_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.VintageHuntingSecondStageInfo)
}

::google::protobuf::uint8* VintageHuntingSecondStageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.VintageHuntingSecondStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 left_num = 3;
  if (this->left_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->left_num(), target);
  }

  // uint32 total_num = 11;
  if (this->total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->total_num(), target);
  }

  // uint32 capture_animal_num = 13;
  if (this->capture_animal_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->capture_animal_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VintageHuntingSecondStageInfo)
  return target;
}

size_t VintageHuntingSecondStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VintageHuntingSecondStageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 capture_animal_num = 13;
  if (this->capture_animal_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capture_animal_num());
  }

  // uint32 left_num = 3;
  if (this->left_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_num());
  }

  // uint32 total_num = 11;
  if (this->total_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VintageHuntingSecondStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VintageHuntingSecondStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VintageHuntingSecondStageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VintageHuntingSecondStageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VintageHuntingSecondStageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VintageHuntingSecondStageInfo)
    MergeFrom(*source);
  }
}

void VintageHuntingSecondStageInfo::MergeFrom(const VintageHuntingSecondStageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VintageHuntingSecondStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capture_animal_num() != 0) {
    set_capture_animal_num(from.capture_animal_num());
  }
  if (from.left_num() != 0) {
    set_left_num(from.left_num());
  }
  if (from.total_num() != 0) {
    set_total_num(from.total_num());
  }
}

void VintageHuntingSecondStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VintageHuntingSecondStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VintageHuntingSecondStageInfo::CopyFrom(const VintageHuntingSecondStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VintageHuntingSecondStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VintageHuntingSecondStageInfo::IsInitialized() const {
  return true;
}

void VintageHuntingSecondStageInfo::Swap(VintageHuntingSecondStageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VintageHuntingSecondStageInfo::InternalSwap(VintageHuntingSecondStageInfo* other) {
  using std::swap;
  swap(capture_animal_num_, other->capture_animal_num_);
  swap(left_num_, other->left_num_);
  swap(total_num_, other->total_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VintageHuntingSecondStageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VintageHuntingSecondStageInfo

// uint32 total_num = 11;
void VintageHuntingSecondStageInfo::clear_total_num() {
  total_num_ = 0u;
}
::google::protobuf::uint32 VintageHuntingSecondStageInfo::total_num() const {
  // @@protoc_insertion_point(field_get:proto.VintageHuntingSecondStageInfo.total_num)
  return total_num_;
}
void VintageHuntingSecondStageInfo::set_total_num(::google::protobuf::uint32 value) {
  
  total_num_ = value;
  // @@protoc_insertion_point(field_set:proto.VintageHuntingSecondStageInfo.total_num)
}

// uint32 capture_animal_num = 13;
void VintageHuntingSecondStageInfo::clear_capture_animal_num() {
  capture_animal_num_ = 0u;
}
::google::protobuf::uint32 VintageHuntingSecondStageInfo::capture_animal_num() const {
  // @@protoc_insertion_point(field_get:proto.VintageHuntingSecondStageInfo.capture_animal_num)
  return capture_animal_num_;
}
void VintageHuntingSecondStageInfo::set_capture_animal_num(::google::protobuf::uint32 value) {
  
  capture_animal_num_ = value;
  // @@protoc_insertion_point(field_set:proto.VintageHuntingSecondStageInfo.capture_animal_num)
}

// uint32 left_num = 3;
void VintageHuntingSecondStageInfo::clear_left_num() {
  left_num_ = 0u;
}
::google::protobuf::uint32 VintageHuntingSecondStageInfo::left_num() const {
  // @@protoc_insertion_point(field_get:proto.VintageHuntingSecondStageInfo.left_num)
  return left_num_;
}
void VintageHuntingSecondStageInfo::set_left_num(::google::protobuf::uint32 value) {
  
  left_num_ = value;
  // @@protoc_insertion_point(field_set:proto.VintageHuntingSecondStageInfo.left_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VintageHuntingThirdStageInfo::VintageHuntingThirdStageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VintageHuntingThirdStageInfo)
}
VintageHuntingThirdStageInfo::VintageHuntingThirdStageInfo(const VintageHuntingThirdStageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.VintageHuntingThirdStageInfo)
}

void VintageHuntingThirdStageInfo::SharedCtor() {
  _cached_size_ = 0;
}

VintageHuntingThirdStageInfo::~VintageHuntingThirdStageInfo() {
  // @@protoc_insertion_point(destructor:proto.VintageHuntingThirdStageInfo)
  SharedDtor();
}

void VintageHuntingThirdStageInfo::SharedDtor() {
}

void VintageHuntingThirdStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VintageHuntingThirdStageInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VintageHuntingThirdStageInfo& VintageHuntingThirdStageInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

VintageHuntingThirdStageInfo* VintageHuntingThirdStageInfo::New(::google::protobuf::Arena* arena) const {
  VintageHuntingThirdStageInfo* n = new VintageHuntingThirdStageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VintageHuntingThirdStageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VintageHuntingThirdStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool VintageHuntingThirdStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VintageHuntingThirdStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VintageHuntingThirdStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VintageHuntingThirdStageInfo)
  return false;
#undef DO_
}

void VintageHuntingThirdStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VintageHuntingThirdStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.VintageHuntingThirdStageInfo)
}

::google::protobuf::uint8* VintageHuntingThirdStageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.VintageHuntingThirdStageInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.VintageHuntingThirdStageInfo)
  return target;
}

size_t VintageHuntingThirdStageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VintageHuntingThirdStageInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VintageHuntingThirdStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.VintageHuntingThirdStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VintageHuntingThirdStageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VintageHuntingThirdStageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.VintageHuntingThirdStageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.VintageHuntingThirdStageInfo)
    MergeFrom(*source);
  }
}

void VintageHuntingThirdStageInfo::MergeFrom(const VintageHuntingThirdStageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VintageHuntingThirdStageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VintageHuntingThirdStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.VintageHuntingThirdStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VintageHuntingThirdStageInfo::CopyFrom(const VintageHuntingThirdStageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VintageHuntingThirdStageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VintageHuntingThirdStageInfo::IsInitialized() const {
  return true;
}

void VintageHuntingThirdStageInfo::Swap(VintageHuntingThirdStageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VintageHuntingThirdStageInfo::InternalSwap(VintageHuntingThirdStageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VintageHuntingThirdStageInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VintageHuntingThirdStageInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SceneGalleryVintageHuntingInfo::kStageIdFieldNumber;
const int SceneGalleryVintageHuntingInfo::kFirstStageInfoFieldNumber;
const int SceneGalleryVintageHuntingInfo::kSecondStageInfoFieldNumber;
const int SceneGalleryVintageHuntingInfo::kThirdStageInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SceneGalleryVintageHuntingInfo::SceneGalleryVintageHuntingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SceneGalleryVintageHuntingInfo)
}
SceneGalleryVintageHuntingInfo::SceneGalleryVintageHuntingInfo(const SceneGalleryVintageHuntingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_id_ = from.stage_id_;
  clear_has_info();
  switch (from.info_case()) {
    case kFirstStageInfo: {
      mutable_first_stage_info()->::proto::VintageHuntingFirstStageInfo::MergeFrom(from.first_stage_info());
      break;
    }
    case kSecondStageInfo: {
      mutable_second_stage_info()->::proto::VintageHuntingSecondStageInfo::MergeFrom(from.second_stage_info());
      break;
    }
    case kThirdStageInfo: {
      mutable_third_stage_info()->::proto::VintageHuntingThirdStageInfo::MergeFrom(from.third_stage_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.SceneGalleryVintageHuntingInfo)
}

void SceneGalleryVintageHuntingInfo::SharedCtor() {
  stage_id_ = 0u;
  clear_has_info();
  _cached_size_ = 0;
}

SceneGalleryVintageHuntingInfo::~SceneGalleryVintageHuntingInfo() {
  // @@protoc_insertion_point(destructor:proto.SceneGalleryVintageHuntingInfo)
  SharedDtor();
}

void SceneGalleryVintageHuntingInfo::SharedDtor() {
  if (has_info()) {
    clear_info();
  }
}

void SceneGalleryVintageHuntingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneGalleryVintageHuntingInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SceneGalleryVintageHuntingInfo& SceneGalleryVintageHuntingInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

SceneGalleryVintageHuntingInfo* SceneGalleryVintageHuntingInfo::New(::google::protobuf::Arena* arena) const {
  SceneGalleryVintageHuntingInfo* n = new SceneGalleryVintageHuntingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SceneGalleryVintageHuntingInfo::clear_info() {
// @@protoc_insertion_point(one_of_clear_start:proto.SceneGalleryVintageHuntingInfo)
  switch (info_case()) {
    case kFirstStageInfo: {
      delete info_.first_stage_info_;
      break;
    }
    case kSecondStageInfo: {
      delete info_.second_stage_info_;
      break;
    }
    case kThirdStageInfo: {
      delete info_.third_stage_info_;
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INFO_NOT_SET;
}


void SceneGalleryVintageHuntingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SceneGalleryVintageHuntingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stage_id_ = 0u;
  clear_info();
  _internal_metadata_.Clear();
}

bool SceneGalleryVintageHuntingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SceneGalleryVintageHuntingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.VintageHuntingFirstStageInfo first_stage_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_first_stage_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stage_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.VintageHuntingThirdStageInfo third_stage_info = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_third_stage_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.VintageHuntingSecondStageInfo second_stage_info = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_second_stage_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SceneGalleryVintageHuntingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SceneGalleryVintageHuntingInfo)
  return false;
#undef DO_
}

void SceneGalleryVintageHuntingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SceneGalleryVintageHuntingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.VintageHuntingFirstStageInfo first_stage_info = 2;
  if (has_first_stage_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *info_.first_stage_info_, output);
  }

  // uint32 stage_id = 7;
  if (this->stage_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stage_id(), output);
  }

  // .proto.VintageHuntingThirdStageInfo third_stage_info = 12;
  if (has_third_stage_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *info_.third_stage_info_, output);
  }

  // .proto.VintageHuntingSecondStageInfo second_stage_info = 15;
  if (has_second_stage_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *info_.second_stage_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SceneGalleryVintageHuntingInfo)
}

::google::protobuf::uint8* SceneGalleryVintageHuntingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SceneGalleryVintageHuntingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.VintageHuntingFirstStageInfo first_stage_info = 2;
  if (has_first_stage_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *info_.first_stage_info_, deterministic, target);
  }

  // uint32 stage_id = 7;
  if (this->stage_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stage_id(), target);
  }

  // .proto.VintageHuntingThirdStageInfo third_stage_info = 12;
  if (has_third_stage_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *info_.third_stage_info_, deterministic, target);
  }

  // .proto.VintageHuntingSecondStageInfo second_stage_info = 15;
  if (has_second_stage_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *info_.second_stage_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SceneGalleryVintageHuntingInfo)
  return target;
}

size_t SceneGalleryVintageHuntingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SceneGalleryVintageHuntingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 stage_id = 7;
  if (this->stage_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_id());
  }

  switch (info_case()) {
    // .proto.VintageHuntingFirstStageInfo first_stage_info = 2;
    case kFirstStageInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.first_stage_info_);
      break;
    }
    // .proto.VintageHuntingSecondStageInfo second_stage_info = 15;
    case kSecondStageInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.second_stage_info_);
      break;
    }
    // .proto.VintageHuntingThirdStageInfo third_stage_info = 12;
    case kThirdStageInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *info_.third_stage_info_);
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneGalleryVintageHuntingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SceneGalleryVintageHuntingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SceneGalleryVintageHuntingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SceneGalleryVintageHuntingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SceneGalleryVintageHuntingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SceneGalleryVintageHuntingInfo)
    MergeFrom(*source);
  }
}

void SceneGalleryVintageHuntingInfo::MergeFrom(const SceneGalleryVintageHuntingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SceneGalleryVintageHuntingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stage_id() != 0) {
    set_stage_id(from.stage_id());
  }
  switch (from.info_case()) {
    case kFirstStageInfo: {
      mutable_first_stage_info()->::proto::VintageHuntingFirstStageInfo::MergeFrom(from.first_stage_info());
      break;
    }
    case kSecondStageInfo: {
      mutable_second_stage_info()->::proto::VintageHuntingSecondStageInfo::MergeFrom(from.second_stage_info());
      break;
    }
    case kThirdStageInfo: {
      mutable_third_stage_info()->::proto::VintageHuntingThirdStageInfo::MergeFrom(from.third_stage_info());
      break;
    }
    case INFO_NOT_SET: {
      break;
    }
  }
}

void SceneGalleryVintageHuntingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SceneGalleryVintageHuntingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneGalleryVintageHuntingInfo::CopyFrom(const SceneGalleryVintageHuntingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SceneGalleryVintageHuntingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneGalleryVintageHuntingInfo::IsInitialized() const {
  return true;
}

void SceneGalleryVintageHuntingInfo::Swap(SceneGalleryVintageHuntingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SceneGalleryVintageHuntingInfo::InternalSwap(SceneGalleryVintageHuntingInfo* other) {
  using std::swap;
  swap(stage_id_, other->stage_id_);
  swap(info_, other->info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SceneGalleryVintageHuntingInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SceneGalleryVintageHuntingInfo

// uint32 stage_id = 7;
void SceneGalleryVintageHuntingInfo::clear_stage_id() {
  stage_id_ = 0u;
}
::google::protobuf::uint32 SceneGalleryVintageHuntingInfo::stage_id() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryVintageHuntingInfo.stage_id)
  return stage_id_;
}
void SceneGalleryVintageHuntingInfo::set_stage_id(::google::protobuf::uint32 value) {
  
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SceneGalleryVintageHuntingInfo.stage_id)
}

// .proto.VintageHuntingFirstStageInfo first_stage_info = 2;
bool SceneGalleryVintageHuntingInfo::has_first_stage_info() const {
  return info_case() == kFirstStageInfo;
}
void SceneGalleryVintageHuntingInfo::set_has_first_stage_info() {
  _oneof_case_[0] = kFirstStageInfo;
}
void SceneGalleryVintageHuntingInfo::clear_first_stage_info() {
  if (has_first_stage_info()) {
    delete info_.first_stage_info_;
    clear_has_info();
  }
}
 const ::proto::VintageHuntingFirstStageInfo& SceneGalleryVintageHuntingInfo::first_stage_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryVintageHuntingInfo.first_stage_info)
  return has_first_stage_info()
      ? *info_.first_stage_info_
      : ::proto::VintageHuntingFirstStageInfo::default_instance();
}
::proto::VintageHuntingFirstStageInfo* SceneGalleryVintageHuntingInfo::mutable_first_stage_info() {
  if (!has_first_stage_info()) {
    clear_info();
    set_has_first_stage_info();
    info_.first_stage_info_ = new ::proto::VintageHuntingFirstStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryVintageHuntingInfo.first_stage_info)
  return info_.first_stage_info_;
}
::proto::VintageHuntingFirstStageInfo* SceneGalleryVintageHuntingInfo::release_first_stage_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryVintageHuntingInfo.first_stage_info)
  if (has_first_stage_info()) {
    clear_has_info();
    ::proto::VintageHuntingFirstStageInfo* temp = info_.first_stage_info_;
    info_.first_stage_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryVintageHuntingInfo::set_allocated_first_stage_info(::proto::VintageHuntingFirstStageInfo* first_stage_info) {
  clear_info();
  if (first_stage_info) {
    set_has_first_stage_info();
    info_.first_stage_info_ = first_stage_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryVintageHuntingInfo.first_stage_info)
}

// .proto.VintageHuntingSecondStageInfo second_stage_info = 15;
bool SceneGalleryVintageHuntingInfo::has_second_stage_info() const {
  return info_case() == kSecondStageInfo;
}
void SceneGalleryVintageHuntingInfo::set_has_second_stage_info() {
  _oneof_case_[0] = kSecondStageInfo;
}
void SceneGalleryVintageHuntingInfo::clear_second_stage_info() {
  if (has_second_stage_info()) {
    delete info_.second_stage_info_;
    clear_has_info();
  }
}
 const ::proto::VintageHuntingSecondStageInfo& SceneGalleryVintageHuntingInfo::second_stage_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryVintageHuntingInfo.second_stage_info)
  return has_second_stage_info()
      ? *info_.second_stage_info_
      : ::proto::VintageHuntingSecondStageInfo::default_instance();
}
::proto::VintageHuntingSecondStageInfo* SceneGalleryVintageHuntingInfo::mutable_second_stage_info() {
  if (!has_second_stage_info()) {
    clear_info();
    set_has_second_stage_info();
    info_.second_stage_info_ = new ::proto::VintageHuntingSecondStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryVintageHuntingInfo.second_stage_info)
  return info_.second_stage_info_;
}
::proto::VintageHuntingSecondStageInfo* SceneGalleryVintageHuntingInfo::release_second_stage_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryVintageHuntingInfo.second_stage_info)
  if (has_second_stage_info()) {
    clear_has_info();
    ::proto::VintageHuntingSecondStageInfo* temp = info_.second_stage_info_;
    info_.second_stage_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryVintageHuntingInfo::set_allocated_second_stage_info(::proto::VintageHuntingSecondStageInfo* second_stage_info) {
  clear_info();
  if (second_stage_info) {
    set_has_second_stage_info();
    info_.second_stage_info_ = second_stage_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryVintageHuntingInfo.second_stage_info)
}

// .proto.VintageHuntingThirdStageInfo third_stage_info = 12;
bool SceneGalleryVintageHuntingInfo::has_third_stage_info() const {
  return info_case() == kThirdStageInfo;
}
void SceneGalleryVintageHuntingInfo::set_has_third_stage_info() {
  _oneof_case_[0] = kThirdStageInfo;
}
void SceneGalleryVintageHuntingInfo::clear_third_stage_info() {
  if (has_third_stage_info()) {
    delete info_.third_stage_info_;
    clear_has_info();
  }
}
 const ::proto::VintageHuntingThirdStageInfo& SceneGalleryVintageHuntingInfo::third_stage_info() const {
  // @@protoc_insertion_point(field_get:proto.SceneGalleryVintageHuntingInfo.third_stage_info)
  return has_third_stage_info()
      ? *info_.third_stage_info_
      : ::proto::VintageHuntingThirdStageInfo::default_instance();
}
::proto::VintageHuntingThirdStageInfo* SceneGalleryVintageHuntingInfo::mutable_third_stage_info() {
  if (!has_third_stage_info()) {
    clear_info();
    set_has_third_stage_info();
    info_.third_stage_info_ = new ::proto::VintageHuntingThirdStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.SceneGalleryVintageHuntingInfo.third_stage_info)
  return info_.third_stage_info_;
}
::proto::VintageHuntingThirdStageInfo* SceneGalleryVintageHuntingInfo::release_third_stage_info() {
  // @@protoc_insertion_point(field_release:proto.SceneGalleryVintageHuntingInfo.third_stage_info)
  if (has_third_stage_info()) {
    clear_has_info();
    ::proto::VintageHuntingThirdStageInfo* temp = info_.third_stage_info_;
    info_.third_stage_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SceneGalleryVintageHuntingInfo::set_allocated_third_stage_info(::proto::VintageHuntingThirdStageInfo* third_stage_info) {
  clear_info();
  if (third_stage_info) {
    set_has_third_stage_info();
    info_.third_stage_info_ = third_stage_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SceneGalleryVintageHuntingInfo.third_stage_info)
}

bool SceneGalleryVintageHuntingInfo::has_info() const {
  return info_case() != INFO_NOT_SET;
}
void SceneGalleryVintageHuntingInfo::clear_has_info() {
  _oneof_case_[0] = INFO_NOT_SET;
}
SceneGalleryVintageHuntingInfo::InfoCase SceneGalleryVintageHuntingInfo::info_case() const {
  return SceneGalleryVintageHuntingInfo::InfoCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindFieldGalleryInfoNotify::kShowIdFieldNumber;
const int WindFieldGalleryInfoNotify::kKilledMonsterNumFieldNumber;
const int WindFieldGalleryInfoNotify::kCoinNumFieldNumber;
const int WindFieldGalleryInfoNotify::kChallengeBallMaxCountFieldNumber;
const int WindFieldGalleryInfoNotify::kChallengeTotalTimeFieldNumber;
const int WindFieldGalleryInfoNotify::kChallengeBallCurCountFieldNumber;
const int WindFieldGalleryInfoNotify::kChallengeTimestampFieldNumber;
const int WindFieldGalleryInfoNotify::kElementBallNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindFieldGalleryInfoNotify::WindFieldGalleryInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WindFieldGalleryInfoNotify)
}
WindFieldGalleryInfoNotify::WindFieldGalleryInfoNotify(const WindFieldGalleryInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_ball_max_count_, &from.challenge_ball_max_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&element_ball_num_) -
    reinterpret_cast<char*>(&challenge_ball_max_count_)) + sizeof(element_ball_num_));
  // @@protoc_insertion_point(copy_constructor:proto.WindFieldGalleryInfoNotify)
}

void WindFieldGalleryInfoNotify::SharedCtor() {
  ::memset(&challenge_ball_max_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_ball_num_) -
      reinterpret_cast<char*>(&challenge_ball_max_count_)) + sizeof(element_ball_num_));
  _cached_size_ = 0;
}

WindFieldGalleryInfoNotify::~WindFieldGalleryInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.WindFieldGalleryInfoNotify)
  SharedDtor();
}

void WindFieldGalleryInfoNotify::SharedDtor() {
}

void WindFieldGalleryInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindFieldGalleryInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WindFieldGalleryInfoNotify& WindFieldGalleryInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindFieldGalleryInfoNotify* WindFieldGalleryInfoNotify::New(::google::protobuf::Arena* arena) const {
  WindFieldGalleryInfoNotify* n = new WindFieldGalleryInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindFieldGalleryInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WindFieldGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&challenge_ball_max_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&element_ball_num_) -
      reinterpret_cast<char*>(&challenge_ball_max_count_)) + sizeof(element_ball_num_));
  _internal_metadata_.Clear();
}

bool WindFieldGalleryInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WindFieldGalleryInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_ball_max_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_ball_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 show_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_total_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_monster_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_ball_cur_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_ball_cur_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 element_ball_num = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &element_ball_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WindFieldGalleryInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WindFieldGalleryInfoNotify)
  return false;
#undef DO_
}

void WindFieldGalleryInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WindFieldGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_ball_max_count = 1;
  if (this->challenge_ball_max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_ball_max_count(), output);
  }

  // uint32 show_id = 3;
  if (this->show_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->show_id(), output);
  }

  // uint32 challenge_timestamp = 4;
  if (this->challenge_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challenge_timestamp(), output);
  }

  // uint32 challenge_total_time = 5;
  if (this->challenge_total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challenge_total_time(), output);
  }

  // uint32 killed_monster_num = 7;
  if (this->killed_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->killed_monster_num(), output);
  }

  // uint32 coin_num = 9;
  if (this->coin_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->coin_num(), output);
  }

  // uint32 challenge_ball_cur_count = 10;
  if (this->challenge_ball_cur_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challenge_ball_cur_count(), output);
  }

  // uint32 element_ball_num = 14;
  if (this->element_ball_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->element_ball_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WindFieldGalleryInfoNotify)
}

::google::protobuf::uint8* WindFieldGalleryInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.WindFieldGalleryInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_ball_max_count = 1;
  if (this->challenge_ball_max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_ball_max_count(), target);
  }

  // uint32 show_id = 3;
  if (this->show_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->show_id(), target);
  }

  // uint32 challenge_timestamp = 4;
  if (this->challenge_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challenge_timestamp(), target);
  }

  // uint32 challenge_total_time = 5;
  if (this->challenge_total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challenge_total_time(), target);
  }

  // uint32 killed_monster_num = 7;
  if (this->killed_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->killed_monster_num(), target);
  }

  // uint32 coin_num = 9;
  if (this->coin_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->coin_num(), target);
  }

  // uint32 challenge_ball_cur_count = 10;
  if (this->challenge_ball_cur_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challenge_ball_cur_count(), target);
  }

  // uint32 element_ball_num = 14;
  if (this->element_ball_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->element_ball_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WindFieldGalleryInfoNotify)
  return target;
}

size_t WindFieldGalleryInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WindFieldGalleryInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 challenge_ball_max_count = 1;
  if (this->challenge_ball_max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_ball_max_count());
  }

  // uint32 show_id = 3;
  if (this->show_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show_id());
  }

  // uint32 challenge_timestamp = 4;
  if (this->challenge_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_timestamp());
  }

  // uint32 challenge_total_time = 5;
  if (this->challenge_total_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_total_time());
  }

  // uint32 killed_monster_num = 7;
  if (this->killed_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_monster_num());
  }

  // uint32 coin_num = 9;
  if (this->coin_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_num());
  }

  // uint32 challenge_ball_cur_count = 10;
  if (this->challenge_ball_cur_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_ball_cur_count());
  }

  // uint32 element_ball_num = 14;
  if (this->element_ball_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->element_ball_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindFieldGalleryInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.WindFieldGalleryInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const WindFieldGalleryInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindFieldGalleryInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.WindFieldGalleryInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.WindFieldGalleryInfoNotify)
    MergeFrom(*source);
  }
}

void WindFieldGalleryInfoNotify::MergeFrom(const WindFieldGalleryInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.WindFieldGalleryInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_ball_max_count() != 0) {
    set_challenge_ball_max_count(from.challenge_ball_max_count());
  }
  if (from.show_id() != 0) {
    set_show_id(from.show_id());
  }
  if (from.challenge_timestamp() != 0) {
    set_challenge_timestamp(from.challenge_timestamp());
  }
  if (from.challenge_total_time() != 0) {
    set_challenge_total_time(from.challenge_total_time());
  }
  if (from.killed_monster_num() != 0) {
    set_killed_monster_num(from.killed_monster_num());
  }
  if (from.coin_num() != 0) {
    set_coin_num(from.coin_num());
  }
  if (from.challenge_ball_cur_count() != 0) {
    set_challenge_ball_cur_count(from.challenge_ball_cur_count());
  }
  if (from.element_ball_num() != 0) {
    set_element_ball_num(from.element_ball_num());
  }
}

void WindFieldGalleryInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.WindFieldGalleryInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindFieldGalleryInfoNotify::CopyFrom(const WindFieldGalleryInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WindFieldGalleryInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindFieldGalleryInfoNotify::IsInitialized() const {
  return true;
}

void WindFieldGalleryInfoNotify::Swap(WindFieldGalleryInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindFieldGalleryInfoNotify::InternalSwap(WindFieldGalleryInfoNotify* other) {
  using std::swap;
  swap(challenge_ball_max_count_, other->challenge_ball_max_count_);
  swap(show_id_, other->show_id_);
  swap(challenge_timestamp_, other->challenge_timestamp_);
  swap(challenge_total_time_, other->challenge_total_time_);
  swap(killed_monster_num_, other->killed_monster_num_);
  swap(coin_num_, other->coin_num_);
  swap(challenge_ball_cur_count_, other->challenge_ball_cur_count_);
  swap(element_ball_num_, other->element_ball_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindFieldGalleryInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindFieldGalleryInfoNotify

// uint32 show_id = 3;
void WindFieldGalleryInfoNotify::clear_show_id() {
  show_id_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::show_id() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.show_id)
  return show_id_;
}
void WindFieldGalleryInfoNotify::set_show_id(::google::protobuf::uint32 value) {
  
  show_id_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.show_id)
}

// uint32 killed_monster_num = 7;
void WindFieldGalleryInfoNotify::clear_killed_monster_num() {
  killed_monster_num_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::killed_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.killed_monster_num)
  return killed_monster_num_;
}
void WindFieldGalleryInfoNotify::set_killed_monster_num(::google::protobuf::uint32 value) {
  
  killed_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.killed_monster_num)
}

// uint32 coin_num = 9;
void WindFieldGalleryInfoNotify::clear_coin_num() {
  coin_num_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::coin_num() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.coin_num)
  return coin_num_;
}
void WindFieldGalleryInfoNotify::set_coin_num(::google::protobuf::uint32 value) {
  
  coin_num_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.coin_num)
}

// uint32 challenge_ball_max_count = 1;
void WindFieldGalleryInfoNotify::clear_challenge_ball_max_count() {
  challenge_ball_max_count_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::challenge_ball_max_count() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.challenge_ball_max_count)
  return challenge_ball_max_count_;
}
void WindFieldGalleryInfoNotify::set_challenge_ball_max_count(::google::protobuf::uint32 value) {
  
  challenge_ball_max_count_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.challenge_ball_max_count)
}

// uint32 challenge_total_time = 5;
void WindFieldGalleryInfoNotify::clear_challenge_total_time() {
  challenge_total_time_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::challenge_total_time() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.challenge_total_time)
  return challenge_total_time_;
}
void WindFieldGalleryInfoNotify::set_challenge_total_time(::google::protobuf::uint32 value) {
  
  challenge_total_time_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.challenge_total_time)
}

// uint32 challenge_ball_cur_count = 10;
void WindFieldGalleryInfoNotify::clear_challenge_ball_cur_count() {
  challenge_ball_cur_count_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::challenge_ball_cur_count() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.challenge_ball_cur_count)
  return challenge_ball_cur_count_;
}
void WindFieldGalleryInfoNotify::set_challenge_ball_cur_count(::google::protobuf::uint32 value) {
  
  challenge_ball_cur_count_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.challenge_ball_cur_count)
}

// uint32 challenge_timestamp = 4;
void WindFieldGalleryInfoNotify::clear_challenge_timestamp() {
  challenge_timestamp_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::challenge_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.challenge_timestamp)
  return challenge_timestamp_;
}
void WindFieldGalleryInfoNotify::set_challenge_timestamp(::google::protobuf::uint32 value) {
  
  challenge_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.challenge_timestamp)
}

// uint32 element_ball_num = 14;
void WindFieldGalleryInfoNotify::clear_element_ball_num() {
  element_ball_num_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryInfoNotify::element_ball_num() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryInfoNotify.element_ball_num)
  return element_ball_num_;
}
void WindFieldGalleryInfoNotify::set_element_ball_num(::google::protobuf::uint32 value) {
  
  element_ball_num_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryInfoNotify.element_ball_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindFieldGalleryChallengeInfoNotify::kChallengeTimestampFieldNumber;
const int WindFieldGalleryChallengeInfoNotify::kIsStartFieldNumber;
const int WindFieldGalleryChallengeInfoNotify::kShowIdFieldNumber;
const int WindFieldGalleryChallengeInfoNotify::kIsSuccessFieldNumber;
const int WindFieldGalleryChallengeInfoNotify::kChallengeTotalTimeFieldNumber;
const int WindFieldGalleryChallengeInfoNotify::kChallengeBallMaxCountFieldNumber;
const int WindFieldGalleryChallengeInfoNotify::kChallengeBallCurCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindFieldGalleryChallengeInfoNotify::WindFieldGalleryChallengeInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WindFieldGalleryChallengeInfoNotify)
}
WindFieldGalleryChallengeInfoNotify::WindFieldGalleryChallengeInfoNotify(const WindFieldGalleryChallengeInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_ball_cur_count_, &from.challenge_ball_cur_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_total_time_) -
    reinterpret_cast<char*>(&challenge_ball_cur_count_)) + sizeof(challenge_total_time_));
  // @@protoc_insertion_point(copy_constructor:proto.WindFieldGalleryChallengeInfoNotify)
}

void WindFieldGalleryChallengeInfoNotify::SharedCtor() {
  ::memset(&challenge_ball_cur_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_total_time_) -
      reinterpret_cast<char*>(&challenge_ball_cur_count_)) + sizeof(challenge_total_time_));
  _cached_size_ = 0;
}

WindFieldGalleryChallengeInfoNotify::~WindFieldGalleryChallengeInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.WindFieldGalleryChallengeInfoNotify)
  SharedDtor();
}

void WindFieldGalleryChallengeInfoNotify::SharedDtor() {
}

void WindFieldGalleryChallengeInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindFieldGalleryChallengeInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WindFieldGalleryChallengeInfoNotify& WindFieldGalleryChallengeInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindFieldGalleryChallengeInfoNotify* WindFieldGalleryChallengeInfoNotify::New(::google::protobuf::Arena* arena) const {
  WindFieldGalleryChallengeInfoNotify* n = new WindFieldGalleryChallengeInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindFieldGalleryChallengeInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WindFieldGalleryChallengeInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&challenge_ball_cur_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_total_time_) -
      reinterpret_cast<char*>(&challenge_ball_cur_count_)) + sizeof(challenge_total_time_));
  _internal_metadata_.Clear();
}

bool WindFieldGalleryChallengeInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WindFieldGalleryChallengeInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_ball_cur_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_ball_cur_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_start = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_ball_max_count = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_ball_max_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 show_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &show_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_total_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WindFieldGalleryChallengeInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WindFieldGalleryChallengeInfoNotify)
  return false;
#undef DO_
}

void WindFieldGalleryChallengeInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WindFieldGalleryChallengeInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_ball_cur_count = 1;
  if (this->challenge_ball_cur_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_ball_cur_count(), output);
  }

  // uint32 challenge_timestamp = 6;
  if (this->challenge_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->challenge_timestamp(), output);
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_success(), output);
  }

  // bool is_start = 8;
  if (this->is_start() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_start(), output);
  }

  // uint32 challenge_ball_max_count = 11;
  if (this->challenge_ball_max_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->challenge_ball_max_count(), output);
  }

  // uint32 show_id = 12;
  if (this->show_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->show_id(), output);
  }

  // uint32 challenge_total_time = 13;
  if (this->challenge_total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->challenge_total_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WindFieldGalleryChallengeInfoNotify)
}

::google::protobuf::uint8* WindFieldGalleryChallengeInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.WindFieldGalleryChallengeInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_ball_cur_count = 1;
  if (this->challenge_ball_cur_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_ball_cur_count(), target);
  }

  // uint32 challenge_timestamp = 6;
  if (this->challenge_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->challenge_timestamp(), target);
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_success(), target);
  }

  // bool is_start = 8;
  if (this->is_start() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_start(), target);
  }

  // uint32 challenge_ball_max_count = 11;
  if (this->challenge_ball_max_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->challenge_ball_max_count(), target);
  }

  // uint32 show_id = 12;
  if (this->show_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->show_id(), target);
  }

  // uint32 challenge_total_time = 13;
  if (this->challenge_total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->challenge_total_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WindFieldGalleryChallengeInfoNotify)
  return target;
}

size_t WindFieldGalleryChallengeInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WindFieldGalleryChallengeInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 challenge_ball_cur_count = 1;
  if (this->challenge_ball_cur_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_ball_cur_count());
  }

  // uint32 challenge_timestamp = 6;
  if (this->challenge_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_timestamp());
  }

  // bool is_start = 8;
  if (this->is_start() != 0) {
    total_size += 1 + 1;
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 challenge_ball_max_count = 11;
  if (this->challenge_ball_max_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_ball_max_count());
  }

  // uint32 show_id = 12;
  if (this->show_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->show_id());
  }

  // uint32 challenge_total_time = 13;
  if (this->challenge_total_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_total_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindFieldGalleryChallengeInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.WindFieldGalleryChallengeInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const WindFieldGalleryChallengeInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindFieldGalleryChallengeInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.WindFieldGalleryChallengeInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.WindFieldGalleryChallengeInfoNotify)
    MergeFrom(*source);
  }
}

void WindFieldGalleryChallengeInfoNotify::MergeFrom(const WindFieldGalleryChallengeInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.WindFieldGalleryChallengeInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_ball_cur_count() != 0) {
    set_challenge_ball_cur_count(from.challenge_ball_cur_count());
  }
  if (from.challenge_timestamp() != 0) {
    set_challenge_timestamp(from.challenge_timestamp());
  }
  if (from.is_start() != 0) {
    set_is_start(from.is_start());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.challenge_ball_max_count() != 0) {
    set_challenge_ball_max_count(from.challenge_ball_max_count());
  }
  if (from.show_id() != 0) {
    set_show_id(from.show_id());
  }
  if (from.challenge_total_time() != 0) {
    set_challenge_total_time(from.challenge_total_time());
  }
}

void WindFieldGalleryChallengeInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.WindFieldGalleryChallengeInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindFieldGalleryChallengeInfoNotify::CopyFrom(const WindFieldGalleryChallengeInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WindFieldGalleryChallengeInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindFieldGalleryChallengeInfoNotify::IsInitialized() const {
  return true;
}

void WindFieldGalleryChallengeInfoNotify::Swap(WindFieldGalleryChallengeInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindFieldGalleryChallengeInfoNotify::InternalSwap(WindFieldGalleryChallengeInfoNotify* other) {
  using std::swap;
  swap(challenge_ball_cur_count_, other->challenge_ball_cur_count_);
  swap(challenge_timestamp_, other->challenge_timestamp_);
  swap(is_start_, other->is_start_);
  swap(is_success_, other->is_success_);
  swap(challenge_ball_max_count_, other->challenge_ball_max_count_);
  swap(show_id_, other->show_id_);
  swap(challenge_total_time_, other->challenge_total_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindFieldGalleryChallengeInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindFieldGalleryChallengeInfoNotify

// uint32 challenge_timestamp = 6;
void WindFieldGalleryChallengeInfoNotify::clear_challenge_timestamp() {
  challenge_timestamp_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryChallengeInfoNotify::challenge_timestamp() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryChallengeInfoNotify.challenge_timestamp)
  return challenge_timestamp_;
}
void WindFieldGalleryChallengeInfoNotify::set_challenge_timestamp(::google::protobuf::uint32 value) {
  
  challenge_timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryChallengeInfoNotify.challenge_timestamp)
}

// bool is_start = 8;
void WindFieldGalleryChallengeInfoNotify::clear_is_start() {
  is_start_ = false;
}
bool WindFieldGalleryChallengeInfoNotify::is_start() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryChallengeInfoNotify.is_start)
  return is_start_;
}
void WindFieldGalleryChallengeInfoNotify::set_is_start(bool value) {
  
  is_start_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryChallengeInfoNotify.is_start)
}

// uint32 show_id = 12;
void WindFieldGalleryChallengeInfoNotify::clear_show_id() {
  show_id_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryChallengeInfoNotify::show_id() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryChallengeInfoNotify.show_id)
  return show_id_;
}
void WindFieldGalleryChallengeInfoNotify::set_show_id(::google::protobuf::uint32 value) {
  
  show_id_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryChallengeInfoNotify.show_id)
}

// bool is_success = 7;
void WindFieldGalleryChallengeInfoNotify::clear_is_success() {
  is_success_ = false;
}
bool WindFieldGalleryChallengeInfoNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryChallengeInfoNotify.is_success)
  return is_success_;
}
void WindFieldGalleryChallengeInfoNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryChallengeInfoNotify.is_success)
}

// uint32 challenge_total_time = 13;
void WindFieldGalleryChallengeInfoNotify::clear_challenge_total_time() {
  challenge_total_time_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryChallengeInfoNotify::challenge_total_time() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryChallengeInfoNotify.challenge_total_time)
  return challenge_total_time_;
}
void WindFieldGalleryChallengeInfoNotify::set_challenge_total_time(::google::protobuf::uint32 value) {
  
  challenge_total_time_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryChallengeInfoNotify.challenge_total_time)
}

// uint32 challenge_ball_max_count = 11;
void WindFieldGalleryChallengeInfoNotify::clear_challenge_ball_max_count() {
  challenge_ball_max_count_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryChallengeInfoNotify::challenge_ball_max_count() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryChallengeInfoNotify.challenge_ball_max_count)
  return challenge_ball_max_count_;
}
void WindFieldGalleryChallengeInfoNotify::set_challenge_ball_max_count(::google::protobuf::uint32 value) {
  
  challenge_ball_max_count_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryChallengeInfoNotify.challenge_ball_max_count)
}

// uint32 challenge_ball_cur_count = 1;
void WindFieldGalleryChallengeInfoNotify::clear_challenge_ball_cur_count() {
  challenge_ball_cur_count_ = 0u;
}
::google::protobuf::uint32 WindFieldGalleryChallengeInfoNotify::challenge_ball_cur_count() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldGalleryChallengeInfoNotify.challenge_ball_cur_count)
  return challenge_ball_cur_count_;
}
void WindFieldGalleryChallengeInfoNotify::set_challenge_ball_cur_count(::google::protobuf::uint32 value) {
  
  challenge_ball_cur_count_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldGalleryChallengeInfoNotify.challenge_ball_cur_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FungusFighterTrainingInfoNotify::kBuffStartTimeFieldNumber;
const int FungusFighterTrainingInfoNotify::kMaxSkillCountFieldNumber;
const int FungusFighterTrainingInfoNotify::kMaxMonsterCountFieldNumber;
const int FungusFighterTrainingInfoNotify::kBuffIdFieldNumber;
const int FungusFighterTrainingInfoNotify::kBuffLastTimeFieldNumber;
const int FungusFighterTrainingInfoNotify::kRestSkillCountFieldNumber;
const int FungusFighterTrainingInfoNotify::kKilledMonsterCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FungusFighterTrainingInfoNotify::FungusFighterTrainingInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FungusFighterTrainingInfoNotify)
}
FungusFighterTrainingInfoNotify::FungusFighterTrainingInfoNotify(const FungusFighterTrainingInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&buff_start_time_, &from.buff_start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&buff_id_) -
    reinterpret_cast<char*>(&buff_start_time_)) + sizeof(buff_id_));
  // @@protoc_insertion_point(copy_constructor:proto.FungusFighterTrainingInfoNotify)
}

void FungusFighterTrainingInfoNotify::SharedCtor() {
  ::memset(&buff_start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buff_id_) -
      reinterpret_cast<char*>(&buff_start_time_)) + sizeof(buff_id_));
  _cached_size_ = 0;
}

FungusFighterTrainingInfoNotify::~FungusFighterTrainingInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.FungusFighterTrainingInfoNotify)
  SharedDtor();
}

void FungusFighterTrainingInfoNotify::SharedDtor() {
}

void FungusFighterTrainingInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FungusFighterTrainingInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FungusFighterTrainingInfoNotify& FungusFighterTrainingInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FungusFighterTrainingInfoNotify* FungusFighterTrainingInfoNotify::New(::google::protobuf::Arena* arena) const {
  FungusFighterTrainingInfoNotify* n = new FungusFighterTrainingInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FungusFighterTrainingInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FungusFighterTrainingInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buff_start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buff_id_) -
      reinterpret_cast<char*>(&buff_start_time_)) + sizeof(buff_id_));
  _internal_metadata_.Clear();
}

bool FungusFighterTrainingInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FungusFighterTrainingInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 buff_start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_last_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_last_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 rest_skill_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rest_skill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_skill_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_skill_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_monster_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buff_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 killed_monster_count = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killed_monster_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FungusFighterTrainingInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FungusFighterTrainingInfoNotify)
  return false;
#undef DO_
}

void FungusFighterTrainingInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FungusFighterTrainingInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 buff_start_time = 3;
  if (this->buff_start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buff_start_time(), output);
  }

  // uint32 buff_last_time = 4;
  if (this->buff_last_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buff_last_time(), output);
  }

  // uint32 rest_skill_count = 6;
  if (this->rest_skill_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rest_skill_count(), output);
  }

  // uint32 max_skill_count = 7;
  if (this->max_skill_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->max_skill_count(), output);
  }

  // uint32 max_monster_count = 8;
  if (this->max_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->max_monster_count(), output);
  }

  // uint32 buff_id = 14;
  if (this->buff_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->buff_id(), output);
  }

  // uint32 killed_monster_count = 15;
  if (this->killed_monster_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->killed_monster_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FungusFighterTrainingInfoNotify)
}

::google::protobuf::uint8* FungusFighterTrainingInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FungusFighterTrainingInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 buff_start_time = 3;
  if (this->buff_start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buff_start_time(), target);
  }

  // uint32 buff_last_time = 4;
  if (this->buff_last_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buff_last_time(), target);
  }

  // uint32 rest_skill_count = 6;
  if (this->rest_skill_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rest_skill_count(), target);
  }

  // uint32 max_skill_count = 7;
  if (this->max_skill_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->max_skill_count(), target);
  }

  // uint32 max_monster_count = 8;
  if (this->max_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_monster_count(), target);
  }

  // uint32 buff_id = 14;
  if (this->buff_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->buff_id(), target);
  }

  // uint32 killed_monster_count = 15;
  if (this->killed_monster_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->killed_monster_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FungusFighterTrainingInfoNotify)
  return target;
}

size_t FungusFighterTrainingInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FungusFighterTrainingInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 buff_start_time = 3;
  if (this->buff_start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_start_time());
  }

  // uint32 buff_last_time = 4;
  if (this->buff_last_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_last_time());
  }

  // uint32 rest_skill_count = 6;
  if (this->rest_skill_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->rest_skill_count());
  }

  // uint32 max_skill_count = 7;
  if (this->max_skill_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_skill_count());
  }

  // uint32 killed_monster_count = 15;
  if (this->killed_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->killed_monster_count());
  }

  // uint32 max_monster_count = 8;
  if (this->max_monster_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_monster_count());
  }

  // uint32 buff_id = 14;
  if (this->buff_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buff_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FungusFighterTrainingInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FungusFighterTrainingInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FungusFighterTrainingInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FungusFighterTrainingInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FungusFighterTrainingInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FungusFighterTrainingInfoNotify)
    MergeFrom(*source);
  }
}

void FungusFighterTrainingInfoNotify::MergeFrom(const FungusFighterTrainingInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FungusFighterTrainingInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buff_start_time() != 0) {
    set_buff_start_time(from.buff_start_time());
  }
  if (from.buff_last_time() != 0) {
    set_buff_last_time(from.buff_last_time());
  }
  if (from.rest_skill_count() != 0) {
    set_rest_skill_count(from.rest_skill_count());
  }
  if (from.max_skill_count() != 0) {
    set_max_skill_count(from.max_skill_count());
  }
  if (from.killed_monster_count() != 0) {
    set_killed_monster_count(from.killed_monster_count());
  }
  if (from.max_monster_count() != 0) {
    set_max_monster_count(from.max_monster_count());
  }
  if (from.buff_id() != 0) {
    set_buff_id(from.buff_id());
  }
}

void FungusFighterTrainingInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FungusFighterTrainingInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FungusFighterTrainingInfoNotify::CopyFrom(const FungusFighterTrainingInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FungusFighterTrainingInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FungusFighterTrainingInfoNotify::IsInitialized() const {
  return true;
}

void FungusFighterTrainingInfoNotify::Swap(FungusFighterTrainingInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FungusFighterTrainingInfoNotify::InternalSwap(FungusFighterTrainingInfoNotify* other) {
  using std::swap;
  swap(buff_start_time_, other->buff_start_time_);
  swap(buff_last_time_, other->buff_last_time_);
  swap(rest_skill_count_, other->rest_skill_count_);
  swap(max_skill_count_, other->max_skill_count_);
  swap(killed_monster_count_, other->killed_monster_count_);
  swap(max_monster_count_, other->max_monster_count_);
  swap(buff_id_, other->buff_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FungusFighterTrainingInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FungusFighterTrainingInfoNotify

// uint32 buff_start_time = 3;
void FungusFighterTrainingInfoNotify::clear_buff_start_time() {
  buff_start_time_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingInfoNotify::buff_start_time() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingInfoNotify.buff_start_time)
  return buff_start_time_;
}
void FungusFighterTrainingInfoNotify::set_buff_start_time(::google::protobuf::uint32 value) {
  
  buff_start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingInfoNotify.buff_start_time)
}

// uint32 max_skill_count = 7;
void FungusFighterTrainingInfoNotify::clear_max_skill_count() {
  max_skill_count_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingInfoNotify::max_skill_count() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingInfoNotify.max_skill_count)
  return max_skill_count_;
}
void FungusFighterTrainingInfoNotify::set_max_skill_count(::google::protobuf::uint32 value) {
  
  max_skill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingInfoNotify.max_skill_count)
}

// uint32 max_monster_count = 8;
void FungusFighterTrainingInfoNotify::clear_max_monster_count() {
  max_monster_count_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingInfoNotify::max_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingInfoNotify.max_monster_count)
  return max_monster_count_;
}
void FungusFighterTrainingInfoNotify::set_max_monster_count(::google::protobuf::uint32 value) {
  
  max_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingInfoNotify.max_monster_count)
}

// uint32 buff_id = 14;
void FungusFighterTrainingInfoNotify::clear_buff_id() {
  buff_id_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingInfoNotify::buff_id() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingInfoNotify.buff_id)
  return buff_id_;
}
void FungusFighterTrainingInfoNotify::set_buff_id(::google::protobuf::uint32 value) {
  
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingInfoNotify.buff_id)
}

// uint32 buff_last_time = 4;
void FungusFighterTrainingInfoNotify::clear_buff_last_time() {
  buff_last_time_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingInfoNotify::buff_last_time() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingInfoNotify.buff_last_time)
  return buff_last_time_;
}
void FungusFighterTrainingInfoNotify::set_buff_last_time(::google::protobuf::uint32 value) {
  
  buff_last_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingInfoNotify.buff_last_time)
}

// uint32 rest_skill_count = 6;
void FungusFighterTrainingInfoNotify::clear_rest_skill_count() {
  rest_skill_count_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingInfoNotify::rest_skill_count() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingInfoNotify.rest_skill_count)
  return rest_skill_count_;
}
void FungusFighterTrainingInfoNotify::set_rest_skill_count(::google::protobuf::uint32 value) {
  
  rest_skill_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingInfoNotify.rest_skill_count)
}

// uint32 killed_monster_count = 15;
void FungusFighterTrainingInfoNotify::clear_killed_monster_count() {
  killed_monster_count_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingInfoNotify::killed_monster_count() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingInfoNotify.killed_monster_count)
  return killed_monster_count_;
}
void FungusFighterTrainingInfoNotify::set_killed_monster_count(::google::protobuf::uint32 value) {
  
  killed_monster_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingInfoNotify.killed_monster_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FungusFighterTrainingSettleInfo::kUsedTimeFieldNumber;
const int FungusFighterTrainingSettleInfo::kReasonFieldNumber;
const int FungusFighterTrainingSettleInfo::kTransactionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FungusFighterTrainingSettleInfo::FungusFighterTrainingSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FungusFighterTrainingSettleInfo)
}
FungusFighterTrainingSettleInfo::FungusFighterTrainingSettleInfo(const FungusFighterTrainingSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction().size() > 0) {
    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&used_time_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(used_time_));
  // @@protoc_insertion_point(copy_constructor:proto.FungusFighterTrainingSettleInfo)
}

void FungusFighterTrainingSettleInfo::SharedCtor() {
  transaction_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_time_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(used_time_));
  _cached_size_ = 0;
}

FungusFighterTrainingSettleInfo::~FungusFighterTrainingSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.FungusFighterTrainingSettleInfo)
  SharedDtor();
}

void FungusFighterTrainingSettleInfo::SharedDtor() {
  transaction_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FungusFighterTrainingSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FungusFighterTrainingSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FungusFighterTrainingSettleInfo& FungusFighterTrainingSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FungusFighterTrainingSettleInfo* FungusFighterTrainingSettleInfo::New(::google::protobuf::Arena* arena) const {
  FungusFighterTrainingSettleInfo* n = new FungusFighterTrainingSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FungusFighterTrainingSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FungusFighterTrainingSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&used_time_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(used_time_));
  _internal_metadata_.Clear();
}

bool FungusFighterTrainingSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FungusFighterTrainingSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string transaction = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transaction()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->transaction().data(), static_cast<int>(this->transaction().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.FungusFighterTrainingSettleInfo.transaction"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.GalleryStopReason reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::GalleryStopReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 used_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FungusFighterTrainingSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FungusFighterTrainingSettleInfo)
  return false;
#undef DO_
}

void FungusFighterTrainingSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FungusFighterTrainingSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction = 1;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transaction().data(), static_cast<int>(this->transaction().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FungusFighterTrainingSettleInfo.transaction");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->transaction(), output);
  }

  // .proto.GalleryStopReason reason = 3;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reason(), output);
  }

  // uint32 used_time = 15;
  if (this->used_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->used_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FungusFighterTrainingSettleInfo)
}

::google::protobuf::uint8* FungusFighterTrainingSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FungusFighterTrainingSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction = 1;
  if (this->transaction().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->transaction().data(), static_cast<int>(this->transaction().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FungusFighterTrainingSettleInfo.transaction");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->transaction(), target);
  }

  // .proto.GalleryStopReason reason = 3;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reason(), target);
  }

  // uint32 used_time = 15;
  if (this->used_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->used_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FungusFighterTrainingSettleInfo)
  return target;
}

size_t FungusFighterTrainingSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FungusFighterTrainingSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string transaction = 1;
  if (this->transaction().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->transaction());
  }

  // .proto.GalleryStopReason reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 used_time = 15;
  if (this->used_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->used_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FungusFighterTrainingSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FungusFighterTrainingSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FungusFighterTrainingSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FungusFighterTrainingSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FungusFighterTrainingSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FungusFighterTrainingSettleInfo)
    MergeFrom(*source);
  }
}

void FungusFighterTrainingSettleInfo::MergeFrom(const FungusFighterTrainingSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FungusFighterTrainingSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction().size() > 0) {

    transaction_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_);
  }
  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.used_time() != 0) {
    set_used_time(from.used_time());
  }
}

void FungusFighterTrainingSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FungusFighterTrainingSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FungusFighterTrainingSettleInfo::CopyFrom(const FungusFighterTrainingSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FungusFighterTrainingSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FungusFighterTrainingSettleInfo::IsInitialized() const {
  return true;
}

void FungusFighterTrainingSettleInfo::Swap(FungusFighterTrainingSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FungusFighterTrainingSettleInfo::InternalSwap(FungusFighterTrainingSettleInfo* other) {
  using std::swap;
  transaction_.Swap(&other->transaction_);
  swap(reason_, other->reason_);
  swap(used_time_, other->used_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FungusFighterTrainingSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FungusFighterTrainingSettleInfo

// uint32 used_time = 15;
void FungusFighterTrainingSettleInfo::clear_used_time() {
  used_time_ = 0u;
}
::google::protobuf::uint32 FungusFighterTrainingSettleInfo::used_time() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingSettleInfo.used_time)
  return used_time_;
}
void FungusFighterTrainingSettleInfo::set_used_time(::google::protobuf::uint32 value) {
  
  used_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingSettleInfo.used_time)
}

// .proto.GalleryStopReason reason = 3;
void FungusFighterTrainingSettleInfo::clear_reason() {
  reason_ = 0;
}
::proto::GalleryStopReason FungusFighterTrainingSettleInfo::reason() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingSettleInfo.reason)
  return static_cast< ::proto::GalleryStopReason >(reason_);
}
void FungusFighterTrainingSettleInfo::set_reason(::proto::GalleryStopReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingSettleInfo.reason)
}

// string transaction = 1;
void FungusFighterTrainingSettleInfo::clear_transaction() {
  transaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FungusFighterTrainingSettleInfo::transaction() const {
  // @@protoc_insertion_point(field_get:proto.FungusFighterTrainingSettleInfo.transaction)
  return transaction_.GetNoArena();
}
void FungusFighterTrainingSettleInfo::set_transaction(const ::std::string& value) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FungusFighterTrainingSettleInfo.transaction)
}
#if LANG_CXX11
void FungusFighterTrainingSettleInfo::set_transaction(::std::string&& value) {
  
  transaction_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FungusFighterTrainingSettleInfo.transaction)
}
#endif
void FungusFighterTrainingSettleInfo::set_transaction(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FungusFighterTrainingSettleInfo.transaction)
}
void FungusFighterTrainingSettleInfo::set_transaction(const char* value, size_t size) {
  
  transaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FungusFighterTrainingSettleInfo.transaction)
}
::std::string* FungusFighterTrainingSettleInfo::mutable_transaction() {
  
  // @@protoc_insertion_point(field_mutable:proto.FungusFighterTrainingSettleInfo.transaction)
  return transaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FungusFighterTrainingSettleInfo::release_transaction() {
  // @@protoc_insertion_point(field_release:proto.FungusFighterTrainingSettleInfo.transaction)
  
  return transaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FungusFighterTrainingSettleInfo::set_allocated_transaction(::std::string* transaction) {
  if (transaction != NULL) {
    
  } else {
    
  }
  transaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), transaction);
  // @@protoc_insertion_point(field_set_allocated:proto.FungusFighterTrainingSettleInfo.transaction)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FungusCaptureSettleNotify::kIsSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FungusCaptureSettleNotify::FungusCaptureSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FungusCaptureSettleNotify)
}
FungusCaptureSettleNotify::FungusCaptureSettleNotify(const FungusCaptureSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_success_ = from.is_success_;
  // @@protoc_insertion_point(copy_constructor:proto.FungusCaptureSettleNotify)
}

void FungusCaptureSettleNotify::SharedCtor() {
  is_success_ = false;
  _cached_size_ = 0;
}

FungusCaptureSettleNotify::~FungusCaptureSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.FungusCaptureSettleNotify)
  SharedDtor();
}

void FungusCaptureSettleNotify::SharedDtor() {
}

void FungusCaptureSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FungusCaptureSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FungusCaptureSettleNotify& FungusCaptureSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

FungusCaptureSettleNotify* FungusCaptureSettleNotify::New(::google::protobuf::Arena* arena) const {
  FungusCaptureSettleNotify* n = new FungusCaptureSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FungusCaptureSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FungusCaptureSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_success_ = false;
  _internal_metadata_.Clear();
}

bool FungusCaptureSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FungusCaptureSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FungusCaptureSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FungusCaptureSettleNotify)
  return false;
#undef DO_
}

void FungusCaptureSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FungusCaptureSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 2;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_success(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.FungusCaptureSettleNotify)
}

::google::protobuf::uint8* FungusCaptureSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.FungusCaptureSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 2;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_success(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.FungusCaptureSettleNotify)
  return target;
}

size_t FungusCaptureSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FungusCaptureSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_success = 2;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FungusCaptureSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.FungusCaptureSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const FungusCaptureSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FungusCaptureSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.FungusCaptureSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.FungusCaptureSettleNotify)
    MergeFrom(*source);
  }
}

void FungusCaptureSettleNotify::MergeFrom(const FungusCaptureSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FungusCaptureSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
}

void FungusCaptureSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.FungusCaptureSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FungusCaptureSettleNotify::CopyFrom(const FungusCaptureSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FungusCaptureSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FungusCaptureSettleNotify::IsInitialized() const {
  return true;
}

void FungusCaptureSettleNotify::Swap(FungusCaptureSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FungusCaptureSettleNotify::InternalSwap(FungusCaptureSettleNotify* other) {
  using std::swap;
  swap(is_success_, other->is_success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FungusCaptureSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FungusCaptureSettleNotify

// bool is_success = 2;
void FungusCaptureSettleNotify::clear_is_success() {
  is_success_ = false;
}
bool FungusCaptureSettleNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.FungusCaptureSettleNotify.is_success)
  return is_success_;
}
void FungusCaptureSettleNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.FungusCaptureSettleNotify.is_success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HideAndSeekPlayerCapturedNotify::kGhostSkillIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HideAndSeekPlayerCapturedNotify::HideAndSeekPlayerCapturedNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HideAndSeekPlayerCapturedNotify)
}
HideAndSeekPlayerCapturedNotify::HideAndSeekPlayerCapturedNotify(const HideAndSeekPlayerCapturedNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ghost_skill_id_ = from.ghost_skill_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HideAndSeekPlayerCapturedNotify)
}

void HideAndSeekPlayerCapturedNotify::SharedCtor() {
  ghost_skill_id_ = 0u;
  _cached_size_ = 0;
}

HideAndSeekPlayerCapturedNotify::~HideAndSeekPlayerCapturedNotify() {
  // @@protoc_insertion_point(destructor:proto.HideAndSeekPlayerCapturedNotify)
  SharedDtor();
}

void HideAndSeekPlayerCapturedNotify::SharedDtor() {
}

void HideAndSeekPlayerCapturedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HideAndSeekPlayerCapturedNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HideAndSeekPlayerCapturedNotify& HideAndSeekPlayerCapturedNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

HideAndSeekPlayerCapturedNotify* HideAndSeekPlayerCapturedNotify::New(::google::protobuf::Arena* arena) const {
  HideAndSeekPlayerCapturedNotify* n = new HideAndSeekPlayerCapturedNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HideAndSeekPlayerCapturedNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HideAndSeekPlayerCapturedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ghost_skill_id_ = 0u;
  _internal_metadata_.Clear();
}

bool HideAndSeekPlayerCapturedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HideAndSeekPlayerCapturedNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 ghost_skill_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ghost_skill_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HideAndSeekPlayerCapturedNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HideAndSeekPlayerCapturedNotify)
  return false;
#undef DO_
}

void HideAndSeekPlayerCapturedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HideAndSeekPlayerCapturedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ghost_skill_id = 12;
  if (this->ghost_skill_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ghost_skill_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HideAndSeekPlayerCapturedNotify)
}

::google::protobuf::uint8* HideAndSeekPlayerCapturedNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HideAndSeekPlayerCapturedNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ghost_skill_id = 12;
  if (this->ghost_skill_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ghost_skill_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HideAndSeekPlayerCapturedNotify)
  return target;
}

size_t HideAndSeekPlayerCapturedNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HideAndSeekPlayerCapturedNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 ghost_skill_id = 12;
  if (this->ghost_skill_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ghost_skill_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HideAndSeekPlayerCapturedNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HideAndSeekPlayerCapturedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HideAndSeekPlayerCapturedNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HideAndSeekPlayerCapturedNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HideAndSeekPlayerCapturedNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HideAndSeekPlayerCapturedNotify)
    MergeFrom(*source);
  }
}

void HideAndSeekPlayerCapturedNotify::MergeFrom(const HideAndSeekPlayerCapturedNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HideAndSeekPlayerCapturedNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ghost_skill_id() != 0) {
    set_ghost_skill_id(from.ghost_skill_id());
  }
}

void HideAndSeekPlayerCapturedNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HideAndSeekPlayerCapturedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HideAndSeekPlayerCapturedNotify::CopyFrom(const HideAndSeekPlayerCapturedNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HideAndSeekPlayerCapturedNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HideAndSeekPlayerCapturedNotify::IsInitialized() const {
  return true;
}

void HideAndSeekPlayerCapturedNotify::Swap(HideAndSeekPlayerCapturedNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HideAndSeekPlayerCapturedNotify::InternalSwap(HideAndSeekPlayerCapturedNotify* other) {
  using std::swap;
  swap(ghost_skill_id_, other->ghost_skill_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HideAndSeekPlayerCapturedNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HideAndSeekPlayerCapturedNotify

// uint32 ghost_skill_id = 12;
void HideAndSeekPlayerCapturedNotify::clear_ghost_skill_id() {
  ghost_skill_id_ = 0u;
}
::google::protobuf::uint32 HideAndSeekPlayerCapturedNotify::ghost_skill_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerCapturedNotify.ghost_skill_id)
  return ghost_skill_id_;
}
void HideAndSeekPlayerCapturedNotify::set_ghost_skill_id(::google::protobuf::uint32 value) {
  
  ghost_skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerCapturedNotify.ghost_skill_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CoinCollectGallerySettleNotify::kCoinCollectNumFieldNumber;
const int CoinCollectGallerySettleNotify::kCoinTotalNumFieldNumber;
const int CoinCollectGallerySettleNotify::kLevelIdFieldNumber;
const int CoinCollectGallerySettleNotify::kCoinCollectTimeFieldNumber;
const int CoinCollectGallerySettleNotify::kMultistagePlayIndexFieldNumber;
const int CoinCollectGallerySettleNotify::kIsNewRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CoinCollectGallerySettleNotify::CoinCollectGallerySettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CoinCollectGallerySettleNotify)
}
CoinCollectGallerySettleNotify::CoinCollectGallerySettleNotify(const CoinCollectGallerySettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&coin_collect_time_, &from.coin_collect_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&coin_collect_num_) -
    reinterpret_cast<char*>(&coin_collect_time_)) + sizeof(coin_collect_num_));
  // @@protoc_insertion_point(copy_constructor:proto.CoinCollectGallerySettleNotify)
}

void CoinCollectGallerySettleNotify::SharedCtor() {
  ::memset(&coin_collect_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_collect_num_) -
      reinterpret_cast<char*>(&coin_collect_time_)) + sizeof(coin_collect_num_));
  _cached_size_ = 0;
}

CoinCollectGallerySettleNotify::~CoinCollectGallerySettleNotify() {
  // @@protoc_insertion_point(destructor:proto.CoinCollectGallerySettleNotify)
  SharedDtor();
}

void CoinCollectGallerySettleNotify::SharedDtor() {
}

void CoinCollectGallerySettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CoinCollectGallerySettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CoinCollectGallerySettleNotify& CoinCollectGallerySettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fgallery_2eproto::InitDefaults();
  return *internal_default_instance();
}

CoinCollectGallerySettleNotify* CoinCollectGallerySettleNotify::New(::google::protobuf::Arena* arena) const {
  CoinCollectGallerySettleNotify* n = new CoinCollectGallerySettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CoinCollectGallerySettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CoinCollectGallerySettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&coin_collect_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coin_collect_num_) -
      reinterpret_cast<char*>(&coin_collect_time_)) + sizeof(coin_collect_num_));
  _internal_metadata_.Clear();
}

bool CoinCollectGallerySettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CoinCollectGallerySettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 coin_collect_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_collect_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 multistage_play_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multistage_play_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin_total_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_total_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 coin_collect_num = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_collect_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CoinCollectGallerySettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CoinCollectGallerySettleNotify)
  return false;
#undef DO_
}

void CoinCollectGallerySettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CoinCollectGallerySettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 coin_collect_time = 4;
  if (this->coin_collect_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin_collect_time(), output);
  }

  // uint32 multistage_play_index = 6;
  if (this->multistage_play_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->multistage_play_index(), output);
  }

  // uint32 coin_total_num = 7;
  if (this->coin_total_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->coin_total_num(), output);
  }

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->level_id(), output);
  }

  // bool is_new_record = 10;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_new_record(), output);
  }

  // uint32 coin_collect_num = 11;
  if (this->coin_collect_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->coin_collect_num(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CoinCollectGallerySettleNotify)
}

::google::protobuf::uint8* CoinCollectGallerySettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CoinCollectGallerySettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 coin_collect_time = 4;
  if (this->coin_collect_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->coin_collect_time(), target);
  }

  // uint32 multistage_play_index = 6;
  if (this->multistage_play_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->multistage_play_index(), target);
  }

  // uint32 coin_total_num = 7;
  if (this->coin_total_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->coin_total_num(), target);
  }

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->level_id(), target);
  }

  // bool is_new_record = 10;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_new_record(), target);
  }

  // uint32 coin_collect_num = 11;
  if (this->coin_collect_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->coin_collect_num(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CoinCollectGallerySettleNotify)
  return target;
}

size_t CoinCollectGallerySettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CoinCollectGallerySettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 coin_collect_time = 4;
  if (this->coin_collect_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_collect_time());
  }

  // uint32 multistage_play_index = 6;
  if (this->multistage_play_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->multistage_play_index());
  }

  // uint32 coin_total_num = 7;
  if (this->coin_total_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_total_num());
  }

  // uint32 level_id = 9;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // bool is_new_record = 10;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  // uint32 coin_collect_num = 11;
  if (this->coin_collect_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->coin_collect_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CoinCollectGallerySettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CoinCollectGallerySettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const CoinCollectGallerySettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CoinCollectGallerySettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CoinCollectGallerySettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CoinCollectGallerySettleNotify)
    MergeFrom(*source);
  }
}

void CoinCollectGallerySettleNotify::MergeFrom(const CoinCollectGallerySettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CoinCollectGallerySettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.coin_collect_time() != 0) {
    set_coin_collect_time(from.coin_collect_time());
  }
  if (from.multistage_play_index() != 0) {
    set_multistage_play_index(from.multistage_play_index());
  }
  if (from.coin_total_num() != 0) {
    set_coin_total_num(from.coin_total_num());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
  if (from.coin_collect_num() != 0) {
    set_coin_collect_num(from.coin_collect_num());
  }
}

void CoinCollectGallerySettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CoinCollectGallerySettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CoinCollectGallerySettleNotify::CopyFrom(const CoinCollectGallerySettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CoinCollectGallerySettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoinCollectGallerySettleNotify::IsInitialized() const {
  return true;
}

void CoinCollectGallerySettleNotify::Swap(CoinCollectGallerySettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CoinCollectGallerySettleNotify::InternalSwap(CoinCollectGallerySettleNotify* other) {
  using std::swap;
  swap(coin_collect_time_, other->coin_collect_time_);
  swap(multistage_play_index_, other->multistage_play_index_);
  swap(coin_total_num_, other->coin_total_num_);
  swap(level_id_, other->level_id_);
  swap(is_new_record_, other->is_new_record_);
  swap(coin_collect_num_, other->coin_collect_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CoinCollectGallerySettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fgallery_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fgallery_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CoinCollectGallerySettleNotify

// uint32 coin_collect_num = 11;
void CoinCollectGallerySettleNotify::clear_coin_collect_num() {
  coin_collect_num_ = 0u;
}
::google::protobuf::uint32 CoinCollectGallerySettleNotify::coin_collect_num() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectGallerySettleNotify.coin_collect_num)
  return coin_collect_num_;
}
void CoinCollectGallerySettleNotify::set_coin_collect_num(::google::protobuf::uint32 value) {
  
  coin_collect_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectGallerySettleNotify.coin_collect_num)
}

// uint32 coin_total_num = 7;
void CoinCollectGallerySettleNotify::clear_coin_total_num() {
  coin_total_num_ = 0u;
}
::google::protobuf::uint32 CoinCollectGallerySettleNotify::coin_total_num() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectGallerySettleNotify.coin_total_num)
  return coin_total_num_;
}
void CoinCollectGallerySettleNotify::set_coin_total_num(::google::protobuf::uint32 value) {
  
  coin_total_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectGallerySettleNotify.coin_total_num)
}

// uint32 level_id = 9;
void CoinCollectGallerySettleNotify::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 CoinCollectGallerySettleNotify::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectGallerySettleNotify.level_id)
  return level_id_;
}
void CoinCollectGallerySettleNotify::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectGallerySettleNotify.level_id)
}

// uint32 coin_collect_time = 4;
void CoinCollectGallerySettleNotify::clear_coin_collect_time() {
  coin_collect_time_ = 0u;
}
::google::protobuf::uint32 CoinCollectGallerySettleNotify::coin_collect_time() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectGallerySettleNotify.coin_collect_time)
  return coin_collect_time_;
}
void CoinCollectGallerySettleNotify::set_coin_collect_time(::google::protobuf::uint32 value) {
  
  coin_collect_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectGallerySettleNotify.coin_collect_time)
}

// uint32 multistage_play_index = 6;
void CoinCollectGallerySettleNotify::clear_multistage_play_index() {
  multistage_play_index_ = 0u;
}
::google::protobuf::uint32 CoinCollectGallerySettleNotify::multistage_play_index() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectGallerySettleNotify.multistage_play_index)
  return multistage_play_index_;
}
void CoinCollectGallerySettleNotify::set_multistage_play_index(::google::protobuf::uint32 value) {
  
  multistage_play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectGallerySettleNotify.multistage_play_index)
}

// bool is_new_record = 10;
void CoinCollectGallerySettleNotify::clear_is_new_record() {
  is_new_record_ = false;
}
bool CoinCollectGallerySettleNotify::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectGallerySettleNotify.is_new_record)
  return is_new_record_;
}
void CoinCollectGallerySettleNotify::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectGallerySettleNotify.is_new_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
