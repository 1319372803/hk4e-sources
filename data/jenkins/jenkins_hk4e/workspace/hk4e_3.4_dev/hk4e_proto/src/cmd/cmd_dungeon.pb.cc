// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_dungeon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_dungeon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class DungeonEntryInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEntryInfoReq>
     _instance;
} _DungeonEntryInfoReq_default_instance_;
class DungeonEntryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEntryInfo>
     _instance;
} _DungeonEntryInfo_default_instance_;
class DungeonEntryPointInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEntryPointInfo>
     _instance;
} _DungeonEntryPointInfo_default_instance_;
class DungeonEntryInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEntryInfoRsp>
     _instance;
} _DungeonEntryInfoRsp_default_instance_;
class DungeonEnterPosInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonEnterPosInfo>
     _instance;
} _DungeonEnterPosInfo_default_instance_;
class PlayerEnterDungeonReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterDungeonReq>
     _instance;
} _PlayerEnterDungeonReq_default_instance_;
class PlayerEnterDungeonRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerEnterDungeonRsp>
     _instance;
} _PlayerEnterDungeonRsp_default_instance_;
class PlayerQuitDungeonReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuitDungeonReq>
     _instance;
} _PlayerQuitDungeonReq_default_instance_;
class PlayerQuitDungeonRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PlayerQuitDungeonRsp>
     _instance;
} _PlayerQuitDungeonRsp_default_instance_;
class DungeonWayPointNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonWayPointNotify>
     _instance;
} _DungeonWayPointNotify_default_instance_;
class DungeonWayPointActivateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonWayPointActivateReq>
     _instance;
} _DungeonWayPointActivateReq_default_instance_;
class DungeonWayPointActivateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonWayPointActivateRsp>
     _instance;
} _DungeonWayPointActivateRsp_default_instance_;
class StrengthenPointDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StrengthenPointData>
     _instance;
} _StrengthenPointData_default_instance_;
class DungeonSettleExhibitionInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSettleExhibitionInfo>
     _instance;
} _DungeonSettleExhibitionInfo_default_instance_;
class CrystalLinkDungeonSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CrystalLinkDungeonSettleInfo>
     _instance;
} _CrystalLinkDungeonSettleInfo_default_instance_;
class SummerTimeV2DungeonSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SummerTimeV2DungeonSettleInfo>
     _instance;
} _SummerTimeV2DungeonSettleInfo_default_instance_;
class InstableSprayDungeonSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InstableSprayDungeonSettleInfo>
     _instance;
} _InstableSprayDungeonSettleInfo_default_instance_;
class WindFieldDungeonSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WindFieldDungeonSettleInfo>
     _instance;
} _WindFieldDungeonSettleInfo_default_instance_;
class EffigyChallengeV2SettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EffigyChallengeV2SettleInfo>
     _instance;
} _EffigyChallengeV2SettleInfo_default_instance_;
class TeamChainSettleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TeamChainSettleInfo>
     _instance;
} _TeamChainSettleInfo_default_instance_;
class DungeonSettleNotify_StrengthenPointDataMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSettleNotify::DungeonSettleNotify_StrengthenPointDataMapEntry>
     _instance;
} _DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_;
class DungeonSettleNotify_SettleShowEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry>
     _instance;
} _DungeonSettleNotify_SettleShowEntry_default_instance_;
class DungeonSettleNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSettleNotify>
     _instance;
  const ::proto::TowerLevelEndNotify* tower_level_end_notify_;
  const ::proto::TrialAvatarFirstPassDungeonNotify* trial_avatar_first_pass_dungeon_notify_;
  const ::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info_;
  const ::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info_;
  const ::proto::RoguelikeDungeonSettleInfo* roguelike_dungeon_settle_info_;
  const ::proto::CrystalLinkDungeonSettleInfo* crystal_link_settle_info_;
  const ::proto::SummerTimeV2DungeonSettleInfo* summer_time_v2_dungeon_settle_info_;
  const ::proto::InstableSprayDungeonSettleInfo* instable_spray_settle_info_;
  const ::proto::WindFieldDungeonSettleInfo* wind_field_dungeon_settle_info_;
  const ::proto::EffigyChallengeV2SettleInfo* effigy_challenge_v2_settle_info_;
  const ::proto::TeamChainSettleInfo* team_chain_settle_info_;
} _DungeonSettleNotify_default_instance_;
class DungeonPlayerDieNotify_StrengthenPointDataMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonPlayerDieNotify::DungeonPlayerDieNotify_StrengthenPointDataMapEntry>
     _instance;
} _DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_;
class DungeonPlayerDieNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonPlayerDieNotify>
     _instance;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 gadget_id_;
} _DungeonPlayerDieNotify_default_instance_;
class DungeonDieOptionReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDieOptionReq>
     _instance;
} _DungeonDieOptionReq_default_instance_;
class DungeonDieOptionRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDieOptionRsp>
     _instance;
} _DungeonDieOptionRsp_default_instance_;
class DungeonShowReminderNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonShowReminderNotify>
     _instance;
} _DungeonShowReminderNotify_default_instance_;
class DungeonPlayerDieReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonPlayerDieReq>
     _instance;
} _DungeonPlayerDieReq_default_instance_;
class DungeonPlayerDieRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonPlayerDieRsp>
     _instance;
} _DungeonPlayerDieRsp_default_instance_;
class DungeonDataNotify_DungeonDataMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry>
     _instance;
} _DungeonDataNotify_DungeonDataMapEntry_default_instance_;
class DungeonDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonDataNotify>
     _instance;
} _DungeonDataNotify_default_instance_;
class DungeonChallengeBeginNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonChallengeBeginNotify>
     _instance;
} _DungeonChallengeBeginNotify_default_instance_;
class ChallengeBriefDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChallengeBrief>
     _instance;
} _ChallengeBrief_default_instance_;
class CustomDungeonResultInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CustomDungeonResultInfo>
     _instance;
} _CustomDungeonResultInfo_default_instance_;
class DungeonChallengeFinishNotify_StrengthenPointDataMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonChallengeFinishNotify::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry>
     _instance;
} _DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_;
class DungeonChallengeFinishNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonChallengeFinishNotify>
     _instance;
  const ::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info_;
  const ::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info_;
  const ::proto::PotionDungeonResultInfo* potion_dungeon_result_info_;
  const ::proto::CustomDungeonResultInfo* custom_dungeon_result_info_;
} _DungeonChallengeFinishNotify_default_instance_;
class ChallengeDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChallengeDataNotify>
     _instance;
} _ChallengeDataNotify_default_instance_;
class DungeonFollowNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonFollowNotify>
     _instance;
} _DungeonFollowNotify_default_instance_;
class DungeonGetStatueDropReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonGetStatueDropReq>
     _instance;
} _DungeonGetStatueDropReq_default_instance_;
class DungeonGetStatueDropRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonGetStatueDropRsp>
     _instance;
} _DungeonGetStatueDropRsp_default_instance_;
class ChallengeRecordDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChallengeRecord>
     _instance;
} _ChallengeRecord_default_instance_;
class ChallengeRecordNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ChallengeRecordNotify>
     _instance;
} _ChallengeRecordNotify_default_instance_;
class DungeonCandidateTeamAvatarDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamAvatar>
     _instance;
} _DungeonCandidateTeamAvatar_default_instance_;
class DungeonCandidateTeamInfoNotify_PlayerStateMapEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry>
     _instance;
} _DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_;
class DungeonCandidateTeamInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInfoNotify>
     _instance;
} _DungeonCandidateTeamInfoNotify_default_instance_;
class DungeonCandidateTeamInviteNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInviteNotify>
     _instance;
} _DungeonCandidateTeamInviteNotify_default_instance_;
class DungeonCandidateTeamRefuseNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamRefuseNotify>
     _instance;
} _DungeonCandidateTeamRefuseNotify_default_instance_;
class DungeonCandidateTeamPlayerLeaveNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamPlayerLeaveNotify>
     _instance;
} _DungeonCandidateTeamPlayerLeaveNotify_default_instance_;
class DungeonCandidateTeamDismissNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamDismissNotify>
     _instance;
} _DungeonCandidateTeamDismissNotify_default_instance_;
class DungeonCandidateTeamCreateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamCreateReq>
     _instance;
} _DungeonCandidateTeamCreateReq_default_instance_;
class DungeonCandidateTeamCreateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamCreateRsp>
     _instance;
} _DungeonCandidateTeamCreateRsp_default_instance_;
class DungeonCandidateTeamInviteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInviteReq>
     _instance;
} _DungeonCandidateTeamInviteReq_default_instance_;
class DungeonCandidateTeamInviteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamInviteRsp>
     _instance;
} _DungeonCandidateTeamInviteRsp_default_instance_;
class DungeonCandidateTeamKickReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamKickReq>
     _instance;
} _DungeonCandidateTeamKickReq_default_instance_;
class DungeonCandidateTeamKickRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamKickRsp>
     _instance;
} _DungeonCandidateTeamKickRsp_default_instance_;
class DungeonCandidateTeamLeaveReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamLeaveReq>
     _instance;
} _DungeonCandidateTeamLeaveReq_default_instance_;
class DungeonCandidateTeamLeaveRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamLeaveRsp>
     _instance;
} _DungeonCandidateTeamLeaveRsp_default_instance_;
class DungeonCandidateTeamReplyInviteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamReplyInviteReq>
     _instance;
} _DungeonCandidateTeamReplyInviteReq_default_instance_;
class DungeonCandidateTeamReplyInviteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamReplyInviteRsp>
     _instance;
} _DungeonCandidateTeamReplyInviteRsp_default_instance_;
class DungeonCandidateTeamSetReadyReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamSetReadyReq>
     _instance;
} _DungeonCandidateTeamSetReadyReq_default_instance_;
class DungeonCandidateTeamSetReadyRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamSetReadyRsp>
     _instance;
} _DungeonCandidateTeamSetReadyRsp_default_instance_;
class DungeonCandidateTeamChangeAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamChangeAvatarReq>
     _instance;
} _DungeonCandidateTeamChangeAvatarReq_default_instance_;
class DungeonCandidateTeamChangeAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamChangeAvatarRsp>
     _instance;
} _DungeonCandidateTeamChangeAvatarRsp_default_instance_;
class DailyDungeonEntryInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DailyDungeonEntryInfo>
     _instance;
} _DailyDungeonEntryInfo_default_instance_;
class GetDailyDungeonEntryInfoReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDailyDungeonEntryInfoReq>
     _instance;
} _GetDailyDungeonEntryInfoReq_default_instance_;
class GetDailyDungeonEntryInfoRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetDailyDungeonEntryInfoRsp>
     _instance;
} _GetDailyDungeonEntryInfoRsp_default_instance_;
class DungeonSlipRevivePointActivateReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSlipRevivePointActivateReq>
     _instance;
} _DungeonSlipRevivePointActivateReq_default_instance_;
class DungeonSlipRevivePointActivateRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonSlipRevivePointActivateRsp>
     _instance;
} _DungeonSlipRevivePointActivateRsp_default_instance_;
class DungeonInterruptChallengeReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonInterruptChallengeReq>
     _instance;
} _DungeonInterruptChallengeReq_default_instance_;
class DungeonInterruptChallengeRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonInterruptChallengeRsp>
     _instance;
} _DungeonInterruptChallengeRsp_default_instance_;
class InteractDailyDungeonInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InteractDailyDungeonInfoNotify>
     _instance;
} _InteractDailyDungeonInfoNotify_default_instance_;
class DungeonRestartReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRestartReq>
     _instance;
} _DungeonRestartReq_default_instance_;
class DungeonRestartRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRestartRsp>
     _instance;
} _DungeonRestartRsp_default_instance_;
class DungeonRestartInviteNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRestartInviteNotify>
     _instance;
} _DungeonRestartInviteNotify_default_instance_;
class DungeonRestartInviteReplyReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRestartInviteReplyReq>
     _instance;
} _DungeonRestartInviteReplyReq_default_instance_;
class DungeonRestartInviteReplyRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRestartInviteReplyRsp>
     _instance;
} _DungeonRestartInviteReplyRsp_default_instance_;
class DungeonRestartInviteReplyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRestartInviteReplyNotify>
     _instance;
} _DungeonRestartInviteReplyNotify_default_instance_;
class DungeonRestartResultNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonRestartResultNotify>
     _instance;
} _DungeonRestartResultNotify_default_instance_;
class DungeonCandidateTeamSetChangingAvatarReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamSetChangingAvatarReq>
     _instance;
} _DungeonCandidateTeamSetChangingAvatarReq_default_instance_;
class DungeonCandidateTeamSetChangingAvatarRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonCandidateTeamSetChangingAvatarRsp>
     _instance;
} _DungeonCandidateTeamSetChangingAvatarRsp_default_instance_;
class MistTrialFloorLevelNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<MistTrialFloorLevelNotify>
     _instance;
} _MistTrialFloorLevelNotify_default_instance_;
class DungeonReviseLevelNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DungeonReviseLevelNotify>
     _instance;
} _DungeonReviseLevelNotify_default_instance_;

namespace protobuf_cmd_2fcmd_5fdungeon_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[83];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoReq, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoReq, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoReq, scene_point_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, boss_chest_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, max_boss_chest_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, next_refresh_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, weekly_boss_resin_discount_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, is_passed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfo, left_times_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryPointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryPointInfo, scene_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryPointInfo, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryPointInfo, dungeon_entry_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryPointInfo, recommend_dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, dungeon_entry_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, dungeon_entry_point_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, recommend_dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEntryInfoRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEnterPosInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEnterPosInfo, quest_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonEnterPosInfo, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonReq, enter_pos_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonReq, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonReq, dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerEnterDungeonRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonReq, is_quit_immediately_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonReq, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonRsp, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerQuitDungeonRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointNotify, is_add_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointNotify, active_way_point_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateReq, way_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonWayPointActivateRsp, way_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenPointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenPointData, base_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrengthenPointData, cur_point_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleExhibitionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleExhibitionInfo, player_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleExhibitionInfo, card_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalLinkDungeonSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalLinkDungeonSettleInfo, kill_elite_monster_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalLinkDungeonSettleInfo, final_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalLinkDungeonSettleInfo, level_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalLinkDungeonSettleInfo, is_new_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalLinkDungeonSettleInfo, difficulty_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalLinkDungeonSettleInfo, kill_normal_mosnter_num_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2DungeonSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2DungeonSettleInfo, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2DungeonSettleInfo, taken_reward_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummerTimeV2DungeonSettleInfo, cur_dungeon_reward_limit_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstableSprayDungeonSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstableSprayDungeonSettleInfo, stage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstableSprayDungeonSettleInfo, score_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstableSprayDungeonSettleInfo, is_new_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstableSprayDungeonSettleInfo, difficulty_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldDungeonSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldDungeonSettleInfo, after_watcher_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldDungeonSettleInfo, before_watcher_id_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WindFieldDungeonSettleInfo, fail_reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffigyChallengeV2SettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffigyChallengeV2SettleInfo, is_challenge_highest_difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffigyChallengeV2SettleInfo, create_dungeon_player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffigyChallengeV2SettleInfo, challenge_mode_difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffigyChallengeV2SettleInfo, is_new_record_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffigyChallengeV2SettleInfo, record_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffigyChallengeV2SettleInfo, first_time_finish_difficulty_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChainSettleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChainSettleInfo, score_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChainSettleInfo, total_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChainSettleInfo, difficulty_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChainSettleInfo, stage_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamChainSettleInfo, is_new_record_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, strengthen_point_data_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, exhibition_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, create_player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, fail_cond_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, use_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, close_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, settle_show_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, tower_level_end_notify_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, trial_avatar_first_pass_dungeon_notify_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, channeller_slab_loop_dungeon_result_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, effigy_challenge_dungeon_result_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, roguelike_dungeon_settle_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, crystal_link_settle_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, summer_time_v2_dungeon_settle_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, instable_spray_settle_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, wind_field_dungeon_settle_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, effigy_challenge_v2_settle_info_),
  offsetof(DungeonSettleNotifyDefaultTypeInternal, team_chain_settle_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSettleNotify, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, strengthen_point_data_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, wait_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, murderer_entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, die_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, revive_count_),
  offsetof(DungeonPlayerDieNotifyDefaultTypeInternal, monster_id_),
  offsetof(DungeonPlayerDieNotifyDefaultTypeInternal, gadget_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieNotify, entity_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionReq, die_option_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionReq, is_quit_immediately_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, revive_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDieOptionRsp, die_option_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonShowReminderNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonShowReminderNotify, reminder_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieReq, die_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieReq, dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonPlayerDieRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonDataNotify, dungeon_data_map_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, father_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeBeginNotify, uid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBrief, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBrief, cur_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBrief, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBrief, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeBrief, challenge_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, is_liked_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, got_coin_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, child_challenge_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, dungeon_guid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, finish_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, time_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, is_arrive_finish_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustomDungeonResultInfo, is_stored_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, strengthen_point_data_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, finish_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, is_new_record_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, challenge_record_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, time_cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, current_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, is_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, challenge_index_),
  offsetof(DungeonChallengeFinishNotifyDefaultTypeInternal, channeller_slab_loop_dungeon_result_info_),
  offsetof(DungeonChallengeFinishNotifyDefaultTypeInternal, effigy_challenge_dungeon_result_info_),
  offsetof(DungeonChallengeFinishNotifyDefaultTypeInternal, potion_dungeon_result_info_),
  offsetof(DungeonChallengeFinishNotifyDefaultTypeInternal, custom_dungeon_result_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonChallengeFinishNotify, detail_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeDataNotify, param_index_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonFollowNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonFollowNotify, target_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGetStatueDropReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGetStatueDropRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonGetStatueDropRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, challenge_record_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, challenge_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecord, best_value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecordNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecordNotify, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeRecordNotify, challenge_record_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamAvatar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamAvatar, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamAvatar, avatar_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, player_state_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, ready_player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, match_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInfoNotify, avatar_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, vaild_deadline_time_sec_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteNotify, dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamRefuseNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamRefuseNotify, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamPlayerLeaveNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamPlayerLeaveNotify, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamPlayerLeaveNotify, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamDismissNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamDismissNotify, reason_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamDismissNotify, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateReq, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateReq, dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamCreateRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteReq, player_uids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamInviteRsp, invalid_player_uids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickReq, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamKickRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamLeaveReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamLeaveRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamLeaveRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteReq, is_accept_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteRsp, is_trans_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamReplyInviteRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyReq, is_ready_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetReadyRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarReq, avatar_guid_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamChangeAvatarRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, dungeon_entry_config_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, dungeon_entry_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, recommend_dungeon_entry_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyDungeonEntryInfo, recommend_dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoReq, scene_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoRsp, daily_dungeon_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetDailyDungeonEntryInfoRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateReq, slip_revive_point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateRsp, slip_revive_point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonSlipRevivePointActivateRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeReq, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeReq, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeReq, challenge_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeRsp, challenge_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeRsp, group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonInterruptChallengeRsp, challenge_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractDailyDungeonInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartRsp, dungeon_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartRsp, point_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteNotify, player_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteNotify, cd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteNotify, point_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteNotify, dungeon_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyReq, is_accept_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyRsp, is_accept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyRsp, is_trans_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyNotify, is_accept_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartInviteReplyNotify, player_uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartResultNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonRestartResultNotify, is_add_accpet_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetChangingAvatarReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetChangingAvatarReq, is_changing_avatar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetChangingAvatarRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonCandidateTeamSetChangingAvatarRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MistTrialFloorLevelNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MistTrialFloorLevelNotify, floor_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MistTrialFloorLevelNotify, dungeon_scene_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonReviseLevelNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonReviseLevelNotify, scene_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonReviseLevelNotify, revise_level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DungeonReviseLevelNotify, dungeon_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(DungeonEntryInfoReq)},
  { 8, -1, sizeof(DungeonEntryInfo)},
  { 22, -1, sizeof(DungeonEntryPointInfo)},
  { 31, -1, sizeof(DungeonEntryInfoRsp)},
  { 41, -1, sizeof(DungeonEnterPosInfo)},
  { 48, -1, sizeof(PlayerEnterDungeonReq)},
  { 56, -1, sizeof(PlayerEnterDungeonRsp)},
  { 64, -1, sizeof(PlayerQuitDungeonReq)},
  { 71, -1, sizeof(PlayerQuitDungeonRsp)},
  { 78, -1, sizeof(DungeonWayPointNotify)},
  { 85, -1, sizeof(DungeonWayPointActivateReq)},
  { 91, -1, sizeof(DungeonWayPointActivateRsp)},
  { 98, -1, sizeof(StrengthenPointData)},
  { 105, -1, sizeof(DungeonSettleExhibitionInfo)},
  { 112, -1, sizeof(CrystalLinkDungeonSettleInfo)},
  { 123, -1, sizeof(SummerTimeV2DungeonSettleInfo)},
  { 131, -1, sizeof(InstableSprayDungeonSettleInfo)},
  { 140, -1, sizeof(WindFieldDungeonSettleInfo)},
  { 148, -1, sizeof(EffigyChallengeV2SettleInfo)},
  { 159, -1, sizeof(TeamChainSettleInfo)},
  { 169, -1, sizeof(DungeonSettleNotify)},
  { 196, -1, sizeof(DungeonPlayerDieNotify)},
  { 210, -1, sizeof(DungeonDieOptionReq)},
  { 217, -1, sizeof(DungeonDieOptionRsp)},
  { 225, -1, sizeof(DungeonShowReminderNotify)},
  { 231, -1, sizeof(DungeonPlayerDieReq)},
  { 238, -1, sizeof(DungeonPlayerDieRsp)},
  { 244, -1, sizeof(DungeonDataNotify)},
  { 250, -1, sizeof(DungeonChallengeBeginNotify)},
  { 261, -1, sizeof(ChallengeBrief)},
  { 270, -1, sizeof(CustomDungeonResultInfo)},
  { 283, -1, sizeof(DungeonChallengeFinishNotify)},
  { 301, -1, sizeof(ChallengeDataNotify)},
  { 309, -1, sizeof(DungeonFollowNotify)},
  { 315, -1, sizeof(DungeonGetStatueDropReq)},
  { 320, -1, sizeof(DungeonGetStatueDropRsp)},
  { 326, -1, sizeof(ChallengeRecord)},
  { 335, -1, sizeof(ChallengeRecordNotify)},
  { 342, -1, sizeof(DungeonCandidateTeamAvatar)},
  { 349, -1, sizeof(DungeonCandidateTeamInfoNotify)},
  { 359, -1, sizeof(DungeonCandidateTeamInviteNotify)},
  { 367, -1, sizeof(DungeonCandidateTeamRefuseNotify)},
  { 373, -1, sizeof(DungeonCandidateTeamPlayerLeaveNotify)},
  { 380, -1, sizeof(DungeonCandidateTeamDismissNotify)},
  { 387, -1, sizeof(DungeonCandidateTeamCreateReq)},
  { 394, -1, sizeof(DungeonCandidateTeamCreateRsp)},
  { 400, -1, sizeof(DungeonCandidateTeamInviteReq)},
  { 406, -1, sizeof(DungeonCandidateTeamInviteRsp)},
  { 413, -1, sizeof(DungeonCandidateTeamKickReq)},
  { 419, -1, sizeof(DungeonCandidateTeamKickRsp)},
  { 425, -1, sizeof(DungeonCandidateTeamLeaveReq)},
  { 430, -1, sizeof(DungeonCandidateTeamLeaveRsp)},
  { 436, -1, sizeof(DungeonCandidateTeamReplyInviteReq)},
  { 442, -1, sizeof(DungeonCandidateTeamReplyInviteRsp)},
  { 449, -1, sizeof(DungeonCandidateTeamSetReadyReq)},
  { 455, -1, sizeof(DungeonCandidateTeamSetReadyRsp)},
  { 461, -1, sizeof(DungeonCandidateTeamChangeAvatarReq)},
  { 467, -1, sizeof(DungeonCandidateTeamChangeAvatarRsp)},
  { 473, -1, sizeof(DailyDungeonEntryInfo)},
  { 482, -1, sizeof(GetDailyDungeonEntryInfoReq)},
  { 488, -1, sizeof(GetDailyDungeonEntryInfoRsp)},
  { 495, -1, sizeof(DungeonSlipRevivePointActivateReq)},
  { 501, -1, sizeof(DungeonSlipRevivePointActivateRsp)},
  { 508, -1, sizeof(DungeonInterruptChallengeReq)},
  { 516, -1, sizeof(DungeonInterruptChallengeRsp)},
  { 525, -1, sizeof(InteractDailyDungeonInfoNotify)},
  { 530, -1, sizeof(DungeonRestartReq)},
  { 535, -1, sizeof(DungeonRestartRsp)},
  { 543, -1, sizeof(DungeonRestartInviteNotify)},
  { 552, -1, sizeof(DungeonRestartInviteReplyReq)},
  { 558, -1, sizeof(DungeonRestartInviteReplyRsp)},
  { 566, -1, sizeof(DungeonRestartInviteReplyNotify)},
  { 573, -1, sizeof(DungeonRestartResultNotify)},
  { 579, -1, sizeof(DungeonCandidateTeamSetChangingAvatarReq)},
  { 585, -1, sizeof(DungeonCandidateTeamSetChangingAvatarRsp)},
  { 591, -1, sizeof(MistTrialFloorLevelNotify)},
  { 598, -1, sizeof(DungeonReviseLevelNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEntryInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEntryPointInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEntryInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonEnterPosInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerEnterDungeonReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerEnterDungeonRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerQuitDungeonReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerQuitDungeonRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonWayPointNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonWayPointActivateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonWayPointActivateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StrengthenPointData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSettleExhibitionInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CrystalLinkDungeonSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SummerTimeV2DungeonSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InstableSprayDungeonSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WindFieldDungeonSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EffigyChallengeV2SettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TeamChainSettleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSettleNotify_SettleShowEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSettleNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonPlayerDieNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDieOptionReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDieOptionRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonShowReminderNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonPlayerDieReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonPlayerDieRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDataNotify_DungeonDataMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonChallengeBeginNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChallengeBrief_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CustomDungeonResultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonChallengeFinishNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChallengeDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonFollowNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonGetStatueDropReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonGetStatueDropRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChallengeRecord_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChallengeRecordNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamAvatar_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInviteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamRefuseNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamPlayerLeaveNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamDismissNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamCreateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamCreateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamInviteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamKickReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamKickRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamLeaveReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamLeaveRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamReplyInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamReplyInviteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamSetReadyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamSetReadyRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamChangeAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamChangeAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DailyDungeonEntryInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDailyDungeonEntryInfoReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetDailyDungeonEntryInfoRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSlipRevivePointActivateReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonSlipRevivePointActivateRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonInterruptChallengeReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonInterruptChallengeRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InteractDailyDungeonInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRestartReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRestartRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRestartInviteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRestartInviteReplyReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRestartInviteReplyRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRestartInviteReplyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonRestartResultNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamSetChangingAvatarReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonCandidateTeamSetChangingAvatarRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MistTrialFloorLevelNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DungeonReviseLevelNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_dungeon.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[20].reflection = DungeonSettleNotify::DungeonSettleNotify_StrengthenPointDataMapEntry::CreateReflection(file_level_metadata[20].descriptor, _DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[21].reflection = DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::CreateReflection(file_level_metadata[21].descriptor, _DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable());
file_level_metadata[23].reflection = DungeonPlayerDieNotify::DungeonPlayerDieNotify_StrengthenPointDataMapEntry::CreateReflection(file_level_metadata[23].descriptor, _DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[30].reflection = DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::CreateReflection(file_level_metadata[30].descriptor, _DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[35].reflection = DungeonChallengeFinishNotify::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry::CreateReflection(file_level_metadata[35].descriptor, _DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable());
file_level_metadata[44].reflection = DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry::CreateReflection(file_level_metadata[44].descriptor, _DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 83);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  ::proto::protobuf_cmd_2fcmd_5ftower_2eproto::InitDefaults();
  ::proto::protobuf_cmd_2fcmd_5factivity_2eproto::InitDefaults();
  _DungeonEntryInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEntryInfoReq_default_instance_);_DungeonEntryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEntryInfo_default_instance_);_DungeonEntryPointInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEntryPointInfo_default_instance_);_DungeonEntryInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEntryInfoRsp_default_instance_);_DungeonEnterPosInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonEnterPosInfo_default_instance_);_PlayerEnterDungeonReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerEnterDungeonReq_default_instance_);_PlayerEnterDungeonRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerEnterDungeonRsp_default_instance_);_PlayerQuitDungeonReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerQuitDungeonReq_default_instance_);_PlayerQuitDungeonRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PlayerQuitDungeonRsp_default_instance_);_DungeonWayPointNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonWayPointNotify_default_instance_);_DungeonWayPointActivateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonWayPointActivateReq_default_instance_);_DungeonWayPointActivateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonWayPointActivateRsp_default_instance_);_StrengthenPointData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StrengthenPointData_default_instance_);_DungeonSettleExhibitionInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSettleExhibitionInfo_default_instance_);_CrystalLinkDungeonSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CrystalLinkDungeonSettleInfo_default_instance_);_SummerTimeV2DungeonSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SummerTimeV2DungeonSettleInfo_default_instance_);_InstableSprayDungeonSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InstableSprayDungeonSettleInfo_default_instance_);_WindFieldDungeonSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WindFieldDungeonSettleInfo_default_instance_);_EffigyChallengeV2SettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EffigyChallengeV2SettleInfo_default_instance_);_TeamChainSettleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TeamChainSettleInfo_default_instance_);_DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_);_DungeonSettleNotify_SettleShowEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSettleNotify_SettleShowEntry_default_instance_);_DungeonSettleNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSettleNotify_default_instance_);_DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_);_DungeonPlayerDieNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonPlayerDieNotify_default_instance_);_DungeonDieOptionReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDieOptionReq_default_instance_);_DungeonDieOptionRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDieOptionRsp_default_instance_);_DungeonShowReminderNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonShowReminderNotify_default_instance_);_DungeonPlayerDieReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonPlayerDieReq_default_instance_);_DungeonPlayerDieRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonPlayerDieRsp_default_instance_);_DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDataNotify_DungeonDataMapEntry_default_instance_);_DungeonDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonDataNotify_default_instance_);_DungeonChallengeBeginNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonChallengeBeginNotify_default_instance_);_ChallengeBrief_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChallengeBrief_default_instance_);_CustomDungeonResultInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CustomDungeonResultInfo_default_instance_);_DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_);_DungeonChallengeFinishNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonChallengeFinishNotify_default_instance_);_ChallengeDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChallengeDataNotify_default_instance_);_DungeonFollowNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonFollowNotify_default_instance_);_DungeonGetStatueDropReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonGetStatueDropReq_default_instance_);_DungeonGetStatueDropRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonGetStatueDropRsp_default_instance_);_ChallengeRecord_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChallengeRecord_default_instance_);_ChallengeRecordNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ChallengeRecordNotify_default_instance_);_DungeonCandidateTeamAvatar_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamAvatar_default_instance_);_DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_);_DungeonCandidateTeamInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInfoNotify_default_instance_);_DungeonCandidateTeamInviteNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInviteNotify_default_instance_);_DungeonCandidateTeamRefuseNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamRefuseNotify_default_instance_);_DungeonCandidateTeamPlayerLeaveNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamPlayerLeaveNotify_default_instance_);_DungeonCandidateTeamDismissNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamDismissNotify_default_instance_);_DungeonCandidateTeamCreateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamCreateReq_default_instance_);_DungeonCandidateTeamCreateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamCreateRsp_default_instance_);_DungeonCandidateTeamInviteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInviteReq_default_instance_);_DungeonCandidateTeamInviteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamInviteRsp_default_instance_);_DungeonCandidateTeamKickReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamKickReq_default_instance_);_DungeonCandidateTeamKickRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamKickRsp_default_instance_);_DungeonCandidateTeamLeaveReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamLeaveReq_default_instance_);_DungeonCandidateTeamLeaveRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamLeaveRsp_default_instance_);_DungeonCandidateTeamReplyInviteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamReplyInviteReq_default_instance_);_DungeonCandidateTeamReplyInviteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamReplyInviteRsp_default_instance_);_DungeonCandidateTeamSetReadyReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamSetReadyReq_default_instance_);_DungeonCandidateTeamSetReadyRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamSetReadyRsp_default_instance_);_DungeonCandidateTeamChangeAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamChangeAvatarReq_default_instance_);_DungeonCandidateTeamChangeAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamChangeAvatarRsp_default_instance_);_DailyDungeonEntryInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DailyDungeonEntryInfo_default_instance_);_GetDailyDungeonEntryInfoReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDailyDungeonEntryInfoReq_default_instance_);_GetDailyDungeonEntryInfoRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetDailyDungeonEntryInfoRsp_default_instance_);_DungeonSlipRevivePointActivateReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSlipRevivePointActivateReq_default_instance_);_DungeonSlipRevivePointActivateRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonSlipRevivePointActivateRsp_default_instance_);_DungeonInterruptChallengeReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonInterruptChallengeReq_default_instance_);_DungeonInterruptChallengeRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonInterruptChallengeRsp_default_instance_);_InteractDailyDungeonInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InteractDailyDungeonInfoNotify_default_instance_);_DungeonRestartReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRestartReq_default_instance_);_DungeonRestartRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRestartRsp_default_instance_);_DungeonRestartInviteNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRestartInviteNotify_default_instance_);_DungeonRestartInviteReplyReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRestartInviteReplyReq_default_instance_);_DungeonRestartInviteReplyRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRestartInviteReplyRsp_default_instance_);_DungeonRestartInviteReplyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRestartInviteReplyNotify_default_instance_);_DungeonRestartResultNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonRestartResultNotify_default_instance_);_DungeonCandidateTeamSetChangingAvatarReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamSetChangingAvatarReq_default_instance_);_DungeonCandidateTeamSetChangingAvatarRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonCandidateTeamSetChangingAvatarRsp_default_instance_);_MistTrialFloorLevelNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_MistTrialFloorLevelNotify_default_instance_);_DungeonReviseLevelNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DungeonReviseLevelNotify_default_instance_);_DungeonEntryInfo_default_instance_._instance.get_mutable()->weekly_boss_resin_discount_info_ = const_cast< ::proto::WeeklyBossResinDiscountInfo*>(
      ::proto::WeeklyBossResinDiscountInfo::internal_default_instance());
  _PlayerEnterDungeonReq_default_instance_._instance.get_mutable()->enter_pos_info_ = const_cast< ::proto::DungeonEnterPosInfo*>(
      ::proto::DungeonEnterPosInfo::internal_default_instance());
  _DungeonSettleExhibitionInfo_default_instance_._instance.get_mutable()->player_info_ = const_cast< ::proto::OnlinePlayerInfo*>(
      ::proto::OnlinePlayerInfo::internal_default_instance());
  _DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable());
  _DungeonSettleNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable());
  _DungeonSettleNotify_SettleShowEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DungeonSettleNotify_default_instance_.tower_level_end_notify_ = const_cast< ::proto::TowerLevelEndNotify*>(
      ::proto::TowerLevelEndNotify::internal_default_instance());
  _DungeonSettleNotify_default_instance_.trial_avatar_first_pass_dungeon_notify_ = const_cast< ::proto::TrialAvatarFirstPassDungeonNotify*>(
      ::proto::TrialAvatarFirstPassDungeonNotify::internal_default_instance());
  _DungeonSettleNotify_default_instance_.channeller_slab_loop_dungeon_result_info_ = const_cast< ::proto::ChannellerSlabLoopDungeonResultInfo*>(
      ::proto::ChannellerSlabLoopDungeonResultInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.effigy_challenge_dungeon_result_info_ = const_cast< ::proto::EffigyChallengeDungeonResultInfo*>(
      ::proto::EffigyChallengeDungeonResultInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.roguelike_dungeon_settle_info_ = const_cast< ::proto::RoguelikeDungeonSettleInfo*>(
      ::proto::RoguelikeDungeonSettleInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.crystal_link_settle_info_ = const_cast< ::proto::CrystalLinkDungeonSettleInfo*>(
      ::proto::CrystalLinkDungeonSettleInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.summer_time_v2_dungeon_settle_info_ = const_cast< ::proto::SummerTimeV2DungeonSettleInfo*>(
      ::proto::SummerTimeV2DungeonSettleInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.instable_spray_settle_info_ = const_cast< ::proto::InstableSprayDungeonSettleInfo*>(
      ::proto::InstableSprayDungeonSettleInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.wind_field_dungeon_settle_info_ = const_cast< ::proto::WindFieldDungeonSettleInfo*>(
      ::proto::WindFieldDungeonSettleInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.effigy_challenge_v2_settle_info_ = const_cast< ::proto::EffigyChallengeV2SettleInfo*>(
      ::proto::EffigyChallengeV2SettleInfo::internal_default_instance());
  _DungeonSettleNotify_default_instance_.team_chain_settle_info_ = const_cast< ::proto::TeamChainSettleInfo*>(
      ::proto::TeamChainSettleInfo::internal_default_instance());
  _DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable());
  _DungeonPlayerDieNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DungeonPlayerDieNotify_default_instance_.monster_id_ = 0u;
  _DungeonPlayerDieNotify_default_instance_.gadget_id_ = 0u;
  _DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable());
  _DungeonDataNotify_DungeonDataMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable());
  _DungeonChallengeFinishNotify_StrengthenPointDataMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DungeonChallengeFinishNotify_default_instance_.channeller_slab_loop_dungeon_result_info_ = const_cast< ::proto::ChannellerSlabLoopDungeonResultInfo*>(
      ::proto::ChannellerSlabLoopDungeonResultInfo::internal_default_instance());
  _DungeonChallengeFinishNotify_default_instance_.effigy_challenge_dungeon_result_info_ = const_cast< ::proto::EffigyChallengeDungeonResultInfo*>(
      ::proto::EffigyChallengeDungeonResultInfo::internal_default_instance());
  _DungeonChallengeFinishNotify_default_instance_.potion_dungeon_result_info_ = const_cast< ::proto::PotionDungeonResultInfo*>(
      ::proto::PotionDungeonResultInfo::internal_default_instance());
  _DungeonChallengeFinishNotify_default_instance_.custom_dungeon_result_info_ = const_cast< ::proto::CustomDungeonResultInfo*>(
      ::proto::CustomDungeonResultInfo::internal_default_instance());
  _DungeonCandidateTeamAvatar_default_instance_._instance.get_mutable()->avatar_info_ = const_cast< ::proto::AvatarInfo*>(
      ::proto::AvatarInfo::internal_default_instance());
  _DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_._instance.get_mutable()->set_default_instance(_DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_._instance.get_mutable());
  _DungeonCandidateTeamInfoNotify_PlayerStateMapEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _DailyDungeonEntryInfo_default_instance_._instance.get_mutable()->recommend_dungeon_entry_info_ = const_cast< ::proto::DungeonEntryInfo*>(
      ::proto::DungeonEntryInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025cmd/cmd_dungeon.proto\022\005proto\032\014define.p"
      "roto\032\023cmd/cmd_tower.proto\032\026cmd/cmd_activ"
      "ity.proto\"i\n\023DungeonEntryInfoReq\022\020\n\010poin"
      "t_id\030\002 \001(\r\022\020\n\010scene_id\030\t \001(\r\022.\n\023scene_po"
      "int_id_list\030\004 \003(\0132\021.proto.Uint32Pair\"\217\002\n"
      "\020DungeonEntryInfo\022\020\n\010end_time\030\006 \001(\r\022\022\n\nd"
      "ungeon_id\030\005 \001(\r\022\026\n\016boss_chest_num\030\014 \001(\r\022"
      "\032\n\022max_boss_chest_num\030\r \001(\r\022\031\n\021next_refr"
      "esh_time\030\013 \001(\r\022K\n\037weekly_boss_resin_disc"
      "ount_info\030\t \001(\0132\".proto.WeeklyBossResinD"
      "iscountInfo\022\022\n\nstart_time\030\017 \001(\r\022\021\n\tis_pa"
      "ssed\030\004 \001(\010\022\022\n\nleft_times\030\007 \001(\r\"\216\001\n\025Dunge"
      "onEntryPointInfo\022\020\n\010scene_id\030\014 \001(\r\022\020\n\010po"
      "int_id\030\006 \001(\r\0223\n\022dungeon_entry_list\030\001 \003(\013"
      "2\027.proto.DungeonEntryInfo\022\034\n\024recommend_d"
      "ungeon_id\030\010 \001(\r\"\313\001\n\023DungeonEntryInfoRsp\022"
      "3\n\022dungeon_entry_list\030\014 \003(\0132\027.proto.Dung"
      "eonEntryInfo\022\020\n\010point_id\030\017 \001(\r\022>\n\030dungeo"
      "n_entry_point_list\030\004 \003(\0132\034.proto.Dungeon"
      "EntryPointInfo\022\034\n\024recommend_dungeon_id\030\016"
      " \001(\r\022\017\n\007retcode\030\013 \001(\005\"9\n\023DungeonEnterPos"
      "Info\022\020\n\010quest_id\030\r \001(\r\022\020\n\010point_id\030\006 \001(\r"
      "\"q\n\025PlayerEnterDungeonReq\0222\n\016enter_pos_i"
      "nfo\030\002 \001(\0132\032.proto.DungeonEnterPosInfo\022\020\n"
      "\010point_id\030\r \001(\r\022\022\n\ndungeon_id\030\007 \001(\r\"N\n\025P"
      "layerEnterDungeonRsp\022\022\n\ndungeon_id\030\002 \001(\r"
      "\022\020\n\010point_id\030\006 \001(\r\022\017\n\007retcode\030\005 \001(\005\"E\n\024P"
      "layerQuitDungeonReq\022\033\n\023is_quit_immediate"
      "ly\030\n \001(\010\022\020\n\010point_id\030\007 \001(\r\"9\n\024PlayerQuit"
      "DungeonRsp\022\020\n\010point_id\030\013 \001(\r\022\017\n\007retcode\030"
      "\007 \001(\005\"F\n\025DungeonWayPointNotify\022\016\n\006is_add"
      "\030\t \001(\010\022\035\n\025active_way_point_list\030\004 \003(\r\"2\n"
      "\032DungeonWayPointActivateReq\022\024\n\014way_point"
      "_id\030\003 \001(\r\"C\n\032DungeonWayPointActivateRsp\022"
      "\017\n\007retcode\030\006 \001(\005\022\024\n\014way_point_id\030\007 \001(\r\"<"
      "\n\023StrengthenPointData\022\022\n\nbase_point\030\n \001("
      "\r\022\021\n\tcur_point\030\013 \001(\r\"|\n\033DungeonSettleExh"
      "ibitionInfo\022,\n\013player_info\030\003 \001(\0132\027.proto"
      ".OnlinePlayerInfo\022/\n\tcard_list\030\r \003(\0132\034.p"
      "roto.ExhibitionDisplayInfo\"\264\001\n\034CrystalLi"
      "nkDungeonSettleInfo\022\036\n\026kill_elite_monste"
      "r_num\030\002 \001(\r\022\023\n\013final_score\030\006 \001(\r\022\020\n\010leve"
      "l_id\030\014 \001(\r\022\025\n\ris_new_record\030\r \001(\010\022\025\n\rdif"
      "ficulty_id\030\t \001(\r\022\037\n\027kill_normal_mosnter_"
      "num\030\003 \001(\r\"q\n\035SummerTimeV2DungeonSettleIn"
      "fo\022\022\n\nis_success\030\005 \001(\010\022\032\n\022taken_reward_c"
      "ount\030\002 \001(\r\022 \n\030cur_dungeon_reward_limit\030\013"
      " \001(\r\"q\n\036InstableSprayDungeonSettleInfo\022\020"
      "\n\010stage_id\030\001 \001(\r\022\022\n\nscore_list\030\004 \003(\r\022\025\n\r"
      "is_new_record\030\r \001(\010\022\022\n\ndifficulty\030\005 \001(\r\""
      "\223\001\n\032WindFieldDungeonSettleInfo\022\035\n\025after_"
      "watcher_id_list\030\013 \003(\r\022\036\n\026before_watcher_"
      "id_list\030\007 \003(\r\0226\n\013fail_reason\030\002 \001(\0162!.pro"
      "to.WindFieldDungeonFailReason\"\343\001\n\033Effigy"
      "ChallengeV2SettleInfo\022\'\n\037is_challenge_hi"
      "ghest_difficulty\030\007 \001(\010\022!\n\031create_dungeon"
      "_player_uid\030\004 \001(\r\022!\n\031challenge_mode_diff"
      "iculty\030\006 \001(\r\022\032\n\022is_new_record_time\030\001 \001(\010"
      "\022\023\n\013record_time\030\014 \001(\r\022$\n\034first_time_fini"
      "sh_difficulty\030\005 \001(\r\"{\n\023TeamChainSettleIn"
      "fo\022\022\n\nscore_list\030\t \003(\r\022\023\n\013total_score\030\001 "
      "\001(\r\022\022\n\ndifficulty\030\017 \001(\r\022\020\n\010stage_id\030\014 \001("
      "\r\022\025\n\ris_new_record\030\004 \001(\010\"\233\013\n\023DungeonSett"
      "leNotify\022\016\n\006result\030\n \001(\r\022\022\n\ndungeon_id\030\r"
      " \001(\r\022Y\n\031strengthen_point_data_map\030\016 \003(\0132"
      "6.proto.DungeonSettleNotify.StrengthenPo"
      "intDataMapEntry\022@\n\024exhibition_info_list\030"
      "\010 \003(\0132\".proto.DungeonSettleExhibitionInf"
      "o\022\031\n\021create_player_uid\030\014 \001(\r\022\026\n\016fail_con"
      "d_list\030\013 \003(\r\022\020\n\010use_time\030\001 \001(\r\022\022\n\nclose_"
      "time\030\004 \001(\r\022\022\n\nis_success\030\007 \001(\010\022\?\n\013settle"
      "_show\030\005 \003(\0132*.proto.DungeonSettleNotify."
      "SettleShowEntry\022=\n\026tower_level_end_notif"
      "y\030\337\002 \001(\0132\032.proto.TowerLevelEndNotifyH\000\022["
      "\n&trial_avatar_first_pass_dungeon_notify"
      "\030\373\004 \001(\0132(.proto.TrialAvatarFirstPassDung"
      "eonNotifyH\000\022_\n(channeller_slab_loop_dung"
      "eon_result_info\030\256\005 \001(\0132*.proto.Channelle"
      "rSlabLoopDungeonResultInfoH\000\022X\n$effigy_c"
      "hallenge_dungeon_result_info\030\310\002 \001(\0132\'.pr"
      "oto.EffigyChallengeDungeonResultInfoH\000\022K"
      "\n\035roguelike_dungeon_settle_info\030\312\013 \001(\0132!"
      ".proto.RoguelikeDungeonSettleInfoH\000\022G\n\030c"
      "rystal_link_settle_info\030p \001(\0132#.proto.Cr"
      "ystalLinkDungeonSettleInfoH\000\022S\n\"summer_t"
      "ime_v2_dungeon_settle_info\030\332\016 \001(\0132$.prot"
      "o.SummerTimeV2DungeonSettleInfoH\000\022L\n\032ins"
      "table_spray_settle_info\030\301\001 \001(\0132%.proto.I"
      "nstableSprayDungeonSettleInfoH\000\022L\n\036wind_"
      "field_dungeon_settle_info\030\241\016 \001(\0132!.proto"
      ".WindFieldDungeonSettleInfoH\000\022N\n\037effigy_"
      "challenge_v2_settle_info\030\212\016 \001(\0132\".proto."
      "EffigyChallengeV2SettleInfoH\000\022=\n\026team_ch"
      "ain_settle_info\030\304\002 \001(\0132\032.proto.TeamChain"
      "SettleInfoH\000\032Y\n\033StrengthenPointDataMapEn"
      "try\022\013\n\003key\030\001 \001(\r\022)\n\005value\030\002 \001(\0132\032.proto."
      "StrengthenPointData:\0028\001\032C\n\017SettleShowEnt"
      "ry\022\013\n\003key\030\001 \001(\r\022\037\n\005value\030\002 \001(\0132\020.proto.P"
      "aramList:\0028\001B\010\n\006detail\"\207\003\n\026DungeonPlayer"
      "DieNotify\022\\\n\031strengthen_point_data_map\030\017"
      " \003(\01329.proto.DungeonPlayerDieNotify.Stre"
      "ngthenPointDataMapEntry\022\021\n\twait_time\030\001 \001"
      "(\r\022\022\n\ndungeon_id\030\t \001(\r\022\032\n\022murderer_entit"
      "y_id\030\r \001(\r\022&\n\010die_type\030\003 \001(\0162\024.proto.Pla"
      "yerDieType\022\024\n\014revive_count\030\006 \001(\r\022\024\n\nmons"
      "ter_id\030\004 \001(\rH\000\022\023\n\tgadget_id\030\010 \001(\rH\000\032Y\n\033S"
      "trengthenPointDataMapEntry\022\013\n\003key\030\001 \001(\r\022"
      ")\n\005value\030\002 \001(\0132\032.proto.StrengthenPointDa"
      "ta:\0028\001B\010\n\006entity\"^\n\023DungeonDieOptionReq\022"
      "*\n\ndie_option\030\013 \001(\0162\026.proto.PlayerDieOpt"
      "ion\022\033\n\023is_quit_immediately\030\016 \001(\010\"h\n\023Dung"
      "eonDieOptionRsp\022\017\n\007retcode\030\005 \001(\005\022\024\n\014revi"
      "ve_count\030\n \001(\r\022*\n\ndie_option\030\006 \001(\0162\026.pro"
      "to.PlayerDieOption\"0\n\031DungeonShowReminde"
      "rNotify\022\023\n\013reminder_id\030\t \001(\r\"Q\n\023DungeonP"
      "layerDieReq\022&\n\010die_type\030\006 \001(\0162\024.proto.Pl"
      "ayerDieType\022\022\n\ndungeon_id\030\010 \001(\r\"&\n\023Dunge"
      "onPlayerDieRsp\022\017\n\007retcode\030\005 \001(\005\"\222\001\n\021Dung"
      "eonDataNotify\022F\n\020dungeon_data_map\030\001 \003(\0132"
      ",.proto.DungeonDataNotify.DungeonDataMap"
      "Entry\0325\n\023DungeonDataMapEntry\022\013\n\003key\030\001 \001("
      "\r\022\r\n\005value\030\002 \001(\r:\0028\001\"\232\001\n\033DungeonChalleng"
      "eBeginNotify\022\024\n\014father_index\030\005 \001(\r\022\022\n\npa"
      "ram_list\030\016 \003(\r\022\027\n\017challenge_index\030\006 \001(\r\022"
      "\024\n\014challenge_id\030\001 \001(\r\022\020\n\010group_id\030\004 \001(\r\022"
      "\020\n\010uid_list\030\014 \003(\r\"i\n\016ChallengeBrief\022\024\n\014c"
      "ur_progress\030\t \001(\r\022\027\n\017challenge_index\030\n \001"
      "(\r\022\022\n\nis_success\030\004 \001(\010\022\024\n\014challenge_id\030\010"
      " \001(\r\"\201\002\n\027CustomDungeonResultInfo\022\020\n\010is_l"
      "iked\030\014 \001(\010\022\024\n\014got_coin_num\030\t \001(\r\0223\n\024chil"
      "d_challenge_list\030\006 \003(\0132\025.proto.Challenge"
      "Brief\022\024\n\014dungeon_guid\030\003 \001(\004\0223\n\013finish_ty"
      "pe\030\007 \001(\0162\036.proto.CustomDungeonFinishType"
      "\022\021\n\ttime_cost\030\013 \001(\r\022\030\n\020is_arrive_finish\030"
      "\002 \001(\010\022\021\n\tis_stored\030\016 \001(\010\"\356\005\n\034DungeonChal"
      "lengeFinishNotify\022b\n\031strengthen_point_da"
      "ta_map\030\r \003(\0132\?.proto.DungeonChallengeFin"
      "ishNotify.StrengthenPointDataMapEntry\022/\n"
      "\013finish_type\030\t \001(\0162\032.proto.ChallengeFini"
      "shType\022\025\n\ris_new_record\030\n \001(\010\022\035\n\025challen"
      "ge_record_type\030\007 \001(\r\022\021\n\ttime_cost\030\004 \001(\r\022"
      "\025\n\rcurrent_value\030\017 \001(\r\022\022\n\nis_success\030\003 \001"
      "(\010\022\027\n\017challenge_index\030\005 \001(\r\022_\n(channelle"
      "r_slab_loop_dungeon_result_info\030\361\013 \001(\0132*"
      ".proto.ChannellerSlabLoopDungeonResultIn"
      "foH\000\022X\n$effigy_challenge_dungeon_result_"
      "info\030\333\014 \001(\0132\'.proto.EffigyChallengeDunge"
      "onResultInfoH\000\022E\n\032potion_dungeon_result_"
      "info\030\240\016 \001(\0132\036.proto.PotionDungeonResultI"
      "nfoH\000\022E\n\032custom_dungeon_result_info\030\200\r \001"
      "(\0132\036.proto.CustomDungeonResultInfoH\000\032Y\n\033"
      "StrengthenPointDataMapEntry\022\013\n\003key\030\001 \001(\r"
      "\022)\n\005value\030\002 \001(\0132\032.proto.StrengthenPointD"
      "ata:\0028\001B\010\n\006detail\"R\n\023ChallengeDataNotify"
      "\022\r\n\005value\030\010 \001(\r\022\027\n\017challenge_index\030\002 \001(\r"
      "\022\023\n\013param_index\030\t \001(\r\")\n\023DungeonFollowNo"
      "tify\022\022\n\ntarget_uid\030\010 \001(\r\"\031\n\027DungeonGetSt"
      "atueDropReq\"*\n\027DungeonGetStatueDropRsp\022\017"
      "\n\007retcode\030\014 \001(\005\"s\n\017ChallengeRecord\022\035\n\025ch"
      "allenge_record_type\030\016 \001(\r\022\027\n\017challenge_i"
      "ndex\030\017 \001(\r\022\024\n\014challenge_id\030\001 \001(\r\022\022\n\nbest"
      "_value\030\010 \001(\r\"`\n\025ChallengeRecordNotify\022\020\n"
      "\010group_id\030\002 \001(\r\0225\n\025challenge_record_list"
      "\030\005 \003(\0132\026.proto.ChallengeRecord\"X\n\032Dungeo"
      "nCandidateTeamAvatar\022\022\n\nplayer_uid\030\002 \001(\r"
      "\022&\n\013avatar_info\030\006 \001(\0132\021.proto.AvatarInfo"
      "\"\316\002\n\036DungeonCandidateTeamInfoNotify\022S\n\020p"
      "layer_state_map\030\n \003(\01329.proto.DungeonCan"
      "didateTeamInfoNotify.PlayerStateMapEntry"
      "\022\022\n\ndungeon_id\030\t \001(\r\022\030\n\020ready_player_uid"
      "\030\r \003(\r\022\022\n\nmatch_type\030\002 \001(\r\0226\n\013avatar_lis"
      "t\030\004 \003(\0132!.proto.DungeonCandidateTeamAvat"
      "ar\032]\n\023PlayerStateMapEntry\022\013\n\003key\030\001 \001(\r\0225"
      "\n\005value\030\002 \001(\0162&.proto.DungeonCandidateTe"
      "amPlayerState:\0028\001\"k\n DungeonCandidateTea"
      "mInviteNotify\022\022\n\nplayer_uid\030\005 \001(\r\022\037\n\027vai"
      "ld_deadline_time_sec\030\t \001(\r\022\022\n\ndungeon_id"
      "\030\006 \001(\r\"6\n DungeonCandidateTeamRefuseNoti"
      "fy\022\022\n\nplayer_uid\030\003 \001(\r\"y\n%DungeonCandida"
      "teTeamPlayerLeaveNotify\022<\n\006reason\030\003 \001(\0162"
      ",.proto.DungeonCandidateTeamPlayerLeaveR"
      "eason\022\022\n\nplayer_uid\030\r \001(\r\"q\n!DungeonCand"
      "idateTeamDismissNotify\0228\n\006reason\030\t \001(\0162("
      ".proto.DungeonCandidateTeamDismissReason"
      "\022\022\n\nplayer_uid\030\014 \001(\r\"E\n\035DungeonCandidate"
      "TeamCreateReq\022\020\n\010point_id\030\007 \001(\r\022\022\n\ndunge"
      "on_id\030\006 \001(\r\"0\n\035DungeonCandidateTeamCreat"
      "eRsp\022\017\n\007retcode\030\001 \001(\005\"4\n\035DungeonCandidat"
      "eTeamInviteReq\022\023\n\013player_uids\030\005 \003(\r\"M\n\035D"
      "ungeonCandidateTeamInviteRsp\022\017\n\007retcode\030"
      "\014 \001(\005\022\033\n\023invalid_player_uids\030\007 \003(\r\"1\n\033Du"
      "ngeonCandidateTeamKickReq\022\022\n\nplayer_uid\030"
      "\t \001(\r\".\n\033DungeonCandidateTeamKickRsp\022\017\n\007"
      "retcode\030\001 \001(\005\"\036\n\034DungeonCandidateTeamLea"
      "veReq\"/\n\034DungeonCandidateTeamLeaveRsp\022\017\n"
      "\007retcode\030\016 \001(\005\"7\n\"DungeonCandidateTeamRe"
      "plyInviteReq\022\021\n\tis_accept\030\005 \001(\010\"M\n\"Dunge"
      "onCandidateTeamReplyInviteRsp\022\026\n\016is_tran"
      "s_point\030\004 \001(\010\022\017\n\007retcode\030\002 \001(\005\"3\n\037Dungeo"
      "nCandidateTeamSetReadyReq\022\020\n\010is_ready\030\017 "
      "\001(\010\"2\n\037DungeonCandidateTeamSetReadyRsp\022\017"
      "\n\007retcode\030\014 \001(\005\"\?\n#DungeonCandidateTeamC"
      "hangeAvatarReq\022\030\n\020avatar_guid_list\030\005 \003(\004"
      "\"6\n#DungeonCandidateTeamChangeAvatarRsp\022"
      "\017\n\007retcode\030\004 \001(\005\"\257\001\n\025DailyDungeonEntryIn"
      "fo\022\037\n\027dungeon_entry_config_id\030\014 \001(\r\022\030\n\020d"
      "ungeon_entry_id\030\017 \001(\r\022=\n\034recommend_dunge"
      "on_entry_info\030\001 \001(\0132\027.proto.DungeonEntry"
      "Info\022\034\n\024recommend_dungeon_id\030\004 \001(\r\"/\n\033Ge"
      "tDailyDungeonEntryInfoReq\022\020\n\010scene_id\030\017 "
      "\001(\r\"m\n\033GetDailyDungeonEntryInfoRsp\022=\n\027da"
      "ily_dungeon_info_list\030\002 \003(\0132\034.proto.Dail"
      "yDungeonEntryInfo\022\017\n\007retcode\030\016 \001(\005\"A\n!Du"
      "ngeonSlipRevivePointActivateReq\022\034\n\024slip_"
      "revive_point_id\030\t \001(\r\"R\n!DungeonSlipRevi"
      "vePointActivateRsp\022\034\n\024slip_revive_point_"
      "id\030\016 \001(\r\022\017\n\007retcode\030\004 \001(\005\"_\n\034DungeonInte"
      "rruptChallengeReq\022\027\n\017challenge_index\030\016 \001"
      "(\r\022\020\n\010group_id\030\r \001(\r\022\024\n\014challenge_id\030\013 \001"
      "(\r\"p\n\034DungeonInterruptChallengeRsp\022\017\n\007re"
      "tcode\030\001 \001(\005\022\027\n\017challenge_index\030\002 \001(\r\022\020\n\010"
      "group_id\030\017 \001(\r\022\024\n\014challenge_id\030\013 \001(\r\" \n\036"
      "InteractDailyDungeonInfoNotify\"\023\n\021Dungeo"
      "nRestartReq\"J\n\021DungeonRestartRsp\022\022\n\ndung"
      "eon_id\030\017 \001(\r\022\017\n\007retcode\030\t \001(\005\022\020\n\010point_i"
      "d\030\016 \001(\r\"b\n\032DungeonRestartInviteNotify\022\022\n"
      "\nplayer_uid\030\003 \001(\r\022\n\n\002cd\030\017 \001(\r\022\020\n\010point_i"
      "d\030\r \001(\r\022\022\n\ndungeon_id\030\n \001(\r\"1\n\034DungeonRe"
      "startInviteReplyReq\022\021\n\tis_accept\030\013 \001(\010\"Z"
      "\n\034DungeonRestartInviteReplyRsp\022\021\n\tis_acc"
      "ept\030\n \001(\010\022\026\n\016is_trans_point\030\001 \001(\010\022\017\n\007ret"
      "code\030\t \001(\005\"H\n\037DungeonRestartInviteReplyN"
      "otify\022\021\n\tis_accept\030\006 \001(\010\022\022\n\nplayer_uid\030\t"
      " \001(\r\"3\n\032DungeonRestartResultNotify\022\025\n\ris"
      "_add_accpet\030\t \001(\010\"F\n(DungeonCandidateTea"
      "mSetChangingAvatarReq\022\032\n\022is_changing_ava"
      "tar\030\014 \001(\010\";\n(DungeonCandidateTeamSetChan"
      "gingAvatarRsp\022\017\n\007retcode\030\002 \001(\005\"J\n\031MistTr"
      "ialFloorLevelNotify\022\023\n\013floor_level\030\007 \001(\r"
      "\022\030\n\020dungeon_scene_id\030\016 \001(\r\"Y\n\030DungeonRev"
      "iseLevelNotify\022\023\n\013scene_level\030\005 \001(\r\022\024\n\014r"
      "evise_level\030\n \001(\r\022\022\n\ndungeon_id\030\003 \001(\r*\336\001"
      "\n\032WindFieldDungeonFailReason\022 \n\034WIND_FIE"
      "LD_DUNGEON_FAIL_NONE\020\000\022\"\n\036WIND_FIELD_DUN"
      "GEON_FAIL_CANCEL\020\001\022#\n\037WIND_FIELD_DUNGEON"
      "_FAIL_TIMEOUT\020\002\022*\n&WIND_FIELD_DUNGEON_FA"
      "IL_ALL_AVATAR_DIE\020\003\022)\n%WIND_FIELD_DUNGEO"
      "N_FAIL_LUA_INTERRUPT\020\004*\347\001\n\017DungeonDataTy"
      "pe\022\025\n\021DUNGEON_DATA_NONE\020\000\022\031\n\025DUNGEON_DAT"
      "A_END_TIME\020\001\022\"\n\036DUNGEON_DATA_MONSTER_DIE"
      "_COUNT\020\002\022 \n\034DUNGEON_DATA_LEVEL_CONFIG_ID"
      "\020\003\022.\n*DUNGEON_DATA_TOWER_MONTHLY_LEVEL_C"
      "ONFIG_ID\020\004\022,\n(DUNGEON_DATA_TOWER_FLOOR_L"
      "EVEL_CONFIG_ID\020\005*\226\001\n\023ChallengeFinishType"
      "\022\036\n\032CHALLENGE_FINISH_TYPE_NONE\020\000\022\036\n\032CHAL"
      "LENGE_FINISH_TYPE_FAIL\020\001\022\036\n\032CHALLENGE_FI"
      "NISH_TYPE_SUCC\020\002\022\037\n\033CHALLENGE_FINISH_TYP"
      "E_PAUSE\020\003*\264\001\n\027CustomDungeonFinishType\022%\n"
      "!CUSTOM_DUNGEON_FINISH_PLAY_NORMAL\020\000\022\"\n\036"
      "CUSTOM_DUNGEON_FINISH_PLAY_TRY\020\001\022\"\n\036CUST"
      "OM_DUNGEON_FINISH_EDIT_TRY\020\002\022*\n&CUSTOM_D"
      "UNGEON_FINISH_SELF_PLAY_NORMAL\020\003*\260\001\n%Dun"
      "geonCandidateTeamPlayerLeaveReason\022!\n\035DU"
      "NGEON_CANDIDATE_TPLR_NORMAL\020\000\022\036\n\032DUNGEON"
      "_CANDIDATE_TPLR_DIE\020\001\022\"\n\036DUNGEON_CANDIDA"
      "TE_TPLR_BE_KICK\020\002\022 \n\034DUNGEON_CANDIDATE_D"
      "ISCONNECT\020\003*\215\001\n!DungeonCandidateTeamDism"
      "issReason\022!\n\035DUNGEON_CANDIDATE_TPDR_NORM"
      "AL\020\000\022\036\n\032DUNGEON_CANDIDATE_TPDR_DIE\020\001\022%\n!"
      "DUNGEON_CANDIDATE_TPDR_DISCONNECT\020\002*\207\001\n\024"
      "DungeonRestartReason\022\037\n\033DUNGEON_RESTART_"
      "REASON_NONE\020\000\022(\n$DUNGEON_RESTART_REASON_"
      "DAILY_RESTART\020\001\022$\n DUNGEON_RESTART_REASO"
      "N_DIE_RETRY\020\002B(Z&github.com/teyvat-helpe"
      "r/hk4e-proto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 10983);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_dungeon.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
  ::proto::protobuf_cmd_2fcmd_5ftower_2eproto::AddDescriptors();
  ::proto::protobuf_cmd_2fcmd_5factivity_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fdungeon_2eproto

const ::google::protobuf::EnumDescriptor* WindFieldDungeonFailReason_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[0];
}
bool WindFieldDungeonFailReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonDataType_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[1];
}
bool DungeonDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ChallengeFinishType_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[2];
}
bool ChallengeFinishType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CustomDungeonFinishType_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[3];
}
bool CustomDungeonFinishType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamPlayerLeaveReason_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[4];
}
bool DungeonCandidateTeamPlayerLeaveReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonCandidateTeamDismissReason_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[5];
}
bool DungeonCandidateTeamDismissReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DungeonRestartReason_descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_enum_descriptors[6];
}
bool DungeonRestartReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEntryInfoReq::kPointIdFieldNumber;
const int DungeonEntryInfoReq::kSceneIdFieldNumber;
const int DungeonEntryInfoReq::kScenePointIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEntryInfoReq::DungeonEntryInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEntryInfoReq)
}
DungeonEntryInfoReq::DungeonEntryInfoReq(const DungeonEntryInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scene_point_id_list_(from.scene_point_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_id_, &from.point_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&point_id_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEntryInfoReq)
}

void DungeonEntryInfoReq::SharedCtor() {
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(scene_id_));
  _cached_size_ = 0;
}

DungeonEntryInfoReq::~DungeonEntryInfoReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonEntryInfoReq)
  SharedDtor();
}

void DungeonEntryInfoReq::SharedDtor() {
}

void DungeonEntryInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEntryInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEntryInfoReq& DungeonEntryInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEntryInfoReq* DungeonEntryInfoReq::New(::google::protobuf::Arena* arena) const {
  DungeonEntryInfoReq* n = new DungeonEntryInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEntryInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_point_id_list_.Clear();
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(scene_id_));
  _internal_metadata_.Clear();
}

bool DungeonEntryInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEntryInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Uint32Pair scene_point_id_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scene_point_id_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEntryInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEntryInfoReq)
  return false;
#undef DO_
}

void DungeonEntryInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point_id(), output);
  }

  // repeated .proto.Uint32Pair scene_point_id_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scene_point_id_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scene_point_id_list(static_cast<int>(i)), output);
  }

  // uint32 scene_id = 9;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scene_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEntryInfoReq)
}

::google::protobuf::uint8* DungeonEntryInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point_id(), target);
  }

  // repeated .proto.Uint32Pair scene_point_id_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scene_point_id_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->scene_point_id_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 scene_id = 9;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scene_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEntryInfoReq)
  return target;
}

size_t DungeonEntryInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEntryInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.Uint32Pair scene_point_id_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->scene_point_id_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scene_point_id_list(static_cast<int>(i)));
    }
  }

  // uint32 point_id = 2;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 scene_id = 9;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEntryInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEntryInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEntryInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEntryInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEntryInfoReq)
    MergeFrom(*source);
  }
}

void DungeonEntryInfoReq::MergeFrom(const DungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scene_point_id_list_.MergeFrom(from.scene_point_id_list_);
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void DungeonEntryInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEntryInfoReq::CopyFrom(const DungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEntryInfoReq::IsInitialized() const {
  return true;
}

void DungeonEntryInfoReq::Swap(DungeonEntryInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEntryInfoReq::InternalSwap(DungeonEntryInfoReq* other) {
  using std::swap;
  scene_point_id_list_.InternalSwap(&other->scene_point_id_list_);
  swap(point_id_, other->point_id_);
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEntryInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEntryInfoReq

// uint32 point_id = 2;
void DungeonEntryInfoReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfoReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoReq.point_id)
  return point_id_;
}
void DungeonEntryInfoReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoReq.point_id)
}

// uint32 scene_id = 9;
void DungeonEntryInfoReq::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfoReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoReq.scene_id)
  return scene_id_;
}
void DungeonEntryInfoReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoReq.scene_id)
}

// repeated .proto.Uint32Pair scene_point_id_list = 4;
int DungeonEntryInfoReq::scene_point_id_list_size() const {
  return scene_point_id_list_.size();
}
void DungeonEntryInfoReq::clear_scene_point_id_list() {
  scene_point_id_list_.Clear();
}
const ::proto::Uint32Pair& DungeonEntryInfoReq::scene_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_.Get(index);
}
::proto::Uint32Pair* DungeonEntryInfoReq::mutable_scene_point_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_.Mutable(index);
}
::proto::Uint32Pair* DungeonEntryInfoReq::add_scene_point_id_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Uint32Pair >*
DungeonEntryInfoReq::mutable_scene_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryInfoReq.scene_point_id_list)
  return &scene_point_id_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Uint32Pair >&
DungeonEntryInfoReq::scene_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryInfoReq.scene_point_id_list)
  return scene_point_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEntryInfo::kEndTimeFieldNumber;
const int DungeonEntryInfo::kDungeonIdFieldNumber;
const int DungeonEntryInfo::kBossChestNumFieldNumber;
const int DungeonEntryInfo::kMaxBossChestNumFieldNumber;
const int DungeonEntryInfo::kNextRefreshTimeFieldNumber;
const int DungeonEntryInfo::kWeeklyBossResinDiscountInfoFieldNumber;
const int DungeonEntryInfo::kStartTimeFieldNumber;
const int DungeonEntryInfo::kIsPassedFieldNumber;
const int DungeonEntryInfo::kLeftTimesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEntryInfo::DungeonEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEntryInfo)
}
DungeonEntryInfo::DungeonEntryInfo(const DungeonEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_weekly_boss_resin_discount_info()) {
    weekly_boss_resin_discount_info_ = new ::proto::WeeklyBossResinDiscountInfo(*from.weekly_boss_resin_discount_info_);
  } else {
    weekly_boss_resin_discount_info_ = NULL;
  }
  ::memcpy(&is_passed_, &from.is_passed_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&is_passed_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEntryInfo)
}

void DungeonEntryInfo::SharedCtor() {
  ::memset(&weekly_boss_resin_discount_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&weekly_boss_resin_discount_info_)) + sizeof(start_time_));
  _cached_size_ = 0;
}

DungeonEntryInfo::~DungeonEntryInfo() {
  // @@protoc_insertion_point(destructor:proto.DungeonEntryInfo)
  SharedDtor();
}

void DungeonEntryInfo::SharedDtor() {
  if (this != internal_default_instance()) delete weekly_boss_resin_discount_info_;
}

void DungeonEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEntryInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEntryInfo& DungeonEntryInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEntryInfo* DungeonEntryInfo::New(::google::protobuf::Arena* arena) const {
  DungeonEntryInfo* n = new DungeonEntryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && weekly_boss_resin_discount_info_ != NULL) {
    delete weekly_boss_resin_discount_info_;
  }
  weekly_boss_resin_discount_info_ = NULL;
  ::memset(&is_passed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&is_passed_)) + sizeof(start_time_));
  _internal_metadata_.Clear();
}

bool DungeonEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_passed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_passed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_times = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekly_boss_resin_discount_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 next_refresh_time = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 boss_chest_num = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boss_chest_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_boss_chest_num = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_boss_chest_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEntryInfo)
  return false;
#undef DO_
}

void DungeonEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_passed = 4;
  if (this->is_passed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_passed(), output);
  }

  // uint32 dungeon_id = 5;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dungeon_id(), output);
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->end_time(), output);
  }

  // uint32 left_times = 7;
  if (this->left_times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->left_times(), output);
  }

  // .proto.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
  if (this->has_weekly_boss_resin_discount_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->weekly_boss_resin_discount_info_, output);
  }

  // uint32 next_refresh_time = 11;
  if (this->next_refresh_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->next_refresh_time(), output);
  }

  // uint32 boss_chest_num = 12;
  if (this->boss_chest_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->boss_chest_num(), output);
  }

  // uint32 max_boss_chest_num = 13;
  if (this->max_boss_chest_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->max_boss_chest_num(), output);
  }

  // uint32 start_time = 15;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->start_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEntryInfo)
}

::google::protobuf::uint8* DungeonEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_passed = 4;
  if (this->is_passed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_passed(), target);
  }

  // uint32 dungeon_id = 5;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dungeon_id(), target);
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->end_time(), target);
  }

  // uint32 left_times = 7;
  if (this->left_times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->left_times(), target);
  }

  // .proto.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
  if (this->has_weekly_boss_resin_discount_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->weekly_boss_resin_discount_info_, deterministic, target);
  }

  // uint32 next_refresh_time = 11;
  if (this->next_refresh_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->next_refresh_time(), target);
  }

  // uint32 boss_chest_num = 12;
  if (this->boss_chest_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->boss_chest_num(), target);
  }

  // uint32 max_boss_chest_num = 13;
  if (this->max_boss_chest_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->max_boss_chest_num(), target);
  }

  // uint32 start_time = 15;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->start_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEntryInfo)
  return target;
}

size_t DungeonEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEntryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
  if (this->has_weekly_boss_resin_discount_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->weekly_boss_resin_discount_info_);
  }

  // bool is_passed = 4;
  if (this->is_passed() != 0) {
    total_size += 1 + 1;
  }

  // uint32 dungeon_id = 5;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // uint32 end_time = 6;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  // uint32 left_times = 7;
  if (this->left_times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left_times());
  }

  // uint32 next_refresh_time = 11;
  if (this->next_refresh_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->next_refresh_time());
  }

  // uint32 boss_chest_num = 12;
  if (this->boss_chest_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->boss_chest_num());
  }

  // uint32 max_boss_chest_num = 13;
  if (this->max_boss_chest_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max_boss_chest_num());
  }

  // uint32 start_time = 15;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEntryInfo)
    MergeFrom(*source);
  }
}

void DungeonEntryInfo::MergeFrom(const DungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_weekly_boss_resin_discount_info()) {
    mutable_weekly_boss_resin_discount_info()->::proto::WeeklyBossResinDiscountInfo::MergeFrom(from.weekly_boss_resin_discount_info());
  }
  if (from.is_passed() != 0) {
    set_is_passed(from.is_passed());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.left_times() != 0) {
    set_left_times(from.left_times());
  }
  if (from.next_refresh_time() != 0) {
    set_next_refresh_time(from.next_refresh_time());
  }
  if (from.boss_chest_num() != 0) {
    set_boss_chest_num(from.boss_chest_num());
  }
  if (from.max_boss_chest_num() != 0) {
    set_max_boss_chest_num(from.max_boss_chest_num());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
}

void DungeonEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEntryInfo::CopyFrom(const DungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEntryInfo::IsInitialized() const {
  return true;
}

void DungeonEntryInfo::Swap(DungeonEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEntryInfo::InternalSwap(DungeonEntryInfo* other) {
  using std::swap;
  swap(weekly_boss_resin_discount_info_, other->weekly_boss_resin_discount_info_);
  swap(is_passed_, other->is_passed_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(end_time_, other->end_time_);
  swap(left_times_, other->left_times_);
  swap(next_refresh_time_, other->next_refresh_time_);
  swap(boss_chest_num_, other->boss_chest_num_);
  swap(max_boss_chest_num_, other->max_boss_chest_num_);
  swap(start_time_, other->start_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEntryInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEntryInfo

// uint32 end_time = 6;
void DungeonEntryInfo::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::end_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.end_time)
  return end_time_;
}
void DungeonEntryInfo::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.end_time)
}

// uint32 dungeon_id = 5;
void DungeonEntryInfo::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.dungeon_id)
  return dungeon_id_;
}
void DungeonEntryInfo::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.dungeon_id)
}

// uint32 boss_chest_num = 12;
void DungeonEntryInfo::clear_boss_chest_num() {
  boss_chest_num_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::boss_chest_num() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.boss_chest_num)
  return boss_chest_num_;
}
void DungeonEntryInfo::set_boss_chest_num(::google::protobuf::uint32 value) {
  
  boss_chest_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.boss_chest_num)
}

// uint32 max_boss_chest_num = 13;
void DungeonEntryInfo::clear_max_boss_chest_num() {
  max_boss_chest_num_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::max_boss_chest_num() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.max_boss_chest_num)
  return max_boss_chest_num_;
}
void DungeonEntryInfo::set_max_boss_chest_num(::google::protobuf::uint32 value) {
  
  max_boss_chest_num_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.max_boss_chest_num)
}

// uint32 next_refresh_time = 11;
void DungeonEntryInfo::clear_next_refresh_time() {
  next_refresh_time_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::next_refresh_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.next_refresh_time)
  return next_refresh_time_;
}
void DungeonEntryInfo::set_next_refresh_time(::google::protobuf::uint32 value) {
  
  next_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.next_refresh_time)
}

// .proto.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
bool DungeonEntryInfo::has_weekly_boss_resin_discount_info() const {
  return this != internal_default_instance() && weekly_boss_resin_discount_info_ != NULL;
}
void DungeonEntryInfo::clear_weekly_boss_resin_discount_info() {
  if (GetArenaNoVirtual() == NULL && weekly_boss_resin_discount_info_ != NULL) delete weekly_boss_resin_discount_info_;
  weekly_boss_resin_discount_info_ = NULL;
}
const ::proto::WeeklyBossResinDiscountInfo& DungeonEntryInfo::weekly_boss_resin_discount_info() const {
  const ::proto::WeeklyBossResinDiscountInfo* p = weekly_boss_resin_discount_info_;
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::WeeklyBossResinDiscountInfo*>(
      &::proto::_WeeklyBossResinDiscountInfo_default_instance_);
}
::proto::WeeklyBossResinDiscountInfo* DungeonEntryInfo::mutable_weekly_boss_resin_discount_info() {
  
  if (weekly_boss_resin_discount_info_ == NULL) {
    weekly_boss_resin_discount_info_ = new ::proto::WeeklyBossResinDiscountInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
  return weekly_boss_resin_discount_info_;
}
::proto::WeeklyBossResinDiscountInfo* DungeonEntryInfo::release_weekly_boss_resin_discount_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
  
  ::proto::WeeklyBossResinDiscountInfo* temp = weekly_boss_resin_discount_info_;
  weekly_boss_resin_discount_info_ = NULL;
  return temp;
}
void DungeonEntryInfo::set_allocated_weekly_boss_resin_discount_info(::proto::WeeklyBossResinDiscountInfo* weekly_boss_resin_discount_info) {
  delete weekly_boss_resin_discount_info_;
  weekly_boss_resin_discount_info_ = weekly_boss_resin_discount_info;
  if (weekly_boss_resin_discount_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonEntryInfo.weekly_boss_resin_discount_info)
}

// uint32 start_time = 15;
void DungeonEntryInfo::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.start_time)
  return start_time_;
}
void DungeonEntryInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.start_time)
}

// bool is_passed = 4;
void DungeonEntryInfo::clear_is_passed() {
  is_passed_ = false;
}
bool DungeonEntryInfo::is_passed() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.is_passed)
  return is_passed_;
}
void DungeonEntryInfo::set_is_passed(bool value) {
  
  is_passed_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.is_passed)
}

// uint32 left_times = 7;
void DungeonEntryInfo::clear_left_times() {
  left_times_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfo::left_times() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfo.left_times)
  return left_times_;
}
void DungeonEntryInfo::set_left_times(::google::protobuf::uint32 value) {
  
  left_times_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfo.left_times)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEntryPointInfo::kSceneIdFieldNumber;
const int DungeonEntryPointInfo::kPointIdFieldNumber;
const int DungeonEntryPointInfo::kDungeonEntryListFieldNumber;
const int DungeonEntryPointInfo::kRecommendDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEntryPointInfo::DungeonEntryPointInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEntryPointInfo)
}
DungeonEntryPointInfo::DungeonEntryPointInfo(const DungeonEntryPointInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dungeon_entry_list_(from.dungeon_entry_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&scene_id_, &from.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recommend_dungeon_id_) -
    reinterpret_cast<char*>(&scene_id_)) + sizeof(recommend_dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEntryPointInfo)
}

void DungeonEntryPointInfo::SharedCtor() {
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(recommend_dungeon_id_));
  _cached_size_ = 0;
}

DungeonEntryPointInfo::~DungeonEntryPointInfo() {
  // @@protoc_insertion_point(destructor:proto.DungeonEntryPointInfo)
  SharedDtor();
}

void DungeonEntryPointInfo::SharedDtor() {
}

void DungeonEntryPointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEntryPointInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEntryPointInfo& DungeonEntryPointInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEntryPointInfo* DungeonEntryPointInfo::New(::google::protobuf::Arena* arena) const {
  DungeonEntryPointInfo* n = new DungeonEntryPointInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEntryPointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEntryPointInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dungeon_entry_list_.Clear();
  ::memset(&scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&scene_id_)) + sizeof(recommend_dungeon_id_));
  _internal_metadata_.Clear();
}

bool DungeonEntryPointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEntryPointInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.DungeonEntryInfo dungeon_entry_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeon_entry_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recommend_dungeon_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recommend_dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEntryPointInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEntryPointInfo)
  return false;
#undef DO_
}

void DungeonEntryPointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEntryPointInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dungeon_entry_list(static_cast<int>(i)), output);
  }

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->point_id(), output);
  }

  // uint32 recommend_dungeon_id = 8;
  if (this->recommend_dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->recommend_dungeon_id(), output);
  }

  // uint32 scene_id = 12;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->scene_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEntryPointInfo)
}

::google::protobuf::uint8* DungeonEntryPointInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEntryPointInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->dungeon_entry_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->point_id(), target);
  }

  // uint32 recommend_dungeon_id = 8;
  if (this->recommend_dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->recommend_dungeon_id(), target);
  }

  // uint32 scene_id = 12;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->scene_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEntryPointInfo)
  return target;
}

size_t DungeonEntryPointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEntryPointInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->dungeon_entry_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_entry_list(static_cast<int>(i)));
    }
  }

  // uint32 scene_id = 12;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 recommend_dungeon_id = 8;
  if (this->recommend_dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recommend_dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEntryPointInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEntryPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEntryPointInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEntryPointInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEntryPointInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEntryPointInfo)
    MergeFrom(*source);
  }
}

void DungeonEntryPointInfo::MergeFrom(const DungeonEntryPointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEntryPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dungeon_entry_list_.MergeFrom(from.dungeon_entry_list_);
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.recommend_dungeon_id() != 0) {
    set_recommend_dungeon_id(from.recommend_dungeon_id());
  }
}

void DungeonEntryPointInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEntryPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEntryPointInfo::CopyFrom(const DungeonEntryPointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEntryPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEntryPointInfo::IsInitialized() const {
  return true;
}

void DungeonEntryPointInfo::Swap(DungeonEntryPointInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEntryPointInfo::InternalSwap(DungeonEntryPointInfo* other) {
  using std::swap;
  dungeon_entry_list_.InternalSwap(&other->dungeon_entry_list_);
  swap(scene_id_, other->scene_id_);
  swap(point_id_, other->point_id_);
  swap(recommend_dungeon_id_, other->recommend_dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEntryPointInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEntryPointInfo

// uint32 scene_id = 12;
void DungeonEntryPointInfo::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryPointInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.scene_id)
  return scene_id_;
}
void DungeonEntryPointInfo::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryPointInfo.scene_id)
}

// uint32 point_id = 6;
void DungeonEntryPointInfo::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryPointInfo::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.point_id)
  return point_id_;
}
void DungeonEntryPointInfo::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryPointInfo.point_id)
}

// repeated .proto.DungeonEntryInfo dungeon_entry_list = 1;
int DungeonEntryPointInfo::dungeon_entry_list_size() const {
  return dungeon_entry_list_.size();
}
void DungeonEntryPointInfo::clear_dungeon_entry_list() {
  dungeon_entry_list_.Clear();
}
const ::proto::DungeonEntryInfo& DungeonEntryPointInfo::dungeon_entry_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_.Get(index);
}
::proto::DungeonEntryInfo* DungeonEntryPointInfo::mutable_dungeon_entry_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_.Mutable(index);
}
::proto::DungeonEntryInfo* DungeonEntryPointInfo::add_dungeon_entry_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >*
DungeonEntryPointInfo::mutable_dungeon_entry_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return &dungeon_entry_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >&
DungeonEntryPointInfo::dungeon_entry_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryPointInfo.dungeon_entry_list)
  return dungeon_entry_list_;
}

// uint32 recommend_dungeon_id = 8;
void DungeonEntryPointInfo::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryPointInfo::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryPointInfo.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
void DungeonEntryPointInfo::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryPointInfo.recommend_dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEntryInfoRsp::kDungeonEntryListFieldNumber;
const int DungeonEntryInfoRsp::kPointIdFieldNumber;
const int DungeonEntryInfoRsp::kDungeonEntryPointListFieldNumber;
const int DungeonEntryInfoRsp::kRecommendDungeonIdFieldNumber;
const int DungeonEntryInfoRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEntryInfoRsp::DungeonEntryInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEntryInfoRsp)
}
DungeonEntryInfoRsp::DungeonEntryInfoRsp(const DungeonEntryInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      dungeon_entry_point_list_(from.dungeon_entry_point_list_),
      dungeon_entry_list_(from.dungeon_entry_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_id_, &from.point_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&recommend_dungeon_id_) -
    reinterpret_cast<char*>(&point_id_)) + sizeof(recommend_dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEntryInfoRsp)
}

void DungeonEntryInfoRsp::SharedCtor() {
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(recommend_dungeon_id_));
  _cached_size_ = 0;
}

DungeonEntryInfoRsp::~DungeonEntryInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonEntryInfoRsp)
  SharedDtor();
}

void DungeonEntryInfoRsp::SharedDtor() {
}

void DungeonEntryInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEntryInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEntryInfoRsp& DungeonEntryInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEntryInfoRsp* DungeonEntryInfoRsp::New(::google::protobuf::Arena* arena) const {
  DungeonEntryInfoRsp* n = new DungeonEntryInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEntryInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dungeon_entry_point_list_.Clear();
  dungeon_entry_list_.Clear();
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recommend_dungeon_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(recommend_dungeon_id_));
  _internal_metadata_.Clear();
}

bool DungeonEntryInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEntryInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.DungeonEntryPointInfo dungeon_entry_point_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeon_entry_point_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.DungeonEntryInfo dungeon_entry_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeon_entry_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recommend_dungeon_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recommend_dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEntryInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEntryInfoRsp)
  return false;
#undef DO_
}

void DungeonEntryInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.DungeonEntryPointInfo dungeon_entry_point_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_point_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dungeon_entry_point_list(static_cast<int>(i)), output);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->retcode(), output);
  }

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->dungeon_entry_list(static_cast<int>(i)), output);
  }

  // uint32 recommend_dungeon_id = 14;
  if (this->recommend_dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->recommend_dungeon_id(), output);
  }

  // uint32 point_id = 15;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEntryInfoRsp)
}

::google::protobuf::uint8* DungeonEntryInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.DungeonEntryPointInfo dungeon_entry_point_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_point_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->dungeon_entry_point_list(static_cast<int>(i)), deterministic, target);
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->retcode(), target);
  }

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dungeon_entry_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->dungeon_entry_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 recommend_dungeon_id = 14;
  if (this->recommend_dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->recommend_dungeon_id(), target);
  }

  // uint32 point_id = 15;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEntryInfoRsp)
  return target;
}

size_t DungeonEntryInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEntryInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.DungeonEntryPointInfo dungeon_entry_point_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->dungeon_entry_point_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_entry_point_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.DungeonEntryInfo dungeon_entry_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->dungeon_entry_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dungeon_entry_list(static_cast<int>(i)));
    }
  }

  // uint32 point_id = 15;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // int32 retcode = 11;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 recommend_dungeon_id = 14;
  if (this->recommend_dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recommend_dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEntryInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEntryInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEntryInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEntryInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEntryInfoRsp)
    MergeFrom(*source);
  }
}

void DungeonEntryInfoRsp::MergeFrom(const DungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dungeon_entry_point_list_.MergeFrom(from.dungeon_entry_point_list_);
  dungeon_entry_list_.MergeFrom(from.dungeon_entry_list_);
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.recommend_dungeon_id() != 0) {
    set_recommend_dungeon_id(from.recommend_dungeon_id());
  }
}

void DungeonEntryInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEntryInfoRsp::CopyFrom(const DungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEntryInfoRsp::IsInitialized() const {
  return true;
}

void DungeonEntryInfoRsp::Swap(DungeonEntryInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEntryInfoRsp::InternalSwap(DungeonEntryInfoRsp* other) {
  using std::swap;
  dungeon_entry_point_list_.InternalSwap(&other->dungeon_entry_point_list_);
  dungeon_entry_list_.InternalSwap(&other->dungeon_entry_list_);
  swap(point_id_, other->point_id_);
  swap(retcode_, other->retcode_);
  swap(recommend_dungeon_id_, other->recommend_dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEntryInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEntryInfoRsp

// repeated .proto.DungeonEntryInfo dungeon_entry_list = 12;
int DungeonEntryInfoRsp::dungeon_entry_list_size() const {
  return dungeon_entry_list_.size();
}
void DungeonEntryInfoRsp::clear_dungeon_entry_list() {
  dungeon_entry_list_.Clear();
}
const ::proto::DungeonEntryInfo& DungeonEntryInfoRsp::dungeon_entry_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Get(index);
}
::proto::DungeonEntryInfo* DungeonEntryInfoRsp::mutable_dungeon_entry_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Mutable(index);
}
::proto::DungeonEntryInfo* DungeonEntryInfoRsp::add_dungeon_entry_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >*
DungeonEntryInfoRsp::mutable_dungeon_entry_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return &dungeon_entry_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryInfo >&
DungeonEntryInfoRsp::dungeon_entry_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryInfoRsp.dungeon_entry_list)
  return dungeon_entry_list_;
}

// uint32 point_id = 15;
void DungeonEntryInfoRsp::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfoRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.point_id)
  return point_id_;
}
void DungeonEntryInfoRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.point_id)
}

// repeated .proto.DungeonEntryPointInfo dungeon_entry_point_list = 4;
int DungeonEntryInfoRsp::dungeon_entry_point_list_size() const {
  return dungeon_entry_point_list_.size();
}
void DungeonEntryInfoRsp::clear_dungeon_entry_point_list() {
  dungeon_entry_point_list_.Clear();
}
const ::proto::DungeonEntryPointInfo& DungeonEntryInfoRsp::dungeon_entry_point_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_.Get(index);
}
::proto::DungeonEntryPointInfo* DungeonEntryInfoRsp::mutable_dungeon_entry_point_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_.Mutable(index);
}
::proto::DungeonEntryPointInfo* DungeonEntryInfoRsp::add_dungeon_entry_point_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryPointInfo >*
DungeonEntryInfoRsp::mutable_dungeon_entry_point_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return &dungeon_entry_point_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DungeonEntryPointInfo >&
DungeonEntryInfoRsp::dungeon_entry_point_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonEntryInfoRsp.dungeon_entry_point_list)
  return dungeon_entry_point_list_;
}

// uint32 recommend_dungeon_id = 14;
void DungeonEntryInfoRsp::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonEntryInfoRsp::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
void DungeonEntryInfoRsp::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.recommend_dungeon_id)
}

// int32 retcode = 11;
void DungeonEntryInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonEntryInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEntryInfoRsp.retcode)
  return retcode_;
}
void DungeonEntryInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEntryInfoRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonEnterPosInfo::kQuestIdFieldNumber;
const int DungeonEnterPosInfo::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonEnterPosInfo::DungeonEnterPosInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonEnterPosInfo)
}
DungeonEnterPosInfo::DungeonEnterPosInfo(const DungeonEnterPosInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_id_, &from.point_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quest_id_) -
    reinterpret_cast<char*>(&point_id_)) + sizeof(quest_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonEnterPosInfo)
}

void DungeonEnterPosInfo::SharedCtor() {
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quest_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(quest_id_));
  _cached_size_ = 0;
}

DungeonEnterPosInfo::~DungeonEnterPosInfo() {
  // @@protoc_insertion_point(destructor:proto.DungeonEnterPosInfo)
  SharedDtor();
}

void DungeonEnterPosInfo::SharedDtor() {
}

void DungeonEnterPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonEnterPosInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonEnterPosInfo& DungeonEnterPosInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonEnterPosInfo* DungeonEnterPosInfo::New(::google::protobuf::Arena* arena) const {
  DungeonEnterPosInfo* n = new DungeonEnterPosInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonEnterPosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonEnterPosInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quest_id_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(quest_id_));
  _internal_metadata_.Clear();
}

bool DungeonEnterPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonEnterPosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 quest_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quest_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonEnterPosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonEnterPosInfo)
  return false;
#undef DO_
}

void DungeonEnterPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonEnterPosInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->point_id(), output);
  }

  // uint32 quest_id = 13;
  if (this->quest_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->quest_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonEnterPosInfo)
}

::google::protobuf::uint8* DungeonEnterPosInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonEnterPosInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->point_id(), target);
  }

  // uint32 quest_id = 13;
  if (this->quest_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->quest_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonEnterPosInfo)
  return target;
}

size_t DungeonEnterPosInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonEnterPosInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 quest_id = 13;
  if (this->quest_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->quest_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonEnterPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonEnterPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonEnterPosInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonEnterPosInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonEnterPosInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonEnterPosInfo)
    MergeFrom(*source);
  }
}

void DungeonEnterPosInfo::MergeFrom(const DungeonEnterPosInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonEnterPosInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.quest_id() != 0) {
    set_quest_id(from.quest_id());
  }
}

void DungeonEnterPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonEnterPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonEnterPosInfo::CopyFrom(const DungeonEnterPosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonEnterPosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonEnterPosInfo::IsInitialized() const {
  return true;
}

void DungeonEnterPosInfo::Swap(DungeonEnterPosInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonEnterPosInfo::InternalSwap(DungeonEnterPosInfo* other) {
  using std::swap;
  swap(point_id_, other->point_id_);
  swap(quest_id_, other->quest_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonEnterPosInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonEnterPosInfo

// uint32 quest_id = 13;
void DungeonEnterPosInfo::clear_quest_id() {
  quest_id_ = 0u;
}
::google::protobuf::uint32 DungeonEnterPosInfo::quest_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEnterPosInfo.quest_id)
  return quest_id_;
}
void DungeonEnterPosInfo::set_quest_id(::google::protobuf::uint32 value) {
  
  quest_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEnterPosInfo.quest_id)
}

// uint32 point_id = 6;
void DungeonEnterPosInfo::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonEnterPosInfo::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonEnterPosInfo.point_id)
  return point_id_;
}
void DungeonEnterPosInfo::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonEnterPosInfo.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEnterDungeonReq::kEnterPosInfoFieldNumber;
const int PlayerEnterDungeonReq::kPointIdFieldNumber;
const int PlayerEnterDungeonReq::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEnterDungeonReq::PlayerEnterDungeonReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerEnterDungeonReq)
}
PlayerEnterDungeonReq::PlayerEnterDungeonReq(const PlayerEnterDungeonReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_enter_pos_info()) {
    enter_pos_info_ = new ::proto::DungeonEnterPosInfo(*from.enter_pos_info_);
  } else {
    enter_pos_info_ = NULL;
  }
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerEnterDungeonReq)
}

void PlayerEnterDungeonReq::SharedCtor() {
  ::memset(&enter_pos_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&enter_pos_info_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

PlayerEnterDungeonReq::~PlayerEnterDungeonReq() {
  // @@protoc_insertion_point(destructor:proto.PlayerEnterDungeonReq)
  SharedDtor();
}

void PlayerEnterDungeonReq::SharedDtor() {
  if (this != internal_default_instance()) delete enter_pos_info_;
}

void PlayerEnterDungeonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterDungeonReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEnterDungeonReq& PlayerEnterDungeonReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerEnterDungeonReq* PlayerEnterDungeonReq::New(::google::protobuf::Arena* arena) const {
  PlayerEnterDungeonReq* n = new PlayerEnterDungeonReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEnterDungeonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerEnterDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && enter_pos_info_ != NULL) {
    delete enter_pos_info_;
  }
  enter_pos_info_ = NULL;
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool PlayerEnterDungeonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerEnterDungeonReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.DungeonEnterPosInfo enter_pos_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enter_pos_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerEnterDungeonReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerEnterDungeonReq)
  return false;
#undef DO_
}

void PlayerEnterDungeonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerEnterDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonEnterPosInfo enter_pos_info = 2;
  if (this->has_enter_pos_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->enter_pos_info_, output);
  }

  // uint32 dungeon_id = 7;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dungeon_id(), output);
  }

  // uint32 point_id = 13;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerEnterDungeonReq)
}

::google::protobuf::uint8* PlayerEnterDungeonReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerEnterDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonEnterPosInfo enter_pos_info = 2;
  if (this->has_enter_pos_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->enter_pos_info_, deterministic, target);
  }

  // uint32 dungeon_id = 7;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dungeon_id(), target);
  }

  // uint32 point_id = 13;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerEnterDungeonReq)
  return target;
}

size_t PlayerEnterDungeonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerEnterDungeonReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.DungeonEnterPosInfo enter_pos_info = 2;
  if (this->has_enter_pos_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->enter_pos_info_);
  }

  // uint32 dungeon_id = 7;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // uint32 point_id = 13;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterDungeonReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerEnterDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterDungeonReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEnterDungeonReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerEnterDungeonReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerEnterDungeonReq)
    MergeFrom(*source);
  }
}

void PlayerEnterDungeonReq::MergeFrom(const PlayerEnterDungeonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerEnterDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enter_pos_info()) {
    mutable_enter_pos_info()->::proto::DungeonEnterPosInfo::MergeFrom(from.enter_pos_info());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void PlayerEnterDungeonReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerEnterDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterDungeonReq::CopyFrom(const PlayerEnterDungeonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerEnterDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterDungeonReq::IsInitialized() const {
  return true;
}

void PlayerEnterDungeonReq::Swap(PlayerEnterDungeonReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEnterDungeonReq::InternalSwap(PlayerEnterDungeonReq* other) {
  using std::swap;
  swap(enter_pos_info_, other->enter_pos_info_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEnterDungeonReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerEnterDungeonReq

// .proto.DungeonEnterPosInfo enter_pos_info = 2;
bool PlayerEnterDungeonReq::has_enter_pos_info() const {
  return this != internal_default_instance() && enter_pos_info_ != NULL;
}
void PlayerEnterDungeonReq::clear_enter_pos_info() {
  if (GetArenaNoVirtual() == NULL && enter_pos_info_ != NULL) delete enter_pos_info_;
  enter_pos_info_ = NULL;
}
const ::proto::DungeonEnterPosInfo& PlayerEnterDungeonReq::enter_pos_info() const {
  const ::proto::DungeonEnterPosInfo* p = enter_pos_info_;
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.enter_pos_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::DungeonEnterPosInfo*>(
      &::proto::_DungeonEnterPosInfo_default_instance_);
}
::proto::DungeonEnterPosInfo* PlayerEnterDungeonReq::mutable_enter_pos_info() {
  
  if (enter_pos_info_ == NULL) {
    enter_pos_info_ = new ::proto::DungeonEnterPosInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.PlayerEnterDungeonReq.enter_pos_info)
  return enter_pos_info_;
}
::proto::DungeonEnterPosInfo* PlayerEnterDungeonReq::release_enter_pos_info() {
  // @@protoc_insertion_point(field_release:proto.PlayerEnterDungeonReq.enter_pos_info)
  
  ::proto::DungeonEnterPosInfo* temp = enter_pos_info_;
  enter_pos_info_ = NULL;
  return temp;
}
void PlayerEnterDungeonReq::set_allocated_enter_pos_info(::proto::DungeonEnterPosInfo* enter_pos_info) {
  delete enter_pos_info_;
  enter_pos_info_ = enter_pos_info;
  if (enter_pos_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PlayerEnterDungeonReq.enter_pos_info)
}

// uint32 point_id = 13;
void PlayerEnterDungeonReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.point_id)
  return point_id_;
}
void PlayerEnterDungeonReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonReq.point_id)
}

// uint32 dungeon_id = 7;
void PlayerEnterDungeonReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonReq.dungeon_id)
  return dungeon_id_;
}
void PlayerEnterDungeonReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonReq.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerEnterDungeonRsp::kDungeonIdFieldNumber;
const int PlayerEnterDungeonRsp::kPointIdFieldNumber;
const int PlayerEnterDungeonRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerEnterDungeonRsp::PlayerEnterDungeonRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerEnterDungeonRsp)
}
PlayerEnterDungeonRsp::PlayerEnterDungeonRsp(const PlayerEnterDungeonRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerEnterDungeonRsp)
}

void PlayerEnterDungeonRsp::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

PlayerEnterDungeonRsp::~PlayerEnterDungeonRsp() {
  // @@protoc_insertion_point(destructor:proto.PlayerEnterDungeonRsp)
  SharedDtor();
}

void PlayerEnterDungeonRsp::SharedDtor() {
}

void PlayerEnterDungeonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerEnterDungeonRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerEnterDungeonRsp& PlayerEnterDungeonRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerEnterDungeonRsp* PlayerEnterDungeonRsp::New(::google::protobuf::Arena* arena) const {
  PlayerEnterDungeonRsp* n = new PlayerEnterDungeonRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerEnterDungeonRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerEnterDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool PlayerEnterDungeonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerEnterDungeonRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerEnterDungeonRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerEnterDungeonRsp)
  return false;
#undef DO_
}

void PlayerEnterDungeonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerEnterDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dungeon_id(), output);
  }

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerEnterDungeonRsp)
}

::google::protobuf::uint8* PlayerEnterDungeonRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerEnterDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dungeon_id(), target);
  }

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerEnterDungeonRsp)
  return target;
}

size_t PlayerEnterDungeonRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerEnterDungeonRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 2;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 point_id = 6;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnterDungeonRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerEnterDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEnterDungeonRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerEnterDungeonRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerEnterDungeonRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerEnterDungeonRsp)
    MergeFrom(*source);
  }
}

void PlayerEnterDungeonRsp::MergeFrom(const PlayerEnterDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerEnterDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void PlayerEnterDungeonRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerEnterDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEnterDungeonRsp::CopyFrom(const PlayerEnterDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerEnterDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnterDungeonRsp::IsInitialized() const {
  return true;
}

void PlayerEnterDungeonRsp::Swap(PlayerEnterDungeonRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerEnterDungeonRsp::InternalSwap(PlayerEnterDungeonRsp* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(retcode_, other->retcode_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerEnterDungeonRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerEnterDungeonRsp

// uint32 dungeon_id = 2;
void PlayerEnterDungeonRsp::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonRsp::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.dungeon_id)
  return dungeon_id_;
}
void PlayerEnterDungeonRsp::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.dungeon_id)
}

// uint32 point_id = 6;
void PlayerEnterDungeonRsp::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerEnterDungeonRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.point_id)
  return point_id_;
}
void PlayerEnterDungeonRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.point_id)
}

// int32 retcode = 5;
void PlayerEnterDungeonRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 PlayerEnterDungeonRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerEnterDungeonRsp.retcode)
  return retcode_;
}
void PlayerEnterDungeonRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerEnterDungeonRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerQuitDungeonReq::kIsQuitImmediatelyFieldNumber;
const int PlayerQuitDungeonReq::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuitDungeonReq::PlayerQuitDungeonReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerQuitDungeonReq)
}
PlayerQuitDungeonReq::PlayerQuitDungeonReq(const PlayerQuitDungeonReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&point_id_, &from.point_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_quit_immediately_) -
    reinterpret_cast<char*>(&point_id_)) + sizeof(is_quit_immediately_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerQuitDungeonReq)
}

void PlayerQuitDungeonReq::SharedCtor() {
  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_quit_immediately_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(is_quit_immediately_));
  _cached_size_ = 0;
}

PlayerQuitDungeonReq::~PlayerQuitDungeonReq() {
  // @@protoc_insertion_point(destructor:proto.PlayerQuitDungeonReq)
  SharedDtor();
}

void PlayerQuitDungeonReq::SharedDtor() {
}

void PlayerQuitDungeonReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerQuitDungeonReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerQuitDungeonReq& PlayerQuitDungeonReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerQuitDungeonReq* PlayerQuitDungeonReq::New(::google::protobuf::Arena* arena) const {
  PlayerQuitDungeonReq* n = new PlayerQuitDungeonReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerQuitDungeonReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerQuitDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&point_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_quit_immediately_) -
      reinterpret_cast<char*>(&point_id_)) + sizeof(is_quit_immediately_));
  _internal_metadata_.Clear();
}

bool PlayerQuitDungeonReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerQuitDungeonReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_quit_immediately = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quit_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerQuitDungeonReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerQuitDungeonReq)
  return false;
#undef DO_
}

void PlayerQuitDungeonReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerQuitDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->point_id(), output);
  }

  // bool is_quit_immediately = 10;
  if (this->is_quit_immediately() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_quit_immediately(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerQuitDungeonReq)
}

::google::protobuf::uint8* PlayerQuitDungeonReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerQuitDungeonReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->point_id(), target);
  }

  // bool is_quit_immediately = 10;
  if (this->is_quit_immediately() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_quit_immediately(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerQuitDungeonReq)
  return target;
}

size_t PlayerQuitDungeonReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerQuitDungeonReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // bool is_quit_immediately = 10;
  if (this->is_quit_immediately() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerQuitDungeonReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerQuitDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuitDungeonReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerQuitDungeonReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerQuitDungeonReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerQuitDungeonReq)
    MergeFrom(*source);
  }
}

void PlayerQuitDungeonReq::MergeFrom(const PlayerQuitDungeonReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerQuitDungeonReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.is_quit_immediately() != 0) {
    set_is_quit_immediately(from.is_quit_immediately());
  }
}

void PlayerQuitDungeonReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerQuitDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuitDungeonReq::CopyFrom(const PlayerQuitDungeonReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerQuitDungeonReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuitDungeonReq::IsInitialized() const {
  return true;
}

void PlayerQuitDungeonReq::Swap(PlayerQuitDungeonReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuitDungeonReq::InternalSwap(PlayerQuitDungeonReq* other) {
  using std::swap;
  swap(point_id_, other->point_id_);
  swap(is_quit_immediately_, other->is_quit_immediately_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerQuitDungeonReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerQuitDungeonReq

// bool is_quit_immediately = 10;
void PlayerQuitDungeonReq::clear_is_quit_immediately() {
  is_quit_immediately_ = false;
}
bool PlayerQuitDungeonReq::is_quit_immediately() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonReq.is_quit_immediately)
  return is_quit_immediately_;
}
void PlayerQuitDungeonReq::set_is_quit_immediately(bool value) {
  
  is_quit_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonReq.is_quit_immediately)
}

// uint32 point_id = 7;
void PlayerQuitDungeonReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerQuitDungeonReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonReq.point_id)
  return point_id_;
}
void PlayerQuitDungeonReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonReq.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerQuitDungeonRsp::kPointIdFieldNumber;
const int PlayerQuitDungeonRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerQuitDungeonRsp::PlayerQuitDungeonRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PlayerQuitDungeonRsp)
}
PlayerQuitDungeonRsp::PlayerQuitDungeonRsp(const PlayerQuitDungeonRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.PlayerQuitDungeonRsp)
}

void PlayerQuitDungeonRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

PlayerQuitDungeonRsp::~PlayerQuitDungeonRsp() {
  // @@protoc_insertion_point(destructor:proto.PlayerQuitDungeonRsp)
  SharedDtor();
}

void PlayerQuitDungeonRsp::SharedDtor() {
}

void PlayerQuitDungeonRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerQuitDungeonRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerQuitDungeonRsp& PlayerQuitDungeonRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerQuitDungeonRsp* PlayerQuitDungeonRsp::New(::google::protobuf::Arena* arena) const {
  PlayerQuitDungeonRsp* n = new PlayerQuitDungeonRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerQuitDungeonRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PlayerQuitDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool PlayerQuitDungeonRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PlayerQuitDungeonRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PlayerQuitDungeonRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PlayerQuitDungeonRsp)
  return false;
#undef DO_
}

void PlayerQuitDungeonRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PlayerQuitDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 7;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->retcode(), output);
  }

  // uint32 point_id = 11;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.PlayerQuitDungeonRsp)
}

::google::protobuf::uint8* PlayerQuitDungeonRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.PlayerQuitDungeonRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 7;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->retcode(), target);
  }

  // uint32 point_id = 11;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.PlayerQuitDungeonRsp)
  return target;
}

size_t PlayerQuitDungeonRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PlayerQuitDungeonRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 7;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 point_id = 11;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerQuitDungeonRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.PlayerQuitDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerQuitDungeonRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerQuitDungeonRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.PlayerQuitDungeonRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.PlayerQuitDungeonRsp)
    MergeFrom(*source);
  }
}

void PlayerQuitDungeonRsp::MergeFrom(const PlayerQuitDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PlayerQuitDungeonRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void PlayerQuitDungeonRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.PlayerQuitDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerQuitDungeonRsp::CopyFrom(const PlayerQuitDungeonRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PlayerQuitDungeonRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerQuitDungeonRsp::IsInitialized() const {
  return true;
}

void PlayerQuitDungeonRsp::Swap(PlayerQuitDungeonRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerQuitDungeonRsp::InternalSwap(PlayerQuitDungeonRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerQuitDungeonRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerQuitDungeonRsp

// uint32 point_id = 11;
void PlayerQuitDungeonRsp::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 PlayerQuitDungeonRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonRsp.point_id)
  return point_id_;
}
void PlayerQuitDungeonRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonRsp.point_id)
}

// int32 retcode = 7;
void PlayerQuitDungeonRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 PlayerQuitDungeonRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.PlayerQuitDungeonRsp.retcode)
  return retcode_;
}
void PlayerQuitDungeonRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.PlayerQuitDungeonRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonWayPointNotify::kIsAddFieldNumber;
const int DungeonWayPointNotify::kActiveWayPointListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonWayPointNotify::DungeonWayPointNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonWayPointNotify)
}
DungeonWayPointNotify::DungeonWayPointNotify(const DungeonWayPointNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      active_way_point_list_(from.active_way_point_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_add_ = from.is_add_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonWayPointNotify)
}

void DungeonWayPointNotify::SharedCtor() {
  is_add_ = false;
  _cached_size_ = 0;
}

DungeonWayPointNotify::~DungeonWayPointNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonWayPointNotify)
  SharedDtor();
}

void DungeonWayPointNotify::SharedDtor() {
}

void DungeonWayPointNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonWayPointNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonWayPointNotify& DungeonWayPointNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonWayPointNotify* DungeonWayPointNotify::New(::google::protobuf::Arena* arena) const {
  DungeonWayPointNotify* n = new DungeonWayPointNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonWayPointNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonWayPointNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  active_way_point_list_.Clear();
  is_add_ = false;
  _internal_metadata_.Clear();
}

bool DungeonWayPointNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonWayPointNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 active_way_point_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_active_way_point_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_active_way_point_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_add = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_add_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonWayPointNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonWayPointNotify)
  return false;
#undef DO_
}

void DungeonWayPointNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonWayPointNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 active_way_point_list = 4;
  if (this->active_way_point_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _active_way_point_list_cached_byte_size_));
  }
  for (int i = 0, n = this->active_way_point_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->active_way_point_list(i), output);
  }

  // bool is_add = 9;
  if (this->is_add() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_add(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonWayPointNotify)
}

::google::protobuf::uint8* DungeonWayPointNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonWayPointNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 active_way_point_list = 4;
  if (this->active_way_point_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _active_way_point_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->active_way_point_list_, target);
  }

  // bool is_add = 9;
  if (this->is_add() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_add(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonWayPointNotify)
  return target;
}

size_t DungeonWayPointNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonWayPointNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 active_way_point_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->active_way_point_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _active_way_point_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool is_add = 9;
  if (this->is_add() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonWayPointNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonWayPointNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonWayPointNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonWayPointNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonWayPointNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonWayPointNotify)
    MergeFrom(*source);
  }
}

void DungeonWayPointNotify::MergeFrom(const DungeonWayPointNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonWayPointNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  active_way_point_list_.MergeFrom(from.active_way_point_list_);
  if (from.is_add() != 0) {
    set_is_add(from.is_add());
  }
}

void DungeonWayPointNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonWayPointNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonWayPointNotify::CopyFrom(const DungeonWayPointNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonWayPointNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonWayPointNotify::IsInitialized() const {
  return true;
}

void DungeonWayPointNotify::Swap(DungeonWayPointNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonWayPointNotify::InternalSwap(DungeonWayPointNotify* other) {
  using std::swap;
  active_way_point_list_.InternalSwap(&other->active_way_point_list_);
  swap(is_add_, other->is_add_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonWayPointNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonWayPointNotify

// bool is_add = 9;
void DungeonWayPointNotify::clear_is_add() {
  is_add_ = false;
}
bool DungeonWayPointNotify::is_add() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointNotify.is_add)
  return is_add_;
}
void DungeonWayPointNotify::set_is_add(bool value) {
  
  is_add_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointNotify.is_add)
}

// repeated uint32 active_way_point_list = 4;
int DungeonWayPointNotify::active_way_point_list_size() const {
  return active_way_point_list_.size();
}
void DungeonWayPointNotify::clear_active_way_point_list() {
  active_way_point_list_.Clear();
}
::google::protobuf::uint32 DungeonWayPointNotify::active_way_point_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointNotify.active_way_point_list)
  return active_way_point_list_.Get(index);
}
void DungeonWayPointNotify::set_active_way_point_list(int index, ::google::protobuf::uint32 value) {
  active_way_point_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointNotify.active_way_point_list)
}
void DungeonWayPointNotify::add_active_way_point_list(::google::protobuf::uint32 value) {
  active_way_point_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonWayPointNotify.active_way_point_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonWayPointNotify::active_way_point_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonWayPointNotify.active_way_point_list)
  return active_way_point_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonWayPointNotify::mutable_active_way_point_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonWayPointNotify.active_way_point_list)
  return &active_way_point_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonWayPointActivateReq::kWayPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonWayPointActivateReq::DungeonWayPointActivateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonWayPointActivateReq)
}
DungeonWayPointActivateReq::DungeonWayPointActivateReq(const DungeonWayPointActivateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  way_point_id_ = from.way_point_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonWayPointActivateReq)
}

void DungeonWayPointActivateReq::SharedCtor() {
  way_point_id_ = 0u;
  _cached_size_ = 0;
}

DungeonWayPointActivateReq::~DungeonWayPointActivateReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonWayPointActivateReq)
  SharedDtor();
}

void DungeonWayPointActivateReq::SharedDtor() {
}

void DungeonWayPointActivateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonWayPointActivateReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonWayPointActivateReq& DungeonWayPointActivateReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonWayPointActivateReq* DungeonWayPointActivateReq::New(::google::protobuf::Arena* arena) const {
  DungeonWayPointActivateReq* n = new DungeonWayPointActivateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonWayPointActivateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonWayPointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  way_point_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonWayPointActivateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonWayPointActivateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 way_point_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &way_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonWayPointActivateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonWayPointActivateReq)
  return false;
#undef DO_
}

void DungeonWayPointActivateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonWayPointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 way_point_id = 3;
  if (this->way_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->way_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonWayPointActivateReq)
}

::google::protobuf::uint8* DungeonWayPointActivateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonWayPointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 way_point_id = 3;
  if (this->way_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->way_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonWayPointActivateReq)
  return target;
}

size_t DungeonWayPointActivateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonWayPointActivateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 way_point_id = 3;
  if (this->way_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->way_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonWayPointActivateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonWayPointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonWayPointActivateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonWayPointActivateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonWayPointActivateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonWayPointActivateReq)
    MergeFrom(*source);
  }
}

void DungeonWayPointActivateReq::MergeFrom(const DungeonWayPointActivateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonWayPointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.way_point_id() != 0) {
    set_way_point_id(from.way_point_id());
  }
}

void DungeonWayPointActivateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonWayPointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonWayPointActivateReq::CopyFrom(const DungeonWayPointActivateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonWayPointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonWayPointActivateReq::IsInitialized() const {
  return true;
}

void DungeonWayPointActivateReq::Swap(DungeonWayPointActivateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonWayPointActivateReq::InternalSwap(DungeonWayPointActivateReq* other) {
  using std::swap;
  swap(way_point_id_, other->way_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonWayPointActivateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonWayPointActivateReq

// uint32 way_point_id = 3;
void DungeonWayPointActivateReq::clear_way_point_id() {
  way_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonWayPointActivateReq::way_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateReq.way_point_id)
  return way_point_id_;
}
void DungeonWayPointActivateReq::set_way_point_id(::google::protobuf::uint32 value) {
  
  way_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateReq.way_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonWayPointActivateRsp::kRetcodeFieldNumber;
const int DungeonWayPointActivateRsp::kWayPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonWayPointActivateRsp::DungeonWayPointActivateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonWayPointActivateRsp)
}
DungeonWayPointActivateRsp::DungeonWayPointActivateRsp(const DungeonWayPointActivateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&way_point_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(way_point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonWayPointActivateRsp)
}

void DungeonWayPointActivateRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&way_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(way_point_id_));
  _cached_size_ = 0;
}

DungeonWayPointActivateRsp::~DungeonWayPointActivateRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonWayPointActivateRsp)
  SharedDtor();
}

void DungeonWayPointActivateRsp::SharedDtor() {
}

void DungeonWayPointActivateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonWayPointActivateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonWayPointActivateRsp& DungeonWayPointActivateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonWayPointActivateRsp* DungeonWayPointActivateRsp::New(::google::protobuf::Arena* arena) const {
  DungeonWayPointActivateRsp* n = new DungeonWayPointActivateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonWayPointActivateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonWayPointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&way_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(way_point_id_));
  _internal_metadata_.Clear();
}

bool DungeonWayPointActivateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonWayPointActivateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 way_point_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &way_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonWayPointActivateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonWayPointActivateRsp)
  return false;
#undef DO_
}

void DungeonWayPointActivateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonWayPointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 6;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->retcode(), output);
  }

  // uint32 way_point_id = 7;
  if (this->way_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->way_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonWayPointActivateRsp)
}

::google::protobuf::uint8* DungeonWayPointActivateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonWayPointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 6;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->retcode(), target);
  }

  // uint32 way_point_id = 7;
  if (this->way_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->way_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonWayPointActivateRsp)
  return target;
}

size_t DungeonWayPointActivateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonWayPointActivateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 6;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 way_point_id = 7;
  if (this->way_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->way_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonWayPointActivateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonWayPointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonWayPointActivateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonWayPointActivateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonWayPointActivateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonWayPointActivateRsp)
    MergeFrom(*source);
  }
}

void DungeonWayPointActivateRsp::MergeFrom(const DungeonWayPointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonWayPointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.way_point_id() != 0) {
    set_way_point_id(from.way_point_id());
  }
}

void DungeonWayPointActivateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonWayPointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonWayPointActivateRsp::CopyFrom(const DungeonWayPointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonWayPointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonWayPointActivateRsp::IsInitialized() const {
  return true;
}

void DungeonWayPointActivateRsp::Swap(DungeonWayPointActivateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonWayPointActivateRsp::InternalSwap(DungeonWayPointActivateRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(way_point_id_, other->way_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonWayPointActivateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonWayPointActivateRsp

// int32 retcode = 6;
void DungeonWayPointActivateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonWayPointActivateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateRsp.retcode)
  return retcode_;
}
void DungeonWayPointActivateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateRsp.retcode)
}

// uint32 way_point_id = 7;
void DungeonWayPointActivateRsp::clear_way_point_id() {
  way_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonWayPointActivateRsp::way_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonWayPointActivateRsp.way_point_id)
  return way_point_id_;
}
void DungeonWayPointActivateRsp::set_way_point_id(::google::protobuf::uint32 value) {
  
  way_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonWayPointActivateRsp.way_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StrengthenPointData::kBasePointFieldNumber;
const int StrengthenPointData::kCurPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StrengthenPointData::StrengthenPointData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.StrengthenPointData)
}
StrengthenPointData::StrengthenPointData(const StrengthenPointData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&base_point_, &from.base_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_point_) -
    reinterpret_cast<char*>(&base_point_)) + sizeof(cur_point_));
  // @@protoc_insertion_point(copy_constructor:proto.StrengthenPointData)
}

void StrengthenPointData::SharedCtor() {
  ::memset(&base_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_point_) -
      reinterpret_cast<char*>(&base_point_)) + sizeof(cur_point_));
  _cached_size_ = 0;
}

StrengthenPointData::~StrengthenPointData() {
  // @@protoc_insertion_point(destructor:proto.StrengthenPointData)
  SharedDtor();
}

void StrengthenPointData::SharedDtor() {
}

void StrengthenPointData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrengthenPointData::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StrengthenPointData& StrengthenPointData::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

StrengthenPointData* StrengthenPointData::New(::google::protobuf::Arena* arena) const {
  StrengthenPointData* n = new StrengthenPointData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StrengthenPointData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.StrengthenPointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&base_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_point_) -
      reinterpret_cast<char*>(&base_point_)) + sizeof(cur_point_));
  _internal_metadata_.Clear();
}

bool StrengthenPointData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.StrengthenPointData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 base_point = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_point = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.StrengthenPointData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.StrengthenPointData)
  return false;
#undef DO_
}

void StrengthenPointData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.StrengthenPointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 base_point = 10;
  if (this->base_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->base_point(), output);
  }

  // uint32 cur_point = 11;
  if (this->cur_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cur_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.StrengthenPointData)
}

::google::protobuf::uint8* StrengthenPointData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.StrengthenPointData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 base_point = 10;
  if (this->base_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->base_point(), target);
  }

  // uint32 cur_point = 11;
  if (this->cur_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cur_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.StrengthenPointData)
  return target;
}

size_t StrengthenPointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.StrengthenPointData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 base_point = 10;
  if (this->base_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->base_point());
  }

  // uint32 cur_point = 11;
  if (this->cur_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_point());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrengthenPointData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.StrengthenPointData)
  GOOGLE_DCHECK_NE(&from, this);
  const StrengthenPointData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StrengthenPointData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.StrengthenPointData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.StrengthenPointData)
    MergeFrom(*source);
  }
}

void StrengthenPointData::MergeFrom(const StrengthenPointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.StrengthenPointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_point() != 0) {
    set_base_point(from.base_point());
  }
  if (from.cur_point() != 0) {
    set_cur_point(from.cur_point());
  }
}

void StrengthenPointData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.StrengthenPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrengthenPointData::CopyFrom(const StrengthenPointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.StrengthenPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrengthenPointData::IsInitialized() const {
  return true;
}

void StrengthenPointData::Swap(StrengthenPointData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StrengthenPointData::InternalSwap(StrengthenPointData* other) {
  using std::swap;
  swap(base_point_, other->base_point_);
  swap(cur_point_, other->cur_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StrengthenPointData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StrengthenPointData

// uint32 base_point = 10;
void StrengthenPointData::clear_base_point() {
  base_point_ = 0u;
}
::google::protobuf::uint32 StrengthenPointData::base_point() const {
  // @@protoc_insertion_point(field_get:proto.StrengthenPointData.base_point)
  return base_point_;
}
void StrengthenPointData::set_base_point(::google::protobuf::uint32 value) {
  
  base_point_ = value;
  // @@protoc_insertion_point(field_set:proto.StrengthenPointData.base_point)
}

// uint32 cur_point = 11;
void StrengthenPointData::clear_cur_point() {
  cur_point_ = 0u;
}
::google::protobuf::uint32 StrengthenPointData::cur_point() const {
  // @@protoc_insertion_point(field_get:proto.StrengthenPointData.cur_point)
  return cur_point_;
}
void StrengthenPointData::set_cur_point(::google::protobuf::uint32 value) {
  
  cur_point_ = value;
  // @@protoc_insertion_point(field_set:proto.StrengthenPointData.cur_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonSettleExhibitionInfo::kPlayerInfoFieldNumber;
const int DungeonSettleExhibitionInfo::kCardListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonSettleExhibitionInfo::DungeonSettleExhibitionInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonSettleExhibitionInfo)
}
DungeonSettleExhibitionInfo::DungeonSettleExhibitionInfo(const DungeonSettleExhibitionInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player_info()) {
    player_info_ = new ::proto::OnlinePlayerInfo(*from.player_info_);
  } else {
    player_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.DungeonSettleExhibitionInfo)
}

void DungeonSettleExhibitionInfo::SharedCtor() {
  player_info_ = NULL;
  _cached_size_ = 0;
}

DungeonSettleExhibitionInfo::~DungeonSettleExhibitionInfo() {
  // @@protoc_insertion_point(destructor:proto.DungeonSettleExhibitionInfo)
  SharedDtor();
}

void DungeonSettleExhibitionInfo::SharedDtor() {
  if (this != internal_default_instance()) delete player_info_;
}

void DungeonSettleExhibitionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSettleExhibitionInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonSettleExhibitionInfo& DungeonSettleExhibitionInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonSettleExhibitionInfo* DungeonSettleExhibitionInfo::New(::google::protobuf::Arena* arena) const {
  DungeonSettleExhibitionInfo* n = new DungeonSettleExhibitionInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonSettleExhibitionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonSettleExhibitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) {
    delete player_info_;
  }
  player_info_ = NULL;
  _internal_metadata_.Clear();
}

bool DungeonSettleExhibitionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonSettleExhibitionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.OnlinePlayerInfo player_info = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ExhibitionDisplayInfo card_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonSettleExhibitionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonSettleExhibitionInfo)
  return false;
#undef DO_
}

void DungeonSettleExhibitionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonSettleExhibitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.OnlinePlayerInfo player_info = 3;
  if (this->has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->player_info_, output);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->card_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonSettleExhibitionInfo)
}

::google::protobuf::uint8* DungeonSettleExhibitionInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonSettleExhibitionInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.OnlinePlayerInfo player_info = 3;
  if (this->has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->player_info_, deterministic, target);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonSettleExhibitionInfo)
  return target;
}

size_t DungeonSettleExhibitionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonSettleExhibitionInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo card_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // .proto.OnlinePlayerInfo player_info = 3;
  if (this->has_player_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSettleExhibitionInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonSettleExhibitionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonSettleExhibitionInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonSettleExhibitionInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonSettleExhibitionInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonSettleExhibitionInfo)
    MergeFrom(*source);
  }
}

void DungeonSettleExhibitionInfo::MergeFrom(const DungeonSettleExhibitionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonSettleExhibitionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  if (from.has_player_info()) {
    mutable_player_info()->::proto::OnlinePlayerInfo::MergeFrom(from.player_info());
  }
}

void DungeonSettleExhibitionInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonSettleExhibitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSettleExhibitionInfo::CopyFrom(const DungeonSettleExhibitionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonSettleExhibitionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSettleExhibitionInfo::IsInitialized() const {
  return true;
}

void DungeonSettleExhibitionInfo::Swap(DungeonSettleExhibitionInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonSettleExhibitionInfo::InternalSwap(DungeonSettleExhibitionInfo* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  swap(player_info_, other->player_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonSettleExhibitionInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonSettleExhibitionInfo

// .proto.OnlinePlayerInfo player_info = 3;
bool DungeonSettleExhibitionInfo::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
void DungeonSettleExhibitionInfo::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
const ::proto::OnlinePlayerInfo& DungeonSettleExhibitionInfo::player_info() const {
  const ::proto::OnlinePlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.DungeonSettleExhibitionInfo.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::OnlinePlayerInfo*>(
      &::proto::_OnlinePlayerInfo_default_instance_);
}
::proto::OnlinePlayerInfo* DungeonSettleExhibitionInfo::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::OnlinePlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleExhibitionInfo.player_info)
  return player_info_;
}
::proto::OnlinePlayerInfo* DungeonSettleExhibitionInfo::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleExhibitionInfo.player_info)
  
  ::proto::OnlinePlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void DungeonSettleExhibitionInfo::set_allocated_player_info(::proto::OnlinePlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleExhibitionInfo.player_info)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 13;
int DungeonSettleExhibitionInfo::card_list_size() const {
  return card_list_.size();
}
void DungeonSettleExhibitionInfo::clear_card_list() {
  card_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& DungeonSettleExhibitionInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* DungeonSettleExhibitionInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* DungeonSettleExhibitionInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
DungeonSettleExhibitionInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonSettleExhibitionInfo.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
DungeonSettleExhibitionInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonSettleExhibitionInfo.card_list)
  return card_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CrystalLinkDungeonSettleInfo::kKillEliteMonsterNumFieldNumber;
const int CrystalLinkDungeonSettleInfo::kFinalScoreFieldNumber;
const int CrystalLinkDungeonSettleInfo::kLevelIdFieldNumber;
const int CrystalLinkDungeonSettleInfo::kIsNewRecordFieldNumber;
const int CrystalLinkDungeonSettleInfo::kDifficultyIdFieldNumber;
const int CrystalLinkDungeonSettleInfo::kKillNormalMosnterNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CrystalLinkDungeonSettleInfo::CrystalLinkDungeonSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CrystalLinkDungeonSettleInfo)
}
CrystalLinkDungeonSettleInfo::CrystalLinkDungeonSettleInfo(const CrystalLinkDungeonSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kill_elite_monster_num_, &from.kill_elite_monster_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_record_) -
    reinterpret_cast<char*>(&kill_elite_monster_num_)) + sizeof(is_new_record_));
  // @@protoc_insertion_point(copy_constructor:proto.CrystalLinkDungeonSettleInfo)
}

void CrystalLinkDungeonSettleInfo::SharedCtor() {
  ::memset(&kill_elite_monster_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_record_) -
      reinterpret_cast<char*>(&kill_elite_monster_num_)) + sizeof(is_new_record_));
  _cached_size_ = 0;
}

CrystalLinkDungeonSettleInfo::~CrystalLinkDungeonSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.CrystalLinkDungeonSettleInfo)
  SharedDtor();
}

void CrystalLinkDungeonSettleInfo::SharedDtor() {
}

void CrystalLinkDungeonSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrystalLinkDungeonSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CrystalLinkDungeonSettleInfo& CrystalLinkDungeonSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CrystalLinkDungeonSettleInfo* CrystalLinkDungeonSettleInfo::New(::google::protobuf::Arena* arena) const {
  CrystalLinkDungeonSettleInfo* n = new CrystalLinkDungeonSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CrystalLinkDungeonSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CrystalLinkDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&kill_elite_monster_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_record_) -
      reinterpret_cast<char*>(&kill_elite_monster_num_)) + sizeof(is_new_record_));
  _internal_metadata_.Clear();
}

bool CrystalLinkDungeonSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CrystalLinkDungeonSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 kill_elite_monster_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_elite_monster_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 kill_normal_mosnter_num = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kill_normal_mosnter_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 final_score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &final_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CrystalLinkDungeonSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CrystalLinkDungeonSettleInfo)
  return false;
#undef DO_
}

void CrystalLinkDungeonSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CrystalLinkDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_elite_monster_num = 2;
  if (this->kill_elite_monster_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kill_elite_monster_num(), output);
  }

  // uint32 kill_normal_mosnter_num = 3;
  if (this->kill_normal_mosnter_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->kill_normal_mosnter_num(), output);
  }

  // uint32 final_score = 6;
  if (this->final_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->final_score(), output);
  }

  // uint32 difficulty_id = 9;
  if (this->difficulty_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->difficulty_id(), output);
  }

  // uint32 level_id = 12;
  if (this->level_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level_id(), output);
  }

  // bool is_new_record = 13;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_new_record(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CrystalLinkDungeonSettleInfo)
}

::google::protobuf::uint8* CrystalLinkDungeonSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CrystalLinkDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 kill_elite_monster_num = 2;
  if (this->kill_elite_monster_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kill_elite_monster_num(), target);
  }

  // uint32 kill_normal_mosnter_num = 3;
  if (this->kill_normal_mosnter_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->kill_normal_mosnter_num(), target);
  }

  // uint32 final_score = 6;
  if (this->final_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->final_score(), target);
  }

  // uint32 difficulty_id = 9;
  if (this->difficulty_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->difficulty_id(), target);
  }

  // uint32 level_id = 12;
  if (this->level_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level_id(), target);
  }

  // bool is_new_record = 13;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_new_record(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CrystalLinkDungeonSettleInfo)
  return target;
}

size_t CrystalLinkDungeonSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CrystalLinkDungeonSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 kill_elite_monster_num = 2;
  if (this->kill_elite_monster_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_elite_monster_num());
  }

  // uint32 kill_normal_mosnter_num = 3;
  if (this->kill_normal_mosnter_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->kill_normal_mosnter_num());
  }

  // uint32 final_score = 6;
  if (this->final_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->final_score());
  }

  // uint32 difficulty_id = 9;
  if (this->difficulty_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty_id());
  }

  // uint32 level_id = 12;
  if (this->level_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level_id());
  }

  // bool is_new_record = 13;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrystalLinkDungeonSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CrystalLinkDungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CrystalLinkDungeonSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CrystalLinkDungeonSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CrystalLinkDungeonSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CrystalLinkDungeonSettleInfo)
    MergeFrom(*source);
  }
}

void CrystalLinkDungeonSettleInfo::MergeFrom(const CrystalLinkDungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CrystalLinkDungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.kill_elite_monster_num() != 0) {
    set_kill_elite_monster_num(from.kill_elite_monster_num());
  }
  if (from.kill_normal_mosnter_num() != 0) {
    set_kill_normal_mosnter_num(from.kill_normal_mosnter_num());
  }
  if (from.final_score() != 0) {
    set_final_score(from.final_score());
  }
  if (from.difficulty_id() != 0) {
    set_difficulty_id(from.difficulty_id());
  }
  if (from.level_id() != 0) {
    set_level_id(from.level_id());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
}

void CrystalLinkDungeonSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CrystalLinkDungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrystalLinkDungeonSettleInfo::CopyFrom(const CrystalLinkDungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CrystalLinkDungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrystalLinkDungeonSettleInfo::IsInitialized() const {
  return true;
}

void CrystalLinkDungeonSettleInfo::Swap(CrystalLinkDungeonSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CrystalLinkDungeonSettleInfo::InternalSwap(CrystalLinkDungeonSettleInfo* other) {
  using std::swap;
  swap(kill_elite_monster_num_, other->kill_elite_monster_num_);
  swap(kill_normal_mosnter_num_, other->kill_normal_mosnter_num_);
  swap(final_score_, other->final_score_);
  swap(difficulty_id_, other->difficulty_id_);
  swap(level_id_, other->level_id_);
  swap(is_new_record_, other->is_new_record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CrystalLinkDungeonSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CrystalLinkDungeonSettleInfo

// uint32 kill_elite_monster_num = 2;
void CrystalLinkDungeonSettleInfo::clear_kill_elite_monster_num() {
  kill_elite_monster_num_ = 0u;
}
::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::kill_elite_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.kill_elite_monster_num)
  return kill_elite_monster_num_;
}
void CrystalLinkDungeonSettleInfo::set_kill_elite_monster_num(::google::protobuf::uint32 value) {
  
  kill_elite_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.kill_elite_monster_num)
}

// uint32 final_score = 6;
void CrystalLinkDungeonSettleInfo::clear_final_score() {
  final_score_ = 0u;
}
::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::final_score() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.final_score)
  return final_score_;
}
void CrystalLinkDungeonSettleInfo::set_final_score(::google::protobuf::uint32 value) {
  
  final_score_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.final_score)
}

// uint32 level_id = 12;
void CrystalLinkDungeonSettleInfo::clear_level_id() {
  level_id_ = 0u;
}
::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.level_id)
  return level_id_;
}
void CrystalLinkDungeonSettleInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.level_id)
}

// bool is_new_record = 13;
void CrystalLinkDungeonSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
bool CrystalLinkDungeonSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.is_new_record)
  return is_new_record_;
}
void CrystalLinkDungeonSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.is_new_record)
}

// uint32 difficulty_id = 9;
void CrystalLinkDungeonSettleInfo::clear_difficulty_id() {
  difficulty_id_ = 0u;
}
::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::difficulty_id() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.difficulty_id)
  return difficulty_id_;
}
void CrystalLinkDungeonSettleInfo::set_difficulty_id(::google::protobuf::uint32 value) {
  
  difficulty_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.difficulty_id)
}

// uint32 kill_normal_mosnter_num = 3;
void CrystalLinkDungeonSettleInfo::clear_kill_normal_mosnter_num() {
  kill_normal_mosnter_num_ = 0u;
}
::google::protobuf::uint32 CrystalLinkDungeonSettleInfo::kill_normal_mosnter_num() const {
  // @@protoc_insertion_point(field_get:proto.CrystalLinkDungeonSettleInfo.kill_normal_mosnter_num)
  return kill_normal_mosnter_num_;
}
void CrystalLinkDungeonSettleInfo::set_kill_normal_mosnter_num(::google::protobuf::uint32 value) {
  
  kill_normal_mosnter_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CrystalLinkDungeonSettleInfo.kill_normal_mosnter_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SummerTimeV2DungeonSettleInfo::kIsSuccessFieldNumber;
const int SummerTimeV2DungeonSettleInfo::kTakenRewardCountFieldNumber;
const int SummerTimeV2DungeonSettleInfo::kCurDungeonRewardLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SummerTimeV2DungeonSettleInfo::SummerTimeV2DungeonSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SummerTimeV2DungeonSettleInfo)
}
SummerTimeV2DungeonSettleInfo::SummerTimeV2DungeonSettleInfo(const SummerTimeV2DungeonSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&taken_reward_count_, &from.taken_reward_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_dungeon_reward_limit_) -
    reinterpret_cast<char*>(&taken_reward_count_)) + sizeof(cur_dungeon_reward_limit_));
  // @@protoc_insertion_point(copy_constructor:proto.SummerTimeV2DungeonSettleInfo)
}

void SummerTimeV2DungeonSettleInfo::SharedCtor() {
  ::memset(&taken_reward_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_dungeon_reward_limit_) -
      reinterpret_cast<char*>(&taken_reward_count_)) + sizeof(cur_dungeon_reward_limit_));
  _cached_size_ = 0;
}

SummerTimeV2DungeonSettleInfo::~SummerTimeV2DungeonSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.SummerTimeV2DungeonSettleInfo)
  SharedDtor();
}

void SummerTimeV2DungeonSettleInfo::SharedDtor() {
}

void SummerTimeV2DungeonSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummerTimeV2DungeonSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SummerTimeV2DungeonSettleInfo& SummerTimeV2DungeonSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

SummerTimeV2DungeonSettleInfo* SummerTimeV2DungeonSettleInfo::New(::google::protobuf::Arena* arena) const {
  SummerTimeV2DungeonSettleInfo* n = new SummerTimeV2DungeonSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SummerTimeV2DungeonSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SummerTimeV2DungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&taken_reward_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_dungeon_reward_limit_) -
      reinterpret_cast<char*>(&taken_reward_count_)) + sizeof(cur_dungeon_reward_limit_));
  _internal_metadata_.Clear();
}

bool SummerTimeV2DungeonSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SummerTimeV2DungeonSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 taken_reward_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taken_reward_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_dungeon_reward_limit = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_dungeon_reward_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SummerTimeV2DungeonSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SummerTimeV2DungeonSettleInfo)
  return false;
#undef DO_
}

void SummerTimeV2DungeonSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SummerTimeV2DungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 taken_reward_count = 2;
  if (this->taken_reward_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taken_reward_count(), output);
  }

  // bool is_success = 5;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_success(), output);
  }

  // uint32 cur_dungeon_reward_limit = 11;
  if (this->cur_dungeon_reward_limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cur_dungeon_reward_limit(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SummerTimeV2DungeonSettleInfo)
}

::google::protobuf::uint8* SummerTimeV2DungeonSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SummerTimeV2DungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 taken_reward_count = 2;
  if (this->taken_reward_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taken_reward_count(), target);
  }

  // bool is_success = 5;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_success(), target);
  }

  // uint32 cur_dungeon_reward_limit = 11;
  if (this->cur_dungeon_reward_limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cur_dungeon_reward_limit(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SummerTimeV2DungeonSettleInfo)
  return target;
}

size_t SummerTimeV2DungeonSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SummerTimeV2DungeonSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 taken_reward_count = 2;
  if (this->taken_reward_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->taken_reward_count());
  }

  // bool is_success = 5;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cur_dungeon_reward_limit = 11;
  if (this->cur_dungeon_reward_limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_dungeon_reward_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummerTimeV2DungeonSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SummerTimeV2DungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SummerTimeV2DungeonSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SummerTimeV2DungeonSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SummerTimeV2DungeonSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SummerTimeV2DungeonSettleInfo)
    MergeFrom(*source);
  }
}

void SummerTimeV2DungeonSettleInfo::MergeFrom(const SummerTimeV2DungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SummerTimeV2DungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.taken_reward_count() != 0) {
    set_taken_reward_count(from.taken_reward_count());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.cur_dungeon_reward_limit() != 0) {
    set_cur_dungeon_reward_limit(from.cur_dungeon_reward_limit());
  }
}

void SummerTimeV2DungeonSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SummerTimeV2DungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummerTimeV2DungeonSettleInfo::CopyFrom(const SummerTimeV2DungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SummerTimeV2DungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummerTimeV2DungeonSettleInfo::IsInitialized() const {
  return true;
}

void SummerTimeV2DungeonSettleInfo::Swap(SummerTimeV2DungeonSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SummerTimeV2DungeonSettleInfo::InternalSwap(SummerTimeV2DungeonSettleInfo* other) {
  using std::swap;
  swap(taken_reward_count_, other->taken_reward_count_);
  swap(is_success_, other->is_success_);
  swap(cur_dungeon_reward_limit_, other->cur_dungeon_reward_limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SummerTimeV2DungeonSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SummerTimeV2DungeonSettleInfo

// bool is_success = 5;
void SummerTimeV2DungeonSettleInfo::clear_is_success() {
  is_success_ = false;
}
bool SummerTimeV2DungeonSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2DungeonSettleInfo.is_success)
  return is_success_;
}
void SummerTimeV2DungeonSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2DungeonSettleInfo.is_success)
}

// uint32 taken_reward_count = 2;
void SummerTimeV2DungeonSettleInfo::clear_taken_reward_count() {
  taken_reward_count_ = 0u;
}
::google::protobuf::uint32 SummerTimeV2DungeonSettleInfo::taken_reward_count() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2DungeonSettleInfo.taken_reward_count)
  return taken_reward_count_;
}
void SummerTimeV2DungeonSettleInfo::set_taken_reward_count(::google::protobuf::uint32 value) {
  
  taken_reward_count_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2DungeonSettleInfo.taken_reward_count)
}

// uint32 cur_dungeon_reward_limit = 11;
void SummerTimeV2DungeonSettleInfo::clear_cur_dungeon_reward_limit() {
  cur_dungeon_reward_limit_ = 0u;
}
::google::protobuf::uint32 SummerTimeV2DungeonSettleInfo::cur_dungeon_reward_limit() const {
  // @@protoc_insertion_point(field_get:proto.SummerTimeV2DungeonSettleInfo.cur_dungeon_reward_limit)
  return cur_dungeon_reward_limit_;
}
void SummerTimeV2DungeonSettleInfo::set_cur_dungeon_reward_limit(::google::protobuf::uint32 value) {
  
  cur_dungeon_reward_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.SummerTimeV2DungeonSettleInfo.cur_dungeon_reward_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InstableSprayDungeonSettleInfo::kStageIdFieldNumber;
const int InstableSprayDungeonSettleInfo::kScoreListFieldNumber;
const int InstableSprayDungeonSettleInfo::kIsNewRecordFieldNumber;
const int InstableSprayDungeonSettleInfo::kDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InstableSprayDungeonSettleInfo::InstableSprayDungeonSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InstableSprayDungeonSettleInfo)
}
InstableSprayDungeonSettleInfo::InstableSprayDungeonSettleInfo(const InstableSprayDungeonSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      score_list_(from.score_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stage_id_, &from.stage_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_new_record_) -
    reinterpret_cast<char*>(&stage_id_)) + sizeof(is_new_record_));
  // @@protoc_insertion_point(copy_constructor:proto.InstableSprayDungeonSettleInfo)
}

void InstableSprayDungeonSettleInfo::SharedCtor() {
  ::memset(&stage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_record_) -
      reinterpret_cast<char*>(&stage_id_)) + sizeof(is_new_record_));
  _cached_size_ = 0;
}

InstableSprayDungeonSettleInfo::~InstableSprayDungeonSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.InstableSprayDungeonSettleInfo)
  SharedDtor();
}

void InstableSprayDungeonSettleInfo::SharedDtor() {
}

void InstableSprayDungeonSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstableSprayDungeonSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InstableSprayDungeonSettleInfo& InstableSprayDungeonSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

InstableSprayDungeonSettleInfo* InstableSprayDungeonSettleInfo::New(::google::protobuf::Arena* arena) const {
  InstableSprayDungeonSettleInfo* n = new InstableSprayDungeonSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InstableSprayDungeonSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InstableSprayDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_list_.Clear();
  ::memset(&stage_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_new_record_) -
      reinterpret_cast<char*>(&stage_id_)) + sizeof(is_new_record_));
  _internal_metadata_.Clear();
}

bool InstableSprayDungeonSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InstableSprayDungeonSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 stage_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 score_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_score_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InstableSprayDungeonSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InstableSprayDungeonSettleInfo)
  return false;
#undef DO_
}

void InstableSprayDungeonSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InstableSprayDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_id = 1;
  if (this->stage_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage_id(), output);
  }

  // repeated uint32 score_list = 4;
  if (this->score_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _score_list_cached_byte_size_));
  }
  for (int i = 0, n = this->score_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->score_list(i), output);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->difficulty(), output);
  }

  // bool is_new_record = 13;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_new_record(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InstableSprayDungeonSettleInfo)
}

::google::protobuf::uint8* InstableSprayDungeonSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InstableSprayDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stage_id = 1;
  if (this->stage_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage_id(), target);
  }

  // repeated uint32 score_list = 4;
  if (this->score_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _score_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->score_list_, target);
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->difficulty(), target);
  }

  // bool is_new_record = 13;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_new_record(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InstableSprayDungeonSettleInfo)
  return target;
}

size_t InstableSprayDungeonSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InstableSprayDungeonSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 score_list = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->score_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _score_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 stage_id = 1;
  if (this->stage_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_id());
  }

  // uint32 difficulty = 5;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  // bool is_new_record = 13;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstableSprayDungeonSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InstableSprayDungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InstableSprayDungeonSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InstableSprayDungeonSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InstableSprayDungeonSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InstableSprayDungeonSettleInfo)
    MergeFrom(*source);
  }
}

void InstableSprayDungeonSettleInfo::MergeFrom(const InstableSprayDungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InstableSprayDungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_list_.MergeFrom(from.score_list_);
  if (from.stage_id() != 0) {
    set_stage_id(from.stage_id());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
}

void InstableSprayDungeonSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InstableSprayDungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstableSprayDungeonSettleInfo::CopyFrom(const InstableSprayDungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InstableSprayDungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstableSprayDungeonSettleInfo::IsInitialized() const {
  return true;
}

void InstableSprayDungeonSettleInfo::Swap(InstableSprayDungeonSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InstableSprayDungeonSettleInfo::InternalSwap(InstableSprayDungeonSettleInfo* other) {
  using std::swap;
  score_list_.InternalSwap(&other->score_list_);
  swap(stage_id_, other->stage_id_);
  swap(difficulty_, other->difficulty_);
  swap(is_new_record_, other->is_new_record_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InstableSprayDungeonSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InstableSprayDungeonSettleInfo

// uint32 stage_id = 1;
void InstableSprayDungeonSettleInfo::clear_stage_id() {
  stage_id_ = 0u;
}
::google::protobuf::uint32 InstableSprayDungeonSettleInfo::stage_id() const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.stage_id)
  return stage_id_;
}
void InstableSprayDungeonSettleInfo::set_stage_id(::google::protobuf::uint32 value) {
  
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.stage_id)
}

// repeated uint32 score_list = 4;
int InstableSprayDungeonSettleInfo::score_list_size() const {
  return score_list_.size();
}
void InstableSprayDungeonSettleInfo::clear_score_list() {
  score_list_.Clear();
}
::google::protobuf::uint32 InstableSprayDungeonSettleInfo::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.score_list)
  return score_list_.Get(index);
}
void InstableSprayDungeonSettleInfo::set_score_list(int index, ::google::protobuf::uint32 value) {
  score_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.score_list)
}
void InstableSprayDungeonSettleInfo::add_score_list(::google::protobuf::uint32 value) {
  score_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InstableSprayDungeonSettleInfo.score_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InstableSprayDungeonSettleInfo::score_list() const {
  // @@protoc_insertion_point(field_list:proto.InstableSprayDungeonSettleInfo.score_list)
  return score_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InstableSprayDungeonSettleInfo::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InstableSprayDungeonSettleInfo.score_list)
  return &score_list_;
}

// bool is_new_record = 13;
void InstableSprayDungeonSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
bool InstableSprayDungeonSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.is_new_record)
  return is_new_record_;
}
void InstableSprayDungeonSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.is_new_record)
}

// uint32 difficulty = 5;
void InstableSprayDungeonSettleInfo::clear_difficulty() {
  difficulty_ = 0u;
}
::google::protobuf::uint32 InstableSprayDungeonSettleInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.InstableSprayDungeonSettleInfo.difficulty)
  return difficulty_;
}
void InstableSprayDungeonSettleInfo::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.InstableSprayDungeonSettleInfo.difficulty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WindFieldDungeonSettleInfo::kAfterWatcherIdListFieldNumber;
const int WindFieldDungeonSettleInfo::kBeforeWatcherIdListFieldNumber;
const int WindFieldDungeonSettleInfo::kFailReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WindFieldDungeonSettleInfo::WindFieldDungeonSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.WindFieldDungeonSettleInfo)
}
WindFieldDungeonSettleInfo::WindFieldDungeonSettleInfo(const WindFieldDungeonSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      before_watcher_id_list_(from.before_watcher_id_list_),
      after_watcher_id_list_(from.after_watcher_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fail_reason_ = from.fail_reason_;
  // @@protoc_insertion_point(copy_constructor:proto.WindFieldDungeonSettleInfo)
}

void WindFieldDungeonSettleInfo::SharedCtor() {
  fail_reason_ = 0;
  _cached_size_ = 0;
}

WindFieldDungeonSettleInfo::~WindFieldDungeonSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.WindFieldDungeonSettleInfo)
  SharedDtor();
}

void WindFieldDungeonSettleInfo::SharedDtor() {
}

void WindFieldDungeonSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WindFieldDungeonSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WindFieldDungeonSettleInfo& WindFieldDungeonSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

WindFieldDungeonSettleInfo* WindFieldDungeonSettleInfo::New(::google::protobuf::Arena* arena) const {
  WindFieldDungeonSettleInfo* n = new WindFieldDungeonSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WindFieldDungeonSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.WindFieldDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  before_watcher_id_list_.Clear();
  after_watcher_id_list_.Clear();
  fail_reason_ = 0;
  _internal_metadata_.Clear();
}

bool WindFieldDungeonSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.WindFieldDungeonSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.WindFieldDungeonFailReason fail_reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fail_reason(static_cast< ::proto::WindFieldDungeonFailReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 before_watcher_id_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_before_watcher_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_before_watcher_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 after_watcher_id_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_after_watcher_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_after_watcher_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.WindFieldDungeonSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.WindFieldDungeonSettleInfo)
  return false;
#undef DO_
}

void WindFieldDungeonSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.WindFieldDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.WindFieldDungeonFailReason fail_reason = 2;
  if (this->fail_reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fail_reason(), output);
  }

  // repeated uint32 before_watcher_id_list = 7;
  if (this->before_watcher_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _before_watcher_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->before_watcher_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->before_watcher_id_list(i), output);
  }

  // repeated uint32 after_watcher_id_list = 11;
  if (this->after_watcher_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _after_watcher_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->after_watcher_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->after_watcher_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.WindFieldDungeonSettleInfo)
}

::google::protobuf::uint8* WindFieldDungeonSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.WindFieldDungeonSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.WindFieldDungeonFailReason fail_reason = 2;
  if (this->fail_reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fail_reason(), target);
  }

  // repeated uint32 before_watcher_id_list = 7;
  if (this->before_watcher_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _before_watcher_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->before_watcher_id_list_, target);
  }

  // repeated uint32 after_watcher_id_list = 11;
  if (this->after_watcher_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _after_watcher_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->after_watcher_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.WindFieldDungeonSettleInfo)
  return target;
}

size_t WindFieldDungeonSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.WindFieldDungeonSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 before_watcher_id_list = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->before_watcher_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _before_watcher_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 after_watcher_id_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->after_watcher_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _after_watcher_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto.WindFieldDungeonFailReason fail_reason = 2;
  if (this->fail_reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fail_reason());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WindFieldDungeonSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.WindFieldDungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const WindFieldDungeonSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WindFieldDungeonSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.WindFieldDungeonSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.WindFieldDungeonSettleInfo)
    MergeFrom(*source);
  }
}

void WindFieldDungeonSettleInfo::MergeFrom(const WindFieldDungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.WindFieldDungeonSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  before_watcher_id_list_.MergeFrom(from.before_watcher_id_list_);
  after_watcher_id_list_.MergeFrom(from.after_watcher_id_list_);
  if (from.fail_reason() != 0) {
    set_fail_reason(from.fail_reason());
  }
}

void WindFieldDungeonSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.WindFieldDungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WindFieldDungeonSettleInfo::CopyFrom(const WindFieldDungeonSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.WindFieldDungeonSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WindFieldDungeonSettleInfo::IsInitialized() const {
  return true;
}

void WindFieldDungeonSettleInfo::Swap(WindFieldDungeonSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WindFieldDungeonSettleInfo::InternalSwap(WindFieldDungeonSettleInfo* other) {
  using std::swap;
  before_watcher_id_list_.InternalSwap(&other->before_watcher_id_list_);
  after_watcher_id_list_.InternalSwap(&other->after_watcher_id_list_);
  swap(fail_reason_, other->fail_reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WindFieldDungeonSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WindFieldDungeonSettleInfo

// repeated uint32 after_watcher_id_list = 11;
int WindFieldDungeonSettleInfo::after_watcher_id_list_size() const {
  return after_watcher_id_list_.size();
}
void WindFieldDungeonSettleInfo::clear_after_watcher_id_list() {
  after_watcher_id_list_.Clear();
}
::google::protobuf::uint32 WindFieldDungeonSettleInfo::after_watcher_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
  return after_watcher_id_list_.Get(index);
}
void WindFieldDungeonSettleInfo::set_after_watcher_id_list(int index, ::google::protobuf::uint32 value) {
  after_watcher_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
}
void WindFieldDungeonSettleInfo::add_after_watcher_id_list(::google::protobuf::uint32 value) {
  after_watcher_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WindFieldDungeonSettleInfo::after_watcher_id_list() const {
  // @@protoc_insertion_point(field_list:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
  return after_watcher_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WindFieldDungeonSettleInfo::mutable_after_watcher_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.WindFieldDungeonSettleInfo.after_watcher_id_list)
  return &after_watcher_id_list_;
}

// repeated uint32 before_watcher_id_list = 7;
int WindFieldDungeonSettleInfo::before_watcher_id_list_size() const {
  return before_watcher_id_list_.size();
}
void WindFieldDungeonSettleInfo::clear_before_watcher_id_list() {
  before_watcher_id_list_.Clear();
}
::google::protobuf::uint32 WindFieldDungeonSettleInfo::before_watcher_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
  return before_watcher_id_list_.Get(index);
}
void WindFieldDungeonSettleInfo::set_before_watcher_id_list(int index, ::google::protobuf::uint32 value) {
  before_watcher_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
}
void WindFieldDungeonSettleInfo::add_before_watcher_id_list(::google::protobuf::uint32 value) {
  before_watcher_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
WindFieldDungeonSettleInfo::before_watcher_id_list() const {
  // @@protoc_insertion_point(field_list:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
  return before_watcher_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
WindFieldDungeonSettleInfo::mutable_before_watcher_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.WindFieldDungeonSettleInfo.before_watcher_id_list)
  return &before_watcher_id_list_;
}

// .proto.WindFieldDungeonFailReason fail_reason = 2;
void WindFieldDungeonSettleInfo::clear_fail_reason() {
  fail_reason_ = 0;
}
::proto::WindFieldDungeonFailReason WindFieldDungeonSettleInfo::fail_reason() const {
  // @@protoc_insertion_point(field_get:proto.WindFieldDungeonSettleInfo.fail_reason)
  return static_cast< ::proto::WindFieldDungeonFailReason >(fail_reason_);
}
void WindFieldDungeonSettleInfo::set_fail_reason(::proto::WindFieldDungeonFailReason value) {
  
  fail_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.WindFieldDungeonSettleInfo.fail_reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EffigyChallengeV2SettleInfo::kIsChallengeHighestDifficultyFieldNumber;
const int EffigyChallengeV2SettleInfo::kCreateDungeonPlayerUidFieldNumber;
const int EffigyChallengeV2SettleInfo::kChallengeModeDifficultyFieldNumber;
const int EffigyChallengeV2SettleInfo::kIsNewRecordTimeFieldNumber;
const int EffigyChallengeV2SettleInfo::kRecordTimeFieldNumber;
const int EffigyChallengeV2SettleInfo::kFirstTimeFinishDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EffigyChallengeV2SettleInfo::EffigyChallengeV2SettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.EffigyChallengeV2SettleInfo)
}
EffigyChallengeV2SettleInfo::EffigyChallengeV2SettleInfo(const EffigyChallengeV2SettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&create_dungeon_player_uid_, &from.create_dungeon_player_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&record_time_) -
    reinterpret_cast<char*>(&create_dungeon_player_uid_)) + sizeof(record_time_));
  // @@protoc_insertion_point(copy_constructor:proto.EffigyChallengeV2SettleInfo)
}

void EffigyChallengeV2SettleInfo::SharedCtor() {
  ::memset(&create_dungeon_player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_time_) -
      reinterpret_cast<char*>(&create_dungeon_player_uid_)) + sizeof(record_time_));
  _cached_size_ = 0;
}

EffigyChallengeV2SettleInfo::~EffigyChallengeV2SettleInfo() {
  // @@protoc_insertion_point(destructor:proto.EffigyChallengeV2SettleInfo)
  SharedDtor();
}

void EffigyChallengeV2SettleInfo::SharedDtor() {
}

void EffigyChallengeV2SettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffigyChallengeV2SettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EffigyChallengeV2SettleInfo& EffigyChallengeV2SettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

EffigyChallengeV2SettleInfo* EffigyChallengeV2SettleInfo::New(::google::protobuf::Arena* arena) const {
  EffigyChallengeV2SettleInfo* n = new EffigyChallengeV2SettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EffigyChallengeV2SettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.EffigyChallengeV2SettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&create_dungeon_player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&record_time_) -
      reinterpret_cast<char*>(&create_dungeon_player_uid_)) + sizeof(record_time_));
  _internal_metadata_.Clear();
}

bool EffigyChallengeV2SettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.EffigyChallengeV2SettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_new_record_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_dungeon_player_uid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_dungeon_player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 first_time_finish_difficulty = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_time_finish_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_mode_difficulty = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_mode_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_challenge_highest_difficulty = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_challenge_highest_difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 record_time = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.EffigyChallengeV2SettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.EffigyChallengeV2SettleInfo)
  return false;
#undef DO_
}

void EffigyChallengeV2SettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.EffigyChallengeV2SettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_new_record_time = 1;
  if (this->is_new_record_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_new_record_time(), output);
  }

  // uint32 create_dungeon_player_uid = 4;
  if (this->create_dungeon_player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_dungeon_player_uid(), output);
  }

  // uint32 first_time_finish_difficulty = 5;
  if (this->first_time_finish_difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->first_time_finish_difficulty(), output);
  }

  // uint32 challenge_mode_difficulty = 6;
  if (this->challenge_mode_difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->challenge_mode_difficulty(), output);
  }

  // bool is_challenge_highest_difficulty = 7;
  if (this->is_challenge_highest_difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_challenge_highest_difficulty(), output);
  }

  // uint32 record_time = 12;
  if (this->record_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->record_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.EffigyChallengeV2SettleInfo)
}

::google::protobuf::uint8* EffigyChallengeV2SettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.EffigyChallengeV2SettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_new_record_time = 1;
  if (this->is_new_record_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_new_record_time(), target);
  }

  // uint32 create_dungeon_player_uid = 4;
  if (this->create_dungeon_player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_dungeon_player_uid(), target);
  }

  // uint32 first_time_finish_difficulty = 5;
  if (this->first_time_finish_difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->first_time_finish_difficulty(), target);
  }

  // uint32 challenge_mode_difficulty = 6;
  if (this->challenge_mode_difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->challenge_mode_difficulty(), target);
  }

  // bool is_challenge_highest_difficulty = 7;
  if (this->is_challenge_highest_difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_challenge_highest_difficulty(), target);
  }

  // uint32 record_time = 12;
  if (this->record_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->record_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.EffigyChallengeV2SettleInfo)
  return target;
}

size_t EffigyChallengeV2SettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.EffigyChallengeV2SettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 create_dungeon_player_uid = 4;
  if (this->create_dungeon_player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_dungeon_player_uid());
  }

  // bool is_challenge_highest_difficulty = 7;
  if (this->is_challenge_highest_difficulty() != 0) {
    total_size += 1 + 1;
  }

  // bool is_new_record_time = 1;
  if (this->is_new_record_time() != 0) {
    total_size += 1 + 1;
  }

  // uint32 first_time_finish_difficulty = 5;
  if (this->first_time_finish_difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->first_time_finish_difficulty());
  }

  // uint32 challenge_mode_difficulty = 6;
  if (this->challenge_mode_difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_mode_difficulty());
  }

  // uint32 record_time = 12;
  if (this->record_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->record_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffigyChallengeV2SettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.EffigyChallengeV2SettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EffigyChallengeV2SettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EffigyChallengeV2SettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.EffigyChallengeV2SettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.EffigyChallengeV2SettleInfo)
    MergeFrom(*source);
  }
}

void EffigyChallengeV2SettleInfo::MergeFrom(const EffigyChallengeV2SettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.EffigyChallengeV2SettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.create_dungeon_player_uid() != 0) {
    set_create_dungeon_player_uid(from.create_dungeon_player_uid());
  }
  if (from.is_challenge_highest_difficulty() != 0) {
    set_is_challenge_highest_difficulty(from.is_challenge_highest_difficulty());
  }
  if (from.is_new_record_time() != 0) {
    set_is_new_record_time(from.is_new_record_time());
  }
  if (from.first_time_finish_difficulty() != 0) {
    set_first_time_finish_difficulty(from.first_time_finish_difficulty());
  }
  if (from.challenge_mode_difficulty() != 0) {
    set_challenge_mode_difficulty(from.challenge_mode_difficulty());
  }
  if (from.record_time() != 0) {
    set_record_time(from.record_time());
  }
}

void EffigyChallengeV2SettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.EffigyChallengeV2SettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffigyChallengeV2SettleInfo::CopyFrom(const EffigyChallengeV2SettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.EffigyChallengeV2SettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffigyChallengeV2SettleInfo::IsInitialized() const {
  return true;
}

void EffigyChallengeV2SettleInfo::Swap(EffigyChallengeV2SettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EffigyChallengeV2SettleInfo::InternalSwap(EffigyChallengeV2SettleInfo* other) {
  using std::swap;
  swap(create_dungeon_player_uid_, other->create_dungeon_player_uid_);
  swap(is_challenge_highest_difficulty_, other->is_challenge_highest_difficulty_);
  swap(is_new_record_time_, other->is_new_record_time_);
  swap(first_time_finish_difficulty_, other->first_time_finish_difficulty_);
  swap(challenge_mode_difficulty_, other->challenge_mode_difficulty_);
  swap(record_time_, other->record_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EffigyChallengeV2SettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EffigyChallengeV2SettleInfo

// bool is_challenge_highest_difficulty = 7;
void EffigyChallengeV2SettleInfo::clear_is_challenge_highest_difficulty() {
  is_challenge_highest_difficulty_ = false;
}
bool EffigyChallengeV2SettleInfo::is_challenge_highest_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.is_challenge_highest_difficulty)
  return is_challenge_highest_difficulty_;
}
void EffigyChallengeV2SettleInfo::set_is_challenge_highest_difficulty(bool value) {
  
  is_challenge_highest_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.is_challenge_highest_difficulty)
}

// uint32 create_dungeon_player_uid = 4;
void EffigyChallengeV2SettleInfo::clear_create_dungeon_player_uid() {
  create_dungeon_player_uid_ = 0u;
}
::google::protobuf::uint32 EffigyChallengeV2SettleInfo::create_dungeon_player_uid() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.create_dungeon_player_uid)
  return create_dungeon_player_uid_;
}
void EffigyChallengeV2SettleInfo::set_create_dungeon_player_uid(::google::protobuf::uint32 value) {
  
  create_dungeon_player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.create_dungeon_player_uid)
}

// uint32 challenge_mode_difficulty = 6;
void EffigyChallengeV2SettleInfo::clear_challenge_mode_difficulty() {
  challenge_mode_difficulty_ = 0u;
}
::google::protobuf::uint32 EffigyChallengeV2SettleInfo::challenge_mode_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.challenge_mode_difficulty)
  return challenge_mode_difficulty_;
}
void EffigyChallengeV2SettleInfo::set_challenge_mode_difficulty(::google::protobuf::uint32 value) {
  
  challenge_mode_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.challenge_mode_difficulty)
}

// bool is_new_record_time = 1;
void EffigyChallengeV2SettleInfo::clear_is_new_record_time() {
  is_new_record_time_ = false;
}
bool EffigyChallengeV2SettleInfo::is_new_record_time() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.is_new_record_time)
  return is_new_record_time_;
}
void EffigyChallengeV2SettleInfo::set_is_new_record_time(bool value) {
  
  is_new_record_time_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.is_new_record_time)
}

// uint32 record_time = 12;
void EffigyChallengeV2SettleInfo::clear_record_time() {
  record_time_ = 0u;
}
::google::protobuf::uint32 EffigyChallengeV2SettleInfo::record_time() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.record_time)
  return record_time_;
}
void EffigyChallengeV2SettleInfo::set_record_time(::google::protobuf::uint32 value) {
  
  record_time_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.record_time)
}

// uint32 first_time_finish_difficulty = 5;
void EffigyChallengeV2SettleInfo::clear_first_time_finish_difficulty() {
  first_time_finish_difficulty_ = 0u;
}
::google::protobuf::uint32 EffigyChallengeV2SettleInfo::first_time_finish_difficulty() const {
  // @@protoc_insertion_point(field_get:proto.EffigyChallengeV2SettleInfo.first_time_finish_difficulty)
  return first_time_finish_difficulty_;
}
void EffigyChallengeV2SettleInfo::set_first_time_finish_difficulty(::google::protobuf::uint32 value) {
  
  first_time_finish_difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.EffigyChallengeV2SettleInfo.first_time_finish_difficulty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeamChainSettleInfo::kScoreListFieldNumber;
const int TeamChainSettleInfo::kTotalScoreFieldNumber;
const int TeamChainSettleInfo::kDifficultyFieldNumber;
const int TeamChainSettleInfo::kStageIdFieldNumber;
const int TeamChainSettleInfo::kIsNewRecordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeamChainSettleInfo::TeamChainSettleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TeamChainSettleInfo)
}
TeamChainSettleInfo::TeamChainSettleInfo(const TeamChainSettleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      score_list_(from.score_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_score_, &from.total_score_,
    static_cast<size_t>(reinterpret_cast<char*>(&difficulty_) -
    reinterpret_cast<char*>(&total_score_)) + sizeof(difficulty_));
  // @@protoc_insertion_point(copy_constructor:proto.TeamChainSettleInfo)
}

void TeamChainSettleInfo::SharedCtor() {
  ::memset(&total_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&total_score_)) + sizeof(difficulty_));
  _cached_size_ = 0;
}

TeamChainSettleInfo::~TeamChainSettleInfo() {
  // @@protoc_insertion_point(destructor:proto.TeamChainSettleInfo)
  SharedDtor();
}

void TeamChainSettleInfo::SharedDtor() {
}

void TeamChainSettleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamChainSettleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeamChainSettleInfo& TeamChainSettleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

TeamChainSettleInfo* TeamChainSettleInfo::New(::google::protobuf::Arena* arena) const {
  TeamChainSettleInfo* n = new TeamChainSettleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TeamChainSettleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TeamChainSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  score_list_.Clear();
  ::memset(&total_score_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&difficulty_) -
      reinterpret_cast<char*>(&total_score_)) + sizeof(difficulty_));
  _internal_metadata_.Clear();
}

bool TeamChainSettleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TeamChainSettleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 total_score = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 score_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_score_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 stage_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 difficulty = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &difficulty_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TeamChainSettleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TeamChainSettleInfo)
  return false;
#undef DO_
}

void TeamChainSettleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TeamChainSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_score = 1;
  if (this->total_score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_score(), output);
  }

  // bool is_new_record = 4;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_new_record(), output);
  }

  // repeated uint32 score_list = 9;
  if (this->score_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _score_list_cached_byte_size_));
  }
  for (int i = 0, n = this->score_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->score_list(i), output);
  }

  // uint32 stage_id = 12;
  if (this->stage_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->stage_id(), output);
  }

  // uint32 difficulty = 15;
  if (this->difficulty() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->difficulty(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TeamChainSettleInfo)
}

::google::protobuf::uint8* TeamChainSettleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TeamChainSettleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_score = 1;
  if (this->total_score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_score(), target);
  }

  // bool is_new_record = 4;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_new_record(), target);
  }

  // repeated uint32 score_list = 9;
  if (this->score_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _score_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->score_list_, target);
  }

  // uint32 stage_id = 12;
  if (this->stage_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->stage_id(), target);
  }

  // uint32 difficulty = 15;
  if (this->difficulty() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->difficulty(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TeamChainSettleInfo)
  return target;
}

size_t TeamChainSettleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TeamChainSettleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 score_list = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->score_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _score_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 total_score = 1;
  if (this->total_score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_score());
  }

  // bool is_new_record = 4;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  // uint32 stage_id = 12;
  if (this->stage_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stage_id());
  }

  // uint32 difficulty = 15;
  if (this->difficulty() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->difficulty());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamChainSettleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TeamChainSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TeamChainSettleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeamChainSettleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TeamChainSettleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TeamChainSettleInfo)
    MergeFrom(*source);
  }
}

void TeamChainSettleInfo::MergeFrom(const TeamChainSettleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TeamChainSettleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  score_list_.MergeFrom(from.score_list_);
  if (from.total_score() != 0) {
    set_total_score(from.total_score());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
  if (from.stage_id() != 0) {
    set_stage_id(from.stage_id());
  }
  if (from.difficulty() != 0) {
    set_difficulty(from.difficulty());
  }
}

void TeamChainSettleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TeamChainSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamChainSettleInfo::CopyFrom(const TeamChainSettleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TeamChainSettleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamChainSettleInfo::IsInitialized() const {
  return true;
}

void TeamChainSettleInfo::Swap(TeamChainSettleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeamChainSettleInfo::InternalSwap(TeamChainSettleInfo* other) {
  using std::swap;
  score_list_.InternalSwap(&other->score_list_);
  swap(total_score_, other->total_score_);
  swap(is_new_record_, other->is_new_record_);
  swap(stage_id_, other->stage_id_);
  swap(difficulty_, other->difficulty_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TeamChainSettleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TeamChainSettleInfo

// repeated uint32 score_list = 9;
int TeamChainSettleInfo::score_list_size() const {
  return score_list_.size();
}
void TeamChainSettleInfo::clear_score_list() {
  score_list_.Clear();
}
::google::protobuf::uint32 TeamChainSettleInfo::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.score_list)
  return score_list_.Get(index);
}
void TeamChainSettleInfo::set_score_list(int index, ::google::protobuf::uint32 value) {
  score_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.score_list)
}
void TeamChainSettleInfo::add_score_list(::google::protobuf::uint32 value) {
  score_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TeamChainSettleInfo.score_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TeamChainSettleInfo::score_list() const {
  // @@protoc_insertion_point(field_list:proto.TeamChainSettleInfo.score_list)
  return score_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TeamChainSettleInfo::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TeamChainSettleInfo.score_list)
  return &score_list_;
}

// uint32 total_score = 1;
void TeamChainSettleInfo::clear_total_score() {
  total_score_ = 0u;
}
::google::protobuf::uint32 TeamChainSettleInfo::total_score() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.total_score)
  return total_score_;
}
void TeamChainSettleInfo::set_total_score(::google::protobuf::uint32 value) {
  
  total_score_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.total_score)
}

// uint32 difficulty = 15;
void TeamChainSettleInfo::clear_difficulty() {
  difficulty_ = 0u;
}
::google::protobuf::uint32 TeamChainSettleInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.difficulty)
  return difficulty_;
}
void TeamChainSettleInfo::set_difficulty(::google::protobuf::uint32 value) {
  
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.difficulty)
}

// uint32 stage_id = 12;
void TeamChainSettleInfo::clear_stage_id() {
  stage_id_ = 0u;
}
::google::protobuf::uint32 TeamChainSettleInfo::stage_id() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.stage_id)
  return stage_id_;
}
void TeamChainSettleInfo::set_stage_id(::google::protobuf::uint32 value) {
  
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.stage_id)
}

// bool is_new_record = 4;
void TeamChainSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
bool TeamChainSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.TeamChainSettleInfo.is_new_record)
  return is_new_record_;
}
void TeamChainSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.TeamChainSettleInfo.is_new_record)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonSettleNotify::DungeonSettleNotify_StrengthenPointDataMapEntry::DungeonSettleNotify_StrengthenPointDataMapEntry() {}
DungeonSettleNotify::DungeonSettleNotify_StrengthenPointDataMapEntry::DungeonSettleNotify_StrengthenPointDataMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonSettleNotify::DungeonSettleNotify_StrengthenPointDataMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[20];
}
void DungeonSettleNotify::DungeonSettleNotify_StrengthenPointDataMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonSettleNotify::DungeonSettleNotify_StrengthenPointDataMapEntry::MergeFrom(const DungeonSettleNotify_StrengthenPointDataMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::DungeonSettleNotify_SettleShowEntry() {}
DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::DungeonSettleNotify_SettleShowEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[21];
}
void DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonSettleNotify::DungeonSettleNotify_SettleShowEntry::MergeFrom(const DungeonSettleNotify_SettleShowEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonSettleNotify::kResultFieldNumber;
const int DungeonSettleNotify::kDungeonIdFieldNumber;
const int DungeonSettleNotify::kStrengthenPointDataMapFieldNumber;
const int DungeonSettleNotify::kExhibitionInfoListFieldNumber;
const int DungeonSettleNotify::kCreatePlayerUidFieldNumber;
const int DungeonSettleNotify::kFailCondListFieldNumber;
const int DungeonSettleNotify::kUseTimeFieldNumber;
const int DungeonSettleNotify::kCloseTimeFieldNumber;
const int DungeonSettleNotify::kIsSuccessFieldNumber;
const int DungeonSettleNotify::kSettleShowFieldNumber;
const int DungeonSettleNotify::kTowerLevelEndNotifyFieldNumber;
const int DungeonSettleNotify::kTrialAvatarFirstPassDungeonNotifyFieldNumber;
const int DungeonSettleNotify::kChannellerSlabLoopDungeonResultInfoFieldNumber;
const int DungeonSettleNotify::kEffigyChallengeDungeonResultInfoFieldNumber;
const int DungeonSettleNotify::kRoguelikeDungeonSettleInfoFieldNumber;
const int DungeonSettleNotify::kCrystalLinkSettleInfoFieldNumber;
const int DungeonSettleNotify::kSummerTimeV2DungeonSettleInfoFieldNumber;
const int DungeonSettleNotify::kInstableSpraySettleInfoFieldNumber;
const int DungeonSettleNotify::kWindFieldDungeonSettleInfoFieldNumber;
const int DungeonSettleNotify::kEffigyChallengeV2SettleInfoFieldNumber;
const int DungeonSettleNotify::kTeamChainSettleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonSettleNotify::DungeonSettleNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonSettleNotify)
}
DungeonSettleNotify::DungeonSettleNotify(const DungeonSettleNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      exhibition_info_list_(from.exhibition_info_list_),
      fail_cond_list_(from.fail_cond_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  settle_show_.MergeFrom(from.settle_show_);
  strengthen_point_data_map_.MergeFrom(from.strengthen_point_data_map_);
  ::memcpy(&use_time_, &from.use_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&use_time_)) + sizeof(dungeon_id_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kTowerLevelEndNotify: {
      mutable_tower_level_end_notify()->::proto::TowerLevelEndNotify::MergeFrom(from.tower_level_end_notify());
      break;
    }
    case kTrialAvatarFirstPassDungeonNotify: {
      mutable_trial_avatar_first_pass_dungeon_notify()->::proto::TrialAvatarFirstPassDungeonNotify::MergeFrom(from.trial_avatar_first_pass_dungeon_notify());
      break;
    }
    case kChannellerSlabLoopDungeonResultInfo: {
      mutable_channeller_slab_loop_dungeon_result_info()->::proto::ChannellerSlabLoopDungeonResultInfo::MergeFrom(from.channeller_slab_loop_dungeon_result_info());
      break;
    }
    case kEffigyChallengeDungeonResultInfo: {
      mutable_effigy_challenge_dungeon_result_info()->::proto::EffigyChallengeDungeonResultInfo::MergeFrom(from.effigy_challenge_dungeon_result_info());
      break;
    }
    case kRoguelikeDungeonSettleInfo: {
      mutable_roguelike_dungeon_settle_info()->::proto::RoguelikeDungeonSettleInfo::MergeFrom(from.roguelike_dungeon_settle_info());
      break;
    }
    case kCrystalLinkSettleInfo: {
      mutable_crystal_link_settle_info()->::proto::CrystalLinkDungeonSettleInfo::MergeFrom(from.crystal_link_settle_info());
      break;
    }
    case kSummerTimeV2DungeonSettleInfo: {
      mutable_summer_time_v2_dungeon_settle_info()->::proto::SummerTimeV2DungeonSettleInfo::MergeFrom(from.summer_time_v2_dungeon_settle_info());
      break;
    }
    case kInstableSpraySettleInfo: {
      mutable_instable_spray_settle_info()->::proto::InstableSprayDungeonSettleInfo::MergeFrom(from.instable_spray_settle_info());
      break;
    }
    case kWindFieldDungeonSettleInfo: {
      mutable_wind_field_dungeon_settle_info()->::proto::WindFieldDungeonSettleInfo::MergeFrom(from.wind_field_dungeon_settle_info());
      break;
    }
    case kEffigyChallengeV2SettleInfo: {
      mutable_effigy_challenge_v2_settle_info()->::proto::EffigyChallengeV2SettleInfo::MergeFrom(from.effigy_challenge_v2_settle_info());
      break;
    }
    case kTeamChainSettleInfo: {
      mutable_team_chain_settle_info()->::proto::TeamChainSettleInfo::MergeFrom(from.team_chain_settle_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.DungeonSettleNotify)
}

void DungeonSettleNotify::SharedCtor() {
  ::memset(&use_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&use_time_)) + sizeof(dungeon_id_));
  clear_has_detail();
  _cached_size_ = 0;
}

DungeonSettleNotify::~DungeonSettleNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonSettleNotify)
  SharedDtor();
}

void DungeonSettleNotify::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void DungeonSettleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSettleNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonSettleNotify& DungeonSettleNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonSettleNotify* DungeonSettleNotify::New(::google::protobuf::Arena* arena) const {
  DungeonSettleNotify* n = new DungeonSettleNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonSettleNotify::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.DungeonSettleNotify)
  switch (detail_case()) {
    case kTowerLevelEndNotify: {
      delete detail_.tower_level_end_notify_;
      break;
    }
    case kTrialAvatarFirstPassDungeonNotify: {
      delete detail_.trial_avatar_first_pass_dungeon_notify_;
      break;
    }
    case kChannellerSlabLoopDungeonResultInfo: {
      delete detail_.channeller_slab_loop_dungeon_result_info_;
      break;
    }
    case kEffigyChallengeDungeonResultInfo: {
      delete detail_.effigy_challenge_dungeon_result_info_;
      break;
    }
    case kRoguelikeDungeonSettleInfo: {
      delete detail_.roguelike_dungeon_settle_info_;
      break;
    }
    case kCrystalLinkSettleInfo: {
      delete detail_.crystal_link_settle_info_;
      break;
    }
    case kSummerTimeV2DungeonSettleInfo: {
      delete detail_.summer_time_v2_dungeon_settle_info_;
      break;
    }
    case kInstableSpraySettleInfo: {
      delete detail_.instable_spray_settle_info_;
      break;
    }
    case kWindFieldDungeonSettleInfo: {
      delete detail_.wind_field_dungeon_settle_info_;
      break;
    }
    case kEffigyChallengeV2SettleInfo: {
      delete detail_.effigy_challenge_v2_settle_info_;
      break;
    }
    case kTeamChainSettleInfo: {
      delete detail_.team_chain_settle_info_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void DungeonSettleNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settle_show_.Clear();
  exhibition_info_list_.Clear();
  fail_cond_list_.Clear();
  strengthen_point_data_map_.Clear();
  ::memset(&use_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&use_time_)) + sizeof(dungeon_id_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool DungeonSettleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonSettleNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 use_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 close_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &close_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.ParamList> settle_show = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DungeonSettleNotify_SettleShowEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonSettleNotify_SettleShowEntry,
              ::google::protobuf::uint32, ::proto::ParamList,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList > > parser(&settle_show_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_success = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.DungeonSettleExhibitionInfo exhibition_info_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exhibition_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 result = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 fail_cond_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fail_cond_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_fail_cond_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 create_player_uid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DungeonSettleNotify_StrengthenPointDataMapEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonSettleNotify_StrengthenPointDataMapEntry,
              ::google::protobuf::uint32, ::proto::StrengthenPointData,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData > > parser(&strengthen_point_data_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
      case 112: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 898 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crystal_link_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
      case 193: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 1546 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instable_spray_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.TeamChainSettleInfo team_chain_settle_info = 324;
      case 324: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 2594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_chain_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
      case 328: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 2626 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effigy_challenge_dungeon_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.TowerLevelEndNotify tower_level_end_notify = 351;
      case 351: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(250u /* 2810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_level_end_notify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
      case 635: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 5082 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trial_avatar_first_pass_dungeon_notify()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
      case 686: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 5490 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channeller_slab_loop_dungeon_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
      case 1482: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 11858 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roguelike_dungeon_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
      case 1802: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 14418 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effigy_challenge_v2_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
      case 1825: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 14602 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wind_field_dungeon_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
      case 1882: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u /* 15058 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summer_time_v2_dungeon_settle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonSettleNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonSettleNotify)
  return false;
#undef DO_
}

void DungeonSettleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 use_time = 1;
  if (this->use_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->use_time(), output);
  }

  // uint32 close_time = 4;
  if (this->close_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->close_time(), output);
  }

  // map<uint32, .proto.ParamList> settle_show = 5;
  if (!this->settle_show().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->settle_show().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->settle_show().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(settle_show_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it) {
        entry.reset(settle_show_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
      }
    }
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_success(), output);
  }

  // repeated .proto.DungeonSettleExhibitionInfo exhibition_info_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exhibition_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->exhibition_info_list(static_cast<int>(i)), output);
  }

  // uint32 result = 10;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->result(), output);
  }

  // repeated uint32 fail_cond_list = 11;
  if (this->fail_cond_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fail_cond_list_cached_byte_size_));
  }
  for (int i = 0, n = this->fail_cond_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->fail_cond_list(i), output);
  }

  // uint32 create_player_uid = 12;
  if (this->create_player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->create_player_uid(), output);
  }

  // uint32 dungeon_id = 13;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dungeon_id(), output);
  }

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 14;
  if (!this->strengthen_point_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->strengthen_point_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strengthen_point_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_StrengthenPointDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_StrengthenPointDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, *entry, output);
      }
    }
  }

  // .proto.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
  if (has_crystal_link_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      112, *detail_.crystal_link_settle_info_, output);
  }

  // .proto.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
  if (has_instable_spray_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      193, *detail_.instable_spray_settle_info_, output);
  }

  // .proto.TeamChainSettleInfo team_chain_settle_info = 324;
  if (has_team_chain_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      324, *detail_.team_chain_settle_info_, output);
  }

  // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
  if (has_effigy_challenge_dungeon_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      328, *detail_.effigy_challenge_dungeon_result_info_, output);
  }

  // .proto.TowerLevelEndNotify tower_level_end_notify = 351;
  if (has_tower_level_end_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      351, *detail_.tower_level_end_notify_, output);
  }

  // .proto.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
  if (has_trial_avatar_first_pass_dungeon_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      635, *detail_.trial_avatar_first_pass_dungeon_notify_, output);
  }

  // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
  if (has_channeller_slab_loop_dungeon_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      686, *detail_.channeller_slab_loop_dungeon_result_info_, output);
  }

  // .proto.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
  if (has_roguelike_dungeon_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1482, *detail_.roguelike_dungeon_settle_info_, output);
  }

  // .proto.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
  if (has_effigy_challenge_v2_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1802, *detail_.effigy_challenge_v2_settle_info_, output);
  }

  // .proto.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
  if (has_wind_field_dungeon_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1825, *detail_.wind_field_dungeon_settle_info_, output);
  }

  // .proto.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
  if (has_summer_time_v2_dungeon_settle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1882, *detail_.summer_time_v2_dungeon_settle_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonSettleNotify)
}

::google::protobuf::uint8* DungeonSettleNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonSettleNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 use_time = 1;
  if (this->use_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->use_time(), target);
  }

  // uint32 close_time = 4;
  if (this->close_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->close_time(), target);
  }

  // map<uint32, .proto.ParamList> settle_show = 5;
  if (!this->settle_show().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->settle_show().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->settle_show().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(settle_show_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
          it = this->settle_show().begin();
          it != this->settle_show().end(); ++it) {
        entry.reset(settle_show_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
      }
    }
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_success(), target);
  }

  // repeated .proto.DungeonSettleExhibitionInfo exhibition_info_list = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->exhibition_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->exhibition_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 result = 10;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->result(), target);
  }

  // repeated uint32 fail_cond_list = 11;
  if (this->fail_cond_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fail_cond_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->fail_cond_list_, target);
  }

  // uint32 create_player_uid = 12;
  if (this->create_player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->create_player_uid(), target);
  }

  // uint32 dungeon_id = 13;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->dungeon_id(), target);
  }

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 14;
  if (!this->strengthen_point_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->strengthen_point_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strengthen_point_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_StrengthenPointDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonSettleNotify_StrengthenPointDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       14, *entry, deterministic, target);
;
      }
    }
  }

  // .proto.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
  if (has_crystal_link_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        112, *detail_.crystal_link_settle_info_, deterministic, target);
  }

  // .proto.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
  if (has_instable_spray_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        193, *detail_.instable_spray_settle_info_, deterministic, target);
  }

  // .proto.TeamChainSettleInfo team_chain_settle_info = 324;
  if (has_team_chain_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        324, *detail_.team_chain_settle_info_, deterministic, target);
  }

  // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
  if (has_effigy_challenge_dungeon_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        328, *detail_.effigy_challenge_dungeon_result_info_, deterministic, target);
  }

  // .proto.TowerLevelEndNotify tower_level_end_notify = 351;
  if (has_tower_level_end_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        351, *detail_.tower_level_end_notify_, deterministic, target);
  }

  // .proto.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
  if (has_trial_avatar_first_pass_dungeon_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        635, *detail_.trial_avatar_first_pass_dungeon_notify_, deterministic, target);
  }

  // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
  if (has_channeller_slab_loop_dungeon_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        686, *detail_.channeller_slab_loop_dungeon_result_info_, deterministic, target);
  }

  // .proto.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
  if (has_roguelike_dungeon_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1482, *detail_.roguelike_dungeon_settle_info_, deterministic, target);
  }

  // .proto.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
  if (has_effigy_challenge_v2_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1802, *detail_.effigy_challenge_v2_settle_info_, deterministic, target);
  }

  // .proto.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
  if (has_wind_field_dungeon_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1825, *detail_.wind_field_dungeon_settle_info_, deterministic, target);
  }

  // .proto.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
  if (has_summer_time_v2_dungeon_settle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1882, *detail_.summer_time_v2_dungeon_settle_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonSettleNotify)
  return target;
}

size_t DungeonSettleNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonSettleNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.ParamList> settle_show = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->settle_show_size());
  {
    ::google::protobuf::scoped_ptr<DungeonSettleNotify_SettleShowEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >::const_iterator
        it = this->settle_show().begin();
        it != this->settle_show().end(); ++it) {
      entry.reset(settle_show_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated .proto.DungeonSettleExhibitionInfo exhibition_info_list = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->exhibition_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exhibition_info_list(static_cast<int>(i)));
    }
  }

  // repeated uint32 fail_cond_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->fail_cond_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fail_cond_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 14;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strengthen_point_data_map_size());
  {
    ::google::protobuf::scoped_ptr<DungeonSettleNotify_StrengthenPointDataMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
        it = this->strengthen_point_data_map().begin();
        it != this->strengthen_point_data_map().end(); ++it) {
      entry.reset(strengthen_point_data_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 use_time = 1;
  if (this->use_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->use_time());
  }

  // uint32 close_time = 4;
  if (this->close_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->close_time());
  }

  // bool is_success = 7;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 result = 10;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  // uint32 create_player_uid = 12;
  if (this->create_player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->create_player_uid());
  }

  // uint32 dungeon_id = 13;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  switch (detail_case()) {
    // .proto.TowerLevelEndNotify tower_level_end_notify = 351;
    case kTowerLevelEndNotify: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.tower_level_end_notify_);
      break;
    }
    // .proto.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
    case kTrialAvatarFirstPassDungeonNotify: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.trial_avatar_first_pass_dungeon_notify_);
      break;
    }
    // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
    case kChannellerSlabLoopDungeonResultInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.channeller_slab_loop_dungeon_result_info_);
      break;
    }
    // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
    case kEffigyChallengeDungeonResultInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.effigy_challenge_dungeon_result_info_);
      break;
    }
    // .proto.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
    case kRoguelikeDungeonSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.roguelike_dungeon_settle_info_);
      break;
    }
    // .proto.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
    case kCrystalLinkSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.crystal_link_settle_info_);
      break;
    }
    // .proto.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
    case kSummerTimeV2DungeonSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.summer_time_v2_dungeon_settle_info_);
      break;
    }
    // .proto.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
    case kInstableSpraySettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.instable_spray_settle_info_);
      break;
    }
    // .proto.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
    case kWindFieldDungeonSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.wind_field_dungeon_settle_info_);
      break;
    }
    // .proto.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
    case kEffigyChallengeV2SettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.effigy_challenge_v2_settle_info_);
      break;
    }
    // .proto.TeamChainSettleInfo team_chain_settle_info = 324;
    case kTeamChainSettleInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.team_chain_settle_info_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSettleNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonSettleNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonSettleNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonSettleNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonSettleNotify)
    MergeFrom(*source);
  }
}

void DungeonSettleNotify::MergeFrom(const DungeonSettleNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonSettleNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settle_show_.MergeFrom(from.settle_show_);
  exhibition_info_list_.MergeFrom(from.exhibition_info_list_);
  fail_cond_list_.MergeFrom(from.fail_cond_list_);
  strengthen_point_data_map_.MergeFrom(from.strengthen_point_data_map_);
  if (from.use_time() != 0) {
    set_use_time(from.use_time());
  }
  if (from.close_time() != 0) {
    set_close_time(from.close_time());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.create_player_uid() != 0) {
    set_create_player_uid(from.create_player_uid());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  switch (from.detail_case()) {
    case kTowerLevelEndNotify: {
      mutable_tower_level_end_notify()->::proto::TowerLevelEndNotify::MergeFrom(from.tower_level_end_notify());
      break;
    }
    case kTrialAvatarFirstPassDungeonNotify: {
      mutable_trial_avatar_first_pass_dungeon_notify()->::proto::TrialAvatarFirstPassDungeonNotify::MergeFrom(from.trial_avatar_first_pass_dungeon_notify());
      break;
    }
    case kChannellerSlabLoopDungeonResultInfo: {
      mutable_channeller_slab_loop_dungeon_result_info()->::proto::ChannellerSlabLoopDungeonResultInfo::MergeFrom(from.channeller_slab_loop_dungeon_result_info());
      break;
    }
    case kEffigyChallengeDungeonResultInfo: {
      mutable_effigy_challenge_dungeon_result_info()->::proto::EffigyChallengeDungeonResultInfo::MergeFrom(from.effigy_challenge_dungeon_result_info());
      break;
    }
    case kRoguelikeDungeonSettleInfo: {
      mutable_roguelike_dungeon_settle_info()->::proto::RoguelikeDungeonSettleInfo::MergeFrom(from.roguelike_dungeon_settle_info());
      break;
    }
    case kCrystalLinkSettleInfo: {
      mutable_crystal_link_settle_info()->::proto::CrystalLinkDungeonSettleInfo::MergeFrom(from.crystal_link_settle_info());
      break;
    }
    case kSummerTimeV2DungeonSettleInfo: {
      mutable_summer_time_v2_dungeon_settle_info()->::proto::SummerTimeV2DungeonSettleInfo::MergeFrom(from.summer_time_v2_dungeon_settle_info());
      break;
    }
    case kInstableSpraySettleInfo: {
      mutable_instable_spray_settle_info()->::proto::InstableSprayDungeonSettleInfo::MergeFrom(from.instable_spray_settle_info());
      break;
    }
    case kWindFieldDungeonSettleInfo: {
      mutable_wind_field_dungeon_settle_info()->::proto::WindFieldDungeonSettleInfo::MergeFrom(from.wind_field_dungeon_settle_info());
      break;
    }
    case kEffigyChallengeV2SettleInfo: {
      mutable_effigy_challenge_v2_settle_info()->::proto::EffigyChallengeV2SettleInfo::MergeFrom(from.effigy_challenge_v2_settle_info());
      break;
    }
    case kTeamChainSettleInfo: {
      mutable_team_chain_settle_info()->::proto::TeamChainSettleInfo::MergeFrom(from.team_chain_settle_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void DungeonSettleNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSettleNotify::CopyFrom(const DungeonSettleNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonSettleNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSettleNotify::IsInitialized() const {
  return true;
}

void DungeonSettleNotify::Swap(DungeonSettleNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonSettleNotify::InternalSwap(DungeonSettleNotify* other) {
  using std::swap;
  settle_show_.Swap(&other->settle_show_);
  exhibition_info_list_.InternalSwap(&other->exhibition_info_list_);
  fail_cond_list_.InternalSwap(&other->fail_cond_list_);
  strengthen_point_data_map_.Swap(&other->strengthen_point_data_map_);
  swap(use_time_, other->use_time_);
  swap(close_time_, other->close_time_);
  swap(is_success_, other->is_success_);
  swap(result_, other->result_);
  swap(create_player_uid_, other->create_player_uid_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonSettleNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonSettleNotify

// uint32 result = 10;
void DungeonSettleNotify::clear_result() {
  result_ = 0u;
}
::google::protobuf::uint32 DungeonSettleNotify::result() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.result)
  return result_;
}
void DungeonSettleNotify::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.result)
}

// uint32 dungeon_id = 13;
void DungeonSettleNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonSettleNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonSettleNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.dungeon_id)
}

// map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 14;
int DungeonSettleNotify::strengthen_point_data_map_size() const {
  return strengthen_point_data_map_.size();
}
void DungeonSettleNotify::clear_strengthen_point_data_map() {
  strengthen_point_data_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
DungeonSettleNotify::strengthen_point_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonSettleNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
DungeonSettleNotify::mutable_strengthen_point_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonSettleNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.MutableMap();
}

// repeated .proto.DungeonSettleExhibitionInfo exhibition_info_list = 8;
int DungeonSettleNotify::exhibition_info_list_size() const {
  return exhibition_info_list_.size();
}
void DungeonSettleNotify::clear_exhibition_info_list() {
  exhibition_info_list_.Clear();
}
const ::proto::DungeonSettleExhibitionInfo& DungeonSettleNotify::exhibition_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_.Get(index);
}
::proto::DungeonSettleExhibitionInfo* DungeonSettleNotify::mutable_exhibition_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_.Mutable(index);
}
::proto::DungeonSettleExhibitionInfo* DungeonSettleNotify::add_exhibition_info_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DungeonSettleExhibitionInfo >*
DungeonSettleNotify::mutable_exhibition_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonSettleNotify.exhibition_info_list)
  return &exhibition_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DungeonSettleExhibitionInfo >&
DungeonSettleNotify::exhibition_info_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonSettleNotify.exhibition_info_list)
  return exhibition_info_list_;
}

// uint32 create_player_uid = 12;
void DungeonSettleNotify::clear_create_player_uid() {
  create_player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonSettleNotify::create_player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.create_player_uid)
  return create_player_uid_;
}
void DungeonSettleNotify::set_create_player_uid(::google::protobuf::uint32 value) {
  
  create_player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.create_player_uid)
}

// repeated uint32 fail_cond_list = 11;
int DungeonSettleNotify::fail_cond_list_size() const {
  return fail_cond_list_.size();
}
void DungeonSettleNotify::clear_fail_cond_list() {
  fail_cond_list_.Clear();
}
::google::protobuf::uint32 DungeonSettleNotify::fail_cond_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.fail_cond_list)
  return fail_cond_list_.Get(index);
}
void DungeonSettleNotify::set_fail_cond_list(int index, ::google::protobuf::uint32 value) {
  fail_cond_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.fail_cond_list)
}
void DungeonSettleNotify::add_fail_cond_list(::google::protobuf::uint32 value) {
  fail_cond_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonSettleNotify.fail_cond_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonSettleNotify::fail_cond_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonSettleNotify.fail_cond_list)
  return fail_cond_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonSettleNotify::mutable_fail_cond_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonSettleNotify.fail_cond_list)
  return &fail_cond_list_;
}

// uint32 use_time = 1;
void DungeonSettleNotify::clear_use_time() {
  use_time_ = 0u;
}
::google::protobuf::uint32 DungeonSettleNotify::use_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.use_time)
  return use_time_;
}
void DungeonSettleNotify::set_use_time(::google::protobuf::uint32 value) {
  
  use_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.use_time)
}

// uint32 close_time = 4;
void DungeonSettleNotify::clear_close_time() {
  close_time_ = 0u;
}
::google::protobuf::uint32 DungeonSettleNotify::close_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.close_time)
  return close_time_;
}
void DungeonSettleNotify::set_close_time(::google::protobuf::uint32 value) {
  
  close_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.close_time)
}

// bool is_success = 7;
void DungeonSettleNotify::clear_is_success() {
  is_success_ = false;
}
bool DungeonSettleNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.is_success)
  return is_success_;
}
void DungeonSettleNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSettleNotify.is_success)
}

// map<uint32, .proto.ParamList> settle_show = 5;
int DungeonSettleNotify::settle_show_size() const {
  return settle_show_.size();
}
void DungeonSettleNotify::clear_settle_show() {
  settle_show_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >&
DungeonSettleNotify::settle_show() const {
  // @@protoc_insertion_point(field_map:proto.DungeonSettleNotify.settle_show)
  return settle_show_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ParamList >*
DungeonSettleNotify::mutable_settle_show() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonSettleNotify.settle_show)
  return settle_show_.MutableMap();
}

// .proto.TowerLevelEndNotify tower_level_end_notify = 351;
bool DungeonSettleNotify::has_tower_level_end_notify() const {
  return detail_case() == kTowerLevelEndNotify;
}
void DungeonSettleNotify::set_has_tower_level_end_notify() {
  _oneof_case_[0] = kTowerLevelEndNotify;
}
void DungeonSettleNotify::clear_tower_level_end_notify() {
  if (has_tower_level_end_notify()) {
    delete detail_.tower_level_end_notify_;
    clear_has_detail();
  }
}
 const ::proto::TowerLevelEndNotify& DungeonSettleNotify::tower_level_end_notify() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.tower_level_end_notify)
  return has_tower_level_end_notify()
      ? *detail_.tower_level_end_notify_
      : ::proto::TowerLevelEndNotify::default_instance();
}
::proto::TowerLevelEndNotify* DungeonSettleNotify::mutable_tower_level_end_notify() {
  if (!has_tower_level_end_notify()) {
    clear_detail();
    set_has_tower_level_end_notify();
    detail_.tower_level_end_notify_ = new ::proto::TowerLevelEndNotify;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.tower_level_end_notify)
  return detail_.tower_level_end_notify_;
}
::proto::TowerLevelEndNotify* DungeonSettleNotify::release_tower_level_end_notify() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.tower_level_end_notify)
  if (has_tower_level_end_notify()) {
    clear_has_detail();
    ::proto::TowerLevelEndNotify* temp = detail_.tower_level_end_notify_;
    detail_.tower_level_end_notify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_tower_level_end_notify(::proto::TowerLevelEndNotify* tower_level_end_notify) {
  clear_detail();
  if (tower_level_end_notify) {
    set_has_tower_level_end_notify();
    detail_.tower_level_end_notify_ = tower_level_end_notify;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.tower_level_end_notify)
}

// .proto.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
bool DungeonSettleNotify::has_trial_avatar_first_pass_dungeon_notify() const {
  return detail_case() == kTrialAvatarFirstPassDungeonNotify;
}
void DungeonSettleNotify::set_has_trial_avatar_first_pass_dungeon_notify() {
  _oneof_case_[0] = kTrialAvatarFirstPassDungeonNotify;
}
void DungeonSettleNotify::clear_trial_avatar_first_pass_dungeon_notify() {
  if (has_trial_avatar_first_pass_dungeon_notify()) {
    delete detail_.trial_avatar_first_pass_dungeon_notify_;
    clear_has_detail();
  }
}
 const ::proto::TrialAvatarFirstPassDungeonNotify& DungeonSettleNotify::trial_avatar_first_pass_dungeon_notify() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
  return has_trial_avatar_first_pass_dungeon_notify()
      ? *detail_.trial_avatar_first_pass_dungeon_notify_
      : ::proto::TrialAvatarFirstPassDungeonNotify::default_instance();
}
::proto::TrialAvatarFirstPassDungeonNotify* DungeonSettleNotify::mutable_trial_avatar_first_pass_dungeon_notify() {
  if (!has_trial_avatar_first_pass_dungeon_notify()) {
    clear_detail();
    set_has_trial_avatar_first_pass_dungeon_notify();
    detail_.trial_avatar_first_pass_dungeon_notify_ = new ::proto::TrialAvatarFirstPassDungeonNotify;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
  return detail_.trial_avatar_first_pass_dungeon_notify_;
}
::proto::TrialAvatarFirstPassDungeonNotify* DungeonSettleNotify::release_trial_avatar_first_pass_dungeon_notify() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
  if (has_trial_avatar_first_pass_dungeon_notify()) {
    clear_has_detail();
    ::proto::TrialAvatarFirstPassDungeonNotify* temp = detail_.trial_avatar_first_pass_dungeon_notify_;
    detail_.trial_avatar_first_pass_dungeon_notify_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_trial_avatar_first_pass_dungeon_notify(::proto::TrialAvatarFirstPassDungeonNotify* trial_avatar_first_pass_dungeon_notify) {
  clear_detail();
  if (trial_avatar_first_pass_dungeon_notify) {
    set_has_trial_avatar_first_pass_dungeon_notify();
    detail_.trial_avatar_first_pass_dungeon_notify_ = trial_avatar_first_pass_dungeon_notify;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.trial_avatar_first_pass_dungeon_notify)
}

// .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
bool DungeonSettleNotify::has_channeller_slab_loop_dungeon_result_info() const {
  return detail_case() == kChannellerSlabLoopDungeonResultInfo;
}
void DungeonSettleNotify::set_has_channeller_slab_loop_dungeon_result_info() {
  _oneof_case_[0] = kChannellerSlabLoopDungeonResultInfo;
}
void DungeonSettleNotify::clear_channeller_slab_loop_dungeon_result_info() {
  if (has_channeller_slab_loop_dungeon_result_info()) {
    delete detail_.channeller_slab_loop_dungeon_result_info_;
    clear_has_detail();
  }
}
 const ::proto::ChannellerSlabLoopDungeonResultInfo& DungeonSettleNotify::channeller_slab_loop_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
  return has_channeller_slab_loop_dungeon_result_info()
      ? *detail_.channeller_slab_loop_dungeon_result_info_
      : ::proto::ChannellerSlabLoopDungeonResultInfo::default_instance();
}
::proto::ChannellerSlabLoopDungeonResultInfo* DungeonSettleNotify::mutable_channeller_slab_loop_dungeon_result_info() {
  if (!has_channeller_slab_loop_dungeon_result_info()) {
    clear_detail();
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = new ::proto::ChannellerSlabLoopDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
  return detail_.channeller_slab_loop_dungeon_result_info_;
}
::proto::ChannellerSlabLoopDungeonResultInfo* DungeonSettleNotify::release_channeller_slab_loop_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
  if (has_channeller_slab_loop_dungeon_result_info()) {
    clear_has_detail();
    ::proto::ChannellerSlabLoopDungeonResultInfo* temp = detail_.channeller_slab_loop_dungeon_result_info_;
    detail_.channeller_slab_loop_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_channeller_slab_loop_dungeon_result_info(::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info) {
  clear_detail();
  if (channeller_slab_loop_dungeon_result_info) {
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = channeller_slab_loop_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.channeller_slab_loop_dungeon_result_info)
}

// .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
bool DungeonSettleNotify::has_effigy_challenge_dungeon_result_info() const {
  return detail_case() == kEffigyChallengeDungeonResultInfo;
}
void DungeonSettleNotify::set_has_effigy_challenge_dungeon_result_info() {
  _oneof_case_[0] = kEffigyChallengeDungeonResultInfo;
}
void DungeonSettleNotify::clear_effigy_challenge_dungeon_result_info() {
  if (has_effigy_challenge_dungeon_result_info()) {
    delete detail_.effigy_challenge_dungeon_result_info_;
    clear_has_detail();
  }
}
 const ::proto::EffigyChallengeDungeonResultInfo& DungeonSettleNotify::effigy_challenge_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
  return has_effigy_challenge_dungeon_result_info()
      ? *detail_.effigy_challenge_dungeon_result_info_
      : ::proto::EffigyChallengeDungeonResultInfo::default_instance();
}
::proto::EffigyChallengeDungeonResultInfo* DungeonSettleNotify::mutable_effigy_challenge_dungeon_result_info() {
  if (!has_effigy_challenge_dungeon_result_info()) {
    clear_detail();
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = new ::proto::EffigyChallengeDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
  return detail_.effigy_challenge_dungeon_result_info_;
}
::proto::EffigyChallengeDungeonResultInfo* DungeonSettleNotify::release_effigy_challenge_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
  if (has_effigy_challenge_dungeon_result_info()) {
    clear_has_detail();
    ::proto::EffigyChallengeDungeonResultInfo* temp = detail_.effigy_challenge_dungeon_result_info_;
    detail_.effigy_challenge_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_effigy_challenge_dungeon_result_info(::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info) {
  clear_detail();
  if (effigy_challenge_dungeon_result_info) {
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = effigy_challenge_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.effigy_challenge_dungeon_result_info)
}

// .proto.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
bool DungeonSettleNotify::has_roguelike_dungeon_settle_info() const {
  return detail_case() == kRoguelikeDungeonSettleInfo;
}
void DungeonSettleNotify::set_has_roguelike_dungeon_settle_info() {
  _oneof_case_[0] = kRoguelikeDungeonSettleInfo;
}
void DungeonSettleNotify::clear_roguelike_dungeon_settle_info() {
  if (has_roguelike_dungeon_settle_info()) {
    delete detail_.roguelike_dungeon_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::RoguelikeDungeonSettleInfo& DungeonSettleNotify::roguelike_dungeon_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
  return has_roguelike_dungeon_settle_info()
      ? *detail_.roguelike_dungeon_settle_info_
      : ::proto::RoguelikeDungeonSettleInfo::default_instance();
}
::proto::RoguelikeDungeonSettleInfo* DungeonSettleNotify::mutable_roguelike_dungeon_settle_info() {
  if (!has_roguelike_dungeon_settle_info()) {
    clear_detail();
    set_has_roguelike_dungeon_settle_info();
    detail_.roguelike_dungeon_settle_info_ = new ::proto::RoguelikeDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
  return detail_.roguelike_dungeon_settle_info_;
}
::proto::RoguelikeDungeonSettleInfo* DungeonSettleNotify::release_roguelike_dungeon_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
  if (has_roguelike_dungeon_settle_info()) {
    clear_has_detail();
    ::proto::RoguelikeDungeonSettleInfo* temp = detail_.roguelike_dungeon_settle_info_;
    detail_.roguelike_dungeon_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_roguelike_dungeon_settle_info(::proto::RoguelikeDungeonSettleInfo* roguelike_dungeon_settle_info) {
  clear_detail();
  if (roguelike_dungeon_settle_info) {
    set_has_roguelike_dungeon_settle_info();
    detail_.roguelike_dungeon_settle_info_ = roguelike_dungeon_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.roguelike_dungeon_settle_info)
}

// .proto.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
bool DungeonSettleNotify::has_crystal_link_settle_info() const {
  return detail_case() == kCrystalLinkSettleInfo;
}
void DungeonSettleNotify::set_has_crystal_link_settle_info() {
  _oneof_case_[0] = kCrystalLinkSettleInfo;
}
void DungeonSettleNotify::clear_crystal_link_settle_info() {
  if (has_crystal_link_settle_info()) {
    delete detail_.crystal_link_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::CrystalLinkDungeonSettleInfo& DungeonSettleNotify::crystal_link_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.crystal_link_settle_info)
  return has_crystal_link_settle_info()
      ? *detail_.crystal_link_settle_info_
      : ::proto::CrystalLinkDungeonSettleInfo::default_instance();
}
::proto::CrystalLinkDungeonSettleInfo* DungeonSettleNotify::mutable_crystal_link_settle_info() {
  if (!has_crystal_link_settle_info()) {
    clear_detail();
    set_has_crystal_link_settle_info();
    detail_.crystal_link_settle_info_ = new ::proto::CrystalLinkDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.crystal_link_settle_info)
  return detail_.crystal_link_settle_info_;
}
::proto::CrystalLinkDungeonSettleInfo* DungeonSettleNotify::release_crystal_link_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.crystal_link_settle_info)
  if (has_crystal_link_settle_info()) {
    clear_has_detail();
    ::proto::CrystalLinkDungeonSettleInfo* temp = detail_.crystal_link_settle_info_;
    detail_.crystal_link_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_crystal_link_settle_info(::proto::CrystalLinkDungeonSettleInfo* crystal_link_settle_info) {
  clear_detail();
  if (crystal_link_settle_info) {
    set_has_crystal_link_settle_info();
    detail_.crystal_link_settle_info_ = crystal_link_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.crystal_link_settle_info)
}

// .proto.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
bool DungeonSettleNotify::has_summer_time_v2_dungeon_settle_info() const {
  return detail_case() == kSummerTimeV2DungeonSettleInfo;
}
void DungeonSettleNotify::set_has_summer_time_v2_dungeon_settle_info() {
  _oneof_case_[0] = kSummerTimeV2DungeonSettleInfo;
}
void DungeonSettleNotify::clear_summer_time_v2_dungeon_settle_info() {
  if (has_summer_time_v2_dungeon_settle_info()) {
    delete detail_.summer_time_v2_dungeon_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::SummerTimeV2DungeonSettleInfo& DungeonSettleNotify::summer_time_v2_dungeon_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
  return has_summer_time_v2_dungeon_settle_info()
      ? *detail_.summer_time_v2_dungeon_settle_info_
      : ::proto::SummerTimeV2DungeonSettleInfo::default_instance();
}
::proto::SummerTimeV2DungeonSettleInfo* DungeonSettleNotify::mutable_summer_time_v2_dungeon_settle_info() {
  if (!has_summer_time_v2_dungeon_settle_info()) {
    clear_detail();
    set_has_summer_time_v2_dungeon_settle_info();
    detail_.summer_time_v2_dungeon_settle_info_ = new ::proto::SummerTimeV2DungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
  return detail_.summer_time_v2_dungeon_settle_info_;
}
::proto::SummerTimeV2DungeonSettleInfo* DungeonSettleNotify::release_summer_time_v2_dungeon_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
  if (has_summer_time_v2_dungeon_settle_info()) {
    clear_has_detail();
    ::proto::SummerTimeV2DungeonSettleInfo* temp = detail_.summer_time_v2_dungeon_settle_info_;
    detail_.summer_time_v2_dungeon_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_summer_time_v2_dungeon_settle_info(::proto::SummerTimeV2DungeonSettleInfo* summer_time_v2_dungeon_settle_info) {
  clear_detail();
  if (summer_time_v2_dungeon_settle_info) {
    set_has_summer_time_v2_dungeon_settle_info();
    detail_.summer_time_v2_dungeon_settle_info_ = summer_time_v2_dungeon_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.summer_time_v2_dungeon_settle_info)
}

// .proto.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
bool DungeonSettleNotify::has_instable_spray_settle_info() const {
  return detail_case() == kInstableSpraySettleInfo;
}
void DungeonSettleNotify::set_has_instable_spray_settle_info() {
  _oneof_case_[0] = kInstableSpraySettleInfo;
}
void DungeonSettleNotify::clear_instable_spray_settle_info() {
  if (has_instable_spray_settle_info()) {
    delete detail_.instable_spray_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::InstableSprayDungeonSettleInfo& DungeonSettleNotify::instable_spray_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.instable_spray_settle_info)
  return has_instable_spray_settle_info()
      ? *detail_.instable_spray_settle_info_
      : ::proto::InstableSprayDungeonSettleInfo::default_instance();
}
::proto::InstableSprayDungeonSettleInfo* DungeonSettleNotify::mutable_instable_spray_settle_info() {
  if (!has_instable_spray_settle_info()) {
    clear_detail();
    set_has_instable_spray_settle_info();
    detail_.instable_spray_settle_info_ = new ::proto::InstableSprayDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.instable_spray_settle_info)
  return detail_.instable_spray_settle_info_;
}
::proto::InstableSprayDungeonSettleInfo* DungeonSettleNotify::release_instable_spray_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.instable_spray_settle_info)
  if (has_instable_spray_settle_info()) {
    clear_has_detail();
    ::proto::InstableSprayDungeonSettleInfo* temp = detail_.instable_spray_settle_info_;
    detail_.instable_spray_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_instable_spray_settle_info(::proto::InstableSprayDungeonSettleInfo* instable_spray_settle_info) {
  clear_detail();
  if (instable_spray_settle_info) {
    set_has_instable_spray_settle_info();
    detail_.instable_spray_settle_info_ = instable_spray_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.instable_spray_settle_info)
}

// .proto.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
bool DungeonSettleNotify::has_wind_field_dungeon_settle_info() const {
  return detail_case() == kWindFieldDungeonSettleInfo;
}
void DungeonSettleNotify::set_has_wind_field_dungeon_settle_info() {
  _oneof_case_[0] = kWindFieldDungeonSettleInfo;
}
void DungeonSettleNotify::clear_wind_field_dungeon_settle_info() {
  if (has_wind_field_dungeon_settle_info()) {
    delete detail_.wind_field_dungeon_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::WindFieldDungeonSettleInfo& DungeonSettleNotify::wind_field_dungeon_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
  return has_wind_field_dungeon_settle_info()
      ? *detail_.wind_field_dungeon_settle_info_
      : ::proto::WindFieldDungeonSettleInfo::default_instance();
}
::proto::WindFieldDungeonSettleInfo* DungeonSettleNotify::mutable_wind_field_dungeon_settle_info() {
  if (!has_wind_field_dungeon_settle_info()) {
    clear_detail();
    set_has_wind_field_dungeon_settle_info();
    detail_.wind_field_dungeon_settle_info_ = new ::proto::WindFieldDungeonSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
  return detail_.wind_field_dungeon_settle_info_;
}
::proto::WindFieldDungeonSettleInfo* DungeonSettleNotify::release_wind_field_dungeon_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
  if (has_wind_field_dungeon_settle_info()) {
    clear_has_detail();
    ::proto::WindFieldDungeonSettleInfo* temp = detail_.wind_field_dungeon_settle_info_;
    detail_.wind_field_dungeon_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_wind_field_dungeon_settle_info(::proto::WindFieldDungeonSettleInfo* wind_field_dungeon_settle_info) {
  clear_detail();
  if (wind_field_dungeon_settle_info) {
    set_has_wind_field_dungeon_settle_info();
    detail_.wind_field_dungeon_settle_info_ = wind_field_dungeon_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.wind_field_dungeon_settle_info)
}

// .proto.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
bool DungeonSettleNotify::has_effigy_challenge_v2_settle_info() const {
  return detail_case() == kEffigyChallengeV2SettleInfo;
}
void DungeonSettleNotify::set_has_effigy_challenge_v2_settle_info() {
  _oneof_case_[0] = kEffigyChallengeV2SettleInfo;
}
void DungeonSettleNotify::clear_effigy_challenge_v2_settle_info() {
  if (has_effigy_challenge_v2_settle_info()) {
    delete detail_.effigy_challenge_v2_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::EffigyChallengeV2SettleInfo& DungeonSettleNotify::effigy_challenge_v2_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
  return has_effigy_challenge_v2_settle_info()
      ? *detail_.effigy_challenge_v2_settle_info_
      : ::proto::EffigyChallengeV2SettleInfo::default_instance();
}
::proto::EffigyChallengeV2SettleInfo* DungeonSettleNotify::mutable_effigy_challenge_v2_settle_info() {
  if (!has_effigy_challenge_v2_settle_info()) {
    clear_detail();
    set_has_effigy_challenge_v2_settle_info();
    detail_.effigy_challenge_v2_settle_info_ = new ::proto::EffigyChallengeV2SettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
  return detail_.effigy_challenge_v2_settle_info_;
}
::proto::EffigyChallengeV2SettleInfo* DungeonSettleNotify::release_effigy_challenge_v2_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
  if (has_effigy_challenge_v2_settle_info()) {
    clear_has_detail();
    ::proto::EffigyChallengeV2SettleInfo* temp = detail_.effigy_challenge_v2_settle_info_;
    detail_.effigy_challenge_v2_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_effigy_challenge_v2_settle_info(::proto::EffigyChallengeV2SettleInfo* effigy_challenge_v2_settle_info) {
  clear_detail();
  if (effigy_challenge_v2_settle_info) {
    set_has_effigy_challenge_v2_settle_info();
    detail_.effigy_challenge_v2_settle_info_ = effigy_challenge_v2_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.effigy_challenge_v2_settle_info)
}

// .proto.TeamChainSettleInfo team_chain_settle_info = 324;
bool DungeonSettleNotify::has_team_chain_settle_info() const {
  return detail_case() == kTeamChainSettleInfo;
}
void DungeonSettleNotify::set_has_team_chain_settle_info() {
  _oneof_case_[0] = kTeamChainSettleInfo;
}
void DungeonSettleNotify::clear_team_chain_settle_info() {
  if (has_team_chain_settle_info()) {
    delete detail_.team_chain_settle_info_;
    clear_has_detail();
  }
}
 const ::proto::TeamChainSettleInfo& DungeonSettleNotify::team_chain_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSettleNotify.team_chain_settle_info)
  return has_team_chain_settle_info()
      ? *detail_.team_chain_settle_info_
      : ::proto::TeamChainSettleInfo::default_instance();
}
::proto::TeamChainSettleInfo* DungeonSettleNotify::mutable_team_chain_settle_info() {
  if (!has_team_chain_settle_info()) {
    clear_detail();
    set_has_team_chain_settle_info();
    detail_.team_chain_settle_info_ = new ::proto::TeamChainSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonSettleNotify.team_chain_settle_info)
  return detail_.team_chain_settle_info_;
}
::proto::TeamChainSettleInfo* DungeonSettleNotify::release_team_chain_settle_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonSettleNotify.team_chain_settle_info)
  if (has_team_chain_settle_info()) {
    clear_has_detail();
    ::proto::TeamChainSettleInfo* temp = detail_.team_chain_settle_info_;
    detail_.team_chain_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonSettleNotify::set_allocated_team_chain_settle_info(::proto::TeamChainSettleInfo* team_chain_settle_info) {
  clear_detail();
  if (team_chain_settle_info) {
    set_has_team_chain_settle_info();
    detail_.team_chain_settle_info_ = team_chain_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonSettleNotify.team_chain_settle_info)
}

bool DungeonSettleNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void DungeonSettleNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
DungeonSettleNotify::DetailCase DungeonSettleNotify::detail_case() const {
  return DungeonSettleNotify::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonPlayerDieNotify::DungeonPlayerDieNotify_StrengthenPointDataMapEntry::DungeonPlayerDieNotify_StrengthenPointDataMapEntry() {}
DungeonPlayerDieNotify::DungeonPlayerDieNotify_StrengthenPointDataMapEntry::DungeonPlayerDieNotify_StrengthenPointDataMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonPlayerDieNotify::DungeonPlayerDieNotify_StrengthenPointDataMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[23];
}
void DungeonPlayerDieNotify::DungeonPlayerDieNotify_StrengthenPointDataMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonPlayerDieNotify::DungeonPlayerDieNotify_StrengthenPointDataMapEntry::MergeFrom(const DungeonPlayerDieNotify_StrengthenPointDataMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonPlayerDieNotify::kStrengthenPointDataMapFieldNumber;
const int DungeonPlayerDieNotify::kWaitTimeFieldNumber;
const int DungeonPlayerDieNotify::kDungeonIdFieldNumber;
const int DungeonPlayerDieNotify::kMurdererEntityIdFieldNumber;
const int DungeonPlayerDieNotify::kDieTypeFieldNumber;
const int DungeonPlayerDieNotify::kReviveCountFieldNumber;
const int DungeonPlayerDieNotify::kMonsterIdFieldNumber;
const int DungeonPlayerDieNotify::kGadgetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonPlayerDieNotify::DungeonPlayerDieNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonPlayerDieNotify)
}
DungeonPlayerDieNotify::DungeonPlayerDieNotify(const DungeonPlayerDieNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strengthen_point_data_map_.MergeFrom(from.strengthen_point_data_map_);
  ::memcpy(&wait_time_, &from.wait_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&wait_time_)) + sizeof(dungeon_id_));
  clear_has_entity();
  switch (from.entity_case()) {
    case kMonsterId: {
      set_monster_id(from.monster_id());
      break;
    }
    case kGadgetId: {
      set_gadget_id(from.gadget_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.DungeonPlayerDieNotify)
}

void DungeonPlayerDieNotify::SharedCtor() {
  ::memset(&wait_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&wait_time_)) + sizeof(dungeon_id_));
  clear_has_entity();
  _cached_size_ = 0;
}

DungeonPlayerDieNotify::~DungeonPlayerDieNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonPlayerDieNotify)
  SharedDtor();
}

void DungeonPlayerDieNotify::SharedDtor() {
  if (has_entity()) {
    clear_entity();
  }
}

void DungeonPlayerDieNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonPlayerDieNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonPlayerDieNotify& DungeonPlayerDieNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonPlayerDieNotify* DungeonPlayerDieNotify::New(::google::protobuf::Arena* arena) const {
  DungeonPlayerDieNotify* n = new DungeonPlayerDieNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonPlayerDieNotify::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:proto.DungeonPlayerDieNotify)
  switch (entity_case()) {
    case kMonsterId: {
      // No need to clear
      break;
    }
    case kGadgetId: {
      // No need to clear
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTITY_NOT_SET;
}


void DungeonPlayerDieNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonPlayerDieNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strengthen_point_data_map_.Clear();
  ::memset(&wait_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&wait_time_)) + sizeof(dungeon_id_));
  clear_entity();
  _internal_metadata_.Clear();
}

bool DungeonPlayerDieNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonPlayerDieNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 wait_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wait_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PlayerDieType die_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_type(static_cast< ::proto::PlayerDieType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 monster_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.monster_id_)));
          set_has_monster_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 revive_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revive_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 gadget_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          clear_entity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_.gadget_id_)));
          set_has_gadget_id();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 murderer_entity_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &murderer_entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DungeonPlayerDieNotify_StrengthenPointDataMapEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonPlayerDieNotify_StrengthenPointDataMapEntry,
              ::google::protobuf::uint32, ::proto::StrengthenPointData,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData > > parser(&strengthen_point_data_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonPlayerDieNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonPlayerDieNotify)
  return false;
#undef DO_
}

void DungeonPlayerDieNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonPlayerDieNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wait_time = 1;
  if (this->wait_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wait_time(), output);
  }

  // .proto.PlayerDieType die_type = 3;
  if (this->die_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->die_type(), output);
  }

  // uint32 monster_id = 4;
  if (has_monster_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->monster_id(), output);
  }

  // uint32 revive_count = 6;
  if (this->revive_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->revive_count(), output);
  }

  // uint32 gadget_id = 8;
  if (has_gadget_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gadget_id(), output);
  }

  // uint32 dungeon_id = 9;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dungeon_id(), output);
  }

  // uint32 murderer_entity_id = 13;
  if (this->murderer_entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->murderer_entity_id(), output);
  }

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 15;
  if (!this->strengthen_point_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->strengthen_point_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strengthen_point_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonPlayerDieNotify_StrengthenPointDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonPlayerDieNotify_StrengthenPointDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonPlayerDieNotify)
}

::google::protobuf::uint8* DungeonPlayerDieNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonPlayerDieNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 wait_time = 1;
  if (this->wait_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->wait_time(), target);
  }

  // .proto.PlayerDieType die_type = 3;
  if (this->die_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->die_type(), target);
  }

  // uint32 monster_id = 4;
  if (has_monster_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->monster_id(), target);
  }

  // uint32 revive_count = 6;
  if (this->revive_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->revive_count(), target);
  }

  // uint32 gadget_id = 8;
  if (has_gadget_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gadget_id(), target);
  }

  // uint32 dungeon_id = 9;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dungeon_id(), target);
  }

  // uint32 murderer_entity_id = 13;
  if (this->murderer_entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->murderer_entity_id(), target);
  }

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 15;
  if (!this->strengthen_point_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->strengthen_point_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strengthen_point_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonPlayerDieNotify_StrengthenPointDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonPlayerDieNotify_StrengthenPointDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       15, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonPlayerDieNotify)
  return target;
}

size_t DungeonPlayerDieNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonPlayerDieNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strengthen_point_data_map_size());
  {
    ::google::protobuf::scoped_ptr<DungeonPlayerDieNotify_StrengthenPointDataMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
        it = this->strengthen_point_data_map().begin();
        it != this->strengthen_point_data_map().end(); ++it) {
      entry.reset(strengthen_point_data_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 wait_time = 1;
  if (this->wait_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wait_time());
  }

  // .proto.PlayerDieType die_type = 3;
  if (this->die_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_type());
  }

  // uint32 murderer_entity_id = 13;
  if (this->murderer_entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->murderer_entity_id());
  }

  // uint32 revive_count = 6;
  if (this->revive_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->revive_count());
  }

  // uint32 dungeon_id = 9;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  switch (entity_case()) {
    // uint32 monster_id = 4;
    case kMonsterId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_id());
      break;
    }
    // uint32 gadget_id = 8;
    case kGadgetId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gadget_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonPlayerDieNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonPlayerDieNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonPlayerDieNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonPlayerDieNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonPlayerDieNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonPlayerDieNotify)
    MergeFrom(*source);
  }
}

void DungeonPlayerDieNotify::MergeFrom(const DungeonPlayerDieNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonPlayerDieNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strengthen_point_data_map_.MergeFrom(from.strengthen_point_data_map_);
  if (from.wait_time() != 0) {
    set_wait_time(from.wait_time());
  }
  if (from.die_type() != 0) {
    set_die_type(from.die_type());
  }
  if (from.murderer_entity_id() != 0) {
    set_murderer_entity_id(from.murderer_entity_id());
  }
  if (from.revive_count() != 0) {
    set_revive_count(from.revive_count());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  switch (from.entity_case()) {
    case kMonsterId: {
      set_monster_id(from.monster_id());
      break;
    }
    case kGadgetId: {
      set_gadget_id(from.gadget_id());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
}

void DungeonPlayerDieNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonPlayerDieNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonPlayerDieNotify::CopyFrom(const DungeonPlayerDieNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonPlayerDieNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonPlayerDieNotify::IsInitialized() const {
  return true;
}

void DungeonPlayerDieNotify::Swap(DungeonPlayerDieNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonPlayerDieNotify::InternalSwap(DungeonPlayerDieNotify* other) {
  using std::swap;
  strengthen_point_data_map_.Swap(&other->strengthen_point_data_map_);
  swap(wait_time_, other->wait_time_);
  swap(die_type_, other->die_type_);
  swap(murderer_entity_id_, other->murderer_entity_id_);
  swap(revive_count_, other->revive_count_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(entity_, other->entity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonPlayerDieNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonPlayerDieNotify

// map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 15;
int DungeonPlayerDieNotify::strengthen_point_data_map_size() const {
  return strengthen_point_data_map_.size();
}
void DungeonPlayerDieNotify::clear_strengthen_point_data_map() {
  strengthen_point_data_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
DungeonPlayerDieNotify::strengthen_point_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonPlayerDieNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
DungeonPlayerDieNotify::mutable_strengthen_point_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonPlayerDieNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.MutableMap();
}

// uint32 wait_time = 1;
void DungeonPlayerDieNotify::clear_wait_time() {
  wait_time_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::wait_time() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.wait_time)
  return wait_time_;
}
void DungeonPlayerDieNotify::set_wait_time(::google::protobuf::uint32 value) {
  
  wait_time_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.wait_time)
}

// uint32 dungeon_id = 9;
void DungeonPlayerDieNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonPlayerDieNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.dungeon_id)
}

// uint32 murderer_entity_id = 13;
void DungeonPlayerDieNotify::clear_murderer_entity_id() {
  murderer_entity_id_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::murderer_entity_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.murderer_entity_id)
  return murderer_entity_id_;
}
void DungeonPlayerDieNotify::set_murderer_entity_id(::google::protobuf::uint32 value) {
  
  murderer_entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.murderer_entity_id)
}

// .proto.PlayerDieType die_type = 3;
void DungeonPlayerDieNotify::clear_die_type() {
  die_type_ = 0;
}
::proto::PlayerDieType DungeonPlayerDieNotify::die_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.die_type)
  return static_cast< ::proto::PlayerDieType >(die_type_);
}
void DungeonPlayerDieNotify::set_die_type(::proto::PlayerDieType value) {
  
  die_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.die_type)
}

// uint32 revive_count = 6;
void DungeonPlayerDieNotify::clear_revive_count() {
  revive_count_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieNotify::revive_count() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.revive_count)
  return revive_count_;
}
void DungeonPlayerDieNotify::set_revive_count(::google::protobuf::uint32 value) {
  
  revive_count_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.revive_count)
}

// uint32 monster_id = 4;
bool DungeonPlayerDieNotify::has_monster_id() const {
  return entity_case() == kMonsterId;
}
void DungeonPlayerDieNotify::set_has_monster_id() {
  _oneof_case_[0] = kMonsterId;
}
void DungeonPlayerDieNotify::clear_monster_id() {
  if (has_monster_id()) {
    entity_.monster_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 DungeonPlayerDieNotify::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.monster_id)
  if (has_monster_id()) {
    return entity_.monster_id_;
  }
  return 0u;
}
void DungeonPlayerDieNotify::set_monster_id(::google::protobuf::uint32 value) {
  if (!has_monster_id()) {
    clear_entity();
    set_has_monster_id();
  }
  entity_.monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.monster_id)
}

// uint32 gadget_id = 8;
bool DungeonPlayerDieNotify::has_gadget_id() const {
  return entity_case() == kGadgetId;
}
void DungeonPlayerDieNotify::set_has_gadget_id() {
  _oneof_case_[0] = kGadgetId;
}
void DungeonPlayerDieNotify::clear_gadget_id() {
  if (has_gadget_id()) {
    entity_.gadget_id_ = 0u;
    clear_has_entity();
  }
}
::google::protobuf::uint32 DungeonPlayerDieNotify::gadget_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieNotify.gadget_id)
  if (has_gadget_id()) {
    return entity_.gadget_id_;
  }
  return 0u;
}
void DungeonPlayerDieNotify::set_gadget_id(::google::protobuf::uint32 value) {
  if (!has_gadget_id()) {
    clear_entity();
    set_has_gadget_id();
  }
  entity_.gadget_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieNotify.gadget_id)
}

bool DungeonPlayerDieNotify::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
void DungeonPlayerDieNotify::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
DungeonPlayerDieNotify::EntityCase DungeonPlayerDieNotify::entity_case() const {
  return DungeonPlayerDieNotify::EntityCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonDieOptionReq::kDieOptionFieldNumber;
const int DungeonDieOptionReq::kIsQuitImmediatelyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonDieOptionReq::DungeonDieOptionReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonDieOptionReq)
}
DungeonDieOptionReq::DungeonDieOptionReq(const DungeonDieOptionReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&die_option_, &from.die_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_quit_immediately_) -
    reinterpret_cast<char*>(&die_option_)) + sizeof(is_quit_immediately_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonDieOptionReq)
}

void DungeonDieOptionReq::SharedCtor() {
  ::memset(&die_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_quit_immediately_) -
      reinterpret_cast<char*>(&die_option_)) + sizeof(is_quit_immediately_));
  _cached_size_ = 0;
}

DungeonDieOptionReq::~DungeonDieOptionReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonDieOptionReq)
  SharedDtor();
}

void DungeonDieOptionReq::SharedDtor() {
}

void DungeonDieOptionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonDieOptionReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonDieOptionReq& DungeonDieOptionReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonDieOptionReq* DungeonDieOptionReq::New(::google::protobuf::Arena* arena) const {
  DungeonDieOptionReq* n = new DungeonDieOptionReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonDieOptionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonDieOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&die_option_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_quit_immediately_) -
      reinterpret_cast<char*>(&die_option_)) + sizeof(is_quit_immediately_));
  _internal_metadata_.Clear();
}

bool DungeonDieOptionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonDieOptionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.PlayerDieOption die_option = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_option(static_cast< ::proto::PlayerDieOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_quit_immediately = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_quit_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonDieOptionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonDieOptionReq)
  return false;
#undef DO_
}

void DungeonDieOptionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonDieOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlayerDieOption die_option = 11;
  if (this->die_option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->die_option(), output);
  }

  // bool is_quit_immediately = 14;
  if (this->is_quit_immediately() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_quit_immediately(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonDieOptionReq)
}

::google::protobuf::uint8* DungeonDieOptionReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonDieOptionReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlayerDieOption die_option = 11;
  if (this->die_option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->die_option(), target);
  }

  // bool is_quit_immediately = 14;
  if (this->is_quit_immediately() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_quit_immediately(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonDieOptionReq)
  return target;
}

size_t DungeonDieOptionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonDieOptionReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.PlayerDieOption die_option = 11;
  if (this->die_option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_option());
  }

  // bool is_quit_immediately = 14;
  if (this->is_quit_immediately() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonDieOptionReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonDieOptionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonDieOptionReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonDieOptionReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonDieOptionReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonDieOptionReq)
    MergeFrom(*source);
  }
}

void DungeonDieOptionReq::MergeFrom(const DungeonDieOptionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonDieOptionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.die_option() != 0) {
    set_die_option(from.die_option());
  }
  if (from.is_quit_immediately() != 0) {
    set_is_quit_immediately(from.is_quit_immediately());
  }
}

void DungeonDieOptionReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonDieOptionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonDieOptionReq::CopyFrom(const DungeonDieOptionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonDieOptionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonDieOptionReq::IsInitialized() const {
  return true;
}

void DungeonDieOptionReq::Swap(DungeonDieOptionReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonDieOptionReq::InternalSwap(DungeonDieOptionReq* other) {
  using std::swap;
  swap(die_option_, other->die_option_);
  swap(is_quit_immediately_, other->is_quit_immediately_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonDieOptionReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonDieOptionReq

// .proto.PlayerDieOption die_option = 11;
void DungeonDieOptionReq::clear_die_option() {
  die_option_ = 0;
}
::proto::PlayerDieOption DungeonDieOptionReq::die_option() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionReq.die_option)
  return static_cast< ::proto::PlayerDieOption >(die_option_);
}
void DungeonDieOptionReq::set_die_option(::proto::PlayerDieOption value) {
  
  die_option_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionReq.die_option)
}

// bool is_quit_immediately = 14;
void DungeonDieOptionReq::clear_is_quit_immediately() {
  is_quit_immediately_ = false;
}
bool DungeonDieOptionReq::is_quit_immediately() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionReq.is_quit_immediately)
  return is_quit_immediately_;
}
void DungeonDieOptionReq::set_is_quit_immediately(bool value) {
  
  is_quit_immediately_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionReq.is_quit_immediately)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonDieOptionRsp::kRetcodeFieldNumber;
const int DungeonDieOptionRsp::kReviveCountFieldNumber;
const int DungeonDieOptionRsp::kDieOptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonDieOptionRsp::DungeonDieOptionRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonDieOptionRsp)
}
DungeonDieOptionRsp::DungeonDieOptionRsp(const DungeonDieOptionRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&revive_count_, &from.revive_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&die_option_) -
    reinterpret_cast<char*>(&revive_count_)) + sizeof(die_option_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonDieOptionRsp)
}

void DungeonDieOptionRsp::SharedCtor() {
  ::memset(&revive_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&die_option_) -
      reinterpret_cast<char*>(&revive_count_)) + sizeof(die_option_));
  _cached_size_ = 0;
}

DungeonDieOptionRsp::~DungeonDieOptionRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonDieOptionRsp)
  SharedDtor();
}

void DungeonDieOptionRsp::SharedDtor() {
}

void DungeonDieOptionRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonDieOptionRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonDieOptionRsp& DungeonDieOptionRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonDieOptionRsp* DungeonDieOptionRsp::New(::google::protobuf::Arena* arena) const {
  DungeonDieOptionRsp* n = new DungeonDieOptionRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonDieOptionRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonDieOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&revive_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&die_option_) -
      reinterpret_cast<char*>(&revive_count_)) + sizeof(die_option_));
  _internal_metadata_.Clear();
}

bool DungeonDieOptionRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonDieOptionRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PlayerDieOption die_option = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_option(static_cast< ::proto::PlayerDieOption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 revive_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revive_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonDieOptionRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonDieOptionRsp)
  return false;
#undef DO_
}

void DungeonDieOptionRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonDieOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // .proto.PlayerDieOption die_option = 6;
  if (this->die_option() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->die_option(), output);
  }

  // uint32 revive_count = 10;
  if (this->revive_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->revive_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonDieOptionRsp)
}

::google::protobuf::uint8* DungeonDieOptionRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonDieOptionRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // .proto.PlayerDieOption die_option = 6;
  if (this->die_option() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->die_option(), target);
  }

  // uint32 revive_count = 10;
  if (this->revive_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->revive_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonDieOptionRsp)
  return target;
}

size_t DungeonDieOptionRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonDieOptionRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 revive_count = 10;
  if (this->revive_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->revive_count());
  }

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // .proto.PlayerDieOption die_option = 6;
  if (this->die_option() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_option());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonDieOptionRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonDieOptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonDieOptionRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonDieOptionRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonDieOptionRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonDieOptionRsp)
    MergeFrom(*source);
  }
}

void DungeonDieOptionRsp::MergeFrom(const DungeonDieOptionRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonDieOptionRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.revive_count() != 0) {
    set_revive_count(from.revive_count());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.die_option() != 0) {
    set_die_option(from.die_option());
  }
}

void DungeonDieOptionRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonDieOptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonDieOptionRsp::CopyFrom(const DungeonDieOptionRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonDieOptionRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonDieOptionRsp::IsInitialized() const {
  return true;
}

void DungeonDieOptionRsp::Swap(DungeonDieOptionRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonDieOptionRsp::InternalSwap(DungeonDieOptionRsp* other) {
  using std::swap;
  swap(revive_count_, other->revive_count_);
  swap(retcode_, other->retcode_);
  swap(die_option_, other->die_option_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonDieOptionRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonDieOptionRsp

// int32 retcode = 5;
void DungeonDieOptionRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonDieOptionRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.retcode)
  return retcode_;
}
void DungeonDieOptionRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.retcode)
}

// uint32 revive_count = 10;
void DungeonDieOptionRsp::clear_revive_count() {
  revive_count_ = 0u;
}
::google::protobuf::uint32 DungeonDieOptionRsp::revive_count() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.revive_count)
  return revive_count_;
}
void DungeonDieOptionRsp::set_revive_count(::google::protobuf::uint32 value) {
  
  revive_count_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.revive_count)
}

// .proto.PlayerDieOption die_option = 6;
void DungeonDieOptionRsp::clear_die_option() {
  die_option_ = 0;
}
::proto::PlayerDieOption DungeonDieOptionRsp::die_option() const {
  // @@protoc_insertion_point(field_get:proto.DungeonDieOptionRsp.die_option)
  return static_cast< ::proto::PlayerDieOption >(die_option_);
}
void DungeonDieOptionRsp::set_die_option(::proto::PlayerDieOption value) {
  
  die_option_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonDieOptionRsp.die_option)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonShowReminderNotify::kReminderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonShowReminderNotify::DungeonShowReminderNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonShowReminderNotify)
}
DungeonShowReminderNotify::DungeonShowReminderNotify(const DungeonShowReminderNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reminder_id_ = from.reminder_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonShowReminderNotify)
}

void DungeonShowReminderNotify::SharedCtor() {
  reminder_id_ = 0u;
  _cached_size_ = 0;
}

DungeonShowReminderNotify::~DungeonShowReminderNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonShowReminderNotify)
  SharedDtor();
}

void DungeonShowReminderNotify::SharedDtor() {
}

void DungeonShowReminderNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonShowReminderNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonShowReminderNotify& DungeonShowReminderNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonShowReminderNotify* DungeonShowReminderNotify::New(::google::protobuf::Arena* arena) const {
  DungeonShowReminderNotify* n = new DungeonShowReminderNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonShowReminderNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonShowReminderNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reminder_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonShowReminderNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonShowReminderNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reminder_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reminder_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonShowReminderNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonShowReminderNotify)
  return false;
#undef DO_
}

void DungeonShowReminderNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonShowReminderNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reminder_id = 9;
  if (this->reminder_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reminder_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonShowReminderNotify)
}

::google::protobuf::uint8* DungeonShowReminderNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonShowReminderNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reminder_id = 9;
  if (this->reminder_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reminder_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonShowReminderNotify)
  return target;
}

size_t DungeonShowReminderNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonShowReminderNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 reminder_id = 9;
  if (this->reminder_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reminder_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonShowReminderNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonShowReminderNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonShowReminderNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonShowReminderNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonShowReminderNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonShowReminderNotify)
    MergeFrom(*source);
  }
}

void DungeonShowReminderNotify::MergeFrom(const DungeonShowReminderNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonShowReminderNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reminder_id() != 0) {
    set_reminder_id(from.reminder_id());
  }
}

void DungeonShowReminderNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonShowReminderNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonShowReminderNotify::CopyFrom(const DungeonShowReminderNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonShowReminderNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonShowReminderNotify::IsInitialized() const {
  return true;
}

void DungeonShowReminderNotify::Swap(DungeonShowReminderNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonShowReminderNotify::InternalSwap(DungeonShowReminderNotify* other) {
  using std::swap;
  swap(reminder_id_, other->reminder_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonShowReminderNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonShowReminderNotify

// uint32 reminder_id = 9;
void DungeonShowReminderNotify::clear_reminder_id() {
  reminder_id_ = 0u;
}
::google::protobuf::uint32 DungeonShowReminderNotify::reminder_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonShowReminderNotify.reminder_id)
  return reminder_id_;
}
void DungeonShowReminderNotify::set_reminder_id(::google::protobuf::uint32 value) {
  
  reminder_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonShowReminderNotify.reminder_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonPlayerDieReq::kDieTypeFieldNumber;
const int DungeonPlayerDieReq::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonPlayerDieReq::DungeonPlayerDieReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonPlayerDieReq)
}
DungeonPlayerDieReq::DungeonPlayerDieReq(const DungeonPlayerDieReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&die_type_, &from.die_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&die_type_)) + sizeof(dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonPlayerDieReq)
}

void DungeonPlayerDieReq::SharedCtor() {
  ::memset(&die_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&die_type_)) + sizeof(dungeon_id_));
  _cached_size_ = 0;
}

DungeonPlayerDieReq::~DungeonPlayerDieReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonPlayerDieReq)
  SharedDtor();
}

void DungeonPlayerDieReq::SharedDtor() {
}

void DungeonPlayerDieReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonPlayerDieReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonPlayerDieReq& DungeonPlayerDieReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonPlayerDieReq* DungeonPlayerDieReq::New(::google::protobuf::Arena* arena) const {
  DungeonPlayerDieReq* n = new DungeonPlayerDieReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonPlayerDieReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonPlayerDieReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&die_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&die_type_)) + sizeof(dungeon_id_));
  _internal_metadata_.Clear();
}

bool DungeonPlayerDieReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonPlayerDieReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.PlayerDieType die_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_die_type(static_cast< ::proto::PlayerDieType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonPlayerDieReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonPlayerDieReq)
  return false;
#undef DO_
}

void DungeonPlayerDieReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonPlayerDieReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlayerDieType die_type = 6;
  if (this->die_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->die_type(), output);
  }

  // uint32 dungeon_id = 8;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dungeon_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonPlayerDieReq)
}

::google::protobuf::uint8* DungeonPlayerDieReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonPlayerDieReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.PlayerDieType die_type = 6;
  if (this->die_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->die_type(), target);
  }

  // uint32 dungeon_id = 8;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dungeon_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonPlayerDieReq)
  return target;
}

size_t DungeonPlayerDieReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonPlayerDieReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.PlayerDieType die_type = 6;
  if (this->die_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->die_type());
  }

  // uint32 dungeon_id = 8;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonPlayerDieReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonPlayerDieReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonPlayerDieReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonPlayerDieReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonPlayerDieReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonPlayerDieReq)
    MergeFrom(*source);
  }
}

void DungeonPlayerDieReq::MergeFrom(const DungeonPlayerDieReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonPlayerDieReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.die_type() != 0) {
    set_die_type(from.die_type());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
}

void DungeonPlayerDieReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonPlayerDieReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonPlayerDieReq::CopyFrom(const DungeonPlayerDieReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonPlayerDieReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonPlayerDieReq::IsInitialized() const {
  return true;
}

void DungeonPlayerDieReq::Swap(DungeonPlayerDieReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonPlayerDieReq::InternalSwap(DungeonPlayerDieReq* other) {
  using std::swap;
  swap(die_type_, other->die_type_);
  swap(dungeon_id_, other->dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonPlayerDieReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonPlayerDieReq

// .proto.PlayerDieType die_type = 6;
void DungeonPlayerDieReq::clear_die_type() {
  die_type_ = 0;
}
::proto::PlayerDieType DungeonPlayerDieReq::die_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieReq.die_type)
  return static_cast< ::proto::PlayerDieType >(die_type_);
}
void DungeonPlayerDieReq::set_die_type(::proto::PlayerDieType value) {
  
  die_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieReq.die_type)
}

// uint32 dungeon_id = 8;
void DungeonPlayerDieReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonPlayerDieReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieReq.dungeon_id)
  return dungeon_id_;
}
void DungeonPlayerDieReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieReq.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonPlayerDieRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonPlayerDieRsp::DungeonPlayerDieRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonPlayerDieRsp)
}
DungeonPlayerDieRsp::DungeonPlayerDieRsp(const DungeonPlayerDieRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonPlayerDieRsp)
}

void DungeonPlayerDieRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonPlayerDieRsp::~DungeonPlayerDieRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonPlayerDieRsp)
  SharedDtor();
}

void DungeonPlayerDieRsp::SharedDtor() {
}

void DungeonPlayerDieRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonPlayerDieRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonPlayerDieRsp& DungeonPlayerDieRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonPlayerDieRsp* DungeonPlayerDieRsp::New(::google::protobuf::Arena* arena) const {
  DungeonPlayerDieRsp* n = new DungeonPlayerDieRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonPlayerDieRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonPlayerDieRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonPlayerDieRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonPlayerDieRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonPlayerDieRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonPlayerDieRsp)
  return false;
#undef DO_
}

void DungeonPlayerDieRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonPlayerDieRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonPlayerDieRsp)
}

::google::protobuf::uint8* DungeonPlayerDieRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonPlayerDieRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonPlayerDieRsp)
  return target;
}

size_t DungeonPlayerDieRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonPlayerDieRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonPlayerDieRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonPlayerDieRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonPlayerDieRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonPlayerDieRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonPlayerDieRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonPlayerDieRsp)
    MergeFrom(*source);
  }
}

void DungeonPlayerDieRsp::MergeFrom(const DungeonPlayerDieRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonPlayerDieRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonPlayerDieRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonPlayerDieRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonPlayerDieRsp::CopyFrom(const DungeonPlayerDieRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonPlayerDieRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonPlayerDieRsp::IsInitialized() const {
  return true;
}

void DungeonPlayerDieRsp::Swap(DungeonPlayerDieRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonPlayerDieRsp::InternalSwap(DungeonPlayerDieRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonPlayerDieRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonPlayerDieRsp

// int32 retcode = 5;
void DungeonPlayerDieRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonPlayerDieRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonPlayerDieRsp.retcode)
  return retcode_;
}
void DungeonPlayerDieRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonPlayerDieRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::DungeonDataNotify_DungeonDataMapEntry() {}
DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::DungeonDataNotify_DungeonDataMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[30];
}
void DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonDataNotify::DungeonDataNotify_DungeonDataMapEntry::MergeFrom(const DungeonDataNotify_DungeonDataMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonDataNotify::kDungeonDataMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonDataNotify::DungeonDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonDataNotify)
}
DungeonDataNotify::DungeonDataNotify(const DungeonDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dungeon_data_map_.MergeFrom(from.dungeon_data_map_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonDataNotify)
}

void DungeonDataNotify::SharedCtor() {
  _cached_size_ = 0;
}

DungeonDataNotify::~DungeonDataNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonDataNotify)
  SharedDtor();
}

void DungeonDataNotify::SharedDtor() {
}

void DungeonDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonDataNotify& DungeonDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonDataNotify* DungeonDataNotify::New(::google::protobuf::Arena* arena) const {
  DungeonDataNotify* n = new DungeonDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dungeon_data_map_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<uint32, uint32> dungeon_data_map = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DungeonDataNotify_DungeonDataMapEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonDataNotify_DungeonDataMapEntry,
              ::google::protobuf::uint32, ::google::protobuf::uint32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 > > parser(&dungeon_data_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonDataNotify)
  return false;
#undef DO_
}

void DungeonDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> dungeon_data_map = 1;
  if (!this->dungeon_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->dungeon_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->dungeon_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonDataNotify)
}

::google::protobuf::uint8* DungeonDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, uint32> dungeon_data_map = 1;
  if (!this->dungeon_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->dungeon_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->dungeon_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
          it = this->dungeon_data_map().begin();
          it != this->dungeon_data_map().end(); ++it) {
        entry.reset(dungeon_data_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonDataNotify)
  return target;
}

size_t DungeonDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, uint32> dungeon_data_map = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dungeon_data_map_size());
  {
    ::google::protobuf::scoped_ptr<DungeonDataNotify_DungeonDataMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >::const_iterator
        it = this->dungeon_data_map().begin();
        it != this->dungeon_data_map().end(); ++it) {
      entry.reset(dungeon_data_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonDataNotify)
    MergeFrom(*source);
  }
}

void DungeonDataNotify::MergeFrom(const DungeonDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dungeon_data_map_.MergeFrom(from.dungeon_data_map_);
}

void DungeonDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonDataNotify::CopyFrom(const DungeonDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonDataNotify::IsInitialized() const {
  return true;
}

void DungeonDataNotify::Swap(DungeonDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonDataNotify::InternalSwap(DungeonDataNotify* other) {
  using std::swap;
  dungeon_data_map_.Swap(&other->dungeon_data_map_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonDataNotify

// map<uint32, uint32> dungeon_data_map = 1;
int DungeonDataNotify::dungeon_data_map_size() const {
  return dungeon_data_map_.size();
}
void DungeonDataNotify::clear_dungeon_data_map() {
  dungeon_data_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
DungeonDataNotify::dungeon_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonDataNotify.dungeon_data_map)
  return dungeon_data_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
DungeonDataNotify::mutable_dungeon_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonDataNotify.dungeon_data_map)
  return dungeon_data_map_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonChallengeBeginNotify::kFatherIndexFieldNumber;
const int DungeonChallengeBeginNotify::kParamListFieldNumber;
const int DungeonChallengeBeginNotify::kChallengeIndexFieldNumber;
const int DungeonChallengeBeginNotify::kChallengeIdFieldNumber;
const int DungeonChallengeBeginNotify::kGroupIdFieldNumber;
const int DungeonChallengeBeginNotify::kUidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonChallengeBeginNotify::DungeonChallengeBeginNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonChallengeBeginNotify)
}
DungeonChallengeBeginNotify::DungeonChallengeBeginNotify(const DungeonChallengeBeginNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uid_list_(from.uid_list_),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_id_, &from.challenge_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_index_) -
    reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonChallengeBeginNotify)
}

void DungeonChallengeBeginNotify::SharedCtor() {
  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  _cached_size_ = 0;
}

DungeonChallengeBeginNotify::~DungeonChallengeBeginNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonChallengeBeginNotify)
  SharedDtor();
}

void DungeonChallengeBeginNotify::SharedDtor() {
}

void DungeonChallengeBeginNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonChallengeBeginNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonChallengeBeginNotify& DungeonChallengeBeginNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonChallengeBeginNotify* DungeonChallengeBeginNotify::New(::google::protobuf::Arena* arena) const {
  DungeonChallengeBeginNotify* n = new DungeonChallengeBeginNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonChallengeBeginNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonChallengeBeginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_list_.Clear();
  param_list_.Clear();
  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  _internal_metadata_.Clear();
}

bool DungeonChallengeBeginNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonChallengeBeginNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 father_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &father_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 uid_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 param_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonChallengeBeginNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonChallengeBeginNotify)
  return false;
#undef DO_
}

void DungeonChallengeBeginNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonChallengeBeginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_id(), output);
  }

  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  // uint32 father_index = 5;
  if (this->father_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->father_index(), output);
  }

  // uint32 challenge_index = 6;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->challenge_index(), output);
  }

  // repeated uint32 uid_list = 12;
  if (this->uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uid_list(i), output);
  }

  // repeated uint32 param_list = 14;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonChallengeBeginNotify)
}

::google::protobuf::uint8* DungeonChallengeBeginNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonChallengeBeginNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_id(), target);
  }

  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }

  // uint32 father_index = 5;
  if (this->father_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->father_index(), target);
  }

  // uint32 challenge_index = 6;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->challenge_index(), target);
  }

  // repeated uint32 uid_list = 12;
  if (this->uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uid_list_, target);
  }

  // repeated uint32 param_list = 14;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonChallengeBeginNotify)
  return target;
}

size_t DungeonChallengeBeginNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonChallengeBeginNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 uid_list = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 param_list = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 group_id = 4;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  // uint32 father_index = 5;
  if (this->father_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->father_index());
  }

  // uint32 challenge_index = 6;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonChallengeBeginNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonChallengeBeginNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonChallengeBeginNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonChallengeBeginNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonChallengeBeginNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonChallengeBeginNotify)
    MergeFrom(*source);
  }
}

void DungeonChallengeBeginNotify::MergeFrom(const DungeonChallengeBeginNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonChallengeBeginNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_list_.MergeFrom(from.uid_list_);
  param_list_.MergeFrom(from.param_list_);
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
  if (from.father_index() != 0) {
    set_father_index(from.father_index());
  }
  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
}

void DungeonChallengeBeginNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonChallengeBeginNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonChallengeBeginNotify::CopyFrom(const DungeonChallengeBeginNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonChallengeBeginNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonChallengeBeginNotify::IsInitialized() const {
  return true;
}

void DungeonChallengeBeginNotify::Swap(DungeonChallengeBeginNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonChallengeBeginNotify::InternalSwap(DungeonChallengeBeginNotify* other) {
  using std::swap;
  uid_list_.InternalSwap(&other->uid_list_);
  param_list_.InternalSwap(&other->param_list_);
  swap(challenge_id_, other->challenge_id_);
  swap(group_id_, other->group_id_);
  swap(father_index_, other->father_index_);
  swap(challenge_index_, other->challenge_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonChallengeBeginNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonChallengeBeginNotify

// uint32 father_index = 5;
void DungeonChallengeBeginNotify::clear_father_index() {
  father_index_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::father_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.father_index)
  return father_index_;
}
void DungeonChallengeBeginNotify::set_father_index(::google::protobuf::uint32 value) {
  
  father_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.father_index)
}

// repeated uint32 param_list = 14;
int DungeonChallengeBeginNotify::param_list_size() const {
  return param_list_.size();
}
void DungeonChallengeBeginNotify::clear_param_list() {
  param_list_.Clear();
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.param_list)
  return param_list_.Get(index);
}
void DungeonChallengeBeginNotify::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.param_list)
}
void DungeonChallengeBeginNotify::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonChallengeBeginNotify.param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonChallengeBeginNotify::param_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonChallengeBeginNotify.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonChallengeBeginNotify::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonChallengeBeginNotify.param_list)
  return &param_list_;
}

// uint32 challenge_index = 6;
void DungeonChallengeBeginNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.challenge_index)
  return challenge_index_;
}
void DungeonChallengeBeginNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.challenge_index)
}

// uint32 challenge_id = 1;
void DungeonChallengeBeginNotify::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.challenge_id)
  return challenge_id_;
}
void DungeonChallengeBeginNotify::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.challenge_id)
}

// uint32 group_id = 4;
void DungeonChallengeBeginNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.group_id)
  return group_id_;
}
void DungeonChallengeBeginNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.group_id)
}

// repeated uint32 uid_list = 12;
int DungeonChallengeBeginNotify::uid_list_size() const {
  return uid_list_.size();
}
void DungeonChallengeBeginNotify::clear_uid_list() {
  uid_list_.Clear();
}
::google::protobuf::uint32 DungeonChallengeBeginNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeBeginNotify.uid_list)
  return uid_list_.Get(index);
}
void DungeonChallengeBeginNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeBeginNotify.uid_list)
}
void DungeonChallengeBeginNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonChallengeBeginNotify.uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonChallengeBeginNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonChallengeBeginNotify.uid_list)
  return uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonChallengeBeginNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonChallengeBeginNotify.uid_list)
  return &uid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeBrief::kCurProgressFieldNumber;
const int ChallengeBrief::kChallengeIndexFieldNumber;
const int ChallengeBrief::kIsSuccessFieldNumber;
const int ChallengeBrief::kChallengeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeBrief::ChallengeBrief()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChallengeBrief)
}
ChallengeBrief::ChallengeBrief(const ChallengeBrief& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_success_, &from.is_success_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_index_) -
    reinterpret_cast<char*>(&is_success_)) + sizeof(challenge_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ChallengeBrief)
}

void ChallengeBrief::SharedCtor() {
  ::memset(&is_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&is_success_)) + sizeof(challenge_index_));
  _cached_size_ = 0;
}

ChallengeBrief::~ChallengeBrief() {
  // @@protoc_insertion_point(destructor:proto.ChallengeBrief)
  SharedDtor();
}

void ChallengeBrief::SharedDtor() {
}

void ChallengeBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeBrief::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeBrief& ChallengeBrief::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChallengeBrief* ChallengeBrief::New(::google::protobuf::Arena* arena) const {
  ChallengeBrief* n = new ChallengeBrief;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeBrief::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChallengeBrief)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&is_success_)) + sizeof(challenge_index_));
  _internal_metadata_.Clear();
}

bool ChallengeBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChallengeBrief)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_success = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_progress = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_index = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChallengeBrief)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChallengeBrief)
  return false;
#undef DO_
}

void ChallengeBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChallengeBrief)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 4;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_success(), output);
  }

  // uint32 challenge_id = 8;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->challenge_id(), output);
  }

  // uint32 cur_progress = 9;
  if (this->cur_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cur_progress(), output);
  }

  // uint32 challenge_index = 10;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->challenge_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChallengeBrief)
}

::google::protobuf::uint8* ChallengeBrief::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChallengeBrief)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 4;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_success(), target);
  }

  // uint32 challenge_id = 8;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->challenge_id(), target);
  }

  // uint32 cur_progress = 9;
  if (this->cur_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cur_progress(), target);
  }

  // uint32 challenge_index = 10;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->challenge_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChallengeBrief)
  return target;
}

size_t ChallengeBrief::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChallengeBrief)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_success = 4;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 challenge_id = 8;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 cur_progress = 9;
  if (this->cur_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_progress());
  }

  // uint32 challenge_index = 10;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeBrief::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChallengeBrief)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeBrief* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeBrief>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChallengeBrief)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChallengeBrief)
    MergeFrom(*source);
  }
}

void ChallengeBrief::MergeFrom(const ChallengeBrief& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChallengeBrief)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.cur_progress() != 0) {
    set_cur_progress(from.cur_progress());
  }
  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
}

void ChallengeBrief::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChallengeBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeBrief::CopyFrom(const ChallengeBrief& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChallengeBrief)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeBrief::IsInitialized() const {
  return true;
}

void ChallengeBrief::Swap(ChallengeBrief* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeBrief::InternalSwap(ChallengeBrief* other) {
  using std::swap;
  swap(is_success_, other->is_success_);
  swap(challenge_id_, other->challenge_id_);
  swap(cur_progress_, other->cur_progress_);
  swap(challenge_index_, other->challenge_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeBrief::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChallengeBrief

// uint32 cur_progress = 9;
void ChallengeBrief::clear_cur_progress() {
  cur_progress_ = 0u;
}
::google::protobuf::uint32 ChallengeBrief::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.cur_progress)
  return cur_progress_;
}
void ChallengeBrief::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.cur_progress)
}

// uint32 challenge_index = 10;
void ChallengeBrief::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 ChallengeBrief::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.challenge_index)
  return challenge_index_;
}
void ChallengeBrief::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.challenge_index)
}

// bool is_success = 4;
void ChallengeBrief::clear_is_success() {
  is_success_ = false;
}
bool ChallengeBrief::is_success() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.is_success)
  return is_success_;
}
void ChallengeBrief::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.is_success)
}

// uint32 challenge_id = 8;
void ChallengeBrief::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 ChallengeBrief::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeBrief.challenge_id)
  return challenge_id_;
}
void ChallengeBrief::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeBrief.challenge_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CustomDungeonResultInfo::kIsLikedFieldNumber;
const int CustomDungeonResultInfo::kGotCoinNumFieldNumber;
const int CustomDungeonResultInfo::kChildChallengeListFieldNumber;
const int CustomDungeonResultInfo::kDungeonGuidFieldNumber;
const int CustomDungeonResultInfo::kFinishTypeFieldNumber;
const int CustomDungeonResultInfo::kTimeCostFieldNumber;
const int CustomDungeonResultInfo::kIsArriveFinishFieldNumber;
const int CustomDungeonResultInfo::kIsStoredFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CustomDungeonResultInfo::CustomDungeonResultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CustomDungeonResultInfo)
}
CustomDungeonResultInfo::CustomDungeonResultInfo(const CustomDungeonResultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      child_challenge_list_(from.child_challenge_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_guid_, &from.dungeon_guid_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_cost_) -
    reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(time_cost_));
  // @@protoc_insertion_point(copy_constructor:proto.CustomDungeonResultInfo)
}

void CustomDungeonResultInfo::SharedCtor() {
  ::memset(&dungeon_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_cost_) -
      reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(time_cost_));
  _cached_size_ = 0;
}

CustomDungeonResultInfo::~CustomDungeonResultInfo() {
  // @@protoc_insertion_point(destructor:proto.CustomDungeonResultInfo)
  SharedDtor();
}

void CustomDungeonResultInfo::SharedDtor() {
}

void CustomDungeonResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustomDungeonResultInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CustomDungeonResultInfo& CustomDungeonResultInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

CustomDungeonResultInfo* CustomDungeonResultInfo::New(::google::protobuf::Arena* arena) const {
  CustomDungeonResultInfo* n = new CustomDungeonResultInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CustomDungeonResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CustomDungeonResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_challenge_list_.Clear();
  ::memset(&dungeon_guid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_cost_) -
      reinterpret_cast<char*>(&dungeon_guid_)) + sizeof(time_cost_));
  _internal_metadata_.Clear();
}

bool CustomDungeonResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CustomDungeonResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_arrive_finish = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_arrive_finish_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 dungeon_guid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dungeon_guid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ChallengeBrief child_challenge_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child_challenge_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CustomDungeonFinishType finish_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_finish_type(static_cast< ::proto::CustomDungeonFinishType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 got_coin_num = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &got_coin_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_cost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_liked = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_liked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_stored = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CustomDungeonResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CustomDungeonResultInfo)
  return false;
#undef DO_
}

void CustomDungeonResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CustomDungeonResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_arrive_finish = 2;
  if (this->is_arrive_finish() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_arrive_finish(), output);
  }

  // uint64 dungeon_guid = 3;
  if (this->dungeon_guid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dungeon_guid(), output);
  }

  // repeated .proto.ChallengeBrief child_challenge_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_challenge_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->child_challenge_list(static_cast<int>(i)), output);
  }

  // .proto.CustomDungeonFinishType finish_type = 7;
  if (this->finish_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->finish_type(), output);
  }

  // uint32 got_coin_num = 9;
  if (this->got_coin_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->got_coin_num(), output);
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->time_cost(), output);
  }

  // bool is_liked = 12;
  if (this->is_liked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_liked(), output);
  }

  // bool is_stored = 14;
  if (this->is_stored() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_stored(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.CustomDungeonResultInfo)
}

::google::protobuf::uint8* CustomDungeonResultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.CustomDungeonResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_arrive_finish = 2;
  if (this->is_arrive_finish() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_arrive_finish(), target);
  }

  // uint64 dungeon_guid = 3;
  if (this->dungeon_guid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dungeon_guid(), target);
  }

  // repeated .proto.ChallengeBrief child_challenge_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->child_challenge_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->child_challenge_list(static_cast<int>(i)), deterministic, target);
  }

  // .proto.CustomDungeonFinishType finish_type = 7;
  if (this->finish_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->finish_type(), target);
  }

  // uint32 got_coin_num = 9;
  if (this->got_coin_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->got_coin_num(), target);
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->time_cost(), target);
  }

  // bool is_liked = 12;
  if (this->is_liked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_liked(), target);
  }

  // bool is_stored = 14;
  if (this->is_stored() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_stored(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.CustomDungeonResultInfo)
  return target;
}

size_t CustomDungeonResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CustomDungeonResultInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ChallengeBrief child_challenge_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->child_challenge_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->child_challenge_list(static_cast<int>(i)));
    }
  }

  // uint64 dungeon_guid = 3;
  if (this->dungeon_guid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dungeon_guid());
  }

  // .proto.CustomDungeonFinishType finish_type = 7;
  if (this->finish_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->finish_type());
  }

  // uint32 got_coin_num = 9;
  if (this->got_coin_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->got_coin_num());
  }

  // bool is_liked = 12;
  if (this->is_liked() != 0) {
    total_size += 1 + 1;
  }

  // bool is_arrive_finish = 2;
  if (this->is_arrive_finish() != 0) {
    total_size += 1 + 1;
  }

  // bool is_stored = 14;
  if (this->is_stored() != 0) {
    total_size += 1 + 1;
  }

  // uint32 time_cost = 11;
  if (this->time_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustomDungeonResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.CustomDungeonResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDungeonResultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CustomDungeonResultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.CustomDungeonResultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.CustomDungeonResultInfo)
    MergeFrom(*source);
  }
}

void CustomDungeonResultInfo::MergeFrom(const CustomDungeonResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CustomDungeonResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  child_challenge_list_.MergeFrom(from.child_challenge_list_);
  if (from.dungeon_guid() != 0) {
    set_dungeon_guid(from.dungeon_guid());
  }
  if (from.finish_type() != 0) {
    set_finish_type(from.finish_type());
  }
  if (from.got_coin_num() != 0) {
    set_got_coin_num(from.got_coin_num());
  }
  if (from.is_liked() != 0) {
    set_is_liked(from.is_liked());
  }
  if (from.is_arrive_finish() != 0) {
    set_is_arrive_finish(from.is_arrive_finish());
  }
  if (from.is_stored() != 0) {
    set_is_stored(from.is_stored());
  }
  if (from.time_cost() != 0) {
    set_time_cost(from.time_cost());
  }
}

void CustomDungeonResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.CustomDungeonResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDungeonResultInfo::CopyFrom(const CustomDungeonResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CustomDungeonResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDungeonResultInfo::IsInitialized() const {
  return true;
}

void CustomDungeonResultInfo::Swap(CustomDungeonResultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CustomDungeonResultInfo::InternalSwap(CustomDungeonResultInfo* other) {
  using std::swap;
  child_challenge_list_.InternalSwap(&other->child_challenge_list_);
  swap(dungeon_guid_, other->dungeon_guid_);
  swap(finish_type_, other->finish_type_);
  swap(got_coin_num_, other->got_coin_num_);
  swap(is_liked_, other->is_liked_);
  swap(is_arrive_finish_, other->is_arrive_finish_);
  swap(is_stored_, other->is_stored_);
  swap(time_cost_, other->time_cost_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CustomDungeonResultInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CustomDungeonResultInfo

// bool is_liked = 12;
void CustomDungeonResultInfo::clear_is_liked() {
  is_liked_ = false;
}
bool CustomDungeonResultInfo::is_liked() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.is_liked)
  return is_liked_;
}
void CustomDungeonResultInfo::set_is_liked(bool value) {
  
  is_liked_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.is_liked)
}

// uint32 got_coin_num = 9;
void CustomDungeonResultInfo::clear_got_coin_num() {
  got_coin_num_ = 0u;
}
::google::protobuf::uint32 CustomDungeonResultInfo::got_coin_num() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.got_coin_num)
  return got_coin_num_;
}
void CustomDungeonResultInfo::set_got_coin_num(::google::protobuf::uint32 value) {
  
  got_coin_num_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.got_coin_num)
}

// repeated .proto.ChallengeBrief child_challenge_list = 6;
int CustomDungeonResultInfo::child_challenge_list_size() const {
  return child_challenge_list_.size();
}
void CustomDungeonResultInfo::clear_child_challenge_list() {
  child_challenge_list_.Clear();
}
const ::proto::ChallengeBrief& CustomDungeonResultInfo::child_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_.Get(index);
}
::proto::ChallengeBrief* CustomDungeonResultInfo::mutable_child_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_.Mutable(index);
}
::proto::ChallengeBrief* CustomDungeonResultInfo::add_child_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChallengeBrief >*
CustomDungeonResultInfo::mutable_child_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CustomDungeonResultInfo.child_challenge_list)
  return &child_challenge_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChallengeBrief >&
CustomDungeonResultInfo::child_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.CustomDungeonResultInfo.child_challenge_list)
  return child_challenge_list_;
}

// uint64 dungeon_guid = 3;
void CustomDungeonResultInfo::clear_dungeon_guid() {
  dungeon_guid_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 CustomDungeonResultInfo::dungeon_guid() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.dungeon_guid)
  return dungeon_guid_;
}
void CustomDungeonResultInfo::set_dungeon_guid(::google::protobuf::uint64 value) {
  
  dungeon_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.dungeon_guid)
}

// .proto.CustomDungeonFinishType finish_type = 7;
void CustomDungeonResultInfo::clear_finish_type() {
  finish_type_ = 0;
}
::proto::CustomDungeonFinishType CustomDungeonResultInfo::finish_type() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.finish_type)
  return static_cast< ::proto::CustomDungeonFinishType >(finish_type_);
}
void CustomDungeonResultInfo::set_finish_type(::proto::CustomDungeonFinishType value) {
  
  finish_type_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.finish_type)
}

// uint32 time_cost = 11;
void CustomDungeonResultInfo::clear_time_cost() {
  time_cost_ = 0u;
}
::google::protobuf::uint32 CustomDungeonResultInfo::time_cost() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.time_cost)
  return time_cost_;
}
void CustomDungeonResultInfo::set_time_cost(::google::protobuf::uint32 value) {
  
  time_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.time_cost)
}

// bool is_arrive_finish = 2;
void CustomDungeonResultInfo::clear_is_arrive_finish() {
  is_arrive_finish_ = false;
}
bool CustomDungeonResultInfo::is_arrive_finish() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.is_arrive_finish)
  return is_arrive_finish_;
}
void CustomDungeonResultInfo::set_is_arrive_finish(bool value) {
  
  is_arrive_finish_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.is_arrive_finish)
}

// bool is_stored = 14;
void CustomDungeonResultInfo::clear_is_stored() {
  is_stored_ = false;
}
bool CustomDungeonResultInfo::is_stored() const {
  // @@protoc_insertion_point(field_get:proto.CustomDungeonResultInfo.is_stored)
  return is_stored_;
}
void CustomDungeonResultInfo::set_is_stored(bool value) {
  
  is_stored_ = value;
  // @@protoc_insertion_point(field_set:proto.CustomDungeonResultInfo.is_stored)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonChallengeFinishNotify::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry() {}
DungeonChallengeFinishNotify::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonChallengeFinishNotify::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[35];
}
void DungeonChallengeFinishNotify::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonChallengeFinishNotify::DungeonChallengeFinishNotify_StrengthenPointDataMapEntry::MergeFrom(const DungeonChallengeFinishNotify_StrengthenPointDataMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonChallengeFinishNotify::kStrengthenPointDataMapFieldNumber;
const int DungeonChallengeFinishNotify::kFinishTypeFieldNumber;
const int DungeonChallengeFinishNotify::kIsNewRecordFieldNumber;
const int DungeonChallengeFinishNotify::kChallengeRecordTypeFieldNumber;
const int DungeonChallengeFinishNotify::kTimeCostFieldNumber;
const int DungeonChallengeFinishNotify::kCurrentValueFieldNumber;
const int DungeonChallengeFinishNotify::kIsSuccessFieldNumber;
const int DungeonChallengeFinishNotify::kChallengeIndexFieldNumber;
const int DungeonChallengeFinishNotify::kChannellerSlabLoopDungeonResultInfoFieldNumber;
const int DungeonChallengeFinishNotify::kEffigyChallengeDungeonResultInfoFieldNumber;
const int DungeonChallengeFinishNotify::kPotionDungeonResultInfoFieldNumber;
const int DungeonChallengeFinishNotify::kCustomDungeonResultInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonChallengeFinishNotify::DungeonChallengeFinishNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonChallengeFinishNotify)
}
DungeonChallengeFinishNotify::DungeonChallengeFinishNotify(const DungeonChallengeFinishNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strengthen_point_data_map_.MergeFrom(from.strengthen_point_data_map_);
  ::memcpy(&time_cost_, &from.time_cost_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_value_) -
    reinterpret_cast<char*>(&time_cost_)) + sizeof(current_value_));
  clear_has_detail();
  switch (from.detail_case()) {
    case kChannellerSlabLoopDungeonResultInfo: {
      mutable_channeller_slab_loop_dungeon_result_info()->::proto::ChannellerSlabLoopDungeonResultInfo::MergeFrom(from.channeller_slab_loop_dungeon_result_info());
      break;
    }
    case kEffigyChallengeDungeonResultInfo: {
      mutable_effigy_challenge_dungeon_result_info()->::proto::EffigyChallengeDungeonResultInfo::MergeFrom(from.effigy_challenge_dungeon_result_info());
      break;
    }
    case kPotionDungeonResultInfo: {
      mutable_potion_dungeon_result_info()->::proto::PotionDungeonResultInfo::MergeFrom(from.potion_dungeon_result_info());
      break;
    }
    case kCustomDungeonResultInfo: {
      mutable_custom_dungeon_result_info()->::proto::CustomDungeonResultInfo::MergeFrom(from.custom_dungeon_result_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:proto.DungeonChallengeFinishNotify)
}

void DungeonChallengeFinishNotify::SharedCtor() {
  ::memset(&time_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_value_) -
      reinterpret_cast<char*>(&time_cost_)) + sizeof(current_value_));
  clear_has_detail();
  _cached_size_ = 0;
}

DungeonChallengeFinishNotify::~DungeonChallengeFinishNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonChallengeFinishNotify)
  SharedDtor();
}

void DungeonChallengeFinishNotify::SharedDtor() {
  if (has_detail()) {
    clear_detail();
  }
}

void DungeonChallengeFinishNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonChallengeFinishNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonChallengeFinishNotify& DungeonChallengeFinishNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonChallengeFinishNotify* DungeonChallengeFinishNotify::New(::google::protobuf::Arena* arena) const {
  DungeonChallengeFinishNotify* n = new DungeonChallengeFinishNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonChallengeFinishNotify::clear_detail() {
// @@protoc_insertion_point(one_of_clear_start:proto.DungeonChallengeFinishNotify)
  switch (detail_case()) {
    case kChannellerSlabLoopDungeonResultInfo: {
      delete detail_.channeller_slab_loop_dungeon_result_info_;
      break;
    }
    case kEffigyChallengeDungeonResultInfo: {
      delete detail_.effigy_challenge_dungeon_result_info_;
      break;
    }
    case kPotionDungeonResultInfo: {
      delete detail_.potion_dungeon_result_info_;
      break;
    }
    case kCustomDungeonResultInfo: {
      delete detail_.custom_dungeon_result_info_;
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAIL_NOT_SET;
}


void DungeonChallengeFinishNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strengthen_point_data_map_.Clear();
  ::memset(&time_cost_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_value_) -
      reinterpret_cast<char*>(&time_cost_)) + sizeof(current_value_));
  clear_detail();
  _internal_metadata_.Clear();
}

bool DungeonChallengeFinishNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonChallengeFinishNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_success = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 time_cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_record_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_record_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ChallengeFinishType finish_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_finish_type(static_cast< ::proto::ChallengeFinishType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_new_record = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_new_record_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DungeonChallengeFinishNotify_StrengthenPointDataMapEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonChallengeFinishNotify_StrengthenPointDataMapEntry,
              ::google::protobuf::uint32, ::proto::StrengthenPointData,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData > > parser(&strengthen_point_data_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 current_value = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
      case 1521: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 12170 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_channeller_slab_loop_dungeon_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
      case 1627: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u /* 13018 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effigy_challenge_dungeon_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
      case 1664: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 13314 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_dungeon_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
      case 1824: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2u /* 14594 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_potion_dungeon_result_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonChallengeFinishNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonChallengeFinishNotify)
  return false;
#undef DO_
}

void DungeonChallengeFinishNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 3;
  if (this->is_success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_success(), output);
  }

  // uint32 time_cost = 4;
  if (this->time_cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_cost(), output);
  }

  // uint32 challenge_index = 5;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->challenge_index(), output);
  }

  // uint32 challenge_record_type = 7;
  if (this->challenge_record_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->challenge_record_type(), output);
  }

  // .proto.ChallengeFinishType finish_type = 9;
  if (this->finish_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->finish_type(), output);
  }

  // bool is_new_record = 10;
  if (this->is_new_record() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_new_record(), output);
  }

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 13;
  if (!this->strengthen_point_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->strengthen_point_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strengthen_point_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonChallengeFinishNotify_StrengthenPointDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonChallengeFinishNotify_StrengthenPointDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, *entry, output);
      }
    }
  }

  // uint32 current_value = 15;
  if (this->current_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->current_value(), output);
  }

  // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
  if (has_channeller_slab_loop_dungeon_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1521, *detail_.channeller_slab_loop_dungeon_result_info_, output);
  }

  // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
  if (has_effigy_challenge_dungeon_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1627, *detail_.effigy_challenge_dungeon_result_info_, output);
  }

  // .proto.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
  if (has_custom_dungeon_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1664, *detail_.custom_dungeon_result_info_, output);
  }

  // .proto.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
  if (has_potion_dungeon_result_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1824, *detail_.potion_dungeon_result_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonChallengeFinishNotify)
}

::google::protobuf::uint8* DungeonChallengeFinishNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonChallengeFinishNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_success = 3;
  if (this->is_success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_success(), target);
  }

  // uint32 time_cost = 4;
  if (this->time_cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_cost(), target);
  }

  // uint32 challenge_index = 5;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->challenge_index(), target);
  }

  // uint32 challenge_record_type = 7;
  if (this->challenge_record_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->challenge_record_type(), target);
  }

  // .proto.ChallengeFinishType finish_type = 9;
  if (this->finish_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->finish_type(), target);
  }

  // bool is_new_record = 10;
  if (this->is_new_record() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_new_record(), target);
  }

  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 13;
  if (!this->strengthen_point_data_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->strengthen_point_data_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->strengthen_point_data_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonChallengeFinishNotify_StrengthenPointDataMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonChallengeFinishNotify_StrengthenPointDataMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
          it = this->strengthen_point_data_map().begin();
          it != this->strengthen_point_data_map().end(); ++it) {
        entry.reset(strengthen_point_data_map_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       13, *entry, deterministic, target);
;
      }
    }
  }

  // uint32 current_value = 15;
  if (this->current_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->current_value(), target);
  }

  // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
  if (has_channeller_slab_loop_dungeon_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1521, *detail_.channeller_slab_loop_dungeon_result_info_, deterministic, target);
  }

  // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
  if (has_effigy_challenge_dungeon_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1627, *detail_.effigy_challenge_dungeon_result_info_, deterministic, target);
  }

  // .proto.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
  if (has_custom_dungeon_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1664, *detail_.custom_dungeon_result_info_, deterministic, target);
  }

  // .proto.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
  if (has_potion_dungeon_result_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1824, *detail_.potion_dungeon_result_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonChallengeFinishNotify)
  return target;
}

size_t DungeonChallengeFinishNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonChallengeFinishNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 13;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strengthen_point_data_map_size());
  {
    ::google::protobuf::scoped_ptr<DungeonChallengeFinishNotify_StrengthenPointDataMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >::const_iterator
        it = this->strengthen_point_data_map().begin();
        it != this->strengthen_point_data_map().end(); ++it) {
      entry.reset(strengthen_point_data_map_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // uint32 time_cost = 4;
  if (this->time_cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->time_cost());
  }

  // uint32 challenge_index = 5;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  // bool is_new_record = 10;
  if (this->is_new_record() != 0) {
    total_size += 1 + 1;
  }

  // bool is_success = 3;
  if (this->is_success() != 0) {
    total_size += 1 + 1;
  }

  // uint32 challenge_record_type = 7;
  if (this->challenge_record_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_record_type());
  }

  // .proto.ChallengeFinishType finish_type = 9;
  if (this->finish_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->finish_type());
  }

  // uint32 current_value = 15;
  if (this->current_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->current_value());
  }

  switch (detail_case()) {
    // .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
    case kChannellerSlabLoopDungeonResultInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.channeller_slab_loop_dungeon_result_info_);
      break;
    }
    // .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
    case kEffigyChallengeDungeonResultInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.effigy_challenge_dungeon_result_info_);
      break;
    }
    // .proto.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
    case kPotionDungeonResultInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.potion_dungeon_result_info_);
      break;
    }
    // .proto.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
    case kCustomDungeonResultInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *detail_.custom_dungeon_result_info_);
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonChallengeFinishNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonChallengeFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonChallengeFinishNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonChallengeFinishNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonChallengeFinishNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonChallengeFinishNotify)
    MergeFrom(*source);
  }
}

void DungeonChallengeFinishNotify::MergeFrom(const DungeonChallengeFinishNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonChallengeFinishNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  strengthen_point_data_map_.MergeFrom(from.strengthen_point_data_map_);
  if (from.time_cost() != 0) {
    set_time_cost(from.time_cost());
  }
  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
  if (from.is_new_record() != 0) {
    set_is_new_record(from.is_new_record());
  }
  if (from.is_success() != 0) {
    set_is_success(from.is_success());
  }
  if (from.challenge_record_type() != 0) {
    set_challenge_record_type(from.challenge_record_type());
  }
  if (from.finish_type() != 0) {
    set_finish_type(from.finish_type());
  }
  if (from.current_value() != 0) {
    set_current_value(from.current_value());
  }
  switch (from.detail_case()) {
    case kChannellerSlabLoopDungeonResultInfo: {
      mutable_channeller_slab_loop_dungeon_result_info()->::proto::ChannellerSlabLoopDungeonResultInfo::MergeFrom(from.channeller_slab_loop_dungeon_result_info());
      break;
    }
    case kEffigyChallengeDungeonResultInfo: {
      mutable_effigy_challenge_dungeon_result_info()->::proto::EffigyChallengeDungeonResultInfo::MergeFrom(from.effigy_challenge_dungeon_result_info());
      break;
    }
    case kPotionDungeonResultInfo: {
      mutable_potion_dungeon_result_info()->::proto::PotionDungeonResultInfo::MergeFrom(from.potion_dungeon_result_info());
      break;
    }
    case kCustomDungeonResultInfo: {
      mutable_custom_dungeon_result_info()->::proto::CustomDungeonResultInfo::MergeFrom(from.custom_dungeon_result_info());
      break;
    }
    case DETAIL_NOT_SET: {
      break;
    }
  }
}

void DungeonChallengeFinishNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonChallengeFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonChallengeFinishNotify::CopyFrom(const DungeonChallengeFinishNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonChallengeFinishNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonChallengeFinishNotify::IsInitialized() const {
  return true;
}

void DungeonChallengeFinishNotify::Swap(DungeonChallengeFinishNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonChallengeFinishNotify::InternalSwap(DungeonChallengeFinishNotify* other) {
  using std::swap;
  strengthen_point_data_map_.Swap(&other->strengthen_point_data_map_);
  swap(time_cost_, other->time_cost_);
  swap(challenge_index_, other->challenge_index_);
  swap(is_new_record_, other->is_new_record_);
  swap(is_success_, other->is_success_);
  swap(challenge_record_type_, other->challenge_record_type_);
  swap(finish_type_, other->finish_type_);
  swap(current_value_, other->current_value_);
  swap(detail_, other->detail_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonChallengeFinishNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonChallengeFinishNotify

// map<uint32, .proto.StrengthenPointData> strengthen_point_data_map = 13;
int DungeonChallengeFinishNotify::strengthen_point_data_map_size() const {
  return strengthen_point_data_map_.size();
}
void DungeonChallengeFinishNotify::clear_strengthen_point_data_map() {
  strengthen_point_data_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >&
DungeonChallengeFinishNotify::strengthen_point_data_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonChallengeFinishNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::StrengthenPointData >*
DungeonChallengeFinishNotify::mutable_strengthen_point_data_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonChallengeFinishNotify.strengthen_point_data_map)
  return strengthen_point_data_map_.MutableMap();
}

// .proto.ChallengeFinishType finish_type = 9;
void DungeonChallengeFinishNotify::clear_finish_type() {
  finish_type_ = 0;
}
::proto::ChallengeFinishType DungeonChallengeFinishNotify::finish_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.finish_type)
  return static_cast< ::proto::ChallengeFinishType >(finish_type_);
}
void DungeonChallengeFinishNotify::set_finish_type(::proto::ChallengeFinishType value) {
  
  finish_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.finish_type)
}

// bool is_new_record = 10;
void DungeonChallengeFinishNotify::clear_is_new_record() {
  is_new_record_ = false;
}
bool DungeonChallengeFinishNotify::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.is_new_record)
  return is_new_record_;
}
void DungeonChallengeFinishNotify::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.is_new_record)
}

// uint32 challenge_record_type = 7;
void DungeonChallengeFinishNotify::clear_challenge_record_type() {
  challenge_record_type_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeFinishNotify::challenge_record_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.challenge_record_type)
  return challenge_record_type_;
}
void DungeonChallengeFinishNotify::set_challenge_record_type(::google::protobuf::uint32 value) {
  
  challenge_record_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.challenge_record_type)
}

// uint32 time_cost = 4;
void DungeonChallengeFinishNotify::clear_time_cost() {
  time_cost_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeFinishNotify::time_cost() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.time_cost)
  return time_cost_;
}
void DungeonChallengeFinishNotify::set_time_cost(::google::protobuf::uint32 value) {
  
  time_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.time_cost)
}

// uint32 current_value = 15;
void DungeonChallengeFinishNotify::clear_current_value() {
  current_value_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeFinishNotify::current_value() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.current_value)
  return current_value_;
}
void DungeonChallengeFinishNotify::set_current_value(::google::protobuf::uint32 value) {
  
  current_value_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.current_value)
}

// bool is_success = 3;
void DungeonChallengeFinishNotify::clear_is_success() {
  is_success_ = false;
}
bool DungeonChallengeFinishNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.is_success)
  return is_success_;
}
void DungeonChallengeFinishNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.is_success)
}

// uint32 challenge_index = 5;
void DungeonChallengeFinishNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 DungeonChallengeFinishNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.challenge_index)
  return challenge_index_;
}
void DungeonChallengeFinishNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonChallengeFinishNotify.challenge_index)
}

// .proto.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
bool DungeonChallengeFinishNotify::has_channeller_slab_loop_dungeon_result_info() const {
  return detail_case() == kChannellerSlabLoopDungeonResultInfo;
}
void DungeonChallengeFinishNotify::set_has_channeller_slab_loop_dungeon_result_info() {
  _oneof_case_[0] = kChannellerSlabLoopDungeonResultInfo;
}
void DungeonChallengeFinishNotify::clear_channeller_slab_loop_dungeon_result_info() {
  if (has_channeller_slab_loop_dungeon_result_info()) {
    delete detail_.channeller_slab_loop_dungeon_result_info_;
    clear_has_detail();
  }
}
 const ::proto::ChannellerSlabLoopDungeonResultInfo& DungeonChallengeFinishNotify::channeller_slab_loop_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
  return has_channeller_slab_loop_dungeon_result_info()
      ? *detail_.channeller_slab_loop_dungeon_result_info_
      : ::proto::ChannellerSlabLoopDungeonResultInfo::default_instance();
}
::proto::ChannellerSlabLoopDungeonResultInfo* DungeonChallengeFinishNotify::mutable_channeller_slab_loop_dungeon_result_info() {
  if (!has_channeller_slab_loop_dungeon_result_info()) {
    clear_detail();
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = new ::proto::ChannellerSlabLoopDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
  return detail_.channeller_slab_loop_dungeon_result_info_;
}
::proto::ChannellerSlabLoopDungeonResultInfo* DungeonChallengeFinishNotify::release_channeller_slab_loop_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
  if (has_channeller_slab_loop_dungeon_result_info()) {
    clear_has_detail();
    ::proto::ChannellerSlabLoopDungeonResultInfo* temp = detail_.channeller_slab_loop_dungeon_result_info_;
    detail_.channeller_slab_loop_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonChallengeFinishNotify::set_allocated_channeller_slab_loop_dungeon_result_info(::proto::ChannellerSlabLoopDungeonResultInfo* channeller_slab_loop_dungeon_result_info) {
  clear_detail();
  if (channeller_slab_loop_dungeon_result_info) {
    set_has_channeller_slab_loop_dungeon_result_info();
    detail_.channeller_slab_loop_dungeon_result_info_ = channeller_slab_loop_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.channeller_slab_loop_dungeon_result_info)
}

// .proto.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
bool DungeonChallengeFinishNotify::has_effigy_challenge_dungeon_result_info() const {
  return detail_case() == kEffigyChallengeDungeonResultInfo;
}
void DungeonChallengeFinishNotify::set_has_effigy_challenge_dungeon_result_info() {
  _oneof_case_[0] = kEffigyChallengeDungeonResultInfo;
}
void DungeonChallengeFinishNotify::clear_effigy_challenge_dungeon_result_info() {
  if (has_effigy_challenge_dungeon_result_info()) {
    delete detail_.effigy_challenge_dungeon_result_info_;
    clear_has_detail();
  }
}
 const ::proto::EffigyChallengeDungeonResultInfo& DungeonChallengeFinishNotify::effigy_challenge_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
  return has_effigy_challenge_dungeon_result_info()
      ? *detail_.effigy_challenge_dungeon_result_info_
      : ::proto::EffigyChallengeDungeonResultInfo::default_instance();
}
::proto::EffigyChallengeDungeonResultInfo* DungeonChallengeFinishNotify::mutable_effigy_challenge_dungeon_result_info() {
  if (!has_effigy_challenge_dungeon_result_info()) {
    clear_detail();
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = new ::proto::EffigyChallengeDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
  return detail_.effigy_challenge_dungeon_result_info_;
}
::proto::EffigyChallengeDungeonResultInfo* DungeonChallengeFinishNotify::release_effigy_challenge_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
  if (has_effigy_challenge_dungeon_result_info()) {
    clear_has_detail();
    ::proto::EffigyChallengeDungeonResultInfo* temp = detail_.effigy_challenge_dungeon_result_info_;
    detail_.effigy_challenge_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonChallengeFinishNotify::set_allocated_effigy_challenge_dungeon_result_info(::proto::EffigyChallengeDungeonResultInfo* effigy_challenge_dungeon_result_info) {
  clear_detail();
  if (effigy_challenge_dungeon_result_info) {
    set_has_effigy_challenge_dungeon_result_info();
    detail_.effigy_challenge_dungeon_result_info_ = effigy_challenge_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.effigy_challenge_dungeon_result_info)
}

// .proto.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
bool DungeonChallengeFinishNotify::has_potion_dungeon_result_info() const {
  return detail_case() == kPotionDungeonResultInfo;
}
void DungeonChallengeFinishNotify::set_has_potion_dungeon_result_info() {
  _oneof_case_[0] = kPotionDungeonResultInfo;
}
void DungeonChallengeFinishNotify::clear_potion_dungeon_result_info() {
  if (has_potion_dungeon_result_info()) {
    delete detail_.potion_dungeon_result_info_;
    clear_has_detail();
  }
}
 const ::proto::PotionDungeonResultInfo& DungeonChallengeFinishNotify::potion_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
  return has_potion_dungeon_result_info()
      ? *detail_.potion_dungeon_result_info_
      : ::proto::PotionDungeonResultInfo::default_instance();
}
::proto::PotionDungeonResultInfo* DungeonChallengeFinishNotify::mutable_potion_dungeon_result_info() {
  if (!has_potion_dungeon_result_info()) {
    clear_detail();
    set_has_potion_dungeon_result_info();
    detail_.potion_dungeon_result_info_ = new ::proto::PotionDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
  return detail_.potion_dungeon_result_info_;
}
::proto::PotionDungeonResultInfo* DungeonChallengeFinishNotify::release_potion_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
  if (has_potion_dungeon_result_info()) {
    clear_has_detail();
    ::proto::PotionDungeonResultInfo* temp = detail_.potion_dungeon_result_info_;
    detail_.potion_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonChallengeFinishNotify::set_allocated_potion_dungeon_result_info(::proto::PotionDungeonResultInfo* potion_dungeon_result_info) {
  clear_detail();
  if (potion_dungeon_result_info) {
    set_has_potion_dungeon_result_info();
    detail_.potion_dungeon_result_info_ = potion_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.potion_dungeon_result_info)
}

// .proto.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
bool DungeonChallengeFinishNotify::has_custom_dungeon_result_info() const {
  return detail_case() == kCustomDungeonResultInfo;
}
void DungeonChallengeFinishNotify::set_has_custom_dungeon_result_info() {
  _oneof_case_[0] = kCustomDungeonResultInfo;
}
void DungeonChallengeFinishNotify::clear_custom_dungeon_result_info() {
  if (has_custom_dungeon_result_info()) {
    delete detail_.custom_dungeon_result_info_;
    clear_has_detail();
  }
}
 const ::proto::CustomDungeonResultInfo& DungeonChallengeFinishNotify::custom_dungeon_result_info() const {
  // @@protoc_insertion_point(field_get:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
  return has_custom_dungeon_result_info()
      ? *detail_.custom_dungeon_result_info_
      : ::proto::CustomDungeonResultInfo::default_instance();
}
::proto::CustomDungeonResultInfo* DungeonChallengeFinishNotify::mutable_custom_dungeon_result_info() {
  if (!has_custom_dungeon_result_info()) {
    clear_detail();
    set_has_custom_dungeon_result_info();
    detail_.custom_dungeon_result_info_ = new ::proto::CustomDungeonResultInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
  return detail_.custom_dungeon_result_info_;
}
::proto::CustomDungeonResultInfo* DungeonChallengeFinishNotify::release_custom_dungeon_result_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
  if (has_custom_dungeon_result_info()) {
    clear_has_detail();
    ::proto::CustomDungeonResultInfo* temp = detail_.custom_dungeon_result_info_;
    detail_.custom_dungeon_result_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DungeonChallengeFinishNotify::set_allocated_custom_dungeon_result_info(::proto::CustomDungeonResultInfo* custom_dungeon_result_info) {
  clear_detail();
  if (custom_dungeon_result_info) {
    set_has_custom_dungeon_result_info();
    detail_.custom_dungeon_result_info_ = custom_dungeon_result_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonChallengeFinishNotify.custom_dungeon_result_info)
}

bool DungeonChallengeFinishNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
void DungeonChallengeFinishNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
DungeonChallengeFinishNotify::DetailCase DungeonChallengeFinishNotify::detail_case() const {
  return DungeonChallengeFinishNotify::DetailCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeDataNotify::kValueFieldNumber;
const int ChallengeDataNotify::kChallengeIndexFieldNumber;
const int ChallengeDataNotify::kParamIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeDataNotify::ChallengeDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChallengeDataNotify)
}
ChallengeDataNotify::ChallengeDataNotify(const ChallengeDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&param_index_, &from.param_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&param_index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.ChallengeDataNotify)
}

void ChallengeDataNotify::SharedCtor() {
  ::memset(&param_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&param_index_)) + sizeof(value_));
  _cached_size_ = 0;
}

ChallengeDataNotify::~ChallengeDataNotify() {
  // @@protoc_insertion_point(destructor:proto.ChallengeDataNotify)
  SharedDtor();
}

void ChallengeDataNotify::SharedDtor() {
}

void ChallengeDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeDataNotify& ChallengeDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChallengeDataNotify* ChallengeDataNotify::New(::google::protobuf::Arena* arena) const {
  ChallengeDataNotify* n = new ChallengeDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&param_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&param_index_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

bool ChallengeDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChallengeDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param_index = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChallengeDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChallengeDataNotify)
  return false;
#undef DO_
}

void ChallengeDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_index(), output);
  }

  // uint32 value = 8;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->value(), output);
  }

  // uint32 param_index = 9;
  if (this->param_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->param_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChallengeDataNotify)
}

::google::protobuf::uint8* ChallengeDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChallengeDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_index(), target);
  }

  // uint32 value = 8;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->value(), target);
  }

  // uint32 param_index = 9;
  if (this->param_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->param_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChallengeDataNotify)
  return target;
}

size_t ChallengeDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChallengeDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 param_index = 9;
  if (this->param_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param_index());
  }

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  // uint32 value = 8;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChallengeDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChallengeDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChallengeDataNotify)
    MergeFrom(*source);
  }
}

void ChallengeDataNotify::MergeFrom(const ChallengeDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChallengeDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.param_index() != 0) {
    set_param_index(from.param_index());
  }
  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ChallengeDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChallengeDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeDataNotify::CopyFrom(const ChallengeDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChallengeDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeDataNotify::IsInitialized() const {
  return true;
}

void ChallengeDataNotify::Swap(ChallengeDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeDataNotify::InternalSwap(ChallengeDataNotify* other) {
  using std::swap;
  swap(param_index_, other->param_index_);
  swap(challenge_index_, other->challenge_index_);
  swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChallengeDataNotify

// uint32 value = 8;
void ChallengeDataNotify::clear_value() {
  value_ = 0u;
}
::google::protobuf::uint32 ChallengeDataNotify::value() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.value)
  return value_;
}
void ChallengeDataNotify::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.value)
}

// uint32 challenge_index = 2;
void ChallengeDataNotify::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 ChallengeDataNotify::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.challenge_index)
  return challenge_index_;
}
void ChallengeDataNotify::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.challenge_index)
}

// uint32 param_index = 9;
void ChallengeDataNotify::clear_param_index() {
  param_index_ = 0u;
}
::google::protobuf::uint32 ChallengeDataNotify::param_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeDataNotify.param_index)
  return param_index_;
}
void ChallengeDataNotify::set_param_index(::google::protobuf::uint32 value) {
  
  param_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeDataNotify.param_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonFollowNotify::kTargetUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonFollowNotify::DungeonFollowNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonFollowNotify)
}
DungeonFollowNotify::DungeonFollowNotify(const DungeonFollowNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  target_uid_ = from.target_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonFollowNotify)
}

void DungeonFollowNotify::SharedCtor() {
  target_uid_ = 0u;
  _cached_size_ = 0;
}

DungeonFollowNotify::~DungeonFollowNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonFollowNotify)
  SharedDtor();
}

void DungeonFollowNotify::SharedDtor() {
}

void DungeonFollowNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonFollowNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonFollowNotify& DungeonFollowNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonFollowNotify* DungeonFollowNotify::New(::google::protobuf::Arena* arena) const {
  DungeonFollowNotify* n = new DungeonFollowNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonFollowNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonFollowNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonFollowNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonFollowNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 target_uid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonFollowNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonFollowNotify)
  return false;
#undef DO_
}

void DungeonFollowNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonFollowNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_uid = 8;
  if (this->target_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->target_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonFollowNotify)
}

::google::protobuf::uint8* DungeonFollowNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonFollowNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 target_uid = 8;
  if (this->target_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->target_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonFollowNotify)
  return target;
}

size_t DungeonFollowNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonFollowNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 target_uid = 8;
  if (this->target_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonFollowNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonFollowNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonFollowNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonFollowNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonFollowNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonFollowNotify)
    MergeFrom(*source);
  }
}

void DungeonFollowNotify::MergeFrom(const DungeonFollowNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonFollowNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target_uid() != 0) {
    set_target_uid(from.target_uid());
  }
}

void DungeonFollowNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonFollowNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonFollowNotify::CopyFrom(const DungeonFollowNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonFollowNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonFollowNotify::IsInitialized() const {
  return true;
}

void DungeonFollowNotify::Swap(DungeonFollowNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonFollowNotify::InternalSwap(DungeonFollowNotify* other) {
  using std::swap;
  swap(target_uid_, other->target_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonFollowNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonFollowNotify

// uint32 target_uid = 8;
void DungeonFollowNotify::clear_target_uid() {
  target_uid_ = 0u;
}
::google::protobuf::uint32 DungeonFollowNotify::target_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonFollowNotify.target_uid)
  return target_uid_;
}
void DungeonFollowNotify::set_target_uid(::google::protobuf::uint32 value) {
  
  target_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonFollowNotify.target_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonGetStatueDropReq::DungeonGetStatueDropReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonGetStatueDropReq)
}
DungeonGetStatueDropReq::DungeonGetStatueDropReq(const DungeonGetStatueDropReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonGetStatueDropReq)
}

void DungeonGetStatueDropReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonGetStatueDropReq::~DungeonGetStatueDropReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonGetStatueDropReq)
  SharedDtor();
}

void DungeonGetStatueDropReq::SharedDtor() {
}

void DungeonGetStatueDropReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonGetStatueDropReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonGetStatueDropReq& DungeonGetStatueDropReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonGetStatueDropReq* DungeonGetStatueDropReq::New(::google::protobuf::Arena* arena) const {
  DungeonGetStatueDropReq* n = new DungeonGetStatueDropReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonGetStatueDropReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonGetStatueDropReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DungeonGetStatueDropReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonGetStatueDropReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonGetStatueDropReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonGetStatueDropReq)
  return false;
#undef DO_
}

void DungeonGetStatueDropReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonGetStatueDropReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonGetStatueDropReq)
}

::google::protobuf::uint8* DungeonGetStatueDropReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonGetStatueDropReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonGetStatueDropReq)
  return target;
}

size_t DungeonGetStatueDropReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonGetStatueDropReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonGetStatueDropReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonGetStatueDropReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonGetStatueDropReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonGetStatueDropReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonGetStatueDropReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonGetStatueDropReq)
    MergeFrom(*source);
  }
}

void DungeonGetStatueDropReq::MergeFrom(const DungeonGetStatueDropReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonGetStatueDropReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DungeonGetStatueDropReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonGetStatueDropReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonGetStatueDropReq::CopyFrom(const DungeonGetStatueDropReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonGetStatueDropReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonGetStatueDropReq::IsInitialized() const {
  return true;
}

void DungeonGetStatueDropReq::Swap(DungeonGetStatueDropReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonGetStatueDropReq::InternalSwap(DungeonGetStatueDropReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonGetStatueDropReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonGetStatueDropReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonGetStatueDropRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonGetStatueDropRsp::DungeonGetStatueDropRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonGetStatueDropRsp)
}
DungeonGetStatueDropRsp::DungeonGetStatueDropRsp(const DungeonGetStatueDropRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonGetStatueDropRsp)
}

void DungeonGetStatueDropRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonGetStatueDropRsp::~DungeonGetStatueDropRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonGetStatueDropRsp)
  SharedDtor();
}

void DungeonGetStatueDropRsp::SharedDtor() {
}

void DungeonGetStatueDropRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonGetStatueDropRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonGetStatueDropRsp& DungeonGetStatueDropRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonGetStatueDropRsp* DungeonGetStatueDropRsp::New(::google::protobuf::Arena* arena) const {
  DungeonGetStatueDropRsp* n = new DungeonGetStatueDropRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonGetStatueDropRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonGetStatueDropRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonGetStatueDropRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonGetStatueDropRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonGetStatueDropRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonGetStatueDropRsp)
  return false;
#undef DO_
}

void DungeonGetStatueDropRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonGetStatueDropRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonGetStatueDropRsp)
}

::google::protobuf::uint8* DungeonGetStatueDropRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonGetStatueDropRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonGetStatueDropRsp)
  return target;
}

size_t DungeonGetStatueDropRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonGetStatueDropRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 12;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonGetStatueDropRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonGetStatueDropRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonGetStatueDropRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonGetStatueDropRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonGetStatueDropRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonGetStatueDropRsp)
    MergeFrom(*source);
  }
}

void DungeonGetStatueDropRsp::MergeFrom(const DungeonGetStatueDropRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonGetStatueDropRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonGetStatueDropRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonGetStatueDropRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonGetStatueDropRsp::CopyFrom(const DungeonGetStatueDropRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonGetStatueDropRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonGetStatueDropRsp::IsInitialized() const {
  return true;
}

void DungeonGetStatueDropRsp::Swap(DungeonGetStatueDropRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonGetStatueDropRsp::InternalSwap(DungeonGetStatueDropRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonGetStatueDropRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonGetStatueDropRsp

// int32 retcode = 12;
void DungeonGetStatueDropRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonGetStatueDropRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonGetStatueDropRsp.retcode)
  return retcode_;
}
void DungeonGetStatueDropRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonGetStatueDropRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeRecord::kChallengeRecordTypeFieldNumber;
const int ChallengeRecord::kChallengeIndexFieldNumber;
const int ChallengeRecord::kChallengeIdFieldNumber;
const int ChallengeRecord::kBestValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeRecord::ChallengeRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChallengeRecord)
}
ChallengeRecord::ChallengeRecord(const ChallengeRecord& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_id_, &from.challenge_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&challenge_index_) -
    reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  // @@protoc_insertion_point(copy_constructor:proto.ChallengeRecord)
}

void ChallengeRecord::SharedCtor() {
  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  _cached_size_ = 0;
}

ChallengeRecord::~ChallengeRecord() {
  // @@protoc_insertion_point(destructor:proto.ChallengeRecord)
  SharedDtor();
}

void ChallengeRecord::SharedDtor() {
}

void ChallengeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeRecord::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeRecord& ChallengeRecord::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChallengeRecord* ChallengeRecord::New(::google::protobuf::Arena* arena) const {
  ChallengeRecord* n = new ChallengeRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChallengeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&challenge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&challenge_index_) -
      reinterpret_cast<char*>(&challenge_id_)) + sizeof(challenge_index_));
  _internal_metadata_.Clear();
}

bool ChallengeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChallengeRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 best_value = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &best_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_record_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_record_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_index = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChallengeRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChallengeRecord)
  return false;
#undef DO_
}

void ChallengeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChallengeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challenge_id(), output);
  }

  // uint32 best_value = 8;
  if (this->best_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->best_value(), output);
  }

  // uint32 challenge_record_type = 14;
  if (this->challenge_record_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->challenge_record_type(), output);
  }

  // uint32 challenge_index = 15;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->challenge_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChallengeRecord)
}

::google::protobuf::uint8* ChallengeRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChallengeRecord)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challenge_id(), target);
  }

  // uint32 best_value = 8;
  if (this->best_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->best_value(), target);
  }

  // uint32 challenge_record_type = 14;
  if (this->challenge_record_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->challenge_record_type(), target);
  }

  // uint32 challenge_index = 15;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->challenge_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChallengeRecord)
  return target;
}

size_t ChallengeRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChallengeRecord)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 challenge_id = 1;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 best_value = 8;
  if (this->best_value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->best_value());
  }

  // uint32 challenge_record_type = 14;
  if (this->challenge_record_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_record_type());
  }

  // uint32 challenge_index = 15;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChallengeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeRecord* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChallengeRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChallengeRecord)
    MergeFrom(*source);
  }
}

void ChallengeRecord::MergeFrom(const ChallengeRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChallengeRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.best_value() != 0) {
    set_best_value(from.best_value());
  }
  if (from.challenge_record_type() != 0) {
    set_challenge_record_type(from.challenge_record_type());
  }
  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
}

void ChallengeRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChallengeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeRecord::CopyFrom(const ChallengeRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChallengeRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeRecord::IsInitialized() const {
  return true;
}

void ChallengeRecord::Swap(ChallengeRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeRecord::InternalSwap(ChallengeRecord* other) {
  using std::swap;
  swap(challenge_id_, other->challenge_id_);
  swap(best_value_, other->best_value_);
  swap(challenge_record_type_, other->challenge_record_type_);
  swap(challenge_index_, other->challenge_index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeRecord::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChallengeRecord

// uint32 challenge_record_type = 14;
void ChallengeRecord::clear_challenge_record_type() {
  challenge_record_type_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::challenge_record_type() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_record_type)
  return challenge_record_type_;
}
void ChallengeRecord::set_challenge_record_type(::google::protobuf::uint32 value) {
  
  challenge_record_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_record_type)
}

// uint32 challenge_index = 15;
void ChallengeRecord::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_index)
  return challenge_index_;
}
void ChallengeRecord::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_index)
}

// uint32 challenge_id = 1;
void ChallengeRecord::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.challenge_id)
  return challenge_id_;
}
void ChallengeRecord::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.challenge_id)
}

// uint32 best_value = 8;
void ChallengeRecord::clear_best_value() {
  best_value_ = 0u;
}
::google::protobuf::uint32 ChallengeRecord::best_value() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecord.best_value)
  return best_value_;
}
void ChallengeRecord::set_best_value(::google::protobuf::uint32 value) {
  
  best_value_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecord.best_value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChallengeRecordNotify::kGroupIdFieldNumber;
const int ChallengeRecordNotify::kChallengeRecordListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChallengeRecordNotify::ChallengeRecordNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ChallengeRecordNotify)
}
ChallengeRecordNotify::ChallengeRecordNotify(const ChallengeRecordNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      challenge_record_list_(from.challenge_record_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ChallengeRecordNotify)
}

void ChallengeRecordNotify::SharedCtor() {
  group_id_ = 0u;
  _cached_size_ = 0;
}

ChallengeRecordNotify::~ChallengeRecordNotify() {
  // @@protoc_insertion_point(destructor:proto.ChallengeRecordNotify)
  SharedDtor();
}

void ChallengeRecordNotify::SharedDtor() {
}

void ChallengeRecordNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeRecordNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChallengeRecordNotify& ChallengeRecordNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChallengeRecordNotify* ChallengeRecordNotify::New(::google::protobuf::Arena* arena) const {
  ChallengeRecordNotify* n = new ChallengeRecordNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChallengeRecordNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ChallengeRecordNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  challenge_record_list_.Clear();
  group_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ChallengeRecordNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ChallengeRecordNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ChallengeRecord challenge_record_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenge_record_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ChallengeRecordNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ChallengeRecordNotify)
  return false;
#undef DO_
}

void ChallengeRecordNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ChallengeRecordNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_id(), output);
  }

  // repeated .proto.ChallengeRecord challenge_record_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_record_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->challenge_record_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ChallengeRecordNotify)
}

::google::protobuf::uint8* ChallengeRecordNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ChallengeRecordNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_id(), target);
  }

  // repeated .proto.ChallengeRecord challenge_record_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->challenge_record_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->challenge_record_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ChallengeRecordNotify)
  return target;
}

size_t ChallengeRecordNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ChallengeRecordNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ChallengeRecord challenge_record_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->challenge_record_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challenge_record_list(static_cast<int>(i)));
    }
  }

  // uint32 group_id = 2;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeRecordNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ChallengeRecordNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeRecordNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChallengeRecordNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ChallengeRecordNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ChallengeRecordNotify)
    MergeFrom(*source);
  }
}

void ChallengeRecordNotify::MergeFrom(const ChallengeRecordNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ChallengeRecordNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  challenge_record_list_.MergeFrom(from.challenge_record_list_);
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void ChallengeRecordNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ChallengeRecordNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeRecordNotify::CopyFrom(const ChallengeRecordNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ChallengeRecordNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeRecordNotify::IsInitialized() const {
  return true;
}

void ChallengeRecordNotify::Swap(ChallengeRecordNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChallengeRecordNotify::InternalSwap(ChallengeRecordNotify* other) {
  using std::swap;
  challenge_record_list_.InternalSwap(&other->challenge_record_list_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChallengeRecordNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChallengeRecordNotify

// uint32 group_id = 2;
void ChallengeRecordNotify::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 ChallengeRecordNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecordNotify.group_id)
  return group_id_;
}
void ChallengeRecordNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChallengeRecordNotify.group_id)
}

// repeated .proto.ChallengeRecord challenge_record_list = 5;
int ChallengeRecordNotify::challenge_record_list_size() const {
  return challenge_record_list_.size();
}
void ChallengeRecordNotify::clear_challenge_record_list() {
  challenge_record_list_.Clear();
}
const ::proto::ChallengeRecord& ChallengeRecordNotify::challenge_record_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Get(index);
}
::proto::ChallengeRecord* ChallengeRecordNotify::mutable_challenge_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Mutable(index);
}
::proto::ChallengeRecord* ChallengeRecordNotify::add_challenge_record_list() {
  // @@protoc_insertion_point(field_add:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >*
ChallengeRecordNotify::mutable_challenge_record_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChallengeRecordNotify.challenge_record_list)
  return &challenge_record_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ChallengeRecord >&
ChallengeRecordNotify::challenge_record_list() const {
  // @@protoc_insertion_point(field_list:proto.ChallengeRecordNotify.challenge_record_list)
  return challenge_record_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamAvatar::kPlayerUidFieldNumber;
const int DungeonCandidateTeamAvatar::kAvatarInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamAvatar::DungeonCandidateTeamAvatar()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamAvatar)
}
DungeonCandidateTeamAvatar::DungeonCandidateTeamAvatar(const DungeonCandidateTeamAvatar& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_avatar_info()) {
    avatar_info_ = new ::proto::AvatarInfo(*from.avatar_info_);
  } else {
    avatar_info_ = NULL;
  }
  player_uid_ = from.player_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamAvatar)
}

void DungeonCandidateTeamAvatar::SharedCtor() {
  ::memset(&avatar_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&avatar_info_)) + sizeof(player_uid_));
  _cached_size_ = 0;
}

DungeonCandidateTeamAvatar::~DungeonCandidateTeamAvatar() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamAvatar)
  SharedDtor();
}

void DungeonCandidateTeamAvatar::SharedDtor() {
  if (this != internal_default_instance()) delete avatar_info_;
}

void DungeonCandidateTeamAvatar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamAvatar::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamAvatar& DungeonCandidateTeamAvatar::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamAvatar* DungeonCandidateTeamAvatar::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamAvatar* n = new DungeonCandidateTeamAvatar;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && avatar_info_ != NULL) {
    delete avatar_info_;
  }
  avatar_info_ = NULL;
  player_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamAvatar)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AvatarInfo avatar_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_avatar_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamAvatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamAvatar)
  return false;
#undef DO_
}

void DungeonCandidateTeamAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_uid(), output);
  }

  // .proto.AvatarInfo avatar_info = 6;
  if (this->has_avatar_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->avatar_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamAvatar)
}

::google::protobuf::uint8* DungeonCandidateTeamAvatar::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_uid(), target);
  }

  // .proto.AvatarInfo avatar_info = 6;
  if (this->has_avatar_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->avatar_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamAvatar)
  return target;
}

size_t DungeonCandidateTeamAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamAvatar)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.AvatarInfo avatar_info = 6;
  if (this->has_avatar_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->avatar_info_);
  }

  // uint32 player_uid = 2;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamAvatar::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamAvatar* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamAvatar>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamAvatar)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamAvatar)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamAvatar::MergeFrom(const DungeonCandidateTeamAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_avatar_info()) {
    mutable_avatar_info()->::proto::AvatarInfo::MergeFrom(from.avatar_info());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamAvatar::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamAvatar::CopyFrom(const DungeonCandidateTeamAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamAvatar::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamAvatar::Swap(DungeonCandidateTeamAvatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamAvatar::InternalSwap(DungeonCandidateTeamAvatar* other) {
  using std::swap;
  swap(avatar_info_, other->avatar_info_);
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamAvatar::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamAvatar

// uint32 player_uid = 2;
void DungeonCandidateTeamAvatar::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamAvatar::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamAvatar.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamAvatar::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamAvatar.player_uid)
}

// .proto.AvatarInfo avatar_info = 6;
bool DungeonCandidateTeamAvatar::has_avatar_info() const {
  return this != internal_default_instance() && avatar_info_ != NULL;
}
void DungeonCandidateTeamAvatar::clear_avatar_info() {
  if (GetArenaNoVirtual() == NULL && avatar_info_ != NULL) delete avatar_info_;
  avatar_info_ = NULL;
}
const ::proto::AvatarInfo& DungeonCandidateTeamAvatar::avatar_info() const {
  const ::proto::AvatarInfo* p = avatar_info_;
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamAvatar.avatar_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::AvatarInfo*>(
      &::proto::_AvatarInfo_default_instance_);
}
::proto::AvatarInfo* DungeonCandidateTeamAvatar::mutable_avatar_info() {
  
  if (avatar_info_ == NULL) {
    avatar_info_ = new ::proto::AvatarInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DungeonCandidateTeamAvatar.avatar_info)
  return avatar_info_;
}
::proto::AvatarInfo* DungeonCandidateTeamAvatar::release_avatar_info() {
  // @@protoc_insertion_point(field_release:proto.DungeonCandidateTeamAvatar.avatar_info)
  
  ::proto::AvatarInfo* temp = avatar_info_;
  avatar_info_ = NULL;
  return temp;
}
void DungeonCandidateTeamAvatar::set_allocated_avatar_info(::proto::AvatarInfo* avatar_info) {
  delete avatar_info_;
  avatar_info_ = avatar_info;
  if (avatar_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DungeonCandidateTeamAvatar.avatar_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry() {}
DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[44];
}
void DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify_PlayerStateMapEntry::MergeFrom(const DungeonCandidateTeamInfoNotify_PlayerStateMapEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInfoNotify::kPlayerStateMapFieldNumber;
const int DungeonCandidateTeamInfoNotify::kDungeonIdFieldNumber;
const int DungeonCandidateTeamInfoNotify::kReadyPlayerUidFieldNumber;
const int DungeonCandidateTeamInfoNotify::kMatchTypeFieldNumber;
const int DungeonCandidateTeamInfoNotify::kAvatarListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInfoNotify)
}
DungeonCandidateTeamInfoNotify::DungeonCandidateTeamInfoNotify(const DungeonCandidateTeamInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_list_(from.avatar_list_),
      ready_player_uid_(from.ready_player_uid_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_state_map_.MergeFrom(from.player_state_map_);
  ::memcpy(&match_type_, &from.match_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&match_type_)) + sizeof(dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInfoNotify)
}

void DungeonCandidateTeamInfoNotify::SharedCtor() {
  ::memset(&match_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&match_type_)) + sizeof(dungeon_id_));
  _cached_size_ = 0;
}

DungeonCandidateTeamInfoNotify::~DungeonCandidateTeamInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInfoNotify)
  SharedDtor();
}

void DungeonCandidateTeamInfoNotify::SharedDtor() {
}

void DungeonCandidateTeamInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInfoNotify& DungeonCandidateTeamInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInfoNotify* DungeonCandidateTeamInfoNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInfoNotify* n = new DungeonCandidateTeamInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_list_.Clear();
  player_state_map_.Clear();
  ready_player_uid_.Clear();
  ::memset(&match_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&match_type_)) + sizeof(dungeon_id_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 match_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avatar_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .proto.DungeonCandidateTeamPlayerState> player_state_map = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DungeonCandidateTeamInfoNotify_PlayerStateMapEntry::Parser< ::google::protobuf::internal::MapField<
              DungeonCandidateTeamInfoNotify_PlayerStateMapEntry,
              ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState > > parser(&player_state_map_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ready_player_uid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ready_player_uid())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106u, input, this->mutable_ready_player_uid())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInfoNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_type = 2;
  if (this->match_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->match_type(), output);
  }

  // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->avatar_list(static_cast<int>(i)), output);
  }

  // uint32 dungeon_id = 9;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->dungeon_id(), output);
  }

  // map<uint32, .proto.DungeonCandidateTeamPlayerState> player_state_map = 10;
  if (!this->player_state_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->player_state_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_state_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::const_iterator
          it = this->player_state_map().begin();
          it != this->player_state_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonCandidateTeamInfoNotify_PlayerStateMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_state_map_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonCandidateTeamInfoNotify_PlayerStateMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::const_iterator
          it = this->player_state_map().begin();
          it != this->player_state_map().end(); ++it) {
        entry.reset(player_state_map_.NewEnumEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            10, *entry, output);
      }
    }
  }

  // repeated uint32 ready_player_uid = 13;
  if (this->ready_player_uid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _ready_player_uid_cached_byte_size_));
  }
  for (int i = 0, n = this->ready_player_uid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ready_player_uid(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInfoNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 match_type = 2;
  if (this->match_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->match_type(), target);
  }

  // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->avatar_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->avatar_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 dungeon_id = 9;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->dungeon_id(), target);
  }

  // map<uint32, .proto.DungeonCandidateTeamPlayerState> player_state_map = 10;
  if (!this->player_state_map().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->player_state_map().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->player_state_map().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::const_iterator
          it = this->player_state_map().begin();
          it != this->player_state_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<DungeonCandidateTeamInfoNotify_PlayerStateMapEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(player_state_map_.NewEnumEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<DungeonCandidateTeamInfoNotify_PlayerStateMapEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::const_iterator
          it = this->player_state_map().begin();
          it != this->player_state_map().end(); ++it) {
        entry.reset(player_state_map_.NewEnumEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       10, *entry, deterministic, target);
;
      }
    }
  }

  // repeated uint32 ready_player_uid = 13;
  if (this->ready_player_uid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _ready_player_uid_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ready_player_uid_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInfoNotify)
  return target;
}

size_t DungeonCandidateTeamInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.DungeonCandidateTeamAvatar avatar_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->avatar_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->avatar_list(static_cast<int>(i)));
    }
  }

  // map<uint32, .proto.DungeonCandidateTeamPlayerState> player_state_map = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->player_state_map_size());
  {
    ::google::protobuf::scoped_ptr<DungeonCandidateTeamInfoNotify_PlayerStateMapEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >::const_iterator
        it = this->player_state_map().begin();
        it != this->player_state_map().end(); ++it) {
      entry.reset(player_state_map_.NewEnumEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // repeated uint32 ready_player_uid = 13;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ready_player_uid_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ready_player_uid_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 match_type = 2;
  if (this->match_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->match_type());
  }

  // uint32 dungeon_id = 9;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInfoNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInfoNotify::MergeFrom(const DungeonCandidateTeamInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_list_.MergeFrom(from.avatar_list_);
  player_state_map_.MergeFrom(from.player_state_map_);
  ready_player_uid_.MergeFrom(from.ready_player_uid_);
  if (from.match_type() != 0) {
    set_match_type(from.match_type());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
}

void DungeonCandidateTeamInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInfoNotify::CopyFrom(const DungeonCandidateTeamInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInfoNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInfoNotify::Swap(DungeonCandidateTeamInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInfoNotify::InternalSwap(DungeonCandidateTeamInfoNotify* other) {
  using std::swap;
  avatar_list_.InternalSwap(&other->avatar_list_);
  player_state_map_.Swap(&other->player_state_map_);
  ready_player_uid_.InternalSwap(&other->ready_player_uid_);
  swap(match_type_, other->match_type_);
  swap(dungeon_id_, other->dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInfoNotify

// map<uint32, .proto.DungeonCandidateTeamPlayerState> player_state_map = 10;
int DungeonCandidateTeamInfoNotify::player_state_map_size() const {
  return player_state_map_.size();
}
void DungeonCandidateTeamInfoNotify::clear_player_state_map() {
  player_state_map_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >&
DungeonCandidateTeamInfoNotify::player_state_map() const {
  // @@protoc_insertion_point(field_map:proto.DungeonCandidateTeamInfoNotify.player_state_map)
  return player_state_map_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::DungeonCandidateTeamPlayerState >*
DungeonCandidateTeamInfoNotify::mutable_player_state_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.DungeonCandidateTeamInfoNotify.player_state_map)
  return player_state_map_.MutableMap();
}

// uint32 dungeon_id = 9;
void DungeonCandidateTeamInfoNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonCandidateTeamInfoNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.dungeon_id)
}

// repeated uint32 ready_player_uid = 13;
int DungeonCandidateTeamInfoNotify::ready_player_uid_size() const {
  return ready_player_uid_.size();
}
void DungeonCandidateTeamInfoNotify::clear_ready_player_uid() {
  ready_player_uid_.Clear();
}
::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::ready_player_uid(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return ready_player_uid_.Get(index);
}
void DungeonCandidateTeamInfoNotify::set_ready_player_uid(int index, ::google::protobuf::uint32 value) {
  ready_player_uid_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
}
void DungeonCandidateTeamInfoNotify::add_ready_player_uid(::google::protobuf::uint32 value) {
  ready_player_uid_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInfoNotify::ready_player_uid() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return ready_player_uid_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInfoNotify::mutable_ready_player_uid() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInfoNotify.ready_player_uid)
  return &ready_player_uid_;
}

// uint32 match_type = 2;
void DungeonCandidateTeamInfoNotify::clear_match_type() {
  match_type_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInfoNotify::match_type() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.match_type)
  return match_type_;
}
void DungeonCandidateTeamInfoNotify::set_match_type(::google::protobuf::uint32 value) {
  
  match_type_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInfoNotify.match_type)
}

// repeated .proto.DungeonCandidateTeamAvatar avatar_list = 4;
int DungeonCandidateTeamInfoNotify::avatar_list_size() const {
  return avatar_list_.size();
}
void DungeonCandidateTeamInfoNotify::clear_avatar_list() {
  avatar_list_.Clear();
}
const ::proto::DungeonCandidateTeamAvatar& DungeonCandidateTeamInfoNotify::avatar_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Get(index);
}
::proto::DungeonCandidateTeamAvatar* DungeonCandidateTeamInfoNotify::mutable_avatar_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Mutable(index);
}
::proto::DungeonCandidateTeamAvatar* DungeonCandidateTeamInfoNotify::add_avatar_list() {
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >*
DungeonCandidateTeamInfoNotify::mutable_avatar_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return &avatar_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DungeonCandidateTeamAvatar >&
DungeonCandidateTeamInfoNotify::avatar_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInfoNotify.avatar_list)
  return avatar_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInviteNotify::kPlayerUidFieldNumber;
const int DungeonCandidateTeamInviteNotify::kVaildDeadlineTimeSecFieldNumber;
const int DungeonCandidateTeamInviteNotify::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInviteNotify::DungeonCandidateTeamInviteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInviteNotify)
}
DungeonCandidateTeamInviteNotify::DungeonCandidateTeamInviteNotify(const DungeonCandidateTeamInviteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vaild_deadline_time_sec_, &from.vaild_deadline_time_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_id_) -
    reinterpret_cast<char*>(&vaild_deadline_time_sec_)) + sizeof(dungeon_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInviteNotify)
}

void DungeonCandidateTeamInviteNotify::SharedCtor() {
  ::memset(&vaild_deadline_time_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&vaild_deadline_time_sec_)) + sizeof(dungeon_id_));
  _cached_size_ = 0;
}

DungeonCandidateTeamInviteNotify::~DungeonCandidateTeamInviteNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInviteNotify)
  SharedDtor();
}

void DungeonCandidateTeamInviteNotify::SharedDtor() {
}

void DungeonCandidateTeamInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInviteNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInviteNotify& DungeonCandidateTeamInviteNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInviteNotify* DungeonCandidateTeamInviteNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInviteNotify* n = new DungeonCandidateTeamInviteNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInviteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vaild_deadline_time_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_id_) -
      reinterpret_cast<char*>(&vaild_deadline_time_sec_)) + sizeof(dungeon_id_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInviteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 vaild_deadline_time_sec = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vaild_deadline_time_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInviteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInviteNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 5;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->player_uid(), output);
  }

  // uint32 dungeon_id = 6;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dungeon_id(), output);
  }

  // uint32 vaild_deadline_time_sec = 9;
  if (this->vaild_deadline_time_sec() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vaild_deadline_time_sec(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInviteNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamInviteNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 5;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->player_uid(), target);
  }

  // uint32 dungeon_id = 6;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dungeon_id(), target);
  }

  // uint32 vaild_deadline_time_sec = 9;
  if (this->vaild_deadline_time_sec() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vaild_deadline_time_sec(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInviteNotify)
  return target;
}

size_t DungeonCandidateTeamInviteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInviteNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 vaild_deadline_time_sec = 9;
  if (this->vaild_deadline_time_sec() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vaild_deadline_time_sec());
  }

  // uint32 player_uid = 5;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 dungeon_id = 6;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInviteNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInviteNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInviteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInviteNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInviteNotify::MergeFrom(const DungeonCandidateTeamInviteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vaild_deadline_time_sec() != 0) {
    set_vaild_deadline_time_sec(from.vaild_deadline_time_sec());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
}

void DungeonCandidateTeamInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInviteNotify::CopyFrom(const DungeonCandidateTeamInviteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInviteNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInviteNotify::Swap(DungeonCandidateTeamInviteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInviteNotify::InternalSwap(DungeonCandidateTeamInviteNotify* other) {
  using std::swap;
  swap(vaild_deadline_time_sec_, other->vaild_deadline_time_sec_);
  swap(player_uid_, other->player_uid_);
  swap(dungeon_id_, other->dungeon_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInviteNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInviteNotify

// uint32 player_uid = 5;
void DungeonCandidateTeamInviteNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamInviteNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.player_uid)
}

// uint32 vaild_deadline_time_sec = 9;
void DungeonCandidateTeamInviteNotify::clear_vaild_deadline_time_sec() {
  vaild_deadline_time_sec_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::vaild_deadline_time_sec() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.vaild_deadline_time_sec)
  return vaild_deadline_time_sec_;
}
void DungeonCandidateTeamInviteNotify::set_vaild_deadline_time_sec(::google::protobuf::uint32 value) {
  
  vaild_deadline_time_sec_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.vaild_deadline_time_sec)
}

// uint32 dungeon_id = 6;
void DungeonCandidateTeamInviteNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamInviteNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonCandidateTeamInviteNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteNotify.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamRefuseNotify::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamRefuseNotify::DungeonCandidateTeamRefuseNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamRefuseNotify)
}
DungeonCandidateTeamRefuseNotify::DungeonCandidateTeamRefuseNotify(const DungeonCandidateTeamRefuseNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_uid_ = from.player_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamRefuseNotify)
}

void DungeonCandidateTeamRefuseNotify::SharedCtor() {
  player_uid_ = 0u;
  _cached_size_ = 0;
}

DungeonCandidateTeamRefuseNotify::~DungeonCandidateTeamRefuseNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamRefuseNotify)
  SharedDtor();
}

void DungeonCandidateTeamRefuseNotify::SharedDtor() {
}

void DungeonCandidateTeamRefuseNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamRefuseNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamRefuseNotify& DungeonCandidateTeamRefuseNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamRefuseNotify* DungeonCandidateTeamRefuseNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamRefuseNotify* n = new DungeonCandidateTeamRefuseNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamRefuseNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamRefuseNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamRefuseNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamRefuseNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamRefuseNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamRefuseNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamRefuseNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamRefuseNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 3;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamRefuseNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamRefuseNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamRefuseNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 3;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamRefuseNotify)
  return target;
}

size_t DungeonCandidateTeamRefuseNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamRefuseNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 3;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamRefuseNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamRefuseNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamRefuseNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamRefuseNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamRefuseNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamRefuseNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamRefuseNotify::MergeFrom(const DungeonCandidateTeamRefuseNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamRefuseNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamRefuseNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamRefuseNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamRefuseNotify::CopyFrom(const DungeonCandidateTeamRefuseNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamRefuseNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamRefuseNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamRefuseNotify::Swap(DungeonCandidateTeamRefuseNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamRefuseNotify::InternalSwap(DungeonCandidateTeamRefuseNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamRefuseNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamRefuseNotify

// uint32 player_uid = 3;
void DungeonCandidateTeamRefuseNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamRefuseNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamRefuseNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamRefuseNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamRefuseNotify.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamPlayerLeaveNotify::kReasonFieldNumber;
const int DungeonCandidateTeamPlayerLeaveNotify::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamPlayerLeaveNotify::DungeonCandidateTeamPlayerLeaveNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamPlayerLeaveNotify)
}
DungeonCandidateTeamPlayerLeaveNotify::DungeonCandidateTeamPlayerLeaveNotify(const DungeonCandidateTeamPlayerLeaveNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_uid_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(player_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamPlayerLeaveNotify)
}

void DungeonCandidateTeamPlayerLeaveNotify::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(player_uid_));
  _cached_size_ = 0;
}

DungeonCandidateTeamPlayerLeaveNotify::~DungeonCandidateTeamPlayerLeaveNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamPlayerLeaveNotify)
  SharedDtor();
}

void DungeonCandidateTeamPlayerLeaveNotify::SharedDtor() {
}

void DungeonCandidateTeamPlayerLeaveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamPlayerLeaveNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamPlayerLeaveNotify& DungeonCandidateTeamPlayerLeaveNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamPlayerLeaveNotify* DungeonCandidateTeamPlayerLeaveNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamPlayerLeaveNotify* n = new DungeonCandidateTeamPlayerLeaveNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamPlayerLeaveNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(player_uid_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamPlayerLeaveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::DungeonCandidateTeamPlayerLeaveReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_uid = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamPlayerLeaveNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamPlayerLeaveNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamPlayerLeaveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 3;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->reason(), output);
  }

  // uint32 player_uid = 13;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->player_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamPlayerLeaveNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamPlayerLeaveNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 3;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->reason(), target);
  }

  // uint32 player_uid = 13;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->player_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamPlayerLeaveNotify)
  return target;
}

size_t DungeonCandidateTeamPlayerLeaveNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.DungeonCandidateTeamPlayerLeaveReason reason = 3;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 player_uid = 13;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamPlayerLeaveNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamPlayerLeaveNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamPlayerLeaveNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamPlayerLeaveNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamPlayerLeaveNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamPlayerLeaveNotify::MergeFrom(const DungeonCandidateTeamPlayerLeaveNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamPlayerLeaveNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamPlayerLeaveNotify::CopyFrom(const DungeonCandidateTeamPlayerLeaveNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamPlayerLeaveNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamPlayerLeaveNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamPlayerLeaveNotify::Swap(DungeonCandidateTeamPlayerLeaveNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamPlayerLeaveNotify::InternalSwap(DungeonCandidateTeamPlayerLeaveNotify* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamPlayerLeaveNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamPlayerLeaveNotify

// .proto.DungeonCandidateTeamPlayerLeaveReason reason = 3;
void DungeonCandidateTeamPlayerLeaveNotify::clear_reason() {
  reason_ = 0;
}
::proto::DungeonCandidateTeamPlayerLeaveReason DungeonCandidateTeamPlayerLeaveNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamPlayerLeaveNotify.reason)
  return static_cast< ::proto::DungeonCandidateTeamPlayerLeaveReason >(reason_);
}
void DungeonCandidateTeamPlayerLeaveNotify::set_reason(::proto::DungeonCandidateTeamPlayerLeaveReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamPlayerLeaveNotify.reason)
}

// uint32 player_uid = 13;
void DungeonCandidateTeamPlayerLeaveNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamPlayerLeaveNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamPlayerLeaveNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamPlayerLeaveNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamPlayerLeaveNotify.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamDismissNotify::kReasonFieldNumber;
const int DungeonCandidateTeamDismissNotify::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamDismissNotify::DungeonCandidateTeamDismissNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamDismissNotify)
}
DungeonCandidateTeamDismissNotify::DungeonCandidateTeamDismissNotify(const DungeonCandidateTeamDismissNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_uid_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(player_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamDismissNotify)
}

void DungeonCandidateTeamDismissNotify::SharedCtor() {
  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(player_uid_));
  _cached_size_ = 0;
}

DungeonCandidateTeamDismissNotify::~DungeonCandidateTeamDismissNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamDismissNotify)
  SharedDtor();
}

void DungeonCandidateTeamDismissNotify::SharedDtor() {
}

void DungeonCandidateTeamDismissNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamDismissNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamDismissNotify& DungeonCandidateTeamDismissNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamDismissNotify* DungeonCandidateTeamDismissNotify::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamDismissNotify* n = new DungeonCandidateTeamDismissNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamDismissNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamDismissNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reason_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&reason_)) + sizeof(player_uid_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamDismissNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamDismissNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.DungeonCandidateTeamDismissReason reason = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::proto::DungeonCandidateTeamDismissReason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_uid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamDismissNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamDismissNotify)
  return false;
#undef DO_
}

void DungeonCandidateTeamDismissNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamDismissNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonCandidateTeamDismissReason reason = 9;
  if (this->reason() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->reason(), output);
  }

  // uint32 player_uid = 12;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->player_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamDismissNotify)
}

::google::protobuf::uint8* DungeonCandidateTeamDismissNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamDismissNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonCandidateTeamDismissReason reason = 9;
  if (this->reason() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->reason(), target);
  }

  // uint32 player_uid = 12;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->player_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamDismissNotify)
  return target;
}

size_t DungeonCandidateTeamDismissNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamDismissNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.DungeonCandidateTeamDismissReason reason = 9;
  if (this->reason() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
  }

  // uint32 player_uid = 12;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamDismissNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamDismissNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamDismissNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamDismissNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamDismissNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamDismissNotify)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamDismissNotify::MergeFrom(const DungeonCandidateTeamDismissNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamDismissNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamDismissNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamDismissNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamDismissNotify::CopyFrom(const DungeonCandidateTeamDismissNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamDismissNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamDismissNotify::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamDismissNotify::Swap(DungeonCandidateTeamDismissNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamDismissNotify::InternalSwap(DungeonCandidateTeamDismissNotify* other) {
  using std::swap;
  swap(reason_, other->reason_);
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamDismissNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamDismissNotify

// .proto.DungeonCandidateTeamDismissReason reason = 9;
void DungeonCandidateTeamDismissNotify::clear_reason() {
  reason_ = 0;
}
::proto::DungeonCandidateTeamDismissReason DungeonCandidateTeamDismissNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamDismissNotify.reason)
  return static_cast< ::proto::DungeonCandidateTeamDismissReason >(reason_);
}
void DungeonCandidateTeamDismissNotify::set_reason(::proto::DungeonCandidateTeamDismissReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamDismissNotify.reason)
}

// uint32 player_uid = 12;
void DungeonCandidateTeamDismissNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamDismissNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamDismissNotify.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamDismissNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamDismissNotify.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamCreateReq::kPointIdFieldNumber;
const int DungeonCandidateTeamCreateReq::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamCreateReq::DungeonCandidateTeamCreateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamCreateReq)
}
DungeonCandidateTeamCreateReq::DungeonCandidateTeamCreateReq(const DungeonCandidateTeamCreateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamCreateReq)
}

void DungeonCandidateTeamCreateReq::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

DungeonCandidateTeamCreateReq::~DungeonCandidateTeamCreateReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamCreateReq)
  SharedDtor();
}

void DungeonCandidateTeamCreateReq::SharedDtor() {
}

void DungeonCandidateTeamCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamCreateReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamCreateReq& DungeonCandidateTeamCreateReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamCreateReq* DungeonCandidateTeamCreateReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamCreateReq* n = new DungeonCandidateTeamCreateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamCreateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamCreateReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 6;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dungeon_id(), output);
  }

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamCreateReq)
}

::google::protobuf::uint8* DungeonCandidateTeamCreateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamCreateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 6;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dungeon_id(), target);
  }

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamCreateReq)
  return target;
}

size_t DungeonCandidateTeamCreateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamCreateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 6;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // uint32 point_id = 7;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamCreateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamCreateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamCreateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamCreateReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamCreateReq::MergeFrom(const DungeonCandidateTeamCreateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamCreateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void DungeonCandidateTeamCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamCreateReq::CopyFrom(const DungeonCandidateTeamCreateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamCreateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamCreateReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamCreateReq::Swap(DungeonCandidateTeamCreateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamCreateReq::InternalSwap(DungeonCandidateTeamCreateReq* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamCreateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamCreateReq

// uint32 point_id = 7;
void DungeonCandidateTeamCreateReq::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamCreateReq::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateReq.point_id)
  return point_id_;
}
void DungeonCandidateTeamCreateReq::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateReq.point_id)
}

// uint32 dungeon_id = 6;
void DungeonCandidateTeamCreateReq::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamCreateReq::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateReq.dungeon_id)
  return dungeon_id_;
}
void DungeonCandidateTeamCreateReq::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateReq.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamCreateRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamCreateRsp::DungeonCandidateTeamCreateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamCreateRsp)
}
DungeonCandidateTeamCreateRsp::DungeonCandidateTeamCreateRsp(const DungeonCandidateTeamCreateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamCreateRsp)
}

void DungeonCandidateTeamCreateRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamCreateRsp::~DungeonCandidateTeamCreateRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamCreateRsp)
  SharedDtor();
}

void DungeonCandidateTeamCreateRsp::SharedDtor() {
}

void DungeonCandidateTeamCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamCreateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamCreateRsp& DungeonCandidateTeamCreateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamCreateRsp* DungeonCandidateTeamCreateRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamCreateRsp* n = new DungeonCandidateTeamCreateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamCreateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamCreateRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamCreateRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamCreateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamCreateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamCreateRsp)
  return target;
}

size_t DungeonCandidateTeamCreateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamCreateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamCreateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamCreateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamCreateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamCreateRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamCreateRsp::MergeFrom(const DungeonCandidateTeamCreateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamCreateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamCreateRsp::CopyFrom(const DungeonCandidateTeamCreateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamCreateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamCreateRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamCreateRsp::Swap(DungeonCandidateTeamCreateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamCreateRsp::InternalSwap(DungeonCandidateTeamCreateRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamCreateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamCreateRsp

// int32 retcode = 1;
void DungeonCandidateTeamCreateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamCreateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamCreateRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamCreateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamCreateRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInviteReq::kPlayerUidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInviteReq::DungeonCandidateTeamInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInviteReq)
}
DungeonCandidateTeamInviteReq::DungeonCandidateTeamInviteReq(const DungeonCandidateTeamInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      player_uids_(from.player_uids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInviteReq)
}

void DungeonCandidateTeamInviteReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonCandidateTeamInviteReq::~DungeonCandidateTeamInviteReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInviteReq)
  SharedDtor();
}

void DungeonCandidateTeamInviteReq::SharedDtor() {
}

void DungeonCandidateTeamInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInviteReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInviteReq& DungeonCandidateTeamInviteReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInviteReq* DungeonCandidateTeamInviteReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInviteReq* n = new DungeonCandidateTeamInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_uids_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 player_uids = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_uids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_player_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInviteReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 player_uids = 5;
  if (this->player_uids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _player_uids_cached_byte_size_));
  }
  for (int i = 0, n = this->player_uids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_uids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInviteReq)
}

::google::protobuf::uint8* DungeonCandidateTeamInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 player_uids = 5;
  if (this->player_uids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _player_uids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_uids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInviteReq)
  return target;
}

size_t DungeonCandidateTeamInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInviteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 player_uids = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _player_uids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInviteReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInviteReq::MergeFrom(const DungeonCandidateTeamInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_uids_.MergeFrom(from.player_uids_);
}

void DungeonCandidateTeamInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInviteReq::CopyFrom(const DungeonCandidateTeamInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInviteReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInviteReq::Swap(DungeonCandidateTeamInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInviteReq::InternalSwap(DungeonCandidateTeamInviteReq* other) {
  using std::swap;
  player_uids_.InternalSwap(&other->player_uids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInviteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInviteReq

// repeated uint32 player_uids = 5;
int DungeonCandidateTeamInviteReq::player_uids_size() const {
  return player_uids_.size();
}
void DungeonCandidateTeamInviteReq::clear_player_uids() {
  player_uids_.Clear();
}
::google::protobuf::uint32 DungeonCandidateTeamInviteReq::player_uids(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteReq.player_uids)
  return player_uids_.Get(index);
}
void DungeonCandidateTeamInviteReq::set_player_uids(int index, ::google::protobuf::uint32 value) {
  player_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteReq.player_uids)
}
void DungeonCandidateTeamInviteReq::add_player_uids(::google::protobuf::uint32 value) {
  player_uids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInviteReq.player_uids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInviteReq::player_uids() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInviteReq.player_uids)
  return player_uids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInviteReq::mutable_player_uids() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInviteReq.player_uids)
  return &player_uids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamInviteRsp::kRetcodeFieldNumber;
const int DungeonCandidateTeamInviteRsp::kInvalidPlayerUidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamInviteRsp::DungeonCandidateTeamInviteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamInviteRsp)
}
DungeonCandidateTeamInviteRsp::DungeonCandidateTeamInviteRsp(const DungeonCandidateTeamInviteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      invalid_player_uids_(from.invalid_player_uids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamInviteRsp)
}

void DungeonCandidateTeamInviteRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamInviteRsp::~DungeonCandidateTeamInviteRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamInviteRsp)
  SharedDtor();
}

void DungeonCandidateTeamInviteRsp::SharedDtor() {
}

void DungeonCandidateTeamInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamInviteRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamInviteRsp& DungeonCandidateTeamInviteRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamInviteRsp* DungeonCandidateTeamInviteRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamInviteRsp* n = new DungeonCandidateTeamInviteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamInviteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invalid_player_uids_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamInviteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 invalid_player_uids = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_invalid_player_uids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_invalid_player_uids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamInviteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamInviteRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 invalid_player_uids = 7;
  if (this->invalid_player_uids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _invalid_player_uids_cached_byte_size_));
  }
  for (int i = 0, n = this->invalid_player_uids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->invalid_player_uids(i), output);
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamInviteRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamInviteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 invalid_player_uids = 7;
  if (this->invalid_player_uids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _invalid_player_uids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->invalid_player_uids_, target);
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamInviteRsp)
  return target;
}

size_t DungeonCandidateTeamInviteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamInviteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 invalid_player_uids = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->invalid_player_uids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _invalid_player_uids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamInviteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamInviteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamInviteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamInviteRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamInviteRsp::MergeFrom(const DungeonCandidateTeamInviteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invalid_player_uids_.MergeFrom(from.invalid_player_uids_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamInviteRsp::CopyFrom(const DungeonCandidateTeamInviteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamInviteRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamInviteRsp::Swap(DungeonCandidateTeamInviteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamInviteRsp::InternalSwap(DungeonCandidateTeamInviteRsp* other) {
  using std::swap;
  invalid_player_uids_.InternalSwap(&other->invalid_player_uids_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamInviteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamInviteRsp

// int32 retcode = 12;
void DungeonCandidateTeamInviteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteRsp.retcode)
}

// repeated uint32 invalid_player_uids = 7;
int DungeonCandidateTeamInviteRsp::invalid_player_uids_size() const {
  return invalid_player_uids_.size();
}
void DungeonCandidateTeamInviteRsp::clear_invalid_player_uids() {
  invalid_player_uids_.Clear();
}
::google::protobuf::uint32 DungeonCandidateTeamInviteRsp::invalid_player_uids(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
  return invalid_player_uids_.Get(index);
}
void DungeonCandidateTeamInviteRsp::set_invalid_player_uids(int index, ::google::protobuf::uint32 value) {
  invalid_player_uids_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
}
void DungeonCandidateTeamInviteRsp::add_invalid_player_uids(::google::protobuf::uint32 value) {
  invalid_player_uids_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DungeonCandidateTeamInviteRsp::invalid_player_uids() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
  return invalid_player_uids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DungeonCandidateTeamInviteRsp::mutable_invalid_player_uids() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamInviteRsp.invalid_player_uids)
  return &invalid_player_uids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamKickReq::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamKickReq::DungeonCandidateTeamKickReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamKickReq)
}
DungeonCandidateTeamKickReq::DungeonCandidateTeamKickReq(const DungeonCandidateTeamKickReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_uid_ = from.player_uid_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamKickReq)
}

void DungeonCandidateTeamKickReq::SharedCtor() {
  player_uid_ = 0u;
  _cached_size_ = 0;
}

DungeonCandidateTeamKickReq::~DungeonCandidateTeamKickReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamKickReq)
  SharedDtor();
}

void DungeonCandidateTeamKickReq::SharedDtor() {
}

void DungeonCandidateTeamKickReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamKickReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamKickReq& DungeonCandidateTeamKickReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamKickReq* DungeonCandidateTeamKickReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamKickReq* n = new DungeonCandidateTeamKickReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamKickReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamKickReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_uid_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamKickReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamKickReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamKickReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamKickReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamKickReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamKickReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 9;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->player_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamKickReq)
}

::google::protobuf::uint8* DungeonCandidateTeamKickReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamKickReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 9;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->player_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamKickReq)
  return target;
}

size_t DungeonCandidateTeamKickReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamKickReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 9;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamKickReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamKickReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamKickReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamKickReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamKickReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamKickReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamKickReq::MergeFrom(const DungeonCandidateTeamKickReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamKickReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonCandidateTeamKickReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamKickReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamKickReq::CopyFrom(const DungeonCandidateTeamKickReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamKickReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamKickReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamKickReq::Swap(DungeonCandidateTeamKickReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamKickReq::InternalSwap(DungeonCandidateTeamKickReq* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamKickReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamKickReq

// uint32 player_uid = 9;
void DungeonCandidateTeamKickReq::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonCandidateTeamKickReq::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamKickReq.player_uid)
  return player_uid_;
}
void DungeonCandidateTeamKickReq::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamKickReq.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamKickRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamKickRsp::DungeonCandidateTeamKickRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamKickRsp)
}
DungeonCandidateTeamKickRsp::DungeonCandidateTeamKickRsp(const DungeonCandidateTeamKickRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamKickRsp)
}

void DungeonCandidateTeamKickRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamKickRsp::~DungeonCandidateTeamKickRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamKickRsp)
  SharedDtor();
}

void DungeonCandidateTeamKickRsp::SharedDtor() {
}

void DungeonCandidateTeamKickRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamKickRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamKickRsp& DungeonCandidateTeamKickRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamKickRsp* DungeonCandidateTeamKickRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamKickRsp* n = new DungeonCandidateTeamKickRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamKickRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamKickRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamKickRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamKickRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamKickRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamKickRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamKickRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamKickRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamKickRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamKickRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamKickRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamKickRsp)
  return target;
}

size_t DungeonCandidateTeamKickRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamKickRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamKickRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamKickRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamKickRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamKickRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamKickRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamKickRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamKickRsp::MergeFrom(const DungeonCandidateTeamKickRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamKickRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamKickRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamKickRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamKickRsp::CopyFrom(const DungeonCandidateTeamKickRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamKickRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamKickRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamKickRsp::Swap(DungeonCandidateTeamKickRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamKickRsp::InternalSwap(DungeonCandidateTeamKickRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamKickRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamKickRsp

// int32 retcode = 1;
void DungeonCandidateTeamKickRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamKickRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamKickRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamKickRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamKickRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamLeaveReq::DungeonCandidateTeamLeaveReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamLeaveReq)
}
DungeonCandidateTeamLeaveReq::DungeonCandidateTeamLeaveReq(const DungeonCandidateTeamLeaveReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamLeaveReq)
}

void DungeonCandidateTeamLeaveReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonCandidateTeamLeaveReq::~DungeonCandidateTeamLeaveReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamLeaveReq)
  SharedDtor();
}

void DungeonCandidateTeamLeaveReq::SharedDtor() {
}

void DungeonCandidateTeamLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamLeaveReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamLeaveReq& DungeonCandidateTeamLeaveReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamLeaveReq* DungeonCandidateTeamLeaveReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamLeaveReq* n = new DungeonCandidateTeamLeaveReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamLeaveReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamLeaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamLeaveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamLeaveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamLeaveReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamLeaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamLeaveReq)
}

::google::protobuf::uint8* DungeonCandidateTeamLeaveReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamLeaveReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamLeaveReq)
  return target;
}

size_t DungeonCandidateTeamLeaveReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamLeaveReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamLeaveReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamLeaveReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamLeaveReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamLeaveReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamLeaveReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamLeaveReq::MergeFrom(const DungeonCandidateTeamLeaveReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamLeaveReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DungeonCandidateTeamLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamLeaveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamLeaveReq::CopyFrom(const DungeonCandidateTeamLeaveReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamLeaveReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamLeaveReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamLeaveReq::Swap(DungeonCandidateTeamLeaveReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamLeaveReq::InternalSwap(DungeonCandidateTeamLeaveReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamLeaveReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamLeaveReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamLeaveRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamLeaveRsp::DungeonCandidateTeamLeaveRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamLeaveRsp)
}
DungeonCandidateTeamLeaveRsp::DungeonCandidateTeamLeaveRsp(const DungeonCandidateTeamLeaveRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamLeaveRsp)
}

void DungeonCandidateTeamLeaveRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamLeaveRsp::~DungeonCandidateTeamLeaveRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamLeaveRsp)
  SharedDtor();
}

void DungeonCandidateTeamLeaveRsp::SharedDtor() {
}

void DungeonCandidateTeamLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamLeaveRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamLeaveRsp& DungeonCandidateTeamLeaveRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamLeaveRsp* DungeonCandidateTeamLeaveRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamLeaveRsp* n = new DungeonCandidateTeamLeaveRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamLeaveRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamLeaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamLeaveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamLeaveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamLeaveRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamLeaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamLeaveRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamLeaveRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamLeaveRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamLeaveRsp)
  return target;
}

size_t DungeonCandidateTeamLeaveRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamLeaveRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 14;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamLeaveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamLeaveRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamLeaveRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamLeaveRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamLeaveRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamLeaveRsp::MergeFrom(const DungeonCandidateTeamLeaveRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamLeaveRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamLeaveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamLeaveRsp::CopyFrom(const DungeonCandidateTeamLeaveRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamLeaveRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamLeaveRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamLeaveRsp::Swap(DungeonCandidateTeamLeaveRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamLeaveRsp::InternalSwap(DungeonCandidateTeamLeaveRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamLeaveRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamLeaveRsp

// int32 retcode = 14;
void DungeonCandidateTeamLeaveRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamLeaveRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamLeaveRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamLeaveRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamLeaveRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamReplyInviteReq::kIsAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamReplyInviteReq::DungeonCandidateTeamReplyInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamReplyInviteReq)
}
DungeonCandidateTeamReplyInviteReq::DungeonCandidateTeamReplyInviteReq(const DungeonCandidateTeamReplyInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_accept_ = from.is_accept_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamReplyInviteReq)
}

void DungeonCandidateTeamReplyInviteReq::SharedCtor() {
  is_accept_ = false;
  _cached_size_ = 0;
}

DungeonCandidateTeamReplyInviteReq::~DungeonCandidateTeamReplyInviteReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamReplyInviteReq)
  SharedDtor();
}

void DungeonCandidateTeamReplyInviteReq::SharedDtor() {
}

void DungeonCandidateTeamReplyInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamReplyInviteReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamReplyInviteReq& DungeonCandidateTeamReplyInviteReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamReplyInviteReq* DungeonCandidateTeamReplyInviteReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamReplyInviteReq* n = new DungeonCandidateTeamReplyInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamReplyInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_accept_ = false;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamReplyInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamReplyInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_accept = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamReplyInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamReplyInviteReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamReplyInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 5;
  if (this->is_accept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_accept(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamReplyInviteReq)
}

::google::protobuf::uint8* DungeonCandidateTeamReplyInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 5;
  if (this->is_accept() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_accept(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamReplyInviteReq)
  return target;
}

size_t DungeonCandidateTeamReplyInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamReplyInviteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_accept = 5;
  if (this->is_accept() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamReplyInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamReplyInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamReplyInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamReplyInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamReplyInviteReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamReplyInviteReq::MergeFrom(const DungeonCandidateTeamReplyInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_accept() != 0) {
    set_is_accept(from.is_accept());
  }
}

void DungeonCandidateTeamReplyInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamReplyInviteReq::CopyFrom(const DungeonCandidateTeamReplyInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamReplyInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamReplyInviteReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamReplyInviteReq::Swap(DungeonCandidateTeamReplyInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamReplyInviteReq::InternalSwap(DungeonCandidateTeamReplyInviteReq* other) {
  using std::swap;
  swap(is_accept_, other->is_accept_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamReplyInviteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamReplyInviteReq

// bool is_accept = 5;
void DungeonCandidateTeamReplyInviteReq::clear_is_accept() {
  is_accept_ = false;
}
bool DungeonCandidateTeamReplyInviteReq::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteReq.is_accept)
  return is_accept_;
}
void DungeonCandidateTeamReplyInviteReq::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteReq.is_accept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamReplyInviteRsp::kIsTransPointFieldNumber;
const int DungeonCandidateTeamReplyInviteRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamReplyInviteRsp::DungeonCandidateTeamReplyInviteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamReplyInviteRsp)
}
DungeonCandidateTeamReplyInviteRsp::DungeonCandidateTeamReplyInviteRsp(const DungeonCandidateTeamReplyInviteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_trans_point_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(is_trans_point_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamReplyInviteRsp)
}

void DungeonCandidateTeamReplyInviteRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trans_point_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_trans_point_));
  _cached_size_ = 0;
}

DungeonCandidateTeamReplyInviteRsp::~DungeonCandidateTeamReplyInviteRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamReplyInviteRsp)
  SharedDtor();
}

void DungeonCandidateTeamReplyInviteRsp::SharedDtor() {
}

void DungeonCandidateTeamReplyInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamReplyInviteRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamReplyInviteRsp& DungeonCandidateTeamReplyInviteRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamReplyInviteRsp* DungeonCandidateTeamReplyInviteRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamReplyInviteRsp* n = new DungeonCandidateTeamReplyInviteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamReplyInviteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_trans_point_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(is_trans_point_));
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamReplyInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamReplyInviteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_trans_point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trans_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamReplyInviteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamReplyInviteRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamReplyInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // bool is_trans_point = 4;
  if (this->is_trans_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_trans_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamReplyInviteRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamReplyInviteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // bool is_trans_point = 4;
  if (this->is_trans_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_trans_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamReplyInviteRsp)
  return target;
}

size_t DungeonCandidateTeamReplyInviteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamReplyInviteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // bool is_trans_point = 4;
  if (this->is_trans_point() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamReplyInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamReplyInviteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamReplyInviteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamReplyInviteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamReplyInviteRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamReplyInviteRsp::MergeFrom(const DungeonCandidateTeamReplyInviteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.is_trans_point() != 0) {
    set_is_trans_point(from.is_trans_point());
  }
}

void DungeonCandidateTeamReplyInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamReplyInviteRsp::CopyFrom(const DungeonCandidateTeamReplyInviteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamReplyInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamReplyInviteRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamReplyInviteRsp::Swap(DungeonCandidateTeamReplyInviteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamReplyInviteRsp::InternalSwap(DungeonCandidateTeamReplyInviteRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(is_trans_point_, other->is_trans_point_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamReplyInviteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamReplyInviteRsp

// bool is_trans_point = 4;
void DungeonCandidateTeamReplyInviteRsp::clear_is_trans_point() {
  is_trans_point_ = false;
}
bool DungeonCandidateTeamReplyInviteRsp::is_trans_point() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteRsp.is_trans_point)
  return is_trans_point_;
}
void DungeonCandidateTeamReplyInviteRsp::set_is_trans_point(bool value) {
  
  is_trans_point_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteRsp.is_trans_point)
}

// int32 retcode = 2;
void DungeonCandidateTeamReplyInviteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamReplyInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamReplyInviteRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamReplyInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamReplyInviteRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamSetReadyReq::kIsReadyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamSetReadyReq::DungeonCandidateTeamSetReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamSetReadyReq)
}
DungeonCandidateTeamSetReadyReq::DungeonCandidateTeamSetReadyReq(const DungeonCandidateTeamSetReadyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_ready_ = from.is_ready_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamSetReadyReq)
}

void DungeonCandidateTeamSetReadyReq::SharedCtor() {
  is_ready_ = false;
  _cached_size_ = 0;
}

DungeonCandidateTeamSetReadyReq::~DungeonCandidateTeamSetReadyReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamSetReadyReq)
  SharedDtor();
}

void DungeonCandidateTeamSetReadyReq::SharedDtor() {
}

void DungeonCandidateTeamSetReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamSetReadyReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamSetReadyReq& DungeonCandidateTeamSetReadyReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamSetReadyReq* DungeonCandidateTeamSetReadyReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamSetReadyReq* n = new DungeonCandidateTeamSetReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamSetReadyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_ready_ = false;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamSetReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamSetReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_ready = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_ready_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamSetReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamSetReadyReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamSetReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ready = 15;
  if (this->is_ready() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_ready(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamSetReadyReq)
}

::google::protobuf::uint8* DungeonCandidateTeamSetReadyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamSetReadyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_ready = 15;
  if (this->is_ready() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_ready(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamSetReadyReq)
  return target;
}

size_t DungeonCandidateTeamSetReadyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamSetReadyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_ready = 15;
  if (this->is_ready() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamSetReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamSetReadyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamSetReadyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamSetReadyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamSetReadyReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamSetReadyReq::MergeFrom(const DungeonCandidateTeamSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamSetReadyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_ready() != 0) {
    set_is_ready(from.is_ready());
  }
}

void DungeonCandidateTeamSetReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamSetReadyReq::CopyFrom(const DungeonCandidateTeamSetReadyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamSetReadyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamSetReadyReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamSetReadyReq::Swap(DungeonCandidateTeamSetReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamSetReadyReq::InternalSwap(DungeonCandidateTeamSetReadyReq* other) {
  using std::swap;
  swap(is_ready_, other->is_ready_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamSetReadyReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamSetReadyReq

// bool is_ready = 15;
void DungeonCandidateTeamSetReadyReq::clear_is_ready() {
  is_ready_ = false;
}
bool DungeonCandidateTeamSetReadyReq::is_ready() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetReadyReq.is_ready)
  return is_ready_;
}
void DungeonCandidateTeamSetReadyReq::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetReadyReq.is_ready)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamSetReadyRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamSetReadyRsp::DungeonCandidateTeamSetReadyRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamSetReadyRsp)
}
DungeonCandidateTeamSetReadyRsp::DungeonCandidateTeamSetReadyRsp(const DungeonCandidateTeamSetReadyRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamSetReadyRsp)
}

void DungeonCandidateTeamSetReadyRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamSetReadyRsp::~DungeonCandidateTeamSetReadyRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamSetReadyRsp)
  SharedDtor();
}

void DungeonCandidateTeamSetReadyRsp::SharedDtor() {
}

void DungeonCandidateTeamSetReadyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamSetReadyRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamSetReadyRsp& DungeonCandidateTeamSetReadyRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamSetReadyRsp* DungeonCandidateTeamSetReadyRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamSetReadyRsp* n = new DungeonCandidateTeamSetReadyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamSetReadyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamSetReadyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamSetReadyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamSetReadyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamSetReadyRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamSetReadyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamSetReadyRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamSetReadyRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamSetReadyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamSetReadyRsp)
  return target;
}

size_t DungeonCandidateTeamSetReadyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamSetReadyRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 12;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamSetReadyRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamSetReadyRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamSetReadyRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamSetReadyRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamSetReadyRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamSetReadyRsp::MergeFrom(const DungeonCandidateTeamSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamSetReadyRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamSetReadyRsp::CopyFrom(const DungeonCandidateTeamSetReadyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamSetReadyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamSetReadyRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamSetReadyRsp::Swap(DungeonCandidateTeamSetReadyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamSetReadyRsp::InternalSwap(DungeonCandidateTeamSetReadyRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamSetReadyRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamSetReadyRsp

// int32 retcode = 12;
void DungeonCandidateTeamSetReadyRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamSetReadyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetReadyRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamSetReadyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetReadyRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamChangeAvatarReq::kAvatarGuidListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamChangeAvatarReq::DungeonCandidateTeamChangeAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamChangeAvatarReq)
}
DungeonCandidateTeamChangeAvatarReq::DungeonCandidateTeamChangeAvatarReq(const DungeonCandidateTeamChangeAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      avatar_guid_list_(from.avatar_guid_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamChangeAvatarReq)
}

void DungeonCandidateTeamChangeAvatarReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonCandidateTeamChangeAvatarReq::~DungeonCandidateTeamChangeAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamChangeAvatarReq)
  SharedDtor();
}

void DungeonCandidateTeamChangeAvatarReq::SharedDtor() {
}

void DungeonCandidateTeamChangeAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamChangeAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamChangeAvatarReq& DungeonCandidateTeamChangeAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamChangeAvatarReq* DungeonCandidateTeamChangeAvatarReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamChangeAvatarReq* n = new DungeonCandidateTeamChangeAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamChangeAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avatar_guid_list_.Clear();
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamChangeAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamChangeAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 avatar_guid_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_avatar_guid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 42u, input, this->mutable_avatar_guid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamChangeAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamChangeAvatarReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamChangeAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 5;
  if (this->avatar_guid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _avatar_guid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->avatar_guid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->avatar_guid_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamChangeAvatarReq)
}

::google::protobuf::uint8* DungeonCandidateTeamChangeAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamChangeAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 avatar_guid_list = 5;
  if (this->avatar_guid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _avatar_guid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->avatar_guid_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamChangeAvatarReq)
  return target;
}

size_t DungeonCandidateTeamChangeAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamChangeAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint64 avatar_guid_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->avatar_guid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _avatar_guid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamChangeAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamChangeAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamChangeAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamChangeAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamChangeAvatarReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamChangeAvatarReq::MergeFrom(const DungeonCandidateTeamChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avatar_guid_list_.MergeFrom(from.avatar_guid_list_);
}

void DungeonCandidateTeamChangeAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamChangeAvatarReq::CopyFrom(const DungeonCandidateTeamChangeAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamChangeAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamChangeAvatarReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamChangeAvatarReq::Swap(DungeonCandidateTeamChangeAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamChangeAvatarReq::InternalSwap(DungeonCandidateTeamChangeAvatarReq* other) {
  using std::swap;
  avatar_guid_list_.InternalSwap(&other->avatar_guid_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamChangeAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamChangeAvatarReq

// repeated uint64 avatar_guid_list = 5;
int DungeonCandidateTeamChangeAvatarReq::avatar_guid_list_size() const {
  return avatar_guid_list_.size();
}
void DungeonCandidateTeamChangeAvatarReq::clear_avatar_guid_list() {
  avatar_guid_list_.Clear();
}
::google::protobuf::uint64 DungeonCandidateTeamChangeAvatarReq::avatar_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return avatar_guid_list_.Get(index);
}
void DungeonCandidateTeamChangeAvatarReq::set_avatar_guid_list(int index, ::google::protobuf::uint64 value) {
  avatar_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
}
void DungeonCandidateTeamChangeAvatarReq::add_avatar_guid_list(::google::protobuf::uint64 value) {
  avatar_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DungeonCandidateTeamChangeAvatarReq::avatar_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return avatar_guid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DungeonCandidateTeamChangeAvatarReq::mutable_avatar_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.DungeonCandidateTeamChangeAvatarReq.avatar_guid_list)
  return &avatar_guid_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamChangeAvatarRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamChangeAvatarRsp::DungeonCandidateTeamChangeAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamChangeAvatarRsp)
}
DungeonCandidateTeamChangeAvatarRsp::DungeonCandidateTeamChangeAvatarRsp(const DungeonCandidateTeamChangeAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamChangeAvatarRsp)
}

void DungeonCandidateTeamChangeAvatarRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamChangeAvatarRsp::~DungeonCandidateTeamChangeAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamChangeAvatarRsp)
  SharedDtor();
}

void DungeonCandidateTeamChangeAvatarRsp::SharedDtor() {
}

void DungeonCandidateTeamChangeAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamChangeAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamChangeAvatarRsp& DungeonCandidateTeamChangeAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamChangeAvatarRsp* DungeonCandidateTeamChangeAvatarRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamChangeAvatarRsp* n = new DungeonCandidateTeamChangeAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamChangeAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamChangeAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamChangeAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamChangeAvatarRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamChangeAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamChangeAvatarRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamChangeAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamChangeAvatarRsp)
  return target;
}

size_t DungeonCandidateTeamChangeAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamChangeAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamChangeAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamChangeAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamChangeAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamChangeAvatarRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamChangeAvatarRsp::MergeFrom(const DungeonCandidateTeamChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamChangeAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamChangeAvatarRsp::CopyFrom(const DungeonCandidateTeamChangeAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamChangeAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamChangeAvatarRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamChangeAvatarRsp::Swap(DungeonCandidateTeamChangeAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamChangeAvatarRsp::InternalSwap(DungeonCandidateTeamChangeAvatarRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamChangeAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamChangeAvatarRsp

// int32 retcode = 4;
void DungeonCandidateTeamChangeAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamChangeAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamChangeAvatarRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamChangeAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamChangeAvatarRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DailyDungeonEntryInfo::kDungeonEntryConfigIdFieldNumber;
const int DailyDungeonEntryInfo::kDungeonEntryIdFieldNumber;
const int DailyDungeonEntryInfo::kRecommendDungeonEntryInfoFieldNumber;
const int DailyDungeonEntryInfo::kRecommendDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DailyDungeonEntryInfo::DailyDungeonEntryInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DailyDungeonEntryInfo)
}
DailyDungeonEntryInfo::DailyDungeonEntryInfo(const DailyDungeonEntryInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_recommend_dungeon_entry_info()) {
    recommend_dungeon_entry_info_ = new ::proto::DungeonEntryInfo(*from.recommend_dungeon_entry_info_);
  } else {
    recommend_dungeon_entry_info_ = NULL;
  }
  ::memcpy(&dungeon_entry_id_, &from.dungeon_entry_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_entry_config_id_) -
    reinterpret_cast<char*>(&dungeon_entry_id_)) + sizeof(dungeon_entry_config_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DailyDungeonEntryInfo)
}

void DailyDungeonEntryInfo::SharedCtor() {
  ::memset(&recommend_dungeon_entry_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_entry_config_id_) -
      reinterpret_cast<char*>(&recommend_dungeon_entry_info_)) + sizeof(dungeon_entry_config_id_));
  _cached_size_ = 0;
}

DailyDungeonEntryInfo::~DailyDungeonEntryInfo() {
  // @@protoc_insertion_point(destructor:proto.DailyDungeonEntryInfo)
  SharedDtor();
}

void DailyDungeonEntryInfo::SharedDtor() {
  if (this != internal_default_instance()) delete recommend_dungeon_entry_info_;
}

void DailyDungeonEntryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyDungeonEntryInfo::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DailyDungeonEntryInfo& DailyDungeonEntryInfo::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DailyDungeonEntryInfo* DailyDungeonEntryInfo::New(::google::protobuf::Arena* arena) const {
  DailyDungeonEntryInfo* n = new DailyDungeonEntryInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DailyDungeonEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DailyDungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && recommend_dungeon_entry_info_ != NULL) {
    delete recommend_dungeon_entry_info_;
  }
  recommend_dungeon_entry_info_ = NULL;
  ::memset(&dungeon_entry_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_entry_config_id_) -
      reinterpret_cast<char*>(&dungeon_entry_id_)) + sizeof(dungeon_entry_config_id_));
  _internal_metadata_.Clear();
}

bool DailyDungeonEntryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DailyDungeonEntryInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.DungeonEntryInfo recommend_dungeon_entry_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recommend_dungeon_entry_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recommend_dungeon_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recommend_dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_entry_config_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_entry_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_entry_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_entry_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DailyDungeonEntryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DailyDungeonEntryInfo)
  return false;
#undef DO_
}

void DailyDungeonEntryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DailyDungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonEntryInfo recommend_dungeon_entry_info = 1;
  if (this->has_recommend_dungeon_entry_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->recommend_dungeon_entry_info_, output);
  }

  // uint32 recommend_dungeon_id = 4;
  if (this->recommend_dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recommend_dungeon_id(), output);
  }

  // uint32 dungeon_entry_config_id = 12;
  if (this->dungeon_entry_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dungeon_entry_config_id(), output);
  }

  // uint32 dungeon_entry_id = 15;
  if (this->dungeon_entry_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dungeon_entry_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DailyDungeonEntryInfo)
}

::google::protobuf::uint8* DailyDungeonEntryInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DailyDungeonEntryInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.DungeonEntryInfo recommend_dungeon_entry_info = 1;
  if (this->has_recommend_dungeon_entry_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->recommend_dungeon_entry_info_, deterministic, target);
  }

  // uint32 recommend_dungeon_id = 4;
  if (this->recommend_dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->recommend_dungeon_id(), target);
  }

  // uint32 dungeon_entry_config_id = 12;
  if (this->dungeon_entry_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->dungeon_entry_config_id(), target);
  }

  // uint32 dungeon_entry_id = 15;
  if (this->dungeon_entry_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dungeon_entry_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DailyDungeonEntryInfo)
  return target;
}

size_t DailyDungeonEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DailyDungeonEntryInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.DungeonEntryInfo recommend_dungeon_entry_info = 1;
  if (this->has_recommend_dungeon_entry_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->recommend_dungeon_entry_info_);
  }

  // uint32 dungeon_entry_id = 15;
  if (this->dungeon_entry_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_entry_id());
  }

  // uint32 recommend_dungeon_id = 4;
  if (this->recommend_dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recommend_dungeon_id());
  }

  // uint32 dungeon_entry_config_id = 12;
  if (this->dungeon_entry_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_entry_config_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyDungeonEntryInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DailyDungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DailyDungeonEntryInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DailyDungeonEntryInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DailyDungeonEntryInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DailyDungeonEntryInfo)
    MergeFrom(*source);
  }
}

void DailyDungeonEntryInfo::MergeFrom(const DailyDungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DailyDungeonEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_recommend_dungeon_entry_info()) {
    mutable_recommend_dungeon_entry_info()->::proto::DungeonEntryInfo::MergeFrom(from.recommend_dungeon_entry_info());
  }
  if (from.dungeon_entry_id() != 0) {
    set_dungeon_entry_id(from.dungeon_entry_id());
  }
  if (from.recommend_dungeon_id() != 0) {
    set_recommend_dungeon_id(from.recommend_dungeon_id());
  }
  if (from.dungeon_entry_config_id() != 0) {
    set_dungeon_entry_config_id(from.dungeon_entry_config_id());
  }
}

void DailyDungeonEntryInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DailyDungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyDungeonEntryInfo::CopyFrom(const DailyDungeonEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DailyDungeonEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyDungeonEntryInfo::IsInitialized() const {
  return true;
}

void DailyDungeonEntryInfo::Swap(DailyDungeonEntryInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DailyDungeonEntryInfo::InternalSwap(DailyDungeonEntryInfo* other) {
  using std::swap;
  swap(recommend_dungeon_entry_info_, other->recommend_dungeon_entry_info_);
  swap(dungeon_entry_id_, other->dungeon_entry_id_);
  swap(recommend_dungeon_id_, other->recommend_dungeon_id_);
  swap(dungeon_entry_config_id_, other->dungeon_entry_config_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DailyDungeonEntryInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DailyDungeonEntryInfo

// uint32 dungeon_entry_config_id = 12;
void DailyDungeonEntryInfo::clear_dungeon_entry_config_id() {
  dungeon_entry_config_id_ = 0u;
}
::google::protobuf::uint32 DailyDungeonEntryInfo::dungeon_entry_config_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.dungeon_entry_config_id)
  return dungeon_entry_config_id_;
}
void DailyDungeonEntryInfo::set_dungeon_entry_config_id(::google::protobuf::uint32 value) {
  
  dungeon_entry_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.dungeon_entry_config_id)
}

// uint32 dungeon_entry_id = 15;
void DailyDungeonEntryInfo::clear_dungeon_entry_id() {
  dungeon_entry_id_ = 0u;
}
::google::protobuf::uint32 DailyDungeonEntryInfo::dungeon_entry_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.dungeon_entry_id)
  return dungeon_entry_id_;
}
void DailyDungeonEntryInfo::set_dungeon_entry_id(::google::protobuf::uint32 value) {
  
  dungeon_entry_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.dungeon_entry_id)
}

// .proto.DungeonEntryInfo recommend_dungeon_entry_info = 1;
bool DailyDungeonEntryInfo::has_recommend_dungeon_entry_info() const {
  return this != internal_default_instance() && recommend_dungeon_entry_info_ != NULL;
}
void DailyDungeonEntryInfo::clear_recommend_dungeon_entry_info() {
  if (GetArenaNoVirtual() == NULL && recommend_dungeon_entry_info_ != NULL) delete recommend_dungeon_entry_info_;
  recommend_dungeon_entry_info_ = NULL;
}
const ::proto::DungeonEntryInfo& DailyDungeonEntryInfo::recommend_dungeon_entry_info() const {
  const ::proto::DungeonEntryInfo* p = recommend_dungeon_entry_info_;
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::DungeonEntryInfo*>(
      &::proto::_DungeonEntryInfo_default_instance_);
}
::proto::DungeonEntryInfo* DailyDungeonEntryInfo::mutable_recommend_dungeon_entry_info() {
  
  if (recommend_dungeon_entry_info_ == NULL) {
    recommend_dungeon_entry_info_ = new ::proto::DungeonEntryInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
  return recommend_dungeon_entry_info_;
}
::proto::DungeonEntryInfo* DailyDungeonEntryInfo::release_recommend_dungeon_entry_info() {
  // @@protoc_insertion_point(field_release:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
  
  ::proto::DungeonEntryInfo* temp = recommend_dungeon_entry_info_;
  recommend_dungeon_entry_info_ = NULL;
  return temp;
}
void DailyDungeonEntryInfo::set_allocated_recommend_dungeon_entry_info(::proto::DungeonEntryInfo* recommend_dungeon_entry_info) {
  delete recommend_dungeon_entry_info_;
  recommend_dungeon_entry_info_ = recommend_dungeon_entry_info;
  if (recommend_dungeon_entry_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.DailyDungeonEntryInfo.recommend_dungeon_entry_info)
}

// uint32 recommend_dungeon_id = 4;
void DailyDungeonEntryInfo::clear_recommend_dungeon_id() {
  recommend_dungeon_id_ = 0u;
}
::google::protobuf::uint32 DailyDungeonEntryInfo::recommend_dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DailyDungeonEntryInfo.recommend_dungeon_id)
  return recommend_dungeon_id_;
}
void DailyDungeonEntryInfo::set_recommend_dungeon_id(::google::protobuf::uint32 value) {
  
  recommend_dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DailyDungeonEntryInfo.recommend_dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDailyDungeonEntryInfoReq::kSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDailyDungeonEntryInfoReq::GetDailyDungeonEntryInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetDailyDungeonEntryInfoReq)
}
GetDailyDungeonEntryInfoReq::GetDailyDungeonEntryInfoReq(const GetDailyDungeonEntryInfoReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GetDailyDungeonEntryInfoReq)
}

void GetDailyDungeonEntryInfoReq::SharedCtor() {
  scene_id_ = 0u;
  _cached_size_ = 0;
}

GetDailyDungeonEntryInfoReq::~GetDailyDungeonEntryInfoReq() {
  // @@protoc_insertion_point(destructor:proto.GetDailyDungeonEntryInfoReq)
  SharedDtor();
}

void GetDailyDungeonEntryInfoReq::SharedDtor() {
}

void GetDailyDungeonEntryInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyDungeonEntryInfoReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDailyDungeonEntryInfoReq& GetDailyDungeonEntryInfoReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDailyDungeonEntryInfoReq* GetDailyDungeonEntryInfoReq::New(::google::protobuf::Arena* arena) const {
  GetDailyDungeonEntryInfoReq* n = new GetDailyDungeonEntryInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDailyDungeonEntryInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetDailyDungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GetDailyDungeonEntryInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetDailyDungeonEntryInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 scene_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetDailyDungeonEntryInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetDailyDungeonEntryInfoReq)
  return false;
#undef DO_
}

void GetDailyDungeonEntryInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetDailyDungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 15;
  if (this->scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->scene_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetDailyDungeonEntryInfoReq)
}

::google::protobuf::uint8* GetDailyDungeonEntryInfoReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetDailyDungeonEntryInfoReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 15;
  if (this->scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->scene_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetDailyDungeonEntryInfoReq)
  return target;
}

size_t GetDailyDungeonEntryInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetDailyDungeonEntryInfoReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 scene_id = 15;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyDungeonEntryInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetDailyDungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDailyDungeonEntryInfoReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDailyDungeonEntryInfoReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetDailyDungeonEntryInfoReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetDailyDungeonEntryInfoReq)
    MergeFrom(*source);
  }
}

void GetDailyDungeonEntryInfoReq::MergeFrom(const GetDailyDungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetDailyDungeonEntryInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
}

void GetDailyDungeonEntryInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetDailyDungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyDungeonEntryInfoReq::CopyFrom(const GetDailyDungeonEntryInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetDailyDungeonEntryInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyDungeonEntryInfoReq::IsInitialized() const {
  return true;
}

void GetDailyDungeonEntryInfoReq::Swap(GetDailyDungeonEntryInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDailyDungeonEntryInfoReq::InternalSwap(GetDailyDungeonEntryInfoReq* other) {
  using std::swap;
  swap(scene_id_, other->scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDailyDungeonEntryInfoReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDailyDungeonEntryInfoReq

// uint32 scene_id = 15;
void GetDailyDungeonEntryInfoReq::clear_scene_id() {
  scene_id_ = 0u;
}
::google::protobuf::uint32 GetDailyDungeonEntryInfoReq::scene_id() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoReq.scene_id)
  return scene_id_;
}
void GetDailyDungeonEntryInfoReq::set_scene_id(::google::protobuf::uint32 value) {
  
  scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetDailyDungeonEntryInfoReq.scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDailyDungeonEntryInfoRsp::kDailyDungeonInfoListFieldNumber;
const int GetDailyDungeonEntryInfoRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDailyDungeonEntryInfoRsp::GetDailyDungeonEntryInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetDailyDungeonEntryInfoRsp)
}
GetDailyDungeonEntryInfoRsp::GetDailyDungeonEntryInfoRsp(const GetDailyDungeonEntryInfoRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      daily_dungeon_info_list_(from.daily_dungeon_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.GetDailyDungeonEntryInfoRsp)
}

void GetDailyDungeonEntryInfoRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

GetDailyDungeonEntryInfoRsp::~GetDailyDungeonEntryInfoRsp() {
  // @@protoc_insertion_point(destructor:proto.GetDailyDungeonEntryInfoRsp)
  SharedDtor();
}

void GetDailyDungeonEntryInfoRsp::SharedDtor() {
}

void GetDailyDungeonEntryInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetDailyDungeonEntryInfoRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDailyDungeonEntryInfoRsp& GetDailyDungeonEntryInfoRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetDailyDungeonEntryInfoRsp* GetDailyDungeonEntryInfoRsp::New(::google::protobuf::Arena* arena) const {
  GetDailyDungeonEntryInfoRsp* n = new GetDailyDungeonEntryInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetDailyDungeonEntryInfoRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetDailyDungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  daily_dungeon_info_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool GetDailyDungeonEntryInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetDailyDungeonEntryInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily_dungeon_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetDailyDungeonEntryInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetDailyDungeonEntryInfoRsp)
  return false;
#undef DO_
}

void GetDailyDungeonEntryInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetDailyDungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->daily_dungeon_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily_dungeon_info_list(static_cast<int>(i)), output);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetDailyDungeonEntryInfoRsp)
}

::google::protobuf::uint8* GetDailyDungeonEntryInfoRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetDailyDungeonEntryInfoRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->daily_dungeon_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->daily_dungeon_info_list(static_cast<int>(i)), deterministic, target);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetDailyDungeonEntryInfoRsp)
  return target;
}

size_t GetDailyDungeonEntryInfoRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetDailyDungeonEntryInfoRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->daily_dungeon_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_dungeon_info_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetDailyDungeonEntryInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetDailyDungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDailyDungeonEntryInfoRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDailyDungeonEntryInfoRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetDailyDungeonEntryInfoRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetDailyDungeonEntryInfoRsp)
    MergeFrom(*source);
  }
}

void GetDailyDungeonEntryInfoRsp::MergeFrom(const GetDailyDungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetDailyDungeonEntryInfoRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  daily_dungeon_info_list_.MergeFrom(from.daily_dungeon_info_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetDailyDungeonEntryInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetDailyDungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDailyDungeonEntryInfoRsp::CopyFrom(const GetDailyDungeonEntryInfoRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetDailyDungeonEntryInfoRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDailyDungeonEntryInfoRsp::IsInitialized() const {
  return true;
}

void GetDailyDungeonEntryInfoRsp::Swap(GetDailyDungeonEntryInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDailyDungeonEntryInfoRsp::InternalSwap(GetDailyDungeonEntryInfoRsp* other) {
  using std::swap;
  daily_dungeon_info_list_.InternalSwap(&other->daily_dungeon_info_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetDailyDungeonEntryInfoRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetDailyDungeonEntryInfoRsp

// repeated .proto.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
int GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list_size() const {
  return daily_dungeon_info_list_.size();
}
void GetDailyDungeonEntryInfoRsp::clear_daily_dungeon_info_list() {
  daily_dungeon_info_list_.Clear();
}
const ::proto::DailyDungeonEntryInfo& GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Get(index);
}
::proto::DailyDungeonEntryInfo* GetDailyDungeonEntryInfoRsp::mutable_daily_dungeon_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Mutable(index);
}
::proto::DailyDungeonEntryInfo* GetDailyDungeonEntryInfoRsp::add_daily_dungeon_info_list() {
  // @@protoc_insertion_point(field_add:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >*
GetDailyDungeonEntryInfoRsp::mutable_daily_dungeon_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return &daily_dungeon_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DailyDungeonEntryInfo >&
GetDailyDungeonEntryInfoRsp::daily_dungeon_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GetDailyDungeonEntryInfoRsp.daily_dungeon_info_list)
  return daily_dungeon_info_list_;
}

// int32 retcode = 14;
void GetDailyDungeonEntryInfoRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetDailyDungeonEntryInfoRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyDungeonEntryInfoRsp.retcode)
  return retcode_;
}
void GetDailyDungeonEntryInfoRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetDailyDungeonEntryInfoRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonSlipRevivePointActivateReq::kSlipRevivePointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonSlipRevivePointActivateReq::DungeonSlipRevivePointActivateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonSlipRevivePointActivateReq)
}
DungeonSlipRevivePointActivateReq::DungeonSlipRevivePointActivateReq(const DungeonSlipRevivePointActivateReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slip_revive_point_id_ = from.slip_revive_point_id_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonSlipRevivePointActivateReq)
}

void DungeonSlipRevivePointActivateReq::SharedCtor() {
  slip_revive_point_id_ = 0u;
  _cached_size_ = 0;
}

DungeonSlipRevivePointActivateReq::~DungeonSlipRevivePointActivateReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonSlipRevivePointActivateReq)
  SharedDtor();
}

void DungeonSlipRevivePointActivateReq::SharedDtor() {
}

void DungeonSlipRevivePointActivateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSlipRevivePointActivateReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonSlipRevivePointActivateReq& DungeonSlipRevivePointActivateReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonSlipRevivePointActivateReq* DungeonSlipRevivePointActivateReq::New(::google::protobuf::Arena* arena) const {
  DungeonSlipRevivePointActivateReq* n = new DungeonSlipRevivePointActivateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonSlipRevivePointActivateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonSlipRevivePointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slip_revive_point_id_ = 0u;
  _internal_metadata_.Clear();
}

bool DungeonSlipRevivePointActivateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonSlipRevivePointActivateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 slip_revive_point_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slip_revive_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonSlipRevivePointActivateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonSlipRevivePointActivateReq)
  return false;
#undef DO_
}

void DungeonSlipRevivePointActivateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonSlipRevivePointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slip_revive_point_id = 9;
  if (this->slip_revive_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->slip_revive_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonSlipRevivePointActivateReq)
}

::google::protobuf::uint8* DungeonSlipRevivePointActivateReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonSlipRevivePointActivateReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 slip_revive_point_id = 9;
  if (this->slip_revive_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->slip_revive_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonSlipRevivePointActivateReq)
  return target;
}

size_t DungeonSlipRevivePointActivateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonSlipRevivePointActivateReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 slip_revive_point_id = 9;
  if (this->slip_revive_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slip_revive_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSlipRevivePointActivateReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonSlipRevivePointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonSlipRevivePointActivateReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonSlipRevivePointActivateReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonSlipRevivePointActivateReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonSlipRevivePointActivateReq)
    MergeFrom(*source);
  }
}

void DungeonSlipRevivePointActivateReq::MergeFrom(const DungeonSlipRevivePointActivateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonSlipRevivePointActivateReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slip_revive_point_id() != 0) {
    set_slip_revive_point_id(from.slip_revive_point_id());
  }
}

void DungeonSlipRevivePointActivateReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonSlipRevivePointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSlipRevivePointActivateReq::CopyFrom(const DungeonSlipRevivePointActivateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonSlipRevivePointActivateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSlipRevivePointActivateReq::IsInitialized() const {
  return true;
}

void DungeonSlipRevivePointActivateReq::Swap(DungeonSlipRevivePointActivateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonSlipRevivePointActivateReq::InternalSwap(DungeonSlipRevivePointActivateReq* other) {
  using std::swap;
  swap(slip_revive_point_id_, other->slip_revive_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonSlipRevivePointActivateReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonSlipRevivePointActivateReq

// uint32 slip_revive_point_id = 9;
void DungeonSlipRevivePointActivateReq::clear_slip_revive_point_id() {
  slip_revive_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonSlipRevivePointActivateReq::slip_revive_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateReq.slip_revive_point_id)
  return slip_revive_point_id_;
}
void DungeonSlipRevivePointActivateReq::set_slip_revive_point_id(::google::protobuf::uint32 value) {
  
  slip_revive_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateReq.slip_revive_point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonSlipRevivePointActivateRsp::kSlipRevivePointIdFieldNumber;
const int DungeonSlipRevivePointActivateRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonSlipRevivePointActivateRsp::DungeonSlipRevivePointActivateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonSlipRevivePointActivateRsp)
}
DungeonSlipRevivePointActivateRsp::DungeonSlipRevivePointActivateRsp(const DungeonSlipRevivePointActivateRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&slip_revive_point_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(slip_revive_point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonSlipRevivePointActivateRsp)
}

void DungeonSlipRevivePointActivateRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip_revive_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(slip_revive_point_id_));
  _cached_size_ = 0;
}

DungeonSlipRevivePointActivateRsp::~DungeonSlipRevivePointActivateRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonSlipRevivePointActivateRsp)
  SharedDtor();
}

void DungeonSlipRevivePointActivateRsp::SharedDtor() {
}

void DungeonSlipRevivePointActivateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonSlipRevivePointActivateRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonSlipRevivePointActivateRsp& DungeonSlipRevivePointActivateRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonSlipRevivePointActivateRsp* DungeonSlipRevivePointActivateRsp::New(::google::protobuf::Arena* arena) const {
  DungeonSlipRevivePointActivateRsp* n = new DungeonSlipRevivePointActivateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonSlipRevivePointActivateRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonSlipRevivePointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip_revive_point_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(slip_revive_point_id_));
  _internal_metadata_.Clear();
}

bool DungeonSlipRevivePointActivateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonSlipRevivePointActivateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 slip_revive_point_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slip_revive_point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonSlipRevivePointActivateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonSlipRevivePointActivateRsp)
  return false;
#undef DO_
}

void DungeonSlipRevivePointActivateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonSlipRevivePointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // uint32 slip_revive_point_id = 14;
  if (this->slip_revive_point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->slip_revive_point_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonSlipRevivePointActivateRsp)
}

::google::protobuf::uint8* DungeonSlipRevivePointActivateRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonSlipRevivePointActivateRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // uint32 slip_revive_point_id = 14;
  if (this->slip_revive_point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->slip_revive_point_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonSlipRevivePointActivateRsp)
  return target;
}

size_t DungeonSlipRevivePointActivateRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonSlipRevivePointActivateRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 slip_revive_point_id = 14;
  if (this->slip_revive_point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slip_revive_point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonSlipRevivePointActivateRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonSlipRevivePointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonSlipRevivePointActivateRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonSlipRevivePointActivateRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonSlipRevivePointActivateRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonSlipRevivePointActivateRsp)
    MergeFrom(*source);
  }
}

void DungeonSlipRevivePointActivateRsp::MergeFrom(const DungeonSlipRevivePointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonSlipRevivePointActivateRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.slip_revive_point_id() != 0) {
    set_slip_revive_point_id(from.slip_revive_point_id());
  }
}

void DungeonSlipRevivePointActivateRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonSlipRevivePointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonSlipRevivePointActivateRsp::CopyFrom(const DungeonSlipRevivePointActivateRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonSlipRevivePointActivateRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonSlipRevivePointActivateRsp::IsInitialized() const {
  return true;
}

void DungeonSlipRevivePointActivateRsp::Swap(DungeonSlipRevivePointActivateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonSlipRevivePointActivateRsp::InternalSwap(DungeonSlipRevivePointActivateRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(slip_revive_point_id_, other->slip_revive_point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonSlipRevivePointActivateRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonSlipRevivePointActivateRsp

// uint32 slip_revive_point_id = 14;
void DungeonSlipRevivePointActivateRsp::clear_slip_revive_point_id() {
  slip_revive_point_id_ = 0u;
}
::google::protobuf::uint32 DungeonSlipRevivePointActivateRsp::slip_revive_point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateRsp.slip_revive_point_id)
  return slip_revive_point_id_;
}
void DungeonSlipRevivePointActivateRsp::set_slip_revive_point_id(::google::protobuf::uint32 value) {
  
  slip_revive_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateRsp.slip_revive_point_id)
}

// int32 retcode = 4;
void DungeonSlipRevivePointActivateRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonSlipRevivePointActivateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonSlipRevivePointActivateRsp.retcode)
  return retcode_;
}
void DungeonSlipRevivePointActivateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonSlipRevivePointActivateRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonInterruptChallengeReq::kChallengeIndexFieldNumber;
const int DungeonInterruptChallengeReq::kGroupIdFieldNumber;
const int DungeonInterruptChallengeReq::kChallengeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonInterruptChallengeReq::DungeonInterruptChallengeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonInterruptChallengeReq)
}
DungeonInterruptChallengeReq::DungeonInterruptChallengeReq(const DungeonInterruptChallengeReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&challenge_index_, &from.challenge_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&challenge_index_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonInterruptChallengeReq)
}

void DungeonInterruptChallengeReq::SharedCtor() {
  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(group_id_));
  _cached_size_ = 0;
}

DungeonInterruptChallengeReq::~DungeonInterruptChallengeReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonInterruptChallengeReq)
  SharedDtor();
}

void DungeonInterruptChallengeReq::SharedDtor() {
}

void DungeonInterruptChallengeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonInterruptChallengeReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonInterruptChallengeReq& DungeonInterruptChallengeReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonInterruptChallengeReq* DungeonInterruptChallengeReq::New(::google::protobuf::Arena* arena) const {
  DungeonInterruptChallengeReq* n = new DungeonInterruptChallengeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonInterruptChallengeReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonInterruptChallengeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&challenge_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&challenge_index_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

bool DungeonInterruptChallengeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonInterruptChallengeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 challenge_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_index = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonInterruptChallengeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonInterruptChallengeReq)
  return false;
#undef DO_
}

void DungeonInterruptChallengeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonInterruptChallengeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 11;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->challenge_id(), output);
  }

  // uint32 group_id = 13;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->group_id(), output);
  }

  // uint32 challenge_index = 14;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->challenge_index(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonInterruptChallengeReq)
}

::google::protobuf::uint8* DungeonInterruptChallengeReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonInterruptChallengeReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 challenge_id = 11;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->challenge_id(), target);
  }

  // uint32 group_id = 13;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->group_id(), target);
  }

  // uint32 challenge_index = 14;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->challenge_index(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonInterruptChallengeReq)
  return target;
}

size_t DungeonInterruptChallengeReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonInterruptChallengeReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 challenge_index = 14;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  // uint32 challenge_id = 11;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 group_id = 13;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonInterruptChallengeReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonInterruptChallengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonInterruptChallengeReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonInterruptChallengeReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonInterruptChallengeReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonInterruptChallengeReq)
    MergeFrom(*source);
  }
}

void DungeonInterruptChallengeReq::MergeFrom(const DungeonInterruptChallengeReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonInterruptChallengeReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void DungeonInterruptChallengeReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonInterruptChallengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonInterruptChallengeReq::CopyFrom(const DungeonInterruptChallengeReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonInterruptChallengeReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonInterruptChallengeReq::IsInitialized() const {
  return true;
}

void DungeonInterruptChallengeReq::Swap(DungeonInterruptChallengeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonInterruptChallengeReq::InternalSwap(DungeonInterruptChallengeReq* other) {
  using std::swap;
  swap(challenge_index_, other->challenge_index_);
  swap(challenge_id_, other->challenge_id_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonInterruptChallengeReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonInterruptChallengeReq

// uint32 challenge_index = 14;
void DungeonInterruptChallengeReq::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 DungeonInterruptChallengeReq::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeReq.challenge_index)
  return challenge_index_;
}
void DungeonInterruptChallengeReq::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeReq.challenge_index)
}

// uint32 group_id = 13;
void DungeonInterruptChallengeReq::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 DungeonInterruptChallengeReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeReq.group_id)
  return group_id_;
}
void DungeonInterruptChallengeReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeReq.group_id)
}

// uint32 challenge_id = 11;
void DungeonInterruptChallengeReq::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 DungeonInterruptChallengeReq::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeReq.challenge_id)
  return challenge_id_;
}
void DungeonInterruptChallengeReq::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeReq.challenge_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonInterruptChallengeRsp::kRetcodeFieldNumber;
const int DungeonInterruptChallengeRsp::kChallengeIndexFieldNumber;
const int DungeonInterruptChallengeRsp::kGroupIdFieldNumber;
const int DungeonInterruptChallengeRsp::kChallengeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonInterruptChallengeRsp::DungeonInterruptChallengeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonInterruptChallengeRsp)
}
DungeonInterruptChallengeRsp::DungeonInterruptChallengeRsp(const DungeonInterruptChallengeRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(group_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonInterruptChallengeRsp)
}

void DungeonInterruptChallengeRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(group_id_));
  _cached_size_ = 0;
}

DungeonInterruptChallengeRsp::~DungeonInterruptChallengeRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonInterruptChallengeRsp)
  SharedDtor();
}

void DungeonInterruptChallengeRsp::SharedDtor() {
}

void DungeonInterruptChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonInterruptChallengeRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonInterruptChallengeRsp& DungeonInterruptChallengeRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonInterruptChallengeRsp* DungeonInterruptChallengeRsp::New(::google::protobuf::Arena* arena) const {
  DungeonInterruptChallengeRsp* n = new DungeonInterruptChallengeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonInterruptChallengeRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonInterruptChallengeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(group_id_));
  _internal_metadata_.Clear();
}

bool DungeonInterruptChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonInterruptChallengeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 challenge_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challenge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 group_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonInterruptChallengeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonInterruptChallengeRsp)
  return false;
#undef DO_
}

void DungeonInterruptChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonInterruptChallengeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challenge_index(), output);
  }

  // uint32 challenge_id = 11;
  if (this->challenge_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->challenge_id(), output);
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->group_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonInterruptChallengeRsp)
}

::google::protobuf::uint8* DungeonInterruptChallengeRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonInterruptChallengeRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 1;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challenge_index(), target);
  }

  // uint32 challenge_id = 11;
  if (this->challenge_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->challenge_id(), target);
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->group_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonInterruptChallengeRsp)
  return target;
}

size_t DungeonInterruptChallengeRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonInterruptChallengeRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 1;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 challenge_index = 2;
  if (this->challenge_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_index());
  }

  // uint32 challenge_id = 11;
  if (this->challenge_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->challenge_id());
  }

  // uint32 group_id = 15;
  if (this->group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonInterruptChallengeRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonInterruptChallengeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonInterruptChallengeRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonInterruptChallengeRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonInterruptChallengeRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonInterruptChallengeRsp)
    MergeFrom(*source);
  }
}

void DungeonInterruptChallengeRsp::MergeFrom(const DungeonInterruptChallengeRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonInterruptChallengeRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.challenge_index() != 0) {
    set_challenge_index(from.challenge_index());
  }
  if (from.challenge_id() != 0) {
    set_challenge_id(from.challenge_id());
  }
  if (from.group_id() != 0) {
    set_group_id(from.group_id());
  }
}

void DungeonInterruptChallengeRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonInterruptChallengeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonInterruptChallengeRsp::CopyFrom(const DungeonInterruptChallengeRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonInterruptChallengeRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonInterruptChallengeRsp::IsInitialized() const {
  return true;
}

void DungeonInterruptChallengeRsp::Swap(DungeonInterruptChallengeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonInterruptChallengeRsp::InternalSwap(DungeonInterruptChallengeRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(challenge_index_, other->challenge_index_);
  swap(challenge_id_, other->challenge_id_);
  swap(group_id_, other->group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonInterruptChallengeRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonInterruptChallengeRsp

// int32 retcode = 1;
void DungeonInterruptChallengeRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonInterruptChallengeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.retcode)
  return retcode_;
}
void DungeonInterruptChallengeRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.retcode)
}

// uint32 challenge_index = 2;
void DungeonInterruptChallengeRsp::clear_challenge_index() {
  challenge_index_ = 0u;
}
::google::protobuf::uint32 DungeonInterruptChallengeRsp::challenge_index() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.challenge_index)
  return challenge_index_;
}
void DungeonInterruptChallengeRsp::set_challenge_index(::google::protobuf::uint32 value) {
  
  challenge_index_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.challenge_index)
}

// uint32 group_id = 15;
void DungeonInterruptChallengeRsp::clear_group_id() {
  group_id_ = 0u;
}
::google::protobuf::uint32 DungeonInterruptChallengeRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.group_id)
  return group_id_;
}
void DungeonInterruptChallengeRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.group_id)
}

// uint32 challenge_id = 11;
void DungeonInterruptChallengeRsp::clear_challenge_id() {
  challenge_id_ = 0u;
}
::google::protobuf::uint32 DungeonInterruptChallengeRsp::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonInterruptChallengeRsp.challenge_id)
  return challenge_id_;
}
void DungeonInterruptChallengeRsp::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonInterruptChallengeRsp.challenge_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InteractDailyDungeonInfoNotify::InteractDailyDungeonInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.InteractDailyDungeonInfoNotify)
}
InteractDailyDungeonInfoNotify::InteractDailyDungeonInfoNotify(const InteractDailyDungeonInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.InteractDailyDungeonInfoNotify)
}

void InteractDailyDungeonInfoNotify::SharedCtor() {
  _cached_size_ = 0;
}

InteractDailyDungeonInfoNotify::~InteractDailyDungeonInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.InteractDailyDungeonInfoNotify)
  SharedDtor();
}

void InteractDailyDungeonInfoNotify::SharedDtor() {
}

void InteractDailyDungeonInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InteractDailyDungeonInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InteractDailyDungeonInfoNotify& InteractDailyDungeonInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

InteractDailyDungeonInfoNotify* InteractDailyDungeonInfoNotify::New(::google::protobuf::Arena* arena) const {
  InteractDailyDungeonInfoNotify* n = new InteractDailyDungeonInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InteractDailyDungeonInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.InteractDailyDungeonInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool InteractDailyDungeonInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.InteractDailyDungeonInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.InteractDailyDungeonInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.InteractDailyDungeonInfoNotify)
  return false;
#undef DO_
}

void InteractDailyDungeonInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.InteractDailyDungeonInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.InteractDailyDungeonInfoNotify)
}

::google::protobuf::uint8* InteractDailyDungeonInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.InteractDailyDungeonInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.InteractDailyDungeonInfoNotify)
  return target;
}

size_t InteractDailyDungeonInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.InteractDailyDungeonInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InteractDailyDungeonInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.InteractDailyDungeonInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const InteractDailyDungeonInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InteractDailyDungeonInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.InteractDailyDungeonInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.InteractDailyDungeonInfoNotify)
    MergeFrom(*source);
  }
}

void InteractDailyDungeonInfoNotify::MergeFrom(const InteractDailyDungeonInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.InteractDailyDungeonInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void InteractDailyDungeonInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.InteractDailyDungeonInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractDailyDungeonInfoNotify::CopyFrom(const InteractDailyDungeonInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.InteractDailyDungeonInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractDailyDungeonInfoNotify::IsInitialized() const {
  return true;
}

void InteractDailyDungeonInfoNotify::Swap(InteractDailyDungeonInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InteractDailyDungeonInfoNotify::InternalSwap(InteractDailyDungeonInfoNotify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InteractDailyDungeonInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InteractDailyDungeonInfoNotify

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRestartReq::DungeonRestartReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonRestartReq)
}
DungeonRestartReq::DungeonRestartReq(const DungeonRestartReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DungeonRestartReq)
}

void DungeonRestartReq::SharedCtor() {
  _cached_size_ = 0;
}

DungeonRestartReq::~DungeonRestartReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonRestartReq)
  SharedDtor();
}

void DungeonRestartReq::SharedDtor() {
}

void DungeonRestartReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRestartReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRestartReq& DungeonRestartReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRestartReq* DungeonRestartReq::New(::google::protobuf::Arena* arena) const {
  DungeonRestartReq* n = new DungeonRestartReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRestartReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonRestartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DungeonRestartReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonRestartReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonRestartReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonRestartReq)
  return false;
#undef DO_
}

void DungeonRestartReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonRestartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonRestartReq)
}

::google::protobuf::uint8* DungeonRestartReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonRestartReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonRestartReq)
  return target;
}

size_t DungeonRestartReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonRestartReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRestartReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonRestartReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRestartReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRestartReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonRestartReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonRestartReq)
    MergeFrom(*source);
  }
}

void DungeonRestartReq::MergeFrom(const DungeonRestartReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonRestartReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DungeonRestartReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonRestartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRestartReq::CopyFrom(const DungeonRestartReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonRestartReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRestartReq::IsInitialized() const {
  return true;
}

void DungeonRestartReq::Swap(DungeonRestartReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRestartReq::InternalSwap(DungeonRestartReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRestartReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRestartReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRestartRsp::kDungeonIdFieldNumber;
const int DungeonRestartRsp::kRetcodeFieldNumber;
const int DungeonRestartRsp::kPointIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRestartRsp::DungeonRestartRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonRestartRsp)
}
DungeonRestartRsp::DungeonRestartRsp(const DungeonRestartRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&point_id_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonRestartRsp)
}

void DungeonRestartRsp::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _cached_size_ = 0;
}

DungeonRestartRsp::~DungeonRestartRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonRestartRsp)
  SharedDtor();
}

void DungeonRestartRsp::SharedDtor() {
}

void DungeonRestartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRestartRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRestartRsp& DungeonRestartRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRestartRsp* DungeonRestartRsp::New(::google::protobuf::Arena* arena) const {
  DungeonRestartRsp* n = new DungeonRestartRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRestartRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonRestartRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_id_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(point_id_));
  _internal_metadata_.Clear();
}

bool DungeonRestartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonRestartRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonRestartRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonRestartRsp)
  return false;
#undef DO_
}

void DungeonRestartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonRestartRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->retcode(), output);
  }

  // uint32 point_id = 14;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->point_id(), output);
  }

  // uint32 dungeon_id = 15;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dungeon_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonRestartRsp)
}

::google::protobuf::uint8* DungeonRestartRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonRestartRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->retcode(), target);
  }

  // uint32 point_id = 14;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->point_id(), target);
  }

  // uint32 dungeon_id = 15;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dungeon_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonRestartRsp)
  return target;
}

size_t DungeonRestartRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonRestartRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 15;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 point_id = 14;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRestartRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonRestartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRestartRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRestartRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonRestartRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonRestartRsp)
    MergeFrom(*source);
  }
}

void DungeonRestartRsp::MergeFrom(const DungeonRestartRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonRestartRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
}

void DungeonRestartRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonRestartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRestartRsp::CopyFrom(const DungeonRestartRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonRestartRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRestartRsp::IsInitialized() const {
  return true;
}

void DungeonRestartRsp::Swap(DungeonRestartRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRestartRsp::InternalSwap(DungeonRestartRsp* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(retcode_, other->retcode_);
  swap(point_id_, other->point_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRestartRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRestartRsp

// uint32 dungeon_id = 15;
void DungeonRestartRsp::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonRestartRsp::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartRsp.dungeon_id)
  return dungeon_id_;
}
void DungeonRestartRsp::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartRsp.dungeon_id)
}

// int32 retcode = 9;
void DungeonRestartRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonRestartRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartRsp.retcode)
  return retcode_;
}
void DungeonRestartRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartRsp.retcode)
}

// uint32 point_id = 14;
void DungeonRestartRsp::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonRestartRsp::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartRsp.point_id)
  return point_id_;
}
void DungeonRestartRsp::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartRsp.point_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRestartInviteNotify::kPlayerUidFieldNumber;
const int DungeonRestartInviteNotify::kCdFieldNumber;
const int DungeonRestartInviteNotify::kPointIdFieldNumber;
const int DungeonRestartInviteNotify::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRestartInviteNotify::DungeonRestartInviteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonRestartInviteNotify)
}
DungeonRestartInviteNotify::DungeonRestartInviteNotify(const DungeonRestartInviteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_uid_, &from.player_uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cd_) -
    reinterpret_cast<char*>(&player_uid_)) + sizeof(cd_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonRestartInviteNotify)
}

void DungeonRestartInviteNotify::SharedCtor() {
  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cd_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(cd_));
  _cached_size_ = 0;
}

DungeonRestartInviteNotify::~DungeonRestartInviteNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonRestartInviteNotify)
  SharedDtor();
}

void DungeonRestartInviteNotify::SharedDtor() {
}

void DungeonRestartInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRestartInviteNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRestartInviteNotify& DungeonRestartInviteNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRestartInviteNotify* DungeonRestartInviteNotify::New(::google::protobuf::Arena* arena) const {
  DungeonRestartInviteNotify* n = new DungeonRestartInviteNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRestartInviteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonRestartInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&player_uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cd_) -
      reinterpret_cast<char*>(&player_uid_)) + sizeof(cd_));
  _internal_metadata_.Clear();
}

bool DungeonRestartInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonRestartInviteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 player_uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 point_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cd = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonRestartInviteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonRestartInviteNotify)
  return false;
#undef DO_
}

void DungeonRestartInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonRestartInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 3;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->player_uid(), output);
  }

  // uint32 dungeon_id = 10;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dungeon_id(), output);
  }

  // uint32 point_id = 13;
  if (this->point_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->point_id(), output);
  }

  // uint32 cd = 15;
  if (this->cd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->cd(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonRestartInviteNotify)
}

::google::protobuf::uint8* DungeonRestartInviteNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonRestartInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 player_uid = 3;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->player_uid(), target);
  }

  // uint32 dungeon_id = 10;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dungeon_id(), target);
  }

  // uint32 point_id = 13;
  if (this->point_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->point_id(), target);
  }

  // uint32 cd = 15;
  if (this->cd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->cd(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonRestartInviteNotify)
  return target;
}

size_t DungeonRestartInviteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonRestartInviteNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 player_uid = 3;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  // uint32 dungeon_id = 10;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // uint32 point_id = 13;
  if (this->point_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point_id());
  }

  // uint32 cd = 15;
  if (this->cd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRestartInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonRestartInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRestartInviteNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRestartInviteNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonRestartInviteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonRestartInviteNotify)
    MergeFrom(*source);
  }
}

void DungeonRestartInviteNotify::MergeFrom(const DungeonRestartInviteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonRestartInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.point_id() != 0) {
    set_point_id(from.point_id());
  }
  if (from.cd() != 0) {
    set_cd(from.cd());
  }
}

void DungeonRestartInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonRestartInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRestartInviteNotify::CopyFrom(const DungeonRestartInviteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonRestartInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRestartInviteNotify::IsInitialized() const {
  return true;
}

void DungeonRestartInviteNotify::Swap(DungeonRestartInviteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRestartInviteNotify::InternalSwap(DungeonRestartInviteNotify* other) {
  using std::swap;
  swap(player_uid_, other->player_uid_);
  swap(dungeon_id_, other->dungeon_id_);
  swap(point_id_, other->point_id_);
  swap(cd_, other->cd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRestartInviteNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRestartInviteNotify

// uint32 player_uid = 3;
void DungeonRestartInviteNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonRestartInviteNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.player_uid)
  return player_uid_;
}
void DungeonRestartInviteNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.player_uid)
}

// uint32 cd = 15;
void DungeonRestartInviteNotify::clear_cd() {
  cd_ = 0u;
}
::google::protobuf::uint32 DungeonRestartInviteNotify::cd() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.cd)
  return cd_;
}
void DungeonRestartInviteNotify::set_cd(::google::protobuf::uint32 value) {
  
  cd_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.cd)
}

// uint32 point_id = 13;
void DungeonRestartInviteNotify::clear_point_id() {
  point_id_ = 0u;
}
::google::protobuf::uint32 DungeonRestartInviteNotify::point_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.point_id)
  return point_id_;
}
void DungeonRestartInviteNotify::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.point_id)
}

// uint32 dungeon_id = 10;
void DungeonRestartInviteNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonRestartInviteNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonRestartInviteNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteNotify.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRestartInviteReplyReq::kIsAcceptFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRestartInviteReplyReq::DungeonRestartInviteReplyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonRestartInviteReplyReq)
}
DungeonRestartInviteReplyReq::DungeonRestartInviteReplyReq(const DungeonRestartInviteReplyReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_accept_ = from.is_accept_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonRestartInviteReplyReq)
}

void DungeonRestartInviteReplyReq::SharedCtor() {
  is_accept_ = false;
  _cached_size_ = 0;
}

DungeonRestartInviteReplyReq::~DungeonRestartInviteReplyReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonRestartInviteReplyReq)
  SharedDtor();
}

void DungeonRestartInviteReplyReq::SharedDtor() {
}

void DungeonRestartInviteReplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRestartInviteReplyReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRestartInviteReplyReq& DungeonRestartInviteReplyReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRestartInviteReplyReq* DungeonRestartInviteReplyReq::New(::google::protobuf::Arena* arena) const {
  DungeonRestartInviteReplyReq* n = new DungeonRestartInviteReplyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRestartInviteReplyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonRestartInviteReplyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_accept_ = false;
  _internal_metadata_.Clear();
}

bool DungeonRestartInviteReplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonRestartInviteReplyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_accept = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonRestartInviteReplyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonRestartInviteReplyReq)
  return false;
#undef DO_
}

void DungeonRestartInviteReplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonRestartInviteReplyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 11;
  if (this->is_accept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_accept(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonRestartInviteReplyReq)
}

::google::protobuf::uint8* DungeonRestartInviteReplyReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonRestartInviteReplyReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 11;
  if (this->is_accept() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_accept(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonRestartInviteReplyReq)
  return target;
}

size_t DungeonRestartInviteReplyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonRestartInviteReplyReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_accept = 11;
  if (this->is_accept() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRestartInviteReplyReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonRestartInviteReplyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRestartInviteReplyReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRestartInviteReplyReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonRestartInviteReplyReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonRestartInviteReplyReq)
    MergeFrom(*source);
  }
}

void DungeonRestartInviteReplyReq::MergeFrom(const DungeonRestartInviteReplyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonRestartInviteReplyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_accept() != 0) {
    set_is_accept(from.is_accept());
  }
}

void DungeonRestartInviteReplyReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonRestartInviteReplyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRestartInviteReplyReq::CopyFrom(const DungeonRestartInviteReplyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonRestartInviteReplyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRestartInviteReplyReq::IsInitialized() const {
  return true;
}

void DungeonRestartInviteReplyReq::Swap(DungeonRestartInviteReplyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRestartInviteReplyReq::InternalSwap(DungeonRestartInviteReplyReq* other) {
  using std::swap;
  swap(is_accept_, other->is_accept_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRestartInviteReplyReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRestartInviteReplyReq

// bool is_accept = 11;
void DungeonRestartInviteReplyReq::clear_is_accept() {
  is_accept_ = false;
}
bool DungeonRestartInviteReplyReq::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyReq.is_accept)
  return is_accept_;
}
void DungeonRestartInviteReplyReq::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyReq.is_accept)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRestartInviteReplyRsp::kIsAcceptFieldNumber;
const int DungeonRestartInviteReplyRsp::kIsTransPointFieldNumber;
const int DungeonRestartInviteReplyRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRestartInviteReplyRsp::DungeonRestartInviteReplyRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonRestartInviteReplyRsp)
}
DungeonRestartInviteReplyRsp::DungeonRestartInviteReplyRsp(const DungeonRestartInviteReplyRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_accept_, &from.is_accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&is_accept_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonRestartInviteReplyRsp)
}

void DungeonRestartInviteReplyRsp::SharedCtor() {
  ::memset(&is_accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&is_accept_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

DungeonRestartInviteReplyRsp::~DungeonRestartInviteReplyRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonRestartInviteReplyRsp)
  SharedDtor();
}

void DungeonRestartInviteReplyRsp::SharedDtor() {
}

void DungeonRestartInviteReplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRestartInviteReplyRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRestartInviteReplyRsp& DungeonRestartInviteReplyRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRestartInviteReplyRsp* DungeonRestartInviteReplyRsp::New(::google::protobuf::Arena* arena) const {
  DungeonRestartInviteReplyRsp* n = new DungeonRestartInviteReplyRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRestartInviteReplyRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonRestartInviteReplyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&is_accept_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool DungeonRestartInviteReplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonRestartInviteReplyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_trans_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_trans_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_accept = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonRestartInviteReplyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonRestartInviteReplyRsp)
  return false;
#undef DO_
}

void DungeonRestartInviteReplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonRestartInviteReplyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_trans_point = 1;
  if (this->is_trans_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_trans_point(), output);
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->retcode(), output);
  }

  // bool is_accept = 10;
  if (this->is_accept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_accept(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonRestartInviteReplyRsp)
}

::google::protobuf::uint8* DungeonRestartInviteReplyRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonRestartInviteReplyRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_trans_point = 1;
  if (this->is_trans_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_trans_point(), target);
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->retcode(), target);
  }

  // bool is_accept = 10;
  if (this->is_accept() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_accept(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonRestartInviteReplyRsp)
  return target;
}

size_t DungeonRestartInviteReplyRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonRestartInviteReplyRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_accept = 10;
  if (this->is_accept() != 0) {
    total_size += 1 + 1;
  }

  // bool is_trans_point = 1;
  if (this->is_trans_point() != 0) {
    total_size += 1 + 1;
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRestartInviteReplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonRestartInviteReplyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRestartInviteReplyRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRestartInviteReplyRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonRestartInviteReplyRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonRestartInviteReplyRsp)
    MergeFrom(*source);
  }
}

void DungeonRestartInviteReplyRsp::MergeFrom(const DungeonRestartInviteReplyRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonRestartInviteReplyRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_accept() != 0) {
    set_is_accept(from.is_accept());
  }
  if (from.is_trans_point() != 0) {
    set_is_trans_point(from.is_trans_point());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonRestartInviteReplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonRestartInviteReplyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRestartInviteReplyRsp::CopyFrom(const DungeonRestartInviteReplyRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonRestartInviteReplyRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRestartInviteReplyRsp::IsInitialized() const {
  return true;
}

void DungeonRestartInviteReplyRsp::Swap(DungeonRestartInviteReplyRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRestartInviteReplyRsp::InternalSwap(DungeonRestartInviteReplyRsp* other) {
  using std::swap;
  swap(is_accept_, other->is_accept_);
  swap(is_trans_point_, other->is_trans_point_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRestartInviteReplyRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRestartInviteReplyRsp

// bool is_accept = 10;
void DungeonRestartInviteReplyRsp::clear_is_accept() {
  is_accept_ = false;
}
bool DungeonRestartInviteReplyRsp::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyRsp.is_accept)
  return is_accept_;
}
void DungeonRestartInviteReplyRsp::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyRsp.is_accept)
}

// bool is_trans_point = 1;
void DungeonRestartInviteReplyRsp::clear_is_trans_point() {
  is_trans_point_ = false;
}
bool DungeonRestartInviteReplyRsp::is_trans_point() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyRsp.is_trans_point)
  return is_trans_point_;
}
void DungeonRestartInviteReplyRsp::set_is_trans_point(bool value) {
  
  is_trans_point_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyRsp.is_trans_point)
}

// int32 retcode = 9;
void DungeonRestartInviteReplyRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonRestartInviteReplyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyRsp.retcode)
  return retcode_;
}
void DungeonRestartInviteReplyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRestartInviteReplyNotify::kIsAcceptFieldNumber;
const int DungeonRestartInviteReplyNotify::kPlayerUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRestartInviteReplyNotify::DungeonRestartInviteReplyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonRestartInviteReplyNotify)
}
DungeonRestartInviteReplyNotify::DungeonRestartInviteReplyNotify(const DungeonRestartInviteReplyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_accept_, &from.is_accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_uid_) -
    reinterpret_cast<char*>(&is_accept_)) + sizeof(player_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonRestartInviteReplyNotify)
}

void DungeonRestartInviteReplyNotify::SharedCtor() {
  ::memset(&is_accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&is_accept_)) + sizeof(player_uid_));
  _cached_size_ = 0;
}

DungeonRestartInviteReplyNotify::~DungeonRestartInviteReplyNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonRestartInviteReplyNotify)
  SharedDtor();
}

void DungeonRestartInviteReplyNotify::SharedDtor() {
}

void DungeonRestartInviteReplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRestartInviteReplyNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRestartInviteReplyNotify& DungeonRestartInviteReplyNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRestartInviteReplyNotify* DungeonRestartInviteReplyNotify::New(::google::protobuf::Arena* arena) const {
  DungeonRestartInviteReplyNotify* n = new DungeonRestartInviteReplyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRestartInviteReplyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonRestartInviteReplyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_uid_) -
      reinterpret_cast<char*>(&is_accept_)) + sizeof(player_uid_));
  _internal_metadata_.Clear();
}

bool DungeonRestartInviteReplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonRestartInviteReplyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_accept = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 player_uid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonRestartInviteReplyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonRestartInviteReplyNotify)
  return false;
#undef DO_
}

void DungeonRestartInviteReplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonRestartInviteReplyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 6;
  if (this->is_accept() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_accept(), output);
  }

  // uint32 player_uid = 9;
  if (this->player_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->player_uid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonRestartInviteReplyNotify)
}

::google::protobuf::uint8* DungeonRestartInviteReplyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonRestartInviteReplyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_accept = 6;
  if (this->is_accept() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_accept(), target);
  }

  // uint32 player_uid = 9;
  if (this->player_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->player_uid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonRestartInviteReplyNotify)
  return target;
}

size_t DungeonRestartInviteReplyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonRestartInviteReplyNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_accept = 6;
  if (this->is_accept() != 0) {
    total_size += 1 + 1;
  }

  // uint32 player_uid = 9;
  if (this->player_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->player_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRestartInviteReplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonRestartInviteReplyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRestartInviteReplyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRestartInviteReplyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonRestartInviteReplyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonRestartInviteReplyNotify)
    MergeFrom(*source);
  }
}

void DungeonRestartInviteReplyNotify::MergeFrom(const DungeonRestartInviteReplyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonRestartInviteReplyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_accept() != 0) {
    set_is_accept(from.is_accept());
  }
  if (from.player_uid() != 0) {
    set_player_uid(from.player_uid());
  }
}

void DungeonRestartInviteReplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonRestartInviteReplyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRestartInviteReplyNotify::CopyFrom(const DungeonRestartInviteReplyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonRestartInviteReplyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRestartInviteReplyNotify::IsInitialized() const {
  return true;
}

void DungeonRestartInviteReplyNotify::Swap(DungeonRestartInviteReplyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRestartInviteReplyNotify::InternalSwap(DungeonRestartInviteReplyNotify* other) {
  using std::swap;
  swap(is_accept_, other->is_accept_);
  swap(player_uid_, other->player_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRestartInviteReplyNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRestartInviteReplyNotify

// bool is_accept = 6;
void DungeonRestartInviteReplyNotify::clear_is_accept() {
  is_accept_ = false;
}
bool DungeonRestartInviteReplyNotify::is_accept() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyNotify.is_accept)
  return is_accept_;
}
void DungeonRestartInviteReplyNotify::set_is_accept(bool value) {
  
  is_accept_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyNotify.is_accept)
}

// uint32 player_uid = 9;
void DungeonRestartInviteReplyNotify::clear_player_uid() {
  player_uid_ = 0u;
}
::google::protobuf::uint32 DungeonRestartInviteReplyNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartInviteReplyNotify.player_uid)
  return player_uid_;
}
void DungeonRestartInviteReplyNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartInviteReplyNotify.player_uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonRestartResultNotify::kIsAddAccpetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonRestartResultNotify::DungeonRestartResultNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonRestartResultNotify)
}
DungeonRestartResultNotify::DungeonRestartResultNotify(const DungeonRestartResultNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_add_accpet_ = from.is_add_accpet_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonRestartResultNotify)
}

void DungeonRestartResultNotify::SharedCtor() {
  is_add_accpet_ = false;
  _cached_size_ = 0;
}

DungeonRestartResultNotify::~DungeonRestartResultNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonRestartResultNotify)
  SharedDtor();
}

void DungeonRestartResultNotify::SharedDtor() {
}

void DungeonRestartResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonRestartResultNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonRestartResultNotify& DungeonRestartResultNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonRestartResultNotify* DungeonRestartResultNotify::New(::google::protobuf::Arena* arena) const {
  DungeonRestartResultNotify* n = new DungeonRestartResultNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonRestartResultNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonRestartResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_add_accpet_ = false;
  _internal_metadata_.Clear();
}

bool DungeonRestartResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonRestartResultNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_add_accpet = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_add_accpet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonRestartResultNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonRestartResultNotify)
  return false;
#undef DO_
}

void DungeonRestartResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonRestartResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_add_accpet = 9;
  if (this->is_add_accpet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_add_accpet(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonRestartResultNotify)
}

::google::protobuf::uint8* DungeonRestartResultNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonRestartResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_add_accpet = 9;
  if (this->is_add_accpet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_add_accpet(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonRestartResultNotify)
  return target;
}

size_t DungeonRestartResultNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonRestartResultNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_add_accpet = 9;
  if (this->is_add_accpet() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonRestartResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonRestartResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonRestartResultNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonRestartResultNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonRestartResultNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonRestartResultNotify)
    MergeFrom(*source);
  }
}

void DungeonRestartResultNotify::MergeFrom(const DungeonRestartResultNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonRestartResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_add_accpet() != 0) {
    set_is_add_accpet(from.is_add_accpet());
  }
}

void DungeonRestartResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonRestartResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonRestartResultNotify::CopyFrom(const DungeonRestartResultNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonRestartResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonRestartResultNotify::IsInitialized() const {
  return true;
}

void DungeonRestartResultNotify::Swap(DungeonRestartResultNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonRestartResultNotify::InternalSwap(DungeonRestartResultNotify* other) {
  using std::swap;
  swap(is_add_accpet_, other->is_add_accpet_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonRestartResultNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonRestartResultNotify

// bool is_add_accpet = 9;
void DungeonRestartResultNotify::clear_is_add_accpet() {
  is_add_accpet_ = false;
}
bool DungeonRestartResultNotify::is_add_accpet() const {
  // @@protoc_insertion_point(field_get:proto.DungeonRestartResultNotify.is_add_accpet)
  return is_add_accpet_;
}
void DungeonRestartResultNotify::set_is_add_accpet(bool value) {
  
  is_add_accpet_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonRestartResultNotify.is_add_accpet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamSetChangingAvatarReq::kIsChangingAvatarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamSetChangingAvatarReq::DungeonCandidateTeamSetChangingAvatarReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamSetChangingAvatarReq)
}
DungeonCandidateTeamSetChangingAvatarReq::DungeonCandidateTeamSetChangingAvatarReq(const DungeonCandidateTeamSetChangingAvatarReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_changing_avatar_ = from.is_changing_avatar_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamSetChangingAvatarReq)
}

void DungeonCandidateTeamSetChangingAvatarReq::SharedCtor() {
  is_changing_avatar_ = false;
  _cached_size_ = 0;
}

DungeonCandidateTeamSetChangingAvatarReq::~DungeonCandidateTeamSetChangingAvatarReq() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamSetChangingAvatarReq)
  SharedDtor();
}

void DungeonCandidateTeamSetChangingAvatarReq::SharedDtor() {
}

void DungeonCandidateTeamSetChangingAvatarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamSetChangingAvatarReq::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamSetChangingAvatarReq& DungeonCandidateTeamSetChangingAvatarReq::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamSetChangingAvatarReq* DungeonCandidateTeamSetChangingAvatarReq::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamSetChangingAvatarReq* n = new DungeonCandidateTeamSetChangingAvatarReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamSetChangingAvatarReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_changing_avatar_ = false;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamSetChangingAvatarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_changing_avatar = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_changing_avatar_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamSetChangingAvatarReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamSetChangingAvatarReq)
  return false;
#undef DO_
}

void DungeonCandidateTeamSetChangingAvatarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_changing_avatar = 12;
  if (this->is_changing_avatar() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_changing_avatar(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamSetChangingAvatarReq)
}

::google::protobuf::uint8* DungeonCandidateTeamSetChangingAvatarReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_changing_avatar = 12;
  if (this->is_changing_avatar() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_changing_avatar(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamSetChangingAvatarReq)
  return target;
}

size_t DungeonCandidateTeamSetChangingAvatarReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_changing_avatar = 12;
  if (this->is_changing_avatar() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamSetChangingAvatarReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamSetChangingAvatarReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamSetChangingAvatarReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamSetChangingAvatarReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamSetChangingAvatarReq)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamSetChangingAvatarReq::MergeFrom(const DungeonCandidateTeamSetChangingAvatarReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_changing_avatar() != 0) {
    set_is_changing_avatar(from.is_changing_avatar());
  }
}

void DungeonCandidateTeamSetChangingAvatarReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamSetChangingAvatarReq::CopyFrom(const DungeonCandidateTeamSetChangingAvatarReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamSetChangingAvatarReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamSetChangingAvatarReq::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamSetChangingAvatarReq::Swap(DungeonCandidateTeamSetChangingAvatarReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamSetChangingAvatarReq::InternalSwap(DungeonCandidateTeamSetChangingAvatarReq* other) {
  using std::swap;
  swap(is_changing_avatar_, other->is_changing_avatar_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamSetChangingAvatarReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamSetChangingAvatarReq

// bool is_changing_avatar = 12;
void DungeonCandidateTeamSetChangingAvatarReq::clear_is_changing_avatar() {
  is_changing_avatar_ = false;
}
bool DungeonCandidateTeamSetChangingAvatarReq::is_changing_avatar() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetChangingAvatarReq.is_changing_avatar)
  return is_changing_avatar_;
}
void DungeonCandidateTeamSetChangingAvatarReq::set_is_changing_avatar(bool value) {
  
  is_changing_avatar_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetChangingAvatarReq.is_changing_avatar)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonCandidateTeamSetChangingAvatarRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonCandidateTeamSetChangingAvatarRsp::DungeonCandidateTeamSetChangingAvatarRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonCandidateTeamSetChangingAvatarRsp)
}
DungeonCandidateTeamSetChangingAvatarRsp::DungeonCandidateTeamSetChangingAvatarRsp(const DungeonCandidateTeamSetChangingAvatarRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.DungeonCandidateTeamSetChangingAvatarRsp)
}

void DungeonCandidateTeamSetChangingAvatarRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

DungeonCandidateTeamSetChangingAvatarRsp::~DungeonCandidateTeamSetChangingAvatarRsp() {
  // @@protoc_insertion_point(destructor:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  SharedDtor();
}

void DungeonCandidateTeamSetChangingAvatarRsp::SharedDtor() {
}

void DungeonCandidateTeamSetChangingAvatarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonCandidateTeamSetChangingAvatarRsp::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonCandidateTeamSetChangingAvatarRsp& DungeonCandidateTeamSetChangingAvatarRsp::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonCandidateTeamSetChangingAvatarRsp* DungeonCandidateTeamSetChangingAvatarRsp::New(::google::protobuf::Arena* arena) const {
  DungeonCandidateTeamSetChangingAvatarRsp* n = new DungeonCandidateTeamSetChangingAvatarRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonCandidateTeamSetChangingAvatarRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool DungeonCandidateTeamSetChangingAvatarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  return false;
#undef DO_
}

void DungeonCandidateTeamSetChangingAvatarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonCandidateTeamSetChangingAvatarRsp)
}

::google::protobuf::uint8* DungeonCandidateTeamSetChangingAvatarRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 2;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  return target;
}

size_t DungeonCandidateTeamSetChangingAvatarRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 2;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonCandidateTeamSetChangingAvatarRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonCandidateTeamSetChangingAvatarRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonCandidateTeamSetChangingAvatarRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonCandidateTeamSetChangingAvatarRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonCandidateTeamSetChangingAvatarRsp)
    MergeFrom(*source);
  }
}

void DungeonCandidateTeamSetChangingAvatarRsp::MergeFrom(const DungeonCandidateTeamSetChangingAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void DungeonCandidateTeamSetChangingAvatarRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonCandidateTeamSetChangingAvatarRsp::CopyFrom(const DungeonCandidateTeamSetChangingAvatarRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonCandidateTeamSetChangingAvatarRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonCandidateTeamSetChangingAvatarRsp::IsInitialized() const {
  return true;
}

void DungeonCandidateTeamSetChangingAvatarRsp::Swap(DungeonCandidateTeamSetChangingAvatarRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonCandidateTeamSetChangingAvatarRsp::InternalSwap(DungeonCandidateTeamSetChangingAvatarRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonCandidateTeamSetChangingAvatarRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonCandidateTeamSetChangingAvatarRsp

// int32 retcode = 2;
void DungeonCandidateTeamSetChangingAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 DungeonCandidateTeamSetChangingAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.DungeonCandidateTeamSetChangingAvatarRsp.retcode)
  return retcode_;
}
void DungeonCandidateTeamSetChangingAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonCandidateTeamSetChangingAvatarRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MistTrialFloorLevelNotify::kFloorLevelFieldNumber;
const int MistTrialFloorLevelNotify::kDungeonSceneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MistTrialFloorLevelNotify::MistTrialFloorLevelNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MistTrialFloorLevelNotify)
}
MistTrialFloorLevelNotify::MistTrialFloorLevelNotify(const MistTrialFloorLevelNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&floor_level_, &from.floor_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&dungeon_scene_id_) -
    reinterpret_cast<char*>(&floor_level_)) + sizeof(dungeon_scene_id_));
  // @@protoc_insertion_point(copy_constructor:proto.MistTrialFloorLevelNotify)
}

void MistTrialFloorLevelNotify::SharedCtor() {
  ::memset(&floor_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_scene_id_) -
      reinterpret_cast<char*>(&floor_level_)) + sizeof(dungeon_scene_id_));
  _cached_size_ = 0;
}

MistTrialFloorLevelNotify::~MistTrialFloorLevelNotify() {
  // @@protoc_insertion_point(destructor:proto.MistTrialFloorLevelNotify)
  SharedDtor();
}

void MistTrialFloorLevelNotify::SharedDtor() {
}

void MistTrialFloorLevelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MistTrialFloorLevelNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MistTrialFloorLevelNotify& MistTrialFloorLevelNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

MistTrialFloorLevelNotify* MistTrialFloorLevelNotify::New(::google::protobuf::Arena* arena) const {
  MistTrialFloorLevelNotify* n = new MistTrialFloorLevelNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MistTrialFloorLevelNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MistTrialFloorLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&floor_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dungeon_scene_id_) -
      reinterpret_cast<char*>(&floor_level_)) + sizeof(dungeon_scene_id_));
  _internal_metadata_.Clear();
}

bool MistTrialFloorLevelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MistTrialFloorLevelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 floor_level = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dungeon_scene_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MistTrialFloorLevelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MistTrialFloorLevelNotify)
  return false;
#undef DO_
}

void MistTrialFloorLevelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MistTrialFloorLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 floor_level = 7;
  if (this->floor_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->floor_level(), output);
  }

  // uint32 dungeon_scene_id = 14;
  if (this->dungeon_scene_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->dungeon_scene_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.MistTrialFloorLevelNotify)
}

::google::protobuf::uint8* MistTrialFloorLevelNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.MistTrialFloorLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 floor_level = 7;
  if (this->floor_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->floor_level(), target);
  }

  // uint32 dungeon_scene_id = 14;
  if (this->dungeon_scene_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->dungeon_scene_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.MistTrialFloorLevelNotify)
  return target;
}

size_t MistTrialFloorLevelNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MistTrialFloorLevelNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 floor_level = 7;
  if (this->floor_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->floor_level());
  }

  // uint32 dungeon_scene_id = 14;
  if (this->dungeon_scene_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_scene_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MistTrialFloorLevelNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.MistTrialFloorLevelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const MistTrialFloorLevelNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MistTrialFloorLevelNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.MistTrialFloorLevelNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.MistTrialFloorLevelNotify)
    MergeFrom(*source);
  }
}

void MistTrialFloorLevelNotify::MergeFrom(const MistTrialFloorLevelNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MistTrialFloorLevelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.floor_level() != 0) {
    set_floor_level(from.floor_level());
  }
  if (from.dungeon_scene_id() != 0) {
    set_dungeon_scene_id(from.dungeon_scene_id());
  }
}

void MistTrialFloorLevelNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.MistTrialFloorLevelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MistTrialFloorLevelNotify::CopyFrom(const MistTrialFloorLevelNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MistTrialFloorLevelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MistTrialFloorLevelNotify::IsInitialized() const {
  return true;
}

void MistTrialFloorLevelNotify::Swap(MistTrialFloorLevelNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MistTrialFloorLevelNotify::InternalSwap(MistTrialFloorLevelNotify* other) {
  using std::swap;
  swap(floor_level_, other->floor_level_);
  swap(dungeon_scene_id_, other->dungeon_scene_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MistTrialFloorLevelNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MistTrialFloorLevelNotify

// uint32 floor_level = 7;
void MistTrialFloorLevelNotify::clear_floor_level() {
  floor_level_ = 0u;
}
::google::protobuf::uint32 MistTrialFloorLevelNotify::floor_level() const {
  // @@protoc_insertion_point(field_get:proto.MistTrialFloorLevelNotify.floor_level)
  return floor_level_;
}
void MistTrialFloorLevelNotify::set_floor_level(::google::protobuf::uint32 value) {
  
  floor_level_ = value;
  // @@protoc_insertion_point(field_set:proto.MistTrialFloorLevelNotify.floor_level)
}

// uint32 dungeon_scene_id = 14;
void MistTrialFloorLevelNotify::clear_dungeon_scene_id() {
  dungeon_scene_id_ = 0u;
}
::google::protobuf::uint32 MistTrialFloorLevelNotify::dungeon_scene_id() const {
  // @@protoc_insertion_point(field_get:proto.MistTrialFloorLevelNotify.dungeon_scene_id)
  return dungeon_scene_id_;
}
void MistTrialFloorLevelNotify::set_dungeon_scene_id(::google::protobuf::uint32 value) {
  
  dungeon_scene_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MistTrialFloorLevelNotify.dungeon_scene_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DungeonReviseLevelNotify::kSceneLevelFieldNumber;
const int DungeonReviseLevelNotify::kReviseLevelFieldNumber;
const int DungeonReviseLevelNotify::kDungeonIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DungeonReviseLevelNotify::DungeonReviseLevelNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DungeonReviseLevelNotify)
}
DungeonReviseLevelNotify::DungeonReviseLevelNotify(const DungeonReviseLevelNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dungeon_id_, &from.dungeon_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&revise_level_) -
    reinterpret_cast<char*>(&dungeon_id_)) + sizeof(revise_level_));
  // @@protoc_insertion_point(copy_constructor:proto.DungeonReviseLevelNotify)
}

void DungeonReviseLevelNotify::SharedCtor() {
  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revise_level_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(revise_level_));
  _cached_size_ = 0;
}

DungeonReviseLevelNotify::~DungeonReviseLevelNotify() {
  // @@protoc_insertion_point(destructor:proto.DungeonReviseLevelNotify)
  SharedDtor();
}

void DungeonReviseLevelNotify::SharedDtor() {
}

void DungeonReviseLevelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DungeonReviseLevelNotify::descriptor() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DungeonReviseLevelNotify& DungeonReviseLevelNotify::default_instance() {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::InitDefaults();
  return *internal_default_instance();
}

DungeonReviseLevelNotify* DungeonReviseLevelNotify::New(::google::protobuf::Arena* arena) const {
  DungeonReviseLevelNotify* n = new DungeonReviseLevelNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DungeonReviseLevelNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DungeonReviseLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dungeon_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revise_level_) -
      reinterpret_cast<char*>(&dungeon_id_)) + sizeof(revise_level_));
  _internal_metadata_.Clear();
}

bool DungeonReviseLevelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DungeonReviseLevelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dungeon_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scene_level = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 revise_level = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revise_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DungeonReviseLevelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DungeonReviseLevelNotify)
  return false;
#undef DO_
}

void DungeonReviseLevelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DungeonReviseLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 3;
  if (this->dungeon_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dungeon_id(), output);
  }

  // uint32 scene_level = 5;
  if (this->scene_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scene_level(), output);
  }

  // uint32 revise_level = 10;
  if (this->revise_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->revise_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.DungeonReviseLevelNotify)
}

::google::protobuf::uint8* DungeonReviseLevelNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.DungeonReviseLevelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dungeon_id = 3;
  if (this->dungeon_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dungeon_id(), target);
  }

  // uint32 scene_level = 5;
  if (this->scene_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scene_level(), target);
  }

  // uint32 revise_level = 10;
  if (this->revise_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->revise_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.DungeonReviseLevelNotify)
  return target;
}

size_t DungeonReviseLevelNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DungeonReviseLevelNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dungeon_id = 3;
  if (this->dungeon_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dungeon_id());
  }

  // uint32 scene_level = 5;
  if (this->scene_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scene_level());
  }

  // uint32 revise_level = 10;
  if (this->revise_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->revise_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DungeonReviseLevelNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.DungeonReviseLevelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const DungeonReviseLevelNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DungeonReviseLevelNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.DungeonReviseLevelNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.DungeonReviseLevelNotify)
    MergeFrom(*source);
  }
}

void DungeonReviseLevelNotify::MergeFrom(const DungeonReviseLevelNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DungeonReviseLevelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dungeon_id() != 0) {
    set_dungeon_id(from.dungeon_id());
  }
  if (from.scene_level() != 0) {
    set_scene_level(from.scene_level());
  }
  if (from.revise_level() != 0) {
    set_revise_level(from.revise_level());
  }
}

void DungeonReviseLevelNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.DungeonReviseLevelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DungeonReviseLevelNotify::CopyFrom(const DungeonReviseLevelNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DungeonReviseLevelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DungeonReviseLevelNotify::IsInitialized() const {
  return true;
}

void DungeonReviseLevelNotify::Swap(DungeonReviseLevelNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DungeonReviseLevelNotify::InternalSwap(DungeonReviseLevelNotify* other) {
  using std::swap;
  swap(dungeon_id_, other->dungeon_id_);
  swap(scene_level_, other->scene_level_);
  swap(revise_level_, other->revise_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DungeonReviseLevelNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fdungeon_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fdungeon_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DungeonReviseLevelNotify

// uint32 scene_level = 5;
void DungeonReviseLevelNotify::clear_scene_level() {
  scene_level_ = 0u;
}
::google::protobuf::uint32 DungeonReviseLevelNotify::scene_level() const {
  // @@protoc_insertion_point(field_get:proto.DungeonReviseLevelNotify.scene_level)
  return scene_level_;
}
void DungeonReviseLevelNotify::set_scene_level(::google::protobuf::uint32 value) {
  
  scene_level_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonReviseLevelNotify.scene_level)
}

// uint32 revise_level = 10;
void DungeonReviseLevelNotify::clear_revise_level() {
  revise_level_ = 0u;
}
::google::protobuf::uint32 DungeonReviseLevelNotify::revise_level() const {
  // @@protoc_insertion_point(field_get:proto.DungeonReviseLevelNotify.revise_level)
  return revise_level_;
}
void DungeonReviseLevelNotify::set_revise_level(::google::protobuf::uint32 value) {
  
  revise_level_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonReviseLevelNotify.revise_level)
}

// uint32 dungeon_id = 3;
void DungeonReviseLevelNotify::clear_dungeon_id() {
  dungeon_id_ = 0u;
}
::google::protobuf::uint32 DungeonReviseLevelNotify::dungeon_id() const {
  // @@protoc_insertion_point(field_get:proto.DungeonReviseLevelNotify.dungeon_id)
  return dungeon_id_;
}
void DungeonReviseLevelNotify::set_dungeon_id(::google::protobuf::uint32 value) {
  
  dungeon_id_ = value;
  // @@protoc_insertion_point(field_set:proto.DungeonReviseLevelNotify.dungeon_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
