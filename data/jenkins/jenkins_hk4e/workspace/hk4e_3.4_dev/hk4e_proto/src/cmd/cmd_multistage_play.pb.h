// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_multistage_play.proto

#ifndef PROTOBUF_cmd_2fcmd_5fmultistage_5fplay_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fmultistage_5fplay_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class BrickBreakerPlayerBattleInfo;
class BrickBreakerPlayerBattleInfoDefaultTypeInternal;
extern BrickBreakerPlayerBattleInfoDefaultTypeInternal _BrickBreakerPlayerBattleInfo_default_instance_;
class BrickBreakerPlayerReadyNotify;
class BrickBreakerPlayerReadyNotifyDefaultTypeInternal;
extern BrickBreakerPlayerReadyNotifyDefaultTypeInternal _BrickBreakerPlayerReadyNotify_default_instance_;
class BrickBreakerPlayerSetAvatarNotify;
class BrickBreakerPlayerSetAvatarNotifyDefaultTypeInternal;
extern BrickBreakerPlayerSetAvatarNotifyDefaultTypeInternal _BrickBreakerPlayerSetAvatarNotify_default_instance_;
class BrickBreakerPlayerSetChangingNotify;
class BrickBreakerPlayerSetChangingNotifyDefaultTypeInternal;
extern BrickBreakerPlayerSetChangingNotifyDefaultTypeInternal _BrickBreakerPlayerSetChangingNotify_default_instance_;
class BrickBreakerPlayerSetSkillNotify;
class BrickBreakerPlayerSetSkillNotifyDefaultTypeInternal;
extern BrickBreakerPlayerSetSkillNotifyDefaultTypeInternal _BrickBreakerPlayerSetSkillNotify_default_instance_;
class BrickBreakerSelectAvatarReq;
class BrickBreakerSelectAvatarReqDefaultTypeInternal;
extern BrickBreakerSelectAvatarReqDefaultTypeInternal _BrickBreakerSelectAvatarReq_default_instance_;
class BrickBreakerSelectAvatarRsp;
class BrickBreakerSelectAvatarRspDefaultTypeInternal;
extern BrickBreakerSelectAvatarRspDefaultTypeInternal _BrickBreakerSelectAvatarRsp_default_instance_;
class BrickBreakerSelectSkillReq;
class BrickBreakerSelectSkillReqDefaultTypeInternal;
extern BrickBreakerSelectSkillReqDefaultTypeInternal _BrickBreakerSelectSkillReq_default_instance_;
class BrickBreakerSelectSkillRsp;
class BrickBreakerSelectSkillRspDefaultTypeInternal;
extern BrickBreakerSelectSkillRspDefaultTypeInternal _BrickBreakerSelectSkillRsp_default_instance_;
class BrickBreakerSetChangingReq;
class BrickBreakerSetChangingReqDefaultTypeInternal;
extern BrickBreakerSetChangingReqDefaultTypeInternal _BrickBreakerSetChangingReq_default_instance_;
class BrickBreakerSetChangingRsp;
class BrickBreakerSetChangingRspDefaultTypeInternal;
extern BrickBreakerSetChangingRspDefaultTypeInternal _BrickBreakerSetChangingRsp_default_instance_;
class BrickBreakerSetReadyReq;
class BrickBreakerSetReadyReqDefaultTypeInternal;
extern BrickBreakerSetReadyReqDefaultTypeInternal _BrickBreakerSetReadyReq_default_instance_;
class BrickBreakerSetReadyRsp;
class BrickBreakerSetReadyRspDefaultTypeInternal;
extern BrickBreakerSetReadyRspDefaultTypeInternal _BrickBreakerSetReadyRsp_default_instance_;
class BrickBreakerStageInfo;
class BrickBreakerStageInfoDefaultTypeInternal;
extern BrickBreakerStageInfoDefaultTypeInternal _BrickBreakerStageInfo_default_instance_;
class CharAmusementAvatarInfo;
class CharAmusementAvatarInfoDefaultTypeInternal;
extern CharAmusementAvatarInfoDefaultTypeInternal _CharAmusementAvatarInfo_default_instance_;
class CharAmusementInfo;
class CharAmusementInfoDefaultTypeInternal;
extern CharAmusementInfoDefaultTypeInternal _CharAmusementInfo_default_instance_;
class ChessCardInfo;
class ChessCardInfoDefaultTypeInternal;
extern ChessCardInfoDefaultTypeInternal _ChessCardInfo_default_instance_;
class ChessEntranceDetailInfo;
class ChessEntranceDetailInfoDefaultTypeInternal;
extern ChessEntranceDetailInfoDefaultTypeInternal _ChessEntranceDetailInfo_default_instance_;
class ChessEntranceInfo;
class ChessEntranceInfoDefaultTypeInternal;
extern ChessEntranceInfoDefaultTypeInternal _ChessEntranceInfo_default_instance_;
class ChessEscapedMonstersNotify;
class ChessEscapedMonstersNotifyDefaultTypeInternal;
extern ChessEscapedMonstersNotifyDefaultTypeInternal _ChessEscapedMonstersNotify_default_instance_;
class ChessLeftMonstersNotify;
class ChessLeftMonstersNotifyDefaultTypeInternal;
extern ChessLeftMonstersNotifyDefaultTypeInternal _ChessLeftMonstersNotify_default_instance_;
class ChessManualRefreshCardsReq;
class ChessManualRefreshCardsReqDefaultTypeInternal;
extern ChessManualRefreshCardsReqDefaultTypeInternal _ChessManualRefreshCardsReq_default_instance_;
class ChessManualRefreshCardsRsp;
class ChessManualRefreshCardsRspDefaultTypeInternal;
extern ChessManualRefreshCardsRspDefaultTypeInternal _ChessManualRefreshCardsRsp_default_instance_;
class ChessMonsterInfo;
class ChessMonsterInfoDefaultTypeInternal;
extern ChessMonsterInfoDefaultTypeInternal _ChessMonsterInfo_default_instance_;
class ChessMysteryInfo;
class ChessMysteryInfoDefaultTypeInternal;
extern ChessMysteryInfoDefaultTypeInternal _ChessMysteryInfo_default_instance_;
class ChessMysteryInfo_DetailInfoMapEntry;
class ChessMysteryInfo_DetailInfoMapEntryDefaultTypeInternal;
extern ChessMysteryInfo_DetailInfoMapEntryDefaultTypeInternal _ChessMysteryInfo_DetailInfoMapEntry_default_instance_;
class ChessMysteryInfo_EntrancePointMapEntry;
class ChessMysteryInfo_EntrancePointMapEntryDefaultTypeInternal;
extern ChessMysteryInfo_EntrancePointMapEntryDefaultTypeInternal _ChessMysteryInfo_EntrancePointMapEntry_default_instance_;
class ChessNormalCardInfo;
class ChessNormalCardInfoDefaultTypeInternal;
extern ChessNormalCardInfoDefaultTypeInternal _ChessNormalCardInfo_default_instance_;
class ChessPickCardNotify;
class ChessPickCardNotifyDefaultTypeInternal;
extern ChessPickCardNotifyDefaultTypeInternal _ChessPickCardNotify_default_instance_;
class ChessPickCardReq;
class ChessPickCardReqDefaultTypeInternal;
extern ChessPickCardReqDefaultTypeInternal _ChessPickCardReq_default_instance_;
class ChessPickCardRsp;
class ChessPickCardRspDefaultTypeInternal;
extern ChessPickCardRspDefaultTypeInternal _ChessPickCardRsp_default_instance_;
class ChessPlayerInfo;
class ChessPlayerInfoDefaultTypeInternal;
extern ChessPlayerInfoDefaultTypeInternal _ChessPlayerInfo_default_instance_;
class ChessPlayerInfoNotify;
class ChessPlayerInfoNotifyDefaultTypeInternal;
extern ChessPlayerInfoNotifyDefaultTypeInternal _ChessPlayerInfoNotify_default_instance_;
class ChessSelectedCardsNotify;
class ChessSelectedCardsNotifyDefaultTypeInternal;
extern ChessSelectedCardsNotifyDefaultTypeInternal _ChessSelectedCardsNotify_default_instance_;
class CoinCollectPlayerInfo;
class CoinCollectPlayerInfoDefaultTypeInternal;
extern CoinCollectPlayerInfoDefaultTypeInternal _CoinCollectPlayerInfo_default_instance_;
class CoinCollectPrepareStageNotify;
class CoinCollectPrepareStageNotifyDefaultTypeInternal;
extern CoinCollectPrepareStageNotifyDefaultTypeInternal _CoinCollectPrepareStageNotify_default_instance_;
class CoinCollectStageInfo;
class CoinCollectStageInfoDefaultTypeInternal;
extern CoinCollectStageInfoDefaultTypeInternal _CoinCollectStageInfo_default_instance_;
class CoinCollectTeamAvatarInfo;
class CoinCollectTeamAvatarInfoDefaultTypeInternal;
extern CoinCollectTeamAvatarInfoDefaultTypeInternal _CoinCollectTeamAvatarInfo_default_instance_;
class FleurFairBossSettleInfo;
class FleurFairBossSettleInfoDefaultTypeInternal;
extern FleurFairBossSettleInfoDefaultTypeInternal _FleurFairBossSettleInfo_default_instance_;
class FleurFairBuffEnergyNotify;
class FleurFairBuffEnergyNotifyDefaultTypeInternal;
extern FleurFairBuffEnergyNotifyDefaultTypeInternal _FleurFairBuffEnergyNotify_default_instance_;
class FleurFairFinishGalleryStageNotify;
class FleurFairFinishGalleryStageNotifyDefaultTypeInternal;
extern FleurFairFinishGalleryStageNotifyDefaultTypeInternal _FleurFairFinishGalleryStageNotify_default_instance_;
class FleurFairGallerySettleInfo;
class FleurFairGallerySettleInfoDefaultTypeInternal;
extern FleurFairGallerySettleInfoDefaultTypeInternal _FleurFairGallerySettleInfo_default_instance_;
class FleurFairGallerySettleInfo_EnergyStatMapEntry;
class FleurFairGallerySettleInfo_EnergyStatMapEntryDefaultTypeInternal;
extern FleurFairGallerySettleInfo_EnergyStatMapEntryDefaultTypeInternal _FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_;
class FleurFairPlayerStatInfo;
class FleurFairPlayerStatInfoDefaultTypeInternal;
extern FleurFairPlayerStatInfoDefaultTypeInternal _FleurFairPlayerStatInfo_default_instance_;
class FleurFairStageSettleNotify;
class FleurFairStageSettleNotifyDefaultTypeInternal;
extern FleurFairStageSettleNotifyDefaultTypeInternal _FleurFairStageSettleNotify_default_instance_;
class GlobalBuildingInfoNotify;
class GlobalBuildingInfoNotifyDefaultTypeInternal;
extern GlobalBuildingInfoNotifyDefaultTypeInternal _GlobalBuildingInfoNotify_default_instance_;
class HideAndSeekPlayerBattleInfo;
class HideAndSeekPlayerBattleInfoDefaultTypeInternal;
extern HideAndSeekPlayerBattleInfoDefaultTypeInternal _HideAndSeekPlayerBattleInfo_default_instance_;
class HideAndSeekPlayerReadyNotify;
class HideAndSeekPlayerReadyNotifyDefaultTypeInternal;
extern HideAndSeekPlayerReadyNotifyDefaultTypeInternal _HideAndSeekPlayerReadyNotify_default_instance_;
class HideAndSeekPlayerSetAvatarNotify;
class HideAndSeekPlayerSetAvatarNotifyDefaultTypeInternal;
extern HideAndSeekPlayerSetAvatarNotifyDefaultTypeInternal _HideAndSeekPlayerSetAvatarNotify_default_instance_;
class HideAndSeekSelectAvatarReq;
class HideAndSeekSelectAvatarReqDefaultTypeInternal;
extern HideAndSeekSelectAvatarReqDefaultTypeInternal _HideAndSeekSelectAvatarReq_default_instance_;
class HideAndSeekSelectAvatarRsp;
class HideAndSeekSelectAvatarRspDefaultTypeInternal;
extern HideAndSeekSelectAvatarRspDefaultTypeInternal _HideAndSeekSelectAvatarRsp_default_instance_;
class HideAndSeekSetReadyReq;
class HideAndSeekSetReadyReqDefaultTypeInternal;
extern HideAndSeekSetReadyReqDefaultTypeInternal _HideAndSeekSetReadyReq_default_instance_;
class HideAndSeekSetReadyRsp;
class HideAndSeekSetReadyRspDefaultTypeInternal;
extern HideAndSeekSetReadyRspDefaultTypeInternal _HideAndSeekSetReadyRsp_default_instance_;
class HideAndSeekSettleInfo;
class HideAndSeekSettleInfoDefaultTypeInternal;
extern HideAndSeekSettleInfoDefaultTypeInternal _HideAndSeekSettleInfo_default_instance_;
class HideAndSeekSettleNotify;
class HideAndSeekSettleNotifyDefaultTypeInternal;
extern HideAndSeekSettleNotifyDefaultTypeInternal _HideAndSeekSettleNotify_default_instance_;
class HideAndSeekStageInfo;
class HideAndSeekStageInfoDefaultTypeInternal;
extern HideAndSeekStageInfoDefaultTypeInternal _HideAndSeekStageInfo_default_instance_;
class HideAndSeekStageInfo_BattleInfoMapEntry;
class HideAndSeekStageInfo_BattleInfoMapEntryDefaultTypeInternal;
extern HideAndSeekStageInfo_BattleInfoMapEntryDefaultTypeInternal _HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_;
class InBattleChessInfo;
class InBattleChessInfoDefaultTypeInternal;
extern InBattleChessInfoDefaultTypeInternal _InBattleChessInfo_default_instance_;
class InBattleChessInfo_PlayerInfoMapEntry;
class InBattleChessInfo_PlayerInfoMapEntryDefaultTypeInternal;
extern InBattleChessInfo_PlayerInfoMapEntryDefaultTypeInternal _InBattleChessInfo_PlayerInfoMapEntry_default_instance_;
class InBattleChessSettleInfo;
class InBattleChessSettleInfoDefaultTypeInternal;
extern InBattleChessSettleInfoDefaultTypeInternal _InBattleChessSettleInfo_default_instance_;
class InBattleFleurFairInfo;
class InBattleFleurFairInfoDefaultTypeInternal;
extern InBattleFleurFairInfoDefaultTypeInternal _InBattleFleurFairInfo_default_instance_;
class InBattleIrodoriChessInfo;
class InBattleIrodoriChessInfoDefaultTypeInternal;
extern InBattleIrodoriChessInfoDefaultTypeInternal _InBattleIrodoriChessInfo_default_instance_;
class InBattleIrodoriChessSettleInfo;
class InBattleIrodoriChessSettleInfoDefaultTypeInternal;
extern InBattleIrodoriChessSettleInfoDefaultTypeInternal _InBattleIrodoriChessSettleInfo_default_instance_;
class InBattleMechanicusBuildingInfo;
class InBattleMechanicusBuildingInfoDefaultTypeInternal;
extern InBattleMechanicusBuildingInfoDefaultTypeInternal _InBattleMechanicusBuildingInfo_default_instance_;
class InBattleMechanicusBuildingPointsNotify;
class InBattleMechanicusBuildingPointsNotifyDefaultTypeInternal;
extern InBattleMechanicusBuildingPointsNotifyDefaultTypeInternal _InBattleMechanicusBuildingPointsNotify_default_instance_;
class InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry;
class InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntryDefaultTypeInternal;
extern InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntryDefaultTypeInternal _InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_;
class InBattleMechanicusCardInfo;
class InBattleMechanicusCardInfoDefaultTypeInternal;
extern InBattleMechanicusCardInfoDefaultTypeInternal _InBattleMechanicusCardInfo_default_instance_;
class InBattleMechanicusCardResultNotify;
class InBattleMechanicusCardResultNotifyDefaultTypeInternal;
extern InBattleMechanicusCardResultNotifyDefaultTypeInternal _InBattleMechanicusCardResultNotify_default_instance_;
class InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry;
class InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntryDefaultTypeInternal;
extern InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntryDefaultTypeInternal _InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_;
class InBattleMechanicusConfirmCardNotify;
class InBattleMechanicusConfirmCardNotifyDefaultTypeInternal;
extern InBattleMechanicusConfirmCardNotifyDefaultTypeInternal _InBattleMechanicusConfirmCardNotify_default_instance_;
class InBattleMechanicusConfirmCardReq;
class InBattleMechanicusConfirmCardReqDefaultTypeInternal;
extern InBattleMechanicusConfirmCardReqDefaultTypeInternal _InBattleMechanicusConfirmCardReq_default_instance_;
class InBattleMechanicusConfirmCardRsp;
class InBattleMechanicusConfirmCardRspDefaultTypeInternal;
extern InBattleMechanicusConfirmCardRspDefaultTypeInternal _InBattleMechanicusConfirmCardRsp_default_instance_;
class InBattleMechanicusExcapeMonsterNotify;
class InBattleMechanicusExcapeMonsterNotifyDefaultTypeInternal;
extern InBattleMechanicusExcapeMonsterNotifyDefaultTypeInternal _InBattleMechanicusExcapeMonsterNotify_default_instance_;
class InBattleMechanicusInfo;
class InBattleMechanicusInfoDefaultTypeInternal;
extern InBattleMechanicusInfoDefaultTypeInternal _InBattleMechanicusInfo_default_instance_;
class InBattleMechanicusLeftMonsterNotify;
class InBattleMechanicusLeftMonsterNotifyDefaultTypeInternal;
extern InBattleMechanicusLeftMonsterNotifyDefaultTypeInternal _InBattleMechanicusLeftMonsterNotify_default_instance_;
class InBattleMechanicusMonsterInfo;
class InBattleMechanicusMonsterInfoDefaultTypeInternal;
extern InBattleMechanicusMonsterInfoDefaultTypeInternal _InBattleMechanicusMonsterInfo_default_instance_;
class InBattleMechanicusPickCardNotify;
class InBattleMechanicusPickCardNotifyDefaultTypeInternal;
extern InBattleMechanicusPickCardNotifyDefaultTypeInternal _InBattleMechanicusPickCardNotify_default_instance_;
class InBattleMechanicusPickCardReq;
class InBattleMechanicusPickCardReqDefaultTypeInternal;
extern InBattleMechanicusPickCardReqDefaultTypeInternal _InBattleMechanicusPickCardReq_default_instance_;
class InBattleMechanicusPickCardRsp;
class InBattleMechanicusPickCardRspDefaultTypeInternal;
extern InBattleMechanicusPickCardRspDefaultTypeInternal _InBattleMechanicusPickCardRsp_default_instance_;
class InBattleMechanicusPlayerInfo;
class InBattleMechanicusPlayerInfoDefaultTypeInternal;
extern InBattleMechanicusPlayerInfoDefaultTypeInternal _InBattleMechanicusPlayerInfo_default_instance_;
class InBattleMechanicusSettleInfo;
class InBattleMechanicusSettleInfoDefaultTypeInternal;
extern InBattleMechanicusSettleInfoDefaultTypeInternal _InBattleMechanicusSettleInfo_default_instance_;
class InBattleMechanicusSettleNotify;
class InBattleMechanicusSettleNotifyDefaultTypeInternal;
extern InBattleMechanicusSettleNotifyDefaultTypeInternal _InBattleMechanicusSettleNotify_default_instance_;
class IrodoriChessEntranceDetailInfo;
class IrodoriChessEntranceDetailInfoDefaultTypeInternal;
extern IrodoriChessEntranceDetailInfoDefaultTypeInternal _IrodoriChessEntranceDetailInfo_default_instance_;
class IrodoriChessEntranceInfo;
class IrodoriChessEntranceInfoDefaultTypeInternal;
extern IrodoriChessEntranceInfoDefaultTypeInternal _IrodoriChessEntranceInfo_default_instance_;
class IrodoriChessLeftMonsterNotify;
class IrodoriChessLeftMonsterNotifyDefaultTypeInternal;
extern IrodoriChessLeftMonsterNotifyDefaultTypeInternal _IrodoriChessLeftMonsterNotify_default_instance_;
class IrodoriChessMonsterInfo;
class IrodoriChessMonsterInfoDefaultTypeInternal;
extern IrodoriChessMonsterInfoDefaultTypeInternal _IrodoriChessMonsterInfo_default_instance_;
class IrodoriChessMysteryInfo;
class IrodoriChessMysteryInfoDefaultTypeInternal;
extern IrodoriChessMysteryInfoDefaultTypeInternal _IrodoriChessMysteryInfo_default_instance_;
class IrodoriChessPlayerInfo;
class IrodoriChessPlayerInfoDefaultTypeInternal;
extern IrodoriChessPlayerInfoDefaultTypeInternal _IrodoriChessPlayerInfo_default_instance_;
class IrodoriChessPlayerInfoNotify;
class IrodoriChessPlayerInfoNotifyDefaultTypeInternal;
extern IrodoriChessPlayerInfoNotifyDefaultTypeInternal _IrodoriChessPlayerInfoNotify_default_instance_;
class LanV3BoatSettleInfo;
class LanV3BoatSettleInfoDefaultTypeInternal;
extern LanV3BoatSettleInfoDefaultTypeInternal _LanV3BoatSettleInfo_default_instance_;
class LanV3BoatSettleNotify;
class LanV3BoatSettleNotifyDefaultTypeInternal;
extern LanV3BoatSettleNotifyDefaultTypeInternal _LanV3BoatSettleNotify_default_instance_;
class LanV3BoatStageInfo;
class LanV3BoatStageInfoDefaultTypeInternal;
extern LanV3BoatStageInfoDefaultTypeInternal _LanV3BoatStageInfo_default_instance_;
class MultistagePlayEndNotify;
class MultistagePlayEndNotifyDefaultTypeInternal;
extern MultistagePlayEndNotifyDefaultTypeInternal _MultistagePlayEndNotify_default_instance_;
class MultistagePlayFinishStageReq;
class MultistagePlayFinishStageReqDefaultTypeInternal;
extern MultistagePlayFinishStageReqDefaultTypeInternal _MultistagePlayFinishStageReq_default_instance_;
class MultistagePlayFinishStageRsp;
class MultistagePlayFinishStageRspDefaultTypeInternal;
extern MultistagePlayFinishStageRspDefaultTypeInternal _MultistagePlayFinishStageRsp_default_instance_;
class MultistagePlayInfo;
class MultistagePlayInfoDefaultTypeInternal;
extern MultistagePlayInfoDefaultTypeInternal _MultistagePlayInfo_default_instance_;
class MultistagePlayInfoNotify;
class MultistagePlayInfoNotifyDefaultTypeInternal;
extern MultistagePlayInfoNotifyDefaultTypeInternal _MultistagePlayInfoNotify_default_instance_;
class MultistagePlaySettleNotify;
class MultistagePlaySettleNotifyDefaultTypeInternal;
extern MultistagePlaySettleNotifyDefaultTypeInternal _MultistagePlaySettleNotify_default_instance_;
class MultistagePlayStageEndNotify;
class MultistagePlayStageEndNotifyDefaultTypeInternal;
extern MultistagePlayStageEndNotifyDefaultTypeInternal _MultistagePlayStageEndNotify_default_instance_;
class MultistageSettleWatcherInfo;
class MultistageSettleWatcherInfoDefaultTypeInternal;
extern MultistageSettleWatcherInfoDefaultTypeInternal _MultistageSettleWatcherInfo_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto

enum HideAndSeekSettleNotify_SettleReason {
  HideAndSeekSettleNotify_SettleReason_SETTLE_REASON_TIME_OUT = 0,
  HideAndSeekSettleNotify_SettleReason_SETTLE_PLAY_END = 1,
  HideAndSeekSettleNotify_SettleReason_SETTLE_PLAYER_QUIT = 2,
  HideAndSeekSettleNotify_SettleReason_HideAndSeekSettleNotify_SettleReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HideAndSeekSettleNotify_SettleReason_HideAndSeekSettleNotify_SettleReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HideAndSeekSettleNotify_SettleReason_IsValid(int value);
const HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify_SettleReason_SettleReason_MIN = HideAndSeekSettleNotify_SettleReason_SETTLE_REASON_TIME_OUT;
const HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify_SettleReason_SettleReason_MAX = HideAndSeekSettleNotify_SettleReason_SETTLE_PLAYER_QUIT;
const int HideAndSeekSettleNotify_SettleReason_SettleReason_ARRAYSIZE = HideAndSeekSettleNotify_SettleReason_SettleReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* HideAndSeekSettleNotify_SettleReason_descriptor();
inline const ::std::string& HideAndSeekSettleNotify_SettleReason_Name(HideAndSeekSettleNotify_SettleReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    HideAndSeekSettleNotify_SettleReason_descriptor(), value);
}
inline bool HideAndSeekSettleNotify_SettleReason_Parse(
    const ::std::string& name, HideAndSeekSettleNotify_SettleReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HideAndSeekSettleNotify_SettleReason>(
    HideAndSeekSettleNotify_SettleReason_descriptor(), name, value);
}
enum MultistagePlayType {
  MULTISTAGE_PLAY_TYPE_NON = 0,
  MULTISTAGE_PLAY_TYPE_MECHANICUS = 1,
  MULTISTAGE_PLAY_TYPE_FLEUR_FAIR = 2,
  MULTISTAGE_PLAY_TYPE_HIDE_AND_SEEK = 3,
  MULTISTAGE_PLAY_TYPE_BOUNCE_CONJURING = 4,
  MULTISTAGE_PLAY_TYPE_CHESS = 5,
  MULTISTAGE_PLAY_TYPE_IRODORI_CHESS = 6,
  MULTISTAGE_PLAY_TYPE_CHAR_AMUSEMENT = 7,
  MULTISTAGE_PLAY_TYPE_BRICK_BREAKER = 8,
  MULTISTAGE_PLAY_TYPE_COIN_COLLECT = 9,
  MULTISTAGE_PLAY_TYPE_LAN_V3_BOAT = 10,
  MultistagePlayType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MultistagePlayType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MultistagePlayType_IsValid(int value);
const MultistagePlayType MultistagePlayType_MIN = MULTISTAGE_PLAY_TYPE_NON;
const MultistagePlayType MultistagePlayType_MAX = MULTISTAGE_PLAY_TYPE_LAN_V3_BOAT;
const int MultistagePlayType_ARRAYSIZE = MultistagePlayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MultistagePlayType_descriptor();
inline const ::std::string& MultistagePlayType_Name(MultistagePlayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MultistagePlayType_descriptor(), value);
}
inline bool MultistagePlayType_Parse(
    const ::std::string& name, MultistagePlayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MultistagePlayType>(
    MultistagePlayType_descriptor(), name, value);
}
enum InBattleMechanicusStageType {
  IN_BATTLE_MECHANICUS_STAGE_NONE = 0,
  IN_BATTLE_MECHANICUS_STAGE_BUILD = 1,
  IN_BATTLE_MECHANICUS_STAGE_CARD_FLIP = 2,
  IN_BATTLE_MECHANICUS_STAGE_KILL = 3,
  InBattleMechanicusStageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InBattleMechanicusStageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InBattleMechanicusStageType_IsValid(int value);
const InBattleMechanicusStageType InBattleMechanicusStageType_MIN = IN_BATTLE_MECHANICUS_STAGE_NONE;
const InBattleMechanicusStageType InBattleMechanicusStageType_MAX = IN_BATTLE_MECHANICUS_STAGE_KILL;
const int InBattleMechanicusStageType_ARRAYSIZE = InBattleMechanicusStageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InBattleMechanicusStageType_descriptor();
inline const ::std::string& InBattleMechanicusStageType_Name(InBattleMechanicusStageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InBattleMechanicusStageType_descriptor(), value);
}
inline bool InBattleMechanicusStageType_Parse(
    const ::std::string& name, InBattleMechanicusStageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InBattleMechanicusStageType>(
    InBattleMechanicusStageType_descriptor(), name, value);
}
enum InBattleMechanicusCardChallengeState {
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE = 0,
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_ON_GOING = 1,
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_FAIL = 2,
  IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS = 3,
  InBattleMechanicusCardChallengeState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  InBattleMechanicusCardChallengeState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool InBattleMechanicusCardChallengeState_IsValid(int value);
const InBattleMechanicusCardChallengeState InBattleMechanicusCardChallengeState_MIN = IN_BATTLE_MECHANICUS_CARD_CHALLENGE_NONE;
const InBattleMechanicusCardChallengeState InBattleMechanicusCardChallengeState_MAX = IN_BATTLE_MECHANICUS_CARD_CHALLENGE_SUCCESS;
const int InBattleMechanicusCardChallengeState_ARRAYSIZE = InBattleMechanicusCardChallengeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* InBattleMechanicusCardChallengeState_descriptor();
inline const ::std::string& InBattleMechanicusCardChallengeState_Name(InBattleMechanicusCardChallengeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    InBattleMechanicusCardChallengeState_descriptor(), value);
}
inline bool InBattleMechanicusCardChallengeState_Parse(
    const ::std::string& name, InBattleMechanicusCardChallengeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InBattleMechanicusCardChallengeState>(
    InBattleMechanicusCardChallengeState_descriptor(), name, value);
}
enum HideAndSeekStageType {
  HIDE_AND_SEEK_STAGE_PREPARE = 0,
  HIDE_AND_SEEK_STAGE_PICK = 1,
  HIDE_AND_SEEK_STAGE_GAME = 2,
  HIDE_AND_SEEK_STAGE_HIDE = 3,
  HIDE_AND_SEEK_STAGE_SEEK = 4,
  HIDE_AND_SEEK_STAGE_SETTLE = 5,
  HideAndSeekStageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  HideAndSeekStageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool HideAndSeekStageType_IsValid(int value);
const HideAndSeekStageType HideAndSeekStageType_MIN = HIDE_AND_SEEK_STAGE_PREPARE;
const HideAndSeekStageType HideAndSeekStageType_MAX = HIDE_AND_SEEK_STAGE_SETTLE;
const int HideAndSeekStageType_ARRAYSIZE = HideAndSeekStageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* HideAndSeekStageType_descriptor();
inline const ::std::string& HideAndSeekStageType_Name(HideAndSeekStageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    HideAndSeekStageType_descriptor(), value);
}
inline bool HideAndSeekStageType_Parse(
    const ::std::string& name, HideAndSeekStageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HideAndSeekStageType>(
    HideAndSeekStageType_descriptor(), name, value);
}
enum BrickBreakerStageType {
  BRICK_BREAKER_STAGE_PREPARE = 0,
  BRICK_BREAKER_STAGE_PICK = 1,
  BRICK_BREAKER_STAGE_GAME = 2,
  BRICK_BREAKER_STAGE_PLAY = 3,
  BRICK_BREAKER_STAGE_SETTLE = 4,
  BrickBreakerStageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  BrickBreakerStageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool BrickBreakerStageType_IsValid(int value);
const BrickBreakerStageType BrickBreakerStageType_MIN = BRICK_BREAKER_STAGE_PREPARE;
const BrickBreakerStageType BrickBreakerStageType_MAX = BRICK_BREAKER_STAGE_SETTLE;
const int BrickBreakerStageType_ARRAYSIZE = BrickBreakerStageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BrickBreakerStageType_descriptor();
inline const ::std::string& BrickBreakerStageType_Name(BrickBreakerStageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BrickBreakerStageType_descriptor(), value);
}
inline bool BrickBreakerStageType_Parse(
    const ::std::string& name, BrickBreakerStageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BrickBreakerStageType>(
    BrickBreakerStageType_descriptor(), name, value);
}
enum LanV3BoatKickReason {
  LAN_V3_KICK_REASON_NONE = 0,
  LAN_V3_KICK_REASON_EXIT_VEHICLE = 1,
  LAN_V3_KICK_REASON_AVATAR_DIE = 2,
  LAN_V3_KICK_REASON_SLOW_ENTER = 3,
  LanV3BoatKickReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  LanV3BoatKickReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LanV3BoatKickReason_IsValid(int value);
const LanV3BoatKickReason LanV3BoatKickReason_MIN = LAN_V3_KICK_REASON_NONE;
const LanV3BoatKickReason LanV3BoatKickReason_MAX = LAN_V3_KICK_REASON_SLOW_ENTER;
const int LanV3BoatKickReason_ARRAYSIZE = LanV3BoatKickReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* LanV3BoatKickReason_descriptor();
inline const ::std::string& LanV3BoatKickReason_Name(LanV3BoatKickReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    LanV3BoatKickReason_descriptor(), value);
}
inline bool LanV3BoatKickReason_Parse(
    const ::std::string& name, LanV3BoatKickReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LanV3BoatKickReason>(
    LanV3BoatKickReason_descriptor(), name, value);
}
// ===================================================================

class InBattleMechanicusBuildingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusBuildingInfo) */ {
 public:
  InBattleMechanicusBuildingInfo();
  virtual ~InBattleMechanicusBuildingInfo();

  InBattleMechanicusBuildingInfo(const InBattleMechanicusBuildingInfo& from);

  inline InBattleMechanicusBuildingInfo& operator=(const InBattleMechanicusBuildingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusBuildingInfo(InBattleMechanicusBuildingInfo&& from) noexcept
    : InBattleMechanicusBuildingInfo() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusBuildingInfo& operator=(InBattleMechanicusBuildingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusBuildingInfo& default_instance();

  static inline const InBattleMechanicusBuildingInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusBuildingInfo*>(
               &_InBattleMechanicusBuildingInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InBattleMechanicusBuildingInfo* other);
  friend void swap(InBattleMechanicusBuildingInfo& a, InBattleMechanicusBuildingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusBuildingInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusBuildingInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusBuildingInfo& from);
  void MergeFrom(const InBattleMechanicusBuildingInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusBuildingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cost_points = 2;
  void clear_cost_points();
  static const int kCostPointsFieldNumber = 2;
  ::google::protobuf::uint32 cost_points() const;
  void set_cost_points(::google::protobuf::uint32 value);

  // uint32 level = 7;
  void clear_level();
  static const int kLevelFieldNumber = 7;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 building_id = 8;
  void clear_building_id();
  static const int kBuildingIdFieldNumber = 8;
  ::google::protobuf::uint32 building_id() const;
  void set_building_id(::google::protobuf::uint32 value);

  // uint32 refund_points = 11;
  void clear_refund_points();
  static const int kRefundPointsFieldNumber = 11;
  ::google::protobuf::uint32 refund_points() const;
  void set_refund_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusBuildingInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cost_points_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 building_id_;
  ::google::protobuf::uint32 refund_points_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusPlayerInfo) */ {
 public:
  InBattleMechanicusPlayerInfo();
  virtual ~InBattleMechanicusPlayerInfo();

  InBattleMechanicusPlayerInfo(const InBattleMechanicusPlayerInfo& from);

  inline InBattleMechanicusPlayerInfo& operator=(const InBattleMechanicusPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusPlayerInfo(InBattleMechanicusPlayerInfo&& from) noexcept
    : InBattleMechanicusPlayerInfo() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusPlayerInfo& operator=(InBattleMechanicusPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusPlayerInfo& default_instance();

  static inline const InBattleMechanicusPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusPlayerInfo*>(
               &_InBattleMechanicusPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(InBattleMechanicusPlayerInfo* other);
  friend void swap(InBattleMechanicusPlayerInfo& a, InBattleMechanicusPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusPlayerInfo& from);
  void MergeFrom(const InBattleMechanicusPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.InBattleMechanicusBuildingInfo building_list = 4;
  int building_list_size() const;
  void clear_building_list();
  static const int kBuildingListFieldNumber = 4;
  const ::proto::InBattleMechanicusBuildingInfo& building_list(int index) const;
  ::proto::InBattleMechanicusBuildingInfo* mutable_building_list(int index);
  ::proto::InBattleMechanicusBuildingInfo* add_building_list();
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusBuildingInfo >*
      mutable_building_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusBuildingInfo >&
      building_list() const;

  // uint32 building_points = 3;
  void clear_building_points();
  static const int kBuildingPointsFieldNumber = 3;
  ::google::protobuf::uint32 building_points() const;
  void set_building_points(::google::protobuf::uint32 value);

  // uint32 pick_card_id = 5;
  void clear_pick_card_id();
  static const int kPickCardIdFieldNumber = 5;
  ::google::protobuf::uint32 pick_card_id() const;
  void set_pick_card_id(::google::protobuf::uint32 value);

  // bool is_card_confirmed = 13;
  void clear_is_card_confirmed();
  static const int kIsCardConfirmedFieldNumber = 13;
  bool is_card_confirmed() const;
  void set_is_card_confirmed(bool value);

  // uint32 uid = 14;
  void clear_uid();
  static const int kUidFieldNumber = 14;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusPlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusBuildingInfo > building_list_;
  ::google::protobuf::uint32 building_points_;
  ::google::protobuf::uint32 pick_card_id_;
  bool is_card_confirmed_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusMonsterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusMonsterInfo) */ {
 public:
  InBattleMechanicusMonsterInfo();
  virtual ~InBattleMechanicusMonsterInfo();

  InBattleMechanicusMonsterInfo(const InBattleMechanicusMonsterInfo& from);

  inline InBattleMechanicusMonsterInfo& operator=(const InBattleMechanicusMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusMonsterInfo(InBattleMechanicusMonsterInfo&& from) noexcept
    : InBattleMechanicusMonsterInfo() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusMonsterInfo& operator=(InBattleMechanicusMonsterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusMonsterInfo& default_instance();

  static inline const InBattleMechanicusMonsterInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusMonsterInfo*>(
               &_InBattleMechanicusMonsterInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(InBattleMechanicusMonsterInfo* other);
  friend void swap(InBattleMechanicusMonsterInfo& a, InBattleMechanicusMonsterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusMonsterInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusMonsterInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusMonsterInfo& from);
  void MergeFrom(const InBattleMechanicusMonsterInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusMonsterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 level = 14;
  void clear_level();
  static const int kLevelFieldNumber = 14;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 monster_id = 1;
  void clear_monster_id();
  static const int kMonsterIdFieldNumber = 1;
  ::google::protobuf::uint32 monster_id() const;
  void set_monster_id(::google::protobuf::uint32 value);

  // uint32 count = 13;
  void clear_count();
  static const int kCountFieldNumber = 13;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusMonsterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 count_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusCardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusCardInfo) */ {
 public:
  InBattleMechanicusCardInfo();
  virtual ~InBattleMechanicusCardInfo();

  InBattleMechanicusCardInfo(const InBattleMechanicusCardInfo& from);

  inline InBattleMechanicusCardInfo& operator=(const InBattleMechanicusCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusCardInfo(InBattleMechanicusCardInfo&& from) noexcept
    : InBattleMechanicusCardInfo() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusCardInfo& operator=(InBattleMechanicusCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusCardInfo& default_instance();

  static inline const InBattleMechanicusCardInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusCardInfo*>(
               &_InBattleMechanicusCardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(InBattleMechanicusCardInfo* other);
  friend void swap(InBattleMechanicusCardInfo& a, InBattleMechanicusCardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusCardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusCardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusCardInfo& from);
  void MergeFrom(const InBattleMechanicusCardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cost_points = 1;
  void clear_cost_points();
  static const int kCostPointsFieldNumber = 1;
  ::google::protobuf::uint32 cost_points() const;
  void set_cost_points(::google::protobuf::uint32 value);

  // uint32 end_round = 3;
  void clear_end_round();
  static const int kEndRoundFieldNumber = 3;
  ::google::protobuf::uint32 end_round() const;
  void set_end_round(::google::protobuf::uint32 value);

  // .proto.InBattleMechanicusCardChallengeState challenge_state = 5;
  void clear_challenge_state();
  static const int kChallengeStateFieldNumber = 5;
  ::proto::InBattleMechanicusCardChallengeState challenge_state() const;
  void set_challenge_state(::proto::InBattleMechanicusCardChallengeState value);

  // uint32 begin_round = 8;
  void clear_begin_round();
  static const int kBeginRoundFieldNumber = 8;
  ::google::protobuf::uint32 begin_round() const;
  void set_begin_round(::google::protobuf::uint32 value);

  // uint32 card_id = 11;
  void clear_card_id();
  static const int kCardIdFieldNumber = 11;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 rand_effect_id = 12;
  void clear_rand_effect_id();
  static const int kRandEffectIdFieldNumber = 12;
  ::google::protobuf::uint32 rand_effect_id() const;
  void set_rand_effect_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusCardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cost_points_;
  ::google::protobuf::uint32 end_round_;
  int challenge_state_;
  ::google::protobuf::uint32 begin_round_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 rand_effect_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusInfo) */ {
 public:
  InBattleMechanicusInfo();
  virtual ~InBattleMechanicusInfo();

  InBattleMechanicusInfo(const InBattleMechanicusInfo& from);

  inline InBattleMechanicusInfo& operator=(const InBattleMechanicusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusInfo(InBattleMechanicusInfo&& from) noexcept
    : InBattleMechanicusInfo() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusInfo& operator=(InBattleMechanicusInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusInfo& default_instance();

  static inline const InBattleMechanicusInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusInfo*>(
               &_InBattleMechanicusInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(InBattleMechanicusInfo* other);
  friend void swap(InBattleMechanicusInfo& a, InBattleMechanicusInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusInfo& from);
  void MergeFrom(const InBattleMechanicusInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.InBattleMechanicusPlayerInfo player_list = 7;
  int player_list_size() const;
  void clear_player_list();
  static const int kPlayerListFieldNumber = 7;
  const ::proto::InBattleMechanicusPlayerInfo& player_list(int index) const;
  ::proto::InBattleMechanicusPlayerInfo* mutable_player_list(int index);
  ::proto::InBattleMechanicusPlayerInfo* add_player_list();
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusPlayerInfo >*
      mutable_player_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusPlayerInfo >&
      player_list() const;

  // repeated .proto.InBattleMechanicusCardInfo history_card_list = 11;
  int history_card_list_size() const;
  void clear_history_card_list();
  static const int kHistoryCardListFieldNumber = 11;
  const ::proto::InBattleMechanicusCardInfo& history_card_list(int index) const;
  ::proto::InBattleMechanicusCardInfo* mutable_history_card_list(int index);
  ::proto::InBattleMechanicusCardInfo* add_history_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
      mutable_history_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
      history_card_list() const;

  // repeated .proto.InBattleMechanicusMonsterInfo monster_list = 14;
  int monster_list_size() const;
  void clear_monster_list();
  static const int kMonsterListFieldNumber = 14;
  const ::proto::InBattleMechanicusMonsterInfo& monster_list(int index) const;
  ::proto::InBattleMechanicusMonsterInfo* mutable_monster_list(int index);
  ::proto::InBattleMechanicusMonsterInfo* add_monster_list();
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusMonsterInfo >*
      mutable_monster_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusMonsterInfo >&
      monster_list() const;

  // repeated .proto.InBattleMechanicusCardInfo pick_card_list = 15;
  int pick_card_list_size() const;
  void clear_pick_card_list();
  static const int kPickCardListFieldNumber = 15;
  const ::proto::InBattleMechanicusCardInfo& pick_card_list(int index) const;
  ::proto::InBattleMechanicusCardInfo* mutable_pick_card_list(int index);
  ::proto::InBattleMechanicusCardInfo* add_pick_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
      mutable_pick_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
      pick_card_list() const;

  // repeated uint32 exit_list = 115;
  int exit_list_size() const;
  void clear_exit_list();
  static const int kExitListFieldNumber = 115;
  ::google::protobuf::uint32 exit_list(int index) const;
  void set_exit_list(int index, ::google::protobuf::uint32 value);
  void add_exit_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      exit_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_exit_list();

  // repeated uint32 entrance_list = 410;
  int entrance_list_size() const;
  void clear_entrance_list();
  static const int kEntranceListFieldNumber = 410;
  ::google::protobuf::uint32 entrance_list(int index) const;
  void set_entrance_list(int index, ::google::protobuf::uint32 value);
  void add_entrance_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      entrance_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_entrance_list();

  // uint64 wait_begin_time_us = 1;
  void clear_wait_begin_time_us();
  static const int kWaitBeginTimeUsFieldNumber = 1;
  ::google::protobuf::uint64 wait_begin_time_us() const;
  void set_wait_begin_time_us(::google::protobuf::uint64 value);

  // uint64 begin_time_ms = 2;
  void clear_begin_time_ms();
  static const int kBeginTimeMsFieldNumber = 2;
  ::google::protobuf::uint64 begin_time_ms() const;
  void set_begin_time_ms(::google::protobuf::uint64 value);

  // uint32 round = 3;
  void clear_round();
  static const int kRoundFieldNumber = 3;
  ::google::protobuf::uint32 round() const;
  void set_round(::google::protobuf::uint32 value);

  // uint32 building_stage_duration = 4;
  void clear_building_stage_duration();
  static const int kBuildingStageDurationFieldNumber = 4;
  ::google::protobuf::uint32 building_stage_duration() const;
  void set_building_stage_duration(::google::protobuf::uint32 value);

  // uint32 left_monster = 5;
  void clear_left_monster();
  static const int kLeftMonsterFieldNumber = 5;
  ::google::protobuf::uint32 left_monster() const;
  void set_left_monster(::google::protobuf::uint32 value);

  // uint32 excaped_monster_num = 6;
  void clear_excaped_monster_num();
  static const int kExcapedMonsterNumFieldNumber = 6;
  ::google::protobuf::uint32 excaped_monster_num() const;
  void set_excaped_monster_num(::google::protobuf::uint32 value);

  // uint64 duration_ms = 8;
  void clear_duration_ms();
  static const int kDurationMsFieldNumber = 8;
  ::google::protobuf::uint64 duration_ms() const;
  void set_duration_ms(::google::protobuf::uint64 value);

  // .proto.InBattleMechanicusStageType stage = 9;
  void clear_stage();
  static const int kStageFieldNumber = 9;
  ::proto::InBattleMechanicusStageType stage() const;
  void set_stage(::proto::InBattleMechanicusStageType value);

  // uint32 max_excape_monster_num = 10;
  void clear_max_excape_monster_num();
  static const int kMaxExcapeMonsterNumFieldNumber = 10;
  ::google::protobuf::uint32 max_excape_monster_num() const;
  void set_max_excape_monster_num(::google::protobuf::uint32 value);

  // uint32 total_round = 12;
  void clear_total_round();
  static const int kTotalRoundFieldNumber = 12;
  ::google::protobuf::uint32 total_round() const;
  void set_total_round(::google::protobuf::uint32 value);

  // uint32 wait_seconds = 13;
  void clear_wait_seconds();
  static const int kWaitSecondsFieldNumber = 13;
  ::google::protobuf::uint32 wait_seconds() const;
  void set_wait_seconds(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusPlayerInfo > player_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo > history_card_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusMonsterInfo > monster_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo > pick_card_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > exit_list_;
  mutable int _exit_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > entrance_list_;
  mutable int _entrance_list_cached_byte_size_;
  ::google::protobuf::uint64 wait_begin_time_us_;
  ::google::protobuf::uint64 begin_time_ms_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 building_stage_duration_;
  ::google::protobuf::uint32 left_monster_;
  ::google::protobuf::uint32 excaped_monster_num_;
  ::google::protobuf::uint64 duration_ms_;
  int stage_;
  ::google::protobuf::uint32 max_excape_monster_num_;
  ::google::protobuf::uint32 total_round_;
  ::google::protobuf::uint32 wait_seconds_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleFleurFairInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleFleurFairInfo) */ {
 public:
  InBattleFleurFairInfo();
  virtual ~InBattleFleurFairInfo();

  InBattleFleurFairInfo(const InBattleFleurFairInfo& from);

  inline InBattleFleurFairInfo& operator=(const InBattleFleurFairInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleFleurFairInfo(InBattleFleurFairInfo&& from) noexcept
    : InBattleFleurFairInfo() {
    *this = ::std::move(from);
  }

  inline InBattleFleurFairInfo& operator=(InBattleFleurFairInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleFleurFairInfo& default_instance();

  static inline const InBattleFleurFairInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleFleurFairInfo*>(
               &_InBattleFleurFairInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(InBattleFleurFairInfo* other);
  friend void swap(InBattleFleurFairInfo& a, InBattleFleurFairInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleFleurFairInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleFleurFairInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleFleurFairInfo& from);
  void MergeFrom(const InBattleFleurFairInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleFleurFairInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ability_group_id_list = 2;
  int ability_group_id_list_size() const;
  void clear_ability_group_id_list();
  static const int kAbilityGroupIdListFieldNumber = 2;
  ::google::protobuf::uint32 ability_group_id_list(int index) const;
  void set_ability_group_id_list(int index, ::google::protobuf::uint32 value);
  void add_ability_group_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ability_group_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ability_group_id_list();

  // repeated uint32 gallery_id_list = 5;
  int gallery_id_list_size() const;
  void clear_gallery_id_list();
  static const int kGalleryIdListFieldNumber = 5;
  ::google::protobuf::uint32 gallery_id_list(int index) const;
  void set_gallery_id_list(int index, ::google::protobuf::uint32 value);
  void add_gallery_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      gallery_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_gallery_id_list();

  // uint32 preview_display_duration = 12;
  void clear_preview_display_duration();
  static const int kPreviewDisplayDurationFieldNumber = 12;
  ::google::protobuf::uint32 preview_display_duration() const;
  void set_preview_display_duration(::google::protobuf::uint32 value);

  // uint32 gallery_stage_index = 6;
  void clear_gallery_stage_index();
  static const int kGalleryStageIndexFieldNumber = 6;
  ::google::protobuf::uint32 gallery_stage_index() const;
  void set_gallery_stage_index(::google::protobuf::uint32 value);

  // uint32 preview_stage_index = 8;
  void clear_preview_stage_index();
  static const int kPreviewStageIndexFieldNumber = 8;
  ::google::protobuf::uint32 preview_stage_index() const;
  void set_preview_stage_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleFleurFairInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ability_group_id_list_;
  mutable int _ability_group_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > gallery_id_list_;
  mutable int _gallery_id_list_cached_byte_size_;
  ::google::protobuf::uint32 preview_display_duration_;
  ::google::protobuf::uint32 gallery_stage_index_;
  ::google::protobuf::uint32 preview_stage_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharAmusementAvatarInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CharAmusementAvatarInfo) */ {
 public:
  CharAmusementAvatarInfo();
  virtual ~CharAmusementAvatarInfo();

  CharAmusementAvatarInfo(const CharAmusementAvatarInfo& from);

  inline CharAmusementAvatarInfo& operator=(const CharAmusementAvatarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharAmusementAvatarInfo(CharAmusementAvatarInfo&& from) noexcept
    : CharAmusementAvatarInfo() {
    *this = ::std::move(from);
  }

  inline CharAmusementAvatarInfo& operator=(CharAmusementAvatarInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharAmusementAvatarInfo& default_instance();

  static inline const CharAmusementAvatarInfo* internal_default_instance() {
    return reinterpret_cast<const CharAmusementAvatarInfo*>(
               &_CharAmusementAvatarInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(CharAmusementAvatarInfo* other);
  friend void swap(CharAmusementAvatarInfo& a, CharAmusementAvatarInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharAmusementAvatarInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CharAmusementAvatarInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CharAmusementAvatarInfo& from);
  void MergeFrom(const CharAmusementAvatarInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CharAmusementAvatarInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 avatar_id_list = 10;
  int avatar_id_list_size() const;
  void clear_avatar_id_list();
  static const int kAvatarIdListFieldNumber = 10;
  ::google::protobuf::uint32 avatar_id_list(int index) const;
  void set_avatar_id_list(int index, ::google::protobuf::uint32 value);
  void add_avatar_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      avatar_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_avatar_id_list();

  // uint32 punish_time = 7;
  void clear_punish_time();
  static const int kPunishTimeFieldNumber = 7;
  ::google::protobuf::uint32 punish_time() const;
  void set_punish_time(::google::protobuf::uint32 value);

  // uint32 uid = 11;
  void clear_uid();
  static const int kUidFieldNumber = 11;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CharAmusementAvatarInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > avatar_id_list_;
  mutable int _avatar_id_list_cached_byte_size_;
  ::google::protobuf::uint32 punish_time_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharAmusementInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CharAmusementInfo) */ {
 public:
  CharAmusementInfo();
  virtual ~CharAmusementInfo();

  CharAmusementInfo(const CharAmusementInfo& from);

  inline CharAmusementInfo& operator=(const CharAmusementInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharAmusementInfo(CharAmusementInfo&& from) noexcept
    : CharAmusementInfo() {
    *this = ::std::move(from);
  }

  inline CharAmusementInfo& operator=(CharAmusementInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharAmusementInfo& default_instance();

  static inline const CharAmusementInfo* internal_default_instance() {
    return reinterpret_cast<const CharAmusementInfo*>(
               &_CharAmusementInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(CharAmusementInfo* other);
  friend void swap(CharAmusementInfo& a, CharAmusementInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharAmusementInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CharAmusementInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CharAmusementInfo& from);
  void MergeFrom(const CharAmusementInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CharAmusementInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.CharAmusementAvatarInfo avatar_info_list = 5;
  int avatar_info_list_size() const;
  void clear_avatar_info_list();
  static const int kAvatarInfoListFieldNumber = 5;
  const ::proto::CharAmusementAvatarInfo& avatar_info_list(int index) const;
  ::proto::CharAmusementAvatarInfo* mutable_avatar_info_list(int index);
  ::proto::CharAmusementAvatarInfo* add_avatar_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::CharAmusementAvatarInfo >*
      mutable_avatar_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::CharAmusementAvatarInfo >&
      avatar_info_list() const;

  // uint32 stage_id = 2;
  void clear_stage_id();
  static const int kStageIdFieldNumber = 2;
  ::google::protobuf::uint32 stage_id() const;
  void set_stage_id(::google::protobuf::uint32 value);

  // uint32 preview_stage_index = 4;
  void clear_preview_stage_index();
  static const int kPreviewStageIndexFieldNumber = 4;
  ::google::protobuf::uint32 preview_stage_index() const;
  void set_preview_stage_index(::google::protobuf::uint32 value);

  // uint32 level_id = 10;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 10;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // uint32 total_cost_time = 11;
  void clear_total_cost_time();
  static const int kTotalCostTimeFieldNumber = 11;
  ::google::protobuf::uint32 total_cost_time() const;
  void set_total_cost_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CharAmusementInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::CharAmusementAvatarInfo > avatar_info_list_;
  ::google::protobuf::uint32 stage_id_;
  ::google::protobuf::uint32 preview_stage_index_;
  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 total_cost_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerStageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerStageInfo) */ {
 public:
  BrickBreakerStageInfo();
  virtual ~BrickBreakerStageInfo();

  BrickBreakerStageInfo(const BrickBreakerStageInfo& from);

  inline BrickBreakerStageInfo& operator=(const BrickBreakerStageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerStageInfo(BrickBreakerStageInfo&& from) noexcept
    : BrickBreakerStageInfo() {
    *this = ::std::move(from);
  }

  inline BrickBreakerStageInfo& operator=(BrickBreakerStageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerStageInfo& default_instance();

  static inline const BrickBreakerStageInfo* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerStageInfo*>(
               &_BrickBreakerStageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BrickBreakerStageInfo* other);
  friend void swap(BrickBreakerStageInfo& a, BrickBreakerStageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerStageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerStageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerStageInfo& from);
  void MergeFrom(const BrickBreakerStageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerStageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.BrickBreakerPlayerBattleInfo battle_info_list = 2;
  int battle_info_list_size() const;
  void clear_battle_info_list();
  static const int kBattleInfoListFieldNumber = 2;
  const ::proto::BrickBreakerPlayerBattleInfo& battle_info_list(int index) const;
  ::proto::BrickBreakerPlayerBattleInfo* mutable_battle_info_list(int index);
  ::proto::BrickBreakerPlayerBattleInfo* add_battle_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BrickBreakerPlayerBattleInfo >*
      mutable_battle_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BrickBreakerPlayerBattleInfo >&
      battle_info_list() const;

  // .proto.BrickBreakerStageType stage_type = 1;
  void clear_stage_type();
  static const int kStageTypeFieldNumber = 1;
  ::proto::BrickBreakerStageType stage_type() const;
  void set_stage_type(::proto::BrickBreakerStageType value);

  // uint32 level_id = 15;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 15;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerStageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BrickBreakerPlayerBattleInfo > battle_info_list_;
  int stage_type_;
  ::google::protobuf::uint32 level_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CoinCollectStageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CoinCollectStageInfo) */ {
 public:
  CoinCollectStageInfo();
  virtual ~CoinCollectStageInfo();

  CoinCollectStageInfo(const CoinCollectStageInfo& from);

  inline CoinCollectStageInfo& operator=(const CoinCollectStageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoinCollectStageInfo(CoinCollectStageInfo&& from) noexcept
    : CoinCollectStageInfo() {
    *this = ::std::move(from);
  }

  inline CoinCollectStageInfo& operator=(CoinCollectStageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinCollectStageInfo& default_instance();

  static inline const CoinCollectStageInfo* internal_default_instance() {
    return reinterpret_cast<const CoinCollectStageInfo*>(
               &_CoinCollectStageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(CoinCollectStageInfo* other);
  friend void swap(CoinCollectStageInfo& a, CoinCollectStageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoinCollectStageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CoinCollectStageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CoinCollectStageInfo& from);
  void MergeFrom(const CoinCollectStageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CoinCollectStageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.CoinCollectPlayerInfo player_info_list = 9;
  int player_info_list_size() const;
  void clear_player_info_list();
  static const int kPlayerInfoListFieldNumber = 9;
  const ::proto::CoinCollectPlayerInfo& player_info_list(int index) const;
  ::proto::CoinCollectPlayerInfo* mutable_player_info_list(int index);
  ::proto::CoinCollectPlayerInfo* add_player_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectPlayerInfo >*
      mutable_player_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectPlayerInfo >&
      player_info_list() const;

  // uint32 level_id = 3;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 3;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // uint32 play_index = 15;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 15;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CoinCollectStageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectPlayerInfo > player_info_list_;
  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 play_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LanV3BoatStageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.LanV3BoatStageInfo) */ {
 public:
  LanV3BoatStageInfo();
  virtual ~LanV3BoatStageInfo();

  LanV3BoatStageInfo(const LanV3BoatStageInfo& from);

  inline LanV3BoatStageInfo& operator=(const LanV3BoatStageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LanV3BoatStageInfo(LanV3BoatStageInfo&& from) noexcept
    : LanV3BoatStageInfo() {
    *this = ::std::move(from);
  }

  inline LanV3BoatStageInfo& operator=(LanV3BoatStageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LanV3BoatStageInfo& default_instance();

  static inline const LanV3BoatStageInfo* internal_default_instance() {
    return reinterpret_cast<const LanV3BoatStageInfo*>(
               &_LanV3BoatStageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(LanV3BoatStageInfo* other);
  friend void swap(LanV3BoatStageInfo& a, LanV3BoatStageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LanV3BoatStageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LanV3BoatStageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LanV3BoatStageInfo& from);
  void MergeFrom(const LanV3BoatStageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LanV3BoatStageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 player_uid_list = 2;
  int player_uid_list_size() const;
  void clear_player_uid_list();
  static const int kPlayerUidListFieldNumber = 2;
  ::google::protobuf::uint32 player_uid_list(int index) const;
  void set_player_uid_list(int index, ::google::protobuf::uint32 value);
  void add_player_uid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      player_uid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_player_uid_list();

  // uint32 map_id = 10;
  void clear_map_id();
  static const int kMapIdFieldNumber = 10;
  ::google::protobuf::uint32 map_id() const;
  void set_map_id(::google::protobuf::uint32 value);

  // bool is_single = 13;
  void clear_is_single();
  static const int kIsSingleFieldNumber = 13;
  bool is_single() const;
  void set_is_single(bool value);

  // @@protoc_insertion_point(class_scope:proto.LanV3BoatStageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > player_uid_list_;
  mutable int _player_uid_list_cached_byte_size_;
  ::google::protobuf::uint32 map_id_;
  bool is_single_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistagePlayInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistagePlayInfo) */ {
 public:
  MultistagePlayInfo();
  virtual ~MultistagePlayInfo();

  MultistagePlayInfo(const MultistagePlayInfo& from);

  inline MultistagePlayInfo& operator=(const MultistagePlayInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistagePlayInfo(MultistagePlayInfo&& from) noexcept
    : MultistagePlayInfo() {
    *this = ::std::move(from);
  }

  inline MultistagePlayInfo& operator=(MultistagePlayInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistagePlayInfo& default_instance();

  enum DetailCase {
    kMechanicusInfo = 1334,
    kFleurFairInfo = 1064,
    kHideAndSeekInfo = 108,
    kChessInfo = 1758,
    kIrodoriChessInfo = 531,
    kCharAmusementInfo = 324,
    kBrickBreakerInfo = 1964,
    kCoinCollectInfo = 1067,
    kLanV3BoatInfo = 1801,
    DETAIL_NOT_SET = 0,
  };

  static inline const MultistagePlayInfo* internal_default_instance() {
    return reinterpret_cast<const MultistagePlayInfo*>(
               &_MultistagePlayInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(MultistagePlayInfo* other);
  friend void swap(MultistagePlayInfo& a, MultistagePlayInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistagePlayInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistagePlayInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistagePlayInfo& from);
  void MergeFrom(const MultistagePlayInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistagePlayInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 stage_index = 1;
  void clear_stage_index();
  static const int kStageIndexFieldNumber = 1;
  ::google::protobuf::uint32 stage_index() const;
  void set_stage_index(::google::protobuf::uint32 value);

  // uint32 duration = 8;
  void clear_duration();
  static const int kDurationFieldNumber = 8;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // uint32 play_index = 13;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 13;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 begin_time = 9;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 9;
  ::google::protobuf::uint32 begin_time() const;
  void set_begin_time(::google::protobuf::uint32 value);

  // uint32 stage_type = 10;
  void clear_stage_type();
  static const int kStageTypeFieldNumber = 10;
  ::google::protobuf::uint32 stage_type() const;
  void set_stage_type(::google::protobuf::uint32 value);

  // uint32 play_type = 11;
  void clear_play_type();
  static const int kPlayTypeFieldNumber = 11;
  ::google::protobuf::uint32 play_type() const;
  void set_play_type(::google::protobuf::uint32 value);

  // uint32 group_id = 12;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 12;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // .proto.InBattleMechanicusInfo mechanicus_info = 1334;
  bool has_mechanicus_info() const;
  void clear_mechanicus_info();
  static const int kMechanicusInfoFieldNumber = 1334;
  const ::proto::InBattleMechanicusInfo& mechanicus_info() const;
  ::proto::InBattleMechanicusInfo* mutable_mechanicus_info();
  ::proto::InBattleMechanicusInfo* release_mechanicus_info();
  void set_allocated_mechanicus_info(::proto::InBattleMechanicusInfo* mechanicus_info);

  // .proto.InBattleFleurFairInfo fleur_fair_info = 1064;
  bool has_fleur_fair_info() const;
  void clear_fleur_fair_info();
  static const int kFleurFairInfoFieldNumber = 1064;
  const ::proto::InBattleFleurFairInfo& fleur_fair_info() const;
  ::proto::InBattleFleurFairInfo* mutable_fleur_fair_info();
  ::proto::InBattleFleurFairInfo* release_fleur_fair_info();
  void set_allocated_fleur_fair_info(::proto::InBattleFleurFairInfo* fleur_fair_info);

  // .proto.HideAndSeekStageInfo hide_and_seek_info = 108;
  bool has_hide_and_seek_info() const;
  void clear_hide_and_seek_info();
  static const int kHideAndSeekInfoFieldNumber = 108;
  const ::proto::HideAndSeekStageInfo& hide_and_seek_info() const;
  ::proto::HideAndSeekStageInfo* mutable_hide_and_seek_info();
  ::proto::HideAndSeekStageInfo* release_hide_and_seek_info();
  void set_allocated_hide_and_seek_info(::proto::HideAndSeekStageInfo* hide_and_seek_info);

  // .proto.InBattleChessInfo chess_info = 1758;
  bool has_chess_info() const;
  void clear_chess_info();
  static const int kChessInfoFieldNumber = 1758;
  const ::proto::InBattleChessInfo& chess_info() const;
  ::proto::InBattleChessInfo* mutable_chess_info();
  ::proto::InBattleChessInfo* release_chess_info();
  void set_allocated_chess_info(::proto::InBattleChessInfo* chess_info);

  // .proto.InBattleIrodoriChessInfo irodori_chess_info = 531;
  bool has_irodori_chess_info() const;
  void clear_irodori_chess_info();
  static const int kIrodoriChessInfoFieldNumber = 531;
  const ::proto::InBattleIrodoriChessInfo& irodori_chess_info() const;
  ::proto::InBattleIrodoriChessInfo* mutable_irodori_chess_info();
  ::proto::InBattleIrodoriChessInfo* release_irodori_chess_info();
  void set_allocated_irodori_chess_info(::proto::InBattleIrodoriChessInfo* irodori_chess_info);

  // .proto.CharAmusementInfo char_amusement_info = 324;
  bool has_char_amusement_info() const;
  void clear_char_amusement_info();
  static const int kCharAmusementInfoFieldNumber = 324;
  const ::proto::CharAmusementInfo& char_amusement_info() const;
  ::proto::CharAmusementInfo* mutable_char_amusement_info();
  ::proto::CharAmusementInfo* release_char_amusement_info();
  void set_allocated_char_amusement_info(::proto::CharAmusementInfo* char_amusement_info);

  // .proto.BrickBreakerStageInfo brick_breaker_info = 1964;
  bool has_brick_breaker_info() const;
  void clear_brick_breaker_info();
  static const int kBrickBreakerInfoFieldNumber = 1964;
  const ::proto::BrickBreakerStageInfo& brick_breaker_info() const;
  ::proto::BrickBreakerStageInfo* mutable_brick_breaker_info();
  ::proto::BrickBreakerStageInfo* release_brick_breaker_info();
  void set_allocated_brick_breaker_info(::proto::BrickBreakerStageInfo* brick_breaker_info);

  // .proto.CoinCollectStageInfo coin_collect_info = 1067;
  bool has_coin_collect_info() const;
  void clear_coin_collect_info();
  static const int kCoinCollectInfoFieldNumber = 1067;
  const ::proto::CoinCollectStageInfo& coin_collect_info() const;
  ::proto::CoinCollectStageInfo* mutable_coin_collect_info();
  ::proto::CoinCollectStageInfo* release_coin_collect_info();
  void set_allocated_coin_collect_info(::proto::CoinCollectStageInfo* coin_collect_info);

  // .proto.LanV3BoatStageInfo lan_v3_boat_info = 1801;
  bool has_lan_v3_boat_info() const;
  void clear_lan_v3_boat_info();
  static const int kLanV3BoatInfoFieldNumber = 1801;
  const ::proto::LanV3BoatStageInfo& lan_v3_boat_info() const;
  ::proto::LanV3BoatStageInfo* mutable_lan_v3_boat_info();
  ::proto::LanV3BoatStageInfo* release_lan_v3_boat_info();
  void set_allocated_lan_v3_boat_info(::proto::LanV3BoatStageInfo* lan_v3_boat_info);

  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:proto.MultistagePlayInfo)
 private:
  void set_has_mechanicus_info();
  void set_has_fleur_fair_info();
  void set_has_hide_and_seek_info();
  void set_has_chess_info();
  void set_has_irodori_chess_info();
  void set_has_char_amusement_info();
  void set_has_brick_breaker_info();
  void set_has_coin_collect_info();
  void set_has_lan_v3_boat_info();

  inline bool has_detail() const;
  void clear_detail();
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 stage_index_;
  ::google::protobuf::uint32 duration_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 stage_type_;
  ::google::protobuf::uint32 play_type_;
  ::google::protobuf::uint32 group_id_;
  union DetailUnion {
    DetailUnion() {}
    ::proto::InBattleMechanicusInfo* mechanicus_info_;
    ::proto::InBattleFleurFairInfo* fleur_fair_info_;
    ::proto::HideAndSeekStageInfo* hide_and_seek_info_;
    ::proto::InBattleChessInfo* chess_info_;
    ::proto::InBattleIrodoriChessInfo* irodori_chess_info_;
    ::proto::CharAmusementInfo* char_amusement_info_;
    ::proto::BrickBreakerStageInfo* brick_breaker_info_;
    ::proto::CoinCollectStageInfo* coin_collect_info_;
    ::proto::LanV3BoatStageInfo* lan_v3_boat_info_;
  } detail_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistagePlayInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistagePlayInfoNotify) */ {
 public:
  MultistagePlayInfoNotify();
  virtual ~MultistagePlayInfoNotify();

  MultistagePlayInfoNotify(const MultistagePlayInfoNotify& from);

  inline MultistagePlayInfoNotify& operator=(const MultistagePlayInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistagePlayInfoNotify(MultistagePlayInfoNotify&& from) noexcept
    : MultistagePlayInfoNotify() {
    *this = ::std::move(from);
  }

  inline MultistagePlayInfoNotify& operator=(MultistagePlayInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistagePlayInfoNotify& default_instance();

  static inline const MultistagePlayInfoNotify* internal_default_instance() {
    return reinterpret_cast<const MultistagePlayInfoNotify*>(
               &_MultistagePlayInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(MultistagePlayInfoNotify* other);
  friend void swap(MultistagePlayInfoNotify& a, MultistagePlayInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistagePlayInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistagePlayInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistagePlayInfoNotify& from);
  void MergeFrom(const MultistagePlayInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistagePlayInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.MultistagePlayInfo info = 13;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 13;
  const ::proto::MultistagePlayInfo& info() const;
  ::proto::MultistagePlayInfo* mutable_info();
  ::proto::MultistagePlayInfo* release_info();
  void set_allocated_info(::proto::MultistagePlayInfo* info);

  // @@protoc_insertion_point(class_scope:proto.MultistagePlayInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::MultistagePlayInfo* info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistagePlayFinishStageReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistagePlayFinishStageReq) */ {
 public:
  MultistagePlayFinishStageReq();
  virtual ~MultistagePlayFinishStageReq();

  MultistagePlayFinishStageReq(const MultistagePlayFinishStageReq& from);

  inline MultistagePlayFinishStageReq& operator=(const MultistagePlayFinishStageReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistagePlayFinishStageReq(MultistagePlayFinishStageReq&& from) noexcept
    : MultistagePlayFinishStageReq() {
    *this = ::std::move(from);
  }

  inline MultistagePlayFinishStageReq& operator=(MultistagePlayFinishStageReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistagePlayFinishStageReq& default_instance();

  static inline const MultistagePlayFinishStageReq* internal_default_instance() {
    return reinterpret_cast<const MultistagePlayFinishStageReq*>(
               &_MultistagePlayFinishStageReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(MultistagePlayFinishStageReq* other);
  friend void swap(MultistagePlayFinishStageReq& a, MultistagePlayFinishStageReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistagePlayFinishStageReq* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistagePlayFinishStageReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistagePlayFinishStageReq& from);
  void MergeFrom(const MultistagePlayFinishStageReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistagePlayFinishStageReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 group_id = 12;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 12;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 play_index = 15;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 15;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MultistagePlayFinishStageReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 play_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusExcapeMonsterNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusExcapeMonsterNotify) */ {
 public:
  InBattleMechanicusExcapeMonsterNotify();
  virtual ~InBattleMechanicusExcapeMonsterNotify();

  InBattleMechanicusExcapeMonsterNotify(const InBattleMechanicusExcapeMonsterNotify& from);

  inline InBattleMechanicusExcapeMonsterNotify& operator=(const InBattleMechanicusExcapeMonsterNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusExcapeMonsterNotify(InBattleMechanicusExcapeMonsterNotify&& from) noexcept
    : InBattleMechanicusExcapeMonsterNotify() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusExcapeMonsterNotify& operator=(InBattleMechanicusExcapeMonsterNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusExcapeMonsterNotify& default_instance();

  static inline const InBattleMechanicusExcapeMonsterNotify* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusExcapeMonsterNotify*>(
               &_InBattleMechanicusExcapeMonsterNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(InBattleMechanicusExcapeMonsterNotify* other);
  friend void swap(InBattleMechanicusExcapeMonsterNotify& a, InBattleMechanicusExcapeMonsterNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusExcapeMonsterNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusExcapeMonsterNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusExcapeMonsterNotify& from);
  void MergeFrom(const InBattleMechanicusExcapeMonsterNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusExcapeMonsterNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 excaped_monster_num = 4;
  void clear_excaped_monster_num();
  static const int kExcapedMonsterNumFieldNumber = 4;
  ::google::protobuf::uint32 excaped_monster_num() const;
  void set_excaped_monster_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusExcapeMonsterNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 excaped_monster_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusLeftMonsterNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusLeftMonsterNotify) */ {
 public:
  InBattleMechanicusLeftMonsterNotify();
  virtual ~InBattleMechanicusLeftMonsterNotify();

  InBattleMechanicusLeftMonsterNotify(const InBattleMechanicusLeftMonsterNotify& from);

  inline InBattleMechanicusLeftMonsterNotify& operator=(const InBattleMechanicusLeftMonsterNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusLeftMonsterNotify(InBattleMechanicusLeftMonsterNotify&& from) noexcept
    : InBattleMechanicusLeftMonsterNotify() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusLeftMonsterNotify& operator=(InBattleMechanicusLeftMonsterNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusLeftMonsterNotify& default_instance();

  static inline const InBattleMechanicusLeftMonsterNotify* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusLeftMonsterNotify*>(
               &_InBattleMechanicusLeftMonsterNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(InBattleMechanicusLeftMonsterNotify* other);
  friend void swap(InBattleMechanicusLeftMonsterNotify& a, InBattleMechanicusLeftMonsterNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusLeftMonsterNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusLeftMonsterNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusLeftMonsterNotify& from);
  void MergeFrom(const InBattleMechanicusLeftMonsterNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusLeftMonsterNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 left_monster = 14;
  void clear_left_monster();
  static const int kLeftMonsterFieldNumber = 14;
  ::google::protobuf::uint32 left_monster() const;
  void set_left_monster(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusLeftMonsterNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 left_monster_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class InBattleMechanicusBuildingPointsNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusBuildingPointsNotify) */ {
 public:
  InBattleMechanicusBuildingPointsNotify();
  virtual ~InBattleMechanicusBuildingPointsNotify();

  InBattleMechanicusBuildingPointsNotify(const InBattleMechanicusBuildingPointsNotify& from);

  inline InBattleMechanicusBuildingPointsNotify& operator=(const InBattleMechanicusBuildingPointsNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusBuildingPointsNotify(InBattleMechanicusBuildingPointsNotify&& from) noexcept
    : InBattleMechanicusBuildingPointsNotify() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusBuildingPointsNotify& operator=(InBattleMechanicusBuildingPointsNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusBuildingPointsNotify& default_instance();

  static inline const InBattleMechanicusBuildingPointsNotify* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusBuildingPointsNotify*>(
               &_InBattleMechanicusBuildingPointsNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(InBattleMechanicusBuildingPointsNotify* other);
  friend void swap(InBattleMechanicusBuildingPointsNotify& a, InBattleMechanicusBuildingPointsNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusBuildingPointsNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusBuildingPointsNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusBuildingPointsNotify& from);
  void MergeFrom(const InBattleMechanicusBuildingPointsNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusBuildingPointsNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> player_building_points_map = 4;
  int player_building_points_map_size() const;
  void clear_player_building_points_map();
  static const int kPlayerBuildingPointsMapFieldNumber = 4;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      player_building_points_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_player_building_points_map();

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusBuildingPointsNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry : public ::google::protobuf::internal::MapEntry<InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry();
    InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      InBattleMechanicusBuildingPointsNotify_PlayerBuildingPointsMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > player_building_points_map_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusPickCardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusPickCardReq) */ {
 public:
  InBattleMechanicusPickCardReq();
  virtual ~InBattleMechanicusPickCardReq();

  InBattleMechanicusPickCardReq(const InBattleMechanicusPickCardReq& from);

  inline InBattleMechanicusPickCardReq& operator=(const InBattleMechanicusPickCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusPickCardReq(InBattleMechanicusPickCardReq&& from) noexcept
    : InBattleMechanicusPickCardReq() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusPickCardReq& operator=(InBattleMechanicusPickCardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusPickCardReq& default_instance();

  static inline const InBattleMechanicusPickCardReq* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusPickCardReq*>(
               &_InBattleMechanicusPickCardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(InBattleMechanicusPickCardReq* other);
  friend void swap(InBattleMechanicusPickCardReq& a, InBattleMechanicusPickCardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusPickCardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusPickCardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusPickCardReq& from);
  void MergeFrom(const InBattleMechanicusPickCardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusPickCardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 1;
  void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 play_index = 7;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 7;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 group_id = 11;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 11;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusPickCardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusPickCardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusPickCardRsp) */ {
 public:
  InBattleMechanicusPickCardRsp();
  virtual ~InBattleMechanicusPickCardRsp();

  InBattleMechanicusPickCardRsp(const InBattleMechanicusPickCardRsp& from);

  inline InBattleMechanicusPickCardRsp& operator=(const InBattleMechanicusPickCardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusPickCardRsp(InBattleMechanicusPickCardRsp&& from) noexcept
    : InBattleMechanicusPickCardRsp() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusPickCardRsp& operator=(InBattleMechanicusPickCardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusPickCardRsp& default_instance();

  static inline const InBattleMechanicusPickCardRsp* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusPickCardRsp*>(
               &_InBattleMechanicusPickCardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(InBattleMechanicusPickCardRsp* other);
  friend void swap(InBattleMechanicusPickCardRsp& a, InBattleMechanicusPickCardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusPickCardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusPickCardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusPickCardRsp& from);
  void MergeFrom(const InBattleMechanicusPickCardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusPickCardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 2;
  void clear_card_id();
  static const int kCardIdFieldNumber = 2;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 play_index = 4;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 4;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 group_id = 9;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 9;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusPickCardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusPickCardNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusPickCardNotify) */ {
 public:
  InBattleMechanicusPickCardNotify();
  virtual ~InBattleMechanicusPickCardNotify();

  InBattleMechanicusPickCardNotify(const InBattleMechanicusPickCardNotify& from);

  inline InBattleMechanicusPickCardNotify& operator=(const InBattleMechanicusPickCardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusPickCardNotify(InBattleMechanicusPickCardNotify&& from) noexcept
    : InBattleMechanicusPickCardNotify() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusPickCardNotify& operator=(InBattleMechanicusPickCardNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusPickCardNotify& default_instance();

  static inline const InBattleMechanicusPickCardNotify* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusPickCardNotify*>(
               &_InBattleMechanicusPickCardNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(InBattleMechanicusPickCardNotify* other);
  friend void swap(InBattleMechanicusPickCardNotify& a, InBattleMechanicusPickCardNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusPickCardNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusPickCardNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusPickCardNotify& from);
  void MergeFrom(const InBattleMechanicusPickCardNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusPickCardNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 player_uid = 6;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 6;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // uint32 group_id = 7;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 7;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 play_index = 8;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 8;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 card_id = 10;
  void clear_card_id();
  static const int kCardIdFieldNumber = 10;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusPickCardNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 player_uid_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusConfirmCardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusConfirmCardReq) */ {
 public:
  InBattleMechanicusConfirmCardReq();
  virtual ~InBattleMechanicusConfirmCardReq();

  InBattleMechanicusConfirmCardReq(const InBattleMechanicusConfirmCardReq& from);

  inline InBattleMechanicusConfirmCardReq& operator=(const InBattleMechanicusConfirmCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusConfirmCardReq(InBattleMechanicusConfirmCardReq&& from) noexcept
    : InBattleMechanicusConfirmCardReq() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusConfirmCardReq& operator=(InBattleMechanicusConfirmCardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusConfirmCardReq& default_instance();

  static inline const InBattleMechanicusConfirmCardReq* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusConfirmCardReq*>(
               &_InBattleMechanicusConfirmCardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(InBattleMechanicusConfirmCardReq* other);
  friend void swap(InBattleMechanicusConfirmCardReq& a, InBattleMechanicusConfirmCardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusConfirmCardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusConfirmCardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusConfirmCardReq& from);
  void MergeFrom(const InBattleMechanicusConfirmCardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusConfirmCardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 1;
  void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 group_id = 3;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 3;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 play_index = 6;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 6;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusConfirmCardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 play_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusConfirmCardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusConfirmCardRsp) */ {
 public:
  InBattleMechanicusConfirmCardRsp();
  virtual ~InBattleMechanicusConfirmCardRsp();

  InBattleMechanicusConfirmCardRsp(const InBattleMechanicusConfirmCardRsp& from);

  inline InBattleMechanicusConfirmCardRsp& operator=(const InBattleMechanicusConfirmCardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusConfirmCardRsp(InBattleMechanicusConfirmCardRsp&& from) noexcept
    : InBattleMechanicusConfirmCardRsp() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusConfirmCardRsp& operator=(InBattleMechanicusConfirmCardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusConfirmCardRsp& default_instance();

  static inline const InBattleMechanicusConfirmCardRsp* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusConfirmCardRsp*>(
               &_InBattleMechanicusConfirmCardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(InBattleMechanicusConfirmCardRsp* other);
  friend void swap(InBattleMechanicusConfirmCardRsp& a, InBattleMechanicusConfirmCardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusConfirmCardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusConfirmCardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusConfirmCardRsp& from);
  void MergeFrom(const InBattleMechanicusConfirmCardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusConfirmCardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 play_index = 2;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 2;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 group_id = 6;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 6;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 card_id = 14;
  void clear_card_id();
  static const int kCardIdFieldNumber = 14;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusConfirmCardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusConfirmCardNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusConfirmCardNotify) */ {
 public:
  InBattleMechanicusConfirmCardNotify();
  virtual ~InBattleMechanicusConfirmCardNotify();

  InBattleMechanicusConfirmCardNotify(const InBattleMechanicusConfirmCardNotify& from);

  inline InBattleMechanicusConfirmCardNotify& operator=(const InBattleMechanicusConfirmCardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusConfirmCardNotify(InBattleMechanicusConfirmCardNotify&& from) noexcept
    : InBattleMechanicusConfirmCardNotify() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusConfirmCardNotify& operator=(InBattleMechanicusConfirmCardNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusConfirmCardNotify& default_instance();

  static inline const InBattleMechanicusConfirmCardNotify* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusConfirmCardNotify*>(
               &_InBattleMechanicusConfirmCardNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(InBattleMechanicusConfirmCardNotify* other);
  friend void swap(InBattleMechanicusConfirmCardNotify& a, InBattleMechanicusConfirmCardNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusConfirmCardNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusConfirmCardNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusConfirmCardNotify& from);
  void MergeFrom(const InBattleMechanicusConfirmCardNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusConfirmCardNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 player_uid = 2;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 2;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // uint32 group_id = 10;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 10;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 play_index = 11;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 11;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 card_id = 13;
  void clear_card_id();
  static const int kCardIdFieldNumber = 13;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusConfirmCardNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 player_uid_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class InBattleMechanicusCardResultNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusCardResultNotify) */ {
 public:
  InBattleMechanicusCardResultNotify();
  virtual ~InBattleMechanicusCardResultNotify();

  InBattleMechanicusCardResultNotify(const InBattleMechanicusCardResultNotify& from);

  inline InBattleMechanicusCardResultNotify& operator=(const InBattleMechanicusCardResultNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusCardResultNotify(InBattleMechanicusCardResultNotify&& from) noexcept
    : InBattleMechanicusCardResultNotify() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusCardResultNotify& operator=(InBattleMechanicusCardResultNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusCardResultNotify& default_instance();

  static inline const InBattleMechanicusCardResultNotify* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusCardResultNotify*>(
               &_InBattleMechanicusCardResultNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(InBattleMechanicusCardResultNotify* other);
  friend void swap(InBattleMechanicusCardResultNotify& a, InBattleMechanicusCardResultNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusCardResultNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusCardResultNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusCardResultNotify& from);
  void MergeFrom(const InBattleMechanicusCardResultNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusCardResultNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .proto.InBattleMechanicusCardInfo card_list = 9;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 9;
  const ::proto::InBattleMechanicusCardInfo& card_list(int index) const;
  ::proto::InBattleMechanicusCardInfo* mutable_card_list(int index);
  ::proto::InBattleMechanicusCardInfo* add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
      mutable_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
      card_list() const;

  // map<uint32, uint32> player_confirmed_card_map = 12;
  int player_confirmed_card_map_size() const;
  void clear_player_confirmed_card_map();
  static const int kPlayerConfirmedCardMapFieldNumber = 12;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      player_confirmed_card_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_player_confirmed_card_map();

  // uint32 group_id = 2;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 2;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 wait_seconds = 6;
  void clear_wait_seconds();
  static const int kWaitSecondsFieldNumber = 6;
  ::google::protobuf::uint32 wait_seconds() const;
  void set_wait_seconds(::google::protobuf::uint32 value);

  // uint64 wait_begin_time_us = 7;
  void clear_wait_begin_time_us();
  static const int kWaitBeginTimeUsFieldNumber = 7;
  ::google::protobuf::uint64 wait_begin_time_us() const;
  void set_wait_begin_time_us(::google::protobuf::uint64 value);

  // uint32 play_index = 8;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 8;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusCardResultNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo > card_list_;
  public:
  class InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry : public ::google::protobuf::internal::MapEntry<InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry();
    InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      InBattleMechanicusCardResultNotify_PlayerConfirmedCardMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > player_confirmed_card_map_;
  private:
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 wait_seconds_;
  ::google::protobuf::uint64 wait_begin_time_us_;
  ::google::protobuf::uint32 play_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistagePlayFinishStageRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistagePlayFinishStageRsp) */ {
 public:
  MultistagePlayFinishStageRsp();
  virtual ~MultistagePlayFinishStageRsp();

  MultistagePlayFinishStageRsp(const MultistagePlayFinishStageRsp& from);

  inline MultistagePlayFinishStageRsp& operator=(const MultistagePlayFinishStageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistagePlayFinishStageRsp(MultistagePlayFinishStageRsp&& from) noexcept
    : MultistagePlayFinishStageRsp() {
    *this = ::std::move(from);
  }

  inline MultistagePlayFinishStageRsp& operator=(MultistagePlayFinishStageRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistagePlayFinishStageRsp& default_instance();

  static inline const MultistagePlayFinishStageRsp* internal_default_instance() {
    return reinterpret_cast<const MultistagePlayFinishStageRsp*>(
               &_MultistagePlayFinishStageRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(MultistagePlayFinishStageRsp* other);
  friend void swap(MultistagePlayFinishStageRsp& a, MultistagePlayFinishStageRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistagePlayFinishStageRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistagePlayFinishStageRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistagePlayFinishStageRsp& from);
  void MergeFrom(const MultistagePlayFinishStageRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistagePlayFinishStageRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 group_id = 12;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 12;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 play_index = 6;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 6;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.MultistagePlayFinishStageRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistageSettleWatcherInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistageSettleWatcherInfo) */ {
 public:
  MultistageSettleWatcherInfo();
  virtual ~MultistageSettleWatcherInfo();

  MultistageSettleWatcherInfo(const MultistageSettleWatcherInfo& from);

  inline MultistageSettleWatcherInfo& operator=(const MultistageSettleWatcherInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistageSettleWatcherInfo(MultistageSettleWatcherInfo&& from) noexcept
    : MultistageSettleWatcherInfo() {
    *this = ::std::move(from);
  }

  inline MultistageSettleWatcherInfo& operator=(MultistageSettleWatcherInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistageSettleWatcherInfo& default_instance();

  static inline const MultistageSettleWatcherInfo* internal_default_instance() {
    return reinterpret_cast<const MultistageSettleWatcherInfo*>(
               &_MultistageSettleWatcherInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(MultistageSettleWatcherInfo* other);
  friend void swap(MultistageSettleWatcherInfo& a, MultistageSettleWatcherInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistageSettleWatcherInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistageSettleWatcherInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistageSettleWatcherInfo& from);
  void MergeFrom(const MultistageSettleWatcherInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistageSettleWatcherInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cur_progress = 5;
  void clear_cur_progress();
  static const int kCurProgressFieldNumber = 5;
  ::google::protobuf::uint32 cur_progress() const;
  void set_cur_progress(::google::protobuf::uint32 value);

  // uint32 watcher_id = 7;
  void clear_watcher_id();
  static const int kWatcherIdFieldNumber = 7;
  ::google::protobuf::uint32 watcher_id() const;
  void set_watcher_id(::google::protobuf::uint32 value);

  // bool is_inverse = 12;
  void clear_is_inverse();
  static const int kIsInverseFieldNumber = 12;
  bool is_inverse() const;
  void set_is_inverse(bool value);

  // uint32 total_progress = 13;
  void clear_total_progress();
  static const int kTotalProgressFieldNumber = 13;
  ::google::protobuf::uint32 total_progress() const;
  void set_total_progress(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MultistageSettleWatcherInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cur_progress_;
  ::google::protobuf::uint32 watcher_id_;
  bool is_inverse_;
  ::google::protobuf::uint32 total_progress_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusSettleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusSettleNotify) */ {
 public:
  InBattleMechanicusSettleNotify();
  virtual ~InBattleMechanicusSettleNotify();

  InBattleMechanicusSettleNotify(const InBattleMechanicusSettleNotify& from);

  inline InBattleMechanicusSettleNotify& operator=(const InBattleMechanicusSettleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusSettleNotify(InBattleMechanicusSettleNotify&& from) noexcept
    : InBattleMechanicusSettleNotify() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusSettleNotify& operator=(InBattleMechanicusSettleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusSettleNotify& default_instance();

  static inline const InBattleMechanicusSettleNotify* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusSettleNotify*>(
               &_InBattleMechanicusSettleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(InBattleMechanicusSettleNotify* other);
  friend void swap(InBattleMechanicusSettleNotify& a, InBattleMechanicusSettleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusSettleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusSettleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusSettleNotify& from);
  void MergeFrom(const InBattleMechanicusSettleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusSettleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 3;
  int watcher_list_size() const;
  void clear_watcher_list();
  static const int kWatcherListFieldNumber = 3;
  const ::proto::MultistageSettleWatcherInfo& watcher_list(int index) const;
  ::proto::MultistageSettleWatcherInfo* mutable_watcher_list(int index);
  ::proto::MultistageSettleWatcherInfo* add_watcher_list();
  ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >*
      mutable_watcher_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >&
      watcher_list() const;

  // bool is_success = 2;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 2;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 difficulty_percentage = 6;
  void clear_difficulty_percentage();
  static const int kDifficultyPercentageFieldNumber = 6;
  ::google::protobuf::uint32 difficulty_percentage() const;
  void set_difficulty_percentage(::google::protobuf::uint32 value);

  // uint32 total_token = 7;
  void clear_total_token();
  static const int kTotalTokenFieldNumber = 7;
  ::google::protobuf::uint32 total_token() const;
  void set_total_token(::google::protobuf::uint32 value);

  // uint32 real_token = 13;
  void clear_real_token();
  static const int kRealTokenFieldNumber = 13;
  ::google::protobuf::uint32 real_token() const;
  void set_real_token(::google::protobuf::uint32 value);

  // uint64 scene_time_ms = 11;
  void clear_scene_time_ms();
  static const int kSceneTimeMsFieldNumber = 11;
  ::google::protobuf::uint64 scene_time_ms() const;
  void set_scene_time_ms(::google::protobuf::uint64 value);

  // uint32 play_index = 14;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 14;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 group_id = 15;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 15;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusSettleNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo > watcher_list_;
  bool is_success_;
  ::google::protobuf::uint32 difficulty_percentage_;
  ::google::protobuf::uint32 total_token_;
  ::google::protobuf::uint32 real_token_;
  ::google::protobuf::uint64 scene_time_ms_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleMechanicusSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleMechanicusSettleInfo) */ {
 public:
  InBattleMechanicusSettleInfo();
  virtual ~InBattleMechanicusSettleInfo();

  InBattleMechanicusSettleInfo(const InBattleMechanicusSettleInfo& from);

  inline InBattleMechanicusSettleInfo& operator=(const InBattleMechanicusSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleMechanicusSettleInfo(InBattleMechanicusSettleInfo&& from) noexcept
    : InBattleMechanicusSettleInfo() {
    *this = ::std::move(from);
  }

  inline InBattleMechanicusSettleInfo& operator=(InBattleMechanicusSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleMechanicusSettleInfo& default_instance();

  static inline const InBattleMechanicusSettleInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleMechanicusSettleInfo*>(
               &_InBattleMechanicusSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(InBattleMechanicusSettleInfo* other);
  friend void swap(InBattleMechanicusSettleInfo& a, InBattleMechanicusSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleMechanicusSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleMechanicusSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleMechanicusSettleInfo& from);
  void MergeFrom(const InBattleMechanicusSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleMechanicusSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.MultistageSettleWatcherInfo watcher_list = 7;
  int watcher_list_size() const;
  void clear_watcher_list();
  static const int kWatcherListFieldNumber = 7;
  const ::proto::MultistageSettleWatcherInfo& watcher_list(int index) const;
  ::proto::MultistageSettleWatcherInfo* mutable_watcher_list(int index);
  ::proto::MultistageSettleWatcherInfo* add_watcher_list();
  ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >*
      mutable_watcher_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >&
      watcher_list() const;

  // uint32 play_index = 3;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 3;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 total_token = 4;
  void clear_total_token();
  static const int kTotalTokenFieldNumber = 4;
  ::google::protobuf::uint32 total_token() const;
  void set_total_token(::google::protobuf::uint32 value);

  // bool is_success = 6;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 6;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 real_token = 8;
  void clear_real_token();
  static const int kRealTokenFieldNumber = 8;
  ::google::protobuf::uint32 real_token() const;
  void set_real_token(::google::protobuf::uint32 value);

  // uint32 difficulty_percentage = 10;
  void clear_difficulty_percentage();
  static const int kDifficultyPercentageFieldNumber = 10;
  ::google::protobuf::uint32 difficulty_percentage() const;
  void set_difficulty_percentage(::google::protobuf::uint32 value);

  // uint32 group_id = 13;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 13;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint64 scene_time_ms = 15;
  void clear_scene_time_ms();
  static const int kSceneTimeMsFieldNumber = 15;
  ::google::protobuf::uint64 scene_time_ms() const;
  void set_scene_time_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleMechanicusSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo > watcher_list_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 total_token_;
  bool is_success_;
  ::google::protobuf::uint32 real_token_;
  ::google::protobuf::uint32 difficulty_percentage_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint64 scene_time_ms_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistagePlaySettleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistagePlaySettleNotify) */ {
 public:
  MultistagePlaySettleNotify();
  virtual ~MultistagePlaySettleNotify();

  MultistagePlaySettleNotify(const MultistagePlaySettleNotify& from);

  inline MultistagePlaySettleNotify& operator=(const MultistagePlaySettleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistagePlaySettleNotify(MultistagePlaySettleNotify&& from) noexcept
    : MultistagePlaySettleNotify() {
    *this = ::std::move(from);
  }

  inline MultistagePlaySettleNotify& operator=(MultistagePlaySettleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistagePlaySettleNotify& default_instance();

  enum DetailCase {
    kMechanicusSettleInfo = 1402,
    kChessSettleInfo = 1283,
    kIrodoriChessSettleInfo = 612,
    DETAIL_NOT_SET = 0,
  };

  static inline const MultistagePlaySettleNotify* internal_default_instance() {
    return reinterpret_cast<const MultistagePlaySettleNotify*>(
               &_MultistagePlaySettleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(MultistagePlaySettleNotify* other);
  friend void swap(MultistagePlaySettleNotify& a, MultistagePlaySettleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistagePlaySettleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistagePlaySettleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistagePlaySettleNotify& from);
  void MergeFrom(const MultistagePlaySettleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistagePlaySettleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 group_id = 4;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 4;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 play_index = 14;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 14;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // .proto.InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
  bool has_mechanicus_settle_info() const;
  void clear_mechanicus_settle_info();
  static const int kMechanicusSettleInfoFieldNumber = 1402;
  const ::proto::InBattleMechanicusSettleInfo& mechanicus_settle_info() const;
  ::proto::InBattleMechanicusSettleInfo* mutable_mechanicus_settle_info();
  ::proto::InBattleMechanicusSettleInfo* release_mechanicus_settle_info();
  void set_allocated_mechanicus_settle_info(::proto::InBattleMechanicusSettleInfo* mechanicus_settle_info);

  // .proto.InBattleChessSettleInfo chess_settle_info = 1283;
  bool has_chess_settle_info() const;
  void clear_chess_settle_info();
  static const int kChessSettleInfoFieldNumber = 1283;
  const ::proto::InBattleChessSettleInfo& chess_settle_info() const;
  ::proto::InBattleChessSettleInfo* mutable_chess_settle_info();
  ::proto::InBattleChessSettleInfo* release_chess_settle_info();
  void set_allocated_chess_settle_info(::proto::InBattleChessSettleInfo* chess_settle_info);

  // .proto.InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
  bool has_irodori_chess_settle_info() const;
  void clear_irodori_chess_settle_info();
  static const int kIrodoriChessSettleInfoFieldNumber = 612;
  const ::proto::InBattleIrodoriChessSettleInfo& irodori_chess_settle_info() const;
  ::proto::InBattleIrodoriChessSettleInfo* mutable_irodori_chess_settle_info();
  ::proto::InBattleIrodoriChessSettleInfo* release_irodori_chess_settle_info();
  void set_allocated_irodori_chess_settle_info(::proto::InBattleIrodoriChessSettleInfo* irodori_chess_settle_info);

  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:proto.MultistagePlaySettleNotify)
 private:
  void set_has_mechanicus_settle_info();
  void set_has_chess_settle_info();
  void set_has_irodori_chess_settle_info();

  inline bool has_detail() const;
  void clear_detail();
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 play_index_;
  union DetailUnion {
    DetailUnion() {}
    ::proto::InBattleMechanicusSettleInfo* mechanicus_settle_info_;
    ::proto::InBattleChessSettleInfo* chess_settle_info_;
    ::proto::InBattleIrodoriChessSettleInfo* irodori_chess_settle_info_;
  } detail_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistagePlayStageEndNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistagePlayStageEndNotify) */ {
 public:
  MultistagePlayStageEndNotify();
  virtual ~MultistagePlayStageEndNotify();

  MultistagePlayStageEndNotify(const MultistagePlayStageEndNotify& from);

  inline MultistagePlayStageEndNotify& operator=(const MultistagePlayStageEndNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistagePlayStageEndNotify(MultistagePlayStageEndNotify&& from) noexcept
    : MultistagePlayStageEndNotify() {
    *this = ::std::move(from);
  }

  inline MultistagePlayStageEndNotify& operator=(MultistagePlayStageEndNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistagePlayStageEndNotify& default_instance();

  static inline const MultistagePlayStageEndNotify* internal_default_instance() {
    return reinterpret_cast<const MultistagePlayStageEndNotify*>(
               &_MultistagePlayStageEndNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(MultistagePlayStageEndNotify* other);
  friend void swap(MultistagePlayStageEndNotify& a, MultistagePlayStageEndNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistagePlayStageEndNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistagePlayStageEndNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistagePlayStageEndNotify& from);
  void MergeFrom(const MultistagePlayStageEndNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistagePlayStageEndNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 play_index = 9;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 9;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // uint32 group_id = 15;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 15;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MultistagePlayStageEndNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 play_index_;
  ::google::protobuf::uint32 group_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MultistagePlayEndNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.MultistagePlayEndNotify) */ {
 public:
  MultistagePlayEndNotify();
  virtual ~MultistagePlayEndNotify();

  MultistagePlayEndNotify(const MultistagePlayEndNotify& from);

  inline MultistagePlayEndNotify& operator=(const MultistagePlayEndNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MultistagePlayEndNotify(MultistagePlayEndNotify&& from) noexcept
    : MultistagePlayEndNotify() {
    *this = ::std::move(from);
  }

  inline MultistagePlayEndNotify& operator=(MultistagePlayEndNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MultistagePlayEndNotify& default_instance();

  static inline const MultistagePlayEndNotify* internal_default_instance() {
    return reinterpret_cast<const MultistagePlayEndNotify*>(
               &_MultistagePlayEndNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(MultistagePlayEndNotify* other);
  friend void swap(MultistagePlayEndNotify& a, MultistagePlayEndNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MultistagePlayEndNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  MultistagePlayEndNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MultistagePlayEndNotify& from);
  void MergeFrom(const MultistagePlayEndNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MultistagePlayEndNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 group_id = 5;
  void clear_group_id();
  static const int kGroupIdFieldNumber = 5;
  ::google::protobuf::uint32 group_id() const;
  void set_group_id(::google::protobuf::uint32 value);

  // uint32 play_index = 13;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 13;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.MultistagePlayEndNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 group_id_;
  ::google::protobuf::uint32 play_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FleurFairBuffEnergyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FleurFairBuffEnergyNotify) */ {
 public:
  FleurFairBuffEnergyNotify();
  virtual ~FleurFairBuffEnergyNotify();

  FleurFairBuffEnergyNotify(const FleurFairBuffEnergyNotify& from);

  inline FleurFairBuffEnergyNotify& operator=(const FleurFairBuffEnergyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleurFairBuffEnergyNotify(FleurFairBuffEnergyNotify&& from) noexcept
    : FleurFairBuffEnergyNotify() {
    *this = ::std::move(from);
  }

  inline FleurFairBuffEnergyNotify& operator=(FleurFairBuffEnergyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleurFairBuffEnergyNotify& default_instance();

  static inline const FleurFairBuffEnergyNotify* internal_default_instance() {
    return reinterpret_cast<const FleurFairBuffEnergyNotify*>(
               &_FleurFairBuffEnergyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(FleurFairBuffEnergyNotify* other);
  friend void swap(FleurFairBuffEnergyNotify& a, FleurFairBuffEnergyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleurFairBuffEnergyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FleurFairBuffEnergyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleurFairBuffEnergyNotify& from);
  void MergeFrom(const FleurFairBuffEnergyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleurFairBuffEnergyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 energy = 4;
  void clear_energy();
  static const int kEnergyFieldNumber = 4;
  ::google::protobuf::uint32 energy() const;
  void set_energy(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FleurFairBuffEnergyNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 energy_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class FleurFairGallerySettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FleurFairGallerySettleInfo) */ {
 public:
  FleurFairGallerySettleInfo();
  virtual ~FleurFairGallerySettleInfo();

  FleurFairGallerySettleInfo(const FleurFairGallerySettleInfo& from);

  inline FleurFairGallerySettleInfo& operator=(const FleurFairGallerySettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleurFairGallerySettleInfo(FleurFairGallerySettleInfo&& from) noexcept
    : FleurFairGallerySettleInfo() {
    *this = ::std::move(from);
  }

  inline FleurFairGallerySettleInfo& operator=(FleurFairGallerySettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleurFairGallerySettleInfo& default_instance();

  static inline const FleurFairGallerySettleInfo* internal_default_instance() {
    return reinterpret_cast<const FleurFairGallerySettleInfo*>(
               &_FleurFairGallerySettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(FleurFairGallerySettleInfo* other);
  friend void swap(FleurFairGallerySettleInfo& a, FleurFairGallerySettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleurFairGallerySettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FleurFairGallerySettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleurFairGallerySettleInfo& from);
  void MergeFrom(const FleurFairGallerySettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleurFairGallerySettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, int32> energy_stat_map = 6;
  int energy_stat_map_size() const;
  void clear_energy_stat_map();
  static const int kEnergyStatMapFieldNumber = 6;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >&
      energy_stat_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >*
      mutable_energy_stat_map();

  // bool is_success = 1;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 1;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 energy = 2;
  void clear_energy();
  static const int kEnergyFieldNumber = 2;
  ::google::protobuf::uint32 energy() const;
  void set_energy(::google::protobuf::uint32 value);

  // uint32 gallery_stage_count = 9;
  void clear_gallery_stage_count();
  static const int kGalleryStageCountFieldNumber = 9;
  ::google::protobuf::uint32 gallery_stage_count() const;
  void set_gallery_stage_count(::google::protobuf::uint32 value);

  // uint32 gallery_stage_index = 11;
  void clear_gallery_stage_index();
  static const int kGalleryStageIndexFieldNumber = 11;
  ::google::protobuf::uint32 gallery_stage_index() const;
  void set_gallery_stage_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FleurFairGallerySettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class FleurFairGallerySettleInfo_EnergyStatMapEntry : public ::google::protobuf::internal::MapEntry<FleurFairGallerySettleInfo_EnergyStatMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<FleurFairGallerySettleInfo_EnergyStatMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > SuperType;
    FleurFairGallerySettleInfo_EnergyStatMapEntry();
    FleurFairGallerySettleInfo_EnergyStatMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const FleurFairGallerySettleInfo_EnergyStatMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_FleurFairGallerySettleInfo_EnergyStatMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      FleurFairGallerySettleInfo_EnergyStatMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::int32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      0 > energy_stat_map_;
  private:
  bool is_success_;
  ::google::protobuf::uint32 energy_;
  ::google::protobuf::uint32 gallery_stage_count_;
  ::google::protobuf::uint32 gallery_stage_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FleurFairPlayerStatInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FleurFairPlayerStatInfo) */ {
 public:
  FleurFairPlayerStatInfo();
  virtual ~FleurFairPlayerStatInfo();

  FleurFairPlayerStatInfo(const FleurFairPlayerStatInfo& from);

  inline FleurFairPlayerStatInfo& operator=(const FleurFairPlayerStatInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleurFairPlayerStatInfo(FleurFairPlayerStatInfo&& from) noexcept
    : FleurFairPlayerStatInfo() {
    *this = ::std::move(from);
  }

  inline FleurFairPlayerStatInfo& operator=(FleurFairPlayerStatInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleurFairPlayerStatInfo& default_instance();

  static inline const FleurFairPlayerStatInfo* internal_default_instance() {
    return reinterpret_cast<const FleurFairPlayerStatInfo*>(
               &_FleurFairPlayerStatInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(FleurFairPlayerStatInfo* other);
  friend void swap(FleurFairPlayerStatInfo& a, FleurFairPlayerStatInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleurFairPlayerStatInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FleurFairPlayerStatInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleurFairPlayerStatInfo& from);
  void MergeFrom(const FleurFairPlayerStatInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleurFairPlayerStatInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string online_id = 11;
  void clear_online_id();
  static const int kOnlineIdFieldNumber = 11;
  const ::std::string& online_id() const;
  void set_online_id(const ::std::string& value);
  #if LANG_CXX11
  void set_online_id(::std::string&& value);
  #endif
  void set_online_id(const char* value);
  void set_online_id(const char* value, size_t size);
  ::std::string* mutable_online_id();
  ::std::string* release_online_id();
  void set_allocated_online_id(::std::string* online_id);

  // string nick_name = 15;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 15;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_name(::std::string&& value);
  #endif
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // .proto.ProfilePicture profile_picture = 1;
  bool has_profile_picture() const;
  void clear_profile_picture();
  static const int kProfilePictureFieldNumber = 1;
  const ::proto::ProfilePicture& profile_picture() const;
  ::proto::ProfilePicture* mutable_profile_picture();
  ::proto::ProfilePicture* release_profile_picture();
  void set_allocated_profile_picture(::proto::ProfilePicture* profile_picture);

  // uint32 stat_id = 3;
  void clear_stat_id();
  static const int kStatIdFieldNumber = 3;
  ::google::protobuf::uint32 stat_id() const;
  void set_stat_id(::google::protobuf::uint32 value);

  // int32 param = 5;
  void clear_param();
  static const int kParamFieldNumber = 5;
  ::google::protobuf::int32 param() const;
  void set_param(::google::protobuf::int32 value);

  // uint32 head_image = 6;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 6;
  ::google::protobuf::uint32 head_image() const;
  void set_head_image(::google::protobuf::uint32 value);

  // uint32 uid = 8;
  void clear_uid();
  static const int kUidFieldNumber = 8;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FleurFairPlayerStatInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr online_id_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::proto::ProfilePicture* profile_picture_;
  ::google::protobuf::uint32 stat_id_;
  ::google::protobuf::int32 param_;
  ::google::protobuf::uint32 head_image_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FleurFairBossSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FleurFairBossSettleInfo) */ {
 public:
  FleurFairBossSettleInfo();
  virtual ~FleurFairBossSettleInfo();

  FleurFairBossSettleInfo(const FleurFairBossSettleInfo& from);

  inline FleurFairBossSettleInfo& operator=(const FleurFairBossSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleurFairBossSettleInfo(FleurFairBossSettleInfo&& from) noexcept
    : FleurFairBossSettleInfo() {
    *this = ::std::move(from);
  }

  inline FleurFairBossSettleInfo& operator=(FleurFairBossSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleurFairBossSettleInfo& default_instance();

  static inline const FleurFairBossSettleInfo* internal_default_instance() {
    return reinterpret_cast<const FleurFairBossSettleInfo*>(
               &_FleurFairBossSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(FleurFairBossSettleInfo* other);
  friend void swap(FleurFairBossSettleInfo& a, FleurFairBossSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleurFairBossSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FleurFairBossSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleurFairBossSettleInfo& from);
  void MergeFrom(const FleurFairBossSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleurFairBossSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.FleurFairPlayerStatInfo stat_info_list = 1;
  int stat_info_list_size() const;
  void clear_stat_info_list();
  static const int kStatInfoListFieldNumber = 1;
  const ::proto::FleurFairPlayerStatInfo& stat_info_list(int index) const;
  ::proto::FleurFairPlayerStatInfo* mutable_stat_info_list(int index);
  ::proto::FleurFairPlayerStatInfo* add_stat_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::FleurFairPlayerStatInfo >*
      mutable_stat_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::FleurFairPlayerStatInfo >&
      stat_info_list() const;

  // uint32 cost_time = 8;
  void clear_cost_time();
  static const int kCostTimeFieldNumber = 8;
  ::google::protobuf::uint32 cost_time() const;
  void set_cost_time(::google::protobuf::uint32 value);

  // bool is_success = 10;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 10;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 energy = 12;
  void clear_energy();
  static const int kEnergyFieldNumber = 12;
  ::google::protobuf::uint32 energy() const;
  void set_energy(::google::protobuf::uint32 value);

  // uint32 reward_token_num = 15;
  void clear_reward_token_num();
  static const int kRewardTokenNumFieldNumber = 15;
  ::google::protobuf::uint32 reward_token_num() const;
  void set_reward_token_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.FleurFairBossSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::FleurFairPlayerStatInfo > stat_info_list_;
  ::google::protobuf::uint32 cost_time_;
  bool is_success_;
  ::google::protobuf::uint32 energy_;
  ::google::protobuf::uint32 reward_token_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FleurFairStageSettleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FleurFairStageSettleNotify) */ {
 public:
  FleurFairStageSettleNotify();
  virtual ~FleurFairStageSettleNotify();

  FleurFairStageSettleNotify(const FleurFairStageSettleNotify& from);

  inline FleurFairStageSettleNotify& operator=(const FleurFairStageSettleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleurFairStageSettleNotify(FleurFairStageSettleNotify&& from) noexcept
    : FleurFairStageSettleNotify() {
    *this = ::std::move(from);
  }

  inline FleurFairStageSettleNotify& operator=(FleurFairStageSettleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleurFairStageSettleNotify& default_instance();

  enum DetailCase {
    kGallerySettleInfo = 13,
    kBossSettleInfo = 14,
    DETAIL_NOT_SET = 0,
  };

  static inline const FleurFairStageSettleNotify* internal_default_instance() {
    return reinterpret_cast<const FleurFairStageSettleNotify*>(
               &_FleurFairStageSettleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(FleurFairStageSettleNotify* other);
  friend void swap(FleurFairStageSettleNotify& a, FleurFairStageSettleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleurFairStageSettleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FleurFairStageSettleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleurFairStageSettleNotify& from);
  void MergeFrom(const FleurFairStageSettleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleurFairStageSettleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 stage_type = 10;
  void clear_stage_type();
  static const int kStageTypeFieldNumber = 10;
  ::google::protobuf::uint32 stage_type() const;
  void set_stage_type(::google::protobuf::uint32 value);

  // .proto.FleurFairGallerySettleInfo gallery_settle_info = 13;
  bool has_gallery_settle_info() const;
  void clear_gallery_settle_info();
  static const int kGallerySettleInfoFieldNumber = 13;
  const ::proto::FleurFairGallerySettleInfo& gallery_settle_info() const;
  ::proto::FleurFairGallerySettleInfo* mutable_gallery_settle_info();
  ::proto::FleurFairGallerySettleInfo* release_gallery_settle_info();
  void set_allocated_gallery_settle_info(::proto::FleurFairGallerySettleInfo* gallery_settle_info);

  // .proto.FleurFairBossSettleInfo boss_settle_info = 14;
  bool has_boss_settle_info() const;
  void clear_boss_settle_info();
  static const int kBossSettleInfoFieldNumber = 14;
  const ::proto::FleurFairBossSettleInfo& boss_settle_info() const;
  ::proto::FleurFairBossSettleInfo* mutable_boss_settle_info();
  ::proto::FleurFairBossSettleInfo* release_boss_settle_info();
  void set_allocated_boss_settle_info(::proto::FleurFairBossSettleInfo* boss_settle_info);

  DetailCase detail_case() const;
  // @@protoc_insertion_point(class_scope:proto.FleurFairStageSettleNotify)
 private:
  void set_has_gallery_settle_info();
  void set_has_boss_settle_info();

  inline bool has_detail() const;
  void clear_detail();
  inline void clear_has_detail();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 stage_type_;
  union DetailUnion {
    DetailUnion() {}
    ::proto::FleurFairGallerySettleInfo* gallery_settle_info_;
    ::proto::FleurFairBossSettleInfo* boss_settle_info_;
  } detail_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FleurFairFinishGalleryStageNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.FleurFairFinishGalleryStageNotify) */ {
 public:
  FleurFairFinishGalleryStageNotify();
  virtual ~FleurFairFinishGalleryStageNotify();

  FleurFairFinishGalleryStageNotify(const FleurFairFinishGalleryStageNotify& from);

  inline FleurFairFinishGalleryStageNotify& operator=(const FleurFairFinishGalleryStageNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FleurFairFinishGalleryStageNotify(FleurFairFinishGalleryStageNotify&& from) noexcept
    : FleurFairFinishGalleryStageNotify() {
    *this = ::std::move(from);
  }

  inline FleurFairFinishGalleryStageNotify& operator=(FleurFairFinishGalleryStageNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FleurFairFinishGalleryStageNotify& default_instance();

  static inline const FleurFairFinishGalleryStageNotify* internal_default_instance() {
    return reinterpret_cast<const FleurFairFinishGalleryStageNotify*>(
               &_FleurFairFinishGalleryStageNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(FleurFairFinishGalleryStageNotify* other);
  friend void swap(FleurFairFinishGalleryStageNotify& a, FleurFairFinishGalleryStageNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FleurFairFinishGalleryStageNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  FleurFairFinishGalleryStageNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FleurFairFinishGalleryStageNotify& from);
  void MergeFrom(const FleurFairFinishGalleryStageNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FleurFairFinishGalleryStageNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.FleurFairFinishGalleryStageNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekPlayerBattleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekPlayerBattleInfo) */ {
 public:
  HideAndSeekPlayerBattleInfo();
  virtual ~HideAndSeekPlayerBattleInfo();

  HideAndSeekPlayerBattleInfo(const HideAndSeekPlayerBattleInfo& from);

  inline HideAndSeekPlayerBattleInfo& operator=(const HideAndSeekPlayerBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekPlayerBattleInfo(HideAndSeekPlayerBattleInfo&& from) noexcept
    : HideAndSeekPlayerBattleInfo() {
    *this = ::std::move(from);
  }

  inline HideAndSeekPlayerBattleInfo& operator=(HideAndSeekPlayerBattleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekPlayerBattleInfo& default_instance();

  static inline const HideAndSeekPlayerBattleInfo* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekPlayerBattleInfo*>(
               &_HideAndSeekPlayerBattleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(HideAndSeekPlayerBattleInfo* other);
  friend void swap(HideAndSeekPlayerBattleInfo& a, HideAndSeekPlayerBattleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekPlayerBattleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekPlayerBattleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekPlayerBattleInfo& from);
  void MergeFrom(const HideAndSeekPlayerBattleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekPlayerBattleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 skill_list = 15;
  int skill_list_size() const;
  void clear_skill_list();
  static const int kSkillListFieldNumber = 15;
  ::google::protobuf::uint32 skill_list(int index) const;
  void set_skill_list(int index, ::google::protobuf::uint32 value);
  void add_skill_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_list();

  // uint32 costume_id = 3;
  void clear_costume_id();
  static const int kCostumeIdFieldNumber = 3;
  ::google::protobuf::uint32 costume_id() const;
  void set_costume_id(::google::protobuf::uint32 value);

  // uint32 avatar_id = 6;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 6;
  ::google::protobuf::uint32 avatar_id() const;
  void set_avatar_id(::google::protobuf::uint32 value);

  // bool is_ready = 12;
  void clear_is_ready();
  static const int kIsReadyFieldNumber = 12;
  bool is_ready() const;
  void set_is_ready(bool value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekPlayerBattleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_list_;
  mutable int _skill_list_cached_byte_size_;
  ::google::protobuf::uint32 costume_id_;
  ::google::protobuf::uint32 avatar_id_;
  bool is_ready_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class HideAndSeekStageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekStageInfo) */ {
 public:
  HideAndSeekStageInfo();
  virtual ~HideAndSeekStageInfo();

  HideAndSeekStageInfo(const HideAndSeekStageInfo& from);

  inline HideAndSeekStageInfo& operator=(const HideAndSeekStageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekStageInfo(HideAndSeekStageInfo&& from) noexcept
    : HideAndSeekStageInfo() {
    *this = ::std::move(from);
  }

  inline HideAndSeekStageInfo& operator=(HideAndSeekStageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekStageInfo& default_instance();

  static inline const HideAndSeekStageInfo* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekStageInfo*>(
               &_HideAndSeekStageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(HideAndSeekStageInfo* other);
  friend void swap(HideAndSeekStageInfo& a, HideAndSeekStageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekStageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekStageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekStageInfo& from);
  void MergeFrom(const HideAndSeekStageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekStageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint32 hider_uid_list = 1;
  int hider_uid_list_size() const;
  void clear_hider_uid_list();
  static const int kHiderUidListFieldNumber = 1;
  ::google::protobuf::uint32 hider_uid_list(int index) const;
  void set_hider_uid_list(int index, ::google::protobuf::uint32 value);
  void add_hider_uid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hider_uid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hider_uid_list();

  // map<uint32, .proto.HideAndSeekPlayerBattleInfo> battle_info_map = 2;
  int battle_info_map_size() const;
  void clear_battle_info_map();
  static const int kBattleInfoMapFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >&
      battle_info_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >*
      mutable_battle_info_map();

  // bool is_record_score = 3;
  void clear_is_record_score();
  static const int kIsRecordScoreFieldNumber = 3;
  bool is_record_score() const;
  void set_is_record_score(bool value);

  // .proto.HideAndSeekStageType stage_type = 7;
  void clear_stage_type();
  static const int kStageTypeFieldNumber = 7;
  ::proto::HideAndSeekStageType stage_type() const;
  void set_stage_type(::proto::HideAndSeekStageType value);

  // uint32 map_id = 8;
  void clear_map_id();
  static const int kMapIdFieldNumber = 8;
  ::google::protobuf::uint32 map_id() const;
  void set_map_id(::google::protobuf::uint32 value);

  // uint32 hunter_uid = 10;
  void clear_hunter_uid();
  static const int kHunterUidFieldNumber = 10;
  ::google::protobuf::uint32 hunter_uid() const;
  void set_hunter_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekStageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hider_uid_list_;
  mutable int _hider_uid_list_cached_byte_size_;
  public:
  class HideAndSeekStageInfo_BattleInfoMapEntry : public ::google::protobuf::internal::MapEntry<HideAndSeekStageInfo_BattleInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<HideAndSeekStageInfo_BattleInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    HideAndSeekStageInfo_BattleInfoMapEntry();
    HideAndSeekStageInfo_BattleInfoMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const HideAndSeekStageInfo_BattleInfoMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_HideAndSeekStageInfo_BattleInfoMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      HideAndSeekStageInfo_BattleInfoMapEntry,
      ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > battle_info_map_;
  private:
  bool is_record_score_;
  int stage_type_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 hunter_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekSelectAvatarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekSelectAvatarReq) */ {
 public:
  HideAndSeekSelectAvatarReq();
  virtual ~HideAndSeekSelectAvatarReq();

  HideAndSeekSelectAvatarReq(const HideAndSeekSelectAvatarReq& from);

  inline HideAndSeekSelectAvatarReq& operator=(const HideAndSeekSelectAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekSelectAvatarReq(HideAndSeekSelectAvatarReq&& from) noexcept
    : HideAndSeekSelectAvatarReq() {
    *this = ::std::move(from);
  }

  inline HideAndSeekSelectAvatarReq& operator=(HideAndSeekSelectAvatarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekSelectAvatarReq& default_instance();

  static inline const HideAndSeekSelectAvatarReq* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekSelectAvatarReq*>(
               &_HideAndSeekSelectAvatarReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(HideAndSeekSelectAvatarReq* other);
  friend void swap(HideAndSeekSelectAvatarReq& a, HideAndSeekSelectAvatarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekSelectAvatarReq* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekSelectAvatarReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekSelectAvatarReq& from);
  void MergeFrom(const HideAndSeekSelectAvatarReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekSelectAvatarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 avatar_id = 8;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 8;
  ::google::protobuf::uint32 avatar_id() const;
  void set_avatar_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekSelectAvatarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 avatar_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekSelectAvatarRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekSelectAvatarRsp) */ {
 public:
  HideAndSeekSelectAvatarRsp();
  virtual ~HideAndSeekSelectAvatarRsp();

  HideAndSeekSelectAvatarRsp(const HideAndSeekSelectAvatarRsp& from);

  inline HideAndSeekSelectAvatarRsp& operator=(const HideAndSeekSelectAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekSelectAvatarRsp(HideAndSeekSelectAvatarRsp&& from) noexcept
    : HideAndSeekSelectAvatarRsp() {
    *this = ::std::move(from);
  }

  inline HideAndSeekSelectAvatarRsp& operator=(HideAndSeekSelectAvatarRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekSelectAvatarRsp& default_instance();

  static inline const HideAndSeekSelectAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekSelectAvatarRsp*>(
               &_HideAndSeekSelectAvatarRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(HideAndSeekSelectAvatarRsp* other);
  friend void swap(HideAndSeekSelectAvatarRsp& a, HideAndSeekSelectAvatarRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekSelectAvatarRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekSelectAvatarRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekSelectAvatarRsp& from);
  void MergeFrom(const HideAndSeekSelectAvatarRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekSelectAvatarRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 avatar_id = 3;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 3;
  ::google::protobuf::uint32 avatar_id() const;
  void set_avatar_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekSelectAvatarRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 avatar_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekSetReadyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekSetReadyReq) */ {
 public:
  HideAndSeekSetReadyReq();
  virtual ~HideAndSeekSetReadyReq();

  HideAndSeekSetReadyReq(const HideAndSeekSetReadyReq& from);

  inline HideAndSeekSetReadyReq& operator=(const HideAndSeekSetReadyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekSetReadyReq(HideAndSeekSetReadyReq&& from) noexcept
    : HideAndSeekSetReadyReq() {
    *this = ::std::move(from);
  }

  inline HideAndSeekSetReadyReq& operator=(HideAndSeekSetReadyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekSetReadyReq& default_instance();

  static inline const HideAndSeekSetReadyReq* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekSetReadyReq*>(
               &_HideAndSeekSetReadyReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(HideAndSeekSetReadyReq* other);
  friend void swap(HideAndSeekSetReadyReq& a, HideAndSeekSetReadyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekSetReadyReq* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekSetReadyReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekSetReadyReq& from);
  void MergeFrom(const HideAndSeekSetReadyReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekSetReadyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekSetReadyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekSetReadyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekSetReadyRsp) */ {
 public:
  HideAndSeekSetReadyRsp();
  virtual ~HideAndSeekSetReadyRsp();

  HideAndSeekSetReadyRsp(const HideAndSeekSetReadyRsp& from);

  inline HideAndSeekSetReadyRsp& operator=(const HideAndSeekSetReadyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekSetReadyRsp(HideAndSeekSetReadyRsp&& from) noexcept
    : HideAndSeekSetReadyRsp() {
    *this = ::std::move(from);
  }

  inline HideAndSeekSetReadyRsp& operator=(HideAndSeekSetReadyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekSetReadyRsp& default_instance();

  static inline const HideAndSeekSetReadyRsp* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekSetReadyRsp*>(
               &_HideAndSeekSetReadyRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(HideAndSeekSetReadyRsp* other);
  friend void swap(HideAndSeekSetReadyRsp& a, HideAndSeekSetReadyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekSetReadyRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekSetReadyRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekSetReadyRsp& from);
  void MergeFrom(const HideAndSeekSetReadyRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekSetReadyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 11;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 11;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekSetReadyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekSettleInfo) */ {
 public:
  HideAndSeekSettleInfo();
  virtual ~HideAndSeekSettleInfo();

  HideAndSeekSettleInfo(const HideAndSeekSettleInfo& from);

  inline HideAndSeekSettleInfo& operator=(const HideAndSeekSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekSettleInfo(HideAndSeekSettleInfo&& from) noexcept
    : HideAndSeekSettleInfo() {
    *this = ::std::move(from);
  }

  inline HideAndSeekSettleInfo& operator=(HideAndSeekSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekSettleInfo& default_instance();

  static inline const HideAndSeekSettleInfo* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekSettleInfo*>(
               &_HideAndSeekSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(HideAndSeekSettleInfo* other);
  friend void swap(HideAndSeekSettleInfo& a, HideAndSeekSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekSettleInfo& from);
  void MergeFrom(const HideAndSeekSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ExhibitionDisplayInfo card_list = 8;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 8;
  const ::proto::ExhibitionDisplayInfo& card_list(int index) const;
  ::proto::ExhibitionDisplayInfo* mutable_card_list(int index);
  ::proto::ExhibitionDisplayInfo* add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
      mutable_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
      card_list() const;

  // string nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // string online_id = 10;
  void clear_online_id();
  static const int kOnlineIdFieldNumber = 10;
  const ::std::string& online_id() const;
  void set_online_id(const ::std::string& value);
  #if LANG_CXX11
  void set_online_id(::std::string&& value);
  #endif
  void set_online_id(const char* value);
  void set_online_id(const char* value, size_t size);
  ::std::string* mutable_online_id();
  ::std::string* release_online_id();
  void set_allocated_online_id(::std::string* online_id);

  // .proto.ProfilePicture profile_picture = 1;
  bool has_profile_picture() const;
  void clear_profile_picture();
  static const int kProfilePictureFieldNumber = 1;
  const ::proto::ProfilePicture& profile_picture() const;
  ::proto::ProfilePicture* mutable_profile_picture();
  ::proto::ProfilePicture* release_profile_picture();
  void set_allocated_profile_picture(::proto::ProfilePicture* profile_picture);

  // uint32 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 head_image = 4;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 4;
  ::google::protobuf::uint32 head_image() const;
  void set_head_image(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo > card_list_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::google::protobuf::internal::ArenaStringPtr online_id_;
  ::proto::ProfilePicture* profile_picture_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 head_image_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekSettleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekSettleNotify) */ {
 public:
  HideAndSeekSettleNotify();
  virtual ~HideAndSeekSettleNotify();

  HideAndSeekSettleNotify(const HideAndSeekSettleNotify& from);

  inline HideAndSeekSettleNotify& operator=(const HideAndSeekSettleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekSettleNotify(HideAndSeekSettleNotify&& from) noexcept
    : HideAndSeekSettleNotify() {
    *this = ::std::move(from);
  }

  inline HideAndSeekSettleNotify& operator=(HideAndSeekSettleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekSettleNotify& default_instance();

  static inline const HideAndSeekSettleNotify* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekSettleNotify*>(
               &_HideAndSeekSettleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(HideAndSeekSettleNotify* other);
  friend void swap(HideAndSeekSettleNotify& a, HideAndSeekSettleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekSettleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekSettleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekSettleNotify& from);
  void MergeFrom(const HideAndSeekSettleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekSettleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HideAndSeekSettleNotify_SettleReason SettleReason;
  static const SettleReason SETTLE_REASON_TIME_OUT =
    HideAndSeekSettleNotify_SettleReason_SETTLE_REASON_TIME_OUT;
  static const SettleReason SETTLE_PLAY_END =
    HideAndSeekSettleNotify_SettleReason_SETTLE_PLAY_END;
  static const SettleReason SETTLE_PLAYER_QUIT =
    HideAndSeekSettleNotify_SettleReason_SETTLE_PLAYER_QUIT;
  static inline bool SettleReason_IsValid(int value) {
    return HideAndSeekSettleNotify_SettleReason_IsValid(value);
  }
  static const SettleReason SettleReason_MIN =
    HideAndSeekSettleNotify_SettleReason_SettleReason_MIN;
  static const SettleReason SettleReason_MAX =
    HideAndSeekSettleNotify_SettleReason_SettleReason_MAX;
  static const int SettleReason_ARRAYSIZE =
    HideAndSeekSettleNotify_SettleReason_SettleReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SettleReason_descriptor() {
    return HideAndSeekSettleNotify_SettleReason_descriptor();
  }
  static inline const ::std::string& SettleReason_Name(SettleReason value) {
    return HideAndSeekSettleNotify_SettleReason_Name(value);
  }
  static inline bool SettleReason_Parse(const ::std::string& name,
      SettleReason* value) {
    return HideAndSeekSettleNotify_SettleReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .proto.HideAndSeekSettleInfo settle_info_list = 8;
  int settle_info_list_size() const;
  void clear_settle_info_list();
  static const int kSettleInfoListFieldNumber = 8;
  const ::proto::HideAndSeekSettleInfo& settle_info_list(int index) const;
  ::proto::HideAndSeekSettleInfo* mutable_settle_info_list(int index);
  ::proto::HideAndSeekSettleInfo* add_settle_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::HideAndSeekSettleInfo >*
      mutable_settle_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::HideAndSeekSettleInfo >&
      settle_info_list() const;

  // repeated .proto.ExhibitionDisplayInfo score_list = 9;
  int score_list_size() const;
  void clear_score_list();
  static const int kScoreListFieldNumber = 9;
  const ::proto::ExhibitionDisplayInfo& score_list(int index) const;
  ::proto::ExhibitionDisplayInfo* mutable_score_list(int index);
  ::proto::ExhibitionDisplayInfo* add_score_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
      mutable_score_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
      score_list() const;

  // repeated uint32 winner_list = 15;
  int winner_list_size() const;
  void clear_winner_list();
  static const int kWinnerListFieldNumber = 15;
  ::google::protobuf::uint32 winner_list(int index) const;
  void set_winner_list(int index, ::google::protobuf::uint32 value);
  void add_winner_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      winner_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_winner_list();

  // uint32 cost_time = 2;
  void clear_cost_time();
  static const int kCostTimeFieldNumber = 2;
  ::google::protobuf::uint32 cost_time() const;
  void set_cost_time(::google::protobuf::uint32 value);

  // .proto.HideAndSeekSettleNotify.SettleReason reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  ::proto::HideAndSeekSettleNotify_SettleReason reason() const;
  void set_reason(::proto::HideAndSeekSettleNotify_SettleReason value);

  // uint32 stage_type = 14;
  void clear_stage_type();
  static const int kStageTypeFieldNumber = 14;
  ::google::protobuf::uint32 stage_type() const;
  void set_stage_type(::google::protobuf::uint32 value);

  // bool is_record_score = 6;
  void clear_is_record_score();
  static const int kIsRecordScoreFieldNumber = 6;
  bool is_record_score() const;
  void set_is_record_score(bool value);

  // uint32 play_index = 13;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 13;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekSettleNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::HideAndSeekSettleInfo > settle_info_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo > score_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > winner_list_;
  mutable int _winner_list_cached_byte_size_;
  ::google::protobuf::uint32 cost_time_;
  int reason_;
  ::google::protobuf::uint32 stage_type_;
  bool is_record_score_;
  ::google::protobuf::uint32 play_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekPlayerReadyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekPlayerReadyNotify) */ {
 public:
  HideAndSeekPlayerReadyNotify();
  virtual ~HideAndSeekPlayerReadyNotify();

  HideAndSeekPlayerReadyNotify(const HideAndSeekPlayerReadyNotify& from);

  inline HideAndSeekPlayerReadyNotify& operator=(const HideAndSeekPlayerReadyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekPlayerReadyNotify(HideAndSeekPlayerReadyNotify&& from) noexcept
    : HideAndSeekPlayerReadyNotify() {
    *this = ::std::move(from);
  }

  inline HideAndSeekPlayerReadyNotify& operator=(HideAndSeekPlayerReadyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekPlayerReadyNotify& default_instance();

  static inline const HideAndSeekPlayerReadyNotify* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekPlayerReadyNotify*>(
               &_HideAndSeekPlayerReadyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(HideAndSeekPlayerReadyNotify* other);
  friend void swap(HideAndSeekPlayerReadyNotify& a, HideAndSeekPlayerReadyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekPlayerReadyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekPlayerReadyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekPlayerReadyNotify& from);
  void MergeFrom(const HideAndSeekPlayerReadyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekPlayerReadyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uid_list = 5;
  int uid_list_size() const;
  void clear_uid_list();
  static const int kUidListFieldNumber = 5;
  ::google::protobuf::uint32 uid_list(int index) const;
  void set_uid_list(int index, ::google::protobuf::uint32 value);
  void add_uid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uid_list();

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekPlayerReadyNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uid_list_;
  mutable int _uid_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HideAndSeekPlayerSetAvatarNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.HideAndSeekPlayerSetAvatarNotify) */ {
 public:
  HideAndSeekPlayerSetAvatarNotify();
  virtual ~HideAndSeekPlayerSetAvatarNotify();

  HideAndSeekPlayerSetAvatarNotify(const HideAndSeekPlayerSetAvatarNotify& from);

  inline HideAndSeekPlayerSetAvatarNotify& operator=(const HideAndSeekPlayerSetAvatarNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HideAndSeekPlayerSetAvatarNotify(HideAndSeekPlayerSetAvatarNotify&& from) noexcept
    : HideAndSeekPlayerSetAvatarNotify() {
    *this = ::std::move(from);
  }

  inline HideAndSeekPlayerSetAvatarNotify& operator=(HideAndSeekPlayerSetAvatarNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HideAndSeekPlayerSetAvatarNotify& default_instance();

  static inline const HideAndSeekPlayerSetAvatarNotify* internal_default_instance() {
    return reinterpret_cast<const HideAndSeekPlayerSetAvatarNotify*>(
               &_HideAndSeekPlayerSetAvatarNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(HideAndSeekPlayerSetAvatarNotify* other);
  friend void swap(HideAndSeekPlayerSetAvatarNotify& a, HideAndSeekPlayerSetAvatarNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HideAndSeekPlayerSetAvatarNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  HideAndSeekPlayerSetAvatarNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HideAndSeekPlayerSetAvatarNotify& from);
  void MergeFrom(const HideAndSeekPlayerSetAvatarNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HideAndSeekPlayerSetAvatarNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 avatar_id = 2;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 2;
  ::google::protobuf::uint32 avatar_id() const;
  void set_avatar_id(::google::protobuf::uint32 value);

  // uint32 uid = 5;
  void clear_uid();
  static const int kUidFieldNumber = 5;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 costume_id = 13;
  void clear_costume_id();
  static const int kCostumeIdFieldNumber = 13;
  ::google::protobuf::uint32 costume_id() const;
  void set_costume_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.HideAndSeekPlayerSetAvatarNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 avatar_id_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 costume_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessCardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessCardInfo) */ {
 public:
  ChessCardInfo();
  virtual ~ChessCardInfo();

  ChessCardInfo(const ChessCardInfo& from);

  inline ChessCardInfo& operator=(const ChessCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessCardInfo(ChessCardInfo&& from) noexcept
    : ChessCardInfo() {
    *this = ::std::move(from);
  }

  inline ChessCardInfo& operator=(ChessCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessCardInfo& default_instance();

  static inline const ChessCardInfo* internal_default_instance() {
    return reinterpret_cast<const ChessCardInfo*>(
               &_ChessCardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(ChessCardInfo* other);
  friend void swap(ChessCardInfo& a, ChessCardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessCardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessCardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessCardInfo& from);
  void MergeFrom(const ChessCardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 11;
  void clear_card_id();
  static const int kCardIdFieldNumber = 11;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 effect_stack = 12;
  void clear_effect_stack();
  static const int kEffectStackFieldNumber = 12;
  ::google::protobuf::uint32 effect_stack() const;
  void set_effect_stack(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessCardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 effect_stack_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class InBattleChessInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleChessInfo) */ {
 public:
  InBattleChessInfo();
  virtual ~InBattleChessInfo();

  InBattleChessInfo(const InBattleChessInfo& from);

  inline InBattleChessInfo& operator=(const InBattleChessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleChessInfo(InBattleChessInfo&& from) noexcept
    : InBattleChessInfo() {
    *this = ::std::move(from);
  }

  inline InBattleChessInfo& operator=(InBattleChessInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleChessInfo& default_instance();

  static inline const InBattleChessInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleChessInfo*>(
               &_InBattleChessInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(InBattleChessInfo* other);
  friend void swap(InBattleChessInfo& a, InBattleChessInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleChessInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleChessInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleChessInfo& from);
  void MergeFrom(const InBattleChessInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleChessInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint32 ban_card_tag_list = 2;
  int ban_card_tag_list_size() const;
  void clear_ban_card_tag_list();
  static const int kBanCardTagListFieldNumber = 2;
  ::google::protobuf::uint32 ban_card_tag_list(int index) const;
  void set_ban_card_tag_list(int index, ::google::protobuf::uint32 value);
  void add_ban_card_tag_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      ban_card_tag_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_ban_card_tag_list();

  // map<uint32, .proto.ChessPlayerInfo> player_info_map = 8;
  int player_info_map_size() const;
  void clear_player_info_map();
  static const int kPlayerInfoMapFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >&
      player_info_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >*
      mutable_player_info_map();

  // repeated .proto.ChessCardInfo selected_card_info_list = 9;
  int selected_card_info_list_size() const;
  void clear_selected_card_info_list();
  static const int kSelectedCardInfoListFieldNumber = 9;
  const ::proto::ChessCardInfo& selected_card_info_list(int index) const;
  ::proto::ChessCardInfo* mutable_selected_card_info_list(int index);
  ::proto::ChessCardInfo* add_selected_card_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >*
      mutable_selected_card_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >&
      selected_card_info_list() const;

  // .proto.ChessMysteryInfo mystery_info = 1;
  bool has_mystery_info() const;
  void clear_mystery_info();
  static const int kMysteryInfoFieldNumber = 1;
  const ::proto::ChessMysteryInfo& mystery_info() const;
  ::proto::ChessMysteryInfo* mutable_mystery_info();
  ::proto::ChessMysteryInfo* release_mystery_info();
  void set_allocated_mystery_info(::proto::ChessMysteryInfo* mystery_info);

  // uint32 round = 4;
  void clear_round();
  static const int kRoundFieldNumber = 4;
  ::google::protobuf::uint32 round() const;
  void set_round(::google::protobuf::uint32 value);

  // uint32 max_escapable_monsters = 6;
  void clear_max_escapable_monsters();
  static const int kMaxEscapableMonstersFieldNumber = 6;
  ::google::protobuf::uint32 max_escapable_monsters() const;
  void set_max_escapable_monsters(::google::protobuf::uint32 value);

  // uint32 left_monsters = 15;
  void clear_left_monsters();
  static const int kLeftMonstersFieldNumber = 15;
  ::google::protobuf::uint32 left_monsters() const;
  void set_left_monsters(::google::protobuf::uint32 value);

  // uint32 excaped_monsters = 12;
  void clear_excaped_monsters();
  static const int kExcapedMonstersFieldNumber = 12;
  ::google::protobuf::uint32 excaped_monsters() const;
  void set_excaped_monsters(::google::protobuf::uint32 value);

  // uint32 total_round = 14;
  void clear_total_round();
  static const int kTotalRoundFieldNumber = 14;
  ::google::protobuf::uint32 total_round() const;
  void set_total_round(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleChessInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > ban_card_tag_list_;
  mutable int _ban_card_tag_list_cached_byte_size_;
  public:
  class InBattleChessInfo_PlayerInfoMapEntry : public ::google::protobuf::internal::MapEntry<InBattleChessInfo_PlayerInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::ChessPlayerInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<InBattleChessInfo_PlayerInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::ChessPlayerInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    InBattleChessInfo_PlayerInfoMapEntry();
    InBattleChessInfo_PlayerInfoMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const InBattleChessInfo_PlayerInfoMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_InBattleChessInfo_PlayerInfoMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      InBattleChessInfo_PlayerInfoMapEntry,
      ::google::protobuf::uint32, ::proto::ChessPlayerInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > player_info_map_;
  private:
  ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo > selected_card_info_list_;
  ::proto::ChessMysteryInfo* mystery_info_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 max_escapable_monsters_;
  ::google::protobuf::uint32 left_monsters_;
  ::google::protobuf::uint32 excaped_monsters_;
  ::google::protobuf::uint32 total_round_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleChessSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleChessSettleInfo) */ {
 public:
  InBattleChessSettleInfo();
  virtual ~InBattleChessSettleInfo();

  InBattleChessSettleInfo(const InBattleChessSettleInfo& from);

  inline InBattleChessSettleInfo& operator=(const InBattleChessSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleChessSettleInfo(InBattleChessSettleInfo&& from) noexcept
    : InBattleChessSettleInfo() {
    *this = ::std::move(from);
  }

  inline InBattleChessSettleInfo& operator=(InBattleChessSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleChessSettleInfo& default_instance();

  static inline const InBattleChessSettleInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleChessSettleInfo*>(
               &_InBattleChessSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(InBattleChessSettleInfo* other);
  friend void swap(InBattleChessSettleInfo& a, InBattleChessSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleChessSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleChessSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleChessSettleInfo& from);
  void MergeFrom(const InBattleChessSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleChessSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  int score_list_size() const;
  void clear_score_list();
  static const int kScoreListFieldNumber = 1;
  const ::proto::ExhibitionDisplayInfo& score_list(int index) const;
  ::proto::ExhibitionDisplayInfo* mutable_score_list(int index);
  ::proto::ExhibitionDisplayInfo* add_score_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
      mutable_score_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
      score_list() const;

  // uint32 old_chess_exp = 2;
  void clear_old_chess_exp();
  static const int kOldChessExpFieldNumber = 2;
  ::google::protobuf::uint32 old_chess_exp() const;
  void set_old_chess_exp(::google::protobuf::uint32 value);

  // bool is_success = 7;
  void clear_is_success();
  static const int kIsSuccessFieldNumber = 7;
  bool is_success() const;
  void set_is_success(bool value);

  // uint32 chess_level = 13;
  void clear_chess_level();
  static const int kChessLevelFieldNumber = 13;
  ::google::protobuf::uint32 chess_level() const;
  void set_chess_level(::google::protobuf::uint32 value);

  // uint32 old_chess_level = 10;
  void clear_old_chess_level();
  static const int kOldChessLevelFieldNumber = 10;
  ::google::protobuf::uint32 old_chess_level() const;
  void set_old_chess_level(::google::protobuf::uint32 value);

  // uint32 chess_exp = 11;
  void clear_chess_exp();
  static const int kChessExpFieldNumber = 11;
  ::google::protobuf::uint32 chess_exp() const;
  void set_chess_exp(::google::protobuf::uint32 value);

  // uint64 scene_time_ms = 14;
  void clear_scene_time_ms();
  static const int kSceneTimeMsFieldNumber = 14;
  ::google::protobuf::uint64 scene_time_ms() const;
  void set_scene_time_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleChessSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo > score_list_;
  ::google::protobuf::uint32 old_chess_exp_;
  bool is_success_;
  ::google::protobuf::uint32 chess_level_;
  ::google::protobuf::uint32 old_chess_level_;
  ::google::protobuf::uint32 chess_exp_;
  ::google::protobuf::uint64 scene_time_ms_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessPlayerInfo) */ {
 public:
  ChessPlayerInfo();
  virtual ~ChessPlayerInfo();

  ChessPlayerInfo(const ChessPlayerInfo& from);

  inline ChessPlayerInfo& operator=(const ChessPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessPlayerInfo(ChessPlayerInfo&& from) noexcept
    : ChessPlayerInfo() {
    *this = ::std::move(from);
  }

  inline ChessPlayerInfo& operator=(ChessPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessPlayerInfo& default_instance();

  static inline const ChessPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const ChessPlayerInfo*>(
               &_ChessPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(ChessPlayerInfo* other);
  friend void swap(ChessPlayerInfo& a, ChessPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessPlayerInfo& from);
  void MergeFrom(const ChessPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ChessNormalCardInfo candidate_card_info_list = 3;
  int candidate_card_info_list_size() const;
  void clear_candidate_card_info_list();
  static const int kCandidateCardInfoListFieldNumber = 3;
  const ::proto::ChessNormalCardInfo& candidate_card_info_list(int index) const;
  ::proto::ChessNormalCardInfo* mutable_candidate_card_info_list(int index);
  ::proto::ChessNormalCardInfo* add_candidate_card_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ChessNormalCardInfo >*
      mutable_candidate_card_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ChessNormalCardInfo >&
      candidate_card_info_list() const;

  // uint32 uid = 5;
  void clear_uid();
  static const int kUidFieldNumber = 5;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 candidate_index = 6;
  void clear_candidate_index();
  static const int kCandidateIndexFieldNumber = 6;
  ::google::protobuf::uint32 candidate_index() const;
  void set_candidate_index(::google::protobuf::uint32 value);

  // uint32 refresh_cost = 7;
  void clear_refresh_cost();
  static const int kRefreshCostFieldNumber = 7;
  ::google::protobuf::uint32 refresh_cost() const;
  void set_refresh_cost(::google::protobuf::uint32 value);

  // uint32 free_refresh_limit = 10;
  void clear_free_refresh_limit();
  static const int kFreeRefreshLimitFieldNumber = 10;
  ::google::protobuf::uint32 free_refresh_limit() const;
  void set_free_refresh_limit(::google::protobuf::uint32 value);

  // uint32 building_points = 12;
  void clear_building_points();
  static const int kBuildingPointsFieldNumber = 12;
  ::google::protobuf::uint32 building_points() const;
  void set_building_points(::google::protobuf::uint32 value);

  // uint32 free_refresh_count = 13;
  void clear_free_refresh_count();
  static const int kFreeRefreshCountFieldNumber = 13;
  ::google::protobuf::uint32 free_refresh_count() const;
  void set_free_refresh_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessPlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ChessNormalCardInfo > candidate_card_info_list_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 candidate_index_;
  ::google::protobuf::uint32 refresh_cost_;
  ::google::protobuf::uint32 free_refresh_limit_;
  ::google::protobuf::uint32 building_points_;
  ::google::protobuf::uint32 free_refresh_count_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessMonsterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessMonsterInfo) */ {
 public:
  ChessMonsterInfo();
  virtual ~ChessMonsterInfo();

  ChessMonsterInfo(const ChessMonsterInfo& from);

  inline ChessMonsterInfo& operator=(const ChessMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessMonsterInfo(ChessMonsterInfo&& from) noexcept
    : ChessMonsterInfo() {
    *this = ::std::move(from);
  }

  inline ChessMonsterInfo& operator=(ChessMonsterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessMonsterInfo& default_instance();

  static inline const ChessMonsterInfo* internal_default_instance() {
    return reinterpret_cast<const ChessMonsterInfo*>(
               &_ChessMonsterInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(ChessMonsterInfo* other);
  friend void swap(ChessMonsterInfo& a, ChessMonsterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessMonsterInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessMonsterInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessMonsterInfo& from);
  void MergeFrom(const ChessMonsterInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessMonsterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 affix_list = 13;
  int affix_list_size() const;
  void clear_affix_list();
  static const int kAffixListFieldNumber = 13;
  ::google::protobuf::uint32 affix_list(int index) const;
  void set_affix_list(int index, ::google::protobuf::uint32 value);
  void add_affix_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      affix_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_affix_list();

  // uint32 level = 2;
  void clear_level();
  static const int kLevelFieldNumber = 2;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // uint32 monster_id = 12;
  void clear_monster_id();
  static const int kMonsterIdFieldNumber = 12;
  ::google::protobuf::uint32 monster_id() const;
  void set_monster_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessMonsterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > affix_list_;
  mutable int _affix_list_cached_byte_size_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 monster_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessEntranceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessEntranceInfo) */ {
 public:
  ChessEntranceInfo();
  virtual ~ChessEntranceInfo();

  ChessEntranceInfo(const ChessEntranceInfo& from);

  inline ChessEntranceInfo& operator=(const ChessEntranceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessEntranceInfo(ChessEntranceInfo&& from) noexcept
    : ChessEntranceInfo() {
    *this = ::std::move(from);
  }

  inline ChessEntranceInfo& operator=(ChessEntranceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessEntranceInfo& default_instance();

  static inline const ChessEntranceInfo* internal_default_instance() {
    return reinterpret_cast<const ChessEntranceInfo*>(
               &_ChessEntranceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(ChessEntranceInfo* other);
  friend void swap(ChessEntranceInfo& a, ChessEntranceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessEntranceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessEntranceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessEntranceInfo& from);
  void MergeFrom(const ChessEntranceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessEntranceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ChessMonsterInfo monster_info_list = 14;
  int monster_info_list_size() const;
  void clear_monster_info_list();
  static const int kMonsterInfoListFieldNumber = 14;
  const ::proto::ChessMonsterInfo& monster_info_list(int index) const;
  ::proto::ChessMonsterInfo* mutable_monster_info_list(int index);
  ::proto::ChessMonsterInfo* add_monster_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ChessMonsterInfo >*
      mutable_monster_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ChessMonsterInfo >&
      monster_info_list() const;

  // uint32 entrance_point_id = 8;
  void clear_entrance_point_id();
  static const int kEntrancePointIdFieldNumber = 8;
  ::google::protobuf::uint32 entrance_point_id() const;
  void set_entrance_point_id(::google::protobuf::uint32 value);

  // uint32 entrance_index = 15;
  void clear_entrance_index();
  static const int kEntranceIndexFieldNumber = 15;
  ::google::protobuf::uint32 entrance_index() const;
  void set_entrance_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessEntranceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ChessMonsterInfo > monster_info_list_;
  ::google::protobuf::uint32 entrance_point_id_;
  ::google::protobuf::uint32 entrance_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessEntranceDetailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessEntranceDetailInfo) */ {
 public:
  ChessEntranceDetailInfo();
  virtual ~ChessEntranceDetailInfo();

  ChessEntranceDetailInfo(const ChessEntranceDetailInfo& from);

  inline ChessEntranceDetailInfo& operator=(const ChessEntranceDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessEntranceDetailInfo(ChessEntranceDetailInfo&& from) noexcept
    : ChessEntranceDetailInfo() {
    *this = ::std::move(from);
  }

  inline ChessEntranceDetailInfo& operator=(ChessEntranceDetailInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessEntranceDetailInfo& default_instance();

  static inline const ChessEntranceDetailInfo* internal_default_instance() {
    return reinterpret_cast<const ChessEntranceDetailInfo*>(
               &_ChessEntranceDetailInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(ChessEntranceDetailInfo* other);
  friend void swap(ChessEntranceDetailInfo& a, ChessEntranceDetailInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessEntranceDetailInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessEntranceDetailInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessEntranceDetailInfo& from);
  void MergeFrom(const ChessEntranceDetailInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessEntranceDetailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ChessEntranceInfo info_list = 4;
  int info_list_size() const;
  void clear_info_list();
  static const int kInfoListFieldNumber = 4;
  const ::proto::ChessEntranceInfo& info_list(int index) const;
  ::proto::ChessEntranceInfo* mutable_info_list(int index);
  ::proto::ChessEntranceInfo* add_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ChessEntranceInfo >*
      mutable_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ChessEntranceInfo >&
      info_list() const;

  // @@protoc_insertion_point(class_scope:proto.ChessEntranceDetailInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ChessEntranceInfo > info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class ChessMysteryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessMysteryInfo) */ {
 public:
  ChessMysteryInfo();
  virtual ~ChessMysteryInfo();

  ChessMysteryInfo(const ChessMysteryInfo& from);

  inline ChessMysteryInfo& operator=(const ChessMysteryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessMysteryInfo(ChessMysteryInfo&& from) noexcept
    : ChessMysteryInfo() {
    *this = ::std::move(from);
  }

  inline ChessMysteryInfo& operator=(ChessMysteryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessMysteryInfo& default_instance();

  static inline const ChessMysteryInfo* internal_default_instance() {
    return reinterpret_cast<const ChessMysteryInfo*>(
               &_ChessMysteryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(ChessMysteryInfo* other);
  friend void swap(ChessMysteryInfo& a, ChessMysteryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessMysteryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessMysteryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessMysteryInfo& from);
  void MergeFrom(const ChessMysteryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessMysteryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint32 exit_point_id_list = 3;
  int exit_point_id_list_size() const;
  void clear_exit_point_id_list();
  static const int kExitPointIdListFieldNumber = 3;
  ::google::protobuf::uint32 exit_point_id_list(int index) const;
  void set_exit_point_id_list(int index, ::google::protobuf::uint32 value);
  void add_exit_point_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      exit_point_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_exit_point_id_list();

  // map<uint32, .proto.ChessEntranceDetailInfo> detail_info_map = 5;
  int detail_info_map_size() const;
  void clear_detail_info_map();
  static const int kDetailInfoMapFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >&
      detail_info_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >*
      mutable_detail_info_map();

  // map<uint32, uint32> entrance_point_map = 13;
  int entrance_point_map_size() const;
  void clear_entrance_point_map();
  static const int kEntrancePointMapFieldNumber = 13;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      entrance_point_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_entrance_point_map();

  // @@protoc_insertion_point(class_scope:proto.ChessMysteryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > exit_point_id_list_;
  mutable int _exit_point_id_list_cached_byte_size_;
  public:
  class ChessMysteryInfo_DetailInfoMapEntry : public ::google::protobuf::internal::MapEntry<ChessMysteryInfo_DetailInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<ChessMysteryInfo_DetailInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    ChessMysteryInfo_DetailInfoMapEntry();
    ChessMysteryInfo_DetailInfoMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const ChessMysteryInfo_DetailInfoMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_ChessMysteryInfo_DetailInfoMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      ChessMysteryInfo_DetailInfoMapEntry,
      ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > detail_info_map_;
  private:
  public:
  class ChessMysteryInfo_EntrancePointMapEntry : public ::google::protobuf::internal::MapEntry<ChessMysteryInfo_EntrancePointMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<ChessMysteryInfo_EntrancePointMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    ChessMysteryInfo_EntrancePointMapEntry();
    ChessMysteryInfo_EntrancePointMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const ChessMysteryInfo_EntrancePointMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_ChessMysteryInfo_EntrancePointMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      ChessMysteryInfo_EntrancePointMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > entrance_point_map_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessNormalCardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessNormalCardInfo) */ {
 public:
  ChessNormalCardInfo();
  virtual ~ChessNormalCardInfo();

  ChessNormalCardInfo(const ChessNormalCardInfo& from);

  inline ChessNormalCardInfo& operator=(const ChessNormalCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessNormalCardInfo(ChessNormalCardInfo&& from) noexcept
    : ChessNormalCardInfo() {
    *this = ::std::move(from);
  }

  inline ChessNormalCardInfo& operator=(ChessNormalCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessNormalCardInfo& default_instance();

  static inline const ChessNormalCardInfo* internal_default_instance() {
    return reinterpret_cast<const ChessNormalCardInfo*>(
               &_ChessNormalCardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(ChessNormalCardInfo* other);
  friend void swap(ChessNormalCardInfo& a, ChessNormalCardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessNormalCardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessNormalCardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessNormalCardInfo& from);
  void MergeFrom(const ChessNormalCardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessNormalCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 2;
  void clear_card_id();
  static const int kCardIdFieldNumber = 2;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // bool is_attach_curse = 6;
  void clear_is_attach_curse();
  static const int kIsAttachCurseFieldNumber = 6;
  bool is_attach_curse() const;
  void set_is_attach_curse(bool value);

  // uint32 cost_points = 15;
  void clear_cost_points();
  static const int kCostPointsFieldNumber = 15;
  ::google::protobuf::uint32 cost_points() const;
  void set_cost_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessNormalCardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  bool is_attach_curse_;
  ::google::protobuf::uint32 cost_points_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessPickCardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessPickCardReq) */ {
 public:
  ChessPickCardReq();
  virtual ~ChessPickCardReq();

  ChessPickCardReq(const ChessPickCardReq& from);

  inline ChessPickCardReq& operator=(const ChessPickCardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessPickCardReq(ChessPickCardReq&& from) noexcept
    : ChessPickCardReq() {
    *this = ::std::move(from);
  }

  inline ChessPickCardReq& operator=(ChessPickCardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessPickCardReq& default_instance();

  static inline const ChessPickCardReq* internal_default_instance() {
    return reinterpret_cast<const ChessPickCardReq*>(
               &_ChessPickCardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(ChessPickCardReq* other);
  friend void swap(ChessPickCardReq& a, ChessPickCardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessPickCardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessPickCardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessPickCardReq& from);
  void MergeFrom(const ChessPickCardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessPickCardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 1;
  void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 card_index = 4;
  void clear_card_index();
  static const int kCardIndexFieldNumber = 4;
  ::google::protobuf::uint32 card_index() const;
  void set_card_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessPickCardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 card_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessPickCardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessPickCardRsp) */ {
 public:
  ChessPickCardRsp();
  virtual ~ChessPickCardRsp();

  ChessPickCardRsp(const ChessPickCardRsp& from);

  inline ChessPickCardRsp& operator=(const ChessPickCardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessPickCardRsp(ChessPickCardRsp&& from) noexcept
    : ChessPickCardRsp() {
    *this = ::std::move(from);
  }

  inline ChessPickCardRsp& operator=(ChessPickCardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessPickCardRsp& default_instance();

  static inline const ChessPickCardRsp* internal_default_instance() {
    return reinterpret_cast<const ChessPickCardRsp*>(
               &_ChessPickCardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(ChessPickCardRsp* other);
  friend void swap(ChessPickCardRsp& a, ChessPickCardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessPickCardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessPickCardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessPickCardRsp& from);
  void MergeFrom(const ChessPickCardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessPickCardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 1;
  void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 card_index = 11;
  void clear_card_index();
  static const int kCardIndexFieldNumber = 11;
  ::google::protobuf::uint32 card_index() const;
  void set_card_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessPickCardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 card_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessPickCardNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessPickCardNotify) */ {
 public:
  ChessPickCardNotify();
  virtual ~ChessPickCardNotify();

  ChessPickCardNotify(const ChessPickCardNotify& from);

  inline ChessPickCardNotify& operator=(const ChessPickCardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessPickCardNotify(ChessPickCardNotify&& from) noexcept
    : ChessPickCardNotify() {
    *this = ::std::move(from);
  }

  inline ChessPickCardNotify& operator=(ChessPickCardNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessPickCardNotify& default_instance();

  static inline const ChessPickCardNotify* internal_default_instance() {
    return reinterpret_cast<const ChessPickCardNotify*>(
               &_ChessPickCardNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(ChessPickCardNotify* other);
  friend void swap(ChessPickCardNotify& a, ChessPickCardNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessPickCardNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessPickCardNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessPickCardNotify& from);
  void MergeFrom(const ChessPickCardNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessPickCardNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.ChessNormalCardInfo normal_card_info = 1;
  bool has_normal_card_info() const;
  void clear_normal_card_info();
  static const int kNormalCardInfoFieldNumber = 1;
  const ::proto::ChessNormalCardInfo& normal_card_info() const;
  ::proto::ChessNormalCardInfo* mutable_normal_card_info();
  ::proto::ChessNormalCardInfo* release_normal_card_info();
  void set_allocated_normal_card_info(::proto::ChessNormalCardInfo* normal_card_info);

  // uint32 curse_card_id = 13;
  void clear_curse_card_id();
  static const int kCurseCardIdFieldNumber = 13;
  ::google::protobuf::uint32 curse_card_id() const;
  void set_curse_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessPickCardNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::ChessNormalCardInfo* normal_card_info_;
  ::google::protobuf::uint32 curse_card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessManualRefreshCardsReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessManualRefreshCardsReq) */ {
 public:
  ChessManualRefreshCardsReq();
  virtual ~ChessManualRefreshCardsReq();

  ChessManualRefreshCardsReq(const ChessManualRefreshCardsReq& from);

  inline ChessManualRefreshCardsReq& operator=(const ChessManualRefreshCardsReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessManualRefreshCardsReq(ChessManualRefreshCardsReq&& from) noexcept
    : ChessManualRefreshCardsReq() {
    *this = ::std::move(from);
  }

  inline ChessManualRefreshCardsReq& operator=(ChessManualRefreshCardsReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessManualRefreshCardsReq& default_instance();

  static inline const ChessManualRefreshCardsReq* internal_default_instance() {
    return reinterpret_cast<const ChessManualRefreshCardsReq*>(
               &_ChessManualRefreshCardsReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(ChessManualRefreshCardsReq* other);
  friend void swap(ChessManualRefreshCardsReq& a, ChessManualRefreshCardsReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessManualRefreshCardsReq* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessManualRefreshCardsReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessManualRefreshCardsReq& from);
  void MergeFrom(const ChessManualRefreshCardsReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessManualRefreshCardsReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.ChessManualRefreshCardsReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessManualRefreshCardsRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessManualRefreshCardsRsp) */ {
 public:
  ChessManualRefreshCardsRsp();
  virtual ~ChessManualRefreshCardsRsp();

  ChessManualRefreshCardsRsp(const ChessManualRefreshCardsRsp& from);

  inline ChessManualRefreshCardsRsp& operator=(const ChessManualRefreshCardsRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessManualRefreshCardsRsp(ChessManualRefreshCardsRsp&& from) noexcept
    : ChessManualRefreshCardsRsp() {
    *this = ::std::move(from);
  }

  inline ChessManualRefreshCardsRsp& operator=(ChessManualRefreshCardsRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessManualRefreshCardsRsp& default_instance();

  static inline const ChessManualRefreshCardsRsp* internal_default_instance() {
    return reinterpret_cast<const ChessManualRefreshCardsRsp*>(
               &_ChessManualRefreshCardsRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(ChessManualRefreshCardsRsp* other);
  friend void swap(ChessManualRefreshCardsRsp& a, ChessManualRefreshCardsRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessManualRefreshCardsRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessManualRefreshCardsRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessManualRefreshCardsRsp& from);
  void MergeFrom(const ChessManualRefreshCardsRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessManualRefreshCardsRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 12;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 12;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessManualRefreshCardsRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessPlayerInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessPlayerInfoNotify) */ {
 public:
  ChessPlayerInfoNotify();
  virtual ~ChessPlayerInfoNotify();

  ChessPlayerInfoNotify(const ChessPlayerInfoNotify& from);

  inline ChessPlayerInfoNotify& operator=(const ChessPlayerInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessPlayerInfoNotify(ChessPlayerInfoNotify&& from) noexcept
    : ChessPlayerInfoNotify() {
    *this = ::std::move(from);
  }

  inline ChessPlayerInfoNotify& operator=(ChessPlayerInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessPlayerInfoNotify& default_instance();

  static inline const ChessPlayerInfoNotify* internal_default_instance() {
    return reinterpret_cast<const ChessPlayerInfoNotify*>(
               &_ChessPlayerInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(ChessPlayerInfoNotify* other);
  friend void swap(ChessPlayerInfoNotify& a, ChessPlayerInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessPlayerInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessPlayerInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessPlayerInfoNotify& from);
  void MergeFrom(const ChessPlayerInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessPlayerInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.ChessPlayerInfo player_info = 10;
  bool has_player_info() const;
  void clear_player_info();
  static const int kPlayerInfoFieldNumber = 10;
  const ::proto::ChessPlayerInfo& player_info() const;
  ::proto::ChessPlayerInfo* mutable_player_info();
  ::proto::ChessPlayerInfo* release_player_info();
  void set_allocated_player_info(::proto::ChessPlayerInfo* player_info);

  // @@protoc_insertion_point(class_scope:proto.ChessPlayerInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::ChessPlayerInfo* player_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessLeftMonstersNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessLeftMonstersNotify) */ {
 public:
  ChessLeftMonstersNotify();
  virtual ~ChessLeftMonstersNotify();

  ChessLeftMonstersNotify(const ChessLeftMonstersNotify& from);

  inline ChessLeftMonstersNotify& operator=(const ChessLeftMonstersNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessLeftMonstersNotify(ChessLeftMonstersNotify&& from) noexcept
    : ChessLeftMonstersNotify() {
    *this = ::std::move(from);
  }

  inline ChessLeftMonstersNotify& operator=(ChessLeftMonstersNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessLeftMonstersNotify& default_instance();

  static inline const ChessLeftMonstersNotify* internal_default_instance() {
    return reinterpret_cast<const ChessLeftMonstersNotify*>(
               &_ChessLeftMonstersNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(ChessLeftMonstersNotify* other);
  friend void swap(ChessLeftMonstersNotify& a, ChessLeftMonstersNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessLeftMonstersNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessLeftMonstersNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessLeftMonstersNotify& from);
  void MergeFrom(const ChessLeftMonstersNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessLeftMonstersNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 left_monsters = 6;
  void clear_left_monsters();
  static const int kLeftMonstersFieldNumber = 6;
  ::google::protobuf::uint32 left_monsters() const;
  void set_left_monsters(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessLeftMonstersNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 left_monsters_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessEscapedMonstersNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessEscapedMonstersNotify) */ {
 public:
  ChessEscapedMonstersNotify();
  virtual ~ChessEscapedMonstersNotify();

  ChessEscapedMonstersNotify(const ChessEscapedMonstersNotify& from);

  inline ChessEscapedMonstersNotify& operator=(const ChessEscapedMonstersNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessEscapedMonstersNotify(ChessEscapedMonstersNotify&& from) noexcept
    : ChessEscapedMonstersNotify() {
    *this = ::std::move(from);
  }

  inline ChessEscapedMonstersNotify& operator=(ChessEscapedMonstersNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessEscapedMonstersNotify& default_instance();

  static inline const ChessEscapedMonstersNotify* internal_default_instance() {
    return reinterpret_cast<const ChessEscapedMonstersNotify*>(
               &_ChessEscapedMonstersNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    70;

  void Swap(ChessEscapedMonstersNotify* other);
  friend void swap(ChessEscapedMonstersNotify& a, ChessEscapedMonstersNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessEscapedMonstersNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessEscapedMonstersNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessEscapedMonstersNotify& from);
  void MergeFrom(const ChessEscapedMonstersNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessEscapedMonstersNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 excaped_monsters = 14;
  void clear_excaped_monsters();
  static const int kExcapedMonstersFieldNumber = 14;
  ::google::protobuf::uint32 excaped_monsters() const;
  void set_excaped_monsters(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.ChessEscapedMonstersNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 excaped_monsters_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChessSelectedCardsNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.ChessSelectedCardsNotify) */ {
 public:
  ChessSelectedCardsNotify();
  virtual ~ChessSelectedCardsNotify();

  ChessSelectedCardsNotify(const ChessSelectedCardsNotify& from);

  inline ChessSelectedCardsNotify& operator=(const ChessSelectedCardsNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChessSelectedCardsNotify(ChessSelectedCardsNotify&& from) noexcept
    : ChessSelectedCardsNotify() {
    *this = ::std::move(from);
  }

  inline ChessSelectedCardsNotify& operator=(ChessSelectedCardsNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChessSelectedCardsNotify& default_instance();

  static inline const ChessSelectedCardsNotify* internal_default_instance() {
    return reinterpret_cast<const ChessSelectedCardsNotify*>(
               &_ChessSelectedCardsNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(ChessSelectedCardsNotify* other);
  friend void swap(ChessSelectedCardsNotify& a, ChessSelectedCardsNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChessSelectedCardsNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  ChessSelectedCardsNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChessSelectedCardsNotify& from);
  void MergeFrom(const ChessSelectedCardsNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChessSelectedCardsNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ChessCardInfo selected_card_info_list = 4;
  int selected_card_info_list_size() const;
  void clear_selected_card_info_list();
  static const int kSelectedCardInfoListFieldNumber = 4;
  const ::proto::ChessCardInfo& selected_card_info_list(int index) const;
  ::proto::ChessCardInfo* mutable_selected_card_info_list(int index);
  ::proto::ChessCardInfo* add_selected_card_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >*
      mutable_selected_card_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >&
      selected_card_info_list() const;

  // @@protoc_insertion_point(class_scope:proto.ChessSelectedCardsNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo > selected_card_info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GlobalBuildingInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GlobalBuildingInfoNotify) */ {
 public:
  GlobalBuildingInfoNotify();
  virtual ~GlobalBuildingInfoNotify();

  GlobalBuildingInfoNotify(const GlobalBuildingInfoNotify& from);

  inline GlobalBuildingInfoNotify& operator=(const GlobalBuildingInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GlobalBuildingInfoNotify(GlobalBuildingInfoNotify&& from) noexcept
    : GlobalBuildingInfoNotify() {
    *this = ::std::move(from);
  }

  inline GlobalBuildingInfoNotify& operator=(GlobalBuildingInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalBuildingInfoNotify& default_instance();

  static inline const GlobalBuildingInfoNotify* internal_default_instance() {
    return reinterpret_cast<const GlobalBuildingInfoNotify*>(
               &_GlobalBuildingInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    72;

  void Swap(GlobalBuildingInfoNotify* other);
  friend void swap(GlobalBuildingInfoNotify& a, GlobalBuildingInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GlobalBuildingInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GlobalBuildingInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GlobalBuildingInfoNotify& from);
  void MergeFrom(const GlobalBuildingInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GlobalBuildingInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.BuildingInfo building_list = 3;
  int building_list_size() const;
  void clear_building_list();
  static const int kBuildingListFieldNumber = 3;
  const ::proto::BuildingInfo& building_list(int index) const;
  ::proto::BuildingInfo* mutable_building_list(int index);
  ::proto::BuildingInfo* add_building_list();
  ::google::protobuf::RepeatedPtrField< ::proto::BuildingInfo >*
      mutable_building_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::BuildingInfo >&
      building_list() const;

  // uint32 current_num = 5;
  void clear_current_num();
  static const int kCurrentNumFieldNumber = 5;
  ::google::protobuf::uint32 current_num() const;
  void set_current_num(::google::protobuf::uint32 value);

  // uint32 max_num = 13;
  void clear_max_num();
  static const int kMaxNumFieldNumber = 13;
  ::google::protobuf::uint32 max_num() const;
  void set_max_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GlobalBuildingInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::BuildingInfo > building_list_;
  ::google::protobuf::uint32 current_num_;
  ::google::protobuf::uint32 max_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleIrodoriChessInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleIrodoriChessInfo) */ {
 public:
  InBattleIrodoriChessInfo();
  virtual ~InBattleIrodoriChessInfo();

  InBattleIrodoriChessInfo(const InBattleIrodoriChessInfo& from);

  inline InBattleIrodoriChessInfo& operator=(const InBattleIrodoriChessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleIrodoriChessInfo(InBattleIrodoriChessInfo&& from) noexcept
    : InBattleIrodoriChessInfo() {
    *this = ::std::move(from);
  }

  inline InBattleIrodoriChessInfo& operator=(InBattleIrodoriChessInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleIrodoriChessInfo& default_instance();

  static inline const InBattleIrodoriChessInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleIrodoriChessInfo*>(
               &_InBattleIrodoriChessInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(InBattleIrodoriChessInfo* other);
  friend void swap(InBattleIrodoriChessInfo& a, InBattleIrodoriChessInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleIrodoriChessInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleIrodoriChessInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleIrodoriChessInfo& from);
  void MergeFrom(const InBattleIrodoriChessInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleIrodoriChessInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 selected_card_id_list = 13;
  int selected_card_id_list_size() const;
  void clear_selected_card_id_list();
  static const int kSelectedCardIdListFieldNumber = 13;
  ::google::protobuf::uint32 selected_card_id_list(int index) const;
  void set_selected_card_id_list(int index, ::google::protobuf::uint32 value);
  void add_selected_card_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      selected_card_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_selected_card_id_list();

  // .proto.IrodoriChessMysteryInfo mystery_info = 3;
  bool has_mystery_info() const;
  void clear_mystery_info();
  static const int kMysteryInfoFieldNumber = 3;
  const ::proto::IrodoriChessMysteryInfo& mystery_info() const;
  ::proto::IrodoriChessMysteryInfo* mutable_mystery_info();
  ::proto::IrodoriChessMysteryInfo* release_mystery_info();
  void set_allocated_mystery_info(::proto::IrodoriChessMysteryInfo* mystery_info);

  // uint32 settle_score = 4;
  void clear_settle_score();
  static const int kSettleScoreFieldNumber = 4;
  ::google::protobuf::uint32 settle_score() const;
  void set_settle_score(::google::protobuf::uint32 value);

  // uint32 building_points = 7;
  void clear_building_points();
  static const int kBuildingPointsFieldNumber = 7;
  ::google::protobuf::uint32 building_points() const;
  void set_building_points(::google::protobuf::uint32 value);

  // uint32 left_monsters = 12;
  void clear_left_monsters();
  static const int kLeftMonstersFieldNumber = 12;
  ::google::protobuf::uint32 left_monsters() const;
  void set_left_monsters(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleIrodoriChessInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > selected_card_id_list_;
  mutable int _selected_card_id_list_cached_byte_size_;
  ::proto::IrodoriChessMysteryInfo* mystery_info_;
  ::google::protobuf::uint32 settle_score_;
  ::google::protobuf::uint32 building_points_;
  ::google::protobuf::uint32 left_monsters_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrodoriChessMonsterInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IrodoriChessMonsterInfo) */ {
 public:
  IrodoriChessMonsterInfo();
  virtual ~IrodoriChessMonsterInfo();

  IrodoriChessMonsterInfo(const IrodoriChessMonsterInfo& from);

  inline IrodoriChessMonsterInfo& operator=(const IrodoriChessMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrodoriChessMonsterInfo(IrodoriChessMonsterInfo&& from) noexcept
    : IrodoriChessMonsterInfo() {
    *this = ::std::move(from);
  }

  inline IrodoriChessMonsterInfo& operator=(IrodoriChessMonsterInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrodoriChessMonsterInfo& default_instance();

  static inline const IrodoriChessMonsterInfo* internal_default_instance() {
    return reinterpret_cast<const IrodoriChessMonsterInfo*>(
               &_IrodoriChessMonsterInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(IrodoriChessMonsterInfo* other);
  friend void swap(IrodoriChessMonsterInfo& a, IrodoriChessMonsterInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrodoriChessMonsterInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IrodoriChessMonsterInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IrodoriChessMonsterInfo& from);
  void MergeFrom(const IrodoriChessMonsterInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IrodoriChessMonsterInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 affix_list = 11;
  int affix_list_size() const;
  void clear_affix_list();
  static const int kAffixListFieldNumber = 11;
  ::google::protobuf::uint32 affix_list(int index) const;
  void set_affix_list(int index, ::google::protobuf::uint32 value);
  void add_affix_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      affix_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_affix_list();

  // uint32 monster_id = 14;
  void clear_monster_id();
  static const int kMonsterIdFieldNumber = 14;
  ::google::protobuf::uint32 monster_id() const;
  void set_monster_id(::google::protobuf::uint32 value);

  // uint32 grant_points = 6;
  void clear_grant_points();
  static const int kGrantPointsFieldNumber = 6;
  ::google::protobuf::uint32 grant_points() const;
  void set_grant_points(::google::protobuf::uint32 value);

  // uint32 level = 13;
  void clear_level();
  static const int kLevelFieldNumber = 13;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.IrodoriChessMonsterInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > affix_list_;
  mutable int _affix_list_cached_byte_size_;
  ::google::protobuf::uint32 monster_id_;
  ::google::protobuf::uint32 grant_points_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrodoriChessEntranceInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IrodoriChessEntranceInfo) */ {
 public:
  IrodoriChessEntranceInfo();
  virtual ~IrodoriChessEntranceInfo();

  IrodoriChessEntranceInfo(const IrodoriChessEntranceInfo& from);

  inline IrodoriChessEntranceInfo& operator=(const IrodoriChessEntranceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrodoriChessEntranceInfo(IrodoriChessEntranceInfo&& from) noexcept
    : IrodoriChessEntranceInfo() {
    *this = ::std::move(from);
  }

  inline IrodoriChessEntranceInfo& operator=(IrodoriChessEntranceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrodoriChessEntranceInfo& default_instance();

  static inline const IrodoriChessEntranceInfo* internal_default_instance() {
    return reinterpret_cast<const IrodoriChessEntranceInfo*>(
               &_IrodoriChessEntranceInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(IrodoriChessEntranceInfo* other);
  friend void swap(IrodoriChessEntranceInfo& a, IrodoriChessEntranceInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrodoriChessEntranceInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IrodoriChessEntranceInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IrodoriChessEntranceInfo& from);
  void MergeFrom(const IrodoriChessEntranceInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IrodoriChessEntranceInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.IrodoriChessMonsterInfo monster_info_list = 6;
  int monster_info_list_size() const;
  void clear_monster_info_list();
  static const int kMonsterInfoListFieldNumber = 6;
  const ::proto::IrodoriChessMonsterInfo& monster_info_list(int index) const;
  ::proto::IrodoriChessMonsterInfo* mutable_monster_info_list(int index);
  ::proto::IrodoriChessMonsterInfo* add_monster_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessMonsterInfo >*
      mutable_monster_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessMonsterInfo >&
      monster_info_list() const;

  // uint32 entrance_point_id = 4;
  void clear_entrance_point_id();
  static const int kEntrancePointIdFieldNumber = 4;
  ::google::protobuf::uint32 entrance_point_id() const;
  void set_entrance_point_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.IrodoriChessEntranceInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessMonsterInfo > monster_info_list_;
  ::google::protobuf::uint32 entrance_point_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrodoriChessEntranceDetailInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IrodoriChessEntranceDetailInfo) */ {
 public:
  IrodoriChessEntranceDetailInfo();
  virtual ~IrodoriChessEntranceDetailInfo();

  IrodoriChessEntranceDetailInfo(const IrodoriChessEntranceDetailInfo& from);

  inline IrodoriChessEntranceDetailInfo& operator=(const IrodoriChessEntranceDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrodoriChessEntranceDetailInfo(IrodoriChessEntranceDetailInfo&& from) noexcept
    : IrodoriChessEntranceDetailInfo() {
    *this = ::std::move(from);
  }

  inline IrodoriChessEntranceDetailInfo& operator=(IrodoriChessEntranceDetailInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrodoriChessEntranceDetailInfo& default_instance();

  static inline const IrodoriChessEntranceDetailInfo* internal_default_instance() {
    return reinterpret_cast<const IrodoriChessEntranceDetailInfo*>(
               &_IrodoriChessEntranceDetailInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(IrodoriChessEntranceDetailInfo* other);
  friend void swap(IrodoriChessEntranceDetailInfo& a, IrodoriChessEntranceDetailInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrodoriChessEntranceDetailInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IrodoriChessEntranceDetailInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IrodoriChessEntranceDetailInfo& from);
  void MergeFrom(const IrodoriChessEntranceDetailInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IrodoriChessEntranceDetailInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.IrodoriChessEntranceInfo info_list = 15;
  int info_list_size() const;
  void clear_info_list();
  static const int kInfoListFieldNumber = 15;
  const ::proto::IrodoriChessEntranceInfo& info_list(int index) const;
  ::proto::IrodoriChessEntranceInfo* mutable_info_list(int index);
  ::proto::IrodoriChessEntranceInfo* add_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessEntranceInfo >*
      mutable_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessEntranceInfo >&
      info_list() const;

  // @@protoc_insertion_point(class_scope:proto.IrodoriChessEntranceDetailInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessEntranceInfo > info_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrodoriChessMysteryInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IrodoriChessMysteryInfo) */ {
 public:
  IrodoriChessMysteryInfo();
  virtual ~IrodoriChessMysteryInfo();

  IrodoriChessMysteryInfo(const IrodoriChessMysteryInfo& from);

  inline IrodoriChessMysteryInfo& operator=(const IrodoriChessMysteryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrodoriChessMysteryInfo(IrodoriChessMysteryInfo&& from) noexcept
    : IrodoriChessMysteryInfo() {
    *this = ::std::move(from);
  }

  inline IrodoriChessMysteryInfo& operator=(IrodoriChessMysteryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrodoriChessMysteryInfo& default_instance();

  static inline const IrodoriChessMysteryInfo* internal_default_instance() {
    return reinterpret_cast<const IrodoriChessMysteryInfo*>(
               &_IrodoriChessMysteryInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(IrodoriChessMysteryInfo* other);
  friend void swap(IrodoriChessMysteryInfo& a, IrodoriChessMysteryInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrodoriChessMysteryInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IrodoriChessMysteryInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IrodoriChessMysteryInfo& from);
  void MergeFrom(const IrodoriChessMysteryInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IrodoriChessMysteryInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 entrance_point_id_list = 2;
  int entrance_point_id_list_size() const;
  void clear_entrance_point_id_list();
  static const int kEntrancePointIdListFieldNumber = 2;
  ::google::protobuf::uint32 entrance_point_id_list(int index) const;
  void set_entrance_point_id_list(int index, ::google::protobuf::uint32 value);
  void add_entrance_point_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      entrance_point_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_entrance_point_id_list();

  // repeated uint32 exit_point_id_list = 13;
  int exit_point_id_list_size() const;
  void clear_exit_point_id_list();
  static const int kExitPointIdListFieldNumber = 13;
  ::google::protobuf::uint32 exit_point_id_list(int index) const;
  void set_exit_point_id_list(int index, ::google::protobuf::uint32 value);
  void add_exit_point_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      exit_point_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_exit_point_id_list();

  // .proto.IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
  bool has_entrance_detail_info() const;
  void clear_entrance_detail_info();
  static const int kEntranceDetailInfoFieldNumber = 5;
  const ::proto::IrodoriChessEntranceDetailInfo& entrance_detail_info() const;
  ::proto::IrodoriChessEntranceDetailInfo* mutable_entrance_detail_info();
  ::proto::IrodoriChessEntranceDetailInfo* release_entrance_detail_info();
  void set_allocated_entrance_detail_info(::proto::IrodoriChessEntranceDetailInfo* entrance_detail_info);

  // @@protoc_insertion_point(class_scope:proto.IrodoriChessMysteryInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > entrance_point_id_list_;
  mutable int _entrance_point_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > exit_point_id_list_;
  mutable int _exit_point_id_list_cached_byte_size_;
  ::proto::IrodoriChessEntranceDetailInfo* entrance_detail_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InBattleIrodoriChessSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.InBattleIrodoriChessSettleInfo) */ {
 public:
  InBattleIrodoriChessSettleInfo();
  virtual ~InBattleIrodoriChessSettleInfo();

  InBattleIrodoriChessSettleInfo(const InBattleIrodoriChessSettleInfo& from);

  inline InBattleIrodoriChessSettleInfo& operator=(const InBattleIrodoriChessSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InBattleIrodoriChessSettleInfo(InBattleIrodoriChessSettleInfo&& from) noexcept
    : InBattleIrodoriChessSettleInfo() {
    *this = ::std::move(from);
  }

  inline InBattleIrodoriChessSettleInfo& operator=(InBattleIrodoriChessSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const InBattleIrodoriChessSettleInfo& default_instance();

  static inline const InBattleIrodoriChessSettleInfo* internal_default_instance() {
    return reinterpret_cast<const InBattleIrodoriChessSettleInfo*>(
               &_InBattleIrodoriChessSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(InBattleIrodoriChessSettleInfo* other);
  friend void swap(InBattleIrodoriChessSettleInfo& a, InBattleIrodoriChessSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InBattleIrodoriChessSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  InBattleIrodoriChessSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const InBattleIrodoriChessSettleInfo& from);
  void MergeFrom(const InBattleIrodoriChessSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(InBattleIrodoriChessSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 scene_time_ms = 1;
  void clear_scene_time_ms();
  static const int kSceneTimeMsFieldNumber = 1;
  ::google::protobuf::uint64 scene_time_ms() const;
  void set_scene_time_ms(::google::protobuf::uint64 value);

  // uint32 settle_score = 3;
  void clear_settle_score();
  static const int kSettleScoreFieldNumber = 3;
  ::google::protobuf::uint32 settle_score() const;
  void set_settle_score(::google::protobuf::uint32 value);

  // bool is_new_record = 5;
  void clear_is_new_record();
  static const int kIsNewRecordFieldNumber = 5;
  bool is_new_record() const;
  void set_is_new_record(bool value);

  // bool is_activity_end = 2;
  void clear_is_activity_end();
  static const int kIsActivityEndFieldNumber = 2;
  bool is_activity_end() const;
  void set_is_activity_end(bool value);

  // bool is_perfect = 12;
  void clear_is_perfect();
  static const int kIsPerfectFieldNumber = 12;
  bool is_perfect() const;
  void set_is_perfect(bool value);

  // uint32 kill_monster_num = 7;
  void clear_kill_monster_num();
  static const int kKillMonsterNumFieldNumber = 7;
  ::google::protobuf::uint32 kill_monster_num() const;
  void set_kill_monster_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.InBattleIrodoriChessSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 scene_time_ms_;
  ::google::protobuf::uint32 settle_score_;
  bool is_new_record_;
  bool is_activity_end_;
  bool is_perfect_;
  ::google::protobuf::uint32 kill_monster_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrodoriChessPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IrodoriChessPlayerInfo) */ {
 public:
  IrodoriChessPlayerInfo();
  virtual ~IrodoriChessPlayerInfo();

  IrodoriChessPlayerInfo(const IrodoriChessPlayerInfo& from);

  inline IrodoriChessPlayerInfo& operator=(const IrodoriChessPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrodoriChessPlayerInfo(IrodoriChessPlayerInfo&& from) noexcept
    : IrodoriChessPlayerInfo() {
    *this = ::std::move(from);
  }

  inline IrodoriChessPlayerInfo& operator=(IrodoriChessPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrodoriChessPlayerInfo& default_instance();

  static inline const IrodoriChessPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const IrodoriChessPlayerInfo*>(
               &_IrodoriChessPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(IrodoriChessPlayerInfo* other);
  friend void swap(IrodoriChessPlayerInfo& a, IrodoriChessPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrodoriChessPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  IrodoriChessPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IrodoriChessPlayerInfo& from);
  void MergeFrom(const IrodoriChessPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IrodoriChessPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 settle_score = 3;
  void clear_settle_score();
  static const int kSettleScoreFieldNumber = 3;
  ::google::protobuf::uint32 settle_score() const;
  void set_settle_score(::google::protobuf::uint32 value);

  // uint32 uid = 4;
  void clear_uid();
  static const int kUidFieldNumber = 4;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 building_points = 9;
  void clear_building_points();
  static const int kBuildingPointsFieldNumber = 9;
  ::google::protobuf::uint32 building_points() const;
  void set_building_points(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.IrodoriChessPlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 settle_score_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 building_points_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrodoriChessPlayerInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IrodoriChessPlayerInfoNotify) */ {
 public:
  IrodoriChessPlayerInfoNotify();
  virtual ~IrodoriChessPlayerInfoNotify();

  IrodoriChessPlayerInfoNotify(const IrodoriChessPlayerInfoNotify& from);

  inline IrodoriChessPlayerInfoNotify& operator=(const IrodoriChessPlayerInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrodoriChessPlayerInfoNotify(IrodoriChessPlayerInfoNotify&& from) noexcept
    : IrodoriChessPlayerInfoNotify() {
    *this = ::std::move(from);
  }

  inline IrodoriChessPlayerInfoNotify& operator=(IrodoriChessPlayerInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrodoriChessPlayerInfoNotify& default_instance();

  static inline const IrodoriChessPlayerInfoNotify* internal_default_instance() {
    return reinterpret_cast<const IrodoriChessPlayerInfoNotify*>(
               &_IrodoriChessPlayerInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(IrodoriChessPlayerInfoNotify* other);
  friend void swap(IrodoriChessPlayerInfoNotify& a, IrodoriChessPlayerInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrodoriChessPlayerInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  IrodoriChessPlayerInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IrodoriChessPlayerInfoNotify& from);
  void MergeFrom(const IrodoriChessPlayerInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IrodoriChessPlayerInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.IrodoriChessPlayerInfo player_info = 6;
  bool has_player_info() const;
  void clear_player_info();
  static const int kPlayerInfoFieldNumber = 6;
  const ::proto::IrodoriChessPlayerInfo& player_info() const;
  ::proto::IrodoriChessPlayerInfo* mutable_player_info();
  ::proto::IrodoriChessPlayerInfo* release_player_info();
  void set_allocated_player_info(::proto::IrodoriChessPlayerInfo* player_info);

  // @@protoc_insertion_point(class_scope:proto.IrodoriChessPlayerInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::IrodoriChessPlayerInfo* player_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IrodoriChessLeftMonsterNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.IrodoriChessLeftMonsterNotify) */ {
 public:
  IrodoriChessLeftMonsterNotify();
  virtual ~IrodoriChessLeftMonsterNotify();

  IrodoriChessLeftMonsterNotify(const IrodoriChessLeftMonsterNotify& from);

  inline IrodoriChessLeftMonsterNotify& operator=(const IrodoriChessLeftMonsterNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IrodoriChessLeftMonsterNotify(IrodoriChessLeftMonsterNotify&& from) noexcept
    : IrodoriChessLeftMonsterNotify() {
    *this = ::std::move(from);
  }

  inline IrodoriChessLeftMonsterNotify& operator=(IrodoriChessLeftMonsterNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IrodoriChessLeftMonsterNotify& default_instance();

  static inline const IrodoriChessLeftMonsterNotify* internal_default_instance() {
    return reinterpret_cast<const IrodoriChessLeftMonsterNotify*>(
               &_IrodoriChessLeftMonsterNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(IrodoriChessLeftMonsterNotify* other);
  friend void swap(IrodoriChessLeftMonsterNotify& a, IrodoriChessLeftMonsterNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IrodoriChessLeftMonsterNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  IrodoriChessLeftMonsterNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IrodoriChessLeftMonsterNotify& from);
  void MergeFrom(const IrodoriChessLeftMonsterNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IrodoriChessLeftMonsterNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 left_monsters = 8;
  void clear_left_monsters();
  static const int kLeftMonstersFieldNumber = 8;
  ::google::protobuf::uint32 left_monsters() const;
  void set_left_monsters(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.IrodoriChessLeftMonsterNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 left_monsters_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerPlayerBattleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerPlayerBattleInfo) */ {
 public:
  BrickBreakerPlayerBattleInfo();
  virtual ~BrickBreakerPlayerBattleInfo();

  BrickBreakerPlayerBattleInfo(const BrickBreakerPlayerBattleInfo& from);

  inline BrickBreakerPlayerBattleInfo& operator=(const BrickBreakerPlayerBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerPlayerBattleInfo(BrickBreakerPlayerBattleInfo&& from) noexcept
    : BrickBreakerPlayerBattleInfo() {
    *this = ::std::move(from);
  }

  inline BrickBreakerPlayerBattleInfo& operator=(BrickBreakerPlayerBattleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerPlayerBattleInfo& default_instance();

  static inline const BrickBreakerPlayerBattleInfo* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerPlayerBattleInfo*>(
               &_BrickBreakerPlayerBattleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(BrickBreakerPlayerBattleInfo* other);
  friend void swap(BrickBreakerPlayerBattleInfo& a, BrickBreakerPlayerBattleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerPlayerBattleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerPlayerBattleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerPlayerBattleInfo& from);
  void MergeFrom(const BrickBreakerPlayerBattleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerPlayerBattleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 avatar_id = 9;
  int avatar_id_size() const;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 9;
  ::google::protobuf::uint32 avatar_id(int index) const;
  void set_avatar_id(int index, ::google::protobuf::uint32 value);
  void add_avatar_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      avatar_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_avatar_id();

  // repeated uint32 skill_list = 10;
  int skill_list_size() const;
  void clear_skill_list();
  static const int kSkillListFieldNumber = 10;
  ::google::protobuf::uint32 skill_list(int index) const;
  void set_skill_list(int index, ::google::protobuf::uint32 value);
  void add_skill_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_list();

  // repeated uint32 costume_id = 13;
  int costume_id_size() const;
  void clear_costume_id();
  static const int kCostumeIdFieldNumber = 13;
  ::google::protobuf::uint32 costume_id(int index) const;
  void set_costume_id(int index, ::google::protobuf::uint32 value);
  void add_costume_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      costume_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_costume_id();

  // string nickname = 3;
  void clear_nickname();
  static const int kNicknameFieldNumber = 3;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // bool is_ready = 14;
  void clear_is_ready();
  static const int kIsReadyFieldNumber = 14;
  bool is_ready() const;
  void set_is_ready(bool value);

  // bool is_changing = 11;
  void clear_is_changing();
  static const int kIsChangingFieldNumber = 11;
  bool is_changing() const;
  void set_is_changing(bool value);

  // uint32 uid = 15;
  void clear_uid();
  static const int kUidFieldNumber = 15;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerPlayerBattleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > avatar_id_;
  mutable int _avatar_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_list_;
  mutable int _skill_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > costume_id_;
  mutable int _costume_id_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  bool is_ready_;
  bool is_changing_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerPlayerReadyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerPlayerReadyNotify) */ {
 public:
  BrickBreakerPlayerReadyNotify();
  virtual ~BrickBreakerPlayerReadyNotify();

  BrickBreakerPlayerReadyNotify(const BrickBreakerPlayerReadyNotify& from);

  inline BrickBreakerPlayerReadyNotify& operator=(const BrickBreakerPlayerReadyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerPlayerReadyNotify(BrickBreakerPlayerReadyNotify&& from) noexcept
    : BrickBreakerPlayerReadyNotify() {
    *this = ::std::move(from);
  }

  inline BrickBreakerPlayerReadyNotify& operator=(BrickBreakerPlayerReadyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerPlayerReadyNotify& default_instance();

  static inline const BrickBreakerPlayerReadyNotify* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerPlayerReadyNotify*>(
               &_BrickBreakerPlayerReadyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    83;

  void Swap(BrickBreakerPlayerReadyNotify* other);
  friend void swap(BrickBreakerPlayerReadyNotify& a, BrickBreakerPlayerReadyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerPlayerReadyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerPlayerReadyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerPlayerReadyNotify& from);
  void MergeFrom(const BrickBreakerPlayerReadyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerPlayerReadyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 uid_list = 14;
  int uid_list_size() const;
  void clear_uid_list();
  static const int kUidListFieldNumber = 14;
  ::google::protobuf::uint32 uid_list(int index) const;
  void set_uid_list(int index, ::google::protobuf::uint32 value);
  void add_uid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      uid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_uid_list();

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerPlayerReadyNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > uid_list_;
  mutable int _uid_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerPlayerSetAvatarNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerPlayerSetAvatarNotify) */ {
 public:
  BrickBreakerPlayerSetAvatarNotify();
  virtual ~BrickBreakerPlayerSetAvatarNotify();

  BrickBreakerPlayerSetAvatarNotify(const BrickBreakerPlayerSetAvatarNotify& from);

  inline BrickBreakerPlayerSetAvatarNotify& operator=(const BrickBreakerPlayerSetAvatarNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerPlayerSetAvatarNotify(BrickBreakerPlayerSetAvatarNotify&& from) noexcept
    : BrickBreakerPlayerSetAvatarNotify() {
    *this = ::std::move(from);
  }

  inline BrickBreakerPlayerSetAvatarNotify& operator=(BrickBreakerPlayerSetAvatarNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerPlayerSetAvatarNotify& default_instance();

  static inline const BrickBreakerPlayerSetAvatarNotify* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerPlayerSetAvatarNotify*>(
               &_BrickBreakerPlayerSetAvatarNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(BrickBreakerPlayerSetAvatarNotify* other);
  friend void swap(BrickBreakerPlayerSetAvatarNotify& a, BrickBreakerPlayerSetAvatarNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerPlayerSetAvatarNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerPlayerSetAvatarNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerPlayerSetAvatarNotify& from);
  void MergeFrom(const BrickBreakerPlayerSetAvatarNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerPlayerSetAvatarNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 avatar_id_list = 8;
  int avatar_id_list_size() const;
  void clear_avatar_id_list();
  static const int kAvatarIdListFieldNumber = 8;
  ::google::protobuf::uint32 avatar_id_list(int index) const;
  void set_avatar_id_list(int index, ::google::protobuf::uint32 value);
  void add_avatar_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      avatar_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_avatar_id_list();

  // repeated uint32 costume_id_list = 11;
  int costume_id_list_size() const;
  void clear_costume_id_list();
  static const int kCostumeIdListFieldNumber = 11;
  ::google::protobuf::uint32 costume_id_list(int index) const;
  void set_costume_id_list(int index, ::google::protobuf::uint32 value);
  void add_costume_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      costume_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_costume_id_list();

  // uint32 uid = 9;
  void clear_uid();
  static const int kUidFieldNumber = 9;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerPlayerSetAvatarNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > avatar_id_list_;
  mutable int _avatar_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > costume_id_list_;
  mutable int _costume_id_list_cached_byte_size_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerPlayerSetSkillNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerPlayerSetSkillNotify) */ {
 public:
  BrickBreakerPlayerSetSkillNotify();
  virtual ~BrickBreakerPlayerSetSkillNotify();

  BrickBreakerPlayerSetSkillNotify(const BrickBreakerPlayerSetSkillNotify& from);

  inline BrickBreakerPlayerSetSkillNotify& operator=(const BrickBreakerPlayerSetSkillNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerPlayerSetSkillNotify(BrickBreakerPlayerSetSkillNotify&& from) noexcept
    : BrickBreakerPlayerSetSkillNotify() {
    *this = ::std::move(from);
  }

  inline BrickBreakerPlayerSetSkillNotify& operator=(BrickBreakerPlayerSetSkillNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerPlayerSetSkillNotify& default_instance();

  static inline const BrickBreakerPlayerSetSkillNotify* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerPlayerSetSkillNotify*>(
               &_BrickBreakerPlayerSetSkillNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(BrickBreakerPlayerSetSkillNotify* other);
  friend void swap(BrickBreakerPlayerSetSkillNotify& a, BrickBreakerPlayerSetSkillNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerPlayerSetSkillNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerPlayerSetSkillNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerPlayerSetSkillNotify& from);
  void MergeFrom(const BrickBreakerPlayerSetSkillNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerPlayerSetSkillNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 skill_id_list = 14;
  int skill_id_list_size() const;
  void clear_skill_id_list();
  static const int kSkillIdListFieldNumber = 14;
  ::google::protobuf::uint32 skill_id_list(int index) const;
  void set_skill_id_list(int index, ::google::protobuf::uint32 value);
  void add_skill_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id_list();

  // uint32 uid = 8;
  void clear_uid();
  static const int kUidFieldNumber = 8;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerPlayerSetSkillNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_list_;
  mutable int _skill_id_list_cached_byte_size_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSetReadyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSetReadyReq) */ {
 public:
  BrickBreakerSetReadyReq();
  virtual ~BrickBreakerSetReadyReq();

  BrickBreakerSetReadyReq(const BrickBreakerSetReadyReq& from);

  inline BrickBreakerSetReadyReq& operator=(const BrickBreakerSetReadyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSetReadyReq(BrickBreakerSetReadyReq&& from) noexcept
    : BrickBreakerSetReadyReq() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSetReadyReq& operator=(BrickBreakerSetReadyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSetReadyReq& default_instance();

  static inline const BrickBreakerSetReadyReq* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSetReadyReq*>(
               &_BrickBreakerSetReadyReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(BrickBreakerSetReadyReq* other);
  friend void swap(BrickBreakerSetReadyReq& a, BrickBreakerSetReadyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSetReadyReq* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSetReadyReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSetReadyReq& from);
  void MergeFrom(const BrickBreakerSetReadyReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSetReadyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSetReadyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSetReadyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSetReadyRsp) */ {
 public:
  BrickBreakerSetReadyRsp();
  virtual ~BrickBreakerSetReadyRsp();

  BrickBreakerSetReadyRsp(const BrickBreakerSetReadyRsp& from);

  inline BrickBreakerSetReadyRsp& operator=(const BrickBreakerSetReadyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSetReadyRsp(BrickBreakerSetReadyRsp&& from) noexcept
    : BrickBreakerSetReadyRsp() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSetReadyRsp& operator=(BrickBreakerSetReadyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSetReadyRsp& default_instance();

  static inline const BrickBreakerSetReadyRsp* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSetReadyRsp*>(
               &_BrickBreakerSetReadyRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(BrickBreakerSetReadyRsp* other);
  friend void swap(BrickBreakerSetReadyRsp& a, BrickBreakerSetReadyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSetReadyRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSetReadyRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSetReadyRsp& from);
  void MergeFrom(const BrickBreakerSetReadyRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSetReadyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSetReadyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSelectAvatarReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSelectAvatarReq) */ {
 public:
  BrickBreakerSelectAvatarReq();
  virtual ~BrickBreakerSelectAvatarReq();

  BrickBreakerSelectAvatarReq(const BrickBreakerSelectAvatarReq& from);

  inline BrickBreakerSelectAvatarReq& operator=(const BrickBreakerSelectAvatarReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSelectAvatarReq(BrickBreakerSelectAvatarReq&& from) noexcept
    : BrickBreakerSelectAvatarReq() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSelectAvatarReq& operator=(BrickBreakerSelectAvatarReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSelectAvatarReq& default_instance();

  static inline const BrickBreakerSelectAvatarReq* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSelectAvatarReq*>(
               &_BrickBreakerSelectAvatarReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(BrickBreakerSelectAvatarReq* other);
  friend void swap(BrickBreakerSelectAvatarReq& a, BrickBreakerSelectAvatarReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSelectAvatarReq* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSelectAvatarReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSelectAvatarReq& from);
  void MergeFrom(const BrickBreakerSelectAvatarReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSelectAvatarReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 avatar_id = 2;
  int avatar_id_size() const;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 2;
  ::google::protobuf::uint32 avatar_id(int index) const;
  void set_avatar_id(int index, ::google::protobuf::uint32 value);
  void add_avatar_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      avatar_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_avatar_id();

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSelectAvatarReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > avatar_id_;
  mutable int _avatar_id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSelectAvatarRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSelectAvatarRsp) */ {
 public:
  BrickBreakerSelectAvatarRsp();
  virtual ~BrickBreakerSelectAvatarRsp();

  BrickBreakerSelectAvatarRsp(const BrickBreakerSelectAvatarRsp& from);

  inline BrickBreakerSelectAvatarRsp& operator=(const BrickBreakerSelectAvatarRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSelectAvatarRsp(BrickBreakerSelectAvatarRsp&& from) noexcept
    : BrickBreakerSelectAvatarRsp() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSelectAvatarRsp& operator=(BrickBreakerSelectAvatarRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSelectAvatarRsp& default_instance();

  static inline const BrickBreakerSelectAvatarRsp* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSelectAvatarRsp*>(
               &_BrickBreakerSelectAvatarRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(BrickBreakerSelectAvatarRsp* other);
  friend void swap(BrickBreakerSelectAvatarRsp& a, BrickBreakerSelectAvatarRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSelectAvatarRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSelectAvatarRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSelectAvatarRsp& from);
  void MergeFrom(const BrickBreakerSelectAvatarRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSelectAvatarRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 avatar_id = 8;
  int avatar_id_size() const;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 8;
  ::google::protobuf::uint32 avatar_id(int index) const;
  void set_avatar_id(int index, ::google::protobuf::uint32 value);
  void add_avatar_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      avatar_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_avatar_id();

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSelectAvatarRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > avatar_id_;
  mutable int _avatar_id_cached_byte_size_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSelectSkillReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSelectSkillReq) */ {
 public:
  BrickBreakerSelectSkillReq();
  virtual ~BrickBreakerSelectSkillReq();

  BrickBreakerSelectSkillReq(const BrickBreakerSelectSkillReq& from);

  inline BrickBreakerSelectSkillReq& operator=(const BrickBreakerSelectSkillReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSelectSkillReq(BrickBreakerSelectSkillReq&& from) noexcept
    : BrickBreakerSelectSkillReq() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSelectSkillReq& operator=(BrickBreakerSelectSkillReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSelectSkillReq& default_instance();

  static inline const BrickBreakerSelectSkillReq* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSelectSkillReq*>(
               &_BrickBreakerSelectSkillReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(BrickBreakerSelectSkillReq* other);
  friend void swap(BrickBreakerSelectSkillReq& a, BrickBreakerSelectSkillReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSelectSkillReq* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSelectSkillReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSelectSkillReq& from);
  void MergeFrom(const BrickBreakerSelectSkillReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSelectSkillReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 skill_id = 6;
  int skill_id_size() const;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 6;
  ::google::protobuf::uint32 skill_id(int index) const;
  void set_skill_id(int index, ::google::protobuf::uint32 value);
  void add_skill_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id();

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSelectSkillReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_;
  mutable int _skill_id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSelectSkillRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSelectSkillRsp) */ {
 public:
  BrickBreakerSelectSkillRsp();
  virtual ~BrickBreakerSelectSkillRsp();

  BrickBreakerSelectSkillRsp(const BrickBreakerSelectSkillRsp& from);

  inline BrickBreakerSelectSkillRsp& operator=(const BrickBreakerSelectSkillRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSelectSkillRsp(BrickBreakerSelectSkillRsp&& from) noexcept
    : BrickBreakerSelectSkillRsp() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSelectSkillRsp& operator=(BrickBreakerSelectSkillRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSelectSkillRsp& default_instance();

  static inline const BrickBreakerSelectSkillRsp* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSelectSkillRsp*>(
               &_BrickBreakerSelectSkillRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(BrickBreakerSelectSkillRsp* other);
  friend void swap(BrickBreakerSelectSkillRsp& a, BrickBreakerSelectSkillRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSelectSkillRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSelectSkillRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSelectSkillRsp& from);
  void MergeFrom(const BrickBreakerSelectSkillRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSelectSkillRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 skill_id = 11;
  int skill_id_size() const;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 11;
  ::google::protobuf::uint32 skill_id(int index) const;
  void set_skill_id(int index, ::google::protobuf::uint32 value);
  void add_skill_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id();

  // int32 retcode = 10;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 10;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSelectSkillRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_;
  mutable int _skill_id_cached_byte_size_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSetChangingReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSetChangingReq) */ {
 public:
  BrickBreakerSetChangingReq();
  virtual ~BrickBreakerSetChangingReq();

  BrickBreakerSetChangingReq(const BrickBreakerSetChangingReq& from);

  inline BrickBreakerSetChangingReq& operator=(const BrickBreakerSetChangingReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSetChangingReq(BrickBreakerSetChangingReq&& from) noexcept
    : BrickBreakerSetChangingReq() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSetChangingReq& operator=(BrickBreakerSetChangingReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSetChangingReq& default_instance();

  static inline const BrickBreakerSetChangingReq* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSetChangingReq*>(
               &_BrickBreakerSetChangingReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(BrickBreakerSetChangingReq* other);
  friend void swap(BrickBreakerSetChangingReq& a, BrickBreakerSetChangingReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSetChangingReq* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSetChangingReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSetChangingReq& from);
  void MergeFrom(const BrickBreakerSetChangingReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSetChangingReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_changing = 11;
  void clear_is_changing();
  static const int kIsChangingFieldNumber = 11;
  bool is_changing() const;
  void set_is_changing(bool value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSetChangingReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_changing_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerSetChangingRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerSetChangingRsp) */ {
 public:
  BrickBreakerSetChangingRsp();
  virtual ~BrickBreakerSetChangingRsp();

  BrickBreakerSetChangingRsp(const BrickBreakerSetChangingRsp& from);

  inline BrickBreakerSetChangingRsp& operator=(const BrickBreakerSetChangingRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerSetChangingRsp(BrickBreakerSetChangingRsp&& from) noexcept
    : BrickBreakerSetChangingRsp() {
    *this = ::std::move(from);
  }

  inline BrickBreakerSetChangingRsp& operator=(BrickBreakerSetChangingRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerSetChangingRsp& default_instance();

  static inline const BrickBreakerSetChangingRsp* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerSetChangingRsp*>(
               &_BrickBreakerSetChangingRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(BrickBreakerSetChangingRsp* other);
  friend void swap(BrickBreakerSetChangingRsp& a, BrickBreakerSetChangingRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerSetChangingRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerSetChangingRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerSetChangingRsp& from);
  void MergeFrom(const BrickBreakerSetChangingRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerSetChangingRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerSetChangingRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BrickBreakerPlayerSetChangingNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.BrickBreakerPlayerSetChangingNotify) */ {
 public:
  BrickBreakerPlayerSetChangingNotify();
  virtual ~BrickBreakerPlayerSetChangingNotify();

  BrickBreakerPlayerSetChangingNotify(const BrickBreakerPlayerSetChangingNotify& from);

  inline BrickBreakerPlayerSetChangingNotify& operator=(const BrickBreakerPlayerSetChangingNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BrickBreakerPlayerSetChangingNotify(BrickBreakerPlayerSetChangingNotify&& from) noexcept
    : BrickBreakerPlayerSetChangingNotify() {
    *this = ::std::move(from);
  }

  inline BrickBreakerPlayerSetChangingNotify& operator=(BrickBreakerPlayerSetChangingNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BrickBreakerPlayerSetChangingNotify& default_instance();

  static inline const BrickBreakerPlayerSetChangingNotify* internal_default_instance() {
    return reinterpret_cast<const BrickBreakerPlayerSetChangingNotify*>(
               &_BrickBreakerPlayerSetChangingNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(BrickBreakerPlayerSetChangingNotify* other);
  friend void swap(BrickBreakerPlayerSetChangingNotify& a, BrickBreakerPlayerSetChangingNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BrickBreakerPlayerSetChangingNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  BrickBreakerPlayerSetChangingNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BrickBreakerPlayerSetChangingNotify& from);
  void MergeFrom(const BrickBreakerPlayerSetChangingNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BrickBreakerPlayerSetChangingNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_changing = 7;
  void clear_is_changing();
  static const int kIsChangingFieldNumber = 7;
  bool is_changing() const;
  void set_is_changing(bool value);

  // uint32 uid = 15;
  void clear_uid();
  static const int kUidFieldNumber = 15;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.BrickBreakerPlayerSetChangingNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_changing_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CoinCollectTeamAvatarInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CoinCollectTeamAvatarInfo) */ {
 public:
  CoinCollectTeamAvatarInfo();
  virtual ~CoinCollectTeamAvatarInfo();

  CoinCollectTeamAvatarInfo(const CoinCollectTeamAvatarInfo& from);

  inline CoinCollectTeamAvatarInfo& operator=(const CoinCollectTeamAvatarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoinCollectTeamAvatarInfo(CoinCollectTeamAvatarInfo&& from) noexcept
    : CoinCollectTeamAvatarInfo() {
    *this = ::std::move(from);
  }

  inline CoinCollectTeamAvatarInfo& operator=(CoinCollectTeamAvatarInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinCollectTeamAvatarInfo& default_instance();

  static inline const CoinCollectTeamAvatarInfo* internal_default_instance() {
    return reinterpret_cast<const CoinCollectTeamAvatarInfo*>(
               &_CoinCollectTeamAvatarInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(CoinCollectTeamAvatarInfo* other);
  friend void swap(CoinCollectTeamAvatarInfo& a, CoinCollectTeamAvatarInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoinCollectTeamAvatarInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CoinCollectTeamAvatarInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CoinCollectTeamAvatarInfo& from);
  void MergeFrom(const CoinCollectTeamAvatarInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CoinCollectTeamAvatarInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 costume_id = 4;
  void clear_costume_id();
  static const int kCostumeIdFieldNumber = 4;
  ::google::protobuf::uint32 costume_id() const;
  void set_costume_id(::google::protobuf::uint32 value);

  // uint32 avatar_id = 10;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 10;
  ::google::protobuf::uint32 avatar_id() const;
  void set_avatar_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CoinCollectTeamAvatarInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 costume_id_;
  ::google::protobuf::uint32 avatar_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CoinCollectPlayerInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CoinCollectPlayerInfo) */ {
 public:
  CoinCollectPlayerInfo();
  virtual ~CoinCollectPlayerInfo();

  CoinCollectPlayerInfo(const CoinCollectPlayerInfo& from);

  inline CoinCollectPlayerInfo& operator=(const CoinCollectPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoinCollectPlayerInfo(CoinCollectPlayerInfo&& from) noexcept
    : CoinCollectPlayerInfo() {
    *this = ::std::move(from);
  }

  inline CoinCollectPlayerInfo& operator=(CoinCollectPlayerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinCollectPlayerInfo& default_instance();

  static inline const CoinCollectPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const CoinCollectPlayerInfo*>(
               &_CoinCollectPlayerInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(CoinCollectPlayerInfo* other);
  friend void swap(CoinCollectPlayerInfo& a, CoinCollectPlayerInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoinCollectPlayerInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CoinCollectPlayerInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CoinCollectPlayerInfo& from);
  void MergeFrom(const CoinCollectPlayerInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CoinCollectPlayerInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.CoinCollectTeamAvatarInfo avatar_info_list = 10;
  int avatar_info_list_size() const;
  void clear_avatar_info_list();
  static const int kAvatarInfoListFieldNumber = 10;
  const ::proto::CoinCollectTeamAvatarInfo& avatar_info_list(int index) const;
  ::proto::CoinCollectTeamAvatarInfo* mutable_avatar_info_list(int index);
  ::proto::CoinCollectTeamAvatarInfo* add_avatar_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectTeamAvatarInfo >*
      mutable_avatar_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectTeamAvatarInfo >&
      avatar_info_list() const;

  // string player_name = 11;
  void clear_player_name();
  static const int kPlayerNameFieldNumber = 11;
  const ::std::string& player_name() const;
  void set_player_name(const ::std::string& value);
  #if LANG_CXX11
  void set_player_name(::std::string&& value);
  #endif
  void set_player_name(const char* value);
  void set_player_name(const char* value, size_t size);
  ::std::string* mutable_player_name();
  ::std::string* release_player_name();
  void set_allocated_player_name(::std::string* player_name);

  // bool is_prepare = 14;
  void clear_is_prepare();
  static const int kIsPrepareFieldNumber = 14;
  bool is_prepare() const;
  void set_is_prepare(bool value);

  // uint32 choose_skill_no = 5;
  void clear_choose_skill_no();
  static const int kChooseSkillNoFieldNumber = 5;
  ::google::protobuf::uint32 choose_skill_no() const;
  void set_choose_skill_no(::google::protobuf::uint32 value);

  // uint32 player_uid = 12;
  void clear_player_uid();
  static const int kPlayerUidFieldNumber = 12;
  ::google::protobuf::uint32 player_uid() const;
  void set_player_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.CoinCollectPlayerInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectTeamAvatarInfo > avatar_info_list_;
  ::google::protobuf::internal::ArenaStringPtr player_name_;
  bool is_prepare_;
  ::google::protobuf::uint32 choose_skill_no_;
  ::google::protobuf::uint32 player_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CoinCollectPrepareStageNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.CoinCollectPrepareStageNotify) */ {
 public:
  CoinCollectPrepareStageNotify();
  virtual ~CoinCollectPrepareStageNotify();

  CoinCollectPrepareStageNotify(const CoinCollectPrepareStageNotify& from);

  inline CoinCollectPrepareStageNotify& operator=(const CoinCollectPrepareStageNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CoinCollectPrepareStageNotify(CoinCollectPrepareStageNotify&& from) noexcept
    : CoinCollectPrepareStageNotify() {
    *this = ::std::move(from);
  }

  inline CoinCollectPrepareStageNotify& operator=(CoinCollectPrepareStageNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CoinCollectPrepareStageNotify& default_instance();

  static inline const CoinCollectPrepareStageNotify* internal_default_instance() {
    return reinterpret_cast<const CoinCollectPrepareStageNotify*>(
               &_CoinCollectPrepareStageNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(CoinCollectPrepareStageNotify* other);
  friend void swap(CoinCollectPrepareStageNotify& a, CoinCollectPrepareStageNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CoinCollectPrepareStageNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  CoinCollectPrepareStageNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CoinCollectPrepareStageNotify& from);
  void MergeFrom(const CoinCollectPrepareStageNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CoinCollectPrepareStageNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.CoinCollectStageInfo coin_collect_info = 3;
  bool has_coin_collect_info() const;
  void clear_coin_collect_info();
  static const int kCoinCollectInfoFieldNumber = 3;
  const ::proto::CoinCollectStageInfo& coin_collect_info() const;
  ::proto::CoinCollectStageInfo* mutable_coin_collect_info();
  ::proto::CoinCollectStageInfo* release_coin_collect_info();
  void set_allocated_coin_collect_info(::proto::CoinCollectStageInfo* coin_collect_info);

  // @@protoc_insertion_point(class_scope:proto.CoinCollectPrepareStageNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::CoinCollectStageInfo* coin_collect_info_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LanV3BoatSettleInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.LanV3BoatSettleInfo) */ {
 public:
  LanV3BoatSettleInfo();
  virtual ~LanV3BoatSettleInfo();

  LanV3BoatSettleInfo(const LanV3BoatSettleInfo& from);

  inline LanV3BoatSettleInfo& operator=(const LanV3BoatSettleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LanV3BoatSettleInfo(LanV3BoatSettleInfo&& from) noexcept
    : LanV3BoatSettleInfo() {
    *this = ::std::move(from);
  }

  inline LanV3BoatSettleInfo& operator=(LanV3BoatSettleInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LanV3BoatSettleInfo& default_instance();

  static inline const LanV3BoatSettleInfo* internal_default_instance() {
    return reinterpret_cast<const LanV3BoatSettleInfo*>(
               &_LanV3BoatSettleInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    98;

  void Swap(LanV3BoatSettleInfo* other);
  friend void swap(LanV3BoatSettleInfo& a, LanV3BoatSettleInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LanV3BoatSettleInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LanV3BoatSettleInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LanV3BoatSettleInfo& from);
  void MergeFrom(const LanV3BoatSettleInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LanV3BoatSettleInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ExhibitionDisplayInfo card_list = 1;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 1;
  const ::proto::ExhibitionDisplayInfo& card_list(int index) const;
  ::proto::ExhibitionDisplayInfo* mutable_card_list(int index);
  ::proto::ExhibitionDisplayInfo* add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
      mutable_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
      card_list() const;

  // string online_id = 13;
  void clear_online_id();
  static const int kOnlineIdFieldNumber = 13;
  const ::std::string& online_id() const;
  void set_online_id(const ::std::string& value);
  #if LANG_CXX11
  void set_online_id(::std::string&& value);
  #endif
  void set_online_id(const char* value);
  void set_online_id(const char* value, size_t size);
  ::std::string* mutable_online_id();
  ::std::string* release_online_id();
  void set_allocated_online_id(::std::string* online_id);

  // string nickname = 14;
  void clear_nickname();
  static const int kNicknameFieldNumber = 14;
  const ::std::string& nickname() const;
  void set_nickname(const ::std::string& value);
  #if LANG_CXX11
  void set_nickname(::std::string&& value);
  #endif
  void set_nickname(const char* value);
  void set_nickname(const char* value, size_t size);
  ::std::string* mutable_nickname();
  ::std::string* release_nickname();
  void set_allocated_nickname(::std::string* nickname);

  // .proto.ProfilePicture profile_picture = 12;
  bool has_profile_picture() const;
  void clear_profile_picture();
  static const int kProfilePictureFieldNumber = 12;
  const ::proto::ProfilePicture& profile_picture() const;
  ::proto::ProfilePicture* mutable_profile_picture();
  ::proto::ProfilePicture* release_profile_picture();
  void set_allocated_profile_picture(::proto::ProfilePicture* profile_picture);

  // uint32 uid = 8;
  void clear_uid();
  static const int kUidFieldNumber = 8;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // uint32 head_image = 10;
  void clear_head_image();
  static const int kHeadImageFieldNumber = 10;
  ::google::protobuf::uint32 head_image() const;
  void set_head_image(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.LanV3BoatSettleInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo > card_list_;
  ::google::protobuf::internal::ArenaStringPtr online_id_;
  ::google::protobuf::internal::ArenaStringPtr nickname_;
  ::proto::ProfilePicture* profile_picture_;
  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 head_image_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LanV3BoatSettleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.LanV3BoatSettleNotify) */ {
 public:
  LanV3BoatSettleNotify();
  virtual ~LanV3BoatSettleNotify();

  LanV3BoatSettleNotify(const LanV3BoatSettleNotify& from);

  inline LanV3BoatSettleNotify& operator=(const LanV3BoatSettleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LanV3BoatSettleNotify(LanV3BoatSettleNotify&& from) noexcept
    : LanV3BoatSettleNotify() {
    *this = ::std::move(from);
  }

  inline LanV3BoatSettleNotify& operator=(LanV3BoatSettleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LanV3BoatSettleNotify& default_instance();

  static inline const LanV3BoatSettleNotify* internal_default_instance() {
    return reinterpret_cast<const LanV3BoatSettleNotify*>(
               &_LanV3BoatSettleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    99;

  void Swap(LanV3BoatSettleNotify* other);
  friend void swap(LanV3BoatSettleNotify& a, LanV3BoatSettleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LanV3BoatSettleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  LanV3BoatSettleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LanV3BoatSettleNotify& from);
  void MergeFrom(const LanV3BoatSettleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LanV3BoatSettleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.ExhibitionDisplayInfo score_list = 1;
  int score_list_size() const;
  void clear_score_list();
  static const int kScoreListFieldNumber = 1;
  const ::proto::ExhibitionDisplayInfo& score_list(int index) const;
  ::proto::ExhibitionDisplayInfo* mutable_score_list(int index);
  ::proto::ExhibitionDisplayInfo* add_score_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
      mutable_score_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
      score_list() const;

  // repeated uint32 winner_uid_list = 2;
  int winner_uid_list_size() const;
  void clear_winner_uid_list();
  static const int kWinnerUidListFieldNumber = 2;
  ::google::protobuf::uint32 winner_uid_list(int index) const;
  void set_winner_uid_list(int index, ::google::protobuf::uint32 value);
  void add_winner_uid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      winner_uid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_winner_uid_list();

  // repeated .proto.LanV3BoatSettleInfo settle_info_list = 13;
  int settle_info_list_size() const;
  void clear_settle_info_list();
  static const int kSettleInfoListFieldNumber = 13;
  const ::proto::LanV3BoatSettleInfo& settle_info_list(int index) const;
  ::proto::LanV3BoatSettleInfo* mutable_settle_info_list(int index);
  ::proto::LanV3BoatSettleInfo* add_settle_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::LanV3BoatSettleInfo >*
      mutable_settle_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::LanV3BoatSettleInfo >&
      settle_info_list() const;

  // uint32 play_index = 4;
  void clear_play_index();
  static const int kPlayIndexFieldNumber = 4;
  ::google::protobuf::uint32 play_index() const;
  void set_play_index(::google::protobuf::uint32 value);

  // bool is_gallery_succ = 10;
  void clear_is_gallery_succ();
  static const int kIsGallerySuccFieldNumber = 10;
  bool is_gallery_succ() const;
  void set_is_gallery_succ(bool value);

  // bool is_single = 8;
  void clear_is_single();
  static const int kIsSingleFieldNumber = 8;
  bool is_single() const;
  void set_is_single(bool value);

  // uint32 stage_type = 12;
  void clear_stage_type();
  static const int kStageTypeFieldNumber = 12;
  ::google::protobuf::uint32 stage_type() const;
  void set_stage_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.LanV3BoatSettleNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo > score_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > winner_uid_list_;
  mutable int _winner_uid_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::LanV3BoatSettleInfo > settle_info_list_;
  ::google::protobuf::uint32 play_index_;
  bool is_gallery_succ_;
  bool is_single_;
  ::google::protobuf::uint32 stage_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fmultistage_5fplay_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InBattleMechanicusBuildingInfo

// uint32 building_id = 8;
inline void InBattleMechanicusBuildingInfo::clear_building_id() {
  building_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusBuildingInfo::building_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.building_id)
  return building_id_;
}
inline void InBattleMechanicusBuildingInfo::set_building_id(::google::protobuf::uint32 value) {
  
  building_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.building_id)
}

// uint32 level = 7;
inline void InBattleMechanicusBuildingInfo::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusBuildingInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.level)
  return level_;
}
inline void InBattleMechanicusBuildingInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.level)
}

// uint32 cost_points = 2;
inline void InBattleMechanicusBuildingInfo::clear_cost_points() {
  cost_points_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusBuildingInfo::cost_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.cost_points)
  return cost_points_;
}
inline void InBattleMechanicusBuildingInfo::set_cost_points(::google::protobuf::uint32 value) {
  
  cost_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.cost_points)
}

// uint32 refund_points = 11;
inline void InBattleMechanicusBuildingInfo::clear_refund_points() {
  refund_points_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusBuildingInfo::refund_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusBuildingInfo.refund_points)
  return refund_points_;
}
inline void InBattleMechanicusBuildingInfo::set_refund_points(::google::protobuf::uint32 value) {
  
  refund_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusBuildingInfo.refund_points)
}

// -------------------------------------------------------------------

// InBattleMechanicusPlayerInfo

// uint32 pick_card_id = 5;
inline void InBattleMechanicusPlayerInfo::clear_pick_card_id() {
  pick_card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPlayerInfo::pick_card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.pick_card_id)
  return pick_card_id_;
}
inline void InBattleMechanicusPlayerInfo::set_pick_card_id(::google::protobuf::uint32 value) {
  
  pick_card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.pick_card_id)
}

// uint32 uid = 14;
inline void InBattleMechanicusPlayerInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.uid)
  return uid_;
}
inline void InBattleMechanicusPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.uid)
}

// repeated .proto.InBattleMechanicusBuildingInfo building_list = 4;
inline int InBattleMechanicusPlayerInfo::building_list_size() const {
  return building_list_.size();
}
inline void InBattleMechanicusPlayerInfo::clear_building_list() {
  building_list_.Clear();
}
inline const ::proto::InBattleMechanicusBuildingInfo& InBattleMechanicusPlayerInfo::building_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_.Get(index);
}
inline ::proto::InBattleMechanicusBuildingInfo* InBattleMechanicusPlayerInfo::mutable_building_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_.Mutable(index);
}
inline ::proto::InBattleMechanicusBuildingInfo* InBattleMechanicusPlayerInfo::add_building_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusBuildingInfo >*
InBattleMechanicusPlayerInfo::mutable_building_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusPlayerInfo.building_list)
  return &building_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusBuildingInfo >&
InBattleMechanicusPlayerInfo::building_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusPlayerInfo.building_list)
  return building_list_;
}

// bool is_card_confirmed = 13;
inline void InBattleMechanicusPlayerInfo::clear_is_card_confirmed() {
  is_card_confirmed_ = false;
}
inline bool InBattleMechanicusPlayerInfo::is_card_confirmed() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.is_card_confirmed)
  return is_card_confirmed_;
}
inline void InBattleMechanicusPlayerInfo::set_is_card_confirmed(bool value) {
  
  is_card_confirmed_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.is_card_confirmed)
}

// uint32 building_points = 3;
inline void InBattleMechanicusPlayerInfo::clear_building_points() {
  building_points_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPlayerInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPlayerInfo.building_points)
  return building_points_;
}
inline void InBattleMechanicusPlayerInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPlayerInfo.building_points)
}

// -------------------------------------------------------------------

// InBattleMechanicusMonsterInfo

// uint32 monster_id = 1;
inline void InBattleMechanicusMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusMonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusMonsterInfo.monster_id)
  return monster_id_;
}
inline void InBattleMechanicusMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusMonsterInfo.monster_id)
}

// uint32 level = 14;
inline void InBattleMechanicusMonsterInfo::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusMonsterInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusMonsterInfo.level)
  return level_;
}
inline void InBattleMechanicusMonsterInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusMonsterInfo.level)
}

// uint32 count = 13;
inline void InBattleMechanicusMonsterInfo::clear_count() {
  count_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusMonsterInfo::count() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusMonsterInfo.count)
  return count_;
}
inline void InBattleMechanicusMonsterInfo::set_count(::google::protobuf::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusMonsterInfo.count)
}

// -------------------------------------------------------------------

// InBattleMechanicusCardInfo

// uint32 rand_effect_id = 12;
inline void InBattleMechanicusCardInfo::clear_rand_effect_id() {
  rand_effect_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardInfo::rand_effect_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.rand_effect_id)
  return rand_effect_id_;
}
inline void InBattleMechanicusCardInfo::set_rand_effect_id(::google::protobuf::uint32 value) {
  
  rand_effect_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.rand_effect_id)
}

// uint32 end_round = 3;
inline void InBattleMechanicusCardInfo::clear_end_round() {
  end_round_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardInfo::end_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.end_round)
  return end_round_;
}
inline void InBattleMechanicusCardInfo::set_end_round(::google::protobuf::uint32 value) {
  
  end_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.end_round)
}

// .proto.InBattleMechanicusCardChallengeState challenge_state = 5;
inline void InBattleMechanicusCardInfo::clear_challenge_state() {
  challenge_state_ = 0;
}
inline ::proto::InBattleMechanicusCardChallengeState InBattleMechanicusCardInfo::challenge_state() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.challenge_state)
  return static_cast< ::proto::InBattleMechanicusCardChallengeState >(challenge_state_);
}
inline void InBattleMechanicusCardInfo::set_challenge_state(::proto::InBattleMechanicusCardChallengeState value) {
  
  challenge_state_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.challenge_state)
}

// uint32 cost_points = 1;
inline void InBattleMechanicusCardInfo::clear_cost_points() {
  cost_points_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardInfo::cost_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.cost_points)
  return cost_points_;
}
inline void InBattleMechanicusCardInfo::set_cost_points(::google::protobuf::uint32 value) {
  
  cost_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.cost_points)
}

// uint32 card_id = 11;
inline void InBattleMechanicusCardInfo::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.card_id)
  return card_id_;
}
inline void InBattleMechanicusCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.card_id)
}

// uint32 begin_round = 8;
inline void InBattleMechanicusCardInfo::clear_begin_round() {
  begin_round_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardInfo::begin_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardInfo.begin_round)
  return begin_round_;
}
inline void InBattleMechanicusCardInfo::set_begin_round(::google::protobuf::uint32 value) {
  
  begin_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardInfo.begin_round)
}

// -------------------------------------------------------------------

// InBattleMechanicusInfo

// uint32 left_monster = 5;
inline void InBattleMechanicusInfo::clear_left_monster() {
  left_monster_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::left_monster() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.left_monster)
  return left_monster_;
}
inline void InBattleMechanicusInfo::set_left_monster(::google::protobuf::uint32 value) {
  
  left_monster_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.left_monster)
}

// uint32 wait_seconds = 13;
inline void InBattleMechanicusInfo::clear_wait_seconds() {
  wait_seconds_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::wait_seconds() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.wait_seconds)
  return wait_seconds_;
}
inline void InBattleMechanicusInfo::set_wait_seconds(::google::protobuf::uint32 value) {
  
  wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.wait_seconds)
}

// repeated uint32 entrance_list = 410;
inline int InBattleMechanicusInfo::entrance_list_size() const {
  return entrance_list_.size();
}
inline void InBattleMechanicusInfo::clear_entrance_list() {
  entrance_list_.Clear();
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::entrance_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.entrance_list)
  return entrance_list_.Get(index);
}
inline void InBattleMechanicusInfo::set_entrance_list(int index, ::google::protobuf::uint32 value) {
  entrance_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.entrance_list)
}
inline void InBattleMechanicusInfo::add_entrance_list(::google::protobuf::uint32 value) {
  entrance_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.entrance_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleMechanicusInfo::entrance_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.entrance_list)
  return entrance_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleMechanicusInfo::mutable_entrance_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.entrance_list)
  return &entrance_list_;
}

// repeated uint32 exit_list = 115;
inline int InBattleMechanicusInfo::exit_list_size() const {
  return exit_list_.size();
}
inline void InBattleMechanicusInfo::clear_exit_list() {
  exit_list_.Clear();
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::exit_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.exit_list)
  return exit_list_.Get(index);
}
inline void InBattleMechanicusInfo::set_exit_list(int index, ::google::protobuf::uint32 value) {
  exit_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.exit_list)
}
inline void InBattleMechanicusInfo::add_exit_list(::google::protobuf::uint32 value) {
  exit_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.exit_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleMechanicusInfo::exit_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.exit_list)
  return exit_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleMechanicusInfo::mutable_exit_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.exit_list)
  return &exit_list_;
}

// repeated .proto.InBattleMechanicusCardInfo history_card_list = 11;
inline int InBattleMechanicusInfo::history_card_list_size() const {
  return history_card_list_.size();
}
inline void InBattleMechanicusInfo::clear_history_card_list() {
  history_card_list_.Clear();
}
inline const ::proto::InBattleMechanicusCardInfo& InBattleMechanicusInfo::history_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_.Get(index);
}
inline ::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::mutable_history_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_.Mutable(index);
}
inline ::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::add_history_card_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
InBattleMechanicusInfo::mutable_history_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.history_card_list)
  return &history_card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
InBattleMechanicusInfo::history_card_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.history_card_list)
  return history_card_list_;
}

// uint32 max_excape_monster_num = 10;
inline void InBattleMechanicusInfo::clear_max_excape_monster_num() {
  max_excape_monster_num_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::max_excape_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.max_excape_monster_num)
  return max_excape_monster_num_;
}
inline void InBattleMechanicusInfo::set_max_excape_monster_num(::google::protobuf::uint32 value) {
  
  max_excape_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.max_excape_monster_num)
}

// uint32 building_stage_duration = 4;
inline void InBattleMechanicusInfo::clear_building_stage_duration() {
  building_stage_duration_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::building_stage_duration() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.building_stage_duration)
  return building_stage_duration_;
}
inline void InBattleMechanicusInfo::set_building_stage_duration(::google::protobuf::uint32 value) {
  
  building_stage_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.building_stage_duration)
}

// uint64 duration_ms = 8;
inline void InBattleMechanicusInfo::clear_duration_ms() {
  duration_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleMechanicusInfo::duration_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.duration_ms)
  return duration_ms_;
}
inline void InBattleMechanicusInfo::set_duration_ms(::google::protobuf::uint64 value) {
  
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.duration_ms)
}

// .proto.InBattleMechanicusStageType stage = 9;
inline void InBattleMechanicusInfo::clear_stage() {
  stage_ = 0;
}
inline ::proto::InBattleMechanicusStageType InBattleMechanicusInfo::stage() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.stage)
  return static_cast< ::proto::InBattleMechanicusStageType >(stage_);
}
inline void InBattleMechanicusInfo::set_stage(::proto::InBattleMechanicusStageType value) {
  
  stage_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.stage)
}

// uint32 total_round = 12;
inline void InBattleMechanicusInfo::clear_total_round() {
  total_round_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::total_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.total_round)
  return total_round_;
}
inline void InBattleMechanicusInfo::set_total_round(::google::protobuf::uint32 value) {
  
  total_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.total_round)
}

// repeated .proto.InBattleMechanicusMonsterInfo monster_list = 14;
inline int InBattleMechanicusInfo::monster_list_size() const {
  return monster_list_.size();
}
inline void InBattleMechanicusInfo::clear_monster_list() {
  monster_list_.Clear();
}
inline const ::proto::InBattleMechanicusMonsterInfo& InBattleMechanicusInfo::monster_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_.Get(index);
}
inline ::proto::InBattleMechanicusMonsterInfo* InBattleMechanicusInfo::mutable_monster_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_.Mutable(index);
}
inline ::proto::InBattleMechanicusMonsterInfo* InBattleMechanicusInfo::add_monster_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusMonsterInfo >*
InBattleMechanicusInfo::mutable_monster_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.monster_list)
  return &monster_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusMonsterInfo >&
InBattleMechanicusInfo::monster_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.monster_list)
  return monster_list_;
}

// uint32 excaped_monster_num = 6;
inline void InBattleMechanicusInfo::clear_excaped_monster_num() {
  excaped_monster_num_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::excaped_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.excaped_monster_num)
  return excaped_monster_num_;
}
inline void InBattleMechanicusInfo::set_excaped_monster_num(::google::protobuf::uint32 value) {
  
  excaped_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.excaped_monster_num)
}

// uint32 round = 3;
inline void InBattleMechanicusInfo::clear_round() {
  round_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusInfo::round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.round)
  return round_;
}
inline void InBattleMechanicusInfo::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.round)
}

// repeated .proto.InBattleMechanicusCardInfo pick_card_list = 15;
inline int InBattleMechanicusInfo::pick_card_list_size() const {
  return pick_card_list_.size();
}
inline void InBattleMechanicusInfo::clear_pick_card_list() {
  pick_card_list_.Clear();
}
inline const ::proto::InBattleMechanicusCardInfo& InBattleMechanicusInfo::pick_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_.Get(index);
}
inline ::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::mutable_pick_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_.Mutable(index);
}
inline ::proto::InBattleMechanicusCardInfo* InBattleMechanicusInfo::add_pick_card_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
InBattleMechanicusInfo::mutable_pick_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.pick_card_list)
  return &pick_card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
InBattleMechanicusInfo::pick_card_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.pick_card_list)
  return pick_card_list_;
}

// repeated .proto.InBattleMechanicusPlayerInfo player_list = 7;
inline int InBattleMechanicusInfo::player_list_size() const {
  return player_list_.size();
}
inline void InBattleMechanicusInfo::clear_player_list() {
  player_list_.Clear();
}
inline const ::proto::InBattleMechanicusPlayerInfo& InBattleMechanicusInfo::player_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.player_list)
  return player_list_.Get(index);
}
inline ::proto::InBattleMechanicusPlayerInfo* InBattleMechanicusInfo::mutable_player_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusInfo.player_list)
  return player_list_.Mutable(index);
}
inline ::proto::InBattleMechanicusPlayerInfo* InBattleMechanicusInfo::add_player_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusInfo.player_list)
  return player_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusPlayerInfo >*
InBattleMechanicusInfo::mutable_player_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusInfo.player_list)
  return &player_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusPlayerInfo >&
InBattleMechanicusInfo::player_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusInfo.player_list)
  return player_list_;
}

// uint64 wait_begin_time_us = 1;
inline void InBattleMechanicusInfo::clear_wait_begin_time_us() {
  wait_begin_time_us_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleMechanicusInfo::wait_begin_time_us() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.wait_begin_time_us)
  return wait_begin_time_us_;
}
inline void InBattleMechanicusInfo::set_wait_begin_time_us(::google::protobuf::uint64 value) {
  
  wait_begin_time_us_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.wait_begin_time_us)
}

// uint64 begin_time_ms = 2;
inline void InBattleMechanicusInfo::clear_begin_time_ms() {
  begin_time_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleMechanicusInfo::begin_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusInfo.begin_time_ms)
  return begin_time_ms_;
}
inline void InBattleMechanicusInfo::set_begin_time_ms(::google::protobuf::uint64 value) {
  
  begin_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusInfo.begin_time_ms)
}

// -------------------------------------------------------------------

// InBattleFleurFairInfo

// repeated uint32 gallery_id_list = 5;
inline int InBattleFleurFairInfo::gallery_id_list_size() const {
  return gallery_id_list_.size();
}
inline void InBattleFleurFairInfo::clear_gallery_id_list() {
  gallery_id_list_.Clear();
}
inline ::google::protobuf::uint32 InBattleFleurFairInfo::gallery_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.gallery_id_list)
  return gallery_id_list_.Get(index);
}
inline void InBattleFleurFairInfo::set_gallery_id_list(int index, ::google::protobuf::uint32 value) {
  gallery_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.gallery_id_list)
}
inline void InBattleFleurFairInfo::add_gallery_id_list(::google::protobuf::uint32 value) {
  gallery_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleFleurFairInfo.gallery_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleFleurFairInfo::gallery_id_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleFleurFairInfo.gallery_id_list)
  return gallery_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleFleurFairInfo::mutable_gallery_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleFleurFairInfo.gallery_id_list)
  return &gallery_id_list_;
}

// uint32 gallery_stage_index = 6;
inline void InBattleFleurFairInfo::clear_gallery_stage_index() {
  gallery_stage_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleFleurFairInfo::gallery_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.gallery_stage_index)
  return gallery_stage_index_;
}
inline void InBattleFleurFairInfo::set_gallery_stage_index(::google::protobuf::uint32 value) {
  
  gallery_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.gallery_stage_index)
}

// uint32 preview_stage_index = 8;
inline void InBattleFleurFairInfo::clear_preview_stage_index() {
  preview_stage_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleFleurFairInfo::preview_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.preview_stage_index)
  return preview_stage_index_;
}
inline void InBattleFleurFairInfo::set_preview_stage_index(::google::protobuf::uint32 value) {
  
  preview_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.preview_stage_index)
}

// repeated uint32 ability_group_id_list = 2;
inline int InBattleFleurFairInfo::ability_group_id_list_size() const {
  return ability_group_id_list_.size();
}
inline void InBattleFleurFairInfo::clear_ability_group_id_list() {
  ability_group_id_list_.Clear();
}
inline ::google::protobuf::uint32 InBattleFleurFairInfo::ability_group_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.ability_group_id_list)
  return ability_group_id_list_.Get(index);
}
inline void InBattleFleurFairInfo::set_ability_group_id_list(int index, ::google::protobuf::uint32 value) {
  ability_group_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.ability_group_id_list)
}
inline void InBattleFleurFairInfo::add_ability_group_id_list(::google::protobuf::uint32 value) {
  ability_group_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleFleurFairInfo.ability_group_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleFleurFairInfo::ability_group_id_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleFleurFairInfo.ability_group_id_list)
  return ability_group_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleFleurFairInfo::mutable_ability_group_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleFleurFairInfo.ability_group_id_list)
  return &ability_group_id_list_;
}

// uint32 preview_display_duration = 12;
inline void InBattleFleurFairInfo::clear_preview_display_duration() {
  preview_display_duration_ = 0u;
}
inline ::google::protobuf::uint32 InBattleFleurFairInfo::preview_display_duration() const {
  // @@protoc_insertion_point(field_get:proto.InBattleFleurFairInfo.preview_display_duration)
  return preview_display_duration_;
}
inline void InBattleFleurFairInfo::set_preview_display_duration(::google::protobuf::uint32 value) {
  
  preview_display_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleFleurFairInfo.preview_display_duration)
}

// -------------------------------------------------------------------

// CharAmusementAvatarInfo

// uint32 uid = 11;
inline void CharAmusementAvatarInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 CharAmusementAvatarInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementAvatarInfo.uid)
  return uid_;
}
inline void CharAmusementAvatarInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementAvatarInfo.uid)
}

// uint32 punish_time = 7;
inline void CharAmusementAvatarInfo::clear_punish_time() {
  punish_time_ = 0u;
}
inline ::google::protobuf::uint32 CharAmusementAvatarInfo::punish_time() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementAvatarInfo.punish_time)
  return punish_time_;
}
inline void CharAmusementAvatarInfo::set_punish_time(::google::protobuf::uint32 value) {
  
  punish_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementAvatarInfo.punish_time)
}

// repeated uint32 avatar_id_list = 10;
inline int CharAmusementAvatarInfo::avatar_id_list_size() const {
  return avatar_id_list_.size();
}
inline void CharAmusementAvatarInfo::clear_avatar_id_list() {
  avatar_id_list_.Clear();
}
inline ::google::protobuf::uint32 CharAmusementAvatarInfo::avatar_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementAvatarInfo.avatar_id_list)
  return avatar_id_list_.Get(index);
}
inline void CharAmusementAvatarInfo::set_avatar_id_list(int index, ::google::protobuf::uint32 value) {
  avatar_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.CharAmusementAvatarInfo.avatar_id_list)
}
inline void CharAmusementAvatarInfo::add_avatar_id_list(::google::protobuf::uint32 value) {
  avatar_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.CharAmusementAvatarInfo.avatar_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CharAmusementAvatarInfo::avatar_id_list() const {
  // @@protoc_insertion_point(field_list:proto.CharAmusementAvatarInfo.avatar_id_list)
  return avatar_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CharAmusementAvatarInfo::mutable_avatar_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CharAmusementAvatarInfo.avatar_id_list)
  return &avatar_id_list_;
}

// -------------------------------------------------------------------

// CharAmusementInfo

// uint32 total_cost_time = 11;
inline void CharAmusementInfo::clear_total_cost_time() {
  total_cost_time_ = 0u;
}
inline ::google::protobuf::uint32 CharAmusementInfo::total_cost_time() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.total_cost_time)
  return total_cost_time_;
}
inline void CharAmusementInfo::set_total_cost_time(::google::protobuf::uint32 value) {
  
  total_cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.total_cost_time)
}

// uint32 stage_id = 2;
inline void CharAmusementInfo::clear_stage_id() {
  stage_id_ = 0u;
}
inline ::google::protobuf::uint32 CharAmusementInfo::stage_id() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.stage_id)
  return stage_id_;
}
inline void CharAmusementInfo::set_stage_id(::google::protobuf::uint32 value) {
  
  stage_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.stage_id)
}

// uint32 level_id = 10;
inline void CharAmusementInfo::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 CharAmusementInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.level_id)
  return level_id_;
}
inline void CharAmusementInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.level_id)
}

// uint32 preview_stage_index = 4;
inline void CharAmusementInfo::clear_preview_stage_index() {
  preview_stage_index_ = 0u;
}
inline ::google::protobuf::uint32 CharAmusementInfo::preview_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.preview_stage_index)
  return preview_stage_index_;
}
inline void CharAmusementInfo::set_preview_stage_index(::google::protobuf::uint32 value) {
  
  preview_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.CharAmusementInfo.preview_stage_index)
}

// repeated .proto.CharAmusementAvatarInfo avatar_info_list = 5;
inline int CharAmusementInfo::avatar_info_list_size() const {
  return avatar_info_list_.size();
}
inline void CharAmusementInfo::clear_avatar_info_list() {
  avatar_info_list_.Clear();
}
inline const ::proto::CharAmusementAvatarInfo& CharAmusementInfo::avatar_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_.Get(index);
}
inline ::proto::CharAmusementAvatarInfo* CharAmusementInfo::mutable_avatar_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_.Mutable(index);
}
inline ::proto::CharAmusementAvatarInfo* CharAmusementInfo::add_avatar_info_list() {
  // @@protoc_insertion_point(field_add:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::CharAmusementAvatarInfo >*
CharAmusementInfo::mutable_avatar_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CharAmusementInfo.avatar_info_list)
  return &avatar_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::CharAmusementAvatarInfo >&
CharAmusementInfo::avatar_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CharAmusementInfo.avatar_info_list)
  return avatar_info_list_;
}

// -------------------------------------------------------------------

// BrickBreakerStageInfo

// uint32 level_id = 15;
inline void BrickBreakerStageInfo::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 BrickBreakerStageInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerStageInfo.level_id)
  return level_id_;
}
inline void BrickBreakerStageInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerStageInfo.level_id)
}

// .proto.BrickBreakerStageType stage_type = 1;
inline void BrickBreakerStageInfo::clear_stage_type() {
  stage_type_ = 0;
}
inline ::proto::BrickBreakerStageType BrickBreakerStageInfo::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerStageInfo.stage_type)
  return static_cast< ::proto::BrickBreakerStageType >(stage_type_);
}
inline void BrickBreakerStageInfo::set_stage_type(::proto::BrickBreakerStageType value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerStageInfo.stage_type)
}

// repeated .proto.BrickBreakerPlayerBattleInfo battle_info_list = 2;
inline int BrickBreakerStageInfo::battle_info_list_size() const {
  return battle_info_list_.size();
}
inline void BrickBreakerStageInfo::clear_battle_info_list() {
  battle_info_list_.Clear();
}
inline const ::proto::BrickBreakerPlayerBattleInfo& BrickBreakerStageInfo::battle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_.Get(index);
}
inline ::proto::BrickBreakerPlayerBattleInfo* BrickBreakerStageInfo::mutable_battle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_.Mutable(index);
}
inline ::proto::BrickBreakerPlayerBattleInfo* BrickBreakerStageInfo::add_battle_info_list() {
  // @@protoc_insertion_point(field_add:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BrickBreakerPlayerBattleInfo >*
BrickBreakerStageInfo::mutable_battle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerStageInfo.battle_info_list)
  return &battle_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BrickBreakerPlayerBattleInfo >&
BrickBreakerStageInfo::battle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerStageInfo.battle_info_list)
  return battle_info_list_;
}

// -------------------------------------------------------------------

// CoinCollectStageInfo

// uint32 level_id = 3;
inline void CoinCollectStageInfo::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 CoinCollectStageInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectStageInfo.level_id)
  return level_id_;
}
inline void CoinCollectStageInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectStageInfo.level_id)
}

// uint32 play_index = 15;
inline void CoinCollectStageInfo::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 CoinCollectStageInfo::play_index() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectStageInfo.play_index)
  return play_index_;
}
inline void CoinCollectStageInfo::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectStageInfo.play_index)
}

// repeated .proto.CoinCollectPlayerInfo player_info_list = 9;
inline int CoinCollectStageInfo::player_info_list_size() const {
  return player_info_list_.size();
}
inline void CoinCollectStageInfo::clear_player_info_list() {
  player_info_list_.Clear();
}
inline const ::proto::CoinCollectPlayerInfo& CoinCollectStageInfo::player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_.Get(index);
}
inline ::proto::CoinCollectPlayerInfo* CoinCollectStageInfo::mutable_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_.Mutable(index);
}
inline ::proto::CoinCollectPlayerInfo* CoinCollectStageInfo::add_player_info_list() {
  // @@protoc_insertion_point(field_add:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectPlayerInfo >*
CoinCollectStageInfo::mutable_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CoinCollectStageInfo.player_info_list)
  return &player_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectPlayerInfo >&
CoinCollectStageInfo::player_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CoinCollectStageInfo.player_info_list)
  return player_info_list_;
}

// -------------------------------------------------------------------

// LanV3BoatStageInfo

// repeated uint32 player_uid_list = 2;
inline int LanV3BoatStageInfo::player_uid_list_size() const {
  return player_uid_list_.size();
}
inline void LanV3BoatStageInfo::clear_player_uid_list() {
  player_uid_list_.Clear();
}
inline ::google::protobuf::uint32 LanV3BoatStageInfo::player_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatStageInfo.player_uid_list)
  return player_uid_list_.Get(index);
}
inline void LanV3BoatStageInfo::set_player_uid_list(int index, ::google::protobuf::uint32 value) {
  player_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatStageInfo.player_uid_list)
}
inline void LanV3BoatStageInfo::add_player_uid_list(::google::protobuf::uint32 value) {
  player_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.LanV3BoatStageInfo.player_uid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LanV3BoatStageInfo::player_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatStageInfo.player_uid_list)
  return player_uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LanV3BoatStageInfo::mutable_player_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatStageInfo.player_uid_list)
  return &player_uid_list_;
}

// uint32 map_id = 10;
inline void LanV3BoatStageInfo::clear_map_id() {
  map_id_ = 0u;
}
inline ::google::protobuf::uint32 LanV3BoatStageInfo::map_id() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatStageInfo.map_id)
  return map_id_;
}
inline void LanV3BoatStageInfo::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatStageInfo.map_id)
}

// bool is_single = 13;
inline void LanV3BoatStageInfo::clear_is_single() {
  is_single_ = false;
}
inline bool LanV3BoatStageInfo::is_single() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatStageInfo.is_single)
  return is_single_;
}
inline void LanV3BoatStageInfo::set_is_single(bool value) {
  
  is_single_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatStageInfo.is_single)
}

// -------------------------------------------------------------------

// MultistagePlayInfo

// uint32 play_index = 13;
inline void MultistagePlayInfo::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayInfo::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.play_index)
  return play_index_;
}
inline void MultistagePlayInfo::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.play_index)
}

// uint32 play_type = 11;
inline void MultistagePlayInfo::clear_play_type() {
  play_type_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayInfo::play_type() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.play_type)
  return play_type_;
}
inline void MultistagePlayInfo::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.play_type)
}

// uint32 stage_type = 10;
inline void MultistagePlayInfo::clear_stage_type() {
  stage_type_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayInfo::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.stage_type)
  return stage_type_;
}
inline void MultistagePlayInfo::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.stage_type)
}

// uint32 duration = 8;
inline void MultistagePlayInfo::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayInfo::duration() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.duration)
  return duration_;
}
inline void MultistagePlayInfo::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.duration)
}

// uint32 group_id = 12;
inline void MultistagePlayInfo::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayInfo::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.group_id)
  return group_id_;
}
inline void MultistagePlayInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.group_id)
}

// uint32 begin_time = 9;
inline void MultistagePlayInfo::clear_begin_time() {
  begin_time_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.begin_time)
  return begin_time_;
}
inline void MultistagePlayInfo::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.begin_time)
}

// uint32 stage_index = 1;
inline void MultistagePlayInfo::clear_stage_index() {
  stage_index_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayInfo::stage_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.stage_index)
  return stage_index_;
}
inline void MultistagePlayInfo::set_stage_index(::google::protobuf::uint32 value) {
  
  stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayInfo.stage_index)
}

// .proto.InBattleMechanicusInfo mechanicus_info = 1334;
inline bool MultistagePlayInfo::has_mechanicus_info() const {
  return detail_case() == kMechanicusInfo;
}
inline void MultistagePlayInfo::set_has_mechanicus_info() {
  _oneof_case_[0] = kMechanicusInfo;
}
inline void MultistagePlayInfo::clear_mechanicus_info() {
  if (has_mechanicus_info()) {
    delete detail_.mechanicus_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InBattleMechanicusInfo& MultistagePlayInfo::mechanicus_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.mechanicus_info)
  return has_mechanicus_info()
      ? *detail_.mechanicus_info_
      : ::proto::InBattleMechanicusInfo::default_instance();
}
inline ::proto::InBattleMechanicusInfo* MultistagePlayInfo::mutable_mechanicus_info() {
  if (!has_mechanicus_info()) {
    clear_detail();
    set_has_mechanicus_info();
    detail_.mechanicus_info_ = new ::proto::InBattleMechanicusInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.mechanicus_info)
  return detail_.mechanicus_info_;
}
inline ::proto::InBattleMechanicusInfo* MultistagePlayInfo::release_mechanicus_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.mechanicus_info)
  if (has_mechanicus_info()) {
    clear_has_detail();
    ::proto::InBattleMechanicusInfo* temp = detail_.mechanicus_info_;
    detail_.mechanicus_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_mechanicus_info(::proto::InBattleMechanicusInfo* mechanicus_info) {
  clear_detail();
  if (mechanicus_info) {
    set_has_mechanicus_info();
    detail_.mechanicus_info_ = mechanicus_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.mechanicus_info)
}

// .proto.InBattleFleurFairInfo fleur_fair_info = 1064;
inline bool MultistagePlayInfo::has_fleur_fair_info() const {
  return detail_case() == kFleurFairInfo;
}
inline void MultistagePlayInfo::set_has_fleur_fair_info() {
  _oneof_case_[0] = kFleurFairInfo;
}
inline void MultistagePlayInfo::clear_fleur_fair_info() {
  if (has_fleur_fair_info()) {
    delete detail_.fleur_fair_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InBattleFleurFairInfo& MultistagePlayInfo::fleur_fair_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.fleur_fair_info)
  return has_fleur_fair_info()
      ? *detail_.fleur_fair_info_
      : ::proto::InBattleFleurFairInfo::default_instance();
}
inline ::proto::InBattleFleurFairInfo* MultistagePlayInfo::mutable_fleur_fair_info() {
  if (!has_fleur_fair_info()) {
    clear_detail();
    set_has_fleur_fair_info();
    detail_.fleur_fair_info_ = new ::proto::InBattleFleurFairInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.fleur_fair_info)
  return detail_.fleur_fair_info_;
}
inline ::proto::InBattleFleurFairInfo* MultistagePlayInfo::release_fleur_fair_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.fleur_fair_info)
  if (has_fleur_fair_info()) {
    clear_has_detail();
    ::proto::InBattleFleurFairInfo* temp = detail_.fleur_fair_info_;
    detail_.fleur_fair_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_fleur_fair_info(::proto::InBattleFleurFairInfo* fleur_fair_info) {
  clear_detail();
  if (fleur_fair_info) {
    set_has_fleur_fair_info();
    detail_.fleur_fair_info_ = fleur_fair_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.fleur_fair_info)
}

// .proto.HideAndSeekStageInfo hide_and_seek_info = 108;
inline bool MultistagePlayInfo::has_hide_and_seek_info() const {
  return detail_case() == kHideAndSeekInfo;
}
inline void MultistagePlayInfo::set_has_hide_and_seek_info() {
  _oneof_case_[0] = kHideAndSeekInfo;
}
inline void MultistagePlayInfo::clear_hide_and_seek_info() {
  if (has_hide_and_seek_info()) {
    delete detail_.hide_and_seek_info_;
    clear_has_detail();
  }
}
inline  const ::proto::HideAndSeekStageInfo& MultistagePlayInfo::hide_and_seek_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.hide_and_seek_info)
  return has_hide_and_seek_info()
      ? *detail_.hide_and_seek_info_
      : ::proto::HideAndSeekStageInfo::default_instance();
}
inline ::proto::HideAndSeekStageInfo* MultistagePlayInfo::mutable_hide_and_seek_info() {
  if (!has_hide_and_seek_info()) {
    clear_detail();
    set_has_hide_and_seek_info();
    detail_.hide_and_seek_info_ = new ::proto::HideAndSeekStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.hide_and_seek_info)
  return detail_.hide_and_seek_info_;
}
inline ::proto::HideAndSeekStageInfo* MultistagePlayInfo::release_hide_and_seek_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.hide_and_seek_info)
  if (has_hide_and_seek_info()) {
    clear_has_detail();
    ::proto::HideAndSeekStageInfo* temp = detail_.hide_and_seek_info_;
    detail_.hide_and_seek_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_hide_and_seek_info(::proto::HideAndSeekStageInfo* hide_and_seek_info) {
  clear_detail();
  if (hide_and_seek_info) {
    set_has_hide_and_seek_info();
    detail_.hide_and_seek_info_ = hide_and_seek_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.hide_and_seek_info)
}

// .proto.InBattleChessInfo chess_info = 1758;
inline bool MultistagePlayInfo::has_chess_info() const {
  return detail_case() == kChessInfo;
}
inline void MultistagePlayInfo::set_has_chess_info() {
  _oneof_case_[0] = kChessInfo;
}
inline void MultistagePlayInfo::clear_chess_info() {
  if (has_chess_info()) {
    delete detail_.chess_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InBattleChessInfo& MultistagePlayInfo::chess_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.chess_info)
  return has_chess_info()
      ? *detail_.chess_info_
      : ::proto::InBattleChessInfo::default_instance();
}
inline ::proto::InBattleChessInfo* MultistagePlayInfo::mutable_chess_info() {
  if (!has_chess_info()) {
    clear_detail();
    set_has_chess_info();
    detail_.chess_info_ = new ::proto::InBattleChessInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.chess_info)
  return detail_.chess_info_;
}
inline ::proto::InBattleChessInfo* MultistagePlayInfo::release_chess_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.chess_info)
  if (has_chess_info()) {
    clear_has_detail();
    ::proto::InBattleChessInfo* temp = detail_.chess_info_;
    detail_.chess_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_chess_info(::proto::InBattleChessInfo* chess_info) {
  clear_detail();
  if (chess_info) {
    set_has_chess_info();
    detail_.chess_info_ = chess_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.chess_info)
}

// .proto.InBattleIrodoriChessInfo irodori_chess_info = 531;
inline bool MultistagePlayInfo::has_irodori_chess_info() const {
  return detail_case() == kIrodoriChessInfo;
}
inline void MultistagePlayInfo::set_has_irodori_chess_info() {
  _oneof_case_[0] = kIrodoriChessInfo;
}
inline void MultistagePlayInfo::clear_irodori_chess_info() {
  if (has_irodori_chess_info()) {
    delete detail_.irodori_chess_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InBattleIrodoriChessInfo& MultistagePlayInfo::irodori_chess_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.irodori_chess_info)
  return has_irodori_chess_info()
      ? *detail_.irodori_chess_info_
      : ::proto::InBattleIrodoriChessInfo::default_instance();
}
inline ::proto::InBattleIrodoriChessInfo* MultistagePlayInfo::mutable_irodori_chess_info() {
  if (!has_irodori_chess_info()) {
    clear_detail();
    set_has_irodori_chess_info();
    detail_.irodori_chess_info_ = new ::proto::InBattleIrodoriChessInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.irodori_chess_info)
  return detail_.irodori_chess_info_;
}
inline ::proto::InBattleIrodoriChessInfo* MultistagePlayInfo::release_irodori_chess_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.irodori_chess_info)
  if (has_irodori_chess_info()) {
    clear_has_detail();
    ::proto::InBattleIrodoriChessInfo* temp = detail_.irodori_chess_info_;
    detail_.irodori_chess_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_irodori_chess_info(::proto::InBattleIrodoriChessInfo* irodori_chess_info) {
  clear_detail();
  if (irodori_chess_info) {
    set_has_irodori_chess_info();
    detail_.irodori_chess_info_ = irodori_chess_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.irodori_chess_info)
}

// .proto.CharAmusementInfo char_amusement_info = 324;
inline bool MultistagePlayInfo::has_char_amusement_info() const {
  return detail_case() == kCharAmusementInfo;
}
inline void MultistagePlayInfo::set_has_char_amusement_info() {
  _oneof_case_[0] = kCharAmusementInfo;
}
inline void MultistagePlayInfo::clear_char_amusement_info() {
  if (has_char_amusement_info()) {
    delete detail_.char_amusement_info_;
    clear_has_detail();
  }
}
inline  const ::proto::CharAmusementInfo& MultistagePlayInfo::char_amusement_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.char_amusement_info)
  return has_char_amusement_info()
      ? *detail_.char_amusement_info_
      : ::proto::CharAmusementInfo::default_instance();
}
inline ::proto::CharAmusementInfo* MultistagePlayInfo::mutable_char_amusement_info() {
  if (!has_char_amusement_info()) {
    clear_detail();
    set_has_char_amusement_info();
    detail_.char_amusement_info_ = new ::proto::CharAmusementInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.char_amusement_info)
  return detail_.char_amusement_info_;
}
inline ::proto::CharAmusementInfo* MultistagePlayInfo::release_char_amusement_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.char_amusement_info)
  if (has_char_amusement_info()) {
    clear_has_detail();
    ::proto::CharAmusementInfo* temp = detail_.char_amusement_info_;
    detail_.char_amusement_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_char_amusement_info(::proto::CharAmusementInfo* char_amusement_info) {
  clear_detail();
  if (char_amusement_info) {
    set_has_char_amusement_info();
    detail_.char_amusement_info_ = char_amusement_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.char_amusement_info)
}

// .proto.BrickBreakerStageInfo brick_breaker_info = 1964;
inline bool MultistagePlayInfo::has_brick_breaker_info() const {
  return detail_case() == kBrickBreakerInfo;
}
inline void MultistagePlayInfo::set_has_brick_breaker_info() {
  _oneof_case_[0] = kBrickBreakerInfo;
}
inline void MultistagePlayInfo::clear_brick_breaker_info() {
  if (has_brick_breaker_info()) {
    delete detail_.brick_breaker_info_;
    clear_has_detail();
  }
}
inline  const ::proto::BrickBreakerStageInfo& MultistagePlayInfo::brick_breaker_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.brick_breaker_info)
  return has_brick_breaker_info()
      ? *detail_.brick_breaker_info_
      : ::proto::BrickBreakerStageInfo::default_instance();
}
inline ::proto::BrickBreakerStageInfo* MultistagePlayInfo::mutable_brick_breaker_info() {
  if (!has_brick_breaker_info()) {
    clear_detail();
    set_has_brick_breaker_info();
    detail_.brick_breaker_info_ = new ::proto::BrickBreakerStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.brick_breaker_info)
  return detail_.brick_breaker_info_;
}
inline ::proto::BrickBreakerStageInfo* MultistagePlayInfo::release_brick_breaker_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.brick_breaker_info)
  if (has_brick_breaker_info()) {
    clear_has_detail();
    ::proto::BrickBreakerStageInfo* temp = detail_.brick_breaker_info_;
    detail_.brick_breaker_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_brick_breaker_info(::proto::BrickBreakerStageInfo* brick_breaker_info) {
  clear_detail();
  if (brick_breaker_info) {
    set_has_brick_breaker_info();
    detail_.brick_breaker_info_ = brick_breaker_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.brick_breaker_info)
}

// .proto.CoinCollectStageInfo coin_collect_info = 1067;
inline bool MultistagePlayInfo::has_coin_collect_info() const {
  return detail_case() == kCoinCollectInfo;
}
inline void MultistagePlayInfo::set_has_coin_collect_info() {
  _oneof_case_[0] = kCoinCollectInfo;
}
inline void MultistagePlayInfo::clear_coin_collect_info() {
  if (has_coin_collect_info()) {
    delete detail_.coin_collect_info_;
    clear_has_detail();
  }
}
inline  const ::proto::CoinCollectStageInfo& MultistagePlayInfo::coin_collect_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.coin_collect_info)
  return has_coin_collect_info()
      ? *detail_.coin_collect_info_
      : ::proto::CoinCollectStageInfo::default_instance();
}
inline ::proto::CoinCollectStageInfo* MultistagePlayInfo::mutable_coin_collect_info() {
  if (!has_coin_collect_info()) {
    clear_detail();
    set_has_coin_collect_info();
    detail_.coin_collect_info_ = new ::proto::CoinCollectStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.coin_collect_info)
  return detail_.coin_collect_info_;
}
inline ::proto::CoinCollectStageInfo* MultistagePlayInfo::release_coin_collect_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.coin_collect_info)
  if (has_coin_collect_info()) {
    clear_has_detail();
    ::proto::CoinCollectStageInfo* temp = detail_.coin_collect_info_;
    detail_.coin_collect_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_coin_collect_info(::proto::CoinCollectStageInfo* coin_collect_info) {
  clear_detail();
  if (coin_collect_info) {
    set_has_coin_collect_info();
    detail_.coin_collect_info_ = coin_collect_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.coin_collect_info)
}

// .proto.LanV3BoatStageInfo lan_v3_boat_info = 1801;
inline bool MultistagePlayInfo::has_lan_v3_boat_info() const {
  return detail_case() == kLanV3BoatInfo;
}
inline void MultistagePlayInfo::set_has_lan_v3_boat_info() {
  _oneof_case_[0] = kLanV3BoatInfo;
}
inline void MultistagePlayInfo::clear_lan_v3_boat_info() {
  if (has_lan_v3_boat_info()) {
    delete detail_.lan_v3_boat_info_;
    clear_has_detail();
  }
}
inline  const ::proto::LanV3BoatStageInfo& MultistagePlayInfo::lan_v3_boat_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfo.lan_v3_boat_info)
  return has_lan_v3_boat_info()
      ? *detail_.lan_v3_boat_info_
      : ::proto::LanV3BoatStageInfo::default_instance();
}
inline ::proto::LanV3BoatStageInfo* MultistagePlayInfo::mutable_lan_v3_boat_info() {
  if (!has_lan_v3_boat_info()) {
    clear_detail();
    set_has_lan_v3_boat_info();
    detail_.lan_v3_boat_info_ = new ::proto::LanV3BoatStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfo.lan_v3_boat_info)
  return detail_.lan_v3_boat_info_;
}
inline ::proto::LanV3BoatStageInfo* MultistagePlayInfo::release_lan_v3_boat_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfo.lan_v3_boat_info)
  if (has_lan_v3_boat_info()) {
    clear_has_detail();
    ::proto::LanV3BoatStageInfo* temp = detail_.lan_v3_boat_info_;
    detail_.lan_v3_boat_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlayInfo::set_allocated_lan_v3_boat_info(::proto::LanV3BoatStageInfo* lan_v3_boat_info) {
  clear_detail();
  if (lan_v3_boat_info) {
    set_has_lan_v3_boat_info();
    detail_.lan_v3_boat_info_ = lan_v3_boat_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfo.lan_v3_boat_info)
}

inline bool MultistagePlayInfo::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void MultistagePlayInfo::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline MultistagePlayInfo::DetailCase MultistagePlayInfo::detail_case() const {
  return MultistagePlayInfo::DetailCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultistagePlayInfoNotify

// .proto.MultistagePlayInfo info = 13;
inline bool MultistagePlayInfoNotify::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline void MultistagePlayInfoNotify::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) delete info_;
  info_ = NULL;
}
inline const ::proto::MultistagePlayInfo& MultistagePlayInfoNotify::info() const {
  const ::proto::MultistagePlayInfo* p = info_;
  // @@protoc_insertion_point(field_get:proto.MultistagePlayInfoNotify.info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::MultistagePlayInfo*>(
      &::proto::_MultistagePlayInfo_default_instance_);
}
inline ::proto::MultistagePlayInfo* MultistagePlayInfoNotify::mutable_info() {
  
  if (info_ == NULL) {
    info_ = new ::proto::MultistagePlayInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlayInfoNotify.info)
  return info_;
}
inline ::proto::MultistagePlayInfo* MultistagePlayInfoNotify::release_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlayInfoNotify.info)
  
  ::proto::MultistagePlayInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void MultistagePlayInfoNotify::set_allocated_info(::proto::MultistagePlayInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlayInfoNotify.info)
}

// -------------------------------------------------------------------

// MultistagePlayFinishStageReq

// uint32 group_id = 12;
inline void MultistagePlayFinishStageReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayFinishStageReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageReq.group_id)
  return group_id_;
}
inline void MultistagePlayFinishStageReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageReq.group_id)
}

// uint32 play_index = 15;
inline void MultistagePlayFinishStageReq::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayFinishStageReq::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageReq.play_index)
  return play_index_;
}
inline void MultistagePlayFinishStageReq::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageReq.play_index)
}

// -------------------------------------------------------------------

// InBattleMechanicusExcapeMonsterNotify

// uint32 excaped_monster_num = 4;
inline void InBattleMechanicusExcapeMonsterNotify::clear_excaped_monster_num() {
  excaped_monster_num_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusExcapeMonsterNotify::excaped_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusExcapeMonsterNotify.excaped_monster_num)
  return excaped_monster_num_;
}
inline void InBattleMechanicusExcapeMonsterNotify::set_excaped_monster_num(::google::protobuf::uint32 value) {
  
  excaped_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusExcapeMonsterNotify.excaped_monster_num)
}

// -------------------------------------------------------------------

// InBattleMechanicusLeftMonsterNotify

// uint32 left_monster = 14;
inline void InBattleMechanicusLeftMonsterNotify::clear_left_monster() {
  left_monster_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusLeftMonsterNotify::left_monster() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusLeftMonsterNotify.left_monster)
  return left_monster_;
}
inline void InBattleMechanicusLeftMonsterNotify::set_left_monster(::google::protobuf::uint32 value) {
  
  left_monster_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusLeftMonsterNotify.left_monster)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InBattleMechanicusBuildingPointsNotify

// map<uint32, uint32> player_building_points_map = 4;
inline int InBattleMechanicusBuildingPointsNotify::player_building_points_map_size() const {
  return player_building_points_map_.size();
}
inline void InBattleMechanicusBuildingPointsNotify::clear_player_building_points_map() {
  player_building_points_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
InBattleMechanicusBuildingPointsNotify::player_building_points_map() const {
  // @@protoc_insertion_point(field_map:proto.InBattleMechanicusBuildingPointsNotify.player_building_points_map)
  return player_building_points_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
InBattleMechanicusBuildingPointsNotify::mutable_player_building_points_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.InBattleMechanicusBuildingPointsNotify.player_building_points_map)
  return player_building_points_map_.MutableMap();
}

// -------------------------------------------------------------------

// InBattleMechanicusPickCardReq

// uint32 group_id = 11;
inline void InBattleMechanicusPickCardReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardReq.group_id)
  return group_id_;
}
inline void InBattleMechanicusPickCardReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardReq.group_id)
}

// uint32 play_index = 7;
inline void InBattleMechanicusPickCardReq::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardReq::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardReq.play_index)
  return play_index_;
}
inline void InBattleMechanicusPickCardReq::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardReq.play_index)
}

// uint32 card_id = 1;
inline void InBattleMechanicusPickCardReq::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardReq.card_id)
  return card_id_;
}
inline void InBattleMechanicusPickCardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardReq.card_id)
}

// -------------------------------------------------------------------

// InBattleMechanicusPickCardRsp

// int32 retcode = 11;
inline void InBattleMechanicusPickCardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 InBattleMechanicusPickCardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.retcode)
  return retcode_;
}
inline void InBattleMechanicusPickCardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.retcode)
}

// uint32 card_id = 2;
inline void InBattleMechanicusPickCardRsp::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.card_id)
  return card_id_;
}
inline void InBattleMechanicusPickCardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.card_id)
}

// uint32 play_index = 4;
inline void InBattleMechanicusPickCardRsp::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardRsp::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.play_index)
  return play_index_;
}
inline void InBattleMechanicusPickCardRsp::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.play_index)
}

// uint32 group_id = 9;
inline void InBattleMechanicusPickCardRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardRsp.group_id)
  return group_id_;
}
inline void InBattleMechanicusPickCardRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardRsp.group_id)
}

// -------------------------------------------------------------------

// InBattleMechanicusPickCardNotify

// uint32 player_uid = 6;
inline void InBattleMechanicusPickCardNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.player_uid)
  return player_uid_;
}
inline void InBattleMechanicusPickCardNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.player_uid)
}

// uint32 group_id = 7;
inline void InBattleMechanicusPickCardNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.group_id)
  return group_id_;
}
inline void InBattleMechanicusPickCardNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.group_id)
}

// uint32 play_index = 8;
inline void InBattleMechanicusPickCardNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.play_index)
  return play_index_;
}
inline void InBattleMechanicusPickCardNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.play_index)
}

// uint32 card_id = 10;
inline void InBattleMechanicusPickCardNotify::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusPickCardNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusPickCardNotify.card_id)
  return card_id_;
}
inline void InBattleMechanicusPickCardNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusPickCardNotify.card_id)
}

// -------------------------------------------------------------------

// InBattleMechanicusConfirmCardReq

// uint32 play_index = 6;
inline void InBattleMechanicusConfirmCardReq::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardReq::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardReq.play_index)
  return play_index_;
}
inline void InBattleMechanicusConfirmCardReq::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardReq.play_index)
}

// uint32 card_id = 1;
inline void InBattleMechanicusConfirmCardReq::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardReq.card_id)
  return card_id_;
}
inline void InBattleMechanicusConfirmCardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardReq.card_id)
}

// uint32 group_id = 3;
inline void InBattleMechanicusConfirmCardReq::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardReq::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardReq.group_id)
  return group_id_;
}
inline void InBattleMechanicusConfirmCardReq::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardReq.group_id)
}

// -------------------------------------------------------------------

// InBattleMechanicusConfirmCardRsp

// uint32 play_index = 2;
inline void InBattleMechanicusConfirmCardRsp::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardRsp::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.play_index)
  return play_index_;
}
inline void InBattleMechanicusConfirmCardRsp::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.play_index)
}

// uint32 card_id = 14;
inline void InBattleMechanicusConfirmCardRsp::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.card_id)
  return card_id_;
}
inline void InBattleMechanicusConfirmCardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.card_id)
}

// int32 retcode = 11;
inline void InBattleMechanicusConfirmCardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 InBattleMechanicusConfirmCardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.retcode)
  return retcode_;
}
inline void InBattleMechanicusConfirmCardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.retcode)
}

// uint32 group_id = 6;
inline void InBattleMechanicusConfirmCardRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardRsp.group_id)
  return group_id_;
}
inline void InBattleMechanicusConfirmCardRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardRsp.group_id)
}

// -------------------------------------------------------------------

// InBattleMechanicusConfirmCardNotify

// uint32 play_index = 11;
inline void InBattleMechanicusConfirmCardNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.play_index)
  return play_index_;
}
inline void InBattleMechanicusConfirmCardNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.play_index)
}

// uint32 card_id = 13;
inline void InBattleMechanicusConfirmCardNotify::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.card_id)
  return card_id_;
}
inline void InBattleMechanicusConfirmCardNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.card_id)
}

// uint32 group_id = 10;
inline void InBattleMechanicusConfirmCardNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.group_id)
  return group_id_;
}
inline void InBattleMechanicusConfirmCardNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.group_id)
}

// uint32 player_uid = 2;
inline void InBattleMechanicusConfirmCardNotify::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusConfirmCardNotify::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusConfirmCardNotify.player_uid)
  return player_uid_;
}
inline void InBattleMechanicusConfirmCardNotify::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusConfirmCardNotify.player_uid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InBattleMechanicusCardResultNotify

// uint32 wait_seconds = 6;
inline void InBattleMechanicusCardResultNotify::clear_wait_seconds() {
  wait_seconds_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardResultNotify::wait_seconds() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.wait_seconds)
  return wait_seconds_;
}
inline void InBattleMechanicusCardResultNotify::set_wait_seconds(::google::protobuf::uint32 value) {
  
  wait_seconds_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.wait_seconds)
}

// uint32 group_id = 2;
inline void InBattleMechanicusCardResultNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardResultNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.group_id)
  return group_id_;
}
inline void InBattleMechanicusCardResultNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.group_id)
}

// repeated .proto.InBattleMechanicusCardInfo card_list = 9;
inline int InBattleMechanicusCardResultNotify::card_list_size() const {
  return card_list_.size();
}
inline void InBattleMechanicusCardResultNotify::clear_card_list() {
  card_list_.Clear();
}
inline const ::proto::InBattleMechanicusCardInfo& InBattleMechanicusCardResultNotify::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_.Get(index);
}
inline ::proto::InBattleMechanicusCardInfo* InBattleMechanicusCardResultNotify::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_.Mutable(index);
}
inline ::proto::InBattleMechanicusCardInfo* InBattleMechanicusCardResultNotify::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >*
InBattleMechanicusCardResultNotify::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusCardResultNotify.card_list)
  return &card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::InBattleMechanicusCardInfo >&
InBattleMechanicusCardResultNotify::card_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusCardResultNotify.card_list)
  return card_list_;
}

// uint64 wait_begin_time_us = 7;
inline void InBattleMechanicusCardResultNotify::clear_wait_begin_time_us() {
  wait_begin_time_us_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleMechanicusCardResultNotify::wait_begin_time_us() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.wait_begin_time_us)
  return wait_begin_time_us_;
}
inline void InBattleMechanicusCardResultNotify::set_wait_begin_time_us(::google::protobuf::uint64 value) {
  
  wait_begin_time_us_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.wait_begin_time_us)
}

// map<uint32, uint32> player_confirmed_card_map = 12;
inline int InBattleMechanicusCardResultNotify::player_confirmed_card_map_size() const {
  return player_confirmed_card_map_.size();
}
inline void InBattleMechanicusCardResultNotify::clear_player_confirmed_card_map() {
  player_confirmed_card_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
InBattleMechanicusCardResultNotify::player_confirmed_card_map() const {
  // @@protoc_insertion_point(field_map:proto.InBattleMechanicusCardResultNotify.player_confirmed_card_map)
  return player_confirmed_card_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
InBattleMechanicusCardResultNotify::mutable_player_confirmed_card_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.InBattleMechanicusCardResultNotify.player_confirmed_card_map)
  return player_confirmed_card_map_.MutableMap();
}

// uint32 play_index = 8;
inline void InBattleMechanicusCardResultNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusCardResultNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusCardResultNotify.play_index)
  return play_index_;
}
inline void InBattleMechanicusCardResultNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusCardResultNotify.play_index)
}

// -------------------------------------------------------------------

// MultistagePlayFinishStageRsp

// int32 retcode = 11;
inline void MultistagePlayFinishStageRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 MultistagePlayFinishStageRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageRsp.retcode)
  return retcode_;
}
inline void MultistagePlayFinishStageRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageRsp.retcode)
}

// uint32 group_id = 12;
inline void MultistagePlayFinishStageRsp::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayFinishStageRsp::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageRsp.group_id)
  return group_id_;
}
inline void MultistagePlayFinishStageRsp::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageRsp.group_id)
}

// uint32 play_index = 6;
inline void MultistagePlayFinishStageRsp::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayFinishStageRsp::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayFinishStageRsp.play_index)
  return play_index_;
}
inline void MultistagePlayFinishStageRsp::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayFinishStageRsp.play_index)
}

// -------------------------------------------------------------------

// MultistageSettleWatcherInfo

// uint32 total_progress = 13;
inline void MultistageSettleWatcherInfo::clear_total_progress() {
  total_progress_ = 0u;
}
inline ::google::protobuf::uint32 MultistageSettleWatcherInfo::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.total_progress)
  return total_progress_;
}
inline void MultistageSettleWatcherInfo::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.total_progress)
}

// uint32 cur_progress = 5;
inline void MultistageSettleWatcherInfo::clear_cur_progress() {
  cur_progress_ = 0u;
}
inline ::google::protobuf::uint32 MultistageSettleWatcherInfo::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.cur_progress)
  return cur_progress_;
}
inline void MultistageSettleWatcherInfo::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.cur_progress)
}

// uint32 watcher_id = 7;
inline void MultistageSettleWatcherInfo::clear_watcher_id() {
  watcher_id_ = 0u;
}
inline ::google::protobuf::uint32 MultistageSettleWatcherInfo::watcher_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.watcher_id)
  return watcher_id_;
}
inline void MultistageSettleWatcherInfo::set_watcher_id(::google::protobuf::uint32 value) {
  
  watcher_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.watcher_id)
}

// bool is_inverse = 12;
inline void MultistageSettleWatcherInfo::clear_is_inverse() {
  is_inverse_ = false;
}
inline bool MultistageSettleWatcherInfo::is_inverse() const {
  // @@protoc_insertion_point(field_get:proto.MultistageSettleWatcherInfo.is_inverse)
  return is_inverse_;
}
inline void MultistageSettleWatcherInfo::set_is_inverse(bool value) {
  
  is_inverse_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistageSettleWatcherInfo.is_inverse)
}

// -------------------------------------------------------------------

// InBattleMechanicusSettleNotify

// uint32 group_id = 15;
inline void InBattleMechanicusSettleNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.group_id)
  return group_id_;
}
inline void InBattleMechanicusSettleNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.group_id)
}

// uint64 scene_time_ms = 11;
inline void InBattleMechanicusSettleNotify::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleMechanicusSettleNotify::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.scene_time_ms)
  return scene_time_ms_;
}
inline void InBattleMechanicusSettleNotify::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.scene_time_ms)
}

// uint32 difficulty_percentage = 6;
inline void InBattleMechanicusSettleNotify::clear_difficulty_percentage() {
  difficulty_percentage_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleNotify::difficulty_percentage() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.difficulty_percentage)
  return difficulty_percentage_;
}
inline void InBattleMechanicusSettleNotify::set_difficulty_percentage(::google::protobuf::uint32 value) {
  
  difficulty_percentage_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.difficulty_percentage)
}

// uint32 total_token = 7;
inline void InBattleMechanicusSettleNotify::clear_total_token() {
  total_token_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleNotify::total_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.total_token)
  return total_token_;
}
inline void InBattleMechanicusSettleNotify::set_total_token(::google::protobuf::uint32 value) {
  
  total_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.total_token)
}

// repeated .proto.MultistageSettleWatcherInfo watcher_list = 3;
inline int InBattleMechanicusSettleNotify::watcher_list_size() const {
  return watcher_list_.size();
}
inline void InBattleMechanicusSettleNotify::clear_watcher_list() {
  watcher_list_.Clear();
}
inline const ::proto::MultistageSettleWatcherInfo& InBattleMechanicusSettleNotify::watcher_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_.Get(index);
}
inline ::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleNotify::mutable_watcher_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_.Mutable(index);
}
inline ::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleNotify::add_watcher_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >*
InBattleMechanicusSettleNotify::mutable_watcher_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusSettleNotify.watcher_list)
  return &watcher_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >&
InBattleMechanicusSettleNotify::watcher_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusSettleNotify.watcher_list)
  return watcher_list_;
}

// uint32 real_token = 13;
inline void InBattleMechanicusSettleNotify::clear_real_token() {
  real_token_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleNotify::real_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.real_token)
  return real_token_;
}
inline void InBattleMechanicusSettleNotify::set_real_token(::google::protobuf::uint32 value) {
  
  real_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.real_token)
}

// bool is_success = 2;
inline void InBattleMechanicusSettleNotify::clear_is_success() {
  is_success_ = false;
}
inline bool InBattleMechanicusSettleNotify::is_success() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.is_success)
  return is_success_;
}
inline void InBattleMechanicusSettleNotify::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.is_success)
}

// uint32 play_index = 14;
inline void InBattleMechanicusSettleNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleNotify.play_index)
  return play_index_;
}
inline void InBattleMechanicusSettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleNotify.play_index)
}

// -------------------------------------------------------------------

// InBattleMechanicusSettleInfo

// uint64 scene_time_ms = 15;
inline void InBattleMechanicusSettleInfo::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleMechanicusSettleInfo::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.scene_time_ms)
  return scene_time_ms_;
}
inline void InBattleMechanicusSettleInfo::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.scene_time_ms)
}

// uint32 total_token = 4;
inline void InBattleMechanicusSettleInfo::clear_total_token() {
  total_token_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleInfo::total_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.total_token)
  return total_token_;
}
inline void InBattleMechanicusSettleInfo::set_total_token(::google::protobuf::uint32 value) {
  
  total_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.total_token)
}

// uint32 real_token = 8;
inline void InBattleMechanicusSettleInfo::clear_real_token() {
  real_token_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleInfo::real_token() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.real_token)
  return real_token_;
}
inline void InBattleMechanicusSettleInfo::set_real_token(::google::protobuf::uint32 value) {
  
  real_token_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.real_token)
}

// repeated .proto.MultistageSettleWatcherInfo watcher_list = 7;
inline int InBattleMechanicusSettleInfo::watcher_list_size() const {
  return watcher_list_.size();
}
inline void InBattleMechanicusSettleInfo::clear_watcher_list() {
  watcher_list_.Clear();
}
inline const ::proto::MultistageSettleWatcherInfo& InBattleMechanicusSettleInfo::watcher_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_.Get(index);
}
inline ::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleInfo::mutable_watcher_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_.Mutable(index);
}
inline ::proto::MultistageSettleWatcherInfo* InBattleMechanicusSettleInfo::add_watcher_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >*
InBattleMechanicusSettleInfo::mutable_watcher_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleMechanicusSettleInfo.watcher_list)
  return &watcher_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::MultistageSettleWatcherInfo >&
InBattleMechanicusSettleInfo::watcher_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleMechanicusSettleInfo.watcher_list)
  return watcher_list_;
}

// bool is_success = 6;
inline void InBattleMechanicusSettleInfo::clear_is_success() {
  is_success_ = false;
}
inline bool InBattleMechanicusSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.is_success)
  return is_success_;
}
inline void InBattleMechanicusSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.is_success)
}

// uint32 play_index = 3;
inline void InBattleMechanicusSettleInfo::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleInfo::play_index() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.play_index)
  return play_index_;
}
inline void InBattleMechanicusSettleInfo::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.play_index)
}

// uint32 difficulty_percentage = 10;
inline void InBattleMechanicusSettleInfo::clear_difficulty_percentage() {
  difficulty_percentage_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleInfo::difficulty_percentage() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.difficulty_percentage)
  return difficulty_percentage_;
}
inline void InBattleMechanicusSettleInfo::set_difficulty_percentage(::google::protobuf::uint32 value) {
  
  difficulty_percentage_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.difficulty_percentage)
}

// uint32 group_id = 13;
inline void InBattleMechanicusSettleInfo::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 InBattleMechanicusSettleInfo::group_id() const {
  // @@protoc_insertion_point(field_get:proto.InBattleMechanicusSettleInfo.group_id)
  return group_id_;
}
inline void InBattleMechanicusSettleInfo::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleMechanicusSettleInfo.group_id)
}

// -------------------------------------------------------------------

// MultistagePlaySettleNotify

// uint32 play_index = 14;
inline void MultistagePlaySettleNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlaySettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.play_index)
  return play_index_;
}
inline void MultistagePlaySettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlaySettleNotify.play_index)
}

// uint32 group_id = 4;
inline void MultistagePlaySettleNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlaySettleNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.group_id)
  return group_id_;
}
inline void MultistagePlaySettleNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlaySettleNotify.group_id)
}

// .proto.InBattleMechanicusSettleInfo mechanicus_settle_info = 1402;
inline bool MultistagePlaySettleNotify::has_mechanicus_settle_info() const {
  return detail_case() == kMechanicusSettleInfo;
}
inline void MultistagePlaySettleNotify::set_has_mechanicus_settle_info() {
  _oneof_case_[0] = kMechanicusSettleInfo;
}
inline void MultistagePlaySettleNotify::clear_mechanicus_settle_info() {
  if (has_mechanicus_settle_info()) {
    delete detail_.mechanicus_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InBattleMechanicusSettleInfo& MultistagePlaySettleNotify::mechanicus_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
  return has_mechanicus_settle_info()
      ? *detail_.mechanicus_settle_info_
      : ::proto::InBattleMechanicusSettleInfo::default_instance();
}
inline ::proto::InBattleMechanicusSettleInfo* MultistagePlaySettleNotify::mutable_mechanicus_settle_info() {
  if (!has_mechanicus_settle_info()) {
    clear_detail();
    set_has_mechanicus_settle_info();
    detail_.mechanicus_settle_info_ = new ::proto::InBattleMechanicusSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
  return detail_.mechanicus_settle_info_;
}
inline ::proto::InBattleMechanicusSettleInfo* MultistagePlaySettleNotify::release_mechanicus_settle_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
  if (has_mechanicus_settle_info()) {
    clear_has_detail();
    ::proto::InBattleMechanicusSettleInfo* temp = detail_.mechanicus_settle_info_;
    detail_.mechanicus_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlaySettleNotify::set_allocated_mechanicus_settle_info(::proto::InBattleMechanicusSettleInfo* mechanicus_settle_info) {
  clear_detail();
  if (mechanicus_settle_info) {
    set_has_mechanicus_settle_info();
    detail_.mechanicus_settle_info_ = mechanicus_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlaySettleNotify.mechanicus_settle_info)
}

// .proto.InBattleChessSettleInfo chess_settle_info = 1283;
inline bool MultistagePlaySettleNotify::has_chess_settle_info() const {
  return detail_case() == kChessSettleInfo;
}
inline void MultistagePlaySettleNotify::set_has_chess_settle_info() {
  _oneof_case_[0] = kChessSettleInfo;
}
inline void MultistagePlaySettleNotify::clear_chess_settle_info() {
  if (has_chess_settle_info()) {
    delete detail_.chess_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InBattleChessSettleInfo& MultistagePlaySettleNotify::chess_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.chess_settle_info)
  return has_chess_settle_info()
      ? *detail_.chess_settle_info_
      : ::proto::InBattleChessSettleInfo::default_instance();
}
inline ::proto::InBattleChessSettleInfo* MultistagePlaySettleNotify::mutable_chess_settle_info() {
  if (!has_chess_settle_info()) {
    clear_detail();
    set_has_chess_settle_info();
    detail_.chess_settle_info_ = new ::proto::InBattleChessSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlaySettleNotify.chess_settle_info)
  return detail_.chess_settle_info_;
}
inline ::proto::InBattleChessSettleInfo* MultistagePlaySettleNotify::release_chess_settle_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlaySettleNotify.chess_settle_info)
  if (has_chess_settle_info()) {
    clear_has_detail();
    ::proto::InBattleChessSettleInfo* temp = detail_.chess_settle_info_;
    detail_.chess_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlaySettleNotify::set_allocated_chess_settle_info(::proto::InBattleChessSettleInfo* chess_settle_info) {
  clear_detail();
  if (chess_settle_info) {
    set_has_chess_settle_info();
    detail_.chess_settle_info_ = chess_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlaySettleNotify.chess_settle_info)
}

// .proto.InBattleIrodoriChessSettleInfo irodori_chess_settle_info = 612;
inline bool MultistagePlaySettleNotify::has_irodori_chess_settle_info() const {
  return detail_case() == kIrodoriChessSettleInfo;
}
inline void MultistagePlaySettleNotify::set_has_irodori_chess_settle_info() {
  _oneof_case_[0] = kIrodoriChessSettleInfo;
}
inline void MultistagePlaySettleNotify::clear_irodori_chess_settle_info() {
  if (has_irodori_chess_settle_info()) {
    delete detail_.irodori_chess_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::InBattleIrodoriChessSettleInfo& MultistagePlaySettleNotify::irodori_chess_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
  return has_irodori_chess_settle_info()
      ? *detail_.irodori_chess_settle_info_
      : ::proto::InBattleIrodoriChessSettleInfo::default_instance();
}
inline ::proto::InBattleIrodoriChessSettleInfo* MultistagePlaySettleNotify::mutable_irodori_chess_settle_info() {
  if (!has_irodori_chess_settle_info()) {
    clear_detail();
    set_has_irodori_chess_settle_info();
    detail_.irodori_chess_settle_info_ = new ::proto::InBattleIrodoriChessSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
  return detail_.irodori_chess_settle_info_;
}
inline ::proto::InBattleIrodoriChessSettleInfo* MultistagePlaySettleNotify::release_irodori_chess_settle_info() {
  // @@protoc_insertion_point(field_release:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
  if (has_irodori_chess_settle_info()) {
    clear_has_detail();
    ::proto::InBattleIrodoriChessSettleInfo* temp = detail_.irodori_chess_settle_info_;
    detail_.irodori_chess_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void MultistagePlaySettleNotify::set_allocated_irodori_chess_settle_info(::proto::InBattleIrodoriChessSettleInfo* irodori_chess_settle_info) {
  clear_detail();
  if (irodori_chess_settle_info) {
    set_has_irodori_chess_settle_info();
    detail_.irodori_chess_settle_info_ = irodori_chess_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.MultistagePlaySettleNotify.irodori_chess_settle_info)
}

inline bool MultistagePlaySettleNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void MultistagePlaySettleNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline MultistagePlaySettleNotify::DetailCase MultistagePlaySettleNotify::detail_case() const {
  return MultistagePlaySettleNotify::DetailCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MultistagePlayStageEndNotify

// uint32 group_id = 15;
inline void MultistagePlayStageEndNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayStageEndNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayStageEndNotify.group_id)
  return group_id_;
}
inline void MultistagePlayStageEndNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayStageEndNotify.group_id)
}

// uint32 play_index = 9;
inline void MultistagePlayStageEndNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayStageEndNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayStageEndNotify.play_index)
  return play_index_;
}
inline void MultistagePlayStageEndNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayStageEndNotify.play_index)
}

// -------------------------------------------------------------------

// MultistagePlayEndNotify

// uint32 group_id = 5;
inline void MultistagePlayEndNotify::clear_group_id() {
  group_id_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayEndNotify::group_id() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayEndNotify.group_id)
  return group_id_;
}
inline void MultistagePlayEndNotify::set_group_id(::google::protobuf::uint32 value) {
  
  group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayEndNotify.group_id)
}

// uint32 play_index = 13;
inline void MultistagePlayEndNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 MultistagePlayEndNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.MultistagePlayEndNotify.play_index)
  return play_index_;
}
inline void MultistagePlayEndNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.MultistagePlayEndNotify.play_index)
}

// -------------------------------------------------------------------

// FleurFairBuffEnergyNotify

// uint32 energy = 4;
inline void FleurFairBuffEnergyNotify::clear_energy() {
  energy_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairBuffEnergyNotify::energy() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBuffEnergyNotify.energy)
  return energy_;
}
inline void FleurFairBuffEnergyNotify::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBuffEnergyNotify.energy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// FleurFairGallerySettleInfo

// uint32 energy = 2;
inline void FleurFairGallerySettleInfo::clear_energy() {
  energy_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairGallerySettleInfo::energy() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.energy)
  return energy_;
}
inline void FleurFairGallerySettleInfo::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.energy)
}

// uint32 gallery_stage_index = 11;
inline void FleurFairGallerySettleInfo::clear_gallery_stage_index() {
  gallery_stage_index_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairGallerySettleInfo::gallery_stage_index() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.gallery_stage_index)
  return gallery_stage_index_;
}
inline void FleurFairGallerySettleInfo::set_gallery_stage_index(::google::protobuf::uint32 value) {
  
  gallery_stage_index_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.gallery_stage_index)
}

// map<uint32, int32> energy_stat_map = 6;
inline int FleurFairGallerySettleInfo::energy_stat_map_size() const {
  return energy_stat_map_.size();
}
inline void FleurFairGallerySettleInfo::clear_energy_stat_map() {
  energy_stat_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >&
FleurFairGallerySettleInfo::energy_stat_map() const {
  // @@protoc_insertion_point(field_map:proto.FleurFairGallerySettleInfo.energy_stat_map)
  return energy_stat_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::int32 >*
FleurFairGallerySettleInfo::mutable_energy_stat_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.FleurFairGallerySettleInfo.energy_stat_map)
  return energy_stat_map_.MutableMap();
}

// uint32 gallery_stage_count = 9;
inline void FleurFairGallerySettleInfo::clear_gallery_stage_count() {
  gallery_stage_count_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairGallerySettleInfo::gallery_stage_count() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.gallery_stage_count)
  return gallery_stage_count_;
}
inline void FleurFairGallerySettleInfo::set_gallery_stage_count(::google::protobuf::uint32 value) {
  
  gallery_stage_count_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.gallery_stage_count)
}

// bool is_success = 1;
inline void FleurFairGallerySettleInfo::clear_is_success() {
  is_success_ = false;
}
inline bool FleurFairGallerySettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairGallerySettleInfo.is_success)
  return is_success_;
}
inline void FleurFairGallerySettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairGallerySettleInfo.is_success)
}

// -------------------------------------------------------------------

// FleurFairPlayerStatInfo

// string online_id = 11;
inline void FleurFairPlayerStatInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleurFairPlayerStatInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.online_id)
  return online_id_.GetNoArena();
}
inline void FleurFairPlayerStatInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.online_id)
}
#if LANG_CXX11
inline void FleurFairPlayerStatInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FleurFairPlayerStatInfo.online_id)
}
#endif
inline void FleurFairPlayerStatInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FleurFairPlayerStatInfo.online_id)
}
inline void FleurFairPlayerStatInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FleurFairPlayerStatInfo.online_id)
}
inline ::std::string* FleurFairPlayerStatInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.FleurFairPlayerStatInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleurFairPlayerStatInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.FleurFairPlayerStatInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleurFairPlayerStatInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairPlayerStatInfo.online_id)
}

// uint32 uid = 8;
inline void FleurFairPlayerStatInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairPlayerStatInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.uid)
  return uid_;
}
inline void FleurFairPlayerStatInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.uid)
}

// .proto.ProfilePicture profile_picture = 1;
inline bool FleurFairPlayerStatInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
inline void FleurFairPlayerStatInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
inline const ::proto::ProfilePicture& FleurFairPlayerStatInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
inline ::proto::ProfilePicture* FleurFairPlayerStatInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.FleurFairPlayerStatInfo.profile_picture)
  return profile_picture_;
}
inline ::proto::ProfilePicture* FleurFairPlayerStatInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.FleurFairPlayerStatInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
inline void FleurFairPlayerStatInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairPlayerStatInfo.profile_picture)
}

// uint32 stat_id = 3;
inline void FleurFairPlayerStatInfo::clear_stat_id() {
  stat_id_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairPlayerStatInfo::stat_id() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.stat_id)
  return stat_id_;
}
inline void FleurFairPlayerStatInfo::set_stat_id(::google::protobuf::uint32 value) {
  
  stat_id_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.stat_id)
}

// uint32 head_image = 6;
inline void FleurFairPlayerStatInfo::clear_head_image() {
  head_image_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairPlayerStatInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.head_image)
  return head_image_;
}
inline void FleurFairPlayerStatInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.head_image)
}

// string nick_name = 15;
inline void FleurFairPlayerStatInfo::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FleurFairPlayerStatInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.nick_name)
  return nick_name_.GetNoArena();
}
inline void FleurFairPlayerStatInfo::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.nick_name)
}
#if LANG_CXX11
inline void FleurFairPlayerStatInfo::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FleurFairPlayerStatInfo.nick_name)
}
#endif
inline void FleurFairPlayerStatInfo::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FleurFairPlayerStatInfo.nick_name)
}
inline void FleurFairPlayerStatInfo::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FleurFairPlayerStatInfo.nick_name)
}
inline ::std::string* FleurFairPlayerStatInfo::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.FleurFairPlayerStatInfo.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FleurFairPlayerStatInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:proto.FleurFairPlayerStatInfo.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FleurFairPlayerStatInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairPlayerStatInfo.nick_name)
}

// int32 param = 5;
inline void FleurFairPlayerStatInfo::clear_param() {
  param_ = 0;
}
inline ::google::protobuf::int32 FleurFairPlayerStatInfo::param() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairPlayerStatInfo.param)
  return param_;
}
inline void FleurFairPlayerStatInfo::set_param(::google::protobuf::int32 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairPlayerStatInfo.param)
}

// -------------------------------------------------------------------

// FleurFairBossSettleInfo

// uint32 reward_token_num = 15;
inline void FleurFairBossSettleInfo::clear_reward_token_num() {
  reward_token_num_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairBossSettleInfo::reward_token_num() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.reward_token_num)
  return reward_token_num_;
}
inline void FleurFairBossSettleInfo::set_reward_token_num(::google::protobuf::uint32 value) {
  
  reward_token_num_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.reward_token_num)
}

// repeated .proto.FleurFairPlayerStatInfo stat_info_list = 1;
inline int FleurFairBossSettleInfo::stat_info_list_size() const {
  return stat_info_list_.size();
}
inline void FleurFairBossSettleInfo::clear_stat_info_list() {
  stat_info_list_.Clear();
}
inline const ::proto::FleurFairPlayerStatInfo& FleurFairBossSettleInfo::stat_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_.Get(index);
}
inline ::proto::FleurFairPlayerStatInfo* FleurFairBossSettleInfo::mutable_stat_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_.Mutable(index);
}
inline ::proto::FleurFairPlayerStatInfo* FleurFairBossSettleInfo::add_stat_info_list() {
  // @@protoc_insertion_point(field_add:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::FleurFairPlayerStatInfo >*
FleurFairBossSettleInfo::mutable_stat_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.FleurFairBossSettleInfo.stat_info_list)
  return &stat_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::FleurFairPlayerStatInfo >&
FleurFairBossSettleInfo::stat_info_list() const {
  // @@protoc_insertion_point(field_list:proto.FleurFairBossSettleInfo.stat_info_list)
  return stat_info_list_;
}

// bool is_success = 10;
inline void FleurFairBossSettleInfo::clear_is_success() {
  is_success_ = false;
}
inline bool FleurFairBossSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.is_success)
  return is_success_;
}
inline void FleurFairBossSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.is_success)
}

// uint32 energy = 12;
inline void FleurFairBossSettleInfo::clear_energy() {
  energy_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairBossSettleInfo::energy() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.energy)
  return energy_;
}
inline void FleurFairBossSettleInfo::set_energy(::google::protobuf::uint32 value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.energy)
}

// uint32 cost_time = 8;
inline void FleurFairBossSettleInfo::clear_cost_time() {
  cost_time_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairBossSettleInfo::cost_time() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairBossSettleInfo.cost_time)
  return cost_time_;
}
inline void FleurFairBossSettleInfo::set_cost_time(::google::protobuf::uint32 value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairBossSettleInfo.cost_time)
}

// -------------------------------------------------------------------

// FleurFairStageSettleNotify

// uint32 stage_type = 10;
inline void FleurFairStageSettleNotify::clear_stage_type() {
  stage_type_ = 0u;
}
inline ::google::protobuf::uint32 FleurFairStageSettleNotify::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairStageSettleNotify.stage_type)
  return stage_type_;
}
inline void FleurFairStageSettleNotify::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.FleurFairStageSettleNotify.stage_type)
}

// .proto.FleurFairGallerySettleInfo gallery_settle_info = 13;
inline bool FleurFairStageSettleNotify::has_gallery_settle_info() const {
  return detail_case() == kGallerySettleInfo;
}
inline void FleurFairStageSettleNotify::set_has_gallery_settle_info() {
  _oneof_case_[0] = kGallerySettleInfo;
}
inline void FleurFairStageSettleNotify::clear_gallery_settle_info() {
  if (has_gallery_settle_info()) {
    delete detail_.gallery_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::FleurFairGallerySettleInfo& FleurFairStageSettleNotify::gallery_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairStageSettleNotify.gallery_settle_info)
  return has_gallery_settle_info()
      ? *detail_.gallery_settle_info_
      : ::proto::FleurFairGallerySettleInfo::default_instance();
}
inline ::proto::FleurFairGallerySettleInfo* FleurFairStageSettleNotify::mutable_gallery_settle_info() {
  if (!has_gallery_settle_info()) {
    clear_detail();
    set_has_gallery_settle_info();
    detail_.gallery_settle_info_ = new ::proto::FleurFairGallerySettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.FleurFairStageSettleNotify.gallery_settle_info)
  return detail_.gallery_settle_info_;
}
inline ::proto::FleurFairGallerySettleInfo* FleurFairStageSettleNotify::release_gallery_settle_info() {
  // @@protoc_insertion_point(field_release:proto.FleurFairStageSettleNotify.gallery_settle_info)
  if (has_gallery_settle_info()) {
    clear_has_detail();
    ::proto::FleurFairGallerySettleInfo* temp = detail_.gallery_settle_info_;
    detail_.gallery_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FleurFairStageSettleNotify::set_allocated_gallery_settle_info(::proto::FleurFairGallerySettleInfo* gallery_settle_info) {
  clear_detail();
  if (gallery_settle_info) {
    set_has_gallery_settle_info();
    detail_.gallery_settle_info_ = gallery_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairStageSettleNotify.gallery_settle_info)
}

// .proto.FleurFairBossSettleInfo boss_settle_info = 14;
inline bool FleurFairStageSettleNotify::has_boss_settle_info() const {
  return detail_case() == kBossSettleInfo;
}
inline void FleurFairStageSettleNotify::set_has_boss_settle_info() {
  _oneof_case_[0] = kBossSettleInfo;
}
inline void FleurFairStageSettleNotify::clear_boss_settle_info() {
  if (has_boss_settle_info()) {
    delete detail_.boss_settle_info_;
    clear_has_detail();
  }
}
inline  const ::proto::FleurFairBossSettleInfo& FleurFairStageSettleNotify::boss_settle_info() const {
  // @@protoc_insertion_point(field_get:proto.FleurFairStageSettleNotify.boss_settle_info)
  return has_boss_settle_info()
      ? *detail_.boss_settle_info_
      : ::proto::FleurFairBossSettleInfo::default_instance();
}
inline ::proto::FleurFairBossSettleInfo* FleurFairStageSettleNotify::mutable_boss_settle_info() {
  if (!has_boss_settle_info()) {
    clear_detail();
    set_has_boss_settle_info();
    detail_.boss_settle_info_ = new ::proto::FleurFairBossSettleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.FleurFairStageSettleNotify.boss_settle_info)
  return detail_.boss_settle_info_;
}
inline ::proto::FleurFairBossSettleInfo* FleurFairStageSettleNotify::release_boss_settle_info() {
  // @@protoc_insertion_point(field_release:proto.FleurFairStageSettleNotify.boss_settle_info)
  if (has_boss_settle_info()) {
    clear_has_detail();
    ::proto::FleurFairBossSettleInfo* temp = detail_.boss_settle_info_;
    detail_.boss_settle_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void FleurFairStageSettleNotify::set_allocated_boss_settle_info(::proto::FleurFairBossSettleInfo* boss_settle_info) {
  clear_detail();
  if (boss_settle_info) {
    set_has_boss_settle_info();
    detail_.boss_settle_info_ = boss_settle_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FleurFairStageSettleNotify.boss_settle_info)
}

inline bool FleurFairStageSettleNotify::has_detail() const {
  return detail_case() != DETAIL_NOT_SET;
}
inline void FleurFairStageSettleNotify::clear_has_detail() {
  _oneof_case_[0] = DETAIL_NOT_SET;
}
inline FleurFairStageSettleNotify::DetailCase FleurFairStageSettleNotify::detail_case() const {
  return FleurFairStageSettleNotify::DetailCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FleurFairFinishGalleryStageNotify

// -------------------------------------------------------------------

// HideAndSeekPlayerBattleInfo

// uint32 costume_id = 3;
inline void HideAndSeekPlayerBattleInfo::clear_costume_id() {
  costume_id_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekPlayerBattleInfo::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.costume_id)
  return costume_id_;
}
inline void HideAndSeekPlayerBattleInfo::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.costume_id)
}

// repeated uint32 skill_list = 15;
inline int HideAndSeekPlayerBattleInfo::skill_list_size() const {
  return skill_list_.size();
}
inline void HideAndSeekPlayerBattleInfo::clear_skill_list() {
  skill_list_.Clear();
}
inline ::google::protobuf::uint32 HideAndSeekPlayerBattleInfo::skill_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.skill_list)
  return skill_list_.Get(index);
}
inline void HideAndSeekPlayerBattleInfo::set_skill_list(int index, ::google::protobuf::uint32 value) {
  skill_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.skill_list)
}
inline void HideAndSeekPlayerBattleInfo::add_skill_list(::google::protobuf::uint32 value) {
  skill_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekPlayerBattleInfo.skill_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekPlayerBattleInfo::skill_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekPlayerBattleInfo.skill_list)
  return skill_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekPlayerBattleInfo::mutable_skill_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekPlayerBattleInfo.skill_list)
  return &skill_list_;
}

// bool is_ready = 12;
inline void HideAndSeekPlayerBattleInfo::clear_is_ready() {
  is_ready_ = false;
}
inline bool HideAndSeekPlayerBattleInfo::is_ready() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.is_ready)
  return is_ready_;
}
inline void HideAndSeekPlayerBattleInfo::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.is_ready)
}

// uint32 avatar_id = 6;
inline void HideAndSeekPlayerBattleInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekPlayerBattleInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerBattleInfo.avatar_id)
  return avatar_id_;
}
inline void HideAndSeekPlayerBattleInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerBattleInfo.avatar_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HideAndSeekStageInfo

// uint32 map_id = 8;
inline void HideAndSeekStageInfo::clear_map_id() {
  map_id_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekStageInfo::map_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.map_id)
  return map_id_;
}
inline void HideAndSeekStageInfo::set_map_id(::google::protobuf::uint32 value) {
  
  map_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.map_id)
}

// bool is_record_score = 3;
inline void HideAndSeekStageInfo::clear_is_record_score() {
  is_record_score_ = false;
}
inline bool HideAndSeekStageInfo::is_record_score() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.is_record_score)
  return is_record_score_;
}
inline void HideAndSeekStageInfo::set_is_record_score(bool value) {
  
  is_record_score_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.is_record_score)
}

// .proto.HideAndSeekStageType stage_type = 7;
inline void HideAndSeekStageInfo::clear_stage_type() {
  stage_type_ = 0;
}
inline ::proto::HideAndSeekStageType HideAndSeekStageInfo::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.stage_type)
  return static_cast< ::proto::HideAndSeekStageType >(stage_type_);
}
inline void HideAndSeekStageInfo::set_stage_type(::proto::HideAndSeekStageType value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.stage_type)
}

// map<uint32, .proto.HideAndSeekPlayerBattleInfo> battle_info_map = 2;
inline int HideAndSeekStageInfo::battle_info_map_size() const {
  return battle_info_map_.size();
}
inline void HideAndSeekStageInfo::clear_battle_info_map() {
  battle_info_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >&
HideAndSeekStageInfo::battle_info_map() const {
  // @@protoc_insertion_point(field_map:proto.HideAndSeekStageInfo.battle_info_map)
  return battle_info_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::HideAndSeekPlayerBattleInfo >*
HideAndSeekStageInfo::mutable_battle_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.HideAndSeekStageInfo.battle_info_map)
  return battle_info_map_.MutableMap();
}

// repeated uint32 hider_uid_list = 1;
inline int HideAndSeekStageInfo::hider_uid_list_size() const {
  return hider_uid_list_.size();
}
inline void HideAndSeekStageInfo::clear_hider_uid_list() {
  hider_uid_list_.Clear();
}
inline ::google::protobuf::uint32 HideAndSeekStageInfo::hider_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.hider_uid_list)
  return hider_uid_list_.Get(index);
}
inline void HideAndSeekStageInfo::set_hider_uid_list(int index, ::google::protobuf::uint32 value) {
  hider_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.hider_uid_list)
}
inline void HideAndSeekStageInfo::add_hider_uid_list(::google::protobuf::uint32 value) {
  hider_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekStageInfo.hider_uid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekStageInfo::hider_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekStageInfo.hider_uid_list)
  return hider_uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekStageInfo::mutable_hider_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekStageInfo.hider_uid_list)
  return &hider_uid_list_;
}

// uint32 hunter_uid = 10;
inline void HideAndSeekStageInfo::clear_hunter_uid() {
  hunter_uid_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekStageInfo::hunter_uid() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekStageInfo.hunter_uid)
  return hunter_uid_;
}
inline void HideAndSeekStageInfo::set_hunter_uid(::google::protobuf::uint32 value) {
  
  hunter_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekStageInfo.hunter_uid)
}

// -------------------------------------------------------------------

// HideAndSeekSelectAvatarReq

// uint32 avatar_id = 8;
inline void HideAndSeekSelectAvatarReq::clear_avatar_id() {
  avatar_id_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekSelectAvatarReq::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSelectAvatarReq.avatar_id)
  return avatar_id_;
}
inline void HideAndSeekSelectAvatarReq::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSelectAvatarReq.avatar_id)
}

// -------------------------------------------------------------------

// HideAndSeekSelectAvatarRsp

// int32 retcode = 2;
inline void HideAndSeekSelectAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 HideAndSeekSelectAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSelectAvatarRsp.retcode)
  return retcode_;
}
inline void HideAndSeekSelectAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSelectAvatarRsp.retcode)
}

// uint32 avatar_id = 3;
inline void HideAndSeekSelectAvatarRsp::clear_avatar_id() {
  avatar_id_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekSelectAvatarRsp::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSelectAvatarRsp.avatar_id)
  return avatar_id_;
}
inline void HideAndSeekSelectAvatarRsp::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSelectAvatarRsp.avatar_id)
}

// -------------------------------------------------------------------

// HideAndSeekSetReadyReq

// -------------------------------------------------------------------

// HideAndSeekSetReadyRsp

// int32 retcode = 11;
inline void HideAndSeekSetReadyRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 HideAndSeekSetReadyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSetReadyRsp.retcode)
  return retcode_;
}
inline void HideAndSeekSetReadyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSetReadyRsp.retcode)
}

// -------------------------------------------------------------------

// HideAndSeekSettleInfo

// uint32 uid = 2;
inline void HideAndSeekSettleInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekSettleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.uid)
  return uid_;
}
inline void HideAndSeekSettleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.uid)
}

// .proto.ProfilePicture profile_picture = 1;
inline bool HideAndSeekSettleInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
inline void HideAndSeekSettleInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
inline const ::proto::ProfilePicture& HideAndSeekSettleInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
inline ::proto::ProfilePicture* HideAndSeekSettleInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.profile_picture)
  return profile_picture_;
}
inline ::proto::ProfilePicture* HideAndSeekSettleInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.HideAndSeekSettleInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
inline void HideAndSeekSettleInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HideAndSeekSettleInfo.profile_picture)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 8;
inline int HideAndSeekSettleInfo::card_list_size() const {
  return card_list_.size();
}
inline void HideAndSeekSettleInfo::clear_card_list() {
  card_list_.Clear();
}
inline const ::proto::ExhibitionDisplayInfo& HideAndSeekSettleInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.card_list)
  return card_list_.Get(index);
}
inline ::proto::ExhibitionDisplayInfo* HideAndSeekSettleInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.card_list)
  return card_list_.Mutable(index);
}
inline ::proto::ExhibitionDisplayInfo* HideAndSeekSettleInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleInfo.card_list)
  return card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
HideAndSeekSettleInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleInfo.card_list)
  return &card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
HideAndSeekSettleInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleInfo.card_list)
  return card_list_;
}

// string nickname = 3;
inline void HideAndSeekSettleInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HideAndSeekSettleInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.nickname)
  return nickname_.GetNoArena();
}
inline void HideAndSeekSettleInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.nickname)
}
#if LANG_CXX11
inline void HideAndSeekSettleInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HideAndSeekSettleInfo.nickname)
}
#endif
inline void HideAndSeekSettleInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HideAndSeekSettleInfo.nickname)
}
inline void HideAndSeekSettleInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HideAndSeekSettleInfo.nickname)
}
inline ::std::string* HideAndSeekSettleInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HideAndSeekSettleInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.HideAndSeekSettleInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HideAndSeekSettleInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.HideAndSeekSettleInfo.nickname)
}

// uint32 head_image = 4;
inline void HideAndSeekSettleInfo::clear_head_image() {
  head_image_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekSettleInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.head_image)
  return head_image_;
}
inline void HideAndSeekSettleInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.head_image)
}

// string online_id = 10;
inline void HideAndSeekSettleInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HideAndSeekSettleInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleInfo.online_id)
  return online_id_.GetNoArena();
}
inline void HideAndSeekSettleInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleInfo.online_id)
}
#if LANG_CXX11
inline void HideAndSeekSettleInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HideAndSeekSettleInfo.online_id)
}
#endif
inline void HideAndSeekSettleInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HideAndSeekSettleInfo.online_id)
}
inline void HideAndSeekSettleInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HideAndSeekSettleInfo.online_id)
}
inline ::std::string* HideAndSeekSettleInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HideAndSeekSettleInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.HideAndSeekSettleInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HideAndSeekSettleInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.HideAndSeekSettleInfo.online_id)
}

// -------------------------------------------------------------------

// HideAndSeekSettleNotify

// uint32 cost_time = 2;
inline void HideAndSeekSettleNotify::clear_cost_time() {
  cost_time_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekSettleNotify::cost_time() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.cost_time)
  return cost_time_;
}
inline void HideAndSeekSettleNotify::set_cost_time(::google::protobuf::uint32 value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.cost_time)
}

// repeated .proto.HideAndSeekSettleInfo settle_info_list = 8;
inline int HideAndSeekSettleNotify::settle_info_list_size() const {
  return settle_info_list_.size();
}
inline void HideAndSeekSettleNotify::clear_settle_info_list() {
  settle_info_list_.Clear();
}
inline const ::proto::HideAndSeekSettleInfo& HideAndSeekSettleNotify::settle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_.Get(index);
}
inline ::proto::HideAndSeekSettleInfo* HideAndSeekSettleNotify::mutable_settle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_.Mutable(index);
}
inline ::proto::HideAndSeekSettleInfo* HideAndSeekSettleNotify::add_settle_info_list() {
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::HideAndSeekSettleInfo >*
HideAndSeekSettleNotify::mutable_settle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleNotify.settle_info_list)
  return &settle_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::HideAndSeekSettleInfo >&
HideAndSeekSettleNotify::settle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleNotify.settle_info_list)
  return settle_info_list_;
}

// repeated uint32 winner_list = 15;
inline int HideAndSeekSettleNotify::winner_list_size() const {
  return winner_list_.size();
}
inline void HideAndSeekSettleNotify::clear_winner_list() {
  winner_list_.Clear();
}
inline ::google::protobuf::uint32 HideAndSeekSettleNotify::winner_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.winner_list)
  return winner_list_.Get(index);
}
inline void HideAndSeekSettleNotify::set_winner_list(int index, ::google::protobuf::uint32 value) {
  winner_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.winner_list)
}
inline void HideAndSeekSettleNotify::add_winner_list(::google::protobuf::uint32 value) {
  winner_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleNotify.winner_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekSettleNotify::winner_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleNotify.winner_list)
  return winner_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekSettleNotify::mutable_winner_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleNotify.winner_list)
  return &winner_list_;
}

// .proto.HideAndSeekSettleNotify.SettleReason reason = 4;
inline void HideAndSeekSettleNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::HideAndSeekSettleNotify_SettleReason HideAndSeekSettleNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.reason)
  return static_cast< ::proto::HideAndSeekSettleNotify_SettleReason >(reason_);
}
inline void HideAndSeekSettleNotify::set_reason(::proto::HideAndSeekSettleNotify_SettleReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.reason)
}

// uint32 play_index = 13;
inline void HideAndSeekSettleNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekSettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.play_index)
  return play_index_;
}
inline void HideAndSeekSettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.play_index)
}

// bool is_record_score = 6;
inline void HideAndSeekSettleNotify::clear_is_record_score() {
  is_record_score_ = false;
}
inline bool HideAndSeekSettleNotify::is_record_score() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.is_record_score)
  return is_record_score_;
}
inline void HideAndSeekSettleNotify::set_is_record_score(bool value) {
  
  is_record_score_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.is_record_score)
}

// repeated .proto.ExhibitionDisplayInfo score_list = 9;
inline int HideAndSeekSettleNotify::score_list_size() const {
  return score_list_.size();
}
inline void HideAndSeekSettleNotify::clear_score_list() {
  score_list_.Clear();
}
inline const ::proto::ExhibitionDisplayInfo& HideAndSeekSettleNotify::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.score_list)
  return score_list_.Get(index);
}
inline ::proto::ExhibitionDisplayInfo* HideAndSeekSettleNotify::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.HideAndSeekSettleNotify.score_list)
  return score_list_.Mutable(index);
}
inline ::proto::ExhibitionDisplayInfo* HideAndSeekSettleNotify::add_score_list() {
  // @@protoc_insertion_point(field_add:proto.HideAndSeekSettleNotify.score_list)
  return score_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
HideAndSeekSettleNotify::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekSettleNotify.score_list)
  return &score_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
HideAndSeekSettleNotify::score_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekSettleNotify.score_list)
  return score_list_;
}

// uint32 stage_type = 14;
inline void HideAndSeekSettleNotify::clear_stage_type() {
  stage_type_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekSettleNotify::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekSettleNotify.stage_type)
  return stage_type_;
}
inline void HideAndSeekSettleNotify::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekSettleNotify.stage_type)
}

// -------------------------------------------------------------------

// HideAndSeekPlayerReadyNotify

// repeated uint32 uid_list = 5;
inline int HideAndSeekPlayerReadyNotify::uid_list_size() const {
  return uid_list_.size();
}
inline void HideAndSeekPlayerReadyNotify::clear_uid_list() {
  uid_list_.Clear();
}
inline ::google::protobuf::uint32 HideAndSeekPlayerReadyNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerReadyNotify.uid_list)
  return uid_list_.Get(index);
}
inline void HideAndSeekPlayerReadyNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerReadyNotify.uid_list)
}
inline void HideAndSeekPlayerReadyNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HideAndSeekPlayerReadyNotify.uid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HideAndSeekPlayerReadyNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.HideAndSeekPlayerReadyNotify.uid_list)
  return uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HideAndSeekPlayerReadyNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.HideAndSeekPlayerReadyNotify.uid_list)
  return &uid_list_;
}

// -------------------------------------------------------------------

// HideAndSeekPlayerSetAvatarNotify

// uint32 avatar_id = 2;
inline void HideAndSeekPlayerSetAvatarNotify::clear_avatar_id() {
  avatar_id_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekPlayerSetAvatarNotify::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerSetAvatarNotify.avatar_id)
  return avatar_id_;
}
inline void HideAndSeekPlayerSetAvatarNotify::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerSetAvatarNotify.avatar_id)
}

// uint32 costume_id = 13;
inline void HideAndSeekPlayerSetAvatarNotify::clear_costume_id() {
  costume_id_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekPlayerSetAvatarNotify::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerSetAvatarNotify.costume_id)
  return costume_id_;
}
inline void HideAndSeekPlayerSetAvatarNotify::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerSetAvatarNotify.costume_id)
}

// uint32 uid = 5;
inline void HideAndSeekPlayerSetAvatarNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 HideAndSeekPlayerSetAvatarNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.HideAndSeekPlayerSetAvatarNotify.uid)
  return uid_;
}
inline void HideAndSeekPlayerSetAvatarNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.HideAndSeekPlayerSetAvatarNotify.uid)
}

// -------------------------------------------------------------------

// ChessCardInfo

// uint32 effect_stack = 12;
inline void ChessCardInfo::clear_effect_stack() {
  effect_stack_ = 0u;
}
inline ::google::protobuf::uint32 ChessCardInfo::effect_stack() const {
  // @@protoc_insertion_point(field_get:proto.ChessCardInfo.effect_stack)
  return effect_stack_;
}
inline void ChessCardInfo::set_effect_stack(::google::protobuf::uint32 value) {
  
  effect_stack_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessCardInfo.effect_stack)
}

// uint32 card_id = 11;
inline void ChessCardInfo::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 ChessCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessCardInfo.card_id)
  return card_id_;
}
inline void ChessCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessCardInfo.card_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InBattleChessInfo

// repeated uint32 ban_card_tag_list = 2;
inline int InBattleChessInfo::ban_card_tag_list_size() const {
  return ban_card_tag_list_.size();
}
inline void InBattleChessInfo::clear_ban_card_tag_list() {
  ban_card_tag_list_.Clear();
}
inline ::google::protobuf::uint32 InBattleChessInfo::ban_card_tag_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.ban_card_tag_list)
  return ban_card_tag_list_.Get(index);
}
inline void InBattleChessInfo::set_ban_card_tag_list(int index, ::google::protobuf::uint32 value) {
  ban_card_tag_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.ban_card_tag_list)
}
inline void InBattleChessInfo::add_ban_card_tag_list(::google::protobuf::uint32 value) {
  ban_card_tag_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleChessInfo.ban_card_tag_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleChessInfo::ban_card_tag_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleChessInfo.ban_card_tag_list)
  return ban_card_tag_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleChessInfo::mutable_ban_card_tag_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleChessInfo.ban_card_tag_list)
  return &ban_card_tag_list_;
}

// uint32 round = 4;
inline void InBattleChessInfo::clear_round() {
  round_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessInfo::round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.round)
  return round_;
}
inline void InBattleChessInfo::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.round)
}

// repeated .proto.ChessCardInfo selected_card_info_list = 9;
inline int InBattleChessInfo::selected_card_info_list_size() const {
  return selected_card_info_list_.size();
}
inline void InBattleChessInfo::clear_selected_card_info_list() {
  selected_card_info_list_.Clear();
}
inline const ::proto::ChessCardInfo& InBattleChessInfo::selected_card_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_.Get(index);
}
inline ::proto::ChessCardInfo* InBattleChessInfo::mutable_selected_card_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_.Mutable(index);
}
inline ::proto::ChessCardInfo* InBattleChessInfo::add_selected_card_info_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >*
InBattleChessInfo::mutable_selected_card_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleChessInfo.selected_card_info_list)
  return &selected_card_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >&
InBattleChessInfo::selected_card_info_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleChessInfo.selected_card_info_list)
  return selected_card_info_list_;
}

// .proto.ChessMysteryInfo mystery_info = 1;
inline bool InBattleChessInfo::has_mystery_info() const {
  return this != internal_default_instance() && mystery_info_ != NULL;
}
inline void InBattleChessInfo::clear_mystery_info() {
  if (GetArenaNoVirtual() == NULL && mystery_info_ != NULL) delete mystery_info_;
  mystery_info_ = NULL;
}
inline const ::proto::ChessMysteryInfo& InBattleChessInfo::mystery_info() const {
  const ::proto::ChessMysteryInfo* p = mystery_info_;
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.mystery_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ChessMysteryInfo*>(
      &::proto::_ChessMysteryInfo_default_instance_);
}
inline ::proto::ChessMysteryInfo* InBattleChessInfo::mutable_mystery_info() {
  
  if (mystery_info_ == NULL) {
    mystery_info_ = new ::proto::ChessMysteryInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.InBattleChessInfo.mystery_info)
  return mystery_info_;
}
inline ::proto::ChessMysteryInfo* InBattleChessInfo::release_mystery_info() {
  // @@protoc_insertion_point(field_release:proto.InBattleChessInfo.mystery_info)
  
  ::proto::ChessMysteryInfo* temp = mystery_info_;
  mystery_info_ = NULL;
  return temp;
}
inline void InBattleChessInfo::set_allocated_mystery_info(::proto::ChessMysteryInfo* mystery_info) {
  delete mystery_info_;
  mystery_info_ = mystery_info;
  if (mystery_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.InBattleChessInfo.mystery_info)
}

// map<uint32, .proto.ChessPlayerInfo> player_info_map = 8;
inline int InBattleChessInfo::player_info_map_size() const {
  return player_info_map_.size();
}
inline void InBattleChessInfo::clear_player_info_map() {
  player_info_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >&
InBattleChessInfo::player_info_map() const {
  // @@protoc_insertion_point(field_map:proto.InBattleChessInfo.player_info_map)
  return player_info_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessPlayerInfo >*
InBattleChessInfo::mutable_player_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.InBattleChessInfo.player_info_map)
  return player_info_map_.MutableMap();
}

// uint32 max_escapable_monsters = 6;
inline void InBattleChessInfo::clear_max_escapable_monsters() {
  max_escapable_monsters_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessInfo::max_escapable_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.max_escapable_monsters)
  return max_escapable_monsters_;
}
inline void InBattleChessInfo::set_max_escapable_monsters(::google::protobuf::uint32 value) {
  
  max_escapable_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.max_escapable_monsters)
}

// uint32 excaped_monsters = 12;
inline void InBattleChessInfo::clear_excaped_monsters() {
  excaped_monsters_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessInfo::excaped_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.excaped_monsters)
  return excaped_monsters_;
}
inline void InBattleChessInfo::set_excaped_monsters(::google::protobuf::uint32 value) {
  
  excaped_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.excaped_monsters)
}

// uint32 total_round = 14;
inline void InBattleChessInfo::clear_total_round() {
  total_round_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessInfo::total_round() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.total_round)
  return total_round_;
}
inline void InBattleChessInfo::set_total_round(::google::protobuf::uint32 value) {
  
  total_round_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.total_round)
}

// uint32 left_monsters = 15;
inline void InBattleChessInfo::clear_left_monsters() {
  left_monsters_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessInfo::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessInfo.left_monsters)
  return left_monsters_;
}
inline void InBattleChessInfo::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessInfo.left_monsters)
}

// -------------------------------------------------------------------

// InBattleChessSettleInfo

// bool is_success = 7;
inline void InBattleChessSettleInfo::clear_is_success() {
  is_success_ = false;
}
inline bool InBattleChessSettleInfo::is_success() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.is_success)
  return is_success_;
}
inline void InBattleChessSettleInfo::set_is_success(bool value) {
  
  is_success_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.is_success)
}

// uint32 chess_exp = 11;
inline void InBattleChessSettleInfo::clear_chess_exp() {
  chess_exp_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessSettleInfo::chess_exp() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.chess_exp)
  return chess_exp_;
}
inline void InBattleChessSettleInfo::set_chess_exp(::google::protobuf::uint32 value) {
  
  chess_exp_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.chess_exp)
}

// uint32 chess_level = 13;
inline void InBattleChessSettleInfo::clear_chess_level() {
  chess_level_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessSettleInfo::chess_level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.chess_level)
  return chess_level_;
}
inline void InBattleChessSettleInfo::set_chess_level(::google::protobuf::uint32 value) {
  
  chess_level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.chess_level)
}

// uint32 old_chess_level = 10;
inline void InBattleChessSettleInfo::clear_old_chess_level() {
  old_chess_level_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessSettleInfo::old_chess_level() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.old_chess_level)
  return old_chess_level_;
}
inline void InBattleChessSettleInfo::set_old_chess_level(::google::protobuf::uint32 value) {
  
  old_chess_level_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.old_chess_level)
}

// repeated .proto.ExhibitionDisplayInfo score_list = 1;
inline int InBattleChessSettleInfo::score_list_size() const {
  return score_list_.size();
}
inline void InBattleChessSettleInfo::clear_score_list() {
  score_list_.Clear();
}
inline const ::proto::ExhibitionDisplayInfo& InBattleChessSettleInfo::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.score_list)
  return score_list_.Get(index);
}
inline ::proto::ExhibitionDisplayInfo* InBattleChessSettleInfo::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.InBattleChessSettleInfo.score_list)
  return score_list_.Mutable(index);
}
inline ::proto::ExhibitionDisplayInfo* InBattleChessSettleInfo::add_score_list() {
  // @@protoc_insertion_point(field_add:proto.InBattleChessSettleInfo.score_list)
  return score_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
InBattleChessSettleInfo::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleChessSettleInfo.score_list)
  return &score_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
InBattleChessSettleInfo::score_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleChessSettleInfo.score_list)
  return score_list_;
}

// uint64 scene_time_ms = 14;
inline void InBattleChessSettleInfo::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleChessSettleInfo::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.scene_time_ms)
  return scene_time_ms_;
}
inline void InBattleChessSettleInfo::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.scene_time_ms)
}

// uint32 old_chess_exp = 2;
inline void InBattleChessSettleInfo::clear_old_chess_exp() {
  old_chess_exp_ = 0u;
}
inline ::google::protobuf::uint32 InBattleChessSettleInfo::old_chess_exp() const {
  // @@protoc_insertion_point(field_get:proto.InBattleChessSettleInfo.old_chess_exp)
  return old_chess_exp_;
}
inline void InBattleChessSettleInfo::set_old_chess_exp(::google::protobuf::uint32 value) {
  
  old_chess_exp_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleChessSettleInfo.old_chess_exp)
}

// -------------------------------------------------------------------

// ChessPlayerInfo

// uint32 uid = 5;
inline void ChessPlayerInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 ChessPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.uid)
  return uid_;
}
inline void ChessPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.uid)
}

// uint32 free_refresh_limit = 10;
inline void ChessPlayerInfo::clear_free_refresh_limit() {
  free_refresh_limit_ = 0u;
}
inline ::google::protobuf::uint32 ChessPlayerInfo::free_refresh_limit() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.free_refresh_limit)
  return free_refresh_limit_;
}
inline void ChessPlayerInfo::set_free_refresh_limit(::google::protobuf::uint32 value) {
  
  free_refresh_limit_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.free_refresh_limit)
}

// repeated .proto.ChessNormalCardInfo candidate_card_info_list = 3;
inline int ChessPlayerInfo::candidate_card_info_list_size() const {
  return candidate_card_info_list_.size();
}
inline void ChessPlayerInfo::clear_candidate_card_info_list() {
  candidate_card_info_list_.Clear();
}
inline const ::proto::ChessNormalCardInfo& ChessPlayerInfo::candidate_card_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_.Get(index);
}
inline ::proto::ChessNormalCardInfo* ChessPlayerInfo::mutable_candidate_card_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_.Mutable(index);
}
inline ::proto::ChessNormalCardInfo* ChessPlayerInfo::add_candidate_card_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ChessNormalCardInfo >*
ChessPlayerInfo::mutable_candidate_card_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessPlayerInfo.candidate_card_info_list)
  return &candidate_card_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ChessNormalCardInfo >&
ChessPlayerInfo::candidate_card_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessPlayerInfo.candidate_card_info_list)
  return candidate_card_info_list_;
}

// uint32 building_points = 12;
inline void ChessPlayerInfo::clear_building_points() {
  building_points_ = 0u;
}
inline ::google::protobuf::uint32 ChessPlayerInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.building_points)
  return building_points_;
}
inline void ChessPlayerInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.building_points)
}

// uint32 candidate_index = 6;
inline void ChessPlayerInfo::clear_candidate_index() {
  candidate_index_ = 0u;
}
inline ::google::protobuf::uint32 ChessPlayerInfo::candidate_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.candidate_index)
  return candidate_index_;
}
inline void ChessPlayerInfo::set_candidate_index(::google::protobuf::uint32 value) {
  
  candidate_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.candidate_index)
}

// uint32 free_refresh_count = 13;
inline void ChessPlayerInfo::clear_free_refresh_count() {
  free_refresh_count_ = 0u;
}
inline ::google::protobuf::uint32 ChessPlayerInfo::free_refresh_count() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.free_refresh_count)
  return free_refresh_count_;
}
inline void ChessPlayerInfo::set_free_refresh_count(::google::protobuf::uint32 value) {
  
  free_refresh_count_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.free_refresh_count)
}

// uint32 refresh_cost = 7;
inline void ChessPlayerInfo::clear_refresh_cost() {
  refresh_cost_ = 0u;
}
inline ::google::protobuf::uint32 ChessPlayerInfo::refresh_cost() const {
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfo.refresh_cost)
  return refresh_cost_;
}
inline void ChessPlayerInfo::set_refresh_cost(::google::protobuf::uint32 value) {
  
  refresh_cost_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPlayerInfo.refresh_cost)
}

// -------------------------------------------------------------------

// ChessMonsterInfo

// uint32 monster_id = 12;
inline void ChessMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
}
inline ::google::protobuf::uint32 ChessMonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessMonsterInfo.monster_id)
  return monster_id_;
}
inline void ChessMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessMonsterInfo.monster_id)
}

// uint32 level = 2;
inline void ChessMonsterInfo::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 ChessMonsterInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.ChessMonsterInfo.level)
  return level_;
}
inline void ChessMonsterInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessMonsterInfo.level)
}

// repeated uint32 affix_list = 13;
inline int ChessMonsterInfo::affix_list_size() const {
  return affix_list_.size();
}
inline void ChessMonsterInfo::clear_affix_list() {
  affix_list_.Clear();
}
inline ::google::protobuf::uint32 ChessMonsterInfo::affix_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessMonsterInfo.affix_list)
  return affix_list_.Get(index);
}
inline void ChessMonsterInfo::set_affix_list(int index, ::google::protobuf::uint32 value) {
  affix_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ChessMonsterInfo.affix_list)
}
inline void ChessMonsterInfo::add_affix_list(::google::protobuf::uint32 value) {
  affix_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ChessMonsterInfo.affix_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChessMonsterInfo::affix_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessMonsterInfo.affix_list)
  return affix_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChessMonsterInfo::mutable_affix_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessMonsterInfo.affix_list)
  return &affix_list_;
}

// -------------------------------------------------------------------

// ChessEntranceInfo

// repeated .proto.ChessMonsterInfo monster_info_list = 14;
inline int ChessEntranceInfo::monster_info_list_size() const {
  return monster_info_list_.size();
}
inline void ChessEntranceInfo::clear_monster_info_list() {
  monster_info_list_.Clear();
}
inline const ::proto::ChessMonsterInfo& ChessEntranceInfo::monster_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_.Get(index);
}
inline ::proto::ChessMonsterInfo* ChessEntranceInfo::mutable_monster_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_.Mutable(index);
}
inline ::proto::ChessMonsterInfo* ChessEntranceInfo::add_monster_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ChessMonsterInfo >*
ChessEntranceInfo::mutable_monster_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessEntranceInfo.monster_info_list)
  return &monster_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ChessMonsterInfo >&
ChessEntranceInfo::monster_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessEntranceInfo.monster_info_list)
  return monster_info_list_;
}

// uint32 entrance_index = 15;
inline void ChessEntranceInfo::clear_entrance_index() {
  entrance_index_ = 0u;
}
inline ::google::protobuf::uint32 ChessEntranceInfo::entrance_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceInfo.entrance_index)
  return entrance_index_;
}
inline void ChessEntranceInfo::set_entrance_index(::google::protobuf::uint32 value) {
  
  entrance_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessEntranceInfo.entrance_index)
}

// uint32 entrance_point_id = 8;
inline void ChessEntranceInfo::clear_entrance_point_id() {
  entrance_point_id_ = 0u;
}
inline ::google::protobuf::uint32 ChessEntranceInfo::entrance_point_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceInfo.entrance_point_id)
  return entrance_point_id_;
}
inline void ChessEntranceInfo::set_entrance_point_id(::google::protobuf::uint32 value) {
  
  entrance_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessEntranceInfo.entrance_point_id)
}

// -------------------------------------------------------------------

// ChessEntranceDetailInfo

// repeated .proto.ChessEntranceInfo info_list = 4;
inline int ChessEntranceDetailInfo::info_list_size() const {
  return info_list_.size();
}
inline void ChessEntranceDetailInfo::clear_info_list() {
  info_list_.Clear();
}
inline const ::proto::ChessEntranceInfo& ChessEntranceDetailInfo::info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessEntranceDetailInfo.info_list)
  return info_list_.Get(index);
}
inline ::proto::ChessEntranceInfo* ChessEntranceDetailInfo::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessEntranceDetailInfo.info_list)
  return info_list_.Mutable(index);
}
inline ::proto::ChessEntranceInfo* ChessEntranceDetailInfo::add_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessEntranceDetailInfo.info_list)
  return info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ChessEntranceInfo >*
ChessEntranceDetailInfo::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessEntranceDetailInfo.info_list)
  return &info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ChessEntranceInfo >&
ChessEntranceDetailInfo::info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessEntranceDetailInfo.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChessMysteryInfo

// map<uint32, uint32> entrance_point_map = 13;
inline int ChessMysteryInfo::entrance_point_map_size() const {
  return entrance_point_map_.size();
}
inline void ChessMysteryInfo::clear_entrance_point_map() {
  entrance_point_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
ChessMysteryInfo::entrance_point_map() const {
  // @@protoc_insertion_point(field_map:proto.ChessMysteryInfo.entrance_point_map)
  return entrance_point_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
ChessMysteryInfo::mutable_entrance_point_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ChessMysteryInfo.entrance_point_map)
  return entrance_point_map_.MutableMap();
}

// repeated uint32 exit_point_id_list = 3;
inline int ChessMysteryInfo::exit_point_id_list_size() const {
  return exit_point_id_list_.size();
}
inline void ChessMysteryInfo::clear_exit_point_id_list() {
  exit_point_id_list_.Clear();
}
inline ::google::protobuf::uint32 ChessMysteryInfo::exit_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_.Get(index);
}
inline void ChessMysteryInfo::set_exit_point_id_list(int index, ::google::protobuf::uint32 value) {
  exit_point_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ChessMysteryInfo.exit_point_id_list)
}
inline void ChessMysteryInfo::add_exit_point_id_list(::google::protobuf::uint32 value) {
  exit_point_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ChessMysteryInfo.exit_point_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChessMysteryInfo::exit_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChessMysteryInfo::mutable_exit_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessMysteryInfo.exit_point_id_list)
  return &exit_point_id_list_;
}

// map<uint32, .proto.ChessEntranceDetailInfo> detail_info_map = 5;
inline int ChessMysteryInfo::detail_info_map_size() const {
  return detail_info_map_.size();
}
inline void ChessMysteryInfo::clear_detail_info_map() {
  detail_info_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >&
ChessMysteryInfo::detail_info_map() const {
  // @@protoc_insertion_point(field_map:proto.ChessMysteryInfo.detail_info_map)
  return detail_info_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::ChessEntranceDetailInfo >*
ChessMysteryInfo::mutable_detail_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.ChessMysteryInfo.detail_info_map)
  return detail_info_map_.MutableMap();
}

// -------------------------------------------------------------------

// ChessNormalCardInfo

// uint32 card_id = 2;
inline void ChessNormalCardInfo::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 ChessNormalCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessNormalCardInfo.card_id)
  return card_id_;
}
inline void ChessNormalCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessNormalCardInfo.card_id)
}

// uint32 cost_points = 15;
inline void ChessNormalCardInfo::clear_cost_points() {
  cost_points_ = 0u;
}
inline ::google::protobuf::uint32 ChessNormalCardInfo::cost_points() const {
  // @@protoc_insertion_point(field_get:proto.ChessNormalCardInfo.cost_points)
  return cost_points_;
}
inline void ChessNormalCardInfo::set_cost_points(::google::protobuf::uint32 value) {
  
  cost_points_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessNormalCardInfo.cost_points)
}

// bool is_attach_curse = 6;
inline void ChessNormalCardInfo::clear_is_attach_curse() {
  is_attach_curse_ = false;
}
inline bool ChessNormalCardInfo::is_attach_curse() const {
  // @@protoc_insertion_point(field_get:proto.ChessNormalCardInfo.is_attach_curse)
  return is_attach_curse_;
}
inline void ChessNormalCardInfo::set_is_attach_curse(bool value) {
  
  is_attach_curse_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessNormalCardInfo.is_attach_curse)
}

// -------------------------------------------------------------------

// ChessPickCardReq

// uint32 card_id = 1;
inline void ChessPickCardReq::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 ChessPickCardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardReq.card_id)
  return card_id_;
}
inline void ChessPickCardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardReq.card_id)
}

// uint32 card_index = 4;
inline void ChessPickCardReq::clear_card_index() {
  card_index_ = 0u;
}
inline ::google::protobuf::uint32 ChessPickCardReq::card_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardReq.card_index)
  return card_index_;
}
inline void ChessPickCardReq::set_card_index(::google::protobuf::uint32 value) {
  
  card_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardReq.card_index)
}

// -------------------------------------------------------------------

// ChessPickCardRsp

// uint32 card_index = 11;
inline void ChessPickCardRsp::clear_card_index() {
  card_index_ = 0u;
}
inline ::google::protobuf::uint32 ChessPickCardRsp::card_index() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardRsp.card_index)
  return card_index_;
}
inline void ChessPickCardRsp::set_card_index(::google::protobuf::uint32 value) {
  
  card_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardRsp.card_index)
}

// uint32 card_id = 1;
inline void ChessPickCardRsp::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 ChessPickCardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardRsp.card_id)
  return card_id_;
}
inline void ChessPickCardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardRsp.card_id)
}

// int32 retcode = 4;
inline void ChessPickCardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 ChessPickCardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardRsp.retcode)
  return retcode_;
}
inline void ChessPickCardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardRsp.retcode)
}

// -------------------------------------------------------------------

// ChessPickCardNotify

// uint32 curse_card_id = 13;
inline void ChessPickCardNotify::clear_curse_card_id() {
  curse_card_id_ = 0u;
}
inline ::google::protobuf::uint32 ChessPickCardNotify::curse_card_id() const {
  // @@protoc_insertion_point(field_get:proto.ChessPickCardNotify.curse_card_id)
  return curse_card_id_;
}
inline void ChessPickCardNotify::set_curse_card_id(::google::protobuf::uint32 value) {
  
  curse_card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessPickCardNotify.curse_card_id)
}

// .proto.ChessNormalCardInfo normal_card_info = 1;
inline bool ChessPickCardNotify::has_normal_card_info() const {
  return this != internal_default_instance() && normal_card_info_ != NULL;
}
inline void ChessPickCardNotify::clear_normal_card_info() {
  if (GetArenaNoVirtual() == NULL && normal_card_info_ != NULL) delete normal_card_info_;
  normal_card_info_ = NULL;
}
inline const ::proto::ChessNormalCardInfo& ChessPickCardNotify::normal_card_info() const {
  const ::proto::ChessNormalCardInfo* p = normal_card_info_;
  // @@protoc_insertion_point(field_get:proto.ChessPickCardNotify.normal_card_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ChessNormalCardInfo*>(
      &::proto::_ChessNormalCardInfo_default_instance_);
}
inline ::proto::ChessNormalCardInfo* ChessPickCardNotify::mutable_normal_card_info() {
  
  if (normal_card_info_ == NULL) {
    normal_card_info_ = new ::proto::ChessNormalCardInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ChessPickCardNotify.normal_card_info)
  return normal_card_info_;
}
inline ::proto::ChessNormalCardInfo* ChessPickCardNotify::release_normal_card_info() {
  // @@protoc_insertion_point(field_release:proto.ChessPickCardNotify.normal_card_info)
  
  ::proto::ChessNormalCardInfo* temp = normal_card_info_;
  normal_card_info_ = NULL;
  return temp;
}
inline void ChessPickCardNotify::set_allocated_normal_card_info(::proto::ChessNormalCardInfo* normal_card_info) {
  delete normal_card_info_;
  normal_card_info_ = normal_card_info;
  if (normal_card_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ChessPickCardNotify.normal_card_info)
}

// -------------------------------------------------------------------

// ChessManualRefreshCardsReq

// -------------------------------------------------------------------

// ChessManualRefreshCardsRsp

// int32 retcode = 12;
inline void ChessManualRefreshCardsRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 ChessManualRefreshCardsRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ChessManualRefreshCardsRsp.retcode)
  return retcode_;
}
inline void ChessManualRefreshCardsRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessManualRefreshCardsRsp.retcode)
}

// -------------------------------------------------------------------

// ChessPlayerInfoNotify

// .proto.ChessPlayerInfo player_info = 10;
inline bool ChessPlayerInfoNotify::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
inline void ChessPlayerInfoNotify::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
inline const ::proto::ChessPlayerInfo& ChessPlayerInfoNotify::player_info() const {
  const ::proto::ChessPlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.ChessPlayerInfoNotify.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ChessPlayerInfo*>(
      &::proto::_ChessPlayerInfo_default_instance_);
}
inline ::proto::ChessPlayerInfo* ChessPlayerInfoNotify::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::ChessPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ChessPlayerInfoNotify.player_info)
  return player_info_;
}
inline ::proto::ChessPlayerInfo* ChessPlayerInfoNotify::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.ChessPlayerInfoNotify.player_info)
  
  ::proto::ChessPlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void ChessPlayerInfoNotify::set_allocated_player_info(::proto::ChessPlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ChessPlayerInfoNotify.player_info)
}

// -------------------------------------------------------------------

// ChessLeftMonstersNotify

// uint32 left_monsters = 6;
inline void ChessLeftMonstersNotify::clear_left_monsters() {
  left_monsters_ = 0u;
}
inline ::google::protobuf::uint32 ChessLeftMonstersNotify::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.ChessLeftMonstersNotify.left_monsters)
  return left_monsters_;
}
inline void ChessLeftMonstersNotify::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessLeftMonstersNotify.left_monsters)
}

// -------------------------------------------------------------------

// ChessEscapedMonstersNotify

// uint32 excaped_monsters = 14;
inline void ChessEscapedMonstersNotify::clear_excaped_monsters() {
  excaped_monsters_ = 0u;
}
inline ::google::protobuf::uint32 ChessEscapedMonstersNotify::excaped_monsters() const {
  // @@protoc_insertion_point(field_get:proto.ChessEscapedMonstersNotify.excaped_monsters)
  return excaped_monsters_;
}
inline void ChessEscapedMonstersNotify::set_excaped_monsters(::google::protobuf::uint32 value) {
  
  excaped_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.ChessEscapedMonstersNotify.excaped_monsters)
}

// -------------------------------------------------------------------

// ChessSelectedCardsNotify

// repeated .proto.ChessCardInfo selected_card_info_list = 4;
inline int ChessSelectedCardsNotify::selected_card_info_list_size() const {
  return selected_card_info_list_.size();
}
inline void ChessSelectedCardsNotify::clear_selected_card_info_list() {
  selected_card_info_list_.Clear();
}
inline const ::proto::ChessCardInfo& ChessSelectedCardsNotify::selected_card_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_.Get(index);
}
inline ::proto::ChessCardInfo* ChessSelectedCardsNotify::mutable_selected_card_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_.Mutable(index);
}
inline ::proto::ChessCardInfo* ChessSelectedCardsNotify::add_selected_card_info_list() {
  // @@protoc_insertion_point(field_add:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >*
ChessSelectedCardsNotify::mutable_selected_card_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return &selected_card_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ChessCardInfo >&
ChessSelectedCardsNotify::selected_card_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ChessSelectedCardsNotify.selected_card_info_list)
  return selected_card_info_list_;
}

// -------------------------------------------------------------------

// GlobalBuildingInfoNotify

// uint32 current_num = 5;
inline void GlobalBuildingInfoNotify::clear_current_num() {
  current_num_ = 0u;
}
inline ::google::protobuf::uint32 GlobalBuildingInfoNotify::current_num() const {
  // @@protoc_insertion_point(field_get:proto.GlobalBuildingInfoNotify.current_num)
  return current_num_;
}
inline void GlobalBuildingInfoNotify::set_current_num(::google::protobuf::uint32 value) {
  
  current_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GlobalBuildingInfoNotify.current_num)
}

// repeated .proto.BuildingInfo building_list = 3;
inline int GlobalBuildingInfoNotify::building_list_size() const {
  return building_list_.size();
}
inline void GlobalBuildingInfoNotify::clear_building_list() {
  building_list_.Clear();
}
inline const ::proto::BuildingInfo& GlobalBuildingInfoNotify::building_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_.Get(index);
}
inline ::proto::BuildingInfo* GlobalBuildingInfoNotify::mutable_building_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_.Mutable(index);
}
inline ::proto::BuildingInfo* GlobalBuildingInfoNotify::add_building_list() {
  // @@protoc_insertion_point(field_add:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BuildingInfo >*
GlobalBuildingInfoNotify::mutable_building_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GlobalBuildingInfoNotify.building_list)
  return &building_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BuildingInfo >&
GlobalBuildingInfoNotify::building_list() const {
  // @@protoc_insertion_point(field_list:proto.GlobalBuildingInfoNotify.building_list)
  return building_list_;
}

// uint32 max_num = 13;
inline void GlobalBuildingInfoNotify::clear_max_num() {
  max_num_ = 0u;
}
inline ::google::protobuf::uint32 GlobalBuildingInfoNotify::max_num() const {
  // @@protoc_insertion_point(field_get:proto.GlobalBuildingInfoNotify.max_num)
  return max_num_;
}
inline void GlobalBuildingInfoNotify::set_max_num(::google::protobuf::uint32 value) {
  
  max_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GlobalBuildingInfoNotify.max_num)
}

// -------------------------------------------------------------------

// InBattleIrodoriChessInfo

// .proto.IrodoriChessMysteryInfo mystery_info = 3;
inline bool InBattleIrodoriChessInfo::has_mystery_info() const {
  return this != internal_default_instance() && mystery_info_ != NULL;
}
inline void InBattleIrodoriChessInfo::clear_mystery_info() {
  if (GetArenaNoVirtual() == NULL && mystery_info_ != NULL) delete mystery_info_;
  mystery_info_ = NULL;
}
inline const ::proto::IrodoriChessMysteryInfo& InBattleIrodoriChessInfo::mystery_info() const {
  const ::proto::IrodoriChessMysteryInfo* p = mystery_info_;
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.mystery_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::IrodoriChessMysteryInfo*>(
      &::proto::_IrodoriChessMysteryInfo_default_instance_);
}
inline ::proto::IrodoriChessMysteryInfo* InBattleIrodoriChessInfo::mutable_mystery_info() {
  
  if (mystery_info_ == NULL) {
    mystery_info_ = new ::proto::IrodoriChessMysteryInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.InBattleIrodoriChessInfo.mystery_info)
  return mystery_info_;
}
inline ::proto::IrodoriChessMysteryInfo* InBattleIrodoriChessInfo::release_mystery_info() {
  // @@protoc_insertion_point(field_release:proto.InBattleIrodoriChessInfo.mystery_info)
  
  ::proto::IrodoriChessMysteryInfo* temp = mystery_info_;
  mystery_info_ = NULL;
  return temp;
}
inline void InBattleIrodoriChessInfo::set_allocated_mystery_info(::proto::IrodoriChessMysteryInfo* mystery_info) {
  delete mystery_info_;
  mystery_info_ = mystery_info;
  if (mystery_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.InBattleIrodoriChessInfo.mystery_info)
}

// uint32 left_monsters = 12;
inline void InBattleIrodoriChessInfo::clear_left_monsters() {
  left_monsters_ = 0u;
}
inline ::google::protobuf::uint32 InBattleIrodoriChessInfo::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.left_monsters)
  return left_monsters_;
}
inline void InBattleIrodoriChessInfo::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.left_monsters)
}

// repeated uint32 selected_card_id_list = 13;
inline int InBattleIrodoriChessInfo::selected_card_id_list_size() const {
  return selected_card_id_list_.size();
}
inline void InBattleIrodoriChessInfo::clear_selected_card_id_list() {
  selected_card_id_list_.Clear();
}
inline ::google::protobuf::uint32 InBattleIrodoriChessInfo::selected_card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.selected_card_id_list)
  return selected_card_id_list_.Get(index);
}
inline void InBattleIrodoriChessInfo::set_selected_card_id_list(int index, ::google::protobuf::uint32 value) {
  selected_card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.selected_card_id_list)
}
inline void InBattleIrodoriChessInfo::add_selected_card_id_list(::google::protobuf::uint32 value) {
  selected_card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.InBattleIrodoriChessInfo.selected_card_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
InBattleIrodoriChessInfo::selected_card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.InBattleIrodoriChessInfo.selected_card_id_list)
  return selected_card_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
InBattleIrodoriChessInfo::mutable_selected_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.InBattleIrodoriChessInfo.selected_card_id_list)
  return &selected_card_id_list_;
}

// uint32 building_points = 7;
inline void InBattleIrodoriChessInfo::clear_building_points() {
  building_points_ = 0u;
}
inline ::google::protobuf::uint32 InBattleIrodoriChessInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.building_points)
  return building_points_;
}
inline void InBattleIrodoriChessInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.building_points)
}

// uint32 settle_score = 4;
inline void InBattleIrodoriChessInfo::clear_settle_score() {
  settle_score_ = 0u;
}
inline ::google::protobuf::uint32 InBattleIrodoriChessInfo::settle_score() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessInfo.settle_score)
  return settle_score_;
}
inline void InBattleIrodoriChessInfo::set_settle_score(::google::protobuf::uint32 value) {
  
  settle_score_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessInfo.settle_score)
}

// -------------------------------------------------------------------

// IrodoriChessMonsterInfo

// uint32 grant_points = 6;
inline void IrodoriChessMonsterInfo::clear_grant_points() {
  grant_points_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessMonsterInfo::grant_points() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.grant_points)
  return grant_points_;
}
inline void IrodoriChessMonsterInfo::set_grant_points(::google::protobuf::uint32 value) {
  
  grant_points_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.grant_points)
}

// uint32 level = 13;
inline void IrodoriChessMonsterInfo::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessMonsterInfo::level() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.level)
  return level_;
}
inline void IrodoriChessMonsterInfo::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.level)
}

// uint32 monster_id = 14;
inline void IrodoriChessMonsterInfo::clear_monster_id() {
  monster_id_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessMonsterInfo::monster_id() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.monster_id)
  return monster_id_;
}
inline void IrodoriChessMonsterInfo::set_monster_id(::google::protobuf::uint32 value) {
  
  monster_id_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.monster_id)
}

// repeated uint32 affix_list = 11;
inline int IrodoriChessMonsterInfo::affix_list_size() const {
  return affix_list_.size();
}
inline void IrodoriChessMonsterInfo::clear_affix_list() {
  affix_list_.Clear();
}
inline ::google::protobuf::uint32 IrodoriChessMonsterInfo::affix_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMonsterInfo.affix_list)
  return affix_list_.Get(index);
}
inline void IrodoriChessMonsterInfo::set_affix_list(int index, ::google::protobuf::uint32 value) {
  affix_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMonsterInfo.affix_list)
}
inline void IrodoriChessMonsterInfo::add_affix_list(::google::protobuf::uint32 value) {
  affix_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.IrodoriChessMonsterInfo.affix_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IrodoriChessMonsterInfo::affix_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessMonsterInfo.affix_list)
  return affix_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IrodoriChessMonsterInfo::mutable_affix_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessMonsterInfo.affix_list)
  return &affix_list_;
}

// -------------------------------------------------------------------

// IrodoriChessEntranceInfo

// repeated .proto.IrodoriChessMonsterInfo monster_info_list = 6;
inline int IrodoriChessEntranceInfo::monster_info_list_size() const {
  return monster_info_list_.size();
}
inline void IrodoriChessEntranceInfo::clear_monster_info_list() {
  monster_info_list_.Clear();
}
inline const ::proto::IrodoriChessMonsterInfo& IrodoriChessEntranceInfo::monster_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_.Get(index);
}
inline ::proto::IrodoriChessMonsterInfo* IrodoriChessEntranceInfo::mutable_monster_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_.Mutable(index);
}
inline ::proto::IrodoriChessMonsterInfo* IrodoriChessEntranceInfo::add_monster_info_list() {
  // @@protoc_insertion_point(field_add:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessMonsterInfo >*
IrodoriChessEntranceInfo::mutable_monster_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessEntranceInfo.monster_info_list)
  return &monster_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessMonsterInfo >&
IrodoriChessEntranceInfo::monster_info_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessEntranceInfo.monster_info_list)
  return monster_info_list_;
}

// uint32 entrance_point_id = 4;
inline void IrodoriChessEntranceInfo::clear_entrance_point_id() {
  entrance_point_id_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessEntranceInfo::entrance_point_id() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessEntranceInfo.entrance_point_id)
  return entrance_point_id_;
}
inline void IrodoriChessEntranceInfo::set_entrance_point_id(::google::protobuf::uint32 value) {
  
  entrance_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessEntranceInfo.entrance_point_id)
}

// -------------------------------------------------------------------

// IrodoriChessEntranceDetailInfo

// repeated .proto.IrodoriChessEntranceInfo info_list = 15;
inline int IrodoriChessEntranceDetailInfo::info_list_size() const {
  return info_list_.size();
}
inline void IrodoriChessEntranceDetailInfo::clear_info_list() {
  info_list_.Clear();
}
inline const ::proto::IrodoriChessEntranceInfo& IrodoriChessEntranceDetailInfo::info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_.Get(index);
}
inline ::proto::IrodoriChessEntranceInfo* IrodoriChessEntranceDetailInfo::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_.Mutable(index);
}
inline ::proto::IrodoriChessEntranceInfo* IrodoriChessEntranceDetailInfo::add_info_list() {
  // @@protoc_insertion_point(field_add:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessEntranceInfo >*
IrodoriChessEntranceDetailInfo::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessEntranceDetailInfo.info_list)
  return &info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::IrodoriChessEntranceInfo >&
IrodoriChessEntranceDetailInfo::info_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessEntranceDetailInfo.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// IrodoriChessMysteryInfo

// .proto.IrodoriChessEntranceDetailInfo entrance_detail_info = 5;
inline bool IrodoriChessMysteryInfo::has_entrance_detail_info() const {
  return this != internal_default_instance() && entrance_detail_info_ != NULL;
}
inline void IrodoriChessMysteryInfo::clear_entrance_detail_info() {
  if (GetArenaNoVirtual() == NULL && entrance_detail_info_ != NULL) delete entrance_detail_info_;
  entrance_detail_info_ = NULL;
}
inline const ::proto::IrodoriChessEntranceDetailInfo& IrodoriChessMysteryInfo::entrance_detail_info() const {
  const ::proto::IrodoriChessEntranceDetailInfo* p = entrance_detail_info_;
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMysteryInfo.entrance_detail_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::IrodoriChessEntranceDetailInfo*>(
      &::proto::_IrodoriChessEntranceDetailInfo_default_instance_);
}
inline ::proto::IrodoriChessEntranceDetailInfo* IrodoriChessMysteryInfo::mutable_entrance_detail_info() {
  
  if (entrance_detail_info_ == NULL) {
    entrance_detail_info_ = new ::proto::IrodoriChessEntranceDetailInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessMysteryInfo.entrance_detail_info)
  return entrance_detail_info_;
}
inline ::proto::IrodoriChessEntranceDetailInfo* IrodoriChessMysteryInfo::release_entrance_detail_info() {
  // @@protoc_insertion_point(field_release:proto.IrodoriChessMysteryInfo.entrance_detail_info)
  
  ::proto::IrodoriChessEntranceDetailInfo* temp = entrance_detail_info_;
  entrance_detail_info_ = NULL;
  return temp;
}
inline void IrodoriChessMysteryInfo::set_allocated_entrance_detail_info(::proto::IrodoriChessEntranceDetailInfo* entrance_detail_info) {
  delete entrance_detail_info_;
  entrance_detail_info_ = entrance_detail_info;
  if (entrance_detail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.IrodoriChessMysteryInfo.entrance_detail_info)
}

// repeated uint32 entrance_point_id_list = 2;
inline int IrodoriChessMysteryInfo::entrance_point_id_list_size() const {
  return entrance_point_id_list_.size();
}
inline void IrodoriChessMysteryInfo::clear_entrance_point_id_list() {
  entrance_point_id_list_.Clear();
}
inline ::google::protobuf::uint32 IrodoriChessMysteryInfo::entrance_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
  return entrance_point_id_list_.Get(index);
}
inline void IrodoriChessMysteryInfo::set_entrance_point_id_list(int index, ::google::protobuf::uint32 value) {
  entrance_point_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
}
inline void IrodoriChessMysteryInfo::add_entrance_point_id_list(::google::protobuf::uint32 value) {
  entrance_point_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IrodoriChessMysteryInfo::entrance_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
  return entrance_point_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IrodoriChessMysteryInfo::mutable_entrance_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessMysteryInfo.entrance_point_id_list)
  return &entrance_point_id_list_;
}

// repeated uint32 exit_point_id_list = 13;
inline int IrodoriChessMysteryInfo::exit_point_id_list_size() const {
  return exit_point_id_list_.size();
}
inline void IrodoriChessMysteryInfo::clear_exit_point_id_list() {
  exit_point_id_list_.Clear();
}
inline ::google::protobuf::uint32 IrodoriChessMysteryInfo::exit_point_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_.Get(index);
}
inline void IrodoriChessMysteryInfo::set_exit_point_id_list(int index, ::google::protobuf::uint32 value) {
  exit_point_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.IrodoriChessMysteryInfo.exit_point_id_list)
}
inline void IrodoriChessMysteryInfo::add_exit_point_id_list(::google::protobuf::uint32 value) {
  exit_point_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.IrodoriChessMysteryInfo.exit_point_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
IrodoriChessMysteryInfo::exit_point_id_list() const {
  // @@protoc_insertion_point(field_list:proto.IrodoriChessMysteryInfo.exit_point_id_list)
  return exit_point_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
IrodoriChessMysteryInfo::mutable_exit_point_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.IrodoriChessMysteryInfo.exit_point_id_list)
  return &exit_point_id_list_;
}

// -------------------------------------------------------------------

// InBattleIrodoriChessSettleInfo

// bool is_new_record = 5;
inline void InBattleIrodoriChessSettleInfo::clear_is_new_record() {
  is_new_record_ = false;
}
inline bool InBattleIrodoriChessSettleInfo::is_new_record() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.is_new_record)
  return is_new_record_;
}
inline void InBattleIrodoriChessSettleInfo::set_is_new_record(bool value) {
  
  is_new_record_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.is_new_record)
}

// bool is_activity_end = 2;
inline void InBattleIrodoriChessSettleInfo::clear_is_activity_end() {
  is_activity_end_ = false;
}
inline bool InBattleIrodoriChessSettleInfo::is_activity_end() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.is_activity_end)
  return is_activity_end_;
}
inline void InBattleIrodoriChessSettleInfo::set_is_activity_end(bool value) {
  
  is_activity_end_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.is_activity_end)
}

// uint64 scene_time_ms = 1;
inline void InBattleIrodoriChessSettleInfo::clear_scene_time_ms() {
  scene_time_ms_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 InBattleIrodoriChessSettleInfo::scene_time_ms() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.scene_time_ms)
  return scene_time_ms_;
}
inline void InBattleIrodoriChessSettleInfo::set_scene_time_ms(::google::protobuf::uint64 value) {
  
  scene_time_ms_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.scene_time_ms)
}

// uint32 settle_score = 3;
inline void InBattleIrodoriChessSettleInfo::clear_settle_score() {
  settle_score_ = 0u;
}
inline ::google::protobuf::uint32 InBattleIrodoriChessSettleInfo::settle_score() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.settle_score)
  return settle_score_;
}
inline void InBattleIrodoriChessSettleInfo::set_settle_score(::google::protobuf::uint32 value) {
  
  settle_score_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.settle_score)
}

// bool is_perfect = 12;
inline void InBattleIrodoriChessSettleInfo::clear_is_perfect() {
  is_perfect_ = false;
}
inline bool InBattleIrodoriChessSettleInfo::is_perfect() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.is_perfect)
  return is_perfect_;
}
inline void InBattleIrodoriChessSettleInfo::set_is_perfect(bool value) {
  
  is_perfect_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.is_perfect)
}

// uint32 kill_monster_num = 7;
inline void InBattleIrodoriChessSettleInfo::clear_kill_monster_num() {
  kill_monster_num_ = 0u;
}
inline ::google::protobuf::uint32 InBattleIrodoriChessSettleInfo::kill_monster_num() const {
  // @@protoc_insertion_point(field_get:proto.InBattleIrodoriChessSettleInfo.kill_monster_num)
  return kill_monster_num_;
}
inline void InBattleIrodoriChessSettleInfo::set_kill_monster_num(::google::protobuf::uint32 value) {
  
  kill_monster_num_ = value;
  // @@protoc_insertion_point(field_set:proto.InBattleIrodoriChessSettleInfo.kill_monster_num)
}

// -------------------------------------------------------------------

// IrodoriChessPlayerInfo

// uint32 uid = 4;
inline void IrodoriChessPlayerInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessPlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfo.uid)
  return uid_;
}
inline void IrodoriChessPlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessPlayerInfo.uid)
}

// uint32 building_points = 9;
inline void IrodoriChessPlayerInfo::clear_building_points() {
  building_points_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessPlayerInfo::building_points() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfo.building_points)
  return building_points_;
}
inline void IrodoriChessPlayerInfo::set_building_points(::google::protobuf::uint32 value) {
  
  building_points_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessPlayerInfo.building_points)
}

// uint32 settle_score = 3;
inline void IrodoriChessPlayerInfo::clear_settle_score() {
  settle_score_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessPlayerInfo::settle_score() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfo.settle_score)
  return settle_score_;
}
inline void IrodoriChessPlayerInfo::set_settle_score(::google::protobuf::uint32 value) {
  
  settle_score_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessPlayerInfo.settle_score)
}

// -------------------------------------------------------------------

// IrodoriChessPlayerInfoNotify

// .proto.IrodoriChessPlayerInfo player_info = 6;
inline bool IrodoriChessPlayerInfoNotify::has_player_info() const {
  return this != internal_default_instance() && player_info_ != NULL;
}
inline void IrodoriChessPlayerInfoNotify::clear_player_info() {
  if (GetArenaNoVirtual() == NULL && player_info_ != NULL) delete player_info_;
  player_info_ = NULL;
}
inline const ::proto::IrodoriChessPlayerInfo& IrodoriChessPlayerInfoNotify::player_info() const {
  const ::proto::IrodoriChessPlayerInfo* p = player_info_;
  // @@protoc_insertion_point(field_get:proto.IrodoriChessPlayerInfoNotify.player_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::IrodoriChessPlayerInfo*>(
      &::proto::_IrodoriChessPlayerInfo_default_instance_);
}
inline ::proto::IrodoriChessPlayerInfo* IrodoriChessPlayerInfoNotify::mutable_player_info() {
  
  if (player_info_ == NULL) {
    player_info_ = new ::proto::IrodoriChessPlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.IrodoriChessPlayerInfoNotify.player_info)
  return player_info_;
}
inline ::proto::IrodoriChessPlayerInfo* IrodoriChessPlayerInfoNotify::release_player_info() {
  // @@protoc_insertion_point(field_release:proto.IrodoriChessPlayerInfoNotify.player_info)
  
  ::proto::IrodoriChessPlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
inline void IrodoriChessPlayerInfoNotify::set_allocated_player_info(::proto::IrodoriChessPlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.IrodoriChessPlayerInfoNotify.player_info)
}

// -------------------------------------------------------------------

// IrodoriChessLeftMonsterNotify

// uint32 left_monsters = 8;
inline void IrodoriChessLeftMonsterNotify::clear_left_monsters() {
  left_monsters_ = 0u;
}
inline ::google::protobuf::uint32 IrodoriChessLeftMonsterNotify::left_monsters() const {
  // @@protoc_insertion_point(field_get:proto.IrodoriChessLeftMonsterNotify.left_monsters)
  return left_monsters_;
}
inline void IrodoriChessLeftMonsterNotify::set_left_monsters(::google::protobuf::uint32 value) {
  
  left_monsters_ = value;
  // @@protoc_insertion_point(field_set:proto.IrodoriChessLeftMonsterNotify.left_monsters)
}

// -------------------------------------------------------------------

// BrickBreakerPlayerBattleInfo

// repeated uint32 skill_list = 10;
inline int BrickBreakerPlayerBattleInfo::skill_list_size() const {
  return skill_list_.size();
}
inline void BrickBreakerPlayerBattleInfo::clear_skill_list() {
  skill_list_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::skill_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.skill_list)
  return skill_list_.Get(index);
}
inline void BrickBreakerPlayerBattleInfo::set_skill_list(int index, ::google::protobuf::uint32 value) {
  skill_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.skill_list)
}
inline void BrickBreakerPlayerBattleInfo::add_skill_list(::google::protobuf::uint32 value) {
  skill_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerBattleInfo.skill_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerBattleInfo::skill_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerBattleInfo.skill_list)
  return skill_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerBattleInfo::mutable_skill_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerBattleInfo.skill_list)
  return &skill_list_;
}

// bool is_ready = 14;
inline void BrickBreakerPlayerBattleInfo::clear_is_ready() {
  is_ready_ = false;
}
inline bool BrickBreakerPlayerBattleInfo::is_ready() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.is_ready)
  return is_ready_;
}
inline void BrickBreakerPlayerBattleInfo::set_is_ready(bool value) {
  
  is_ready_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.is_ready)
}

// bool is_changing = 11;
inline void BrickBreakerPlayerBattleInfo::clear_is_changing() {
  is_changing_ = false;
}
inline bool BrickBreakerPlayerBattleInfo::is_changing() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.is_changing)
  return is_changing_;
}
inline void BrickBreakerPlayerBattleInfo::set_is_changing(bool value) {
  
  is_changing_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.is_changing)
}

// uint32 uid = 15;
inline void BrickBreakerPlayerBattleInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.uid)
  return uid_;
}
inline void BrickBreakerPlayerBattleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.uid)
}

// repeated uint32 avatar_id = 9;
inline int BrickBreakerPlayerBattleInfo::avatar_id_size() const {
  return avatar_id_.size();
}
inline void BrickBreakerPlayerBattleInfo::clear_avatar_id() {
  avatar_id_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::avatar_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.avatar_id)
  return avatar_id_.Get(index);
}
inline void BrickBreakerPlayerBattleInfo::set_avatar_id(int index, ::google::protobuf::uint32 value) {
  avatar_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.avatar_id)
}
inline void BrickBreakerPlayerBattleInfo::add_avatar_id(::google::protobuf::uint32 value) {
  avatar_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerBattleInfo.avatar_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerBattleInfo::avatar_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerBattleInfo.avatar_id)
  return avatar_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerBattleInfo::mutable_avatar_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerBattleInfo.avatar_id)
  return &avatar_id_;
}

// repeated uint32 costume_id = 13;
inline int BrickBreakerPlayerBattleInfo::costume_id_size() const {
  return costume_id_.size();
}
inline void BrickBreakerPlayerBattleInfo::clear_costume_id() {
  costume_id_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerPlayerBattleInfo::costume_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.costume_id)
  return costume_id_.Get(index);
}
inline void BrickBreakerPlayerBattleInfo::set_costume_id(int index, ::google::protobuf::uint32 value) {
  costume_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.costume_id)
}
inline void BrickBreakerPlayerBattleInfo::add_costume_id(::google::protobuf::uint32 value) {
  costume_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerBattleInfo.costume_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerBattleInfo::costume_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerBattleInfo.costume_id)
  return costume_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerBattleInfo::mutable_costume_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerBattleInfo.costume_id)
  return &costume_id_;
}

// string nickname = 3;
inline void BrickBreakerPlayerBattleInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BrickBreakerPlayerBattleInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerBattleInfo.nickname)
  return nickname_.GetNoArena();
}
inline void BrickBreakerPlayerBattleInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerBattleInfo.nickname)
}
#if LANG_CXX11
inline void BrickBreakerPlayerBattleInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BrickBreakerPlayerBattleInfo.nickname)
}
#endif
inline void BrickBreakerPlayerBattleInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BrickBreakerPlayerBattleInfo.nickname)
}
inline void BrickBreakerPlayerBattleInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BrickBreakerPlayerBattleInfo.nickname)
}
inline ::std::string* BrickBreakerPlayerBattleInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.BrickBreakerPlayerBattleInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BrickBreakerPlayerBattleInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.BrickBreakerPlayerBattleInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BrickBreakerPlayerBattleInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.BrickBreakerPlayerBattleInfo.nickname)
}

// -------------------------------------------------------------------

// BrickBreakerPlayerReadyNotify

// repeated uint32 uid_list = 14;
inline int BrickBreakerPlayerReadyNotify::uid_list_size() const {
  return uid_list_.size();
}
inline void BrickBreakerPlayerReadyNotify::clear_uid_list() {
  uid_list_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerPlayerReadyNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerReadyNotify.uid_list)
  return uid_list_.Get(index);
}
inline void BrickBreakerPlayerReadyNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerReadyNotify.uid_list)
}
inline void BrickBreakerPlayerReadyNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerReadyNotify.uid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerReadyNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerReadyNotify.uid_list)
  return uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerReadyNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerReadyNotify.uid_list)
  return &uid_list_;
}

// -------------------------------------------------------------------

// BrickBreakerPlayerSetAvatarNotify

// repeated uint32 avatar_id_list = 8;
inline int BrickBreakerPlayerSetAvatarNotify::avatar_id_list_size() const {
  return avatar_id_list_.size();
}
inline void BrickBreakerPlayerSetAvatarNotify::clear_avatar_id_list() {
  avatar_id_list_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerPlayerSetAvatarNotify::avatar_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
  return avatar_id_list_.Get(index);
}
inline void BrickBreakerPlayerSetAvatarNotify::set_avatar_id_list(int index, ::google::protobuf::uint32 value) {
  avatar_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
}
inline void BrickBreakerPlayerSetAvatarNotify::add_avatar_id_list(::google::protobuf::uint32 value) {
  avatar_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerSetAvatarNotify::avatar_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
  return avatar_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerSetAvatarNotify::mutable_avatar_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerSetAvatarNotify.avatar_id_list)
  return &avatar_id_list_;
}

// repeated uint32 costume_id_list = 11;
inline int BrickBreakerPlayerSetAvatarNotify::costume_id_list_size() const {
  return costume_id_list_.size();
}
inline void BrickBreakerPlayerSetAvatarNotify::clear_costume_id_list() {
  costume_id_list_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerPlayerSetAvatarNotify::costume_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
  return costume_id_list_.Get(index);
}
inline void BrickBreakerPlayerSetAvatarNotify::set_costume_id_list(int index, ::google::protobuf::uint32 value) {
  costume_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
}
inline void BrickBreakerPlayerSetAvatarNotify::add_costume_id_list(::google::protobuf::uint32 value) {
  costume_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerSetAvatarNotify::costume_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
  return costume_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerSetAvatarNotify::mutable_costume_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerSetAvatarNotify.costume_id_list)
  return &costume_id_list_;
}

// uint32 uid = 9;
inline void BrickBreakerPlayerSetAvatarNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 BrickBreakerPlayerSetAvatarNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetAvatarNotify.uid)
  return uid_;
}
inline void BrickBreakerPlayerSetAvatarNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetAvatarNotify.uid)
}

// -------------------------------------------------------------------

// BrickBreakerPlayerSetSkillNotify

// uint32 uid = 8;
inline void BrickBreakerPlayerSetSkillNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 BrickBreakerPlayerSetSkillNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetSkillNotify.uid)
  return uid_;
}
inline void BrickBreakerPlayerSetSkillNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetSkillNotify.uid)
}

// repeated uint32 skill_id_list = 14;
inline int BrickBreakerPlayerSetSkillNotify::skill_id_list_size() const {
  return skill_id_list_.size();
}
inline void BrickBreakerPlayerSetSkillNotify::clear_skill_id_list() {
  skill_id_list_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerPlayerSetSkillNotify::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
  return skill_id_list_.Get(index);
}
inline void BrickBreakerPlayerSetSkillNotify::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
}
inline void BrickBreakerPlayerSetSkillNotify::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerPlayerSetSkillNotify::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
  return skill_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerPlayerSetSkillNotify::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerPlayerSetSkillNotify.skill_id_list)
  return &skill_id_list_;
}

// -------------------------------------------------------------------

// BrickBreakerSetReadyReq

// -------------------------------------------------------------------

// BrickBreakerSetReadyRsp

// int32 retcode = 2;
inline void BrickBreakerSetReadyRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 BrickBreakerSetReadyRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSetReadyRsp.retcode)
  return retcode_;
}
inline void BrickBreakerSetReadyRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSetReadyRsp.retcode)
}

// -------------------------------------------------------------------

// BrickBreakerSelectAvatarReq

// repeated uint32 avatar_id = 2;
inline int BrickBreakerSelectAvatarReq::avatar_id_size() const {
  return avatar_id_.size();
}
inline void BrickBreakerSelectAvatarReq::clear_avatar_id() {
  avatar_id_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerSelectAvatarReq::avatar_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectAvatarReq.avatar_id)
  return avatar_id_.Get(index);
}
inline void BrickBreakerSelectAvatarReq::set_avatar_id(int index, ::google::protobuf::uint32 value) {
  avatar_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectAvatarReq.avatar_id)
}
inline void BrickBreakerSelectAvatarReq::add_avatar_id(::google::protobuf::uint32 value) {
  avatar_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectAvatarReq.avatar_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectAvatarReq::avatar_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectAvatarReq.avatar_id)
  return avatar_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectAvatarReq::mutable_avatar_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectAvatarReq.avatar_id)
  return &avatar_id_;
}

// -------------------------------------------------------------------

// BrickBreakerSelectAvatarRsp

// repeated uint32 avatar_id = 8;
inline int BrickBreakerSelectAvatarRsp::avatar_id_size() const {
  return avatar_id_.size();
}
inline void BrickBreakerSelectAvatarRsp::clear_avatar_id() {
  avatar_id_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerSelectAvatarRsp::avatar_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectAvatarRsp.avatar_id)
  return avatar_id_.Get(index);
}
inline void BrickBreakerSelectAvatarRsp::set_avatar_id(int index, ::google::protobuf::uint32 value) {
  avatar_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectAvatarRsp.avatar_id)
}
inline void BrickBreakerSelectAvatarRsp::add_avatar_id(::google::protobuf::uint32 value) {
  avatar_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectAvatarRsp.avatar_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectAvatarRsp::avatar_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectAvatarRsp.avatar_id)
  return avatar_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectAvatarRsp::mutable_avatar_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectAvatarRsp.avatar_id)
  return &avatar_id_;
}

// int32 retcode = 4;
inline void BrickBreakerSelectAvatarRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 BrickBreakerSelectAvatarRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectAvatarRsp.retcode)
  return retcode_;
}
inline void BrickBreakerSelectAvatarRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectAvatarRsp.retcode)
}

// -------------------------------------------------------------------

// BrickBreakerSelectSkillReq

// repeated uint32 skill_id = 6;
inline int BrickBreakerSelectSkillReq::skill_id_size() const {
  return skill_id_.size();
}
inline void BrickBreakerSelectSkillReq::clear_skill_id() {
  skill_id_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerSelectSkillReq::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectSkillReq.skill_id)
  return skill_id_.Get(index);
}
inline void BrickBreakerSelectSkillReq::set_skill_id(int index, ::google::protobuf::uint32 value) {
  skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectSkillReq.skill_id)
}
inline void BrickBreakerSelectSkillReq::add_skill_id(::google::protobuf::uint32 value) {
  skill_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectSkillReq.skill_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectSkillReq::skill_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectSkillReq.skill_id)
  return skill_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectSkillReq::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectSkillReq.skill_id)
  return &skill_id_;
}

// -------------------------------------------------------------------

// BrickBreakerSelectSkillRsp

// int32 retcode = 10;
inline void BrickBreakerSelectSkillRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 BrickBreakerSelectSkillRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectSkillRsp.retcode)
  return retcode_;
}
inline void BrickBreakerSelectSkillRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectSkillRsp.retcode)
}

// repeated uint32 skill_id = 11;
inline int BrickBreakerSelectSkillRsp::skill_id_size() const {
  return skill_id_.size();
}
inline void BrickBreakerSelectSkillRsp::clear_skill_id() {
  skill_id_.Clear();
}
inline ::google::protobuf::uint32 BrickBreakerSelectSkillRsp::skill_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSelectSkillRsp.skill_id)
  return skill_id_.Get(index);
}
inline void BrickBreakerSelectSkillRsp::set_skill_id(int index, ::google::protobuf::uint32 value) {
  skill_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSelectSkillRsp.skill_id)
}
inline void BrickBreakerSelectSkillRsp::add_skill_id(::google::protobuf::uint32 value) {
  skill_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BrickBreakerSelectSkillRsp.skill_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BrickBreakerSelectSkillRsp::skill_id() const {
  // @@protoc_insertion_point(field_list:proto.BrickBreakerSelectSkillRsp.skill_id)
  return skill_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BrickBreakerSelectSkillRsp::mutable_skill_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.BrickBreakerSelectSkillRsp.skill_id)
  return &skill_id_;
}

// -------------------------------------------------------------------

// BrickBreakerSetChangingReq

// bool is_changing = 11;
inline void BrickBreakerSetChangingReq::clear_is_changing() {
  is_changing_ = false;
}
inline bool BrickBreakerSetChangingReq::is_changing() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSetChangingReq.is_changing)
  return is_changing_;
}
inline void BrickBreakerSetChangingReq::set_is_changing(bool value) {
  
  is_changing_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSetChangingReq.is_changing)
}

// -------------------------------------------------------------------

// BrickBreakerSetChangingRsp

// int32 retcode = 2;
inline void BrickBreakerSetChangingRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 BrickBreakerSetChangingRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerSetChangingRsp.retcode)
  return retcode_;
}
inline void BrickBreakerSetChangingRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerSetChangingRsp.retcode)
}

// -------------------------------------------------------------------

// BrickBreakerPlayerSetChangingNotify

// uint32 uid = 15;
inline void BrickBreakerPlayerSetChangingNotify::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 BrickBreakerPlayerSetChangingNotify::uid() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetChangingNotify.uid)
  return uid_;
}
inline void BrickBreakerPlayerSetChangingNotify::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetChangingNotify.uid)
}

// bool is_changing = 7;
inline void BrickBreakerPlayerSetChangingNotify::clear_is_changing() {
  is_changing_ = false;
}
inline bool BrickBreakerPlayerSetChangingNotify::is_changing() const {
  // @@protoc_insertion_point(field_get:proto.BrickBreakerPlayerSetChangingNotify.is_changing)
  return is_changing_;
}
inline void BrickBreakerPlayerSetChangingNotify::set_is_changing(bool value) {
  
  is_changing_ = value;
  // @@protoc_insertion_point(field_set:proto.BrickBreakerPlayerSetChangingNotify.is_changing)
}

// -------------------------------------------------------------------

// CoinCollectTeamAvatarInfo

// uint32 costume_id = 4;
inline void CoinCollectTeamAvatarInfo::clear_costume_id() {
  costume_id_ = 0u;
}
inline ::google::protobuf::uint32 CoinCollectTeamAvatarInfo::costume_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectTeamAvatarInfo.costume_id)
  return costume_id_;
}
inline void CoinCollectTeamAvatarInfo::set_costume_id(::google::protobuf::uint32 value) {
  
  costume_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectTeamAvatarInfo.costume_id)
}

// uint32 avatar_id = 10;
inline void CoinCollectTeamAvatarInfo::clear_avatar_id() {
  avatar_id_ = 0u;
}
inline ::google::protobuf::uint32 CoinCollectTeamAvatarInfo::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectTeamAvatarInfo.avatar_id)
  return avatar_id_;
}
inline void CoinCollectTeamAvatarInfo::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectTeamAvatarInfo.avatar_id)
}

// -------------------------------------------------------------------

// CoinCollectPlayerInfo

// uint32 choose_skill_no = 5;
inline void CoinCollectPlayerInfo::clear_choose_skill_no() {
  choose_skill_no_ = 0u;
}
inline ::google::protobuf::uint32 CoinCollectPlayerInfo::choose_skill_no() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.choose_skill_no)
  return choose_skill_no_;
}
inline void CoinCollectPlayerInfo::set_choose_skill_no(::google::protobuf::uint32 value) {
  
  choose_skill_no_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.choose_skill_no)
}

// uint32 player_uid = 12;
inline void CoinCollectPlayerInfo::clear_player_uid() {
  player_uid_ = 0u;
}
inline ::google::protobuf::uint32 CoinCollectPlayerInfo::player_uid() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.player_uid)
  return player_uid_;
}
inline void CoinCollectPlayerInfo::set_player_uid(::google::protobuf::uint32 value) {
  
  player_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.player_uid)
}

// string player_name = 11;
inline void CoinCollectPlayerInfo::clear_player_name() {
  player_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CoinCollectPlayerInfo::player_name() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.player_name)
  return player_name_.GetNoArena();
}
inline void CoinCollectPlayerInfo::set_player_name(const ::std::string& value) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.player_name)
}
#if LANG_CXX11
inline void CoinCollectPlayerInfo::set_player_name(::std::string&& value) {
  
  player_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CoinCollectPlayerInfo.player_name)
}
#endif
inline void CoinCollectPlayerInfo::set_player_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CoinCollectPlayerInfo.player_name)
}
inline void CoinCollectPlayerInfo::set_player_name(const char* value, size_t size) {
  
  player_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CoinCollectPlayerInfo.player_name)
}
inline ::std::string* CoinCollectPlayerInfo::mutable_player_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectPlayerInfo.player_name)
  return player_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CoinCollectPlayerInfo::release_player_name() {
  // @@protoc_insertion_point(field_release:proto.CoinCollectPlayerInfo.player_name)
  
  return player_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CoinCollectPlayerInfo::set_allocated_player_name(::std::string* player_name) {
  if (player_name != NULL) {
    
  } else {
    
  }
  player_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), player_name);
  // @@protoc_insertion_point(field_set_allocated:proto.CoinCollectPlayerInfo.player_name)
}

// bool is_prepare = 14;
inline void CoinCollectPlayerInfo::clear_is_prepare() {
  is_prepare_ = false;
}
inline bool CoinCollectPlayerInfo::is_prepare() const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.is_prepare)
  return is_prepare_;
}
inline void CoinCollectPlayerInfo::set_is_prepare(bool value) {
  
  is_prepare_ = value;
  // @@protoc_insertion_point(field_set:proto.CoinCollectPlayerInfo.is_prepare)
}

// repeated .proto.CoinCollectTeamAvatarInfo avatar_info_list = 10;
inline int CoinCollectPlayerInfo::avatar_info_list_size() const {
  return avatar_info_list_.size();
}
inline void CoinCollectPlayerInfo::clear_avatar_info_list() {
  avatar_info_list_.Clear();
}
inline const ::proto::CoinCollectTeamAvatarInfo& CoinCollectPlayerInfo::avatar_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_.Get(index);
}
inline ::proto::CoinCollectTeamAvatarInfo* CoinCollectPlayerInfo::mutable_avatar_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_.Mutable(index);
}
inline ::proto::CoinCollectTeamAvatarInfo* CoinCollectPlayerInfo::add_avatar_info_list() {
  // @@protoc_insertion_point(field_add:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectTeamAvatarInfo >*
CoinCollectPlayerInfo::mutable_avatar_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.CoinCollectPlayerInfo.avatar_info_list)
  return &avatar_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::CoinCollectTeamAvatarInfo >&
CoinCollectPlayerInfo::avatar_info_list() const {
  // @@protoc_insertion_point(field_list:proto.CoinCollectPlayerInfo.avatar_info_list)
  return avatar_info_list_;
}

// -------------------------------------------------------------------

// CoinCollectPrepareStageNotify

// .proto.CoinCollectStageInfo coin_collect_info = 3;
inline bool CoinCollectPrepareStageNotify::has_coin_collect_info() const {
  return this != internal_default_instance() && coin_collect_info_ != NULL;
}
inline void CoinCollectPrepareStageNotify::clear_coin_collect_info() {
  if (GetArenaNoVirtual() == NULL && coin_collect_info_ != NULL) delete coin_collect_info_;
  coin_collect_info_ = NULL;
}
inline const ::proto::CoinCollectStageInfo& CoinCollectPrepareStageNotify::coin_collect_info() const {
  const ::proto::CoinCollectStageInfo* p = coin_collect_info_;
  // @@protoc_insertion_point(field_get:proto.CoinCollectPrepareStageNotify.coin_collect_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::CoinCollectStageInfo*>(
      &::proto::_CoinCollectStageInfo_default_instance_);
}
inline ::proto::CoinCollectStageInfo* CoinCollectPrepareStageNotify::mutable_coin_collect_info() {
  
  if (coin_collect_info_ == NULL) {
    coin_collect_info_ = new ::proto::CoinCollectStageInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.CoinCollectPrepareStageNotify.coin_collect_info)
  return coin_collect_info_;
}
inline ::proto::CoinCollectStageInfo* CoinCollectPrepareStageNotify::release_coin_collect_info() {
  // @@protoc_insertion_point(field_release:proto.CoinCollectPrepareStageNotify.coin_collect_info)
  
  ::proto::CoinCollectStageInfo* temp = coin_collect_info_;
  coin_collect_info_ = NULL;
  return temp;
}
inline void CoinCollectPrepareStageNotify::set_allocated_coin_collect_info(::proto::CoinCollectStageInfo* coin_collect_info) {
  delete coin_collect_info_;
  coin_collect_info_ = coin_collect_info;
  if (coin_collect_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.CoinCollectPrepareStageNotify.coin_collect_info)
}

// -------------------------------------------------------------------

// LanV3BoatSettleInfo

// uint32 uid = 8;
inline void LanV3BoatSettleInfo::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 LanV3BoatSettleInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.uid)
  return uid_;
}
inline void LanV3BoatSettleInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.uid)
}

// string online_id = 13;
inline void LanV3BoatSettleInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LanV3BoatSettleInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.online_id)
  return online_id_.GetNoArena();
}
inline void LanV3BoatSettleInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.online_id)
}
#if LANG_CXX11
inline void LanV3BoatSettleInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LanV3BoatSettleInfo.online_id)
}
#endif
inline void LanV3BoatSettleInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LanV3BoatSettleInfo.online_id)
}
inline void LanV3BoatSettleInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LanV3BoatSettleInfo.online_id)
}
inline ::std::string* LanV3BoatSettleInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LanV3BoatSettleInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.LanV3BoatSettleInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LanV3BoatSettleInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.LanV3BoatSettleInfo.online_id)
}

// uint32 head_image = 10;
inline void LanV3BoatSettleInfo::clear_head_image() {
  head_image_ = 0u;
}
inline ::google::protobuf::uint32 LanV3BoatSettleInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.head_image)
  return head_image_;
}
inline void LanV3BoatSettleInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.head_image)
}

// string nickname = 14;
inline void LanV3BoatSettleInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LanV3BoatSettleInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.nickname)
  return nickname_.GetNoArena();
}
inline void LanV3BoatSettleInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleInfo.nickname)
}
#if LANG_CXX11
inline void LanV3BoatSettleInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.LanV3BoatSettleInfo.nickname)
}
#endif
inline void LanV3BoatSettleInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.LanV3BoatSettleInfo.nickname)
}
inline void LanV3BoatSettleInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.LanV3BoatSettleInfo.nickname)
}
inline ::std::string* LanV3BoatSettleInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LanV3BoatSettleInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.LanV3BoatSettleInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LanV3BoatSettleInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.LanV3BoatSettleInfo.nickname)
}

// .proto.ProfilePicture profile_picture = 12;
inline bool LanV3BoatSettleInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
inline void LanV3BoatSettleInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
inline const ::proto::ProfilePicture& LanV3BoatSettleInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
inline ::proto::ProfilePicture* LanV3BoatSettleInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.profile_picture)
  return profile_picture_;
}
inline ::proto::ProfilePicture* LanV3BoatSettleInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.LanV3BoatSettleInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
inline void LanV3BoatSettleInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.LanV3BoatSettleInfo.profile_picture)
}

// repeated .proto.ExhibitionDisplayInfo card_list = 1;
inline int LanV3BoatSettleInfo::card_list_size() const {
  return card_list_.size();
}
inline void LanV3BoatSettleInfo::clear_card_list() {
  card_list_.Clear();
}
inline const ::proto::ExhibitionDisplayInfo& LanV3BoatSettleInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleInfo.card_list)
  return card_list_.Get(index);
}
inline ::proto::ExhibitionDisplayInfo* LanV3BoatSettleInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleInfo.card_list)
  return card_list_.Mutable(index);
}
inline ::proto::ExhibitionDisplayInfo* LanV3BoatSettleInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleInfo.card_list)
  return card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
LanV3BoatSettleInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleInfo.card_list)
  return &card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
LanV3BoatSettleInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleInfo.card_list)
  return card_list_;
}

// -------------------------------------------------------------------

// LanV3BoatSettleNotify

// bool is_gallery_succ = 10;
inline void LanV3BoatSettleNotify::clear_is_gallery_succ() {
  is_gallery_succ_ = false;
}
inline bool LanV3BoatSettleNotify::is_gallery_succ() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.is_gallery_succ)
  return is_gallery_succ_;
}
inline void LanV3BoatSettleNotify::set_is_gallery_succ(bool value) {
  
  is_gallery_succ_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.is_gallery_succ)
}

// repeated uint32 winner_uid_list = 2;
inline int LanV3BoatSettleNotify::winner_uid_list_size() const {
  return winner_uid_list_.size();
}
inline void LanV3BoatSettleNotify::clear_winner_uid_list() {
  winner_uid_list_.Clear();
}
inline ::google::protobuf::uint32 LanV3BoatSettleNotify::winner_uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.winner_uid_list)
  return winner_uid_list_.Get(index);
}
inline void LanV3BoatSettleNotify::set_winner_uid_list(int index, ::google::protobuf::uint32 value) {
  winner_uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.winner_uid_list)
}
inline void LanV3BoatSettleNotify::add_winner_uid_list(::google::protobuf::uint32 value) {
  winner_uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleNotify.winner_uid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LanV3BoatSettleNotify::winner_uid_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleNotify.winner_uid_list)
  return winner_uid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LanV3BoatSettleNotify::mutable_winner_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleNotify.winner_uid_list)
  return &winner_uid_list_;
}

// bool is_single = 8;
inline void LanV3BoatSettleNotify::clear_is_single() {
  is_single_ = false;
}
inline bool LanV3BoatSettleNotify::is_single() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.is_single)
  return is_single_;
}
inline void LanV3BoatSettleNotify::set_is_single(bool value) {
  
  is_single_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.is_single)
}

// uint32 stage_type = 12;
inline void LanV3BoatSettleNotify::clear_stage_type() {
  stage_type_ = 0u;
}
inline ::google::protobuf::uint32 LanV3BoatSettleNotify::stage_type() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.stage_type)
  return stage_type_;
}
inline void LanV3BoatSettleNotify::set_stage_type(::google::protobuf::uint32 value) {
  
  stage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.stage_type)
}

// repeated .proto.ExhibitionDisplayInfo score_list = 1;
inline int LanV3BoatSettleNotify::score_list_size() const {
  return score_list_.size();
}
inline void LanV3BoatSettleNotify::clear_score_list() {
  score_list_.Clear();
}
inline const ::proto::ExhibitionDisplayInfo& LanV3BoatSettleNotify::score_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.score_list)
  return score_list_.Get(index);
}
inline ::proto::ExhibitionDisplayInfo* LanV3BoatSettleNotify::mutable_score_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleNotify.score_list)
  return score_list_.Mutable(index);
}
inline ::proto::ExhibitionDisplayInfo* LanV3BoatSettleNotify::add_score_list() {
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleNotify.score_list)
  return score_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
LanV3BoatSettleNotify::mutable_score_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleNotify.score_list)
  return &score_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
LanV3BoatSettleNotify::score_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleNotify.score_list)
  return score_list_;
}

// repeated .proto.LanV3BoatSettleInfo settle_info_list = 13;
inline int LanV3BoatSettleNotify::settle_info_list_size() const {
  return settle_info_list_.size();
}
inline void LanV3BoatSettleNotify::clear_settle_info_list() {
  settle_info_list_.Clear();
}
inline const ::proto::LanV3BoatSettleInfo& LanV3BoatSettleNotify::settle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_.Get(index);
}
inline ::proto::LanV3BoatSettleInfo* LanV3BoatSettleNotify::mutable_settle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_.Mutable(index);
}
inline ::proto::LanV3BoatSettleInfo* LanV3BoatSettleNotify::add_settle_info_list() {
  // @@protoc_insertion_point(field_add:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::LanV3BoatSettleInfo >*
LanV3BoatSettleNotify::mutable_settle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.LanV3BoatSettleNotify.settle_info_list)
  return &settle_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::LanV3BoatSettleInfo >&
LanV3BoatSettleNotify::settle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.LanV3BoatSettleNotify.settle_info_list)
  return settle_info_list_;
}

// uint32 play_index = 4;
inline void LanV3BoatSettleNotify::clear_play_index() {
  play_index_ = 0u;
}
inline ::google::protobuf::uint32 LanV3BoatSettleNotify::play_index() const {
  // @@protoc_insertion_point(field_get:proto.LanV3BoatSettleNotify.play_index)
  return play_index_;
}
inline void LanV3BoatSettleNotify::set_play_index(::google::protobuf::uint32 value) {
  
  play_index_ = value;
  // @@protoc_insertion_point(field_set:proto.LanV3BoatSettleNotify.play_index)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::HideAndSeekSettleNotify_SettleReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HideAndSeekSettleNotify_SettleReason>() {
  return ::proto::HideAndSeekSettleNotify_SettleReason_descriptor();
}
template <> struct is_proto_enum< ::proto::MultistagePlayType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::MultistagePlayType>() {
  return ::proto::MultistagePlayType_descriptor();
}
template <> struct is_proto_enum< ::proto::InBattleMechanicusStageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::InBattleMechanicusStageType>() {
  return ::proto::InBattleMechanicusStageType_descriptor();
}
template <> struct is_proto_enum< ::proto::InBattleMechanicusCardChallengeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::InBattleMechanicusCardChallengeState>() {
  return ::proto::InBattleMechanicusCardChallengeState_descriptor();
}
template <> struct is_proto_enum< ::proto::HideAndSeekStageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::HideAndSeekStageType>() {
  return ::proto::HideAndSeekStageType_descriptor();
}
template <> struct is_proto_enum< ::proto::BrickBreakerStageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::BrickBreakerStageType>() {
  return ::proto::BrickBreakerStageType_descriptor();
}
template <> struct is_proto_enum< ::proto::LanV3BoatKickReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::LanV3BoatKickReason>() {
  return ::proto::LanV3BoatKickReason_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fmultistage_5fplay_2eproto__INCLUDED
