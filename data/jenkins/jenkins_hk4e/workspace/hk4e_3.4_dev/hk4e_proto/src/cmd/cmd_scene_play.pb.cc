// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_scene_play.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_scene_play.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class ScenePlayBattleInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleInfo>
     _instance;
} _ScenePlayBattleInfo_default_instance_;
class ScenePlayBattleInfoNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleInfoNotify>
     _instance;
} _ScenePlayBattleInfoNotify_default_instance_;
class ScenePlayOwnerCheckReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayOwnerCheckReq>
     _instance;
} _ScenePlayOwnerCheckReq_default_instance_;
class ScenePlayOwnerCheckRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayOwnerCheckRsp>
     _instance;
} _ScenePlayOwnerCheckRsp_default_instance_;
class ScenePlayOwnerStartInviteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayOwnerStartInviteReq>
     _instance;
} _ScenePlayOwnerStartInviteReq_default_instance_;
class ScenePlayOwnerStartInviteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayOwnerStartInviteRsp>
     _instance;
} _ScenePlayOwnerStartInviteRsp_default_instance_;
class ScenePlayOwnerInviteNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayOwnerInviteNotify>
     _instance;
} _ScenePlayOwnerInviteNotify_default_instance_;
class ScenePlayGuestReplyInviteReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayGuestReplyInviteReq>
     _instance;
} _ScenePlayGuestReplyInviteReq_default_instance_;
class ScenePlayGuestReplyInviteRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayGuestReplyInviteRsp>
     _instance;
} _ScenePlayGuestReplyInviteRsp_default_instance_;
class ScenePlayGuestReplyNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayGuestReplyNotify>
     _instance;
} _ScenePlayGuestReplyNotify_default_instance_;
class ScenePlayInviteResultNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayInviteResultNotify>
     _instance;
} _ScenePlayInviteResultNotify_default_instance_;
class ScenePlayInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayInfo>
     _instance;
} _ScenePlayInfo_default_instance_;
class ScenePlayInfoListNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayInfoListNotify>
     _instance;
} _ScenePlayInfoListNotify_default_instance_;
class ScenePlayBattleInterruptNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleInterruptNotify>
     _instance;
} _ScenePlayBattleInterruptNotify_default_instance_;
class ScenePlayBattleSettlePlayerInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleSettlePlayerInfo>
     _instance;
} _ScenePlayBattleSettlePlayerInfo_default_instance_;
class ScenePlayBattleSettleRewardInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleSettleRewardInfo>
     _instance;
} _ScenePlayBattleSettleRewardInfo_default_instance_;
class ScenePlayBattleResultNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleResultNotify>
     _instance;
} _ScenePlayBattleResultNotify_default_instance_;
class ScenePlayBattleUidOpNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleUidOpNotify>
     _instance;
} _ScenePlayBattleUidOpNotify_default_instance_;
class ScenePlayBattleInfoListNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayBattleInfoListNotify>
     _instance;
} _ScenePlayBattleInfoListNotify_default_instance_;
class ScenePlayOutofRegionNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ScenePlayOutofRegionNotify>
     _instance;
} _ScenePlayOutofRegionNotify_default_instance_;

namespace protobuf_cmd_2fcmd_5fscene_5fplay_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[20];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, progress_stage_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, start_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, prepare_end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfo, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfoNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfoNotify, battle_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckReq, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckReq, is_skip_match_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckRsp, param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckRsp, is_skip_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckRsp, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckRsp, wrong_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerCheckRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerStartInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerStartInviteReq, is_skip_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerStartInviteReq, play_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerStartInviteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerStartInviteRsp, is_skip_match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerStartInviteRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerStartInviteRsp, play_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerInviteNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerInviteNotify, invite_cd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerInviteNotify, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOwnerInviteNotify, is_remain_reward_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyInviteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyInviteReq, is_agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyInviteReq, play_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyInviteRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyInviteRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyInviteRsp, is_agree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyInviteRsp, play_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyNotify, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyNotify, guest_uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayGuestReplyNotify, is_agree_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInviteResultNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInviteResultNotify, is_all_argee_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInviteResultNotify, play_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInfo, entry_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInfo, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInfo, play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInfo, is_open_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInfoListNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayInfoListNotify, play_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInterruptNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInterruptNotify, interrupt_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInterruptNotify, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInterruptNotify, play_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, card_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, profile_picture_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, head_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, statistic_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, param_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, online_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettlePlayerInfo, nickname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettleRewardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettleRewardInfo, reward_item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleSettleRewardInfo, uid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleResultNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleResultNotify, is_win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleResultNotify, cost_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleResultNotify, play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleResultNotify, play_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleResultNotify, settle_player_info_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleResultNotify, settle_reward_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, param_target_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, entity_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, param_str_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, uid_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, param_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, param_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleUidOpNotify, play_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfoListNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayBattleInfoListNotify, battle_info_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOutofRegionNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScenePlayOutofRegionNotify, play_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(ScenePlayBattleInfo)},
  { 15, -1, sizeof(ScenePlayBattleInfoNotify)},
  { 21, -1, sizeof(ScenePlayOwnerCheckReq)},
  { 28, -1, sizeof(ScenePlayOwnerCheckRsp)},
  { 38, -1, sizeof(ScenePlayOwnerStartInviteReq)},
  { 45, -1, sizeof(ScenePlayOwnerStartInviteRsp)},
  { 53, -1, sizeof(ScenePlayOwnerInviteNotify)},
  { 61, -1, sizeof(ScenePlayGuestReplyInviteReq)},
  { 68, -1, sizeof(ScenePlayGuestReplyInviteRsp)},
  { 76, -1, sizeof(ScenePlayGuestReplyNotify)},
  { 84, -1, sizeof(ScenePlayInviteResultNotify)},
  { 91, -1, sizeof(ScenePlayInfo)},
  { 100, -1, sizeof(ScenePlayInfoListNotify)},
  { 106, -1, sizeof(ScenePlayBattleInterruptNotify)},
  { 114, -1, sizeof(ScenePlayBattleSettlePlayerInfo)},
  { 127, -1, sizeof(ScenePlayBattleSettleRewardInfo)},
  { 134, -1, sizeof(ScenePlayBattleResultNotify)},
  { 145, -1, sizeof(ScenePlayBattleUidOpNotify)},
  { 160, -1, sizeof(ScenePlayBattleInfoListNotify)},
  { 166, -1, sizeof(ScenePlayOutofRegionNotify)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleInfoNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayOwnerCheckReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayOwnerCheckRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayOwnerStartInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayOwnerStartInviteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayOwnerInviteNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayGuestReplyInviteReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayGuestReplyInviteRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayGuestReplyNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayInviteResultNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayInfoListNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleInterruptNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleSettlePlayerInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleSettleRewardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleResultNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleUidOpNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayBattleInfoListNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ScenePlayOutofRegionNotify_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_scene_play.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _ScenePlayBattleInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleInfo_default_instance_);_ScenePlayBattleInfoNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleInfoNotify_default_instance_);_ScenePlayOwnerCheckReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayOwnerCheckReq_default_instance_);_ScenePlayOwnerCheckRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayOwnerCheckRsp_default_instance_);_ScenePlayOwnerStartInviteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayOwnerStartInviteReq_default_instance_);_ScenePlayOwnerStartInviteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayOwnerStartInviteRsp_default_instance_);_ScenePlayOwnerInviteNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayOwnerInviteNotify_default_instance_);_ScenePlayGuestReplyInviteReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayGuestReplyInviteReq_default_instance_);_ScenePlayGuestReplyInviteRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayGuestReplyInviteRsp_default_instance_);_ScenePlayGuestReplyNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayGuestReplyNotify_default_instance_);_ScenePlayInviteResultNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayInviteResultNotify_default_instance_);_ScenePlayInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayInfo_default_instance_);_ScenePlayInfoListNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayInfoListNotify_default_instance_);_ScenePlayBattleInterruptNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleInterruptNotify_default_instance_);_ScenePlayBattleSettlePlayerInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleSettlePlayerInfo_default_instance_);_ScenePlayBattleSettleRewardInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleSettleRewardInfo_default_instance_);_ScenePlayBattleResultNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleResultNotify_default_instance_);_ScenePlayBattleUidOpNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleUidOpNotify_default_instance_);_ScenePlayBattleInfoListNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayBattleInfoListNotify_default_instance_);_ScenePlayOutofRegionNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ScenePlayOutofRegionNotify_default_instance_);_ScenePlayBattleInfoNotify_default_instance_._instance.get_mutable()->battle_info_ = const_cast< ::proto::ScenePlayBattleInfo*>(
      ::proto::ScenePlayBattleInfo::internal_default_instance());
  _ScenePlayBattleSettlePlayerInfo_default_instance_._instance.get_mutable()->profile_picture_ = const_cast< ::proto::ProfilePicture*>(
      ::proto::ProfilePicture::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030cmd/cmd_scene_play.proto\022\005proto\032\014defin"
      "e.proto\"\323\001\n\023ScenePlayBattleInfo\022\014\n\004mode\030"
      "\004 \001(\r\022\033\n\023progress_stage_list\030\003 \003(\r\022\022\n\nst"
      "art_time\030\n \001(\r\022\020\n\010duration\030\016 \001(\r\022\021\n\tplay"
      "_type\030\014 \001(\r\022\017\n\007play_id\030\001 \001(\r\022\030\n\020prepare_"
      "end_time\030\007 \001(\r\022\020\n\010progress\030\013 \001(\r\022\r\n\005stat"
      "e\030\010 \001(\r\022\014\n\004type\030\t \001(\r\"L\n\031ScenePlayBattle"
      "InfoNotify\022/\n\013battle_info\030\013 \001(\0132\032.proto."
      "ScenePlayBattleInfo\"@\n\026ScenePlayOwnerChe"
      "ckReq\022\017\n\007play_id\030\t \001(\r\022\025\n\ris_skip_match\030"
      "\006 \001(\010\"x\n\026ScenePlayOwnerCheckRsp\022\022\n\nparam"
      "_list\030\010 \003(\r\022\025\n\ris_skip_match\030\001 \001(\010\022\017\n\007pl"
      "ay_id\030\t \001(\r\022\021\n\twrong_uid\030\005 \001(\r\022\017\n\007retcod"
      "e\030\003 \001(\005\"F\n\034ScenePlayOwnerStartInviteReq\022"
      "\025\n\ris_skip_match\030\010 \001(\010\022\017\n\007play_id\030\r \001(\r\""
      "W\n\034ScenePlayOwnerStartInviteRsp\022\025\n\ris_sk"
      "ip_match\030\007 \001(\010\022\017\n\007retcode\030\017 \001(\005\022\017\n\007play_"
      "id\030\013 \001(\r\"Z\n\032ScenePlayOwnerInviteNotify\022\021"
      "\n\tinvite_cd\030\016 \001(\r\022\017\n\007play_id\030\005 \001(\r\022\030\n\020is"
      "_remain_reward\030\017 \001(\010\"A\n\034ScenePlayGuestRe"
      "plyInviteReq\022\020\n\010is_agree\030\017 \001(\010\022\017\n\007play_i"
      "d\030\006 \001(\r\"R\n\034ScenePlayGuestReplyInviteRsp\022"
      "\017\n\007retcode\030\006 \001(\005\022\020\n\010is_agree\030\002 \001(\010\022\017\n\007pl"
      "ay_id\030\010 \001(\r\"Q\n\031ScenePlayGuestReplyNotify"
      "\022\017\n\007play_id\030\r \001(\r\022\021\n\tguest_uid\030\014 \001(\r\022\020\n\010"
      "is_agree\030\003 \001(\010\"D\n\033ScenePlayInviteResultN"
      "otify\022\024\n\014is_all_argee\030\013 \001(\010\022\017\n\007play_id\030\017"
      " \001(\r\"V\n\rScenePlayInfo\022\020\n\010entry_id\030\017 \001(\r\022"
      "\017\n\007play_id\030\013 \001(\r\022\021\n\tplay_type\030\003 \001(\r\022\017\n\007i"
      "s_open\030\t \001(\010\"G\n\027ScenePlayInfoListNotify\022"
      ",\n\016play_info_list\030\006 \003(\0132\024.proto.ScenePla"
      "yInfo\"]\n\036ScenePlayBattleInterruptNotify\022"
      "\027\n\017interrupt_state\030\006 \001(\r\022\017\n\007play_id\030\005 \001("
      "\r\022\021\n\tplay_type\030\001 \001(\r\"\355\001\n\037ScenePlayBattle"
      "SettlePlayerInfo\022/\n\tcard_list\030\016 \003(\0132\034.pr"
      "oto.ExhibitionDisplayInfo\022.\n\017profile_pic"
      "ture\030\n \001(\0132\025.proto.ProfilePicture\022\022\n\nhea"
      "d_image\030\013 \001(\r\022\024\n\014statistic_id\030\004 \001(\r\022\013\n\003u"
      "id\030\001 \001(\r\022\r\n\005param\030\005 \001(\003\022\021\n\tonline_id\030\014 \001"
      "(\t\022\020\n\010nickname\030\017 \001(\t\"Z\n\037ScenePlayBattleS"
      "ettleRewardInfo\022*\n\020reward_item_list\030\004 \003("
      "\0132\020.proto.ItemParam\022\013\n\003uid\030\003 \001(\r\"\366\001\n\033Sce"
      "nePlayBattleResultNotify\022\016\n\006is_win\030\001 \001(\010"
      "\022\021\n\tcost_time\030\007 \001(\r\022\021\n\tplay_type\030\017 \001(\r\022\017"
      "\n\007play_id\030\013 \001(\r\022G\n\027settle_player_info_li"
      "st\030\004 \003(\0132&.proto.ScenePlayBattleSettlePl"
      "ayerInfo\022G\n\027settle_reward_info_list\030\016 \003("
      "\0132&.proto.ScenePlayBattleSettleRewardInf"
      "o\"\340\001\n\032ScenePlayBattleUidOpNotify\022\n\n\002op\030\007"
      " \001(\r\022\031\n\021param_target_list\030\t \003(\r\022\021\n\tentit"
      "y_id\030\002 \001(\r\022\021\n\tparam_str\030\003 \001(\t\022\020\n\010uid_lis"
      "t\030\006 \003(\r\022\023\n\013param_index\030\013 \001(\r\022\021\n\tplay_typ"
      "e\030\010 \001(\r\022\026\n\016param_duration\030\014 \001(\r\022\022\n\nparam"
      "_list\030\017 \003(\r\022\017\n\007play_id\030\005 \001(\r\"U\n\035ScenePla"
      "yBattleInfoListNotify\0224\n\020battle_info_lis"
      "t\030\014 \003(\0132\032.proto.ScenePlayBattleInfo\"-\n\032S"
      "cenePlayOutofRegionNotify\022\017\n\007play_id\030\r \001"
      "(\r*\343\001\n\024ScenePlayBattleState\022\032\n\026SCENE_PLA"
      "Y_BATTLE_NONE\020\000\022\032\n\026SCENE_PLAY_BATTLE_INI"
      "T\020\001\022\035\n\031SCENE_PLAY_BATTLE_PREPARE\020\002\022\033\n\027SC"
      "ENE_PLAY_BATTLE_READY\020\003\022\036\n\032SCENE_PLAY_BA"
      "TTLE_PRESTART\020\004\022\033\n\027SCENE_PLAY_BATTLE_STA"
      "RT\020\005\022\032\n\026SCENE_PLAY_BATTLE_STOP\020\006B(Z&gith"
      "ub.com/teyvat-helper/hk4e-proto/pbb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2562);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_scene_play.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fscene_5fplay_2eproto

const ::google::protobuf::EnumDescriptor* ScenePlayBattleState_descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_enum_descriptors[0];
}
bool ScenePlayBattleState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleInfo::kModeFieldNumber;
const int ScenePlayBattleInfo::kProgressStageListFieldNumber;
const int ScenePlayBattleInfo::kStartTimeFieldNumber;
const int ScenePlayBattleInfo::kDurationFieldNumber;
const int ScenePlayBattleInfo::kPlayTypeFieldNumber;
const int ScenePlayBattleInfo::kPlayIdFieldNumber;
const int ScenePlayBattleInfo::kPrepareEndTimeFieldNumber;
const int ScenePlayBattleInfo::kProgressFieldNumber;
const int ScenePlayBattleInfo::kStateFieldNumber;
const int ScenePlayBattleInfo::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleInfo::ScenePlayBattleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleInfo)
}
ScenePlayBattleInfo::ScenePlayBattleInfo(const ScenePlayBattleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      progress_stage_list_(from.progress_stage_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_id_, &from.play_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_type_) -
    reinterpret_cast<char*>(&play_id_)) + sizeof(play_type_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleInfo)
}

void ScenePlayBattleInfo::SharedCtor() {
  ::memset(&play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&play_id_)) + sizeof(play_type_));
  _cached_size_ = 0;
}

ScenePlayBattleInfo::~ScenePlayBattleInfo() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleInfo)
  SharedDtor();
}

void ScenePlayBattleInfo::SharedDtor() {
}

void ScenePlayBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleInfo::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleInfo& ScenePlayBattleInfo::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleInfo* ScenePlayBattleInfo::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleInfo* n = new ScenePlayBattleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  progress_stage_list_.Clear();
  ::memset(&play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&play_id_)) + sizeof(play_type_));
  _internal_metadata_.Clear();
}

bool ScenePlayBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 progress_stage_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_progress_stage_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_progress_stage_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 prepare_end_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prepare_end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 state = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 start_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 progress = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 duration = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleInfo)
  return false;
#undef DO_
}

void ScenePlayBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 1;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->play_id(), output);
  }

  // repeated uint32 progress_stage_list = 3;
  if (this->progress_stage_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _progress_stage_list_cached_byte_size_));
  }
  for (int i = 0, n = this->progress_stage_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->progress_stage_list(i), output);
  }

  // uint32 mode = 4;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mode(), output);
  }

  // uint32 prepare_end_time = 7;
  if (this->prepare_end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->prepare_end_time(), output);
  }

  // uint32 state = 8;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->state(), output);
  }

  // uint32 type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->type(), output);
  }

  // uint32 start_time = 10;
  if (this->start_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->start_time(), output);
  }

  // uint32 progress = 11;
  if (this->progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->progress(), output);
  }

  // uint32 play_type = 12;
  if (this->play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->play_type(), output);
  }

  // uint32 duration = 14;
  if (this->duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->duration(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleInfo)
}

::google::protobuf::uint8* ScenePlayBattleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 1;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->play_id(), target);
  }

  // repeated uint32 progress_stage_list = 3;
  if (this->progress_stage_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _progress_stage_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->progress_stage_list_, target);
  }

  // uint32 mode = 4;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mode(), target);
  }

  // uint32 prepare_end_time = 7;
  if (this->prepare_end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->prepare_end_time(), target);
  }

  // uint32 state = 8;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->state(), target);
  }

  // uint32 type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->type(), target);
  }

  // uint32 start_time = 10;
  if (this->start_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->start_time(), target);
  }

  // uint32 progress = 11;
  if (this->progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->progress(), target);
  }

  // uint32 play_type = 12;
  if (this->play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->play_type(), target);
  }

  // uint32 duration = 14;
  if (this->duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->duration(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleInfo)
  return target;
}

size_t ScenePlayBattleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 progress_stage_list = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->progress_stage_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _progress_stage_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 play_id = 1;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // uint32 mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  // uint32 prepare_end_time = 7;
  if (this->prepare_end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->prepare_end_time());
  }

  // uint32 state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // uint32 type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 start_time = 10;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->start_time());
  }

  // uint32 duration = 14;
  if (this->duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  // uint32 progress = 11;
  if (this->progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->progress());
  }

  // uint32 play_type = 12;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleInfo)
    MergeFrom(*source);
  }
}

void ScenePlayBattleInfo::MergeFrom(const ScenePlayBattleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  progress_stage_list_.MergeFrom(from.progress_stage_list_);
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.prepare_end_time() != 0) {
    set_prepare_end_time(from.prepare_end_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.start_time() != 0) {
    set_start_time(from.start_time());
  }
  if (from.duration() != 0) {
    set_duration(from.duration());
  }
  if (from.progress() != 0) {
    set_progress(from.progress());
  }
  if (from.play_type() != 0) {
    set_play_type(from.play_type());
  }
}

void ScenePlayBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleInfo::CopyFrom(const ScenePlayBattleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleInfo::IsInitialized() const {
  return true;
}

void ScenePlayBattleInfo::Swap(ScenePlayBattleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleInfo::InternalSwap(ScenePlayBattleInfo* other) {
  using std::swap;
  progress_stage_list_.InternalSwap(&other->progress_stage_list_);
  swap(play_id_, other->play_id_);
  swap(mode_, other->mode_);
  swap(prepare_end_time_, other->prepare_end_time_);
  swap(state_, other->state_);
  swap(type_, other->type_);
  swap(start_time_, other->start_time_);
  swap(duration_, other->duration_);
  swap(progress_, other->progress_);
  swap(play_type_, other->play_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleInfo

// uint32 mode = 4;
void ScenePlayBattleInfo::clear_mode() {
  mode_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::mode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.mode)
  return mode_;
}
void ScenePlayBattleInfo::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.mode)
}

// repeated uint32 progress_stage_list = 3;
int ScenePlayBattleInfo::progress_stage_list_size() const {
  return progress_stage_list_.size();
}
void ScenePlayBattleInfo::clear_progress_stage_list() {
  progress_stage_list_.Clear();
}
::google::protobuf::uint32 ScenePlayBattleInfo::progress_stage_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.progress_stage_list)
  return progress_stage_list_.Get(index);
}
void ScenePlayBattleInfo::set_progress_stage_list(int index, ::google::protobuf::uint32 value) {
  progress_stage_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.progress_stage_list)
}
void ScenePlayBattleInfo::add_progress_stage_list(::google::protobuf::uint32 value) {
  progress_stage_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleInfo.progress_stage_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleInfo::progress_stage_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleInfo.progress_stage_list)
  return progress_stage_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleInfo::mutable_progress_stage_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleInfo.progress_stage_list)
  return &progress_stage_list_;
}

// uint32 start_time = 10;
void ScenePlayBattleInfo::clear_start_time() {
  start_time_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::start_time() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.start_time)
  return start_time_;
}
void ScenePlayBattleInfo::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.start_time)
}

// uint32 duration = 14;
void ScenePlayBattleInfo::clear_duration() {
  duration_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::duration() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.duration)
  return duration_;
}
void ScenePlayBattleInfo::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.duration)
}

// uint32 play_type = 12;
void ScenePlayBattleInfo::clear_play_type() {
  play_type_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.play_type)
  return play_type_;
}
void ScenePlayBattleInfo::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.play_type)
}

// uint32 play_id = 1;
void ScenePlayBattleInfo::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.play_id)
  return play_id_;
}
void ScenePlayBattleInfo::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.play_id)
}

// uint32 prepare_end_time = 7;
void ScenePlayBattleInfo::clear_prepare_end_time() {
  prepare_end_time_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::prepare_end_time() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.prepare_end_time)
  return prepare_end_time_;
}
void ScenePlayBattleInfo::set_prepare_end_time(::google::protobuf::uint32 value) {
  
  prepare_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.prepare_end_time)
}

// uint32 progress = 11;
void ScenePlayBattleInfo::clear_progress() {
  progress_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::progress() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.progress)
  return progress_;
}
void ScenePlayBattleInfo::set_progress(::google::protobuf::uint32 value) {
  
  progress_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.progress)
}

// uint32 state = 8;
void ScenePlayBattleInfo::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::state() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.state)
  return state_;
}
void ScenePlayBattleInfo::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.state)
}

// uint32 type = 9;
void ScenePlayBattleInfo::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInfo::type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfo.type)
  return type_;
}
void ScenePlayBattleInfo::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInfo.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleInfoNotify::kBattleInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleInfoNotify::ScenePlayBattleInfoNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleInfoNotify)
}
ScenePlayBattleInfoNotify::ScenePlayBattleInfoNotify(const ScenePlayBattleInfoNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_battle_info()) {
    battle_info_ = new ::proto::ScenePlayBattleInfo(*from.battle_info_);
  } else {
    battle_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleInfoNotify)
}

void ScenePlayBattleInfoNotify::SharedCtor() {
  battle_info_ = NULL;
  _cached_size_ = 0;
}

ScenePlayBattleInfoNotify::~ScenePlayBattleInfoNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleInfoNotify)
  SharedDtor();
}

void ScenePlayBattleInfoNotify::SharedDtor() {
  if (this != internal_default_instance()) delete battle_info_;
}

void ScenePlayBattleInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleInfoNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleInfoNotify& ScenePlayBattleInfoNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleInfoNotify* ScenePlayBattleInfoNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleInfoNotify* n = new ScenePlayBattleInfoNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleInfoNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && battle_info_ != NULL) {
    delete battle_info_;
  }
  battle_info_ = NULL;
  _internal_metadata_.Clear();
}

bool ScenePlayBattleInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ScenePlayBattleInfo battle_info = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleInfoNotify)
  return false;
#undef DO_
}

void ScenePlayBattleInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ScenePlayBattleInfo battle_info = 11;
  if (this->has_battle_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->battle_info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleInfoNotify)
}

::google::protobuf::uint8* ScenePlayBattleInfoNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleInfoNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.ScenePlayBattleInfo battle_info = 11;
  if (this->has_battle_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->battle_info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleInfoNotify)
  return target;
}

size_t ScenePlayBattleInfoNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleInfoNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.ScenePlayBattleInfo battle_info = 11;
  if (this->has_battle_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->battle_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleInfoNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleInfoNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleInfoNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleInfoNotify)
    MergeFrom(*source);
  }
}

void ScenePlayBattleInfoNotify::MergeFrom(const ScenePlayBattleInfoNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleInfoNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_battle_info()) {
    mutable_battle_info()->::proto::ScenePlayBattleInfo::MergeFrom(from.battle_info());
  }
}

void ScenePlayBattleInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleInfoNotify::CopyFrom(const ScenePlayBattleInfoNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleInfoNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleInfoNotify::IsInitialized() const {
  return true;
}

void ScenePlayBattleInfoNotify::Swap(ScenePlayBattleInfoNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleInfoNotify::InternalSwap(ScenePlayBattleInfoNotify* other) {
  using std::swap;
  swap(battle_info_, other->battle_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleInfoNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleInfoNotify

// .proto.ScenePlayBattleInfo battle_info = 11;
bool ScenePlayBattleInfoNotify::has_battle_info() const {
  return this != internal_default_instance() && battle_info_ != NULL;
}
void ScenePlayBattleInfoNotify::clear_battle_info() {
  if (GetArenaNoVirtual() == NULL && battle_info_ != NULL) delete battle_info_;
  battle_info_ = NULL;
}
const ::proto::ScenePlayBattleInfo& ScenePlayBattleInfoNotify::battle_info() const {
  const ::proto::ScenePlayBattleInfo* p = battle_info_;
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfoNotify.battle_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ScenePlayBattleInfo*>(
      &::proto::_ScenePlayBattleInfo_default_instance_);
}
::proto::ScenePlayBattleInfo* ScenePlayBattleInfoNotify::mutable_battle_info() {
  
  if (battle_info_ == NULL) {
    battle_info_ = new ::proto::ScenePlayBattleInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleInfoNotify.battle_info)
  return battle_info_;
}
::proto::ScenePlayBattleInfo* ScenePlayBattleInfoNotify::release_battle_info() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleInfoNotify.battle_info)
  
  ::proto::ScenePlayBattleInfo* temp = battle_info_;
  battle_info_ = NULL;
  return temp;
}
void ScenePlayBattleInfoNotify::set_allocated_battle_info(::proto::ScenePlayBattleInfo* battle_info) {
  delete battle_info_;
  battle_info_ = battle_info;
  if (battle_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleInfoNotify.battle_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayOwnerCheckReq::kPlayIdFieldNumber;
const int ScenePlayOwnerCheckReq::kIsSkipMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayOwnerCheckReq::ScenePlayOwnerCheckReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayOwnerCheckReq)
}
ScenePlayOwnerCheckReq::ScenePlayOwnerCheckReq(const ScenePlayOwnerCheckReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_skip_match_, &from.is_skip_match_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_id_) -
    reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayOwnerCheckReq)
}

void ScenePlayOwnerCheckReq::SharedCtor() {
  ::memset(&is_skip_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  _cached_size_ = 0;
}

ScenePlayOwnerCheckReq::~ScenePlayOwnerCheckReq() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayOwnerCheckReq)
  SharedDtor();
}

void ScenePlayOwnerCheckReq::SharedDtor() {
}

void ScenePlayOwnerCheckReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayOwnerCheckReq::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayOwnerCheckReq& ScenePlayOwnerCheckReq::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayOwnerCheckReq* ScenePlayOwnerCheckReq::New(::google::protobuf::Arena* arena) const {
  ScenePlayOwnerCheckReq* n = new ScenePlayOwnerCheckReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayOwnerCheckReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayOwnerCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_skip_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  _internal_metadata_.Clear();
}

bool ScenePlayOwnerCheckReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayOwnerCheckReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_skip_match = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_skip_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayOwnerCheckReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayOwnerCheckReq)
  return false;
#undef DO_
}

void ScenePlayOwnerCheckReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayOwnerCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 6;
  if (this->is_skip_match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_skip_match(), output);
  }

  // uint32 play_id = 9;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayOwnerCheckReq)
}

::google::protobuf::uint8* ScenePlayOwnerCheckReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayOwnerCheckReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 6;
  if (this->is_skip_match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_skip_match(), target);
  }

  // uint32 play_id = 9;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayOwnerCheckReq)
  return target;
}

size_t ScenePlayOwnerCheckReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayOwnerCheckReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_skip_match = 6;
  if (this->is_skip_match() != 0) {
    total_size += 1 + 1;
  }

  // uint32 play_id = 9;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayOwnerCheckReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayOwnerCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayOwnerCheckReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayOwnerCheckReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayOwnerCheckReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayOwnerCheckReq)
    MergeFrom(*source);
  }
}

void ScenePlayOwnerCheckReq::MergeFrom(const ScenePlayOwnerCheckReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayOwnerCheckReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_skip_match() != 0) {
    set_is_skip_match(from.is_skip_match());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void ScenePlayOwnerCheckReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayOwnerCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayOwnerCheckReq::CopyFrom(const ScenePlayOwnerCheckReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayOwnerCheckReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayOwnerCheckReq::IsInitialized() const {
  return true;
}

void ScenePlayOwnerCheckReq::Swap(ScenePlayOwnerCheckReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayOwnerCheckReq::InternalSwap(ScenePlayOwnerCheckReq* other) {
  using std::swap;
  swap(is_skip_match_, other->is_skip_match_);
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayOwnerCheckReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayOwnerCheckReq

// uint32 play_id = 9;
void ScenePlayOwnerCheckReq::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayOwnerCheckReq::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckReq.play_id)
  return play_id_;
}
void ScenePlayOwnerCheckReq::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckReq.play_id)
}

// bool is_skip_match = 6;
void ScenePlayOwnerCheckReq::clear_is_skip_match() {
  is_skip_match_ = false;
}
bool ScenePlayOwnerCheckReq::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckReq.is_skip_match)
  return is_skip_match_;
}
void ScenePlayOwnerCheckReq::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckReq.is_skip_match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayOwnerCheckRsp::kParamListFieldNumber;
const int ScenePlayOwnerCheckRsp::kIsSkipMatchFieldNumber;
const int ScenePlayOwnerCheckRsp::kPlayIdFieldNumber;
const int ScenePlayOwnerCheckRsp::kWrongUidFieldNumber;
const int ScenePlayOwnerCheckRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayOwnerCheckRsp::ScenePlayOwnerCheckRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayOwnerCheckRsp)
}
ScenePlayOwnerCheckRsp::ScenePlayOwnerCheckRsp(const ScenePlayOwnerCheckRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_skip_match_, &from.is_skip_match_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_id_) -
    reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayOwnerCheckRsp)
}

void ScenePlayOwnerCheckRsp::SharedCtor() {
  ::memset(&is_skip_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  _cached_size_ = 0;
}

ScenePlayOwnerCheckRsp::~ScenePlayOwnerCheckRsp() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayOwnerCheckRsp)
  SharedDtor();
}

void ScenePlayOwnerCheckRsp::SharedDtor() {
}

void ScenePlayOwnerCheckRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayOwnerCheckRsp::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayOwnerCheckRsp& ScenePlayOwnerCheckRsp::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayOwnerCheckRsp* ScenePlayOwnerCheckRsp::New(::google::protobuf::Arena* arena) const {
  ScenePlayOwnerCheckRsp* n = new ScenePlayOwnerCheckRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayOwnerCheckRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayOwnerCheckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_list_.Clear();
  ::memset(&is_skip_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  _internal_metadata_.Clear();
}

bool ScenePlayOwnerCheckRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayOwnerCheckRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_skip_match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_skip_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 wrong_uid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wrong_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 param_list = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayOwnerCheckRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayOwnerCheckRsp)
  return false;
#undef DO_
}

void ScenePlayOwnerCheckRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayOwnerCheckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 1;
  if (this->is_skip_match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_skip_match(), output);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  // uint32 wrong_uid = 5;
  if (this->wrong_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->wrong_uid(), output);
  }

  // repeated uint32 param_list = 8;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_list(i), output);
  }

  // uint32 play_id = 9;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayOwnerCheckRsp)
}

::google::protobuf::uint8* ScenePlayOwnerCheckRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayOwnerCheckRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 1;
  if (this->is_skip_match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_skip_match(), target);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  // uint32 wrong_uid = 5;
  if (this->wrong_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->wrong_uid(), target);
  }

  // repeated uint32 param_list = 8;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_list_, target);
  }

  // uint32 play_id = 9;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayOwnerCheckRsp)
  return target;
}

size_t ScenePlayOwnerCheckRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayOwnerCheckRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 param_list = 8;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool is_skip_match = 1;
  if (this->is_skip_match() != 0) {
    total_size += 1 + 1;
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 wrong_uid = 5;
  if (this->wrong_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->wrong_uid());
  }

  // uint32 play_id = 9;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayOwnerCheckRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayOwnerCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayOwnerCheckRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayOwnerCheckRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayOwnerCheckRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayOwnerCheckRsp)
    MergeFrom(*source);
  }
}

void ScenePlayOwnerCheckRsp::MergeFrom(const ScenePlayOwnerCheckRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayOwnerCheckRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_list_.MergeFrom(from.param_list_);
  if (from.is_skip_match() != 0) {
    set_is_skip_match(from.is_skip_match());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.wrong_uid() != 0) {
    set_wrong_uid(from.wrong_uid());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void ScenePlayOwnerCheckRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayOwnerCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayOwnerCheckRsp::CopyFrom(const ScenePlayOwnerCheckRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayOwnerCheckRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayOwnerCheckRsp::IsInitialized() const {
  return true;
}

void ScenePlayOwnerCheckRsp::Swap(ScenePlayOwnerCheckRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayOwnerCheckRsp::InternalSwap(ScenePlayOwnerCheckRsp* other) {
  using std::swap;
  param_list_.InternalSwap(&other->param_list_);
  swap(is_skip_match_, other->is_skip_match_);
  swap(retcode_, other->retcode_);
  swap(wrong_uid_, other->wrong_uid_);
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayOwnerCheckRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayOwnerCheckRsp

// repeated uint32 param_list = 8;
int ScenePlayOwnerCheckRsp::param_list_size() const {
  return param_list_.size();
}
void ScenePlayOwnerCheckRsp::clear_param_list() {
  param_list_.Clear();
}
::google::protobuf::uint32 ScenePlayOwnerCheckRsp::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.param_list)
  return param_list_.Get(index);
}
void ScenePlayOwnerCheckRsp::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.param_list)
}
void ScenePlayOwnerCheckRsp::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayOwnerCheckRsp.param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayOwnerCheckRsp::param_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayOwnerCheckRsp.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayOwnerCheckRsp::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayOwnerCheckRsp.param_list)
  return &param_list_;
}

// bool is_skip_match = 1;
void ScenePlayOwnerCheckRsp::clear_is_skip_match() {
  is_skip_match_ = false;
}
bool ScenePlayOwnerCheckRsp::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.is_skip_match)
  return is_skip_match_;
}
void ScenePlayOwnerCheckRsp::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.is_skip_match)
}

// uint32 play_id = 9;
void ScenePlayOwnerCheckRsp::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayOwnerCheckRsp::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.play_id)
  return play_id_;
}
void ScenePlayOwnerCheckRsp::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.play_id)
}

// uint32 wrong_uid = 5;
void ScenePlayOwnerCheckRsp::clear_wrong_uid() {
  wrong_uid_ = 0u;
}
::google::protobuf::uint32 ScenePlayOwnerCheckRsp::wrong_uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.wrong_uid)
  return wrong_uid_;
}
void ScenePlayOwnerCheckRsp::set_wrong_uid(::google::protobuf::uint32 value) {
  
  wrong_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.wrong_uid)
}

// int32 retcode = 3;
void ScenePlayOwnerCheckRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ScenePlayOwnerCheckRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerCheckRsp.retcode)
  return retcode_;
}
void ScenePlayOwnerCheckRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerCheckRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayOwnerStartInviteReq::kIsSkipMatchFieldNumber;
const int ScenePlayOwnerStartInviteReq::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayOwnerStartInviteReq::ScenePlayOwnerStartInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayOwnerStartInviteReq)
}
ScenePlayOwnerStartInviteReq::ScenePlayOwnerStartInviteReq(const ScenePlayOwnerStartInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_skip_match_, &from.is_skip_match_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_id_) -
    reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayOwnerStartInviteReq)
}

void ScenePlayOwnerStartInviteReq::SharedCtor() {
  ::memset(&is_skip_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  _cached_size_ = 0;
}

ScenePlayOwnerStartInviteReq::~ScenePlayOwnerStartInviteReq() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayOwnerStartInviteReq)
  SharedDtor();
}

void ScenePlayOwnerStartInviteReq::SharedDtor() {
}

void ScenePlayOwnerStartInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayOwnerStartInviteReq::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayOwnerStartInviteReq& ScenePlayOwnerStartInviteReq::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayOwnerStartInviteReq* ScenePlayOwnerStartInviteReq::New(::google::protobuf::Arena* arena) const {
  ScenePlayOwnerStartInviteReq* n = new ScenePlayOwnerStartInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayOwnerStartInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayOwnerStartInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_skip_match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_skip_match_)) + sizeof(play_id_));
  _internal_metadata_.Clear();
}

bool ScenePlayOwnerStartInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayOwnerStartInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_skip_match = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_skip_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayOwnerStartInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayOwnerStartInviteReq)
  return false;
#undef DO_
}

void ScenePlayOwnerStartInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayOwnerStartInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 8;
  if (this->is_skip_match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_skip_match(), output);
  }

  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayOwnerStartInviteReq)
}

::google::protobuf::uint8* ScenePlayOwnerStartInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayOwnerStartInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 8;
  if (this->is_skip_match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_skip_match(), target);
  }

  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayOwnerStartInviteReq)
  return target;
}

size_t ScenePlayOwnerStartInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayOwnerStartInviteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_skip_match = 8;
  if (this->is_skip_match() != 0) {
    total_size += 1 + 1;
  }

  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayOwnerStartInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayOwnerStartInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayOwnerStartInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayOwnerStartInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayOwnerStartInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayOwnerStartInviteReq)
    MergeFrom(*source);
  }
}

void ScenePlayOwnerStartInviteReq::MergeFrom(const ScenePlayOwnerStartInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayOwnerStartInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_skip_match() != 0) {
    set_is_skip_match(from.is_skip_match());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void ScenePlayOwnerStartInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayOwnerStartInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayOwnerStartInviteReq::CopyFrom(const ScenePlayOwnerStartInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayOwnerStartInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayOwnerStartInviteReq::IsInitialized() const {
  return true;
}

void ScenePlayOwnerStartInviteReq::Swap(ScenePlayOwnerStartInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayOwnerStartInviteReq::InternalSwap(ScenePlayOwnerStartInviteReq* other) {
  using std::swap;
  swap(is_skip_match_, other->is_skip_match_);
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayOwnerStartInviteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayOwnerStartInviteReq

// bool is_skip_match = 8;
void ScenePlayOwnerStartInviteReq::clear_is_skip_match() {
  is_skip_match_ = false;
}
bool ScenePlayOwnerStartInviteReq::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteReq.is_skip_match)
  return is_skip_match_;
}
void ScenePlayOwnerStartInviteReq::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteReq.is_skip_match)
}

// uint32 play_id = 13;
void ScenePlayOwnerStartInviteReq::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayOwnerStartInviteReq::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteReq.play_id)
  return play_id_;
}
void ScenePlayOwnerStartInviteReq::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteReq.play_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayOwnerStartInviteRsp::kIsSkipMatchFieldNumber;
const int ScenePlayOwnerStartInviteRsp::kRetcodeFieldNumber;
const int ScenePlayOwnerStartInviteRsp::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayOwnerStartInviteRsp::ScenePlayOwnerStartInviteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayOwnerStartInviteRsp)
}
ScenePlayOwnerStartInviteRsp::ScenePlayOwnerStartInviteRsp(const ScenePlayOwnerStartInviteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(play_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayOwnerStartInviteRsp)
}

void ScenePlayOwnerStartInviteRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(play_id_));
  _cached_size_ = 0;
}

ScenePlayOwnerStartInviteRsp::~ScenePlayOwnerStartInviteRsp() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayOwnerStartInviteRsp)
  SharedDtor();
}

void ScenePlayOwnerStartInviteRsp::SharedDtor() {
}

void ScenePlayOwnerStartInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayOwnerStartInviteRsp::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayOwnerStartInviteRsp& ScenePlayOwnerStartInviteRsp::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayOwnerStartInviteRsp* ScenePlayOwnerStartInviteRsp::New(::google::protobuf::Arena* arena) const {
  ScenePlayOwnerStartInviteRsp* n = new ScenePlayOwnerStartInviteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayOwnerStartInviteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayOwnerStartInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(play_id_));
  _internal_metadata_.Clear();
}

bool ScenePlayOwnerStartInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayOwnerStartInviteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_skip_match = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_skip_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayOwnerStartInviteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayOwnerStartInviteRsp)
  return false;
#undef DO_
}

void ScenePlayOwnerStartInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayOwnerStartInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 7;
  if (this->is_skip_match() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_skip_match(), output);
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->play_id(), output);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayOwnerStartInviteRsp)
}

::google::protobuf::uint8* ScenePlayOwnerStartInviteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayOwnerStartInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_skip_match = 7;
  if (this->is_skip_match() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_skip_match(), target);
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->play_id(), target);
  }

  // int32 retcode = 15;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayOwnerStartInviteRsp)
  return target;
}

size_t ScenePlayOwnerStartInviteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayOwnerStartInviteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 15;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // bool is_skip_match = 7;
  if (this->is_skip_match() != 0) {
    total_size += 1 + 1;
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayOwnerStartInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayOwnerStartInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayOwnerStartInviteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayOwnerStartInviteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayOwnerStartInviteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayOwnerStartInviteRsp)
    MergeFrom(*source);
  }
}

void ScenePlayOwnerStartInviteRsp::MergeFrom(const ScenePlayOwnerStartInviteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayOwnerStartInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.is_skip_match() != 0) {
    set_is_skip_match(from.is_skip_match());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void ScenePlayOwnerStartInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayOwnerStartInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayOwnerStartInviteRsp::CopyFrom(const ScenePlayOwnerStartInviteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayOwnerStartInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayOwnerStartInviteRsp::IsInitialized() const {
  return true;
}

void ScenePlayOwnerStartInviteRsp::Swap(ScenePlayOwnerStartInviteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayOwnerStartInviteRsp::InternalSwap(ScenePlayOwnerStartInviteRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(is_skip_match_, other->is_skip_match_);
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayOwnerStartInviteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayOwnerStartInviteRsp

// bool is_skip_match = 7;
void ScenePlayOwnerStartInviteRsp::clear_is_skip_match() {
  is_skip_match_ = false;
}
bool ScenePlayOwnerStartInviteRsp::is_skip_match() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteRsp.is_skip_match)
  return is_skip_match_;
}
void ScenePlayOwnerStartInviteRsp::set_is_skip_match(bool value) {
  
  is_skip_match_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteRsp.is_skip_match)
}

// int32 retcode = 15;
void ScenePlayOwnerStartInviteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ScenePlayOwnerStartInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteRsp.retcode)
  return retcode_;
}
void ScenePlayOwnerStartInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteRsp.retcode)
}

// uint32 play_id = 11;
void ScenePlayOwnerStartInviteRsp::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayOwnerStartInviteRsp::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerStartInviteRsp.play_id)
  return play_id_;
}
void ScenePlayOwnerStartInviteRsp::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerStartInviteRsp.play_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayOwnerInviteNotify::kInviteCdFieldNumber;
const int ScenePlayOwnerInviteNotify::kPlayIdFieldNumber;
const int ScenePlayOwnerInviteNotify::kIsRemainRewardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayOwnerInviteNotify::ScenePlayOwnerInviteNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayOwnerInviteNotify)
}
ScenePlayOwnerInviteNotify::ScenePlayOwnerInviteNotify(const ScenePlayOwnerInviteNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_remain_reward_, &from.is_remain_reward_,
    static_cast<size_t>(reinterpret_cast<char*>(&invite_cd_) -
    reinterpret_cast<char*>(&is_remain_reward_)) + sizeof(invite_cd_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayOwnerInviteNotify)
}

void ScenePlayOwnerInviteNotify::SharedCtor() {
  ::memset(&is_remain_reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_cd_) -
      reinterpret_cast<char*>(&is_remain_reward_)) + sizeof(invite_cd_));
  _cached_size_ = 0;
}

ScenePlayOwnerInviteNotify::~ScenePlayOwnerInviteNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayOwnerInviteNotify)
  SharedDtor();
}

void ScenePlayOwnerInviteNotify::SharedDtor() {
}

void ScenePlayOwnerInviteNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayOwnerInviteNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayOwnerInviteNotify& ScenePlayOwnerInviteNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayOwnerInviteNotify* ScenePlayOwnerInviteNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayOwnerInviteNotify* n = new ScenePlayOwnerInviteNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayOwnerInviteNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayOwnerInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_remain_reward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&invite_cd_) -
      reinterpret_cast<char*>(&is_remain_reward_)) + sizeof(invite_cd_));
  _internal_metadata_.Clear();
}

bool ScenePlayOwnerInviteNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayOwnerInviteNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 invite_cd = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_cd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_remain_reward = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_remain_reward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayOwnerInviteNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayOwnerInviteNotify)
  return false;
#undef DO_
}

void ScenePlayOwnerInviteNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayOwnerInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->play_id(), output);
  }

  // uint32 invite_cd = 14;
  if (this->invite_cd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->invite_cd(), output);
  }

  // bool is_remain_reward = 15;
  if (this->is_remain_reward() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_remain_reward(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayOwnerInviteNotify)
}

::google::protobuf::uint8* ScenePlayOwnerInviteNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayOwnerInviteNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->play_id(), target);
  }

  // uint32 invite_cd = 14;
  if (this->invite_cd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->invite_cd(), target);
  }

  // bool is_remain_reward = 15;
  if (this->is_remain_reward() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_remain_reward(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayOwnerInviteNotify)
  return target;
}

size_t ScenePlayOwnerInviteNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayOwnerInviteNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_remain_reward = 15;
  if (this->is_remain_reward() != 0) {
    total_size += 1 + 1;
  }

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // uint32 invite_cd = 14;
  if (this->invite_cd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->invite_cd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayOwnerInviteNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayOwnerInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayOwnerInviteNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayOwnerInviteNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayOwnerInviteNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayOwnerInviteNotify)
    MergeFrom(*source);
  }
}

void ScenePlayOwnerInviteNotify::MergeFrom(const ScenePlayOwnerInviteNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayOwnerInviteNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_remain_reward() != 0) {
    set_is_remain_reward(from.is_remain_reward());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.invite_cd() != 0) {
    set_invite_cd(from.invite_cd());
  }
}

void ScenePlayOwnerInviteNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayOwnerInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayOwnerInviteNotify::CopyFrom(const ScenePlayOwnerInviteNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayOwnerInviteNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayOwnerInviteNotify::IsInitialized() const {
  return true;
}

void ScenePlayOwnerInviteNotify::Swap(ScenePlayOwnerInviteNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayOwnerInviteNotify::InternalSwap(ScenePlayOwnerInviteNotify* other) {
  using std::swap;
  swap(is_remain_reward_, other->is_remain_reward_);
  swap(play_id_, other->play_id_);
  swap(invite_cd_, other->invite_cd_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayOwnerInviteNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayOwnerInviteNotify

// uint32 invite_cd = 14;
void ScenePlayOwnerInviteNotify::clear_invite_cd() {
  invite_cd_ = 0u;
}
::google::protobuf::uint32 ScenePlayOwnerInviteNotify::invite_cd() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerInviteNotify.invite_cd)
  return invite_cd_;
}
void ScenePlayOwnerInviteNotify::set_invite_cd(::google::protobuf::uint32 value) {
  
  invite_cd_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerInviteNotify.invite_cd)
}

// uint32 play_id = 5;
void ScenePlayOwnerInviteNotify::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayOwnerInviteNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerInviteNotify.play_id)
  return play_id_;
}
void ScenePlayOwnerInviteNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerInviteNotify.play_id)
}

// bool is_remain_reward = 15;
void ScenePlayOwnerInviteNotify::clear_is_remain_reward() {
  is_remain_reward_ = false;
}
bool ScenePlayOwnerInviteNotify::is_remain_reward() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOwnerInviteNotify.is_remain_reward)
  return is_remain_reward_;
}
void ScenePlayOwnerInviteNotify::set_is_remain_reward(bool value) {
  
  is_remain_reward_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOwnerInviteNotify.is_remain_reward)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayGuestReplyInviteReq::kIsAgreeFieldNumber;
const int ScenePlayGuestReplyInviteReq::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayGuestReplyInviteReq::ScenePlayGuestReplyInviteReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayGuestReplyInviteReq)
}
ScenePlayGuestReplyInviteReq::ScenePlayGuestReplyInviteReq(const ScenePlayGuestReplyInviteReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_id_, &from.play_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_agree_) -
    reinterpret_cast<char*>(&play_id_)) + sizeof(is_agree_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayGuestReplyInviteReq)
}

void ScenePlayGuestReplyInviteReq::SharedCtor() {
  ::memset(&play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_agree_) -
      reinterpret_cast<char*>(&play_id_)) + sizeof(is_agree_));
  _cached_size_ = 0;
}

ScenePlayGuestReplyInviteReq::~ScenePlayGuestReplyInviteReq() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayGuestReplyInviteReq)
  SharedDtor();
}

void ScenePlayGuestReplyInviteReq::SharedDtor() {
}

void ScenePlayGuestReplyInviteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayGuestReplyInviteReq::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayGuestReplyInviteReq& ScenePlayGuestReplyInviteReq::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayGuestReplyInviteReq* ScenePlayGuestReplyInviteReq::New(::google::protobuf::Arena* arena) const {
  ScenePlayGuestReplyInviteReq* n = new ScenePlayGuestReplyInviteReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayGuestReplyInviteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayGuestReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_agree_) -
      reinterpret_cast<char*>(&play_id_)) + sizeof(is_agree_));
  _internal_metadata_.Clear();
}

bool ScenePlayGuestReplyInviteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayGuestReplyInviteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_agree = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayGuestReplyInviteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayGuestReplyInviteReq)
  return false;
#undef DO_
}

void ScenePlayGuestReplyInviteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayGuestReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 6;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->play_id(), output);
  }

  // bool is_agree = 15;
  if (this->is_agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_agree(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayGuestReplyInviteReq)
}

::google::protobuf::uint8* ScenePlayGuestReplyInviteReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayGuestReplyInviteReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 6;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->play_id(), target);
  }

  // bool is_agree = 15;
  if (this->is_agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_agree(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayGuestReplyInviteReq)
  return target;
}

size_t ScenePlayGuestReplyInviteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayGuestReplyInviteReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_id = 6;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // bool is_agree = 15;
  if (this->is_agree() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayGuestReplyInviteReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayGuestReplyInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayGuestReplyInviteReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayGuestReplyInviteReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayGuestReplyInviteReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayGuestReplyInviteReq)
    MergeFrom(*source);
  }
}

void ScenePlayGuestReplyInviteReq::MergeFrom(const ScenePlayGuestReplyInviteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayGuestReplyInviteReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.is_agree() != 0) {
    set_is_agree(from.is_agree());
  }
}

void ScenePlayGuestReplyInviteReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayGuestReplyInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayGuestReplyInviteReq::CopyFrom(const ScenePlayGuestReplyInviteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayGuestReplyInviteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayGuestReplyInviteReq::IsInitialized() const {
  return true;
}

void ScenePlayGuestReplyInviteReq::Swap(ScenePlayGuestReplyInviteReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayGuestReplyInviteReq::InternalSwap(ScenePlayGuestReplyInviteReq* other) {
  using std::swap;
  swap(play_id_, other->play_id_);
  swap(is_agree_, other->is_agree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayGuestReplyInviteReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayGuestReplyInviteReq

// bool is_agree = 15;
void ScenePlayGuestReplyInviteReq::clear_is_agree() {
  is_agree_ = false;
}
bool ScenePlayGuestReplyInviteReq::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteReq.is_agree)
  return is_agree_;
}
void ScenePlayGuestReplyInviteReq::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteReq.is_agree)
}

// uint32 play_id = 6;
void ScenePlayGuestReplyInviteReq::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayGuestReplyInviteReq::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteReq.play_id)
  return play_id_;
}
void ScenePlayGuestReplyInviteReq::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteReq.play_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayGuestReplyInviteRsp::kRetcodeFieldNumber;
const int ScenePlayGuestReplyInviteRsp::kIsAgreeFieldNumber;
const int ScenePlayGuestReplyInviteRsp::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayGuestReplyInviteRsp::ScenePlayGuestReplyInviteRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayGuestReplyInviteRsp)
}
ScenePlayGuestReplyInviteRsp::ScenePlayGuestReplyInviteRsp(const ScenePlayGuestReplyInviteRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_agree_, &from.is_agree_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_id_) -
    reinterpret_cast<char*>(&is_agree_)) + sizeof(play_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayGuestReplyInviteRsp)
}

void ScenePlayGuestReplyInviteRsp::SharedCtor() {
  ::memset(&is_agree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_agree_)) + sizeof(play_id_));
  _cached_size_ = 0;
}

ScenePlayGuestReplyInviteRsp::~ScenePlayGuestReplyInviteRsp() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayGuestReplyInviteRsp)
  SharedDtor();
}

void ScenePlayGuestReplyInviteRsp::SharedDtor() {
}

void ScenePlayGuestReplyInviteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayGuestReplyInviteRsp::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayGuestReplyInviteRsp& ScenePlayGuestReplyInviteRsp::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayGuestReplyInviteRsp* ScenePlayGuestReplyInviteRsp::New(::google::protobuf::Arena* arena) const {
  ScenePlayGuestReplyInviteRsp* n = new ScenePlayGuestReplyInviteRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayGuestReplyInviteRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayGuestReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_agree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_agree_)) + sizeof(play_id_));
  _internal_metadata_.Clear();
}

bool ScenePlayGuestReplyInviteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayGuestReplyInviteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_agree = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayGuestReplyInviteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayGuestReplyInviteRsp)
  return false;
#undef DO_
}

void ScenePlayGuestReplyInviteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayGuestReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_agree = 2;
  if (this->is_agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_agree(), output);
  }

  // int32 retcode = 6;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->retcode(), output);
  }

  // uint32 play_id = 8;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayGuestReplyInviteRsp)
}

::google::protobuf::uint8* ScenePlayGuestReplyInviteRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayGuestReplyInviteRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_agree = 2;
  if (this->is_agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_agree(), target);
  }

  // int32 retcode = 6;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->retcode(), target);
  }

  // uint32 play_id = 8;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayGuestReplyInviteRsp)
  return target;
}

size_t ScenePlayGuestReplyInviteRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayGuestReplyInviteRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_agree = 2;
  if (this->is_agree() != 0) {
    total_size += 1 + 1;
  }

  // int32 retcode = 6;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 play_id = 8;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayGuestReplyInviteRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayGuestReplyInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayGuestReplyInviteRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayGuestReplyInviteRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayGuestReplyInviteRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayGuestReplyInviteRsp)
    MergeFrom(*source);
  }
}

void ScenePlayGuestReplyInviteRsp::MergeFrom(const ScenePlayGuestReplyInviteRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayGuestReplyInviteRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_agree() != 0) {
    set_is_agree(from.is_agree());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void ScenePlayGuestReplyInviteRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayGuestReplyInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayGuestReplyInviteRsp::CopyFrom(const ScenePlayGuestReplyInviteRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayGuestReplyInviteRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayGuestReplyInviteRsp::IsInitialized() const {
  return true;
}

void ScenePlayGuestReplyInviteRsp::Swap(ScenePlayGuestReplyInviteRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayGuestReplyInviteRsp::InternalSwap(ScenePlayGuestReplyInviteRsp* other) {
  using std::swap;
  swap(is_agree_, other->is_agree_);
  swap(retcode_, other->retcode_);
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayGuestReplyInviteRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayGuestReplyInviteRsp

// int32 retcode = 6;
void ScenePlayGuestReplyInviteRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 ScenePlayGuestReplyInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteRsp.retcode)
  return retcode_;
}
void ScenePlayGuestReplyInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteRsp.retcode)
}

// bool is_agree = 2;
void ScenePlayGuestReplyInviteRsp::clear_is_agree() {
  is_agree_ = false;
}
bool ScenePlayGuestReplyInviteRsp::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteRsp.is_agree)
  return is_agree_;
}
void ScenePlayGuestReplyInviteRsp::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteRsp.is_agree)
}

// uint32 play_id = 8;
void ScenePlayGuestReplyInviteRsp::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayGuestReplyInviteRsp::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyInviteRsp.play_id)
  return play_id_;
}
void ScenePlayGuestReplyInviteRsp::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyInviteRsp.play_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayGuestReplyNotify::kPlayIdFieldNumber;
const int ScenePlayGuestReplyNotify::kGuestUidFieldNumber;
const int ScenePlayGuestReplyNotify::kIsAgreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayGuestReplyNotify::ScenePlayGuestReplyNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayGuestReplyNotify)
}
ScenePlayGuestReplyNotify::ScenePlayGuestReplyNotify(const ScenePlayGuestReplyNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_id_, &from.play_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&guest_uid_) -
    reinterpret_cast<char*>(&play_id_)) + sizeof(guest_uid_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayGuestReplyNotify)
}

void ScenePlayGuestReplyNotify::SharedCtor() {
  ::memset(&play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guest_uid_) -
      reinterpret_cast<char*>(&play_id_)) + sizeof(guest_uid_));
  _cached_size_ = 0;
}

ScenePlayGuestReplyNotify::~ScenePlayGuestReplyNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayGuestReplyNotify)
  SharedDtor();
}

void ScenePlayGuestReplyNotify::SharedDtor() {
}

void ScenePlayGuestReplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayGuestReplyNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayGuestReplyNotify& ScenePlayGuestReplyNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayGuestReplyNotify* ScenePlayGuestReplyNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayGuestReplyNotify* n = new ScenePlayGuestReplyNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayGuestReplyNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayGuestReplyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&guest_uid_) -
      reinterpret_cast<char*>(&play_id_)) + sizeof(guest_uid_));
  _internal_metadata_.Clear();
}

bool ScenePlayGuestReplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayGuestReplyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_agree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_agree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 guest_uid = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guest_uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayGuestReplyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayGuestReplyNotify)
  return false;
#undef DO_
}

void ScenePlayGuestReplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayGuestReplyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_agree = 3;
  if (this->is_agree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_agree(), output);
  }

  // uint32 guest_uid = 12;
  if (this->guest_uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->guest_uid(), output);
  }

  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayGuestReplyNotify)
}

::google::protobuf::uint8* ScenePlayGuestReplyNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayGuestReplyNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_agree = 3;
  if (this->is_agree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_agree(), target);
  }

  // uint32 guest_uid = 12;
  if (this->guest_uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->guest_uid(), target);
  }

  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayGuestReplyNotify)
  return target;
}

size_t ScenePlayGuestReplyNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayGuestReplyNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // bool is_agree = 3;
  if (this->is_agree() != 0) {
    total_size += 1 + 1;
  }

  // uint32 guest_uid = 12;
  if (this->guest_uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->guest_uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayGuestReplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayGuestReplyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayGuestReplyNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayGuestReplyNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayGuestReplyNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayGuestReplyNotify)
    MergeFrom(*source);
  }
}

void ScenePlayGuestReplyNotify::MergeFrom(const ScenePlayGuestReplyNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayGuestReplyNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.is_agree() != 0) {
    set_is_agree(from.is_agree());
  }
  if (from.guest_uid() != 0) {
    set_guest_uid(from.guest_uid());
  }
}

void ScenePlayGuestReplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayGuestReplyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayGuestReplyNotify::CopyFrom(const ScenePlayGuestReplyNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayGuestReplyNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayGuestReplyNotify::IsInitialized() const {
  return true;
}

void ScenePlayGuestReplyNotify::Swap(ScenePlayGuestReplyNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayGuestReplyNotify::InternalSwap(ScenePlayGuestReplyNotify* other) {
  using std::swap;
  swap(play_id_, other->play_id_);
  swap(is_agree_, other->is_agree_);
  swap(guest_uid_, other->guest_uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayGuestReplyNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayGuestReplyNotify

// uint32 play_id = 13;
void ScenePlayGuestReplyNotify::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayGuestReplyNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyNotify.play_id)
  return play_id_;
}
void ScenePlayGuestReplyNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyNotify.play_id)
}

// uint32 guest_uid = 12;
void ScenePlayGuestReplyNotify::clear_guest_uid() {
  guest_uid_ = 0u;
}
::google::protobuf::uint32 ScenePlayGuestReplyNotify::guest_uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyNotify.guest_uid)
  return guest_uid_;
}
void ScenePlayGuestReplyNotify::set_guest_uid(::google::protobuf::uint32 value) {
  
  guest_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyNotify.guest_uid)
}

// bool is_agree = 3;
void ScenePlayGuestReplyNotify::clear_is_agree() {
  is_agree_ = false;
}
bool ScenePlayGuestReplyNotify::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayGuestReplyNotify.is_agree)
  return is_agree_;
}
void ScenePlayGuestReplyNotify::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayGuestReplyNotify.is_agree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayInviteResultNotify::kIsAllArgeeFieldNumber;
const int ScenePlayInviteResultNotify::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayInviteResultNotify::ScenePlayInviteResultNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayInviteResultNotify)
}
ScenePlayInviteResultNotify::ScenePlayInviteResultNotify(const ScenePlayInviteResultNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_all_argee_, &from.is_all_argee_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_id_) -
    reinterpret_cast<char*>(&is_all_argee_)) + sizeof(play_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayInviteResultNotify)
}

void ScenePlayInviteResultNotify::SharedCtor() {
  ::memset(&is_all_argee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_all_argee_)) + sizeof(play_id_));
  _cached_size_ = 0;
}

ScenePlayInviteResultNotify::~ScenePlayInviteResultNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayInviteResultNotify)
  SharedDtor();
}

void ScenePlayInviteResultNotify::SharedDtor() {
}

void ScenePlayInviteResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayInviteResultNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayInviteResultNotify& ScenePlayInviteResultNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayInviteResultNotify* ScenePlayInviteResultNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayInviteResultNotify* n = new ScenePlayInviteResultNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayInviteResultNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayInviteResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_all_argee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_id_) -
      reinterpret_cast<char*>(&is_all_argee_)) + sizeof(play_id_));
  _internal_metadata_.Clear();
}

bool ScenePlayInviteResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayInviteResultNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_all_argee = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_all_argee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayInviteResultNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayInviteResultNotify)
  return false;
#undef DO_
}

void ScenePlayInviteResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayInviteResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_all_argee = 11;
  if (this->is_all_argee() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_all_argee(), output);
  }

  // uint32 play_id = 15;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayInviteResultNotify)
}

::google::protobuf::uint8* ScenePlayInviteResultNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayInviteResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_all_argee = 11;
  if (this->is_all_argee() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_all_argee(), target);
  }

  // uint32 play_id = 15;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayInviteResultNotify)
  return target;
}

size_t ScenePlayInviteResultNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayInviteResultNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool is_all_argee = 11;
  if (this->is_all_argee() != 0) {
    total_size += 1 + 1;
  }

  // uint32 play_id = 15;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayInviteResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayInviteResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayInviteResultNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayInviteResultNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayInviteResultNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayInviteResultNotify)
    MergeFrom(*source);
  }
}

void ScenePlayInviteResultNotify::MergeFrom(const ScenePlayInviteResultNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayInviteResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_all_argee() != 0) {
    set_is_all_argee(from.is_all_argee());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void ScenePlayInviteResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayInviteResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayInviteResultNotify::CopyFrom(const ScenePlayInviteResultNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayInviteResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayInviteResultNotify::IsInitialized() const {
  return true;
}

void ScenePlayInviteResultNotify::Swap(ScenePlayInviteResultNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayInviteResultNotify::InternalSwap(ScenePlayInviteResultNotify* other) {
  using std::swap;
  swap(is_all_argee_, other->is_all_argee_);
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayInviteResultNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayInviteResultNotify

// bool is_all_argee = 11;
void ScenePlayInviteResultNotify::clear_is_all_argee() {
  is_all_argee_ = false;
}
bool ScenePlayInviteResultNotify::is_all_argee() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInviteResultNotify.is_all_argee)
  return is_all_argee_;
}
void ScenePlayInviteResultNotify::set_is_all_argee(bool value) {
  
  is_all_argee_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInviteResultNotify.is_all_argee)
}

// uint32 play_id = 15;
void ScenePlayInviteResultNotify::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayInviteResultNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInviteResultNotify.play_id)
  return play_id_;
}
void ScenePlayInviteResultNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInviteResultNotify.play_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayInfo::kEntryIdFieldNumber;
const int ScenePlayInfo::kPlayIdFieldNumber;
const int ScenePlayInfo::kPlayTypeFieldNumber;
const int ScenePlayInfo::kIsOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayInfo::ScenePlayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayInfo)
}
ScenePlayInfo::ScenePlayInfo(const ScenePlayInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_type_, &from.play_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&entry_id_) -
    reinterpret_cast<char*>(&play_type_)) + sizeof(entry_id_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayInfo)
}

void ScenePlayInfo::SharedCtor() {
  ::memset(&play_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_id_) -
      reinterpret_cast<char*>(&play_type_)) + sizeof(entry_id_));
  _cached_size_ = 0;
}

ScenePlayInfo::~ScenePlayInfo() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayInfo)
  SharedDtor();
}

void ScenePlayInfo::SharedDtor() {
}

void ScenePlayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayInfo::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayInfo& ScenePlayInfo::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayInfo* ScenePlayInfo::New(::google::protobuf::Arena* arena) const {
  ScenePlayInfo* n = new ScenePlayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entry_id_) -
      reinterpret_cast<char*>(&play_type_)) + sizeof(entry_id_));
  _internal_metadata_.Clear();
}

bool ScenePlayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_open = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 entry_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayInfo)
  return false;
#undef DO_
}

void ScenePlayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->play_type(), output);
  }

  // bool is_open = 9;
  if (this->is_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_open(), output);
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->play_id(), output);
  }

  // uint32 entry_id = 15;
  if (this->entry_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->entry_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayInfo)
}

::google::protobuf::uint8* ScenePlayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->play_type(), target);
  }

  // bool is_open = 9;
  if (this->is_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_open(), target);
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->play_id(), target);
  }

  // uint32 entry_id = 15;
  if (this->entry_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->entry_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayInfo)
  return target;
}

size_t ScenePlayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_type = 3;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_type());
  }

  // bool is_open = 9;
  if (this->is_open() != 0) {
    total_size += 1 + 1;
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // uint32 entry_id = 15;
  if (this->entry_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entry_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayInfo)
    MergeFrom(*source);
  }
}

void ScenePlayInfo::MergeFrom(const ScenePlayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_type() != 0) {
    set_play_type(from.play_type());
  }
  if (from.is_open() != 0) {
    set_is_open(from.is_open());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.entry_id() != 0) {
    set_entry_id(from.entry_id());
  }
}

void ScenePlayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayInfo::CopyFrom(const ScenePlayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayInfo::IsInitialized() const {
  return true;
}

void ScenePlayInfo::Swap(ScenePlayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayInfo::InternalSwap(ScenePlayInfo* other) {
  using std::swap;
  swap(play_type_, other->play_type_);
  swap(is_open_, other->is_open_);
  swap(play_id_, other->play_id_);
  swap(entry_id_, other->entry_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayInfo

// uint32 entry_id = 15;
void ScenePlayInfo::clear_entry_id() {
  entry_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayInfo::entry_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.entry_id)
  return entry_id_;
}
void ScenePlayInfo::set_entry_id(::google::protobuf::uint32 value) {
  
  entry_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.entry_id)
}

// uint32 play_id = 11;
void ScenePlayInfo::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayInfo::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.play_id)
  return play_id_;
}
void ScenePlayInfo::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.play_id)
}

// uint32 play_type = 3;
void ScenePlayInfo::clear_play_type() {
  play_type_ = 0u;
}
::google::protobuf::uint32 ScenePlayInfo::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.play_type)
  return play_type_;
}
void ScenePlayInfo::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.play_type)
}

// bool is_open = 9;
void ScenePlayInfo::clear_is_open() {
  is_open_ = false;
}
bool ScenePlayInfo::is_open() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfo.is_open)
  return is_open_;
}
void ScenePlayInfo::set_is_open(bool value) {
  
  is_open_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayInfo.is_open)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayInfoListNotify::kPlayInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayInfoListNotify::ScenePlayInfoListNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayInfoListNotify)
}
ScenePlayInfoListNotify::ScenePlayInfoListNotify(const ScenePlayInfoListNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      play_info_list_(from.play_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayInfoListNotify)
}

void ScenePlayInfoListNotify::SharedCtor() {
  _cached_size_ = 0;
}

ScenePlayInfoListNotify::~ScenePlayInfoListNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayInfoListNotify)
  SharedDtor();
}

void ScenePlayInfoListNotify::SharedDtor() {
}

void ScenePlayInfoListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayInfoListNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayInfoListNotify& ScenePlayInfoListNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayInfoListNotify* ScenePlayInfoListNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayInfoListNotify* n = new ScenePlayInfoListNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayInfoListNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayInfoListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_info_list_.Clear();
  _internal_metadata_.Clear();
}

bool ScenePlayInfoListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayInfoListNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ScenePlayInfo play_info_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_play_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayInfoListNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayInfoListNotify)
  return false;
#undef DO_
}

void ScenePlayInfoListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayInfoListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ScenePlayInfo play_info_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->play_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayInfoListNotify)
}

::google::protobuf::uint8* ScenePlayInfoListNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayInfoListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ScenePlayInfo play_info_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->play_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->play_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayInfoListNotify)
  return target;
}

size_t ScenePlayInfoListNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayInfoListNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ScenePlayInfo play_info_list = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->play_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->play_info_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayInfoListNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayInfoListNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayInfoListNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayInfoListNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayInfoListNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayInfoListNotify)
    MergeFrom(*source);
  }
}

void ScenePlayInfoListNotify::MergeFrom(const ScenePlayInfoListNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayInfoListNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  play_info_list_.MergeFrom(from.play_info_list_);
}

void ScenePlayInfoListNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayInfoListNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayInfoListNotify::CopyFrom(const ScenePlayInfoListNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayInfoListNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayInfoListNotify::IsInitialized() const {
  return true;
}

void ScenePlayInfoListNotify::Swap(ScenePlayInfoListNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayInfoListNotify::InternalSwap(ScenePlayInfoListNotify* other) {
  using std::swap;
  play_info_list_.InternalSwap(&other->play_info_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayInfoListNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayInfoListNotify

// repeated .proto.ScenePlayInfo play_info_list = 6;
int ScenePlayInfoListNotify::play_info_list_size() const {
  return play_info_list_.size();
}
void ScenePlayInfoListNotify::clear_play_info_list() {
  play_info_list_.Clear();
}
const ::proto::ScenePlayInfo& ScenePlayInfoListNotify::play_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_.Get(index);
}
::proto::ScenePlayInfo* ScenePlayInfoListNotify::mutable_play_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_.Mutable(index);
}
::proto::ScenePlayInfo* ScenePlayInfoListNotify::add_play_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ScenePlayInfo >*
ScenePlayInfoListNotify::mutable_play_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayInfoListNotify.play_info_list)
  return &play_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayInfo >&
ScenePlayInfoListNotify::play_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayInfoListNotify.play_info_list)
  return play_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleInterruptNotify::kInterruptStateFieldNumber;
const int ScenePlayBattleInterruptNotify::kPlayIdFieldNumber;
const int ScenePlayBattleInterruptNotify::kPlayTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleInterruptNotify::ScenePlayBattleInterruptNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleInterruptNotify)
}
ScenePlayBattleInterruptNotify::ScenePlayBattleInterruptNotify(const ScenePlayBattleInterruptNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&play_type_, &from.play_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&interrupt_state_) -
    reinterpret_cast<char*>(&play_type_)) + sizeof(interrupt_state_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleInterruptNotify)
}

void ScenePlayBattleInterruptNotify::SharedCtor() {
  ::memset(&play_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interrupt_state_) -
      reinterpret_cast<char*>(&play_type_)) + sizeof(interrupt_state_));
  _cached_size_ = 0;
}

ScenePlayBattleInterruptNotify::~ScenePlayBattleInterruptNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleInterruptNotify)
  SharedDtor();
}

void ScenePlayBattleInterruptNotify::SharedDtor() {
}

void ScenePlayBattleInterruptNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleInterruptNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleInterruptNotify& ScenePlayBattleInterruptNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleInterruptNotify* ScenePlayBattleInterruptNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleInterruptNotify* n = new ScenePlayBattleInterruptNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleInterruptNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleInterruptNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&play_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&interrupt_state_) -
      reinterpret_cast<char*>(&play_type_)) + sizeof(interrupt_state_));
  _internal_metadata_.Clear();
}

bool ScenePlayBattleInterruptNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleInterruptNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 interrupt_state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interrupt_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleInterruptNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleInterruptNotify)
  return false;
#undef DO_
}

void ScenePlayBattleInterruptNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleInterruptNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_type = 1;
  if (this->play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->play_type(), output);
  }

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->play_id(), output);
  }

  // uint32 interrupt_state = 6;
  if (this->interrupt_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->interrupt_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleInterruptNotify)
}

::google::protobuf::uint8* ScenePlayBattleInterruptNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleInterruptNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_type = 1;
  if (this->play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->play_type(), target);
  }

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->play_id(), target);
  }

  // uint32 interrupt_state = 6;
  if (this->interrupt_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->interrupt_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleInterruptNotify)
  return target;
}

size_t ScenePlayBattleInterruptNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleInterruptNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_type = 1;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_type());
  }

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // uint32 interrupt_state = 6;
  if (this->interrupt_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->interrupt_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleInterruptNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleInterruptNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleInterruptNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleInterruptNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleInterruptNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleInterruptNotify)
    MergeFrom(*source);
  }
}

void ScenePlayBattleInterruptNotify::MergeFrom(const ScenePlayBattleInterruptNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleInterruptNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_type() != 0) {
    set_play_type(from.play_type());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.interrupt_state() != 0) {
    set_interrupt_state(from.interrupt_state());
  }
}

void ScenePlayBattleInterruptNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleInterruptNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleInterruptNotify::CopyFrom(const ScenePlayBattleInterruptNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleInterruptNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleInterruptNotify::IsInitialized() const {
  return true;
}

void ScenePlayBattleInterruptNotify::Swap(ScenePlayBattleInterruptNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleInterruptNotify::InternalSwap(ScenePlayBattleInterruptNotify* other) {
  using std::swap;
  swap(play_type_, other->play_type_);
  swap(play_id_, other->play_id_);
  swap(interrupt_state_, other->interrupt_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleInterruptNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleInterruptNotify

// uint32 interrupt_state = 6;
void ScenePlayBattleInterruptNotify::clear_interrupt_state() {
  interrupt_state_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInterruptNotify::interrupt_state() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInterruptNotify.interrupt_state)
  return interrupt_state_;
}
void ScenePlayBattleInterruptNotify::set_interrupt_state(::google::protobuf::uint32 value) {
  
  interrupt_state_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInterruptNotify.interrupt_state)
}

// uint32 play_id = 5;
void ScenePlayBattleInterruptNotify::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInterruptNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInterruptNotify.play_id)
  return play_id_;
}
void ScenePlayBattleInterruptNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInterruptNotify.play_id)
}

// uint32 play_type = 1;
void ScenePlayBattleInterruptNotify::clear_play_type() {
  play_type_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleInterruptNotify::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInterruptNotify.play_type)
  return play_type_;
}
void ScenePlayBattleInterruptNotify::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleInterruptNotify.play_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleSettlePlayerInfo::kCardListFieldNumber;
const int ScenePlayBattleSettlePlayerInfo::kProfilePictureFieldNumber;
const int ScenePlayBattleSettlePlayerInfo::kHeadImageFieldNumber;
const int ScenePlayBattleSettlePlayerInfo::kStatisticIdFieldNumber;
const int ScenePlayBattleSettlePlayerInfo::kUidFieldNumber;
const int ScenePlayBattleSettlePlayerInfo::kParamFieldNumber;
const int ScenePlayBattleSettlePlayerInfo::kOnlineIdFieldNumber;
const int ScenePlayBattleSettlePlayerInfo::kNicknameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleSettlePlayerInfo::ScenePlayBattleSettlePlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleSettlePlayerInfo)
}
ScenePlayBattleSettlePlayerInfo::ScenePlayBattleSettlePlayerInfo(const ScenePlayBattleSettlePlayerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      card_list_(from.card_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.online_id().size() > 0) {
    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nickname().size() > 0) {
    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.has_profile_picture()) {
    profile_picture_ = new ::proto::ProfilePicture(*from.profile_picture_);
  } else {
    profile_picture_ = NULL;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&head_image_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(head_image_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleSettlePlayerInfo)
}

void ScenePlayBattleSettlePlayerInfo::SharedCtor() {
  online_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&profile_picture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_image_) -
      reinterpret_cast<char*>(&profile_picture_)) + sizeof(head_image_));
  _cached_size_ = 0;
}

ScenePlayBattleSettlePlayerInfo::~ScenePlayBattleSettlePlayerInfo() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleSettlePlayerInfo)
  SharedDtor();
}

void ScenePlayBattleSettlePlayerInfo::SharedDtor() {
  online_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete profile_picture_;
}

void ScenePlayBattleSettlePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleSettlePlayerInfo::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleSettlePlayerInfo& ScenePlayBattleSettlePlayerInfo::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleSettlePlayerInfo* ScenePlayBattleSettlePlayerInfo::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleSettlePlayerInfo* n = new ScenePlayBattleSettlePlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleSettlePlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleSettlePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  card_list_.Clear();
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) {
    delete profile_picture_;
  }
  profile_picture_ = NULL;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&head_image_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(head_image_));
  _internal_metadata_.Clear();
}

bool ScenePlayBattleSettlePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleSettlePlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 statistic_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statistic_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 param = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ProfilePicture profile_picture = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_profile_picture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 head_image = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string online_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_online_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->online_id().data(), static_cast<int>(this->online_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ScenePlayBattleSettlePlayerInfo.online_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ExhibitionDisplayInfo card_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nickname = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nickname().data(), static_cast<int>(this->nickname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ScenePlayBattleSettlePlayerInfo.nickname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleSettlePlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleSettlePlayerInfo)
  return false;
#undef DO_
}

void ScenePlayBattleSettlePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleSettlePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // uint32 statistic_id = 4;
  if (this->statistic_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->statistic_id(), output);
  }

  // int64 param = 5;
  if (this->param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->param(), output);
  }

  // .proto.ProfilePicture profile_picture = 10;
  if (this->has_profile_picture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->profile_picture_, output);
  }

  // uint32 head_image = 11;
  if (this->head_image() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->head_image(), output);
  }

  // string online_id = 12;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ScenePlayBattleSettlePlayerInfo.online_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->online_id(), output);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->card_list(static_cast<int>(i)), output);
  }

  // string nickname = 15;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ScenePlayBattleSettlePlayerInfo.nickname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->nickname(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleSettlePlayerInfo)
}

::google::protobuf::uint8* ScenePlayBattleSettlePlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleSettlePlayerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // uint32 statistic_id = 4;
  if (this->statistic_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->statistic_id(), target);
  }

  // int64 param = 5;
  if (this->param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->param(), target);
  }

  // .proto.ProfilePicture profile_picture = 10;
  if (this->has_profile_picture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->profile_picture_, deterministic, target);
  }

  // uint32 head_image = 11;
  if (this->head_image() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->head_image(), target);
  }

  // string online_id = 12;
  if (this->online_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->online_id().data(), static_cast<int>(this->online_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ScenePlayBattleSettlePlayerInfo.online_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->online_id(), target);
  }

  // repeated .proto.ExhibitionDisplayInfo card_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->card_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->card_list(static_cast<int>(i)), deterministic, target);
  }

  // string nickname = 15;
  if (this->nickname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nickname().data(), static_cast<int>(this->nickname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ScenePlayBattleSettlePlayerInfo.nickname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->nickname(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleSettlePlayerInfo)
  return target;
}

size_t ScenePlayBattleSettlePlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleSettlePlayerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ExhibitionDisplayInfo card_list = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->card_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card_list(static_cast<int>(i)));
    }
  }

  // string online_id = 12;
  if (this->online_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->online_id());
  }

  // string nickname = 15;
  if (this->nickname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nickname());
  }

  // .proto.ProfilePicture profile_picture = 10;
  if (this->has_profile_picture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->profile_picture_);
  }

  // uint32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  // uint32 statistic_id = 4;
  if (this->statistic_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->statistic_id());
  }

  // int64 param = 5;
  if (this->param() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->param());
  }

  // uint32 head_image = 11;
  if (this->head_image() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->head_image());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleSettlePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleSettlePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleSettlePlayerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleSettlePlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleSettlePlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleSettlePlayerInfo)
    MergeFrom(*source);
  }
}

void ScenePlayBattleSettlePlayerInfo::MergeFrom(const ScenePlayBattleSettlePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleSettlePlayerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  card_list_.MergeFrom(from.card_list_);
  if (from.online_id().size() > 0) {

    online_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.online_id_);
  }
  if (from.nickname().size() > 0) {

    nickname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nickname_);
  }
  if (from.has_profile_picture()) {
    mutable_profile_picture()->::proto::ProfilePicture::MergeFrom(from.profile_picture());
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.statistic_id() != 0) {
    set_statistic_id(from.statistic_id());
  }
  if (from.param() != 0) {
    set_param(from.param());
  }
  if (from.head_image() != 0) {
    set_head_image(from.head_image());
  }
}

void ScenePlayBattleSettlePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleSettlePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleSettlePlayerInfo::CopyFrom(const ScenePlayBattleSettlePlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleSettlePlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleSettlePlayerInfo::IsInitialized() const {
  return true;
}

void ScenePlayBattleSettlePlayerInfo::Swap(ScenePlayBattleSettlePlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleSettlePlayerInfo::InternalSwap(ScenePlayBattleSettlePlayerInfo* other) {
  using std::swap;
  card_list_.InternalSwap(&other->card_list_);
  online_id_.Swap(&other->online_id_);
  nickname_.Swap(&other->nickname_);
  swap(profile_picture_, other->profile_picture_);
  swap(uid_, other->uid_);
  swap(statistic_id_, other->statistic_id_);
  swap(param_, other->param_);
  swap(head_image_, other->head_image_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleSettlePlayerInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleSettlePlayerInfo

// repeated .proto.ExhibitionDisplayInfo card_list = 14;
int ScenePlayBattleSettlePlayerInfo::card_list_size() const {
  return card_list_.size();
}
void ScenePlayBattleSettlePlayerInfo::clear_card_list() {
  card_list_.Clear();
}
const ::proto::ExhibitionDisplayInfo& ScenePlayBattleSettlePlayerInfo::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_.Get(index);
}
::proto::ExhibitionDisplayInfo* ScenePlayBattleSettlePlayerInfo::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_.Mutable(index);
}
::proto::ExhibitionDisplayInfo* ScenePlayBattleSettlePlayerInfo::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >*
ScenePlayBattleSettlePlayerInfo::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return &card_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ExhibitionDisplayInfo >&
ScenePlayBattleSettlePlayerInfo::card_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleSettlePlayerInfo.card_list)
  return card_list_;
}

// .proto.ProfilePicture profile_picture = 10;
bool ScenePlayBattleSettlePlayerInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
void ScenePlayBattleSettlePlayerInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
const ::proto::ProfilePicture& ScenePlayBattleSettlePlayerInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
::proto::ProfilePicture* ScenePlayBattleSettlePlayerInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
  return profile_picture_;
}
::proto::ProfilePicture* ScenePlayBattleSettlePlayerInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
void ScenePlayBattleSettlePlayerInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleSettlePlayerInfo.profile_picture)
}

// uint32 head_image = 11;
void ScenePlayBattleSettlePlayerInfo::clear_head_image() {
  head_image_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleSettlePlayerInfo::head_image() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.head_image)
  return head_image_;
}
void ScenePlayBattleSettlePlayerInfo::set_head_image(::google::protobuf::uint32 value) {
  
  head_image_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.head_image)
}

// uint32 statistic_id = 4;
void ScenePlayBattleSettlePlayerInfo::clear_statistic_id() {
  statistic_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleSettlePlayerInfo::statistic_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.statistic_id)
  return statistic_id_;
}
void ScenePlayBattleSettlePlayerInfo::set_statistic_id(::google::protobuf::uint32 value) {
  
  statistic_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.statistic_id)
}

// uint32 uid = 1;
void ScenePlayBattleSettlePlayerInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleSettlePlayerInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.uid)
  return uid_;
}
void ScenePlayBattleSettlePlayerInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.uid)
}

// int64 param = 5;
void ScenePlayBattleSettlePlayerInfo::clear_param() {
  param_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ScenePlayBattleSettlePlayerInfo::param() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.param)
  return param_;
}
void ScenePlayBattleSettlePlayerInfo::set_param(::google::protobuf::int64 value) {
  
  param_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.param)
}

// string online_id = 12;
void ScenePlayBattleSettlePlayerInfo::clear_online_id() {
  online_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScenePlayBattleSettlePlayerInfo::online_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.online_id)
  return online_id_.GetNoArena();
}
void ScenePlayBattleSettlePlayerInfo::set_online_id(const ::std::string& value) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
#if LANG_CXX11
void ScenePlayBattleSettlePlayerInfo::set_online_id(::std::string&& value) {
  
  online_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
#endif
void ScenePlayBattleSettlePlayerInfo::set_online_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
void ScenePlayBattleSettlePlayerInfo::set_online_id(const char* value, size_t size) {
  
  online_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}
::std::string* ScenePlayBattleSettlePlayerInfo::mutable_online_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.online_id)
  return online_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScenePlayBattleSettlePlayerInfo::release_online_id() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleSettlePlayerInfo.online_id)
  
  return online_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScenePlayBattleSettlePlayerInfo::set_allocated_online_id(::std::string* online_id) {
  if (online_id != NULL) {
    
  } else {
    
  }
  online_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), online_id);
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleSettlePlayerInfo.online_id)
}

// string nickname = 15;
void ScenePlayBattleSettlePlayerInfo::clear_nickname() {
  nickname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScenePlayBattleSettlePlayerInfo::nickname() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettlePlayerInfo.nickname)
  return nickname_.GetNoArena();
}
void ScenePlayBattleSettlePlayerInfo::set_nickname(const ::std::string& value) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
#if LANG_CXX11
void ScenePlayBattleSettlePlayerInfo::set_nickname(::std::string&& value) {
  
  nickname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
#endif
void ScenePlayBattleSettlePlayerInfo::set_nickname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
void ScenePlayBattleSettlePlayerInfo::set_nickname(const char* value, size_t size) {
  
  nickname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}
::std::string* ScenePlayBattleSettlePlayerInfo::mutable_nickname() {
  
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettlePlayerInfo.nickname)
  return nickname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScenePlayBattleSettlePlayerInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleSettlePlayerInfo.nickname)
  
  return nickname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScenePlayBattleSettlePlayerInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname != NULL) {
    
  } else {
    
  }
  nickname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nickname);
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleSettlePlayerInfo.nickname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleSettleRewardInfo::kRewardItemListFieldNumber;
const int ScenePlayBattleSettleRewardInfo::kUidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleSettleRewardInfo::ScenePlayBattleSettleRewardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleSettleRewardInfo)
}
ScenePlayBattleSettleRewardInfo::ScenePlayBattleSettleRewardInfo(const ScenePlayBattleSettleRewardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reward_item_list_(from.reward_item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleSettleRewardInfo)
}

void ScenePlayBattleSettleRewardInfo::SharedCtor() {
  uid_ = 0u;
  _cached_size_ = 0;
}

ScenePlayBattleSettleRewardInfo::~ScenePlayBattleSettleRewardInfo() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleSettleRewardInfo)
  SharedDtor();
}

void ScenePlayBattleSettleRewardInfo::SharedDtor() {
}

void ScenePlayBattleSettleRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleSettleRewardInfo::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleSettleRewardInfo& ScenePlayBattleSettleRewardInfo::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleSettleRewardInfo* ScenePlayBattleSettleRewardInfo::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleSettleRewardInfo* n = new ScenePlayBattleSettleRewardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleSettleRewardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleSettleRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_item_list_.Clear();
  uid_ = 0u;
  _internal_metadata_.Clear();
}

bool ScenePlayBattleSettleRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleSettleRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ItemParam reward_item_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleSettleRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleSettleRewardInfo)
  return false;
#undef DO_
}

void ScenePlayBattleSettleRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleSettleRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 3;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // repeated .proto.ItemParam reward_item_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward_item_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleSettleRewardInfo)
}

::google::protobuf::uint8* ScenePlayBattleSettleRewardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleSettleRewardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 uid = 3;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // repeated .proto.ItemParam reward_item_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->reward_item_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleSettleRewardInfo)
  return target;
}

size_t ScenePlayBattleSettleRewardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleSettleRewardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ItemParam reward_item_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->reward_item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward_item_list(static_cast<int>(i)));
    }
  }

  // uint32 uid = 3;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->uid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleSettleRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleSettleRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleSettleRewardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleSettleRewardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleSettleRewardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleSettleRewardInfo)
    MergeFrom(*source);
  }
}

void ScenePlayBattleSettleRewardInfo::MergeFrom(const ScenePlayBattleSettleRewardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleSettleRewardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_item_list_.MergeFrom(from.reward_item_list_);
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
}

void ScenePlayBattleSettleRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleSettleRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleSettleRewardInfo::CopyFrom(const ScenePlayBattleSettleRewardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleSettleRewardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleSettleRewardInfo::IsInitialized() const {
  return true;
}

void ScenePlayBattleSettleRewardInfo::Swap(ScenePlayBattleSettleRewardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleSettleRewardInfo::InternalSwap(ScenePlayBattleSettleRewardInfo* other) {
  using std::swap;
  reward_item_list_.InternalSwap(&other->reward_item_list_);
  swap(uid_, other->uid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleSettleRewardInfo::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleSettleRewardInfo

// repeated .proto.ItemParam reward_item_list = 4;
int ScenePlayBattleSettleRewardInfo::reward_item_list_size() const {
  return reward_item_list_.size();
}
void ScenePlayBattleSettleRewardInfo::clear_reward_item_list() {
  reward_item_list_.Clear();
}
const ::proto::ItemParam& ScenePlayBattleSettleRewardInfo::reward_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_.Get(index);
}
::proto::ItemParam* ScenePlayBattleSettleRewardInfo::mutable_reward_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_.Mutable(index);
}
::proto::ItemParam* ScenePlayBattleSettleRewardInfo::add_reward_item_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
ScenePlayBattleSettleRewardInfo::mutable_reward_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return &reward_item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
ScenePlayBattleSettleRewardInfo::reward_item_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleSettleRewardInfo.reward_item_list)
  return reward_item_list_;
}

// uint32 uid = 3;
void ScenePlayBattleSettleRewardInfo::clear_uid() {
  uid_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleSettleRewardInfo::uid() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleSettleRewardInfo.uid)
  return uid_;
}
void ScenePlayBattleSettleRewardInfo::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleSettleRewardInfo.uid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleResultNotify::kIsWinFieldNumber;
const int ScenePlayBattleResultNotify::kCostTimeFieldNumber;
const int ScenePlayBattleResultNotify::kPlayTypeFieldNumber;
const int ScenePlayBattleResultNotify::kPlayIdFieldNumber;
const int ScenePlayBattleResultNotify::kSettlePlayerInfoListFieldNumber;
const int ScenePlayBattleResultNotify::kSettleRewardInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleResultNotify::ScenePlayBattleResultNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleResultNotify)
}
ScenePlayBattleResultNotify::ScenePlayBattleResultNotify(const ScenePlayBattleResultNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      settle_player_info_list_(from.settle_player_info_list_),
      settle_reward_info_list_(from.settle_reward_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is_win_, &from.is_win_,
    static_cast<size_t>(reinterpret_cast<char*>(&play_type_) -
    reinterpret_cast<char*>(&is_win_)) + sizeof(play_type_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleResultNotify)
}

void ScenePlayBattleResultNotify::SharedCtor() {
  ::memset(&is_win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&is_win_)) + sizeof(play_type_));
  _cached_size_ = 0;
}

ScenePlayBattleResultNotify::~ScenePlayBattleResultNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleResultNotify)
  SharedDtor();
}

void ScenePlayBattleResultNotify::SharedDtor() {
}

void ScenePlayBattleResultNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleResultNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleResultNotify& ScenePlayBattleResultNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleResultNotify* ScenePlayBattleResultNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleResultNotify* n = new ScenePlayBattleResultNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleResultNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  settle_player_info_list_.Clear();
  settle_reward_info_list_.Clear();
  ::memset(&is_win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&play_type_) -
      reinterpret_cast<char*>(&is_win_)) + sizeof(play_type_));
  _internal_metadata_.Clear();
}

bool ScenePlayBattleResultNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleResultNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_win = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settle_player_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cost_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_settle_reward_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_type = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleResultNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleResultNotify)
  return false;
#undef DO_
}

void ScenePlayBattleResultNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_win = 1;
  if (this->is_win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_win(), output);
  }

  // repeated .proto.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_player_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->settle_player_info_list(static_cast<int>(i)), output);
  }

  // uint32 cost_time = 7;
  if (this->cost_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cost_time(), output);
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->play_id(), output);
  }

  // repeated .proto.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_reward_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->settle_reward_info_list(static_cast<int>(i)), output);
  }

  // uint32 play_type = 15;
  if (this->play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->play_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleResultNotify)
}

::google::protobuf::uint8* ScenePlayBattleResultNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleResultNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_win = 1;
  if (this->is_win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_win(), target);
  }

  // repeated .proto.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_player_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->settle_player_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 cost_time = 7;
  if (this->cost_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cost_time(), target);
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->play_id(), target);
  }

  // repeated .proto.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->settle_reward_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->settle_reward_info_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 play_type = 15;
  if (this->play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->play_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleResultNotify)
  return target;
}

size_t ScenePlayBattleResultNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleResultNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->settle_player_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settle_player_info_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->settle_reward_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settle_reward_info_list(static_cast<int>(i)));
    }
  }

  // bool is_win = 1;
  if (this->is_win() != 0) {
    total_size += 1 + 1;
  }

  // uint32 cost_time = 7;
  if (this->cost_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cost_time());
  }

  // uint32 play_id = 11;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // uint32 play_type = 15;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleResultNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleResultNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleResultNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleResultNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleResultNotify)
    MergeFrom(*source);
  }
}

void ScenePlayBattleResultNotify::MergeFrom(const ScenePlayBattleResultNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleResultNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  settle_player_info_list_.MergeFrom(from.settle_player_info_list_);
  settle_reward_info_list_.MergeFrom(from.settle_reward_info_list_);
  if (from.is_win() != 0) {
    set_is_win(from.is_win());
  }
  if (from.cost_time() != 0) {
    set_cost_time(from.cost_time());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.play_type() != 0) {
    set_play_type(from.play_type());
  }
}

void ScenePlayBattleResultNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleResultNotify::CopyFrom(const ScenePlayBattleResultNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleResultNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleResultNotify::IsInitialized() const {
  return true;
}

void ScenePlayBattleResultNotify::Swap(ScenePlayBattleResultNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleResultNotify::InternalSwap(ScenePlayBattleResultNotify* other) {
  using std::swap;
  settle_player_info_list_.InternalSwap(&other->settle_player_info_list_);
  settle_reward_info_list_.InternalSwap(&other->settle_reward_info_list_);
  swap(is_win_, other->is_win_);
  swap(cost_time_, other->cost_time_);
  swap(play_id_, other->play_id_);
  swap(play_type_, other->play_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleResultNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleResultNotify

// bool is_win = 1;
void ScenePlayBattleResultNotify::clear_is_win() {
  is_win_ = false;
}
bool ScenePlayBattleResultNotify::is_win() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.is_win)
  return is_win_;
}
void ScenePlayBattleResultNotify::set_is_win(bool value) {
  
  is_win_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.is_win)
}

// uint32 cost_time = 7;
void ScenePlayBattleResultNotify::clear_cost_time() {
  cost_time_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleResultNotify::cost_time() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.cost_time)
  return cost_time_;
}
void ScenePlayBattleResultNotify::set_cost_time(::google::protobuf::uint32 value) {
  
  cost_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.cost_time)
}

// uint32 play_type = 15;
void ScenePlayBattleResultNotify::clear_play_type() {
  play_type_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleResultNotify::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.play_type)
  return play_type_;
}
void ScenePlayBattleResultNotify::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.play_type)
}

// uint32 play_id = 11;
void ScenePlayBattleResultNotify::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleResultNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.play_id)
  return play_id_;
}
void ScenePlayBattleResultNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleResultNotify.play_id)
}

// repeated .proto.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
int ScenePlayBattleResultNotify::settle_player_info_list_size() const {
  return settle_player_info_list_.size();
}
void ScenePlayBattleResultNotify::clear_settle_player_info_list() {
  settle_player_info_list_.Clear();
}
const ::proto::ScenePlayBattleSettlePlayerInfo& ScenePlayBattleResultNotify::settle_player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_.Get(index);
}
::proto::ScenePlayBattleSettlePlayerInfo* ScenePlayBattleResultNotify::mutable_settle_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_.Mutable(index);
}
::proto::ScenePlayBattleSettlePlayerInfo* ScenePlayBattleResultNotify::add_settle_player_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettlePlayerInfo >*
ScenePlayBattleResultNotify::mutable_settle_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return &settle_player_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettlePlayerInfo >&
ScenePlayBattleResultNotify::settle_player_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleResultNotify.settle_player_info_list)
  return settle_player_info_list_;
}

// repeated .proto.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
int ScenePlayBattleResultNotify::settle_reward_info_list_size() const {
  return settle_reward_info_list_.size();
}
void ScenePlayBattleResultNotify::clear_settle_reward_info_list() {
  settle_reward_info_list_.Clear();
}
const ::proto::ScenePlayBattleSettleRewardInfo& ScenePlayBattleResultNotify::settle_reward_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_.Get(index);
}
::proto::ScenePlayBattleSettleRewardInfo* ScenePlayBattleResultNotify::mutable_settle_reward_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_.Mutable(index);
}
::proto::ScenePlayBattleSettleRewardInfo* ScenePlayBattleResultNotify::add_settle_reward_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettleRewardInfo >*
ScenePlayBattleResultNotify::mutable_settle_reward_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return &settle_reward_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleSettleRewardInfo >&
ScenePlayBattleResultNotify::settle_reward_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleResultNotify.settle_reward_info_list)
  return settle_reward_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleUidOpNotify::kOpFieldNumber;
const int ScenePlayBattleUidOpNotify::kParamTargetListFieldNumber;
const int ScenePlayBattleUidOpNotify::kEntityIdFieldNumber;
const int ScenePlayBattleUidOpNotify::kParamStrFieldNumber;
const int ScenePlayBattleUidOpNotify::kUidListFieldNumber;
const int ScenePlayBattleUidOpNotify::kParamIndexFieldNumber;
const int ScenePlayBattleUidOpNotify::kPlayTypeFieldNumber;
const int ScenePlayBattleUidOpNotify::kParamDurationFieldNumber;
const int ScenePlayBattleUidOpNotify::kParamListFieldNumber;
const int ScenePlayBattleUidOpNotify::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleUidOpNotify::ScenePlayBattleUidOpNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleUidOpNotify)
}
ScenePlayBattleUidOpNotify::ScenePlayBattleUidOpNotify(const ScenePlayBattleUidOpNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      uid_list_(from.uid_list_),
      param_target_list_(from.param_target_list_),
      param_list_(from.param_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.param_str().size() > 0) {
    param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
  }
  ::memcpy(&entity_id_, &from.entity_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_duration_) -
    reinterpret_cast<char*>(&entity_id_)) + sizeof(param_duration_));
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleUidOpNotify)
}

void ScenePlayBattleUidOpNotify::SharedCtor() {
  param_str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_duration_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(param_duration_));
  _cached_size_ = 0;
}

ScenePlayBattleUidOpNotify::~ScenePlayBattleUidOpNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleUidOpNotify)
  SharedDtor();
}

void ScenePlayBattleUidOpNotify::SharedDtor() {
  param_str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ScenePlayBattleUidOpNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleUidOpNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleUidOpNotify& ScenePlayBattleUidOpNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleUidOpNotify* ScenePlayBattleUidOpNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleUidOpNotify* n = new ScenePlayBattleUidOpNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleUidOpNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleUidOpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_list_.Clear();
  param_target_list_.Clear();
  param_list_.Clear();
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entity_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_duration_) -
      reinterpret_cast<char*>(&entity_id_)) + sizeof(param_duration_));
  _internal_metadata_.Clear();
}

bool ScenePlayBattleUidOpNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleUidOpNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 entity_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entity_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string param_str = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param_str()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->param_str().data(), static_cast<int>(this->param_str().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ScenePlayBattleUidOpNotify.param_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 uid_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uid_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_uid_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 op = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &op_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 play_type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 param_target_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_target_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_param_target_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param_index = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 param_duration = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 param_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 122u, input, this->mutable_param_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleUidOpNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleUidOpNotify)
  return false;
#undef DO_
}

void ScenePlayBattleUidOpNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleUidOpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entity_id(), output);
  }

  // string param_str = 3;
  if (this->param_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->param_str().data(), static_cast<int>(this->param_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ScenePlayBattleUidOpNotify.param_str");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->param_str(), output);
  }

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->play_id(), output);
  }

  // repeated uint32 uid_list = 6;
  if (this->uid_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _uid_list_cached_byte_size_));
  }
  for (int i = 0, n = this->uid_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->uid_list(i), output);
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->op(), output);
  }

  // uint32 play_type = 8;
  if (this->play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->play_type(), output);
  }

  // repeated uint32 param_target_list = 9;
  if (this->param_target_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_target_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_target_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_target_list(i), output);
  }

  // uint32 param_index = 11;
  if (this->param_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->param_index(), output);
  }

  // uint32 param_duration = 12;
  if (this->param_duration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->param_duration(), output);
  }

  // repeated uint32 param_list = 15;
  if (this->param_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_list_cached_byte_size_));
  }
  for (int i = 0, n = this->param_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->param_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleUidOpNotify)
}

::google::protobuf::uint8* ScenePlayBattleUidOpNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleUidOpNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entity_id(), target);
  }

  // string param_str = 3;
  if (this->param_str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->param_str().data(), static_cast<int>(this->param_str().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ScenePlayBattleUidOpNotify.param_str");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->param_str(), target);
  }

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->play_id(), target);
  }

  // repeated uint32 uid_list = 6;
  if (this->uid_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _uid_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->uid_list_, target);
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->op(), target);
  }

  // uint32 play_type = 8;
  if (this->play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->play_type(), target);
  }

  // repeated uint32 param_target_list = 9;
  if (this->param_target_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_target_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_target_list_, target);
  }

  // uint32 param_index = 11;
  if (this->param_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->param_index(), target);
  }

  // uint32 param_duration = 12;
  if (this->param_duration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->param_duration(), target);
  }

  // repeated uint32 param_list = 15;
  if (this->param_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->param_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleUidOpNotify)
  return target;
}

size_t ScenePlayBattleUidOpNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleUidOpNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 uid_list = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->uid_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _uid_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 param_target_list = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_target_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_target_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 param_list = 15;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string param_str = 3;
  if (this->param_str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->param_str());
  }

  // uint32 entity_id = 2;
  if (this->entity_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->entity_id());
  }

  // uint32 play_id = 5;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  // uint32 op = 7;
  if (this->op() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->op());
  }

  // uint32 play_type = 8;
  if (this->play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_type());
  }

  // uint32 param_index = 11;
  if (this->param_index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param_index());
  }

  // uint32 param_duration = 12;
  if (this->param_duration() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->param_duration());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleUidOpNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleUidOpNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleUidOpNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleUidOpNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleUidOpNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleUidOpNotify)
    MergeFrom(*source);
  }
}

void ScenePlayBattleUidOpNotify::MergeFrom(const ScenePlayBattleUidOpNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleUidOpNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uid_list_.MergeFrom(from.uid_list_);
  param_target_list_.MergeFrom(from.param_target_list_);
  param_list_.MergeFrom(from.param_list_);
  if (from.param_str().size() > 0) {

    param_str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_str_);
  }
  if (from.entity_id() != 0) {
    set_entity_id(from.entity_id());
  }
  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
  if (from.op() != 0) {
    set_op(from.op());
  }
  if (from.play_type() != 0) {
    set_play_type(from.play_type());
  }
  if (from.param_index() != 0) {
    set_param_index(from.param_index());
  }
  if (from.param_duration() != 0) {
    set_param_duration(from.param_duration());
  }
}

void ScenePlayBattleUidOpNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleUidOpNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleUidOpNotify::CopyFrom(const ScenePlayBattleUidOpNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleUidOpNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleUidOpNotify::IsInitialized() const {
  return true;
}

void ScenePlayBattleUidOpNotify::Swap(ScenePlayBattleUidOpNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleUidOpNotify::InternalSwap(ScenePlayBattleUidOpNotify* other) {
  using std::swap;
  uid_list_.InternalSwap(&other->uid_list_);
  param_target_list_.InternalSwap(&other->param_target_list_);
  param_list_.InternalSwap(&other->param_list_);
  param_str_.Swap(&other->param_str_);
  swap(entity_id_, other->entity_id_);
  swap(play_id_, other->play_id_);
  swap(op_, other->op_);
  swap(play_type_, other->play_type_);
  swap(param_index_, other->param_index_);
  swap(param_duration_, other->param_duration_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleUidOpNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleUidOpNotify

// uint32 op = 7;
void ScenePlayBattleUidOpNotify::clear_op() {
  op_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::op() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.op)
  return op_;
}
void ScenePlayBattleUidOpNotify::set_op(::google::protobuf::uint32 value) {
  
  op_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.op)
}

// repeated uint32 param_target_list = 9;
int ScenePlayBattleUidOpNotify::param_target_list_size() const {
  return param_target_list_.size();
}
void ScenePlayBattleUidOpNotify::clear_param_target_list() {
  param_target_list_.Clear();
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_target_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_target_list)
  return param_target_list_.Get(index);
}
void ScenePlayBattleUidOpNotify::set_param_target_list(int index, ::google::protobuf::uint32 value) {
  param_target_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_target_list)
}
void ScenePlayBattleUidOpNotify::add_param_target_list(::google::protobuf::uint32 value) {
  param_target_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleUidOpNotify.param_target_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleUidOpNotify::param_target_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleUidOpNotify.param_target_list)
  return param_target_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleUidOpNotify::mutable_param_target_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleUidOpNotify.param_target_list)
  return &param_target_list_;
}

// uint32 entity_id = 2;
void ScenePlayBattleUidOpNotify::clear_entity_id() {
  entity_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::entity_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.entity_id)
  return entity_id_;
}
void ScenePlayBattleUidOpNotify::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.entity_id)
}

// string param_str = 3;
void ScenePlayBattleUidOpNotify::clear_param_str() {
  param_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ScenePlayBattleUidOpNotify::param_str() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_str)
  return param_str_.GetNoArena();
}
void ScenePlayBattleUidOpNotify::set_param_str(const ::std::string& value) {
  
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_str)
}
#if LANG_CXX11
void ScenePlayBattleUidOpNotify::set_param_str(::std::string&& value) {
  
  param_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ScenePlayBattleUidOpNotify.param_str)
}
#endif
void ScenePlayBattleUidOpNotify::set_param_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ScenePlayBattleUidOpNotify.param_str)
}
void ScenePlayBattleUidOpNotify::set_param_str(const char* value, size_t size) {
  
  param_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ScenePlayBattleUidOpNotify.param_str)
}
::std::string* ScenePlayBattleUidOpNotify::mutable_param_str() {
  
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleUidOpNotify.param_str)
  return param_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ScenePlayBattleUidOpNotify::release_param_str() {
  // @@protoc_insertion_point(field_release:proto.ScenePlayBattleUidOpNotify.param_str)
  
  return param_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ScenePlayBattleUidOpNotify::set_allocated_param_str(::std::string* param_str) {
  if (param_str != NULL) {
    
  } else {
    
  }
  param_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_str);
  // @@protoc_insertion_point(field_set_allocated:proto.ScenePlayBattleUidOpNotify.param_str)
}

// repeated uint32 uid_list = 6;
int ScenePlayBattleUidOpNotify::uid_list_size() const {
  return uid_list_.size();
}
void ScenePlayBattleUidOpNotify::clear_uid_list() {
  uid_list_.Clear();
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::uid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.uid_list)
  return uid_list_.Get(index);
}
void ScenePlayBattleUidOpNotify::set_uid_list(int index, ::google::protobuf::uint32 value) {
  uid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.uid_list)
}
void ScenePlayBattleUidOpNotify::add_uid_list(::google::protobuf::uint32 value) {
  uid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleUidOpNotify.uid_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleUidOpNotify::uid_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleUidOpNotify.uid_list)
  return uid_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleUidOpNotify::mutable_uid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleUidOpNotify.uid_list)
  return &uid_list_;
}

// uint32 param_index = 11;
void ScenePlayBattleUidOpNotify::clear_param_index() {
  param_index_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_index() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_index)
  return param_index_;
}
void ScenePlayBattleUidOpNotify::set_param_index(::google::protobuf::uint32 value) {
  
  param_index_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_index)
}

// uint32 play_type = 8;
void ScenePlayBattleUidOpNotify::clear_play_type() {
  play_type_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::play_type() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.play_type)
  return play_type_;
}
void ScenePlayBattleUidOpNotify::set_play_type(::google::protobuf::uint32 value) {
  
  play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.play_type)
}

// uint32 param_duration = 12;
void ScenePlayBattleUidOpNotify::clear_param_duration() {
  param_duration_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_duration() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_duration)
  return param_duration_;
}
void ScenePlayBattleUidOpNotify::set_param_duration(::google::protobuf::uint32 value) {
  
  param_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_duration)
}

// repeated uint32 param_list = 15;
int ScenePlayBattleUidOpNotify::param_list_size() const {
  return param_list_.size();
}
void ScenePlayBattleUidOpNotify::clear_param_list() {
  param_list_.Clear();
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.param_list)
  return param_list_.Get(index);
}
void ScenePlayBattleUidOpNotify::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.param_list)
}
void ScenePlayBattleUidOpNotify::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleUidOpNotify.param_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ScenePlayBattleUidOpNotify::param_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleUidOpNotify.param_list)
  return param_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ScenePlayBattleUidOpNotify::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleUidOpNotify.param_list)
  return &param_list_;
}

// uint32 play_id = 5;
void ScenePlayBattleUidOpNotify::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayBattleUidOpNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleUidOpNotify.play_id)
  return play_id_;
}
void ScenePlayBattleUidOpNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayBattleUidOpNotify.play_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayBattleInfoListNotify::kBattleInfoListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayBattleInfoListNotify::ScenePlayBattleInfoListNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayBattleInfoListNotify)
}
ScenePlayBattleInfoListNotify::ScenePlayBattleInfoListNotify(const ScenePlayBattleInfoListNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      battle_info_list_(from.battle_info_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayBattleInfoListNotify)
}

void ScenePlayBattleInfoListNotify::SharedCtor() {
  _cached_size_ = 0;
}

ScenePlayBattleInfoListNotify::~ScenePlayBattleInfoListNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayBattleInfoListNotify)
  SharedDtor();
}

void ScenePlayBattleInfoListNotify::SharedDtor() {
}

void ScenePlayBattleInfoListNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayBattleInfoListNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayBattleInfoListNotify& ScenePlayBattleInfoListNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayBattleInfoListNotify* ScenePlayBattleInfoListNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayBattleInfoListNotify* n = new ScenePlayBattleInfoListNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayBattleInfoListNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayBattleInfoListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_info_list_.Clear();
  _internal_metadata_.Clear();
}

bool ScenePlayBattleInfoListNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayBattleInfoListNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ScenePlayBattleInfo battle_info_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_info_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayBattleInfoListNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayBattleInfoListNotify)
  return false;
#undef DO_
}

void ScenePlayBattleInfoListNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayBattleInfoListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ScenePlayBattleInfo battle_info_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battle_info_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->battle_info_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayBattleInfoListNotify)
}

::google::protobuf::uint8* ScenePlayBattleInfoListNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayBattleInfoListNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ScenePlayBattleInfo battle_info_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->battle_info_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->battle_info_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayBattleInfoListNotify)
  return target;
}

size_t ScenePlayBattleInfoListNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayBattleInfoListNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ScenePlayBattleInfo battle_info_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->battle_info_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battle_info_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayBattleInfoListNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayBattleInfoListNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayBattleInfoListNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayBattleInfoListNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayBattleInfoListNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayBattleInfoListNotify)
    MergeFrom(*source);
  }
}

void ScenePlayBattleInfoListNotify::MergeFrom(const ScenePlayBattleInfoListNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayBattleInfoListNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  battle_info_list_.MergeFrom(from.battle_info_list_);
}

void ScenePlayBattleInfoListNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayBattleInfoListNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayBattleInfoListNotify::CopyFrom(const ScenePlayBattleInfoListNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayBattleInfoListNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayBattleInfoListNotify::IsInitialized() const {
  return true;
}

void ScenePlayBattleInfoListNotify::Swap(ScenePlayBattleInfoListNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayBattleInfoListNotify::InternalSwap(ScenePlayBattleInfoListNotify* other) {
  using std::swap;
  battle_info_list_.InternalSwap(&other->battle_info_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayBattleInfoListNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayBattleInfoListNotify

// repeated .proto.ScenePlayBattleInfo battle_info_list = 12;
int ScenePlayBattleInfoListNotify::battle_info_list_size() const {
  return battle_info_list_.size();
}
void ScenePlayBattleInfoListNotify::clear_battle_info_list() {
  battle_info_list_.Clear();
}
const ::proto::ScenePlayBattleInfo& ScenePlayBattleInfoListNotify::battle_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_.Get(index);
}
::proto::ScenePlayBattleInfo* ScenePlayBattleInfoListNotify::mutable_battle_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_.Mutable(index);
}
::proto::ScenePlayBattleInfo* ScenePlayBattleInfoListNotify::add_battle_info_list() {
  // @@protoc_insertion_point(field_add:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleInfo >*
ScenePlayBattleInfoListNotify::mutable_battle_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return &battle_info_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ScenePlayBattleInfo >&
ScenePlayBattleInfoListNotify::battle_info_list() const {
  // @@protoc_insertion_point(field_list:proto.ScenePlayBattleInfoListNotify.battle_info_list)
  return battle_info_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScenePlayOutofRegionNotify::kPlayIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScenePlayOutofRegionNotify::ScenePlayOutofRegionNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScenePlayOutofRegionNotify)
}
ScenePlayOutofRegionNotify::ScenePlayOutofRegionNotify(const ScenePlayOutofRegionNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  play_id_ = from.play_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ScenePlayOutofRegionNotify)
}

void ScenePlayOutofRegionNotify::SharedCtor() {
  play_id_ = 0u;
  _cached_size_ = 0;
}

ScenePlayOutofRegionNotify::~ScenePlayOutofRegionNotify() {
  // @@protoc_insertion_point(destructor:proto.ScenePlayOutofRegionNotify)
  SharedDtor();
}

void ScenePlayOutofRegionNotify::SharedDtor() {
}

void ScenePlayOutofRegionNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScenePlayOutofRegionNotify::descriptor() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ScenePlayOutofRegionNotify& ScenePlayOutofRegionNotify::default_instance() {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScenePlayOutofRegionNotify* ScenePlayOutofRegionNotify::New(::google::protobuf::Arena* arena) const {
  ScenePlayOutofRegionNotify* n = new ScenePlayOutofRegionNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScenePlayOutofRegionNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScenePlayOutofRegionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  play_id_ = 0u;
  _internal_metadata_.Clear();
}

bool ScenePlayOutofRegionNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScenePlayOutofRegionNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 play_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &play_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScenePlayOutofRegionNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScenePlayOutofRegionNotify)
  return false;
#undef DO_
}

void ScenePlayOutofRegionNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScenePlayOutofRegionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->play_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.ScenePlayOutofRegionNotify)
}

::google::protobuf::uint8* ScenePlayOutofRegionNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.ScenePlayOutofRegionNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->play_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.ScenePlayOutofRegionNotify)
  return target;
}

size_t ScenePlayOutofRegionNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScenePlayOutofRegionNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 play_id = 13;
  if (this->play_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->play_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScenePlayOutofRegionNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.ScenePlayOutofRegionNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const ScenePlayOutofRegionNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ScenePlayOutofRegionNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.ScenePlayOutofRegionNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.ScenePlayOutofRegionNotify)
    MergeFrom(*source);
  }
}

void ScenePlayOutofRegionNotify::MergeFrom(const ScenePlayOutofRegionNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScenePlayOutofRegionNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.play_id() != 0) {
    set_play_id(from.play_id());
  }
}

void ScenePlayOutofRegionNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.ScenePlayOutofRegionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScenePlayOutofRegionNotify::CopyFrom(const ScenePlayOutofRegionNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScenePlayOutofRegionNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScenePlayOutofRegionNotify::IsInitialized() const {
  return true;
}

void ScenePlayOutofRegionNotify::Swap(ScenePlayOutofRegionNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScenePlayOutofRegionNotify::InternalSwap(ScenePlayOutofRegionNotify* other) {
  using std::swap;
  swap(play_id_, other->play_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScenePlayOutofRegionNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fscene_5fplay_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScenePlayOutofRegionNotify

// uint32 play_id = 13;
void ScenePlayOutofRegionNotify::clear_play_id() {
  play_id_ = 0u;
}
::google::protobuf::uint32 ScenePlayOutofRegionNotify::play_id() const {
  // @@protoc_insertion_point(field_get:proto.ScenePlayOutofRegionNotify.play_id)
  return play_id_;
}
void ScenePlayOutofRegionNotify::set_play_id(::google::protobuf::uint32 value) {
  
  play_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ScenePlayOutofRegionNotify.play_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
