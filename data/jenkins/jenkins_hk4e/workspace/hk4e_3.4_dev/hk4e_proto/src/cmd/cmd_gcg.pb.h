// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_gcg.proto

#ifndef PROTOBUF_cmd_2fcmd_5fgcg_2eproto__INCLUDED
#define PROTOBUF_cmd_2fcmd_5fgcg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "define.pb.h"
#include "cmd/cmd_gcg_common.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
class GCGApplyInviteBattleNotify;
class GCGApplyInviteBattleNotifyDefaultTypeInternal;
extern GCGApplyInviteBattleNotifyDefaultTypeInternal _GCGApplyInviteBattleNotify_default_instance_;
class GCGApplyInviteBattleReq;
class GCGApplyInviteBattleReqDefaultTypeInternal;
extern GCGApplyInviteBattleReqDefaultTypeInternal _GCGApplyInviteBattleReq_default_instance_;
class GCGApplyInviteBattleRsp;
class GCGApplyInviteBattleRspDefaultTypeInternal;
extern GCGApplyInviteBattleRspDefaultTypeInternal _GCGApplyInviteBattleRsp_default_instance_;
class GCGAskDuelReq;
class GCGAskDuelReqDefaultTypeInternal;
extern GCGAskDuelReqDefaultTypeInternal _GCGAskDuelReq_default_instance_;
class GCGAskDuelRsp;
class GCGAskDuelRspDefaultTypeInternal;
extern GCGAskDuelRspDefaultTypeInternal _GCGAskDuelRsp_default_instance_;
class GCGAttackCostInfo;
class GCGAttackCostInfoDefaultTypeInternal;
extern GCGAttackCostInfoDefaultTypeInternal _GCGAttackCostInfo_default_instance_;
class GCGAttackCostInfo_CostMapEntry;
class GCGAttackCostInfo_CostMapEntryDefaultTypeInternal;
extern GCGAttackCostInfo_CostMapEntryDefaultTypeInternal _GCGAttackCostInfo_CostMapEntry_default_instance_;
class GCGBackToDuelReq;
class GCGBackToDuelReqDefaultTypeInternal;
extern GCGBackToDuelReqDefaultTypeInternal _GCGBackToDuelReq_default_instance_;
class GCGBackToDuelRsp;
class GCGBackToDuelRspDefaultTypeInternal;
extern GCGBackToDuelRspDefaultTypeInternal _GCGBackToDuelRsp_default_instance_;
class GCGBasicDataNotify;
class GCGBasicDataNotifyDefaultTypeInternal;
extern GCGBasicDataNotifyDefaultTypeInternal _GCGBasicDataNotify_default_instance_;
class GCGBossChallengeData;
class GCGBossChallengeDataDefaultTypeInternal;
extern GCGBossChallengeDataDefaultTypeInternal _GCGBossChallengeData_default_instance_;
class GCGBossChallengeUpdateNotify;
class GCGBossChallengeUpdateNotifyDefaultTypeInternal;
extern GCGBossChallengeUpdateNotifyDefaultTypeInternal _GCGBossChallengeUpdateNotify_default_instance_;
class GCGCard;
class GCGCardDefaultTypeInternal;
extern GCGCardDefaultTypeInternal _GCGCard_default_instance_;
class GCGCardSkillLimitsInfo;
class GCGCardSkillLimitsInfoDefaultTypeInternal;
extern GCGCardSkillLimitsInfoDefaultTypeInternal _GCGCardSkillLimitsInfo_default_instance_;
class GCGChallengeUpdateNotify;
class GCGChallengeUpdateNotifyDefaultTypeInternal;
extern GCGChallengeUpdateNotifyDefaultTypeInternal _GCGChallengeUpdateNotify_default_instance_;
class GCGChangeOnstageInfo;
class GCGChangeOnstageInfoDefaultTypeInternal;
extern GCGChangeOnstageInfoDefaultTypeInternal _GCGChangeOnstageInfo_default_instance_;
class GCGClientSettleReq;
class GCGClientSettleReqDefaultTypeInternal;
extern GCGClientSettleReqDefaultTypeInternal _GCGClientSettleReq_default_instance_;
class GCGClientSettleRsp;
class GCGClientSettleRspDefaultTypeInternal;
extern GCGClientSettleRspDefaultTypeInternal _GCGClientSettleRsp_default_instance_;
class GCGControllerShowInfo;
class GCGControllerShowInfoDefaultTypeInternal;
extern GCGControllerShowInfoDefaultTypeInternal _GCGControllerShowInfo_default_instance_;
class GCGCostReviseInfo;
class GCGCostReviseInfoDefaultTypeInternal;
extern GCGCostReviseInfoDefaultTypeInternal _GCGCostReviseInfo_default_instance_;
class GCGDSBanCardNotify;
class GCGDSBanCardNotifyDefaultTypeInternal;
extern GCGDSBanCardNotifyDefaultTypeInternal _GCGDSBanCardNotify_default_instance_;
class GCGDSCardBackUnlockNotify;
class GCGDSCardBackUnlockNotifyDefaultTypeInternal;
extern GCGDSCardBackUnlockNotifyDefaultTypeInternal _GCGDSCardBackUnlockNotify_default_instance_;
class GCGDSCardData;
class GCGDSCardDataDefaultTypeInternal;
extern GCGDSCardDataDefaultTypeInternal _GCGDSCardData_default_instance_;
class GCGDSCardFaceUnlockNotify;
class GCGDSCardFaceUnlockNotifyDefaultTypeInternal;
extern GCGDSCardFaceUnlockNotifyDefaultTypeInternal _GCGDSCardFaceUnlockNotify_default_instance_;
class GCGDSCardFaceUpdateNotify;
class GCGDSCardFaceUpdateNotifyDefaultTypeInternal;
extern GCGDSCardFaceUpdateNotifyDefaultTypeInternal _GCGDSCardFaceUpdateNotify_default_instance_;
class GCGDSCardNumChangeNotify;
class GCGDSCardNumChangeNotifyDefaultTypeInternal;
extern GCGDSCardNumChangeNotifyDefaultTypeInternal _GCGDSCardNumChangeNotify_default_instance_;
class GCGDSCardProficiencyNotify;
class GCGDSCardProficiencyNotifyDefaultTypeInternal;
extern GCGDSCardProficiencyNotifyDefaultTypeInternal _GCGDSCardProficiencyNotify_default_instance_;
class GCGDSChangeCardBackReq;
class GCGDSChangeCardBackReqDefaultTypeInternal;
extern GCGDSChangeCardBackReqDefaultTypeInternal _GCGDSChangeCardBackReq_default_instance_;
class GCGDSChangeCardBackRsp;
class GCGDSChangeCardBackRspDefaultTypeInternal;
extern GCGDSChangeCardBackRspDefaultTypeInternal _GCGDSChangeCardBackRsp_default_instance_;
class GCGDSChangeCardFaceReq;
class GCGDSChangeCardFaceReqDefaultTypeInternal;
extern GCGDSChangeCardFaceReqDefaultTypeInternal _GCGDSChangeCardFaceReq_default_instance_;
class GCGDSChangeCardFaceRsp;
class GCGDSChangeCardFaceRspDefaultTypeInternal;
extern GCGDSChangeCardFaceRspDefaultTypeInternal _GCGDSChangeCardFaceRsp_default_instance_;
class GCGDSChangeCurDeckReq;
class GCGDSChangeCurDeckReqDefaultTypeInternal;
extern GCGDSChangeCurDeckReqDefaultTypeInternal _GCGDSChangeCurDeckReq_default_instance_;
class GCGDSChangeCurDeckRsp;
class GCGDSChangeCurDeckRspDefaultTypeInternal;
extern GCGDSChangeCurDeckRspDefaultTypeInternal _GCGDSChangeCurDeckRsp_default_instance_;
class GCGDSChangeDeckNameReq;
class GCGDSChangeDeckNameReqDefaultTypeInternal;
extern GCGDSChangeDeckNameReqDefaultTypeInternal _GCGDSChangeDeckNameReq_default_instance_;
class GCGDSChangeDeckNameRsp;
class GCGDSChangeDeckNameRspDefaultTypeInternal;
extern GCGDSChangeDeckNameRspDefaultTypeInternal _GCGDSChangeDeckNameRsp_default_instance_;
class GCGDSChangeFieldReq;
class GCGDSChangeFieldReqDefaultTypeInternal;
extern GCGDSChangeFieldReqDefaultTypeInternal _GCGDSChangeFieldReq_default_instance_;
class GCGDSChangeFieldRsp;
class GCGDSChangeFieldRspDefaultTypeInternal;
extern GCGDSChangeFieldRspDefaultTypeInternal _GCGDSChangeFieldRsp_default_instance_;
class GCGDSCurDeckChangeNotify;
class GCGDSCurDeckChangeNotifyDefaultTypeInternal;
extern GCGDSCurDeckChangeNotifyDefaultTypeInternal _GCGDSCurDeckChangeNotify_default_instance_;
class GCGDSDataNotify;
class GCGDSDataNotifyDefaultTypeInternal;
extern GCGDSDataNotifyDefaultTypeInternal _GCGDSDataNotify_default_instance_;
class GCGDSDeckData;
class GCGDSDeckDataDefaultTypeInternal;
extern GCGDSDeckDataDefaultTypeInternal _GCGDSDeckData_default_instance_;
class GCGDSDeckSaveReq;
class GCGDSDeckSaveReqDefaultTypeInternal;
extern GCGDSDeckSaveReqDefaultTypeInternal _GCGDSDeckSaveReq_default_instance_;
class GCGDSDeckSaveRsp;
class GCGDSDeckSaveRspDefaultTypeInternal;
extern GCGDSDeckSaveRspDefaultTypeInternal _GCGDSDeckSaveRsp_default_instance_;
class GCGDSDeckUnlockNotify;
class GCGDSDeckUnlockNotifyDefaultTypeInternal;
extern GCGDSDeckUnlockNotifyDefaultTypeInternal _GCGDSDeckUnlockNotify_default_instance_;
class GCGDSDeckUpdateNotify;
class GCGDSDeckUpdateNotifyDefaultTypeInternal;
extern GCGDSDeckUpdateNotifyDefaultTypeInternal _GCGDSDeckUpdateNotify_default_instance_;
class GCGDSDeleteDeckReq;
class GCGDSDeleteDeckReqDefaultTypeInternal;
extern GCGDSDeleteDeckReqDefaultTypeInternal _GCGDSDeleteDeckReq_default_instance_;
class GCGDSDeleteDeckRsp;
class GCGDSDeleteDeckRspDefaultTypeInternal;
extern GCGDSDeleteDeckRspDefaultTypeInternal _GCGDSDeleteDeckRsp_default_instance_;
class GCGDSFieldUnlockNotify;
class GCGDSFieldUnlockNotifyDefaultTypeInternal;
extern GCGDSFieldUnlockNotifyDefaultTypeInternal _GCGDSFieldUnlockNotify_default_instance_;
class GCGDSTakeCardProficiencyRewardReq;
class GCGDSTakeCardProficiencyRewardReqDefaultTypeInternal;
extern GCGDSTakeCardProficiencyRewardReqDefaultTypeInternal _GCGDSTakeCardProficiencyRewardReq_default_instance_;
class GCGDSTakeCardProficiencyRewardRsp;
class GCGDSTakeCardProficiencyRewardRspDefaultTypeInternal;
extern GCGDSTakeCardProficiencyRewardRspDefaultTypeInternal _GCGDSTakeCardProficiencyRewardRsp_default_instance_;
class GCGDamageDetail;
class GCGDamageDetailDefaultTypeInternal;
extern GCGDamageDetailDefaultTypeInternal _GCGDamageDetail_default_instance_;
class GCGDebugReplayNotify;
class GCGDebugReplayNotifyDefaultTypeInternal;
extern GCGDebugReplayNotifyDefaultTypeInternal _GCGDebugReplayNotify_default_instance_;
class GCGDuel;
class GCGDuelDefaultTypeInternal;
extern GCGDuelDefaultTypeInternal _GCGDuel_default_instance_;
class GCGDuelChallenge;
class GCGDuelChallengeDefaultTypeInternal;
extern GCGDuelChallengeDefaultTypeInternal _GCGDuelChallenge_default_instance_;
class GCGGameBriefData;
class GCGGameBriefDataDefaultTypeInternal;
extern GCGGameBriefDataDefaultTypeInternal _GCGGameBriefData_default_instance_;
class GCGGameBriefDataNotify;
class GCGGameBriefDataNotifyDefaultTypeInternal;
extern GCGGameBriefDataNotifyDefaultTypeInternal _GCGGameBriefDataNotify_default_instance_;
class GCGGameCreateFailReasonNotify;
class GCGGameCreateFailReasonNotifyDefaultTypeInternal;
extern GCGGameCreateFailReasonNotifyDefaultTypeInternal _GCGGameCreateFailReasonNotify_default_instance_;
class GCGGameMaxNotify;
class GCGGameMaxNotifyDefaultTypeInternal;
extern GCGGameMaxNotifyDefaultTypeInternal _GCGGameMaxNotify_default_instance_;
class GCGGrowthLevelNotify;
class GCGGrowthLevelNotifyDefaultTypeInternal;
extern GCGGrowthLevelNotifyDefaultTypeInternal _GCGGrowthLevelNotify_default_instance_;
class GCGGrowthLevelRewardNotify;
class GCGGrowthLevelRewardNotifyDefaultTypeInternal;
extern GCGGrowthLevelRewardNotifyDefaultTypeInternal _GCGGrowthLevelRewardNotify_default_instance_;
class GCGGrowthLevelTakeRewardReq;
class GCGGrowthLevelTakeRewardReqDefaultTypeInternal;
extern GCGGrowthLevelTakeRewardReqDefaultTypeInternal _GCGGrowthLevelTakeRewardReq_default_instance_;
class GCGGrowthLevelTakeRewardRsp;
class GCGGrowthLevelTakeRewardRspDefaultTypeInternal;
extern GCGGrowthLevelTakeRewardRspDefaultTypeInternal _GCGGrowthLevelTakeRewardRsp_default_instance_;
class GCGHeartBeatNotify;
class GCGHeartBeatNotifyDefaultTypeInternal;
extern GCGHeartBeatNotifyDefaultTypeInternal _GCGHeartBeatNotify_default_instance_;
class GCGInitFinishReq;
class GCGInitFinishReqDefaultTypeInternal;
extern GCGInitFinishReqDefaultTypeInternal _GCGInitFinishReq_default_instance_;
class GCGInitFinishRsp;
class GCGInitFinishRspDefaultTypeInternal;
extern GCGInitFinishRspDefaultTypeInternal _GCGInitFinishRsp_default_instance_;
class GCGInviteBattleNotify;
class GCGInviteBattleNotifyDefaultTypeInternal;
extern GCGInviteBattleNotifyDefaultTypeInternal _GCGInviteBattleNotify_default_instance_;
class GCGInviteGuestBattleReq;
class GCGInviteGuestBattleReqDefaultTypeInternal;
extern GCGInviteGuestBattleReqDefaultTypeInternal _GCGInviteGuestBattleReq_default_instance_;
class GCGInviteGuestBattleRsp;
class GCGInviteGuestBattleRspDefaultTypeInternal;
extern GCGInviteGuestBattleRspDefaultTypeInternal _GCGInviteGuestBattleRsp_default_instance_;
class GCGLevelChallengeDeleteNotify;
class GCGLevelChallengeDeleteNotifyDefaultTypeInternal;
extern GCGLevelChallengeDeleteNotifyDefaultTypeInternal _GCGLevelChallengeDeleteNotify_default_instance_;
class GCGLevelChallengeFinishNotify;
class GCGLevelChallengeFinishNotifyDefaultTypeInternal;
extern GCGLevelChallengeFinishNotifyDefaultTypeInternal _GCGLevelChallengeFinishNotify_default_instance_;
class GCGLevelChallengeNotify;
class GCGLevelChallengeNotifyDefaultTypeInternal;
extern GCGLevelChallengeNotifyDefaultTypeInternal _GCGLevelChallengeNotify_default_instance_;
class GCGLevelData;
class GCGLevelDataDefaultTypeInternal;
extern GCGLevelDataDefaultTypeInternal _GCGLevelData_default_instance_;
class GCGLimitsInfo;
class GCGLimitsInfoDefaultTypeInternal;
extern GCGLimitsInfoDefaultTypeInternal _GCGLimitsInfo_default_instance_;
class GCGMessage;
class GCGMessageDefaultTypeInternal;
extern GCGMessageDefaultTypeInternal _GCGMessage_default_instance_;
class GCGMessagePack;
class GCGMessagePackDefaultTypeInternal;
extern GCGMessagePackDefaultTypeInternal _GCGMessagePack_default_instance_;
class GCGMessagePackNotify;
class GCGMessagePackNotifyDefaultTypeInternal;
extern GCGMessagePackNotifyDefaultTypeInternal _GCGMessagePackNotify_default_instance_;
class GCGMsgAddCards;
class GCGMsgAddCardsDefaultTypeInternal;
extern GCGMsgAddCardsDefaultTypeInternal _GCGMsgAddCards_default_instance_;
class GCGMsgAddDice;
class GCGMsgAddDiceDefaultTypeInternal;
extern GCGMsgAddDiceDefaultTypeInternal _GCGMsgAddDice_default_instance_;
class GCGMsgAddDice_BeforeDiceMapEntry;
class GCGMsgAddDice_BeforeDiceMapEntryDefaultTypeInternal;
extern GCGMsgAddDice_BeforeDiceMapEntryDefaultTypeInternal _GCGMsgAddDice_BeforeDiceMapEntry_default_instance_;
class GCGMsgAddDice_DiceMapEntry;
class GCGMsgAddDice_DiceMapEntryDefaultTypeInternal;
extern GCGMsgAddDice_DiceMapEntryDefaultTypeInternal _GCGMsgAddDice_DiceMapEntry_default_instance_;
class GCGMsgCardUpdate;
class GCGMsgCardUpdateDefaultTypeInternal;
extern GCGMsgCardUpdateDefaultTypeInternal _GCGMsgCardUpdate_default_instance_;
class GCGMsgCharDie;
class GCGMsgCharDieDefaultTypeInternal;
extern GCGMsgCharDieDefaultTypeInternal _GCGMsgCharDie_default_instance_;
class GCGMsgClientPerform;
class GCGMsgClientPerformDefaultTypeInternal;
extern GCGMsgClientPerformDefaultTypeInternal _GCGMsgClientPerform_default_instance_;
class GCGMsgCostDice;
class GCGMsgCostDiceDefaultTypeInternal;
extern GCGMsgCostDiceDefaultTypeInternal _GCGMsgCostDice_default_instance_;
class GCGMsgCostRevise;
class GCGMsgCostReviseDefaultTypeInternal;
extern GCGMsgCostReviseDefaultTypeInternal _GCGMsgCostRevise_default_instance_;
class GCGMsgDiceReroll;
class GCGMsgDiceRerollDefaultTypeInternal;
extern GCGMsgDiceRerollDefaultTypeInternal _GCGMsgDiceReroll_default_instance_;
class GCGMsgDiceRoll;
class GCGMsgDiceRollDefaultTypeInternal;
extern GCGMsgDiceRollDefaultTypeInternal _GCGMsgDiceRoll_default_instance_;
class GCGMsgDuelDataChange;
class GCGMsgDuelDataChangeDefaultTypeInternal;
extern GCGMsgDuelDataChangeDefaultTypeInternal _GCGMsgDuelDataChange_default_instance_;
class GCGMsgGameOver;
class GCGMsgGameOverDefaultTypeInternal;
extern GCGMsgGameOverDefaultTypeInternal _GCGMsgGameOver_default_instance_;
class GCGMsgModifyAdd;
class GCGMsgModifyAddDefaultTypeInternal;
extern GCGMsgModifyAddDefaultTypeInternal _GCGMsgModifyAdd_default_instance_;
class GCGMsgModifyRemove;
class GCGMsgModifyRemoveDefaultTypeInternal;
extern GCGMsgModifyRemoveDefaultTypeInternal _GCGMsgModifyRemove_default_instance_;
class GCGMsgMoveCard;
class GCGMsgMoveCardDefaultTypeInternal;
extern GCGMsgMoveCardDefaultTypeInternal _GCGMsgMoveCard_default_instance_;
class GCGMsgNewCard;
class GCGMsgNewCardDefaultTypeInternal;
extern GCGMsgNewCardDefaultTypeInternal _GCGMsgNewCard_default_instance_;
class GCGMsgNoDamageSkillResult;
class GCGMsgNoDamageSkillResultDefaultTypeInternal;
extern GCGMsgNoDamageSkillResultDefaultTypeInternal _GCGMsgNoDamageSkillResult_default_instance_;
class GCGMsgOpTimer;
class GCGMsgOpTimerDefaultTypeInternal;
extern GCGMsgOpTimerDefaultTypeInternal _GCGMsgOpTimer_default_instance_;
class GCGMsgPVEIntention;
class GCGMsgPVEIntentionDefaultTypeInternal;
extern GCGMsgPVEIntentionDefaultTypeInternal _GCGMsgPVEIntention_default_instance_;
class GCGMsgPVEIntentionChange;
class GCGMsgPVEIntentionChangeDefaultTypeInternal;
extern GCGMsgPVEIntentionChangeDefaultTypeInternal _GCGMsgPVEIntentionChange_default_instance_;
class GCGMsgPVEIntentionInfo;
class GCGMsgPVEIntentionInfoDefaultTypeInternal;
extern GCGMsgPVEIntentionInfoDefaultTypeInternal _GCGMsgPVEIntentionInfo_default_instance_;
class GCGMsgPVEIntentionInfo_IntentionMapEntry;
class GCGMsgPVEIntentionInfo_IntentionMapEntryDefaultTypeInternal;
extern GCGMsgPVEIntentionInfo_IntentionMapEntryDefaultTypeInternal _GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_;
class GCGMsgPass;
class GCGMsgPassDefaultTypeInternal;
extern GCGMsgPassDefaultTypeInternal _GCGMsgPass_default_instance_;
class GCGMsgPhaseChange;
class GCGMsgPhaseChangeDefaultTypeInternal;
extern GCGMsgPhaseChangeDefaultTypeInternal _GCGMsgPhaseChange_default_instance_;
class GCGMsgPhaseChange_AllowControllerMapEntry;
class GCGMsgPhaseChange_AllowControllerMapEntryDefaultTypeInternal;
extern GCGMsgPhaseChange_AllowControllerMapEntryDefaultTypeInternal _GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_;
class GCGMsgPhaseContinue;
class GCGMsgPhaseContinueDefaultTypeInternal;
extern GCGMsgPhaseContinueDefaultTypeInternal _GCGMsgPhaseContinue_default_instance_;
class GCGMsgReactionBegin;
class GCGMsgReactionBeginDefaultTypeInternal;
extern GCGMsgReactionBeginDefaultTypeInternal _GCGMsgReactionBegin_default_instance_;
class GCGMsgReactionEnd;
class GCGMsgReactionEndDefaultTypeInternal;
extern GCGMsgReactionEndDefaultTypeInternal _GCGMsgReactionEnd_default_instance_;
class GCGMsgRemoveCards;
class GCGMsgRemoveCardsDefaultTypeInternal;
extern GCGMsgRemoveCardsDefaultTypeInternal _GCGMsgRemoveCards_default_instance_;
class GCGMsgSelectOnStage;
class GCGMsgSelectOnStageDefaultTypeInternal;
extern GCGMsgSelectOnStageDefaultTypeInternal _GCGMsgSelectOnStage_default_instance_;
class GCGMsgSelectOnStageByEffect;
class GCGMsgSelectOnStageByEffectDefaultTypeInternal;
extern GCGMsgSelectOnStageByEffectDefaultTypeInternal _GCGMsgSelectOnStageByEffect_default_instance_;
class GCGMsgSkillLimitsChange;
class GCGMsgSkillLimitsChangeDefaultTypeInternal;
extern GCGMsgSkillLimitsChangeDefaultTypeInternal _GCGMsgSkillLimitsChange_default_instance_;
class GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry;
class GCGMsgSkillLimitsChange_CardLimitsChangeMapEntryDefaultTypeInternal;
extern GCGMsgSkillLimitsChange_CardLimitsChangeMapEntryDefaultTypeInternal _GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_;
class GCGMsgSkillResult;
class GCGMsgSkillResultDefaultTypeInternal;
extern GCGMsgSkillResultDefaultTypeInternal _GCGMsgSkillResult_default_instance_;
class GCGMsgTokenChange;
class GCGMsgTokenChangeDefaultTypeInternal;
extern GCGMsgTokenChangeDefaultTypeInternal _GCGMsgTokenChange_default_instance_;
class GCGMsgUpdateController;
class GCGMsgUpdateControllerDefaultTypeInternal;
extern GCGMsgUpdateControllerDefaultTypeInternal _GCGMsgUpdateController_default_instance_;
class GCGMsgUpdateController_AllowControllerMapEntry;
class GCGMsgUpdateController_AllowControllerMapEntryDefaultTypeInternal;
extern GCGMsgUpdateController_AllowControllerMapEntryDefaultTypeInternal _GCGMsgUpdateController_AllowControllerMapEntry_default_instance_;
class GCGMsgUseSkill;
class GCGMsgUseSkillDefaultTypeInternal;
extern GCGMsgUseSkillDefaultTypeInternal _GCGMsgUseSkill_default_instance_;
class GCGMsgUseSkillEnd;
class GCGMsgUseSkillEndDefaultTypeInternal;
extern GCGMsgUseSkillEndDefaultTypeInternal _GCGMsgUseSkillEnd_default_instance_;
class GCGMsgWaitingListChange;
class GCGMsgWaitingListChangeDefaultTypeInternal;
extern GCGMsgWaitingListChangeDefaultTypeInternal _GCGMsgWaitingListChange_default_instance_;
class GCGOperation;
class GCGOperationDefaultTypeInternal;
extern GCGOperationDefaultTypeInternal _GCGOperation_default_instance_;
class GCGOperationAttack;
class GCGOperationAttackDefaultTypeInternal;
extern GCGOperationAttackDefaultTypeInternal _GCGOperationAttack_default_instance_;
class GCGOperationOnStageSelect;
class GCGOperationOnStageSelectDefaultTypeInternal;
extern GCGOperationOnStageSelectDefaultTypeInternal _GCGOperationOnStageSelect_default_instance_;
class GCGOperationPass;
class GCGOperationPassDefaultTypeInternal;
extern GCGOperationPassDefaultTypeInternal _GCGOperationPass_default_instance_;
class GCGOperationPlayCard;
class GCGOperationPlayCardDefaultTypeInternal;
extern GCGOperationPlayCardDefaultTypeInternal _GCGOperationPlayCard_default_instance_;
class GCGOperationReboot;
class GCGOperationRebootDefaultTypeInternal;
extern GCGOperationRebootDefaultTypeInternal _GCGOperationReboot_default_instance_;
class GCGOperationRedraw;
class GCGOperationRedrawDefaultTypeInternal;
extern GCGOperationRedrawDefaultTypeInternal _GCGOperationRedraw_default_instance_;
class GCGOperationReplay;
class GCGOperationReplayDefaultTypeInternal;
extern GCGOperationReplayDefaultTypeInternal _GCGOperationReplay_default_instance_;
class GCGOperationReq;
class GCGOperationReqDefaultTypeInternal;
extern GCGOperationReqDefaultTypeInternal _GCGOperationReq_default_instance_;
class GCGOperationReroll;
class GCGOperationRerollDefaultTypeInternal;
extern GCGOperationRerollDefaultTypeInternal _GCGOperationReroll_default_instance_;
class GCGOperationRsp;
class GCGOperationRspDefaultTypeInternal;
extern GCGOperationRspDefaultTypeInternal _GCGOperationRsp_default_instance_;
class GCGOperationSurrender;
class GCGOperationSurrenderDefaultTypeInternal;
extern GCGOperationSurrenderDefaultTypeInternal _GCGOperationSurrender_default_instance_;
class GCGPVEIntention;
class GCGPVEIntentionDefaultTypeInternal;
extern GCGPVEIntentionDefaultTypeInternal _GCGPVEIntention_default_instance_;
class GCGPhase;
class GCGPhaseDefaultTypeInternal;
extern GCGPhaseDefaultTypeInternal _GCGPhase_default_instance_;
class GCGPhase_AllowControllerMapEntry;
class GCGPhase_AllowControllerMapEntryDefaultTypeInternal;
extern GCGPhase_AllowControllerMapEntryDefaultTypeInternal _GCGPhase_AllowControllerMapEntry_default_instance_;
class GCGPlayCardCostInfo;
class GCGPlayCardCostInfoDefaultTypeInternal;
extern GCGPlayCardCostInfoDefaultTypeInternal _GCGPlayCardCostInfo_default_instance_;
class GCGPlayCardCostInfo_CostMapEntry;
class GCGPlayCardCostInfo_CostMapEntryDefaultTypeInternal;
extern GCGPlayCardCostInfo_CostMapEntryDefaultTypeInternal _GCGPlayCardCostInfo_CostMapEntry_default_instance_;
class GCGPlayerBriefData;
class GCGPlayerBriefDataDefaultTypeInternal;
extern GCGPlayerBriefDataDefaultTypeInternal _GCGPlayerBriefData_default_instance_;
class GCGPlayerBriefData_CardFaceMapEntry;
class GCGPlayerBriefData_CardFaceMapEntryDefaultTypeInternal;
extern GCGPlayerBriefData_CardFaceMapEntryDefaultTypeInternal _GCGPlayerBriefData_CardFaceMapEntry_default_instance_;
class GCGPlayerField;
class GCGPlayerFieldDefaultTypeInternal;
extern GCGPlayerFieldDefaultTypeInternal _GCGPlayerField_default_instance_;
class GCGPlayerField_ModifyZoneMapEntry;
class GCGPlayerField_ModifyZoneMapEntryDefaultTypeInternal;
extern GCGPlayerField_ModifyZoneMapEntryDefaultTypeInternal _GCGPlayerField_ModifyZoneMapEntry_default_instance_;
class GCGPlayerGCGState;
class GCGPlayerGCGStateDefaultTypeInternal;
extern GCGPlayerGCGStateDefaultTypeInternal _GCGPlayerGCGState_default_instance_;
class GCGReplayControllerData;
class GCGReplayControllerDataDefaultTypeInternal;
extern GCGReplayControllerDataDefaultTypeInternal _GCGReplayControllerData_default_instance_;
class GCGReplayOperationData;
class GCGReplayOperationDataDefaultTypeInternal;
extern GCGReplayOperationDataDefaultTypeInternal _GCGReplayOperationData_default_instance_;
class GCGResourceStateNotify;
class GCGResourceStateNotifyDefaultTypeInternal;
extern GCGResourceStateNotifyDefaultTypeInternal _GCGResourceStateNotify_default_instance_;
class GCGSelectOnStageCostInfo;
class GCGSelectOnStageCostInfoDefaultTypeInternal;
extern GCGSelectOnStageCostInfoDefaultTypeInternal _GCGSelectOnStageCostInfo_default_instance_;
class GCGSelectOnStageCostInfo_CostMapEntry;
class GCGSelectOnStageCostInfo_CostMapEntryDefaultTypeInternal;
extern GCGSelectOnStageCostInfo_CostMapEntryDefaultTypeInternal _GCGSelectOnStageCostInfo_CostMapEntry_default_instance_;
class GCGSettleNotify;
class GCGSettleNotifyDefaultTypeInternal;
extern GCGSettleNotifyDefaultTypeInternal _GCGSettleNotify_default_instance_;
class GCGSettleOptionReq;
class GCGSettleOptionReqDefaultTypeInternal;
extern GCGSettleOptionReqDefaultTypeInternal _GCGSettleOptionReq_default_instance_;
class GCGSettleOptionRsp;
class GCGSettleOptionRspDefaultTypeInternal;
extern GCGSettleOptionRspDefaultTypeInternal _GCGSettleOptionRsp_default_instance_;
class GCGSkillLimitsInfo;
class GCGSkillLimitsInfoDefaultTypeInternal;
extern GCGSkillLimitsInfoDefaultTypeInternal _GCGSkillLimitsInfo_default_instance_;
class GCGSkillPreviewAskReq;
class GCGSkillPreviewAskReqDefaultTypeInternal;
extern GCGSkillPreviewAskReqDefaultTypeInternal _GCGSkillPreviewAskReq_default_instance_;
class GCGSkillPreviewAskRsp;
class GCGSkillPreviewAskRspDefaultTypeInternal;
extern GCGSkillPreviewAskRspDefaultTypeInternal _GCGSkillPreviewAskRsp_default_instance_;
class GCGSkillPreviewCardInfo;
class GCGSkillPreviewCardInfoDefaultTypeInternal;
extern GCGSkillPreviewCardInfoDefaultTypeInternal _GCGSkillPreviewCardInfo_default_instance_;
class GCGSkillPreviewElementReactionInfo;
class GCGSkillPreviewElementReactionInfoDefaultTypeInternal;
extern GCGSkillPreviewElementReactionInfoDefaultTypeInternal _GCGSkillPreviewElementReactionInfo_default_instance_;
class GCGSkillPreviewExtraInfo;
class GCGSkillPreviewExtraInfoDefaultTypeInternal;
extern GCGSkillPreviewExtraInfoDefaultTypeInternal _GCGSkillPreviewExtraInfo_default_instance_;
class GCGSkillPreviewHpInfo;
class GCGSkillPreviewHpInfoDefaultTypeInternal;
extern GCGSkillPreviewHpInfoDefaultTypeInternal _GCGSkillPreviewHpInfo_default_instance_;
class GCGSkillPreviewInfo;
class GCGSkillPreviewInfoDefaultTypeInternal;
extern GCGSkillPreviewInfoDefaultTypeInternal _GCGSkillPreviewInfo_default_instance_;
class GCGSkillPreviewInfo_CardTokenChangeMapEntry;
class GCGSkillPreviewInfo_CardTokenChangeMapEntryDefaultTypeInternal;
extern GCGSkillPreviewInfo_CardTokenChangeMapEntryDefaultTypeInternal _GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_;
class GCGSkillPreviewInfo_HpInfoMapEntry;
class GCGSkillPreviewInfo_HpInfoMapEntryDefaultTypeInternal;
extern GCGSkillPreviewInfo_HpInfoMapEntryDefaultTypeInternal _GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_;
class GCGSkillPreviewInfo_ReactionInfoMapEntry;
class GCGSkillPreviewInfo_ReactionInfoMapEntryDefaultTypeInternal;
extern GCGSkillPreviewInfo_ReactionInfoMapEntryDefaultTypeInternal _GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_;
class GCGSkillPreviewNotify;
class GCGSkillPreviewNotifyDefaultTypeInternal;
extern GCGSkillPreviewNotifyDefaultTypeInternal _GCGSkillPreviewNotify_default_instance_;
class GCGSkillPreviewOnstageChangeInfo;
class GCGSkillPreviewOnstageChangeInfoDefaultTypeInternal;
extern GCGSkillPreviewOnstageChangeInfoDefaultTypeInternal _GCGSkillPreviewOnstageChangeInfo_default_instance_;
class GCGSkillPreviewPlayCardInfo;
class GCGSkillPreviewPlayCardInfoDefaultTypeInternal;
extern GCGSkillPreviewPlayCardInfoDefaultTypeInternal _GCGSkillPreviewPlayCardInfo_default_instance_;
class GCGSkillPreviewReactionInfo;
class GCGSkillPreviewReactionInfoDefaultTypeInternal;
extern GCGSkillPreviewReactionInfoDefaultTypeInternal _GCGSkillPreviewReactionInfo_default_instance_;
class GCGSkillPreviewTokenChangeInfo;
class GCGSkillPreviewTokenChangeInfoDefaultTypeInternal;
extern GCGSkillPreviewTokenChangeInfoDefaultTypeInternal _GCGSkillPreviewTokenChangeInfo_default_instance_;
class GCGSkillPreviewTokenInfo;
class GCGSkillPreviewTokenInfoDefaultTypeInternal;
extern GCGSkillPreviewTokenInfoDefaultTypeInternal _GCGSkillPreviewTokenInfo_default_instance_;
class GCGStartChallengeByCheckRewardReq;
class GCGStartChallengeByCheckRewardReqDefaultTypeInternal;
extern GCGStartChallengeByCheckRewardReqDefaultTypeInternal _GCGStartChallengeByCheckRewardReq_default_instance_;
class GCGStartChallengeByCheckRewardRsp;
class GCGStartChallengeByCheckRewardRspDefaultTypeInternal;
extern GCGStartChallengeByCheckRewardRspDefaultTypeInternal _GCGStartChallengeByCheckRewardRsp_default_instance_;
class GCGStartChallengeReq;
class GCGStartChallengeReqDefaultTypeInternal;
extern GCGStartChallengeReqDefaultTypeInternal _GCGStartChallengeReq_default_instance_;
class GCGStartChallengeRsp;
class GCGStartChallengeRspDefaultTypeInternal;
extern GCGStartChallengeRspDefaultTypeInternal _GCGStartChallengeRsp_default_instance_;
class GCGTCInviteReq;
class GCGTCInviteReqDefaultTypeInternal;
extern GCGTCInviteReqDefaultTypeInternal _GCGTCInviteReq_default_instance_;
class GCGTCInviteRsp;
class GCGTCInviteRspDefaultTypeInternal;
extern GCGTCInviteRspDefaultTypeInternal _GCGTCInviteRsp_default_instance_;
class GCGTCTavernChallengeData;
class GCGTCTavernChallengeDataDefaultTypeInternal;
extern GCGTCTavernChallengeDataDefaultTypeInternal _GCGTCTavernChallengeData_default_instance_;
class GCGTCTavernChallengeDataNotify;
class GCGTCTavernChallengeDataNotifyDefaultTypeInternal;
extern GCGTCTavernChallengeDataNotifyDefaultTypeInternal _GCGTCTavernChallengeDataNotify_default_instance_;
class GCGTCTavernChallengeUpdateNotify;
class GCGTCTavernChallengeUpdateNotifyDefaultTypeInternal;
extern GCGTCTavernChallengeUpdateNotifyDefaultTypeInternal _GCGTCTavernChallengeUpdateNotify_default_instance_;
class GCGTCTavernInfoNotify;
class GCGTCTavernInfoNotifyDefaultTypeInternal;
extern GCGTCTavernInfoNotifyDefaultTypeInternal _GCGTCTavernInfoNotify_default_instance_;
class GCGTavernNpcInfo;
class GCGTavernNpcInfoDefaultTypeInternal;
extern GCGTavernNpcInfoDefaultTypeInternal _GCGTavernNpcInfo_default_instance_;
class GCGTavernNpcInfoNotify;
class GCGTavernNpcInfoNotifyDefaultTypeInternal;
extern GCGTavernNpcInfoNotifyDefaultTypeInternal _GCGTavernNpcInfoNotify_default_instance_;
class GCGToken;
class GCGTokenDefaultTypeInternal;
extern GCGTokenDefaultTypeInternal _GCGToken_default_instance_;
class GCGWaitingCharacter;
class GCGWaitingCharacterDefaultTypeInternal;
extern GCGWaitingCharacterDefaultTypeInternal _GCGWaitingCharacter_default_instance_;
class GCGWeekChallengeInfo;
class GCGWeekChallengeInfoDefaultTypeInternal;
extern GCGWeekChallengeInfoDefaultTypeInternal _GCGWeekChallengeInfo_default_instance_;
class GCGWeekChallengeInfoNotify;
class GCGWeekChallengeInfoNotifyDefaultTypeInternal;
extern GCGWeekChallengeInfoNotifyDefaultTypeInternal _GCGWeekChallengeInfoNotify_default_instance_;
class GCGWorldChallengeUnlockNotify;
class GCGWorldChallengeUnlockNotifyDefaultTypeInternal;
extern GCGWorldChallengeUnlockNotifyDefaultTypeInternal _GCGWorldChallengeUnlockNotify_default_instance_;
class GCGWorldPlayerGCGStateReq;
class GCGWorldPlayerGCGStateReqDefaultTypeInternal;
extern GCGWorldPlayerGCGStateReqDefaultTypeInternal _GCGWorldPlayerGCGStateReq_default_instance_;
class GCGWorldPlayerGCGStateRsp;
class GCGWorldPlayerGCGStateRspDefaultTypeInternal;
extern GCGWorldPlayerGCGStateRspDefaultTypeInternal _GCGWorldPlayerGCGStateRsp_default_instance_;
class GCGZone;
class GCGZoneDefaultTypeInternal;
extern GCGZoneDefaultTypeInternal _GCGZone_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_cmd_2fcmd_5fgcg_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_cmd_2fcmd_5fgcg_2eproto

enum GCGGameCreateFailReasonNotify_GCGGameCreateReason {
  GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_NONE = 0,
  GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_GAME_MAX = 1,
  GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_CLIENT_VERSION_NOT_LASTEST = 2,
  GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_RESOURCE_NOT_COMPLETE = 3,
  GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_TIMEOUT = 4,
  GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateFailReasonNotify_GCGGameCreateReason_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateFailReasonNotify_GCGGameCreateReason_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GCGGameCreateFailReasonNotify_GCGGameCreateReason_IsValid(int value);
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateReason_MIN = GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_NONE;
const GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateReason_MAX = GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_TIMEOUT;
const int GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateReason_ARRAYSIZE = GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* GCGGameCreateFailReasonNotify_GCGGameCreateReason_descriptor();
inline const ::std::string& GCGGameCreateFailReasonNotify_GCGGameCreateReason_Name(GCGGameCreateFailReasonNotify_GCGGameCreateReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_descriptor(), value);
}
inline bool GCGGameCreateFailReasonNotify_GCGGameCreateReason_Parse(
    const ::std::string& name, GCGGameCreateFailReasonNotify_GCGGameCreateReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GCGGameCreateFailReasonNotify_GCGGameCreateReason>(
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_descriptor(), name, value);
}
enum GCGSkillHpChangeType {
  GCG_SKILL_HP_CHANGE_NONE = 0,
  GCG_SKILL_HP_CHANGE_DAMAGE = 1,
  GCG_SKILL_HP_CHANGE_HEAL = 2,
  GCGSkillHpChangeType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GCGSkillHpChangeType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GCGSkillHpChangeType_IsValid(int value);
const GCGSkillHpChangeType GCGSkillHpChangeType_MIN = GCG_SKILL_HP_CHANGE_NONE;
const GCGSkillHpChangeType GCGSkillHpChangeType_MAX = GCG_SKILL_HP_CHANGE_HEAL;
const int GCGSkillHpChangeType_ARRAYSIZE = GCGSkillHpChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* GCGSkillHpChangeType_descriptor();
inline const ::std::string& GCGSkillHpChangeType_Name(GCGSkillHpChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    GCGSkillHpChangeType_descriptor(), value);
}
inline bool GCGSkillHpChangeType_Parse(
    const ::std::string& name, GCGSkillHpChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GCGSkillHpChangeType>(
    GCGSkillHpChangeType_descriptor(), name, value);
}
enum GCGSettleOption {
  GCG_SETTLE_OPT_NONE = 0,
  GCG_SETTLE_OPT_EXIT = 1,
  GCG_SETTLE_OPT_CONTINUE = 2,
  GCG_SETTLE_OPT_RESTART = 3,
  GCGSettleOption_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GCGSettleOption_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GCGSettleOption_IsValid(int value);
const GCGSettleOption GCGSettleOption_MIN = GCG_SETTLE_OPT_NONE;
const GCGSettleOption GCGSettleOption_MAX = GCG_SETTLE_OPT_RESTART;
const int GCGSettleOption_ARRAYSIZE = GCGSettleOption_MAX + 1;

const ::google::protobuf::EnumDescriptor* GCGSettleOption_descriptor();
inline const ::std::string& GCGSettleOption_Name(GCGSettleOption value) {
  return ::google::protobuf::internal::NameOfEnum(
    GCGSettleOption_descriptor(), value);
}
inline bool GCGSettleOption_Parse(
    const ::std::string& name, GCGSettleOption* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GCGSettleOption>(
    GCGSettleOption_descriptor(), name, value);
}
// ===================================================================


// -------------------------------------------------------------------

class GCGAttackCostInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGAttackCostInfo) */ {
 public:
  GCGAttackCostInfo();
  virtual ~GCGAttackCostInfo();

  GCGAttackCostInfo(const GCGAttackCostInfo& from);

  inline GCGAttackCostInfo& operator=(const GCGAttackCostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGAttackCostInfo(GCGAttackCostInfo&& from) noexcept
    : GCGAttackCostInfo() {
    *this = ::std::move(from);
  }

  inline GCGAttackCostInfo& operator=(GCGAttackCostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGAttackCostInfo& default_instance();

  static inline const GCGAttackCostInfo* internal_default_instance() {
    return reinterpret_cast<const GCGAttackCostInfo*>(
               &_GCGAttackCostInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GCGAttackCostInfo* other);
  friend void swap(GCGAttackCostInfo& a, GCGAttackCostInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGAttackCostInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGAttackCostInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGAttackCostInfo& from);
  void MergeFrom(const GCGAttackCostInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGAttackCostInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> cost_map = 3;
  int cost_map_size() const;
  void clear_cost_map();
  static const int kCostMapFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      cost_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_cost_map();

  // uint32 skill_id = 8;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 8;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGAttackCostInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGAttackCostInfo_CostMapEntry : public ::google::protobuf::internal::MapEntry<GCGAttackCostInfo_CostMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGAttackCostInfo_CostMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    GCGAttackCostInfo_CostMapEntry();
    GCGAttackCostInfo_CostMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGAttackCostInfo_CostMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGAttackCostInfo_CostMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGAttackCostInfo_CostMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > cost_map_;
  private:
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGPlayCardCostInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGPlayCardCostInfo) */ {
 public:
  GCGPlayCardCostInfo();
  virtual ~GCGPlayCardCostInfo();

  GCGPlayCardCostInfo(const GCGPlayCardCostInfo& from);

  inline GCGPlayCardCostInfo& operator=(const GCGPlayCardCostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGPlayCardCostInfo(GCGPlayCardCostInfo&& from) noexcept
    : GCGPlayCardCostInfo() {
    *this = ::std::move(from);
  }

  inline GCGPlayCardCostInfo& operator=(GCGPlayCardCostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGPlayCardCostInfo& default_instance();

  static inline const GCGPlayCardCostInfo* internal_default_instance() {
    return reinterpret_cast<const GCGPlayCardCostInfo*>(
               &_GCGPlayCardCostInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GCGPlayCardCostInfo* other);
  friend void swap(GCGPlayCardCostInfo& a, GCGPlayCardCostInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGPlayCardCostInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGPlayCardCostInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGPlayCardCostInfo& from);
  void MergeFrom(const GCGPlayCardCostInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGPlayCardCostInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> cost_map = 14;
  int cost_map_size() const;
  void clear_cost_map();
  static const int kCostMapFieldNumber = 14;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      cost_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_cost_map();

  // uint32 card_id = 1;
  void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGPlayCardCostInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGPlayCardCostInfo_CostMapEntry : public ::google::protobuf::internal::MapEntry<GCGPlayCardCostInfo_CostMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGPlayCardCostInfo_CostMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    GCGPlayCardCostInfo_CostMapEntry();
    GCGPlayCardCostInfo_CostMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGPlayCardCostInfo_CostMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGPlayCardCostInfo_CostMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGPlayCardCostInfo_CostMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > cost_map_;
  private:
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGSelectOnStageCostInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSelectOnStageCostInfo) */ {
 public:
  GCGSelectOnStageCostInfo();
  virtual ~GCGSelectOnStageCostInfo();

  GCGSelectOnStageCostInfo(const GCGSelectOnStageCostInfo& from);

  inline GCGSelectOnStageCostInfo& operator=(const GCGSelectOnStageCostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSelectOnStageCostInfo(GCGSelectOnStageCostInfo&& from) noexcept
    : GCGSelectOnStageCostInfo() {
    *this = ::std::move(from);
  }

  inline GCGSelectOnStageCostInfo& operator=(GCGSelectOnStageCostInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSelectOnStageCostInfo& default_instance();

  static inline const GCGSelectOnStageCostInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSelectOnStageCostInfo*>(
               &_GCGSelectOnStageCostInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GCGSelectOnStageCostInfo* other);
  friend void swap(GCGSelectOnStageCostInfo& a, GCGSelectOnStageCostInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSelectOnStageCostInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSelectOnStageCostInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSelectOnStageCostInfo& from);
  void MergeFrom(const GCGSelectOnStageCostInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSelectOnStageCostInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> cost_map = 8;
  int cost_map_size() const;
  void clear_cost_map();
  static const int kCostMapFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      cost_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_cost_map();

  // uint32 card_guid = 9;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 9;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSelectOnStageCostInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGSelectOnStageCostInfo_CostMapEntry : public ::google::protobuf::internal::MapEntry<GCGSelectOnStageCostInfo_CostMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGSelectOnStageCostInfo_CostMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    GCGSelectOnStageCostInfo_CostMapEntry();
    GCGSelectOnStageCostInfo_CostMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGSelectOnStageCostInfo_CostMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGSelectOnStageCostInfo_CostMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGSelectOnStageCostInfo_CostMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > cost_map_;
  private:
  ::google::protobuf::uint32 card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGCostReviseInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGCostReviseInfo) */ {
 public:
  GCGCostReviseInfo();
  virtual ~GCGCostReviseInfo();

  GCGCostReviseInfo(const GCGCostReviseInfo& from);

  inline GCGCostReviseInfo& operator=(const GCGCostReviseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGCostReviseInfo(GCGCostReviseInfo&& from) noexcept
    : GCGCostReviseInfo() {
    *this = ::std::move(from);
  }

  inline GCGCostReviseInfo& operator=(GCGCostReviseInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGCostReviseInfo& default_instance();

  static inline const GCGCostReviseInfo* internal_default_instance() {
    return reinterpret_cast<const GCGCostReviseInfo*>(
               &_GCGCostReviseInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GCGCostReviseInfo* other);
  friend void swap(GCGCostReviseInfo& a, GCGCostReviseInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGCostReviseInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGCostReviseInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGCostReviseInfo& from);
  void MergeFrom(const GCGCostReviseInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGCostReviseInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGAttackCostInfo attack_cost_list = 2;
  int attack_cost_list_size() const;
  void clear_attack_cost_list();
  static const int kAttackCostListFieldNumber = 2;
  const ::proto::GCGAttackCostInfo& attack_cost_list(int index) const;
  ::proto::GCGAttackCostInfo* mutable_attack_cost_list(int index);
  ::proto::GCGAttackCostInfo* add_attack_cost_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGAttackCostInfo >*
      mutable_attack_cost_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGAttackCostInfo >&
      attack_cost_list() const;

  // repeated .proto.GCGPlayCardCostInfo play_card_cost_list = 5;
  int play_card_cost_list_size() const;
  void clear_play_card_cost_list();
  static const int kPlayCardCostListFieldNumber = 5;
  const ::proto::GCGPlayCardCostInfo& play_card_cost_list(int index) const;
  ::proto::GCGPlayCardCostInfo* mutable_play_card_cost_list(int index);
  ::proto::GCGPlayCardCostInfo* add_play_card_cost_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayCardCostInfo >*
      mutable_play_card_cost_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayCardCostInfo >&
      play_card_cost_list() const;

  // repeated .proto.GCGSelectOnStageCostInfo select_on_stage_cost_list = 10;
  int select_on_stage_cost_list_size() const;
  void clear_select_on_stage_cost_list();
  static const int kSelectOnStageCostListFieldNumber = 10;
  const ::proto::GCGSelectOnStageCostInfo& select_on_stage_cost_list(int index) const;
  ::proto::GCGSelectOnStageCostInfo* mutable_select_on_stage_cost_list(int index);
  ::proto::GCGSelectOnStageCostInfo* add_select_on_stage_cost_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSelectOnStageCostInfo >*
      mutable_select_on_stage_cost_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSelectOnStageCostInfo >&
      select_on_stage_cost_list() const;

  // repeated uint32 can_use_hand_card_id_list = 11;
  int can_use_hand_card_id_list_size() const;
  void clear_can_use_hand_card_id_list();
  static const int kCanUseHandCardIdListFieldNumber = 11;
  ::google::protobuf::uint32 can_use_hand_card_id_list(int index) const;
  void set_can_use_hand_card_id_list(int index, ::google::protobuf::uint32 value);
  void add_can_use_hand_card_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      can_use_hand_card_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_can_use_hand_card_id_list();

  // bool is_can_attack = 4;
  void clear_is_can_attack();
  static const int kIsCanAttackFieldNumber = 4;
  bool is_can_attack() const;
  void set_is_can_attack(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGCostReviseInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGAttackCostInfo > attack_cost_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayCardCostInfo > play_card_cost_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSelectOnStageCostInfo > select_on_stage_cost_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > can_use_hand_card_id_list_;
  mutable int _can_use_hand_card_id_list_cached_byte_size_;
  bool is_can_attack_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgTokenChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgTokenChange) */ {
 public:
  GCGMsgTokenChange();
  virtual ~GCGMsgTokenChange();

  GCGMsgTokenChange(const GCGMsgTokenChange& from);

  inline GCGMsgTokenChange& operator=(const GCGMsgTokenChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgTokenChange(GCGMsgTokenChange&& from) noexcept
    : GCGMsgTokenChange() {
    *this = ::std::move(from);
  }

  inline GCGMsgTokenChange& operator=(GCGMsgTokenChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgTokenChange& default_instance();

  static inline const GCGMsgTokenChange* internal_default_instance() {
    return reinterpret_cast<const GCGMsgTokenChange*>(
               &_GCGMsgTokenChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(GCGMsgTokenChange* other);
  friend void swap(GCGMsgTokenChange& a, GCGMsgTokenChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgTokenChange* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgTokenChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgTokenChange& from);
  void MergeFrom(const GCGMsgTokenChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgTokenChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_guid = 2;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 2;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // uint32 token_type = 4;
  void clear_token_type();
  static const int kTokenTypeFieldNumber = 4;
  ::google::protobuf::uint32 token_type() const;
  void set_token_type(::google::protobuf::uint32 value);

  // uint32 before = 13;
  void clear_before();
  static const int kBeforeFieldNumber = 13;
  ::google::protobuf::uint32 before() const;
  void set_before(::google::protobuf::uint32 value);

  // .proto.GCGReason reason = 7;
  void clear_reason();
  static const int kReasonFieldNumber = 7;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // uint32 after = 11;
  void clear_after();
  static const int kAfterFieldNumber = 11;
  ::google::protobuf::uint32 after() const;
  void set_after(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgTokenChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_guid_;
  ::google::protobuf::uint32 token_type_;
  ::google::protobuf::uint32 before_;
  int reason_;
  ::google::protobuf::uint32 after_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGMsgPhaseChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgPhaseChange) */ {
 public:
  GCGMsgPhaseChange();
  virtual ~GCGMsgPhaseChange();

  GCGMsgPhaseChange(const GCGMsgPhaseChange& from);

  inline GCGMsgPhaseChange& operator=(const GCGMsgPhaseChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgPhaseChange(GCGMsgPhaseChange&& from) noexcept
    : GCGMsgPhaseChange() {
    *this = ::std::move(from);
  }

  inline GCGMsgPhaseChange& operator=(GCGMsgPhaseChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgPhaseChange& default_instance();

  static inline const GCGMsgPhaseChange* internal_default_instance() {
    return reinterpret_cast<const GCGMsgPhaseChange*>(
               &_GCGMsgPhaseChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GCGMsgPhaseChange* other);
  friend void swap(GCGMsgPhaseChange& a, GCGMsgPhaseChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgPhaseChange* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgPhaseChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgPhaseChange& from);
  void MergeFrom(const GCGMsgPhaseChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgPhaseChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> allow_controller_map = 15;
  int allow_controller_map_size() const;
  void clear_allow_controller_map();
  static const int kAllowControllerMapFieldNumber = 15;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      allow_controller_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_allow_controller_map();

  // .proto.GCGPhaseType after_phase = 5;
  void clear_after_phase();
  static const int kAfterPhaseFieldNumber = 5;
  ::proto::GCGPhaseType after_phase() const;
  void set_after_phase(::proto::GCGPhaseType value);

  // .proto.GCGPhaseType before_phase = 12;
  void clear_before_phase();
  static const int kBeforePhaseFieldNumber = 12;
  ::proto::GCGPhaseType before_phase() const;
  void set_before_phase(::proto::GCGPhaseType value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgPhaseChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGMsgPhaseChange_AllowControllerMapEntry : public ::google::protobuf::internal::MapEntry<GCGMsgPhaseChange_AllowControllerMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGMsgPhaseChange_AllowControllerMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    GCGMsgPhaseChange_AllowControllerMapEntry();
    GCGMsgPhaseChange_AllowControllerMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGMsgPhaseChange_AllowControllerMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGMsgPhaseChange_AllowControllerMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGMsgPhaseChange_AllowControllerMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > allow_controller_map_;
  private:
  int after_phase_;
  int before_phase_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgAddCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgAddCards) */ {
 public:
  GCGMsgAddCards();
  virtual ~GCGMsgAddCards();

  GCGMsgAddCards(const GCGMsgAddCards& from);

  inline GCGMsgAddCards& operator=(const GCGMsgAddCards& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgAddCards(GCGMsgAddCards&& from) noexcept
    : GCGMsgAddCards() {
    *this = ::std::move(from);
  }

  inline GCGMsgAddCards& operator=(GCGMsgAddCards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgAddCards& default_instance();

  static inline const GCGMsgAddCards* internal_default_instance() {
    return reinterpret_cast<const GCGMsgAddCards*>(
               &_GCGMsgAddCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GCGMsgAddCards* other);
  friend void swap(GCGMsgAddCards& a, GCGMsgAddCards& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgAddCards* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgAddCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgAddCards& from);
  void MergeFrom(const GCGMsgAddCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgAddCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_guid_list = 14;
  int card_guid_list_size() const;
  void clear_card_guid_list();
  static const int kCardGuidListFieldNumber = 14;
  ::google::protobuf::uint32 card_guid_list(int index) const;
  void set_card_guid_list(int index, ::google::protobuf::uint32 value);
  void add_card_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_guid_list();

  // .proto.GCGZoneType zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  ::proto::GCGZoneType zone() const;
  void set_zone(::proto::GCGZoneType value);

  // uint32 pos = 11;
  void clear_pos();
  static const int kPosFieldNumber = 11;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // uint32 controller_id = 13;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 13;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // .proto.GCGReason reason = 15;
  void clear_reason();
  static const int kReasonFieldNumber = 15;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgAddCards)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_guid_list_;
  mutable int _card_guid_list_cached_byte_size_;
  int zone_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 controller_id_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgRemoveCards : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgRemoveCards) */ {
 public:
  GCGMsgRemoveCards();
  virtual ~GCGMsgRemoveCards();

  GCGMsgRemoveCards(const GCGMsgRemoveCards& from);

  inline GCGMsgRemoveCards& operator=(const GCGMsgRemoveCards& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgRemoveCards(GCGMsgRemoveCards&& from) noexcept
    : GCGMsgRemoveCards() {
    *this = ::std::move(from);
  }

  inline GCGMsgRemoveCards& operator=(GCGMsgRemoveCards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgRemoveCards& default_instance();

  static inline const GCGMsgRemoveCards* internal_default_instance() {
    return reinterpret_cast<const GCGMsgRemoveCards*>(
               &_GCGMsgRemoveCards_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(GCGMsgRemoveCards* other);
  friend void swap(GCGMsgRemoveCards& a, GCGMsgRemoveCards& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgRemoveCards* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgRemoveCards* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgRemoveCards& from);
  void MergeFrom(const GCGMsgRemoveCards& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgRemoveCards* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_guid_list = 1;
  int card_guid_list_size() const;
  void clear_card_guid_list();
  static const int kCardGuidListFieldNumber = 1;
  ::google::protobuf::uint32 card_guid_list(int index) const;
  void set_card_guid_list(int index, ::google::protobuf::uint32 value);
  void add_card_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_guid_list();

  // uint32 controller_id = 15;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 15;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // .proto.GCGReason reason = 5;
  void clear_reason();
  static const int kReasonFieldNumber = 5;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // .proto.GCGZoneType zone = 10;
  void clear_zone();
  static const int kZoneFieldNumber = 10;
  ::proto::GCGZoneType zone() const;
  void set_zone(::proto::GCGZoneType value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgRemoveCards)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_guid_list_;
  mutable int _card_guid_list_cached_byte_size_;
  ::google::protobuf::uint32 controller_id_;
  int reason_;
  int zone_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgMoveCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgMoveCard) */ {
 public:
  GCGMsgMoveCard();
  virtual ~GCGMsgMoveCard();

  GCGMsgMoveCard(const GCGMsgMoveCard& from);

  inline GCGMsgMoveCard& operator=(const GCGMsgMoveCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgMoveCard(GCGMsgMoveCard&& from) noexcept
    : GCGMsgMoveCard() {
    *this = ::std::move(from);
  }

  inline GCGMsgMoveCard& operator=(GCGMsgMoveCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgMoveCard& default_instance();

  static inline const GCGMsgMoveCard* internal_default_instance() {
    return reinterpret_cast<const GCGMsgMoveCard*>(
               &_GCGMsgMoveCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(GCGMsgMoveCard* other);
  friend void swap(GCGMsgMoveCard& a, GCGMsgMoveCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgMoveCard* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgMoveCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgMoveCard& from);
  void MergeFrom(const GCGMsgMoveCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgMoveCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_guid_list = 8;
  int card_guid_list_size() const;
  void clear_card_guid_list();
  static const int kCardGuidListFieldNumber = 8;
  ::google::protobuf::uint32 card_guid_list(int index) const;
  void set_card_guid_list(int index, ::google::protobuf::uint32 value);
  void add_card_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_guid_list();

  // repeated uint32 fail_guid_list = 11;
  int fail_guid_list_size() const;
  void clear_fail_guid_list();
  static const int kFailGuidListFieldNumber = 11;
  ::google::protobuf::uint32 fail_guid_list(int index) const;
  void set_fail_guid_list(int index, ::google::protobuf::uint32 value);
  void add_fail_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fail_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fail_guid_list();

  // .proto.GCGZoneType to = 5;
  void clear_to();
  static const int kToFieldNumber = 5;
  ::proto::GCGZoneType to() const;
  void set_to(::proto::GCGZoneType value);

  // .proto.GCGReason reason = 6;
  void clear_reason();
  static const int kReasonFieldNumber = 6;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // .proto.GCGZoneType from = 12;
  void clear_from();
  static const int kFromFieldNumber = 12;
  ::proto::GCGZoneType from() const;
  void set_from(::proto::GCGZoneType value);

  // uint32 controller_id = 14;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 14;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgMoveCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_guid_list_;
  mutable int _card_guid_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fail_guid_list_;
  mutable int _fail_guid_list_cached_byte_size_;
  int to_;
  int reason_;
  int from_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgSelectOnStage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgSelectOnStage) */ {
 public:
  GCGMsgSelectOnStage();
  virtual ~GCGMsgSelectOnStage();

  GCGMsgSelectOnStage(const GCGMsgSelectOnStage& from);

  inline GCGMsgSelectOnStage& operator=(const GCGMsgSelectOnStage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgSelectOnStage(GCGMsgSelectOnStage&& from) noexcept
    : GCGMsgSelectOnStage() {
    *this = ::std::move(from);
  }

  inline GCGMsgSelectOnStage& operator=(GCGMsgSelectOnStage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgSelectOnStage& default_instance();

  static inline const GCGMsgSelectOnStage* internal_default_instance() {
    return reinterpret_cast<const GCGMsgSelectOnStage*>(
               &_GCGMsgSelectOnStage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(GCGMsgSelectOnStage* other);
  friend void swap(GCGMsgSelectOnStage& a, GCGMsgSelectOnStage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgSelectOnStage* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgSelectOnStage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgSelectOnStage& from);
  void MergeFrom(const GCGMsgSelectOnStage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgSelectOnStage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGReason reason = 10;
  void clear_reason();
  static const int kReasonFieldNumber = 10;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // uint32 card_guid = 4;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 4;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // uint32 controller_id = 6;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 6;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgSelectOnStage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  ::google::protobuf::uint32 card_guid_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgSelectOnStageByEffect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgSelectOnStageByEffect) */ {
 public:
  GCGMsgSelectOnStageByEffect();
  virtual ~GCGMsgSelectOnStageByEffect();

  GCGMsgSelectOnStageByEffect(const GCGMsgSelectOnStageByEffect& from);

  inline GCGMsgSelectOnStageByEffect& operator=(const GCGMsgSelectOnStageByEffect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgSelectOnStageByEffect(GCGMsgSelectOnStageByEffect&& from) noexcept
    : GCGMsgSelectOnStageByEffect() {
    *this = ::std::move(from);
  }

  inline GCGMsgSelectOnStageByEffect& operator=(GCGMsgSelectOnStageByEffect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgSelectOnStageByEffect& default_instance();

  static inline const GCGMsgSelectOnStageByEffect* internal_default_instance() {
    return reinterpret_cast<const GCGMsgSelectOnStageByEffect*>(
               &_GCGMsgSelectOnStageByEffect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(GCGMsgSelectOnStageByEffect* other);
  friend void swap(GCGMsgSelectOnStageByEffect& a, GCGMsgSelectOnStageByEffect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgSelectOnStageByEffect* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgSelectOnStageByEffect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgSelectOnStageByEffect& from);
  void MergeFrom(const GCGMsgSelectOnStageByEffect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgSelectOnStageByEffect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controller_id = 15;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 15;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 card_guid = 1;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 1;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // uint32 skill_id = 12;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 12;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgSelectOnStageByEffect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 card_guid_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgDiceRoll : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgDiceRoll) */ {
 public:
  GCGMsgDiceRoll();
  virtual ~GCGMsgDiceRoll();

  GCGMsgDiceRoll(const GCGMsgDiceRoll& from);

  inline GCGMsgDiceRoll& operator=(const GCGMsgDiceRoll& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgDiceRoll(GCGMsgDiceRoll&& from) noexcept
    : GCGMsgDiceRoll() {
    *this = ::std::move(from);
  }

  inline GCGMsgDiceRoll& operator=(GCGMsgDiceRoll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgDiceRoll& default_instance();

  static inline const GCGMsgDiceRoll* internal_default_instance() {
    return reinterpret_cast<const GCGMsgDiceRoll*>(
               &_GCGMsgDiceRoll_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GCGMsgDiceRoll* other);
  friend void swap(GCGMsgDiceRoll& a, GCGMsgDiceRoll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgDiceRoll* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgDiceRoll* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgDiceRoll& from);
  void MergeFrom(const GCGMsgDiceRoll& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgDiceRoll* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGDiceSideType dice_side_list = 10;
  int dice_side_list_size() const;
  void clear_dice_side_list();
  static const int kDiceSideListFieldNumber = 10;
  ::proto::GCGDiceSideType dice_side_list(int index) const;
  void set_dice_side_list(int index, ::proto::GCGDiceSideType value);
  void add_dice_side_list(::proto::GCGDiceSideType value);
  const ::google::protobuf::RepeatedField<int>& dice_side_list() const;
  ::google::protobuf::RepeatedField<int>* mutable_dice_side_list();

  // uint32 controller_id = 5;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 5;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 dice_num = 15;
  void clear_dice_num();
  static const int kDiceNumFieldNumber = 15;
  ::google::protobuf::uint32 dice_num() const;
  void set_dice_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgDiceRoll)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField<int> dice_side_list_;
  mutable int _dice_side_list_cached_byte_size_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 dice_num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgDiceReroll : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgDiceReroll) */ {
 public:
  GCGMsgDiceReroll();
  virtual ~GCGMsgDiceReroll();

  GCGMsgDiceReroll(const GCGMsgDiceReroll& from);

  inline GCGMsgDiceReroll& operator=(const GCGMsgDiceReroll& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgDiceReroll(GCGMsgDiceReroll&& from) noexcept
    : GCGMsgDiceReroll() {
    *this = ::std::move(from);
  }

  inline GCGMsgDiceReroll& operator=(GCGMsgDiceReroll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgDiceReroll& default_instance();

  static inline const GCGMsgDiceReroll* internal_default_instance() {
    return reinterpret_cast<const GCGMsgDiceReroll*>(
               &_GCGMsgDiceReroll_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GCGMsgDiceReroll* other);
  friend void swap(GCGMsgDiceReroll& a, GCGMsgDiceReroll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgDiceReroll* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgDiceReroll* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgDiceReroll& from);
  void MergeFrom(const GCGMsgDiceReroll& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgDiceReroll* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 select_dice_index_list = 1;
  int select_dice_index_list_size() const;
  void clear_select_dice_index_list();
  static const int kSelectDiceIndexListFieldNumber = 1;
  ::google::protobuf::uint32 select_dice_index_list(int index) const;
  void set_select_dice_index_list(int index, ::google::protobuf::uint32 value);
  void add_select_dice_index_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      select_dice_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_select_dice_index_list();

  // repeated .proto.GCGDiceSideType dice_side_list = 6;
  int dice_side_list_size() const;
  void clear_dice_side_list();
  static const int kDiceSideListFieldNumber = 6;
  ::proto::GCGDiceSideType dice_side_list(int index) const;
  void set_dice_side_list(int index, ::proto::GCGDiceSideType value);
  void add_dice_side_list(::proto::GCGDiceSideType value);
  const ::google::protobuf::RepeatedField<int>& dice_side_list() const;
  ::google::protobuf::RepeatedField<int>* mutable_dice_side_list();

  // uint32 controller_id = 2;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 2;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgDiceReroll)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > select_dice_index_list_;
  mutable int _select_dice_index_list_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> dice_side_list_;
  mutable int _dice_side_list_cached_byte_size_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgPass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgPass) */ {
 public:
  GCGMsgPass();
  virtual ~GCGMsgPass();

  GCGMsgPass(const GCGMsgPass& from);

  inline GCGMsgPass& operator=(const GCGMsgPass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgPass(GCGMsgPass&& from) noexcept
    : GCGMsgPass() {
    *this = ::std::move(from);
  }

  inline GCGMsgPass& operator=(GCGMsgPass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgPass& default_instance();

  static inline const GCGMsgPass* internal_default_instance() {
    return reinterpret_cast<const GCGMsgPass*>(
               &_GCGMsgPass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GCGMsgPass* other);
  friend void swap(GCGMsgPass& a, GCGMsgPass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgPass* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgPass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgPass& from);
  void MergeFrom(const GCGMsgPass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgPass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controller_id = 14;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 14;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgPass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgCharDie : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgCharDie) */ {
 public:
  GCGMsgCharDie();
  virtual ~GCGMsgCharDie();

  GCGMsgCharDie(const GCGMsgCharDie& from);

  inline GCGMsgCharDie& operator=(const GCGMsgCharDie& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgCharDie(GCGMsgCharDie&& from) noexcept
    : GCGMsgCharDie() {
    *this = ::std::move(from);
  }

  inline GCGMsgCharDie& operator=(GCGMsgCharDie&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgCharDie& default_instance();

  static inline const GCGMsgCharDie* internal_default_instance() {
    return reinterpret_cast<const GCGMsgCharDie*>(
               &_GCGMsgCharDie_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GCGMsgCharDie* other);
  friend void swap(GCGMsgCharDie& a, GCGMsgCharDie& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgCharDie* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgCharDie* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgCharDie& from);
  void MergeFrom(const GCGMsgCharDie& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgCharDie* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controller_id = 5;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 5;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 card_guid = 11;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 11;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgCharDie)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgUseSkill : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgUseSkill) */ {
 public:
  GCGMsgUseSkill();
  virtual ~GCGMsgUseSkill();

  GCGMsgUseSkill(const GCGMsgUseSkill& from);

  inline GCGMsgUseSkill& operator=(const GCGMsgUseSkill& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgUseSkill(GCGMsgUseSkill&& from) noexcept
    : GCGMsgUseSkill() {
    *this = ::std::move(from);
  }

  inline GCGMsgUseSkill& operator=(GCGMsgUseSkill&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgUseSkill& default_instance();

  static inline const GCGMsgUseSkill* internal_default_instance() {
    return reinterpret_cast<const GCGMsgUseSkill*>(
               &_GCGMsgUseSkill_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GCGMsgUseSkill* other);
  friend void swap(GCGMsgUseSkill& a, GCGMsgUseSkill& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgUseSkill* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgUseSkill* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgUseSkill& from);
  void MergeFrom(const GCGMsgUseSkill& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgUseSkill* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_guid = 6;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 6;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // uint32 skill_id = 9;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 9;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgUseSkill)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_guid_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgUseSkillEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgUseSkillEnd) */ {
 public:
  GCGMsgUseSkillEnd();
  virtual ~GCGMsgUseSkillEnd();

  GCGMsgUseSkillEnd(const GCGMsgUseSkillEnd& from);

  inline GCGMsgUseSkillEnd& operator=(const GCGMsgUseSkillEnd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgUseSkillEnd(GCGMsgUseSkillEnd&& from) noexcept
    : GCGMsgUseSkillEnd() {
    *this = ::std::move(from);
  }

  inline GCGMsgUseSkillEnd& operator=(GCGMsgUseSkillEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgUseSkillEnd& default_instance();

  static inline const GCGMsgUseSkillEnd* internal_default_instance() {
    return reinterpret_cast<const GCGMsgUseSkillEnd*>(
               &_GCGMsgUseSkillEnd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GCGMsgUseSkillEnd* other);
  friend void swap(GCGMsgUseSkillEnd& a, GCGMsgUseSkillEnd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgUseSkillEnd* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgUseSkillEnd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgUseSkillEnd& from);
  void MergeFrom(const GCGMsgUseSkillEnd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgUseSkillEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_guid = 11;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 11;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // uint32 skill_id = 12;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 12;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgUseSkillEnd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_guid_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDamageDetail : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDamageDetail) */ {
 public:
  GCGDamageDetail();
  virtual ~GCGDamageDetail();

  GCGDamageDetail(const GCGDamageDetail& from);

  inline GCGDamageDetail& operator=(const GCGDamageDetail& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDamageDetail(GCGDamageDetail&& from) noexcept
    : GCGDamageDetail() {
    *this = ::std::move(from);
  }

  inline GCGDamageDetail& operator=(GCGDamageDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDamageDetail& default_instance();

  static inline const GCGDamageDetail* internal_default_instance() {
    return reinterpret_cast<const GCGDamageDetail*>(
               &_GCGDamageDetail_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GCGDamageDetail* other);
  friend void swap(GCGDamageDetail& a, GCGDamageDetail& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDamageDetail* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDamageDetail* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDamageDetail& from);
  void MergeFrom(const GCGDamageDetail& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDamageDetail* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_guid = 7;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 7;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // uint32 skill_id = 10;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 10;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDamageDetail)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_guid_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgSkillResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgSkillResult) */ {
 public:
  GCGMsgSkillResult();
  virtual ~GCGMsgSkillResult();

  GCGMsgSkillResult(const GCGMsgSkillResult& from);

  inline GCGMsgSkillResult& operator=(const GCGMsgSkillResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgSkillResult(GCGMsgSkillResult&& from) noexcept
    : GCGMsgSkillResult() {
    *this = ::std::move(from);
  }

  inline GCGMsgSkillResult& operator=(GCGMsgSkillResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgSkillResult& default_instance();

  static inline const GCGMsgSkillResult* internal_default_instance() {
    return reinterpret_cast<const GCGMsgSkillResult*>(
               &_GCGMsgSkillResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(GCGMsgSkillResult* other);
  friend void swap(GCGMsgSkillResult& a, GCGMsgSkillResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgSkillResult* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgSkillResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgSkillResult& from);
  void MergeFrom(const GCGMsgSkillResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgSkillResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGDamageDetail detail_list = 2;
  int detail_list_size() const;
  void clear_detail_list();
  static const int kDetailListFieldNumber = 2;
  const ::proto::GCGDamageDetail& detail_list(int index) const;
  ::proto::GCGDamageDetail* mutable_detail_list(int index);
  ::proto::GCGDamageDetail* add_detail_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >*
      mutable_detail_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >&
      detail_list() const;

  // uint32 result_seq = 4;
  void clear_result_seq();
  static const int kResultSeqFieldNumber = 4;
  ::google::protobuf::uint32 result_seq() const;
  void set_result_seq(::google::protobuf::uint32 value);

  // uint32 effect_element = 5;
  void clear_effect_element();
  static const int kEffectElementFieldNumber = 5;
  ::google::protobuf::uint32 effect_element() const;
  void set_effect_element(::google::protobuf::uint32 value);

  // uint32 damage = 6;
  void clear_damage();
  static const int kDamageFieldNumber = 6;
  ::google::protobuf::uint32 damage() const;
  void set_damage(::google::protobuf::uint32 value);

  // uint32 target_card_guid = 7;
  void clear_target_card_guid();
  static const int kTargetCardGuidFieldNumber = 7;
  ::google::protobuf::uint32 target_card_guid() const;
  void set_target_card_guid(::google::protobuf::uint32 value);

  // uint32 src_card_guid = 8;
  void clear_src_card_guid();
  static const int kSrcCardGuidFieldNumber = 8;
  ::google::protobuf::uint32 src_card_guid() const;
  void set_src_card_guid(::google::protobuf::uint32 value);

  // uint32 skill_id = 12;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 12;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // uint32 last_hp = 14;
  void clear_last_hp();
  static const int kLastHpFieldNumber = 14;
  ::google::protobuf::uint32 last_hp() const;
  void set_last_hp(::google::protobuf::uint32 value);

  // uint32 from_result_seq = 15;
  void clear_from_result_seq();
  static const int kFromResultSeqFieldNumber = 15;
  ::google::protobuf::uint32 from_result_seq() const;
  void set_from_result_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgSkillResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail > detail_list_;
  ::google::protobuf::uint32 result_seq_;
  ::google::protobuf::uint32 effect_element_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 target_card_guid_;
  ::google::protobuf::uint32 src_card_guid_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 last_hp_;
  ::google::protobuf::uint32 from_result_seq_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGLimitsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGLimitsInfo) */ {
 public:
  GCGLimitsInfo();
  virtual ~GCGLimitsInfo();

  GCGLimitsInfo(const GCGLimitsInfo& from);

  inline GCGLimitsInfo& operator=(const GCGLimitsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGLimitsInfo(GCGLimitsInfo&& from) noexcept
    : GCGLimitsInfo() {
    *this = ::std::move(from);
  }

  inline GCGLimitsInfo& operator=(GCGLimitsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGLimitsInfo& default_instance();

  static inline const GCGLimitsInfo* internal_default_instance() {
    return reinterpret_cast<const GCGLimitsInfo*>(
               &_GCGLimitsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GCGLimitsInfo* other);
  friend void swap(GCGLimitsInfo& a, GCGLimitsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGLimitsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGLimitsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGLimitsInfo& from);
  void MergeFrom(const GCGLimitsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGLimitsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 limit_value = 1;
  void clear_limit_value();
  static const int kLimitValueFieldNumber = 1;
  ::google::protobuf::uint32 limit_value() const;
  void set_limit_value(::google::protobuf::uint32 value);

  // uint32 limit_type = 7;
  void clear_limit_type();
  static const int kLimitTypeFieldNumber = 7;
  ::google::protobuf::uint32 limit_type() const;
  void set_limit_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGLimitsInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 limit_value_;
  ::google::protobuf::uint32 limit_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillLimitsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillLimitsInfo) */ {
 public:
  GCGSkillLimitsInfo();
  virtual ~GCGSkillLimitsInfo();

  GCGSkillLimitsInfo(const GCGSkillLimitsInfo& from);

  inline GCGSkillLimitsInfo& operator=(const GCGSkillLimitsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillLimitsInfo(GCGSkillLimitsInfo&& from) noexcept
    : GCGSkillLimitsInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillLimitsInfo& operator=(GCGSkillLimitsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillLimitsInfo& default_instance();

  static inline const GCGSkillLimitsInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillLimitsInfo*>(
               &_GCGSkillLimitsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(GCGSkillLimitsInfo* other);
  friend void swap(GCGSkillLimitsInfo& a, GCGSkillLimitsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillLimitsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillLimitsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillLimitsInfo& from);
  void MergeFrom(const GCGSkillLimitsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillLimitsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGLimitsInfo limits_list = 15;
  int limits_list_size() const;
  void clear_limits_list();
  static const int kLimitsListFieldNumber = 15;
  const ::proto::GCGLimitsInfo& limits_list(int index) const;
  ::proto::GCGLimitsInfo* mutable_limits_list(int index);
  ::proto::GCGLimitsInfo* add_limits_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGLimitsInfo >*
      mutable_limits_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGLimitsInfo >&
      limits_list() const;

  // uint32 skill_id = 5;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 5;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillLimitsInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGLimitsInfo > limits_list_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGCardSkillLimitsInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGCardSkillLimitsInfo) */ {
 public:
  GCGCardSkillLimitsInfo();
  virtual ~GCGCardSkillLimitsInfo();

  GCGCardSkillLimitsInfo(const GCGCardSkillLimitsInfo& from);

  inline GCGCardSkillLimitsInfo& operator=(const GCGCardSkillLimitsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGCardSkillLimitsInfo(GCGCardSkillLimitsInfo&& from) noexcept
    : GCGCardSkillLimitsInfo() {
    *this = ::std::move(from);
  }

  inline GCGCardSkillLimitsInfo& operator=(GCGCardSkillLimitsInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGCardSkillLimitsInfo& default_instance();

  static inline const GCGCardSkillLimitsInfo* internal_default_instance() {
    return reinterpret_cast<const GCGCardSkillLimitsInfo*>(
               &_GCGCardSkillLimitsInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(GCGCardSkillLimitsInfo* other);
  friend void swap(GCGCardSkillLimitsInfo& a, GCGCardSkillLimitsInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGCardSkillLimitsInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGCardSkillLimitsInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGCardSkillLimitsInfo& from);
  void MergeFrom(const GCGCardSkillLimitsInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGCardSkillLimitsInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 12;
  int skill_limits_list_size() const;
  void clear_skill_limits_list();
  static const int kSkillLimitsListFieldNumber = 12;
  const ::proto::GCGSkillLimitsInfo& skill_limits_list(int index) const;
  ::proto::GCGSkillLimitsInfo* mutable_skill_limits_list(int index);
  ::proto::GCGSkillLimitsInfo* add_skill_limits_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >*
      mutable_skill_limits_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >&
      skill_limits_list() const;

  // @@protoc_insertion_point(class_scope:proto.GCGCardSkillLimitsInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo > skill_limits_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGMsgSkillLimitsChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgSkillLimitsChange) */ {
 public:
  GCGMsgSkillLimitsChange();
  virtual ~GCGMsgSkillLimitsChange();

  GCGMsgSkillLimitsChange(const GCGMsgSkillLimitsChange& from);

  inline GCGMsgSkillLimitsChange& operator=(const GCGMsgSkillLimitsChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgSkillLimitsChange(GCGMsgSkillLimitsChange&& from) noexcept
    : GCGMsgSkillLimitsChange() {
    *this = ::std::move(from);
  }

  inline GCGMsgSkillLimitsChange& operator=(GCGMsgSkillLimitsChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgSkillLimitsChange& default_instance();

  static inline const GCGMsgSkillLimitsChange* internal_default_instance() {
    return reinterpret_cast<const GCGMsgSkillLimitsChange*>(
               &_GCGMsgSkillLimitsChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(GCGMsgSkillLimitsChange* other);
  friend void swap(GCGMsgSkillLimitsChange& a, GCGMsgSkillLimitsChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgSkillLimitsChange* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgSkillLimitsChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgSkillLimitsChange& from);
  void MergeFrom(const GCGMsgSkillLimitsChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgSkillLimitsChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.GCGCardSkillLimitsInfo> card_limits_change_map = 15;
  int card_limits_change_map_size() const;
  void clear_card_limits_change_map();
  static const int kCardLimitsChangeMapFieldNumber = 15;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >&
      card_limits_change_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >*
      mutable_card_limits_change_map();

  // @@protoc_insertion_point(class_scope:proto.GCGMsgSkillLimitsChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry : public ::google::protobuf::internal::MapEntry<GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry();
    GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGMsgSkillLimitsChange_CardLimitsChangeMapEntry,
      ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > card_limits_change_map_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgCostDice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgCostDice) */ {
 public:
  GCGMsgCostDice();
  virtual ~GCGMsgCostDice();

  GCGMsgCostDice(const GCGMsgCostDice& from);

  inline GCGMsgCostDice& operator=(const GCGMsgCostDice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgCostDice(GCGMsgCostDice&& from) noexcept
    : GCGMsgCostDice() {
    *this = ::std::move(from);
  }

  inline GCGMsgCostDice& operator=(GCGMsgCostDice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgCostDice& default_instance();

  static inline const GCGMsgCostDice* internal_default_instance() {
    return reinterpret_cast<const GCGMsgCostDice*>(
               &_GCGMsgCostDice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(GCGMsgCostDice* other);
  friend void swap(GCGMsgCostDice& a, GCGMsgCostDice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgCostDice* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgCostDice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgCostDice& from);
  void MergeFrom(const GCGMsgCostDice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgCostDice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 select_dice_index_list = 13;
  int select_dice_index_list_size() const;
  void clear_select_dice_index_list();
  static const int kSelectDiceIndexListFieldNumber = 13;
  ::google::protobuf::uint32 select_dice_index_list(int index) const;
  void set_select_dice_index_list(int index, ::google::protobuf::uint32 value);
  void add_select_dice_index_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      select_dice_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_select_dice_index_list();

  // uint32 controller_id = 6;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 6;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // .proto.GCGReason reason = 9;
  void clear_reason();
  static const int kReasonFieldNumber = 9;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgCostDice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > select_dice_index_list_;
  mutable int _select_dice_index_list_cached_byte_size_;
  ::google::protobuf::uint32 controller_id_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGMsgAddDice : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgAddDice) */ {
 public:
  GCGMsgAddDice();
  virtual ~GCGMsgAddDice();

  GCGMsgAddDice(const GCGMsgAddDice& from);

  inline GCGMsgAddDice& operator=(const GCGMsgAddDice& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgAddDice(GCGMsgAddDice&& from) noexcept
    : GCGMsgAddDice() {
    *this = ::std::move(from);
  }

  inline GCGMsgAddDice& operator=(GCGMsgAddDice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgAddDice& default_instance();

  static inline const GCGMsgAddDice* internal_default_instance() {
    return reinterpret_cast<const GCGMsgAddDice*>(
               &_GCGMsgAddDice_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GCGMsgAddDice* other);
  friend void swap(GCGMsgAddDice& a, GCGMsgAddDice& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgAddDice* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgAddDice* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgAddDice& from);
  void MergeFrom(const GCGMsgAddDice& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgAddDice* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.GCGDiceSideType> dice_map = 8;
  int dice_map_size() const;
  void clear_dice_map();
  static const int kDiceMapFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >&
      dice_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >*
      mutable_dice_map();

  // map<uint32, .proto.GCGDiceSideType> before_dice_map = 12;
  int before_dice_map_size() const;
  void clear_before_dice_map();
  static const int kBeforeDiceMapFieldNumber = 12;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >&
      before_dice_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >*
      mutable_before_dice_map();

  // int32 change_count = 1;
  void clear_change_count();
  static const int kChangeCountFieldNumber = 1;
  ::google::protobuf::int32 change_count() const;
  void set_change_count(::google::protobuf::int32 value);

  // .proto.GCGReason reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // uint32 controller_id = 10;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 10;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgAddDice)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGMsgAddDice_DiceMapEntry : public ::google::protobuf::internal::MapEntry<GCGMsgAddDice_DiceMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGDiceSideType,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGMsgAddDice_DiceMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGDiceSideType,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > SuperType;
    GCGMsgAddDice_DiceMapEntry();
    GCGMsgAddDice_DiceMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGMsgAddDice_DiceMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGMsgAddDice_DiceMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGMsgAddDice_DiceMapEntry,
      ::google::protobuf::uint32, ::proto::GCGDiceSideType,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > dice_map_;
  private:
  public:
  class GCGMsgAddDice_BeforeDiceMapEntry : public ::google::protobuf::internal::MapEntry<GCGMsgAddDice_BeforeDiceMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGDiceSideType,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGMsgAddDice_BeforeDiceMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGDiceSideType,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > SuperType;
    GCGMsgAddDice_BeforeDiceMapEntry();
    GCGMsgAddDice_BeforeDiceMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGMsgAddDice_BeforeDiceMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGMsgAddDice_BeforeDiceMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGMsgAddDice_BeforeDiceMapEntry,
      ::google::protobuf::uint32, ::proto::GCGDiceSideType,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_ENUM,
      0 > before_dice_map_;
  private:
  ::google::protobuf::int32 change_count_;
  int reason_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgNewCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgNewCard) */ {
 public:
  GCGMsgNewCard();
  virtual ~GCGMsgNewCard();

  GCGMsgNewCard(const GCGMsgNewCard& from);

  inline GCGMsgNewCard& operator=(const GCGMsgNewCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgNewCard(GCGMsgNewCard&& from) noexcept
    : GCGMsgNewCard() {
    *this = ::std::move(from);
  }

  inline GCGMsgNewCard& operator=(GCGMsgNewCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgNewCard& default_instance();

  static inline const GCGMsgNewCard* internal_default_instance() {
    return reinterpret_cast<const GCGMsgNewCard*>(
               &_GCGMsgNewCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(GCGMsgNewCard* other);
  friend void swap(GCGMsgNewCard& a, GCGMsgNewCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgNewCard* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgNewCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgNewCard& from);
  void MergeFrom(const GCGMsgNewCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgNewCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGCard card = 15;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 15;
  const ::proto::GCGCard& card() const;
  ::proto::GCGCard* mutable_card();
  ::proto::GCGCard* release_card();
  void set_allocated_card(::proto::GCGCard* card);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgNewCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGCard* card_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGMsgUpdateController : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgUpdateController) */ {
 public:
  GCGMsgUpdateController();
  virtual ~GCGMsgUpdateController();

  GCGMsgUpdateController(const GCGMsgUpdateController& from);

  inline GCGMsgUpdateController& operator=(const GCGMsgUpdateController& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgUpdateController(GCGMsgUpdateController&& from) noexcept
    : GCGMsgUpdateController() {
    *this = ::std::move(from);
  }

  inline GCGMsgUpdateController& operator=(GCGMsgUpdateController&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgUpdateController& default_instance();

  static inline const GCGMsgUpdateController* internal_default_instance() {
    return reinterpret_cast<const GCGMsgUpdateController*>(
               &_GCGMsgUpdateController_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(GCGMsgUpdateController* other);
  friend void swap(GCGMsgUpdateController& a, GCGMsgUpdateController& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgUpdateController* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgUpdateController* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgUpdateController& from);
  void MergeFrom(const GCGMsgUpdateController& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgUpdateController* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> allow_controller_map = 7;
  int allow_controller_map_size() const;
  void clear_allow_controller_map();
  static const int kAllowControllerMapFieldNumber = 7;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      allow_controller_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_allow_controller_map();

  // @@protoc_insertion_point(class_scope:proto.GCGMsgUpdateController)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGMsgUpdateController_AllowControllerMapEntry : public ::google::protobuf::internal::MapEntry<GCGMsgUpdateController_AllowControllerMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGMsgUpdateController_AllowControllerMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    GCGMsgUpdateController_AllowControllerMapEntry();
    GCGMsgUpdateController_AllowControllerMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGMsgUpdateController_AllowControllerMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGMsgUpdateController_AllowControllerMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGMsgUpdateController_AllowControllerMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > allow_controller_map_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgModifyAdd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgModifyAdd) */ {
 public:
  GCGMsgModifyAdd();
  virtual ~GCGMsgModifyAdd();

  GCGMsgModifyAdd(const GCGMsgModifyAdd& from);

  inline GCGMsgModifyAdd& operator=(const GCGMsgModifyAdd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgModifyAdd(GCGMsgModifyAdd&& from) noexcept
    : GCGMsgModifyAdd() {
    *this = ::std::move(from);
  }

  inline GCGMsgModifyAdd& operator=(GCGMsgModifyAdd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgModifyAdd& default_instance();

  static inline const GCGMsgModifyAdd* internal_default_instance() {
    return reinterpret_cast<const GCGMsgModifyAdd*>(
               &_GCGMsgModifyAdd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(GCGMsgModifyAdd* other);
  friend void swap(GCGMsgModifyAdd& a, GCGMsgModifyAdd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgModifyAdd* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgModifyAdd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgModifyAdd& from);
  void MergeFrom(const GCGMsgModifyAdd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgModifyAdd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_guid_list = 15;
  int card_guid_list_size() const;
  void clear_card_guid_list();
  static const int kCardGuidListFieldNumber = 15;
  ::google::protobuf::uint32 card_guid_list(int index) const;
  void set_card_guid_list(int index, ::google::protobuf::uint32 value);
  void add_card_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_guid_list();

  // uint32 pos = 9;
  void clear_pos();
  static const int kPosFieldNumber = 9;
  ::google::protobuf::uint32 pos() const;
  void set_pos(::google::protobuf::uint32 value);

  // uint32 owner_card_guid = 10;
  void clear_owner_card_guid();
  static const int kOwnerCardGuidFieldNumber = 10;
  ::google::protobuf::uint32 owner_card_guid() const;
  void set_owner_card_guid(::google::protobuf::uint32 value);

  // .proto.GCGReason reason = 11;
  void clear_reason();
  static const int kReasonFieldNumber = 11;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // uint32 controller_id = 14;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 14;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgModifyAdd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_guid_list_;
  mutable int _card_guid_list_cached_byte_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 owner_card_guid_;
  int reason_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgModifyRemove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgModifyRemove) */ {
 public:
  GCGMsgModifyRemove();
  virtual ~GCGMsgModifyRemove();

  GCGMsgModifyRemove(const GCGMsgModifyRemove& from);

  inline GCGMsgModifyRemove& operator=(const GCGMsgModifyRemove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgModifyRemove(GCGMsgModifyRemove&& from) noexcept
    : GCGMsgModifyRemove() {
    *this = ::std::move(from);
  }

  inline GCGMsgModifyRemove& operator=(GCGMsgModifyRemove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgModifyRemove& default_instance();

  static inline const GCGMsgModifyRemove* internal_default_instance() {
    return reinterpret_cast<const GCGMsgModifyRemove*>(
               &_GCGMsgModifyRemove_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(GCGMsgModifyRemove* other);
  friend void swap(GCGMsgModifyRemove& a, GCGMsgModifyRemove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgModifyRemove* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgModifyRemove* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgModifyRemove& from);
  void MergeFrom(const GCGMsgModifyRemove& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgModifyRemove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_guid_list = 4;
  int card_guid_list_size() const;
  void clear_card_guid_list();
  static const int kCardGuidListFieldNumber = 4;
  ::google::protobuf::uint32 card_guid_list(int index) const;
  void set_card_guid_list(int index, ::google::protobuf::uint32 value);
  void add_card_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_guid_list();

  // uint32 controller_id = 14;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 14;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 owner_card_guid = 5;
  void clear_owner_card_guid();
  static const int kOwnerCardGuidFieldNumber = 5;
  ::google::protobuf::uint32 owner_card_guid() const;
  void set_owner_card_guid(::google::protobuf::uint32 value);

  // .proto.GCGReason reason = 12;
  void clear_reason();
  static const int kReasonFieldNumber = 12;
  ::proto::GCGReason reason() const;
  void set_reason(::proto::GCGReason value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgModifyRemove)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_guid_list_;
  mutable int _card_guid_list_cached_byte_size_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 owner_card_guid_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgPVEIntention : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgPVEIntention) */ {
 public:
  GCGMsgPVEIntention();
  virtual ~GCGMsgPVEIntention();

  GCGMsgPVEIntention(const GCGMsgPVEIntention& from);

  inline GCGMsgPVEIntention& operator=(const GCGMsgPVEIntention& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgPVEIntention(GCGMsgPVEIntention&& from) noexcept
    : GCGMsgPVEIntention() {
    *this = ::std::move(from);
  }

  inline GCGMsgPVEIntention& operator=(GCGMsgPVEIntention&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgPVEIntention& default_instance();

  static inline const GCGMsgPVEIntention* internal_default_instance() {
    return reinterpret_cast<const GCGMsgPVEIntention*>(
               &_GCGMsgPVEIntention_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(GCGMsgPVEIntention* other);
  friend void swap(GCGMsgPVEIntention& a, GCGMsgPVEIntention& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgPVEIntention* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgPVEIntention* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgPVEIntention& from);
  void MergeFrom(const GCGMsgPVEIntention& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgPVEIntention* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 skill_id_list = 8;
  int skill_id_list_size() const;
  void clear_skill_id_list();
  static const int kSkillIdListFieldNumber = 8;
  ::google::protobuf::uint32 skill_id_list(int index) const;
  void set_skill_id_list(int index, ::google::protobuf::uint32 value);
  void add_skill_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id_list();

  // uint32 card_guid = 13;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 13;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgPVEIntention)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_list_;
  mutable int _skill_id_list_cached_byte_size_;
  ::google::protobuf::uint32 card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGMsgPVEIntentionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgPVEIntentionInfo) */ {
 public:
  GCGMsgPVEIntentionInfo();
  virtual ~GCGMsgPVEIntentionInfo();

  GCGMsgPVEIntentionInfo(const GCGMsgPVEIntentionInfo& from);

  inline GCGMsgPVEIntentionInfo& operator=(const GCGMsgPVEIntentionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgPVEIntentionInfo(GCGMsgPVEIntentionInfo&& from) noexcept
    : GCGMsgPVEIntentionInfo() {
    *this = ::std::move(from);
  }

  inline GCGMsgPVEIntentionInfo& operator=(GCGMsgPVEIntentionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgPVEIntentionInfo& default_instance();

  static inline const GCGMsgPVEIntentionInfo* internal_default_instance() {
    return reinterpret_cast<const GCGMsgPVEIntentionInfo*>(
               &_GCGMsgPVEIntentionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(GCGMsgPVEIntentionInfo* other);
  friend void swap(GCGMsgPVEIntentionInfo& a, GCGMsgPVEIntentionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgPVEIntentionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgPVEIntentionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgPVEIntentionInfo& from);
  void MergeFrom(const GCGMsgPVEIntentionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgPVEIntentionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.GCGMsgPVEIntention> intention_map = 2;
  int intention_map_size() const;
  void clear_intention_map();
  static const int kIntentionMapFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >&
      intention_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >*
      mutable_intention_map();

  // @@protoc_insertion_point(class_scope:proto.GCGMsgPVEIntentionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGMsgPVEIntentionInfo_IntentionMapEntry : public ::google::protobuf::internal::MapEntry<GCGMsgPVEIntentionInfo_IntentionMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGMsgPVEIntentionInfo_IntentionMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GCGMsgPVEIntentionInfo_IntentionMapEntry();
    GCGMsgPVEIntentionInfo_IntentionMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGMsgPVEIntentionInfo_IntentionMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGMsgPVEIntentionInfo_IntentionMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGMsgPVEIntentionInfo_IntentionMapEntry,
      ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > intention_map_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgPVEIntentionChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgPVEIntentionChange) */ {
 public:
  GCGMsgPVEIntentionChange();
  virtual ~GCGMsgPVEIntentionChange();

  GCGMsgPVEIntentionChange(const GCGMsgPVEIntentionChange& from);

  inline GCGMsgPVEIntentionChange& operator=(const GCGMsgPVEIntentionChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgPVEIntentionChange(GCGMsgPVEIntentionChange&& from) noexcept
    : GCGMsgPVEIntentionChange() {
    *this = ::std::move(from);
  }

  inline GCGMsgPVEIntentionChange& operator=(GCGMsgPVEIntentionChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgPVEIntentionChange& default_instance();

  static inline const GCGMsgPVEIntentionChange* internal_default_instance() {
    return reinterpret_cast<const GCGMsgPVEIntentionChange*>(
               &_GCGMsgPVEIntentionChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(GCGMsgPVEIntentionChange* other);
  friend void swap(GCGMsgPVEIntentionChange& a, GCGMsgPVEIntentionChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgPVEIntentionChange* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgPVEIntentionChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgPVEIntentionChange& from);
  void MergeFrom(const GCGMsgPVEIntentionChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgPVEIntentionChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGMsgPVEIntention change_intention_list = 4;
  int change_intention_list_size() const;
  void clear_change_intention_list();
  static const int kChangeIntentionListFieldNumber = 4;
  const ::proto::GCGMsgPVEIntention& change_intention_list(int index) const;
  ::proto::GCGMsgPVEIntention* mutable_change_intention_list(int index);
  ::proto::GCGMsgPVEIntention* add_change_intention_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMsgPVEIntention >*
      mutable_change_intention_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGMsgPVEIntention >&
      change_intention_list() const;

  // .proto.GCGIntentionChangeType change_type = 1;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 1;
  ::proto::GCGIntentionChangeType change_type() const;
  void set_change_type(::proto::GCGIntentionChangeType value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgPVEIntentionChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMsgPVEIntention > change_intention_list_;
  int change_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgDuelDataChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgDuelDataChange) */ {
 public:
  GCGMsgDuelDataChange();
  virtual ~GCGMsgDuelDataChange();

  GCGMsgDuelDataChange(const GCGMsgDuelDataChange& from);

  inline GCGMsgDuelDataChange& operator=(const GCGMsgDuelDataChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgDuelDataChange(GCGMsgDuelDataChange&& from) noexcept
    : GCGMsgDuelDataChange() {
    *this = ::std::move(from);
  }

  inline GCGMsgDuelDataChange& operator=(GCGMsgDuelDataChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgDuelDataChange& default_instance();

  static inline const GCGMsgDuelDataChange* internal_default_instance() {
    return reinterpret_cast<const GCGMsgDuelDataChange*>(
               &_GCGMsgDuelDataChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(GCGMsgDuelDataChange* other);
  friend void swap(GCGMsgDuelDataChange& a, GCGMsgDuelDataChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgDuelDataChange* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgDuelDataChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgDuelDataChange& from);
  void MergeFrom(const GCGMsgDuelDataChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgDuelDataChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 round = 14;
  void clear_round();
  static const int kRoundFieldNumber = 14;
  ::google::protobuf::uint32 round() const;
  void set_round(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgDuelDataChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 round_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgClientPerform : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgClientPerform) */ {
 public:
  GCGMsgClientPerform();
  virtual ~GCGMsgClientPerform();

  GCGMsgClientPerform(const GCGMsgClientPerform& from);

  inline GCGMsgClientPerform& operator=(const GCGMsgClientPerform& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgClientPerform(GCGMsgClientPerform&& from) noexcept
    : GCGMsgClientPerform() {
    *this = ::std::move(from);
  }

  inline GCGMsgClientPerform& operator=(GCGMsgClientPerform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgClientPerform& default_instance();

  static inline const GCGMsgClientPerform* internal_default_instance() {
    return reinterpret_cast<const GCGMsgClientPerform*>(
               &_GCGMsgClientPerform_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(GCGMsgClientPerform* other);
  friend void swap(GCGMsgClientPerform& a, GCGMsgClientPerform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgClientPerform* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgClientPerform* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgClientPerform& from);
  void MergeFrom(const GCGMsgClientPerform& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgClientPerform* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 param_list = 2;
  int param_list_size() const;
  void clear_param_list();
  static const int kParamListFieldNumber = 2;
  ::google::protobuf::uint32 param_list(int index) const;
  void set_param_list(int index, ::google::protobuf::uint32 value);
  void add_param_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_list();

  // .proto.GCGClientPerformType perform_type = 5;
  void clear_perform_type();
  static const int kPerformTypeFieldNumber = 5;
  ::proto::GCGClientPerformType perform_type() const;
  void set_perform_type(::proto::GCGClientPerformType value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgClientPerform)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_list_;
  mutable int _param_list_cached_byte_size_;
  int perform_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgGameOver : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgGameOver) */ {
 public:
  GCGMsgGameOver();
  virtual ~GCGMsgGameOver();

  GCGMsgGameOver(const GCGMsgGameOver& from);

  inline GCGMsgGameOver& operator=(const GCGMsgGameOver& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgGameOver(GCGMsgGameOver&& from) noexcept
    : GCGMsgGameOver() {
    *this = ::std::move(from);
  }

  inline GCGMsgGameOver& operator=(GCGMsgGameOver&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgGameOver& default_instance();

  static inline const GCGMsgGameOver* internal_default_instance() {
    return reinterpret_cast<const GCGMsgGameOver*>(
               &_GCGMsgGameOver_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(GCGMsgGameOver* other);
  friend void swap(GCGMsgGameOver& a, GCGMsgGameOver& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgGameOver* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgGameOver* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgGameOver& from);
  void MergeFrom(const GCGMsgGameOver& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgGameOver* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 win_controller_id = 6;
  void clear_win_controller_id();
  static const int kWinControllerIdFieldNumber = 6;
  ::google::protobuf::uint32 win_controller_id() const;
  void set_win_controller_id(::google::protobuf::uint32 value);

  // .proto.GCGEndReason end_reason = 13;
  void clear_end_reason();
  static const int kEndReasonFieldNumber = 13;
  ::proto::GCGEndReason end_reason() const;
  void set_end_reason(::proto::GCGEndReason value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgGameOver)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 win_controller_id_;
  int end_reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgOpTimer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgOpTimer) */ {
 public:
  GCGMsgOpTimer();
  virtual ~GCGMsgOpTimer();

  GCGMsgOpTimer(const GCGMsgOpTimer& from);

  inline GCGMsgOpTimer& operator=(const GCGMsgOpTimer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgOpTimer(GCGMsgOpTimer&& from) noexcept
    : GCGMsgOpTimer() {
    *this = ::std::move(from);
  }

  inline GCGMsgOpTimer& operator=(GCGMsgOpTimer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgOpTimer& default_instance();

  static inline const GCGMsgOpTimer* internal_default_instance() {
    return reinterpret_cast<const GCGMsgOpTimer*>(
               &_GCGMsgOpTimer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(GCGMsgOpTimer* other);
  friend void swap(GCGMsgOpTimer& a, GCGMsgOpTimer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgOpTimer* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgOpTimer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgOpTimer& from);
  void MergeFrom(const GCGMsgOpTimer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgOpTimer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGPhaseType phase = 3;
  void clear_phase();
  static const int kPhaseFieldNumber = 3;
  ::proto::GCGPhaseType phase() const;
  void set_phase(::proto::GCGPhaseType value);

  // uint32 controller_id = 8;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 8;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // fixed64 begin_time = 9;
  void clear_begin_time();
  static const int kBeginTimeFieldNumber = 9;
  ::google::protobuf::uint64 begin_time() const;
  void set_begin_time(::google::protobuf::uint64 value);

  // fixed64 time_stamp = 13;
  void clear_time_stamp();
  static const int kTimeStampFieldNumber = 13;
  ::google::protobuf::uint64 time_stamp() const;
  void set_time_stamp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgOpTimer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int phase_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint64 begin_time_;
  ::google::protobuf::uint64 time_stamp_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgWaitingListChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgWaitingListChange) */ {
 public:
  GCGMsgWaitingListChange();
  virtual ~GCGMsgWaitingListChange();

  GCGMsgWaitingListChange(const GCGMsgWaitingListChange& from);

  inline GCGMsgWaitingListChange& operator=(const GCGMsgWaitingListChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgWaitingListChange(GCGMsgWaitingListChange&& from) noexcept
    : GCGMsgWaitingListChange() {
    *this = ::std::move(from);
  }

  inline GCGMsgWaitingListChange& operator=(GCGMsgWaitingListChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgWaitingListChange& default_instance();

  static inline const GCGMsgWaitingListChange* internal_default_instance() {
    return reinterpret_cast<const GCGMsgWaitingListChange*>(
               &_GCGMsgWaitingListChange_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(GCGMsgWaitingListChange* other);
  friend void swap(GCGMsgWaitingListChange& a, GCGMsgWaitingListChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgWaitingListChange* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgWaitingListChange* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgWaitingListChange& from);
  void MergeFrom(const GCGMsgWaitingListChange& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgWaitingListChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controller_id = 4;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 4;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 cur_index = 6;
  void clear_cur_index();
  static const int kCurIndexFieldNumber = 6;
  ::google::protobuf::uint32 cur_index() const;
  void set_cur_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgWaitingListChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 cur_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgCardUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgCardUpdate) */ {
 public:
  GCGMsgCardUpdate();
  virtual ~GCGMsgCardUpdate();

  GCGMsgCardUpdate(const GCGMsgCardUpdate& from);

  inline GCGMsgCardUpdate& operator=(const GCGMsgCardUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgCardUpdate(GCGMsgCardUpdate&& from) noexcept
    : GCGMsgCardUpdate() {
    *this = ::std::move(from);
  }

  inline GCGMsgCardUpdate& operator=(GCGMsgCardUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgCardUpdate& default_instance();

  static inline const GCGMsgCardUpdate* internal_default_instance() {
    return reinterpret_cast<const GCGMsgCardUpdate*>(
               &_GCGMsgCardUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(GCGMsgCardUpdate* other);
  friend void swap(GCGMsgCardUpdate& a, GCGMsgCardUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgCardUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgCardUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgCardUpdate& from);
  void MergeFrom(const GCGMsgCardUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgCardUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGCard card = 7;
  bool has_card() const;
  void clear_card();
  static const int kCardFieldNumber = 7;
  const ::proto::GCGCard& card() const;
  ::proto::GCGCard* mutable_card();
  ::proto::GCGCard* release_card();
  void set_allocated_card(::proto::GCGCard* card);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgCardUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGCard* card_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgCostRevise : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgCostRevise) */ {
 public:
  GCGMsgCostRevise();
  virtual ~GCGMsgCostRevise();

  GCGMsgCostRevise(const GCGMsgCostRevise& from);

  inline GCGMsgCostRevise& operator=(const GCGMsgCostRevise& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgCostRevise(GCGMsgCostRevise&& from) noexcept
    : GCGMsgCostRevise() {
    *this = ::std::move(from);
  }

  inline GCGMsgCostRevise& operator=(GCGMsgCostRevise&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgCostRevise& default_instance();

  static inline const GCGMsgCostRevise* internal_default_instance() {
    return reinterpret_cast<const GCGMsgCostRevise*>(
               &_GCGMsgCostRevise_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(GCGMsgCostRevise* other);
  friend void swap(GCGMsgCostRevise& a, GCGMsgCostRevise& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgCostRevise* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgCostRevise* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgCostRevise& from);
  void MergeFrom(const GCGMsgCostRevise& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgCostRevise* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGCostReviseInfo cost_revise = 13;
  bool has_cost_revise() const;
  void clear_cost_revise();
  static const int kCostReviseFieldNumber = 13;
  const ::proto::GCGCostReviseInfo& cost_revise() const;
  ::proto::GCGCostReviseInfo* mutable_cost_revise();
  ::proto::GCGCostReviseInfo* release_cost_revise();
  void set_allocated_cost_revise(::proto::GCGCostReviseInfo* cost_revise);

  // uint32 controller_id = 5;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 5;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgCostRevise)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGCostReviseInfo* cost_revise_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgPhaseContinue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgPhaseContinue) */ {
 public:
  GCGMsgPhaseContinue();
  virtual ~GCGMsgPhaseContinue();

  GCGMsgPhaseContinue(const GCGMsgPhaseContinue& from);

  inline GCGMsgPhaseContinue& operator=(const GCGMsgPhaseContinue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgPhaseContinue(GCGMsgPhaseContinue&& from) noexcept
    : GCGMsgPhaseContinue() {
    *this = ::std::move(from);
  }

  inline GCGMsgPhaseContinue& operator=(GCGMsgPhaseContinue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgPhaseContinue& default_instance();

  static inline const GCGMsgPhaseContinue* internal_default_instance() {
    return reinterpret_cast<const GCGMsgPhaseContinue*>(
               &_GCGMsgPhaseContinue_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(GCGMsgPhaseContinue* other);
  friend void swap(GCGMsgPhaseContinue& a, GCGMsgPhaseContinue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgPhaseContinue* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgPhaseContinue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgPhaseContinue& from);
  void MergeFrom(const GCGMsgPhaseContinue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgPhaseContinue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGMsgPhaseContinue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgNoDamageSkillResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgNoDamageSkillResult) */ {
 public:
  GCGMsgNoDamageSkillResult();
  virtual ~GCGMsgNoDamageSkillResult();

  GCGMsgNoDamageSkillResult(const GCGMsgNoDamageSkillResult& from);

  inline GCGMsgNoDamageSkillResult& operator=(const GCGMsgNoDamageSkillResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgNoDamageSkillResult(GCGMsgNoDamageSkillResult&& from) noexcept
    : GCGMsgNoDamageSkillResult() {
    *this = ::std::move(from);
  }

  inline GCGMsgNoDamageSkillResult& operator=(GCGMsgNoDamageSkillResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgNoDamageSkillResult& default_instance();

  static inline const GCGMsgNoDamageSkillResult* internal_default_instance() {
    return reinterpret_cast<const GCGMsgNoDamageSkillResult*>(
               &_GCGMsgNoDamageSkillResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(GCGMsgNoDamageSkillResult* other);
  friend void swap(GCGMsgNoDamageSkillResult& a, GCGMsgNoDamageSkillResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgNoDamageSkillResult* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgNoDamageSkillResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgNoDamageSkillResult& from);
  void MergeFrom(const GCGMsgNoDamageSkillResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgNoDamageSkillResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGDamageDetail detail_list = 13;
  int detail_list_size() const;
  void clear_detail_list();
  static const int kDetailListFieldNumber = 13;
  const ::proto::GCGDamageDetail& detail_list(int index) const;
  ::proto::GCGDamageDetail* mutable_detail_list(int index);
  ::proto::GCGDamageDetail* add_detail_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >*
      mutable_detail_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >&
      detail_list() const;

  // uint32 from_result_seq = 4;
  void clear_from_result_seq();
  static const int kFromResultSeqFieldNumber = 4;
  ::google::protobuf::uint32 from_result_seq() const;
  void set_from_result_seq(::google::protobuf::uint32 value);

  // uint32 target_card_guid = 5;
  void clear_target_card_guid();
  static const int kTargetCardGuidFieldNumber = 5;
  ::google::protobuf::uint32 target_card_guid() const;
  void set_target_card_guid(::google::protobuf::uint32 value);

  // uint32 result_seq = 8;
  void clear_result_seq();
  static const int kResultSeqFieldNumber = 8;
  ::google::protobuf::uint32 result_seq() const;
  void set_result_seq(::google::protobuf::uint32 value);

  // uint32 effect_element = 9;
  void clear_effect_element();
  static const int kEffectElementFieldNumber = 9;
  ::google::protobuf::uint32 effect_element() const;
  void set_effect_element(::google::protobuf::uint32 value);

  // uint32 skill_id = 10;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 10;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // uint32 src_card_guid = 12;
  void clear_src_card_guid();
  static const int kSrcCardGuidFieldNumber = 12;
  ::google::protobuf::uint32 src_card_guid() const;
  void set_src_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgNoDamageSkillResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail > detail_list_;
  ::google::protobuf::uint32 from_result_seq_;
  ::google::protobuf::uint32 target_card_guid_;
  ::google::protobuf::uint32 result_seq_;
  ::google::protobuf::uint32 effect_element_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 src_card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgReactionBegin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgReactionBegin) */ {
 public:
  GCGMsgReactionBegin();
  virtual ~GCGMsgReactionBegin();

  GCGMsgReactionBegin(const GCGMsgReactionBegin& from);

  inline GCGMsgReactionBegin& operator=(const GCGMsgReactionBegin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgReactionBegin(GCGMsgReactionBegin&& from) noexcept
    : GCGMsgReactionBegin() {
    *this = ::std::move(from);
  }

  inline GCGMsgReactionBegin& operator=(GCGMsgReactionBegin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgReactionBegin& default_instance();

  static inline const GCGMsgReactionBegin* internal_default_instance() {
    return reinterpret_cast<const GCGMsgReactionBegin*>(
               &_GCGMsgReactionBegin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(GCGMsgReactionBegin* other);
  friend void swap(GCGMsgReactionBegin& a, GCGMsgReactionBegin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgReactionBegin* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgReactionBegin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgReactionBegin& from);
  void MergeFrom(const GCGMsgReactionBegin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgReactionBegin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 skill_id = 3;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 3;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // uint32 card_guid = 13;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 13;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgReactionBegin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMsgReactionEnd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMsgReactionEnd) */ {
 public:
  GCGMsgReactionEnd();
  virtual ~GCGMsgReactionEnd();

  GCGMsgReactionEnd(const GCGMsgReactionEnd& from);

  inline GCGMsgReactionEnd& operator=(const GCGMsgReactionEnd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMsgReactionEnd(GCGMsgReactionEnd&& from) noexcept
    : GCGMsgReactionEnd() {
    *this = ::std::move(from);
  }

  inline GCGMsgReactionEnd& operator=(GCGMsgReactionEnd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMsgReactionEnd& default_instance();

  static inline const GCGMsgReactionEnd* internal_default_instance() {
    return reinterpret_cast<const GCGMsgReactionEnd*>(
               &_GCGMsgReactionEnd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(GCGMsgReactionEnd* other);
  friend void swap(GCGMsgReactionEnd& a, GCGMsgReactionEnd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMsgReactionEnd* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMsgReactionEnd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMsgReactionEnd& from);
  void MergeFrom(const GCGMsgReactionEnd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMsgReactionEnd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 skill_id = 4;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 4;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMsgReactionEnd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMessage) */ {
 public:
  GCGMessage();
  virtual ~GCGMessage();

  GCGMessage(const GCGMessage& from);

  inline GCGMessage& operator=(const GCGMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMessage(GCGMessage&& from) noexcept
    : GCGMessage() {
    *this = ::std::move(from);
  }

  inline GCGMessage& operator=(GCGMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMessage& default_instance();

  enum MessageCase {
    kTokenChange = 12,
    kPhaseChange = 13,
    kAddCards = 10,
    kRemoveCards = 14,
    kSelectOnStage = 6,
    kDiceRoll = 9,
    kDiceReroll = 11,
    kPass = 5,
    kCharDie = 2,
    kSkillResult = 1,
    kCostDice = 7,
    kAddDice = 3,
    kMoveCard = 15,
    kUseSkill = 4,
    kNewCard = 1848,
    kUpdateController = 429,
    kModifyAdd = 1851,
    kModifyRemove = 471,
    kUseSkillEnd = 1411,
    kDuelDataChange = 1008,
    kClientPerform = 1035,
    kGameOver = 714,
    kOpTimer = 1862,
    kWaitingListChange = 1678,
    kCardUpdate = 1879,
    kSelectOnStageByEffect = 2042,
    kCostRevise = 1350,
    kPhaseContinue = 1474,
    kPveIntentionInfo = 1252,
    kPveIntentionChange = 893,
    kSkillLimitsChange = 259,
    kNoDamageSkillResult = 24,
    kReactionBegin = 859,
    kReactionEnd = 1395,
    MESSAGE_NOT_SET = 0,
  };

  static inline const GCGMessage* internal_default_instance() {
    return reinterpret_cast<const GCGMessage*>(
               &_GCGMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(GCGMessage* other);
  friend void swap(GCGMessage& a, GCGMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMessage& from);
  void MergeFrom(const GCGMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGMsgTokenChange token_change = 12;
  bool has_token_change() const;
  void clear_token_change();
  static const int kTokenChangeFieldNumber = 12;
  const ::proto::GCGMsgTokenChange& token_change() const;
  ::proto::GCGMsgTokenChange* mutable_token_change();
  ::proto::GCGMsgTokenChange* release_token_change();
  void set_allocated_token_change(::proto::GCGMsgTokenChange* token_change);

  // .proto.GCGMsgPhaseChange phase_change = 13;
  bool has_phase_change() const;
  void clear_phase_change();
  static const int kPhaseChangeFieldNumber = 13;
  const ::proto::GCGMsgPhaseChange& phase_change() const;
  ::proto::GCGMsgPhaseChange* mutable_phase_change();
  ::proto::GCGMsgPhaseChange* release_phase_change();
  void set_allocated_phase_change(::proto::GCGMsgPhaseChange* phase_change);

  // .proto.GCGMsgAddCards add_cards = 10;
  bool has_add_cards() const;
  void clear_add_cards();
  static const int kAddCardsFieldNumber = 10;
  const ::proto::GCGMsgAddCards& add_cards() const;
  ::proto::GCGMsgAddCards* mutable_add_cards();
  ::proto::GCGMsgAddCards* release_add_cards();
  void set_allocated_add_cards(::proto::GCGMsgAddCards* add_cards);

  // .proto.GCGMsgRemoveCards remove_cards = 14;
  bool has_remove_cards() const;
  void clear_remove_cards();
  static const int kRemoveCardsFieldNumber = 14;
  const ::proto::GCGMsgRemoveCards& remove_cards() const;
  ::proto::GCGMsgRemoveCards* mutable_remove_cards();
  ::proto::GCGMsgRemoveCards* release_remove_cards();
  void set_allocated_remove_cards(::proto::GCGMsgRemoveCards* remove_cards);

  // .proto.GCGMsgSelectOnStage select_on_stage = 6;
  bool has_select_on_stage() const;
  void clear_select_on_stage();
  static const int kSelectOnStageFieldNumber = 6;
  const ::proto::GCGMsgSelectOnStage& select_on_stage() const;
  ::proto::GCGMsgSelectOnStage* mutable_select_on_stage();
  ::proto::GCGMsgSelectOnStage* release_select_on_stage();
  void set_allocated_select_on_stage(::proto::GCGMsgSelectOnStage* select_on_stage);

  // .proto.GCGMsgDiceRoll dice_roll = 9;
  bool has_dice_roll() const;
  void clear_dice_roll();
  static const int kDiceRollFieldNumber = 9;
  const ::proto::GCGMsgDiceRoll& dice_roll() const;
  ::proto::GCGMsgDiceRoll* mutable_dice_roll();
  ::proto::GCGMsgDiceRoll* release_dice_roll();
  void set_allocated_dice_roll(::proto::GCGMsgDiceRoll* dice_roll);

  // .proto.GCGMsgDiceReroll dice_reroll = 11;
  bool has_dice_reroll() const;
  void clear_dice_reroll();
  static const int kDiceRerollFieldNumber = 11;
  const ::proto::GCGMsgDiceReroll& dice_reroll() const;
  ::proto::GCGMsgDiceReroll* mutable_dice_reroll();
  ::proto::GCGMsgDiceReroll* release_dice_reroll();
  void set_allocated_dice_reroll(::proto::GCGMsgDiceReroll* dice_reroll);

  // .proto.GCGMsgPass pass = 5;
  bool has_pass() const;
  void clear_pass();
  static const int kPassFieldNumber = 5;
  const ::proto::GCGMsgPass& pass() const;
  ::proto::GCGMsgPass* mutable_pass();
  ::proto::GCGMsgPass* release_pass();
  void set_allocated_pass(::proto::GCGMsgPass* pass);

  // .proto.GCGMsgCharDie char_die = 2;
  bool has_char_die() const;
  void clear_char_die();
  static const int kCharDieFieldNumber = 2;
  const ::proto::GCGMsgCharDie& char_die() const;
  ::proto::GCGMsgCharDie* mutable_char_die();
  ::proto::GCGMsgCharDie* release_char_die();
  void set_allocated_char_die(::proto::GCGMsgCharDie* char_die);

  // .proto.GCGMsgSkillResult skill_result = 1;
  bool has_skill_result() const;
  void clear_skill_result();
  static const int kSkillResultFieldNumber = 1;
  const ::proto::GCGMsgSkillResult& skill_result() const;
  ::proto::GCGMsgSkillResult* mutable_skill_result();
  ::proto::GCGMsgSkillResult* release_skill_result();
  void set_allocated_skill_result(::proto::GCGMsgSkillResult* skill_result);

  // .proto.GCGMsgCostDice cost_dice = 7;
  bool has_cost_dice() const;
  void clear_cost_dice();
  static const int kCostDiceFieldNumber = 7;
  const ::proto::GCGMsgCostDice& cost_dice() const;
  ::proto::GCGMsgCostDice* mutable_cost_dice();
  ::proto::GCGMsgCostDice* release_cost_dice();
  void set_allocated_cost_dice(::proto::GCGMsgCostDice* cost_dice);

  // .proto.GCGMsgAddDice add_dice = 3;
  bool has_add_dice() const;
  void clear_add_dice();
  static const int kAddDiceFieldNumber = 3;
  const ::proto::GCGMsgAddDice& add_dice() const;
  ::proto::GCGMsgAddDice* mutable_add_dice();
  ::proto::GCGMsgAddDice* release_add_dice();
  void set_allocated_add_dice(::proto::GCGMsgAddDice* add_dice);

  // .proto.GCGMsgMoveCard move_card = 15;
  bool has_move_card() const;
  void clear_move_card();
  static const int kMoveCardFieldNumber = 15;
  const ::proto::GCGMsgMoveCard& move_card() const;
  ::proto::GCGMsgMoveCard* mutable_move_card();
  ::proto::GCGMsgMoveCard* release_move_card();
  void set_allocated_move_card(::proto::GCGMsgMoveCard* move_card);

  // .proto.GCGMsgUseSkill use_skill = 4;
  bool has_use_skill() const;
  void clear_use_skill();
  static const int kUseSkillFieldNumber = 4;
  const ::proto::GCGMsgUseSkill& use_skill() const;
  ::proto::GCGMsgUseSkill* mutable_use_skill();
  ::proto::GCGMsgUseSkill* release_use_skill();
  void set_allocated_use_skill(::proto::GCGMsgUseSkill* use_skill);

  // .proto.GCGMsgNewCard new_card = 1848;
  bool has_new_card() const;
  void clear_new_card();
  static const int kNewCardFieldNumber = 1848;
  const ::proto::GCGMsgNewCard& new_card() const;
  ::proto::GCGMsgNewCard* mutable_new_card();
  ::proto::GCGMsgNewCard* release_new_card();
  void set_allocated_new_card(::proto::GCGMsgNewCard* new_card);

  // .proto.GCGMsgUpdateController update_controller = 429;
  bool has_update_controller() const;
  void clear_update_controller();
  static const int kUpdateControllerFieldNumber = 429;
  const ::proto::GCGMsgUpdateController& update_controller() const;
  ::proto::GCGMsgUpdateController* mutable_update_controller();
  ::proto::GCGMsgUpdateController* release_update_controller();
  void set_allocated_update_controller(::proto::GCGMsgUpdateController* update_controller);

  // .proto.GCGMsgModifyAdd modify_add = 1851;
  bool has_modify_add() const;
  void clear_modify_add();
  static const int kModifyAddFieldNumber = 1851;
  const ::proto::GCGMsgModifyAdd& modify_add() const;
  ::proto::GCGMsgModifyAdd* mutable_modify_add();
  ::proto::GCGMsgModifyAdd* release_modify_add();
  void set_allocated_modify_add(::proto::GCGMsgModifyAdd* modify_add);

  // .proto.GCGMsgModifyRemove modify_remove = 471;
  bool has_modify_remove() const;
  void clear_modify_remove();
  static const int kModifyRemoveFieldNumber = 471;
  const ::proto::GCGMsgModifyRemove& modify_remove() const;
  ::proto::GCGMsgModifyRemove* mutable_modify_remove();
  ::proto::GCGMsgModifyRemove* release_modify_remove();
  void set_allocated_modify_remove(::proto::GCGMsgModifyRemove* modify_remove);

  // .proto.GCGMsgUseSkillEnd use_skill_end = 1411;
  bool has_use_skill_end() const;
  void clear_use_skill_end();
  static const int kUseSkillEndFieldNumber = 1411;
  const ::proto::GCGMsgUseSkillEnd& use_skill_end() const;
  ::proto::GCGMsgUseSkillEnd* mutable_use_skill_end();
  ::proto::GCGMsgUseSkillEnd* release_use_skill_end();
  void set_allocated_use_skill_end(::proto::GCGMsgUseSkillEnd* use_skill_end);

  // .proto.GCGMsgDuelDataChange duel_data_change = 1008;
  bool has_duel_data_change() const;
  void clear_duel_data_change();
  static const int kDuelDataChangeFieldNumber = 1008;
  const ::proto::GCGMsgDuelDataChange& duel_data_change() const;
  ::proto::GCGMsgDuelDataChange* mutable_duel_data_change();
  ::proto::GCGMsgDuelDataChange* release_duel_data_change();
  void set_allocated_duel_data_change(::proto::GCGMsgDuelDataChange* duel_data_change);

  // .proto.GCGMsgClientPerform client_perform = 1035;
  bool has_client_perform() const;
  void clear_client_perform();
  static const int kClientPerformFieldNumber = 1035;
  const ::proto::GCGMsgClientPerform& client_perform() const;
  ::proto::GCGMsgClientPerform* mutable_client_perform();
  ::proto::GCGMsgClientPerform* release_client_perform();
  void set_allocated_client_perform(::proto::GCGMsgClientPerform* client_perform);

  // .proto.GCGMsgGameOver game_over = 714;
  bool has_game_over() const;
  void clear_game_over();
  static const int kGameOverFieldNumber = 714;
  const ::proto::GCGMsgGameOver& game_over() const;
  ::proto::GCGMsgGameOver* mutable_game_over();
  ::proto::GCGMsgGameOver* release_game_over();
  void set_allocated_game_over(::proto::GCGMsgGameOver* game_over);

  // .proto.GCGMsgOpTimer op_timer = 1862;
  bool has_op_timer() const;
  void clear_op_timer();
  static const int kOpTimerFieldNumber = 1862;
  const ::proto::GCGMsgOpTimer& op_timer() const;
  ::proto::GCGMsgOpTimer* mutable_op_timer();
  ::proto::GCGMsgOpTimer* release_op_timer();
  void set_allocated_op_timer(::proto::GCGMsgOpTimer* op_timer);

  // .proto.GCGMsgWaitingListChange waiting_list_change = 1678;
  bool has_waiting_list_change() const;
  void clear_waiting_list_change();
  static const int kWaitingListChangeFieldNumber = 1678;
  const ::proto::GCGMsgWaitingListChange& waiting_list_change() const;
  ::proto::GCGMsgWaitingListChange* mutable_waiting_list_change();
  ::proto::GCGMsgWaitingListChange* release_waiting_list_change();
  void set_allocated_waiting_list_change(::proto::GCGMsgWaitingListChange* waiting_list_change);

  // .proto.GCGMsgCardUpdate card_update = 1879;
  bool has_card_update() const;
  void clear_card_update();
  static const int kCardUpdateFieldNumber = 1879;
  const ::proto::GCGMsgCardUpdate& card_update() const;
  ::proto::GCGMsgCardUpdate* mutable_card_update();
  ::proto::GCGMsgCardUpdate* release_card_update();
  void set_allocated_card_update(::proto::GCGMsgCardUpdate* card_update);

  // .proto.GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 2042;
  bool has_select_on_stage_by_effect() const;
  void clear_select_on_stage_by_effect();
  static const int kSelectOnStageByEffectFieldNumber = 2042;
  const ::proto::GCGMsgSelectOnStageByEffect& select_on_stage_by_effect() const;
  ::proto::GCGMsgSelectOnStageByEffect* mutable_select_on_stage_by_effect();
  ::proto::GCGMsgSelectOnStageByEffect* release_select_on_stage_by_effect();
  void set_allocated_select_on_stage_by_effect(::proto::GCGMsgSelectOnStageByEffect* select_on_stage_by_effect);

  // .proto.GCGMsgCostRevise cost_revise = 1350;
  bool has_cost_revise() const;
  void clear_cost_revise();
  static const int kCostReviseFieldNumber = 1350;
  const ::proto::GCGMsgCostRevise& cost_revise() const;
  ::proto::GCGMsgCostRevise* mutable_cost_revise();
  ::proto::GCGMsgCostRevise* release_cost_revise();
  void set_allocated_cost_revise(::proto::GCGMsgCostRevise* cost_revise);

  // .proto.GCGMsgPhaseContinue phase_continue = 1474;
  bool has_phase_continue() const;
  void clear_phase_continue();
  static const int kPhaseContinueFieldNumber = 1474;
  const ::proto::GCGMsgPhaseContinue& phase_continue() const;
  ::proto::GCGMsgPhaseContinue* mutable_phase_continue();
  ::proto::GCGMsgPhaseContinue* release_phase_continue();
  void set_allocated_phase_continue(::proto::GCGMsgPhaseContinue* phase_continue);

  // .proto.GCGMsgPVEIntentionInfo pve_intention_info = 1252;
  bool has_pve_intention_info() const;
  void clear_pve_intention_info();
  static const int kPveIntentionInfoFieldNumber = 1252;
  const ::proto::GCGMsgPVEIntentionInfo& pve_intention_info() const;
  ::proto::GCGMsgPVEIntentionInfo* mutable_pve_intention_info();
  ::proto::GCGMsgPVEIntentionInfo* release_pve_intention_info();
  void set_allocated_pve_intention_info(::proto::GCGMsgPVEIntentionInfo* pve_intention_info);

  // .proto.GCGMsgPVEIntentionChange pve_intention_change = 893;
  bool has_pve_intention_change() const;
  void clear_pve_intention_change();
  static const int kPveIntentionChangeFieldNumber = 893;
  const ::proto::GCGMsgPVEIntentionChange& pve_intention_change() const;
  ::proto::GCGMsgPVEIntentionChange* mutable_pve_intention_change();
  ::proto::GCGMsgPVEIntentionChange* release_pve_intention_change();
  void set_allocated_pve_intention_change(::proto::GCGMsgPVEIntentionChange* pve_intention_change);

  // .proto.GCGMsgSkillLimitsChange skill_limits_change = 259;
  bool has_skill_limits_change() const;
  void clear_skill_limits_change();
  static const int kSkillLimitsChangeFieldNumber = 259;
  const ::proto::GCGMsgSkillLimitsChange& skill_limits_change() const;
  ::proto::GCGMsgSkillLimitsChange* mutable_skill_limits_change();
  ::proto::GCGMsgSkillLimitsChange* release_skill_limits_change();
  void set_allocated_skill_limits_change(::proto::GCGMsgSkillLimitsChange* skill_limits_change);

  // .proto.GCGMsgNoDamageSkillResult no_damage_skill_result = 24;
  bool has_no_damage_skill_result() const;
  void clear_no_damage_skill_result();
  static const int kNoDamageSkillResultFieldNumber = 24;
  const ::proto::GCGMsgNoDamageSkillResult& no_damage_skill_result() const;
  ::proto::GCGMsgNoDamageSkillResult* mutable_no_damage_skill_result();
  ::proto::GCGMsgNoDamageSkillResult* release_no_damage_skill_result();
  void set_allocated_no_damage_skill_result(::proto::GCGMsgNoDamageSkillResult* no_damage_skill_result);

  // .proto.GCGMsgReactionBegin reaction_begin = 859;
  bool has_reaction_begin() const;
  void clear_reaction_begin();
  static const int kReactionBeginFieldNumber = 859;
  const ::proto::GCGMsgReactionBegin& reaction_begin() const;
  ::proto::GCGMsgReactionBegin* mutable_reaction_begin();
  ::proto::GCGMsgReactionBegin* release_reaction_begin();
  void set_allocated_reaction_begin(::proto::GCGMsgReactionBegin* reaction_begin);

  // .proto.GCGMsgReactionEnd reaction_end = 1395;
  bool has_reaction_end() const;
  void clear_reaction_end();
  static const int kReactionEndFieldNumber = 1395;
  const ::proto::GCGMsgReactionEnd& reaction_end() const;
  ::proto::GCGMsgReactionEnd* mutable_reaction_end();
  ::proto::GCGMsgReactionEnd* release_reaction_end();
  void set_allocated_reaction_end(::proto::GCGMsgReactionEnd* reaction_end);

  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:proto.GCGMessage)
 private:
  void set_has_token_change();
  void set_has_phase_change();
  void set_has_add_cards();
  void set_has_remove_cards();
  void set_has_select_on_stage();
  void set_has_dice_roll();
  void set_has_dice_reroll();
  void set_has_pass();
  void set_has_char_die();
  void set_has_skill_result();
  void set_has_cost_dice();
  void set_has_add_dice();
  void set_has_move_card();
  void set_has_use_skill();
  void set_has_new_card();
  void set_has_update_controller();
  void set_has_modify_add();
  void set_has_modify_remove();
  void set_has_use_skill_end();
  void set_has_duel_data_change();
  void set_has_client_perform();
  void set_has_game_over();
  void set_has_op_timer();
  void set_has_waiting_list_change();
  void set_has_card_update();
  void set_has_select_on_stage_by_effect();
  void set_has_cost_revise();
  void set_has_phase_continue();
  void set_has_pve_intention_info();
  void set_has_pve_intention_change();
  void set_has_skill_limits_change();
  void set_has_no_damage_skill_result();
  void set_has_reaction_begin();
  void set_has_reaction_end();

  inline bool has_message() const;
  void clear_message();
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageUnion {
    MessageUnion() {}
    ::proto::GCGMsgTokenChange* token_change_;
    ::proto::GCGMsgPhaseChange* phase_change_;
    ::proto::GCGMsgAddCards* add_cards_;
    ::proto::GCGMsgRemoveCards* remove_cards_;
    ::proto::GCGMsgSelectOnStage* select_on_stage_;
    ::proto::GCGMsgDiceRoll* dice_roll_;
    ::proto::GCGMsgDiceReroll* dice_reroll_;
    ::proto::GCGMsgPass* pass_;
    ::proto::GCGMsgCharDie* char_die_;
    ::proto::GCGMsgSkillResult* skill_result_;
    ::proto::GCGMsgCostDice* cost_dice_;
    ::proto::GCGMsgAddDice* add_dice_;
    ::proto::GCGMsgMoveCard* move_card_;
    ::proto::GCGMsgUseSkill* use_skill_;
    ::proto::GCGMsgNewCard* new_card_;
    ::proto::GCGMsgUpdateController* update_controller_;
    ::proto::GCGMsgModifyAdd* modify_add_;
    ::proto::GCGMsgModifyRemove* modify_remove_;
    ::proto::GCGMsgUseSkillEnd* use_skill_end_;
    ::proto::GCGMsgDuelDataChange* duel_data_change_;
    ::proto::GCGMsgClientPerform* client_perform_;
    ::proto::GCGMsgGameOver* game_over_;
    ::proto::GCGMsgOpTimer* op_timer_;
    ::proto::GCGMsgWaitingListChange* waiting_list_change_;
    ::proto::GCGMsgCardUpdate* card_update_;
    ::proto::GCGMsgSelectOnStageByEffect* select_on_stage_by_effect_;
    ::proto::GCGMsgCostRevise* cost_revise_;
    ::proto::GCGMsgPhaseContinue* phase_continue_;
    ::proto::GCGMsgPVEIntentionInfo* pve_intention_info_;
    ::proto::GCGMsgPVEIntentionChange* pve_intention_change_;
    ::proto::GCGMsgSkillLimitsChange* skill_limits_change_;
    ::proto::GCGMsgNoDamageSkillResult* no_damage_skill_result_;
    ::proto::GCGMsgReactionBegin* reaction_begin_;
    ::proto::GCGMsgReactionEnd* reaction_end_;
  } message_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMessagePack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMessagePack) */ {
 public:
  GCGMessagePack();
  virtual ~GCGMessagePack();

  GCGMessagePack(const GCGMessagePack& from);

  inline GCGMessagePack& operator=(const GCGMessagePack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMessagePack(GCGMessagePack&& from) noexcept
    : GCGMessagePack() {
    *this = ::std::move(from);
  }

  inline GCGMessagePack& operator=(GCGMessagePack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMessagePack& default_instance();

  static inline const GCGMessagePack* internal_default_instance() {
    return reinterpret_cast<const GCGMessagePack*>(
               &_GCGMessagePack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(GCGMessagePack* other);
  friend void swap(GCGMessagePack& a, GCGMessagePack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMessagePack* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMessagePack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMessagePack& from);
  void MergeFrom(const GCGMessagePack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMessagePack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGMessage msg_list = 13;
  int msg_list_size() const;
  void clear_msg_list();
  static const int kMsgListFieldNumber = 13;
  const ::proto::GCGMessage& msg_list(int index) const;
  ::proto::GCGMessage* mutable_msg_list(int index);
  ::proto::GCGMessage* add_msg_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMessage >*
      mutable_msg_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessage >&
      msg_list() const;

  // .proto.GCGActionType action_type = 3;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 3;
  ::proto::GCGActionType action_type() const;
  void set_action_type(::proto::GCGActionType value);

  // uint32 controller_id = 6;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 6;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMessagePack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMessage > msg_list_;
  int action_type_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationRedraw : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationRedraw) */ {
 public:
  GCGOperationRedraw();
  virtual ~GCGOperationRedraw();

  GCGOperationRedraw(const GCGOperationRedraw& from);

  inline GCGOperationRedraw& operator=(const GCGOperationRedraw& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationRedraw(GCGOperationRedraw&& from) noexcept
    : GCGOperationRedraw() {
    *this = ::std::move(from);
  }

  inline GCGOperationRedraw& operator=(GCGOperationRedraw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationRedraw& default_instance();

  static inline const GCGOperationRedraw* internal_default_instance() {
    return reinterpret_cast<const GCGOperationRedraw*>(
               &_GCGOperationRedraw_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    54;

  void Swap(GCGOperationRedraw* other);
  friend void swap(GCGOperationRedraw& a, GCGOperationRedraw& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationRedraw* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationRedraw* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationRedraw& from);
  void MergeFrom(const GCGOperationRedraw& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationRedraw* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_list = 2;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 2;
  ::google::protobuf::uint32 card_list(int index) const;
  void set_card_list(int index, ::google::protobuf::uint32 value);
  void add_card_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_list();

  // @@protoc_insertion_point(class_scope:proto.GCGOperationRedraw)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_list_;
  mutable int _card_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationOnStageSelect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationOnStageSelect) */ {
 public:
  GCGOperationOnStageSelect();
  virtual ~GCGOperationOnStageSelect();

  GCGOperationOnStageSelect(const GCGOperationOnStageSelect& from);

  inline GCGOperationOnStageSelect& operator=(const GCGOperationOnStageSelect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationOnStageSelect(GCGOperationOnStageSelect&& from) noexcept
    : GCGOperationOnStageSelect() {
    *this = ::std::move(from);
  }

  inline GCGOperationOnStageSelect& operator=(GCGOperationOnStageSelect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationOnStageSelect& default_instance();

  static inline const GCGOperationOnStageSelect* internal_default_instance() {
    return reinterpret_cast<const GCGOperationOnStageSelect*>(
               &_GCGOperationOnStageSelect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(GCGOperationOnStageSelect* other);
  friend void swap(GCGOperationOnStageSelect& a, GCGOperationOnStageSelect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationOnStageSelect* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationOnStageSelect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationOnStageSelect& from);
  void MergeFrom(const GCGOperationOnStageSelect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationOnStageSelect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cost_dice_index_list = 4;
  int cost_dice_index_list_size() const;
  void clear_cost_dice_index_list();
  static const int kCostDiceIndexListFieldNumber = 4;
  ::google::protobuf::uint32 cost_dice_index_list(int index) const;
  void set_cost_dice_index_list(int index, ::google::protobuf::uint32 value);
  void add_cost_dice_index_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cost_dice_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cost_dice_index_list();

  // uint32 card_guid = 5;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 5;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGOperationOnStageSelect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cost_dice_index_list_;
  mutable int _cost_dice_index_list_cached_byte_size_;
  ::google::protobuf::uint32 card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationReroll : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationReroll) */ {
 public:
  GCGOperationReroll();
  virtual ~GCGOperationReroll();

  GCGOperationReroll(const GCGOperationReroll& from);

  inline GCGOperationReroll& operator=(const GCGOperationReroll& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationReroll(GCGOperationReroll&& from) noexcept
    : GCGOperationReroll() {
    *this = ::std::move(from);
  }

  inline GCGOperationReroll& operator=(GCGOperationReroll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationReroll& default_instance();

  static inline const GCGOperationReroll* internal_default_instance() {
    return reinterpret_cast<const GCGOperationReroll*>(
               &_GCGOperationReroll_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(GCGOperationReroll* other);
  friend void swap(GCGOperationReroll& a, GCGOperationReroll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationReroll* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationReroll* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationReroll& from);
  void MergeFrom(const GCGOperationReroll& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationReroll* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 dice_index_list = 12;
  int dice_index_list_size() const;
  void clear_dice_index_list();
  static const int kDiceIndexListFieldNumber = 12;
  ::google::protobuf::uint32 dice_index_list(int index) const;
  void set_dice_index_list(int index, ::google::protobuf::uint32 value);
  void add_dice_index_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dice_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dice_index_list();

  // @@protoc_insertion_point(class_scope:proto.GCGOperationReroll)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dice_index_list_;
  mutable int _dice_index_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationAttack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationAttack) */ {
 public:
  GCGOperationAttack();
  virtual ~GCGOperationAttack();

  GCGOperationAttack(const GCGOperationAttack& from);

  inline GCGOperationAttack& operator=(const GCGOperationAttack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationAttack(GCGOperationAttack&& from) noexcept
    : GCGOperationAttack() {
    *this = ::std::move(from);
  }

  inline GCGOperationAttack& operator=(GCGOperationAttack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationAttack& default_instance();

  static inline const GCGOperationAttack* internal_default_instance() {
    return reinterpret_cast<const GCGOperationAttack*>(
               &_GCGOperationAttack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(GCGOperationAttack* other);
  friend void swap(GCGOperationAttack& a, GCGOperationAttack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationAttack* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationAttack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationAttack& from);
  void MergeFrom(const GCGOperationAttack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationAttack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cost_dice_index_list = 8;
  int cost_dice_index_list_size() const;
  void clear_cost_dice_index_list();
  static const int kCostDiceIndexListFieldNumber = 8;
  ::google::protobuf::uint32 cost_dice_index_list(int index) const;
  void set_cost_dice_index_list(int index, ::google::protobuf::uint32 value);
  void add_cost_dice_index_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cost_dice_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cost_dice_index_list();

  // uint32 skill_id = 2;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 2;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGOperationAttack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cost_dice_index_list_;
  mutable int _cost_dice_index_list_cached_byte_size_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationPass : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationPass) */ {
 public:
  GCGOperationPass();
  virtual ~GCGOperationPass();

  GCGOperationPass(const GCGOperationPass& from);

  inline GCGOperationPass& operator=(const GCGOperationPass& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationPass(GCGOperationPass&& from) noexcept
    : GCGOperationPass() {
    *this = ::std::move(from);
  }

  inline GCGOperationPass& operator=(GCGOperationPass&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationPass& default_instance();

  static inline const GCGOperationPass* internal_default_instance() {
    return reinterpret_cast<const GCGOperationPass*>(
               &_GCGOperationPass_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(GCGOperationPass* other);
  friend void swap(GCGOperationPass& a, GCGOperationPass& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationPass* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationPass* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationPass& from);
  void MergeFrom(const GCGOperationPass& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationPass* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGOperationPass)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationPlayCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationPlayCard) */ {
 public:
  GCGOperationPlayCard();
  virtual ~GCGOperationPlayCard();

  GCGOperationPlayCard(const GCGOperationPlayCard& from);

  inline GCGOperationPlayCard& operator=(const GCGOperationPlayCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationPlayCard(GCGOperationPlayCard&& from) noexcept
    : GCGOperationPlayCard() {
    *this = ::std::move(from);
  }

  inline GCGOperationPlayCard& operator=(GCGOperationPlayCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationPlayCard& default_instance();

  static inline const GCGOperationPlayCard* internal_default_instance() {
    return reinterpret_cast<const GCGOperationPlayCard*>(
               &_GCGOperationPlayCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(GCGOperationPlayCard* other);
  friend void swap(GCGOperationPlayCard& a, GCGOperationPlayCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationPlayCard* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationPlayCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationPlayCard& from);
  void MergeFrom(const GCGOperationPlayCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationPlayCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 cost_dice_index_list = 4;
  int cost_dice_index_list_size() const;
  void clear_cost_dice_index_list();
  static const int kCostDiceIndexListFieldNumber = 4;
  ::google::protobuf::uint32 cost_dice_index_list(int index) const;
  void set_cost_dice_index_list(int index, ::google::protobuf::uint32 value);
  void add_cost_dice_index_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cost_dice_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cost_dice_index_list();

  // repeated uint32 target_card_guid_list = 10;
  int target_card_guid_list_size() const;
  void clear_target_card_guid_list();
  static const int kTargetCardGuidListFieldNumber = 10;
  ::google::protobuf::uint32 target_card_guid_list(int index) const;
  void set_target_card_guid_list(int index, ::google::protobuf::uint32 value);
  void add_target_card_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      target_card_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_target_card_guid_list();

  // uint32 replace_card_guid = 8;
  void clear_replace_card_guid();
  static const int kReplaceCardGuidFieldNumber = 8;
  ::google::protobuf::uint32 replace_card_guid() const;
  void set_replace_card_guid(::google::protobuf::uint32 value);

  // uint32 card_guid = 12;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 12;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGOperationPlayCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cost_dice_index_list_;
  mutable int _cost_dice_index_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > target_card_guid_list_;
  mutable int _target_card_guid_list_cached_byte_size_;
  ::google::protobuf::uint32 replace_card_guid_;
  ::google::protobuf::uint32 card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationReboot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationReboot) */ {
 public:
  GCGOperationReboot();
  virtual ~GCGOperationReboot();

  GCGOperationReboot(const GCGOperationReboot& from);

  inline GCGOperationReboot& operator=(const GCGOperationReboot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationReboot(GCGOperationReboot&& from) noexcept
    : GCGOperationReboot() {
    *this = ::std::move(from);
  }

  inline GCGOperationReboot& operator=(GCGOperationReboot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationReboot& default_instance();

  static inline const GCGOperationReboot* internal_default_instance() {
    return reinterpret_cast<const GCGOperationReboot*>(
               &_GCGOperationReboot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(GCGOperationReboot* other);
  friend void swap(GCGOperationReboot& a, GCGOperationReboot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationReboot* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationReboot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationReboot& from);
  void MergeFrom(const GCGOperationReboot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationReboot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 dice_index_list = 6;
  int dice_index_list_size() const;
  void clear_dice_index_list();
  static const int kDiceIndexListFieldNumber = 6;
  ::google::protobuf::uint32 dice_index_list(int index) const;
  void set_dice_index_list(int index, ::google::protobuf::uint32 value);
  void add_dice_index_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dice_index_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dice_index_list();

  // repeated uint32 cost_card_guid_list = 7;
  int cost_card_guid_list_size() const;
  void clear_cost_card_guid_list();
  static const int kCostCardGuidListFieldNumber = 7;
  ::google::protobuf::uint32 cost_card_guid_list(int index) const;
  void set_cost_card_guid_list(int index, ::google::protobuf::uint32 value);
  void add_cost_card_guid_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cost_card_guid_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cost_card_guid_list();

  // @@protoc_insertion_point(class_scope:proto.GCGOperationReboot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dice_index_list_;
  mutable int _dice_index_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cost_card_guid_list_;
  mutable int _cost_card_guid_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationSurrender : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationSurrender) */ {
 public:
  GCGOperationSurrender();
  virtual ~GCGOperationSurrender();

  GCGOperationSurrender(const GCGOperationSurrender& from);

  inline GCGOperationSurrender& operator=(const GCGOperationSurrender& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationSurrender(GCGOperationSurrender&& from) noexcept
    : GCGOperationSurrender() {
    *this = ::std::move(from);
  }

  inline GCGOperationSurrender& operator=(GCGOperationSurrender&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationSurrender& default_instance();

  static inline const GCGOperationSurrender* internal_default_instance() {
    return reinterpret_cast<const GCGOperationSurrender*>(
               &_GCGOperationSurrender_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(GCGOperationSurrender* other);
  friend void swap(GCGOperationSurrender& a, GCGOperationSurrender& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationSurrender* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationSurrender* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationSurrender& from);
  void MergeFrom(const GCGOperationSurrender& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationSurrender* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGOperationSurrender)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperation) */ {
 public:
  GCGOperation();
  virtual ~GCGOperation();

  GCGOperation(const GCGOperation& from);

  inline GCGOperation& operator=(const GCGOperation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperation(GCGOperation&& from) noexcept
    : GCGOperation() {
    *this = ::std::move(from);
  }

  inline GCGOperation& operator=(GCGOperation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperation& default_instance();

  enum OpCase {
    kOpRedraw = 10,
    kOpSelectOnStage = 4,
    kOpReroll = 9,
    kOpAttack = 11,
    kOpPass = 15,
    kOpPlayCard = 2,
    kOpReboot = 5,
    kOpSurrender = 1,
    OP_NOT_SET = 0,
  };

  static inline const GCGOperation* internal_default_instance() {
    return reinterpret_cast<const GCGOperation*>(
               &_GCGOperation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    62;

  void Swap(GCGOperation* other);
  friend void swap(GCGOperation& a, GCGOperation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperation* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperation& from);
  void MergeFrom(const GCGOperation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGOperationRedraw op_redraw = 10;
  bool has_op_redraw() const;
  void clear_op_redraw();
  static const int kOpRedrawFieldNumber = 10;
  const ::proto::GCGOperationRedraw& op_redraw() const;
  ::proto::GCGOperationRedraw* mutable_op_redraw();
  ::proto::GCGOperationRedraw* release_op_redraw();
  void set_allocated_op_redraw(::proto::GCGOperationRedraw* op_redraw);

  // .proto.GCGOperationOnStageSelect op_select_on_stage = 4;
  bool has_op_select_on_stage() const;
  void clear_op_select_on_stage();
  static const int kOpSelectOnStageFieldNumber = 4;
  const ::proto::GCGOperationOnStageSelect& op_select_on_stage() const;
  ::proto::GCGOperationOnStageSelect* mutable_op_select_on_stage();
  ::proto::GCGOperationOnStageSelect* release_op_select_on_stage();
  void set_allocated_op_select_on_stage(::proto::GCGOperationOnStageSelect* op_select_on_stage);

  // .proto.GCGOperationReroll op_reroll = 9;
  bool has_op_reroll() const;
  void clear_op_reroll();
  static const int kOpRerollFieldNumber = 9;
  const ::proto::GCGOperationReroll& op_reroll() const;
  ::proto::GCGOperationReroll* mutable_op_reroll();
  ::proto::GCGOperationReroll* release_op_reroll();
  void set_allocated_op_reroll(::proto::GCGOperationReroll* op_reroll);

  // .proto.GCGOperationAttack op_attack = 11;
  bool has_op_attack() const;
  void clear_op_attack();
  static const int kOpAttackFieldNumber = 11;
  const ::proto::GCGOperationAttack& op_attack() const;
  ::proto::GCGOperationAttack* mutable_op_attack();
  ::proto::GCGOperationAttack* release_op_attack();
  void set_allocated_op_attack(::proto::GCGOperationAttack* op_attack);

  // .proto.GCGOperationPass op_pass = 15;
  bool has_op_pass() const;
  void clear_op_pass();
  static const int kOpPassFieldNumber = 15;
  const ::proto::GCGOperationPass& op_pass() const;
  ::proto::GCGOperationPass* mutable_op_pass();
  ::proto::GCGOperationPass* release_op_pass();
  void set_allocated_op_pass(::proto::GCGOperationPass* op_pass);

  // .proto.GCGOperationPlayCard op_play_card = 2;
  bool has_op_play_card() const;
  void clear_op_play_card();
  static const int kOpPlayCardFieldNumber = 2;
  const ::proto::GCGOperationPlayCard& op_play_card() const;
  ::proto::GCGOperationPlayCard* mutable_op_play_card();
  ::proto::GCGOperationPlayCard* release_op_play_card();
  void set_allocated_op_play_card(::proto::GCGOperationPlayCard* op_play_card);

  // .proto.GCGOperationReboot op_reboot = 5;
  bool has_op_reboot() const;
  void clear_op_reboot();
  static const int kOpRebootFieldNumber = 5;
  const ::proto::GCGOperationReboot& op_reboot() const;
  ::proto::GCGOperationReboot* mutable_op_reboot();
  ::proto::GCGOperationReboot* release_op_reboot();
  void set_allocated_op_reboot(::proto::GCGOperationReboot* op_reboot);

  // .proto.GCGOperationSurrender op_surrender = 1;
  bool has_op_surrender() const;
  void clear_op_surrender();
  static const int kOpSurrenderFieldNumber = 1;
  const ::proto::GCGOperationSurrender& op_surrender() const;
  ::proto::GCGOperationSurrender* mutable_op_surrender();
  ::proto::GCGOperationSurrender* release_op_surrender();
  void set_allocated_op_surrender(::proto::GCGOperationSurrender* op_surrender);

  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:proto.GCGOperation)
 private:
  void set_has_op_redraw();
  void set_has_op_select_on_stage();
  void set_has_op_reroll();
  void set_has_op_attack();
  void set_has_op_pass();
  void set_has_op_play_card();
  void set_has_op_reboot();
  void set_has_op_surrender();

  inline bool has_op() const;
  void clear_op();
  inline void clear_has_op();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union OpUnion {
    OpUnion() {}
    ::proto::GCGOperationRedraw* op_redraw_;
    ::proto::GCGOperationOnStageSelect* op_select_on_stage_;
    ::proto::GCGOperationReroll* op_reroll_;
    ::proto::GCGOperationAttack* op_attack_;
    ::proto::GCGOperationPass* op_pass_;
    ::proto::GCGOperationPlayCard* op_play_card_;
    ::proto::GCGOperationReboot* op_reboot_;
    ::proto::GCGOperationSurrender* op_surrender_;
  } op_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGReplayOperationData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGReplayOperationData) */ {
 public:
  GCGReplayOperationData();
  virtual ~GCGReplayOperationData();

  GCGReplayOperationData(const GCGReplayOperationData& from);

  inline GCGReplayOperationData& operator=(const GCGReplayOperationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGReplayOperationData(GCGReplayOperationData&& from) noexcept
    : GCGReplayOperationData() {
    *this = ::std::move(from);
  }

  inline GCGReplayOperationData& operator=(GCGReplayOperationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGReplayOperationData& default_instance();

  static inline const GCGReplayOperationData* internal_default_instance() {
    return reinterpret_cast<const GCGReplayOperationData*>(
               &_GCGReplayOperationData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    63;

  void Swap(GCGReplayOperationData* other);
  friend void swap(GCGReplayOperationData& a, GCGReplayOperationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGReplayOperationData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGReplayOperationData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGReplayOperationData& from);
  void MergeFrom(const GCGReplayOperationData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGReplayOperationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGOperation op = 5;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 5;
  const ::proto::GCGOperation& op() const;
  ::proto::GCGOperation* mutable_op();
  ::proto::GCGOperation* release_op();
  void set_allocated_op(::proto::GCGOperation* op);

  // uint32 controller_id = 8;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 8;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGReplayOperationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGOperation* op_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGReplayControllerData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGReplayControllerData) */ {
 public:
  GCGReplayControllerData();
  virtual ~GCGReplayControllerData();

  GCGReplayControllerData(const GCGReplayControllerData& from);

  inline GCGReplayControllerData& operator=(const GCGReplayControllerData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGReplayControllerData(GCGReplayControllerData&& from) noexcept
    : GCGReplayControllerData() {
    *this = ::std::move(from);
  }

  inline GCGReplayControllerData& operator=(GCGReplayControllerData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGReplayControllerData& default_instance();

  static inline const GCGReplayControllerData* internal_default_instance() {
    return reinterpret_cast<const GCGReplayControllerData*>(
               &_GCGReplayControllerData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    64;

  void Swap(GCGReplayControllerData* other);
  friend void swap(GCGReplayControllerData& a, GCGReplayControllerData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGReplayControllerData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGReplayControllerData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGReplayControllerData& from);
  void MergeFrom(const GCGReplayControllerData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGReplayControllerData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_id_list = 5;
  int card_id_list_size() const;
  void clear_card_id_list();
  static const int kCardIdListFieldNumber = 5;
  ::google::protobuf::uint32 card_id_list(int index) const;
  void set_card_id_list(int index, ::google::protobuf::uint32 value);
  void add_card_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_id_list();

  // uint32 controller_id = 13;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 13;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGReplayControllerData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_id_list_;
  mutable int _card_id_list_cached_byte_size_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationReplay : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationReplay) */ {
 public:
  GCGOperationReplay();
  virtual ~GCGOperationReplay();

  GCGOperationReplay(const GCGOperationReplay& from);

  inline GCGOperationReplay& operator=(const GCGOperationReplay& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationReplay(GCGOperationReplay&& from) noexcept
    : GCGOperationReplay() {
    *this = ::std::move(from);
  }

  inline GCGOperationReplay& operator=(GCGOperationReplay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationReplay& default_instance();

  static inline const GCGOperationReplay* internal_default_instance() {
    return reinterpret_cast<const GCGOperationReplay*>(
               &_GCGOperationReplay_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    65;

  void Swap(GCGOperationReplay* other);
  friend void swap(GCGOperationReplay& a, GCGOperationReplay& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationReplay* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationReplay* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationReplay& from);
  void MergeFrom(const GCGOperationReplay& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationReplay* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGReplayOperationData operation_data_list = 9;
  int operation_data_list_size() const;
  void clear_operation_data_list();
  static const int kOperationDataListFieldNumber = 9;
  const ::proto::GCGReplayOperationData& operation_data_list(int index) const;
  ::proto::GCGReplayOperationData* mutable_operation_data_list(int index);
  ::proto::GCGReplayOperationData* add_operation_data_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayOperationData >*
      mutable_operation_data_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayOperationData >&
      operation_data_list() const;

  // repeated .proto.GCGReplayControllerData controller_data_list = 13;
  int controller_data_list_size() const;
  void clear_controller_data_list();
  static const int kControllerDataListFieldNumber = 13;
  const ::proto::GCGReplayControllerData& controller_data_list(int index) const;
  ::proto::GCGReplayControllerData* mutable_controller_data_list(int index);
  ::proto::GCGReplayControllerData* add_controller_data_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayControllerData >*
      mutable_controller_data_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayControllerData >&
      controller_data_list() const;

  // uint32 game_id = 1;
  void clear_game_id();
  static const int kGameIdFieldNumber = 1;
  ::google::protobuf::uint32 game_id() const;
  void set_game_id(::google::protobuf::uint32 value);

  // uint32 seed = 11;
  void clear_seed();
  static const int kSeedFieldNumber = 11;
  ::google::protobuf::uint32 seed() const;
  void set_seed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGOperationReplay)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayOperationData > operation_data_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayControllerData > controller_data_list_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 seed_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGToken : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGToken) */ {
 public:
  GCGToken();
  virtual ~GCGToken();

  GCGToken(const GCGToken& from);

  inline GCGToken& operator=(const GCGToken& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGToken(GCGToken&& from) noexcept
    : GCGToken() {
    *this = ::std::move(from);
  }

  inline GCGToken& operator=(GCGToken&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGToken& default_instance();

  static inline const GCGToken* internal_default_instance() {
    return reinterpret_cast<const GCGToken*>(
               &_GCGToken_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    66;

  void Swap(GCGToken* other);
  friend void swap(GCGToken& a, GCGToken& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGToken* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGToken* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGToken& from);
  void MergeFrom(const GCGToken& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGToken* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 key = 4;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  ::google::protobuf::uint32 key() const;
  void set_key(::google::protobuf::uint32 value);

  // uint32 value = 11;
  void clear_value();
  static const int kValueFieldNumber = 11;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGToken)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 value_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGCard) */ {
 public:
  GCGCard();
  virtual ~GCGCard();

  GCGCard(const GCGCard& from);

  inline GCGCard& operator=(const GCGCard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGCard(GCGCard&& from) noexcept
    : GCGCard() {
    *this = ::std::move(from);
  }

  inline GCGCard& operator=(GCGCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGCard& default_instance();

  static inline const GCGCard* internal_default_instance() {
    return reinterpret_cast<const GCGCard*>(
               &_GCGCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    67;

  void Swap(GCGCard* other);
  friend void swap(GCGCard& a, GCGCard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGCard* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGCard& from);
  void MergeFrom(const GCGCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGToken token_list = 2;
  int token_list_size() const;
  void clear_token_list();
  static const int kTokenListFieldNumber = 2;
  const ::proto::GCGToken& token_list(int index) const;
  ::proto::GCGToken* mutable_token_list(int index);
  ::proto::GCGToken* add_token_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGToken >*
      mutable_token_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGToken >&
      token_list() const;

  // repeated uint32 tag_list = 3;
  int tag_list_size() const;
  void clear_tag_list();
  static const int kTagListFieldNumber = 3;
  ::google::protobuf::uint32 tag_list(int index) const;
  void set_tag_list(int index, ::google::protobuf::uint32 value);
  void add_tag_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tag_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tag_list();

  // repeated .proto.GCGSkillLimitsInfo skill_limits_list = 8;
  int skill_limits_list_size() const;
  void clear_skill_limits_list();
  static const int kSkillLimitsListFieldNumber = 8;
  const ::proto::GCGSkillLimitsInfo& skill_limits_list(int index) const;
  ::proto::GCGSkillLimitsInfo* mutable_skill_limits_list(int index);
  ::proto::GCGSkillLimitsInfo* add_skill_limits_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >*
      mutable_skill_limits_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >&
      skill_limits_list() const;

  // repeated uint32 skill_id_list = 11;
  int skill_id_list_size() const;
  void clear_skill_id_list();
  static const int kSkillIdListFieldNumber = 11;
  ::google::protobuf::uint32 skill_id_list(int index) const;
  void set_skill_id_list(int index, ::google::protobuf::uint32 value);
  void add_skill_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id_list();

  // uint32 face_type = 5;
  void clear_face_type();
  static const int kFaceTypeFieldNumber = 5;
  ::google::protobuf::uint32 face_type() const;
  void set_face_type(::google::protobuf::uint32 value);

  // uint32 id = 6;
  void clear_id();
  static const int kIdFieldNumber = 6;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 guid = 15;
  void clear_guid();
  static const int kGuidFieldNumber = 15;
  ::google::protobuf::uint32 guid() const;
  void set_guid(::google::protobuf::uint32 value);

  // uint32 controller_id = 7;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 7;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // bool is_show = 14;
  void clear_is_show();
  static const int kIsShowFieldNumber = 14;
  bool is_show() const;
  void set_is_show(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGCard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGToken > token_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tag_list_;
  mutable int _tag_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo > skill_limits_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_list_;
  mutable int _skill_id_list_cached_byte_size_;
  ::google::protobuf::uint32 face_type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 guid_;
  ::google::protobuf::uint32 controller_id_;
  bool is_show_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGZone : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGZone) */ {
 public:
  GCGZone();
  virtual ~GCGZone();

  GCGZone(const GCGZone& from);

  inline GCGZone& operator=(const GCGZone& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGZone(GCGZone&& from) noexcept
    : GCGZone() {
    *this = ::std::move(from);
  }

  inline GCGZone& operator=(GCGZone&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGZone& default_instance();

  static inline const GCGZone* internal_default_instance() {
    return reinterpret_cast<const GCGZone*>(
               &_GCGZone_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    68;

  void Swap(GCGZone* other);
  friend void swap(GCGZone& a, GCGZone& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGZone* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGZone* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGZone& from);
  void MergeFrom(const GCGZone& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGZone* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_list = 4;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 4;
  ::google::protobuf::uint32 card_list(int index) const;
  void set_card_list(int index, ::google::protobuf::uint32 value);
  void add_card_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_list();

  // @@protoc_insertion_point(class_scope:proto.GCGZone)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_list_;
  mutable int _card_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGWaitingCharacter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGWaitingCharacter) */ {
 public:
  GCGWaitingCharacter();
  virtual ~GCGWaitingCharacter();

  GCGWaitingCharacter(const GCGWaitingCharacter& from);

  inline GCGWaitingCharacter& operator=(const GCGWaitingCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGWaitingCharacter(GCGWaitingCharacter&& from) noexcept
    : GCGWaitingCharacter() {
    *this = ::std::move(from);
  }

  inline GCGWaitingCharacter& operator=(GCGWaitingCharacter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGWaitingCharacter& default_instance();

  static inline const GCGWaitingCharacter* internal_default_instance() {
    return reinterpret_cast<const GCGWaitingCharacter*>(
               &_GCGWaitingCharacter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    69;

  void Swap(GCGWaitingCharacter* other);
  friend void swap(GCGWaitingCharacter& a, GCGWaitingCharacter& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGWaitingCharacter* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGWaitingCharacter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGWaitingCharacter& from);
  void MergeFrom(const GCGWaitingCharacter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGWaitingCharacter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 2;
  void clear_card_id();
  static const int kCardIdFieldNumber = 2;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 cond_count = 14;
  void clear_cond_count();
  static const int kCondCountFieldNumber = 14;
  ::google::protobuf::uint32 cond_count() const;
  void set_cond_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGWaitingCharacter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 cond_count_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGPlayerField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGPlayerField) */ {
 public:
  GCGPlayerField();
  virtual ~GCGPlayerField();

  GCGPlayerField(const GCGPlayerField& from);

  inline GCGPlayerField& operator=(const GCGPlayerField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGPlayerField(GCGPlayerField&& from) noexcept
    : GCGPlayerField() {
    *this = ::std::move(from);
  }

  inline GCGPlayerField& operator=(GCGPlayerField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGPlayerField& default_instance();

  static inline const GCGPlayerField* internal_default_instance() {
    return reinterpret_cast<const GCGPlayerField*>(
               &_GCGPlayerField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    71;

  void Swap(GCGPlayerField* other);
  friend void swap(GCGPlayerField& a, GCGPlayerField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGPlayerField* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGPlayerField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGPlayerField& from);
  void MergeFrom(const GCGPlayerField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGPlayerField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.GCGZone> modify_zone_map = 2;
  int modify_zone_map_size() const;
  void clear_modify_zone_map();
  static const int kModifyZoneMapFieldNumber = 2;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >&
      modify_zone_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >*
      mutable_modify_zone_map();

  // repeated .proto.GCGWaitingCharacter waiting_list = 4;
  int waiting_list_size() const;
  void clear_waiting_list();
  static const int kWaitingListFieldNumber = 4;
  const ::proto::GCGWaitingCharacter& waiting_list(int index) const;
  ::proto::GCGWaitingCharacter* mutable_waiting_list(int index);
  ::proto::GCGWaitingCharacter* add_waiting_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGWaitingCharacter >*
      mutable_waiting_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGWaitingCharacter >&
      waiting_list() const;

  // repeated .proto.GCGDiceSideType dice_side_list = 11;
  int dice_side_list_size() const;
  void clear_dice_side_list();
  static const int kDiceSideListFieldNumber = 11;
  ::proto::GCGDiceSideType dice_side_list(int index) const;
  void set_dice_side_list(int index, ::proto::GCGDiceSideType value);
  void add_dice_side_list(::proto::GCGDiceSideType value);
  const ::google::protobuf::RepeatedField<int>& dice_side_list() const;
  ::google::protobuf::RepeatedField<int>* mutable_dice_side_list();

  // repeated .proto.GCGPVEIntention intention_list = 1192;
  int intention_list_size() const;
  void clear_intention_list();
  static const int kIntentionListFieldNumber = 1192;
  const ::proto::GCGPVEIntention& intention_list(int index) const;
  ::proto::GCGPVEIntention* mutable_intention_list(int index);
  ::proto::GCGPVEIntention* add_intention_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >*
      mutable_intention_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >&
      intention_list() const;

  // .proto.GCGZone summon_zone = 1;
  bool has_summon_zone() const;
  void clear_summon_zone();
  static const int kSummonZoneFieldNumber = 1;
  const ::proto::GCGZone& summon_zone() const;
  ::proto::GCGZone* mutable_summon_zone();
  ::proto::GCGZone* release_summon_zone();
  void set_allocated_summon_zone(::proto::GCGZone* summon_zone);

  // .proto.GCGZone character_zone = 5;
  bool has_character_zone() const;
  void clear_character_zone();
  static const int kCharacterZoneFieldNumber = 5;
  const ::proto::GCGZone& character_zone() const;
  ::proto::GCGZone* mutable_character_zone();
  ::proto::GCGZone* release_character_zone();
  void set_allocated_character_zone(::proto::GCGZone* character_zone);

  // .proto.GCGZone hand_zone = 9;
  bool has_hand_zone() const;
  void clear_hand_zone();
  static const int kHandZoneFieldNumber = 9;
  const ::proto::GCGZone& hand_zone() const;
  ::proto::GCGZone* mutable_hand_zone();
  ::proto::GCGZone* release_hand_zone();
  void set_allocated_hand_zone(::proto::GCGZone* hand_zone);

  // .proto.GCGZone on_stage_zone = 14;
  bool has_on_stage_zone() const;
  void clear_on_stage_zone();
  static const int kOnStageZoneFieldNumber = 14;
  const ::proto::GCGZone& on_stage_zone() const;
  ::proto::GCGZone* mutable_on_stage_zone();
  ::proto::GCGZone* release_on_stage_zone();
  void set_allocated_on_stage_zone(::proto::GCGZone* on_stage_zone);

  // .proto.GCGZone assist_zone = 15;
  bool has_assist_zone() const;
  void clear_assist_zone();
  static const int kAssistZoneFieldNumber = 15;
  const ::proto::GCGZone& assist_zone() const;
  ::proto::GCGZone* mutable_assist_zone();
  ::proto::GCGZone* release_assist_zone();
  void set_allocated_assist_zone(::proto::GCGZone* assist_zone);

  // uint32 dice_count = 3;
  void clear_dice_count();
  static const int kDiceCountFieldNumber = 3;
  ::google::protobuf::uint32 dice_count() const;
  void set_dice_count(::google::protobuf::uint32 value);

  // uint32 on_stage_character_guid = 6;
  void clear_on_stage_character_guid();
  static const int kOnStageCharacterGuidFieldNumber = 6;
  ::google::protobuf::uint32 on_stage_character_guid() const;
  void set_on_stage_character_guid(::google::protobuf::uint32 value);

  // bool is_passed = 7;
  void clear_is_passed();
  static const int kIsPassedFieldNumber = 7;
  bool is_passed() const;
  void set_is_passed(bool value);

  // uint32 field_show_id = 8;
  void clear_field_show_id();
  static const int kFieldShowIdFieldNumber = 8;
  ::google::protobuf::uint32 field_show_id() const;
  void set_field_show_id(::google::protobuf::uint32 value);

  // uint32 controller_id = 10;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 10;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 card_back_show_id = 12;
  void clear_card_back_show_id();
  static const int kCardBackShowIdFieldNumber = 12;
  ::google::protobuf::uint32 card_back_show_id() const;
  void set_card_back_show_id(::google::protobuf::uint32 value);

  // uint32 deck_card_num = 13;
  void clear_deck_card_num();
  static const int kDeckCardNumFieldNumber = 13;
  ::google::protobuf::uint32 deck_card_num() const;
  void set_deck_card_num(::google::protobuf::uint32 value);

  // uint32 cur_waiting_index = 383;
  void clear_cur_waiting_index();
  static const int kCurWaitingIndexFieldNumber = 383;
  ::google::protobuf::uint32 cur_waiting_index() const;
  void set_cur_waiting_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGPlayerField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGPlayerField_ModifyZoneMapEntry : public ::google::protobuf::internal::MapEntry<GCGPlayerField_ModifyZoneMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGZone,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGPlayerField_ModifyZoneMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGZone,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GCGPlayerField_ModifyZoneMapEntry();
    GCGPlayerField_ModifyZoneMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGPlayerField_ModifyZoneMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGPlayerField_ModifyZoneMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGPlayerField_ModifyZoneMapEntry,
      ::google::protobuf::uint32, ::proto::GCGZone,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modify_zone_map_;
  private:
  ::google::protobuf::RepeatedPtrField< ::proto::GCGWaitingCharacter > waiting_list_;
  ::google::protobuf::RepeatedField<int> dice_side_list_;
  mutable int _dice_side_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention > intention_list_;
  ::proto::GCGZone* summon_zone_;
  ::proto::GCGZone* character_zone_;
  ::proto::GCGZone* hand_zone_;
  ::proto::GCGZone* on_stage_zone_;
  ::proto::GCGZone* assist_zone_;
  ::google::protobuf::uint32 dice_count_;
  ::google::protobuf::uint32 on_stage_character_guid_;
  bool is_passed_;
  ::google::protobuf::uint32 field_show_id_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 card_back_show_id_;
  ::google::protobuf::uint32 deck_card_num_;
  ::google::protobuf::uint32 cur_waiting_index_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGPhase : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGPhase) */ {
 public:
  GCGPhase();
  virtual ~GCGPhase();

  GCGPhase(const GCGPhase& from);

  inline GCGPhase& operator=(const GCGPhase& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGPhase(GCGPhase&& from) noexcept
    : GCGPhase() {
    *this = ::std::move(from);
  }

  inline GCGPhase& operator=(GCGPhase&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGPhase& default_instance();

  static inline const GCGPhase* internal_default_instance() {
    return reinterpret_cast<const GCGPhase*>(
               &_GCGPhase_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    73;

  void Swap(GCGPhase* other);
  friend void swap(GCGPhase& a, GCGPhase& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGPhase* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGPhase* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGPhase& from);
  void MergeFrom(const GCGPhase& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGPhase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, uint32> allow_controller_map = 6;
  int allow_controller_map_size() const;
  void clear_allow_controller_map();
  static const int kAllowControllerMapFieldNumber = 6;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      allow_controller_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_allow_controller_map();

  // .proto.GCGPhaseType phase_type = 5;
  void clear_phase_type();
  static const int kPhaseTypeFieldNumber = 5;
  ::proto::GCGPhaseType phase_type() const;
  void set_phase_type(::proto::GCGPhaseType value);

  // @@protoc_insertion_point(class_scope:proto.GCGPhase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGPhase_AllowControllerMapEntry : public ::google::protobuf::internal::MapEntry<GCGPhase_AllowControllerMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGPhase_AllowControllerMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    GCGPhase_AllowControllerMapEntry();
    GCGPhase_AllowControllerMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGPhase_AllowControllerMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGPhase_AllowControllerMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGPhase_AllowControllerMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > allow_controller_map_;
  private:
  int phase_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGControllerShowInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGControllerShowInfo) */ {
 public:
  GCGControllerShowInfo();
  virtual ~GCGControllerShowInfo();

  GCGControllerShowInfo(const GCGControllerShowInfo& from);

  inline GCGControllerShowInfo& operator=(const GCGControllerShowInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGControllerShowInfo(GCGControllerShowInfo&& from) noexcept
    : GCGControllerShowInfo() {
    *this = ::std::move(from);
  }

  inline GCGControllerShowInfo& operator=(GCGControllerShowInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGControllerShowInfo& default_instance();

  static inline const GCGControllerShowInfo* internal_default_instance() {
    return reinterpret_cast<const GCGControllerShowInfo*>(
               &_GCGControllerShowInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    74;

  void Swap(GCGControllerShowInfo* other);
  friend void swap(GCGControllerShowInfo& a, GCGControllerShowInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGControllerShowInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGControllerShowInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGControllerShowInfo& from);
  void MergeFrom(const GCGControllerShowInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGControllerShowInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string nick_name = 14;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 14;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_name(::std::string&& value);
  #endif
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // .proto.ProfilePicture profile_picture = 11;
  bool has_profile_picture() const;
  void clear_profile_picture();
  static const int kProfilePictureFieldNumber = 11;
  const ::proto::ProfilePicture& profile_picture() const;
  ::proto::ProfilePicture* mutable_profile_picture();
  ::proto::ProfilePicture* release_profile_picture();
  void set_allocated_profile_picture(::proto::ProfilePicture* profile_picture);

  // uint32 controller_id = 9;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 9;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGControllerShowInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::proto::ProfilePicture* profile_picture_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGPVEIntention : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGPVEIntention) */ {
 public:
  GCGPVEIntention();
  virtual ~GCGPVEIntention();

  GCGPVEIntention(const GCGPVEIntention& from);

  inline GCGPVEIntention& operator=(const GCGPVEIntention& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGPVEIntention(GCGPVEIntention&& from) noexcept
    : GCGPVEIntention() {
    *this = ::std::move(from);
  }

  inline GCGPVEIntention& operator=(GCGPVEIntention&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGPVEIntention& default_instance();

  static inline const GCGPVEIntention* internal_default_instance() {
    return reinterpret_cast<const GCGPVEIntention*>(
               &_GCGPVEIntention_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    75;

  void Swap(GCGPVEIntention* other);
  friend void swap(GCGPVEIntention& a, GCGPVEIntention& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGPVEIntention* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGPVEIntention* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGPVEIntention& from);
  void MergeFrom(const GCGPVEIntention& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGPVEIntention* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 skill_id_list = 7;
  int skill_id_list_size() const;
  void clear_skill_id_list();
  static const int kSkillIdListFieldNumber = 7;
  ::google::protobuf::uint32 skill_id_list(int index) const;
  void set_skill_id_list(int index, ::google::protobuf::uint32 value);
  void add_skill_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      skill_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_skill_id_list();

  // uint32 card_guid = 9;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 9;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGPVEIntention)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > skill_id_list_;
  mutable int _skill_id_list_cached_byte_size_;
  ::google::protobuf::uint32 card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDuelChallenge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDuelChallenge) */ {
 public:
  GCGDuelChallenge();
  virtual ~GCGDuelChallenge();

  GCGDuelChallenge(const GCGDuelChallenge& from);

  inline GCGDuelChallenge& operator=(const GCGDuelChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDuelChallenge(GCGDuelChallenge&& from) noexcept
    : GCGDuelChallenge() {
    *this = ::std::move(from);
  }

  inline GCGDuelChallenge& operator=(GCGDuelChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDuelChallenge& default_instance();

  static inline const GCGDuelChallenge* internal_default_instance() {
    return reinterpret_cast<const GCGDuelChallenge*>(
               &_GCGDuelChallenge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    76;

  void Swap(GCGDuelChallenge* other);
  friend void swap(GCGDuelChallenge& a, GCGDuelChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDuelChallenge* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDuelChallenge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDuelChallenge& from);
  void MergeFrom(const GCGDuelChallenge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDuelChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 cur_progress = 12;
  void clear_cur_progress();
  static const int kCurProgressFieldNumber = 12;
  ::google::protobuf::uint32 cur_progress() const;
  void set_cur_progress(::google::protobuf::uint32 value);

  // uint32 total_progress = 7;
  void clear_total_progress();
  static const int kTotalProgressFieldNumber = 7;
  ::google::protobuf::uint32 total_progress() const;
  void set_total_progress(::google::protobuf::uint32 value);

  // uint32 challenge_id = 10;
  void clear_challenge_id();
  static const int kChallengeIdFieldNumber = 10;
  ::google::protobuf::uint32 challenge_id() const;
  void set_challenge_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDuelChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 cur_progress_;
  ::google::protobuf::uint32 total_progress_;
  ::google::protobuf::uint32 challenge_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDuel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDuel) */ {
 public:
  GCGDuel();
  virtual ~GCGDuel();

  GCGDuel(const GCGDuel& from);

  inline GCGDuel& operator=(const GCGDuel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDuel(GCGDuel&& from) noexcept
    : GCGDuel() {
    *this = ::std::move(from);
  }

  inline GCGDuel& operator=(GCGDuel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDuel& default_instance();

  static inline const GCGDuel* internal_default_instance() {
    return reinterpret_cast<const GCGDuel*>(
               &_GCGDuel_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    77;

  void Swap(GCGDuel* other);
  friend void swap(GCGDuel& a, GCGDuel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDuel* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDuel* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDuel& from);
  void MergeFrom(const GCGDuel& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDuel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGPVEIntention intetion_list = 1;
  int intetion_list_size() const;
  void clear_intetion_list();
  static const int kIntetionListFieldNumber = 1;
  const ::proto::GCGPVEIntention& intetion_list(int index) const;
  ::proto::GCGPVEIntention* mutable_intetion_list(int index);
  ::proto::GCGPVEIntention* add_intetion_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >*
      mutable_intetion_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >&
      intetion_list() const;

  // repeated uint32 card_id_list = 4;
  int card_id_list_size() const;
  void clear_card_id_list();
  static const int kCardIdListFieldNumber = 4;
  ::google::protobuf::uint32 card_id_list(int index) const;
  void set_card_id_list(int index, ::google::protobuf::uint32 value);
  void add_card_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_id_list();

  // repeated .proto.GCGDuelChallenge challenge_list = 5;
  int challenge_list_size() const;
  void clear_challenge_list();
  static const int kChallengeListFieldNumber = 5;
  const ::proto::GCGDuelChallenge& challenge_list(int index) const;
  ::proto::GCGDuelChallenge* mutable_challenge_list(int index);
  ::proto::GCGDuelChallenge* add_challenge_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDuelChallenge >*
      mutable_challenge_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGDuelChallenge >&
      challenge_list() const;

  // repeated .proto.GCGControllerShowInfo show_info_list = 6;
  int show_info_list_size() const;
  void clear_show_info_list();
  static const int kShowInfoListFieldNumber = 6;
  const ::proto::GCGControllerShowInfo& show_info_list(int index) const;
  ::proto::GCGControllerShowInfo* mutable_show_info_list(int index);
  ::proto::GCGControllerShowInfo* add_show_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGControllerShowInfo >*
      mutable_show_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGControllerShowInfo >&
      show_info_list() const;

  // repeated .proto.GCGPlayerField field_list = 7;
  int field_list_size() const;
  void clear_field_list();
  static const int kFieldListFieldNumber = 7;
  const ::proto::GCGPlayerField& field_list(int index) const;
  ::proto::GCGPlayerField* mutable_field_list(int index);
  ::proto::GCGPlayerField* add_field_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerField >*
      mutable_field_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerField >&
      field_list() const;

  // repeated .proto.GCGCard card_list = 9;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 9;
  const ::proto::GCGCard& card_list(int index) const;
  ::proto::GCGCard* mutable_card_list(int index);
  ::proto::GCGCard* add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >*
      mutable_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >&
      card_list() const;

  // repeated .proto.GCGCard history_card_list = 121;
  int history_card_list_size() const;
  void clear_history_card_list();
  static const int kHistoryCardListFieldNumber = 121;
  const ::proto::GCGCard& history_card_list(int index) const;
  ::proto::GCGCard* mutable_history_card_list(int index);
  ::proto::GCGCard* add_history_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >*
      mutable_history_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >&
      history_card_list() const;

  // repeated uint32 forbid_finish_challenge_list = 647;
  int forbid_finish_challenge_list_size() const;
  void clear_forbid_finish_challenge_list();
  static const int kForbidFinishChallengeListFieldNumber = 647;
  ::google::protobuf::uint32 forbid_finish_challenge_list(int index) const;
  void set_forbid_finish_challenge_list(int index, ::google::protobuf::uint32 value);
  void add_forbid_finish_challenge_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      forbid_finish_challenge_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_forbid_finish_challenge_list();

  // repeated .proto.GCGMessagePack history_msg_pack_list = 796;
  int history_msg_pack_list_size() const;
  void clear_history_msg_pack_list();
  static const int kHistoryMsgPackListFieldNumber = 796;
  const ::proto::GCGMessagePack& history_msg_pack_list(int index) const;
  ::proto::GCGMessagePack* mutable_history_msg_pack_list(int index);
  ::proto::GCGMessagePack* add_history_msg_pack_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >*
      mutable_history_msg_pack_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >&
      history_msg_pack_list() const;

  // .proto.GCGPhase phase = 8;
  bool has_phase() const;
  void clear_phase();
  static const int kPhaseFieldNumber = 8;
  const ::proto::GCGPhase& phase() const;
  ::proto::GCGPhase* mutable_phase();
  ::proto::GCGPhase* release_phase();
  void set_allocated_phase(::proto::GCGPhase* phase);

  // .proto.GCGCostReviseInfo cost_revise = 10;
  bool has_cost_revise() const;
  void clear_cost_revise();
  static const int kCostReviseFieldNumber = 10;
  const ::proto::GCGCostReviseInfo& cost_revise() const;
  ::proto::GCGCostReviseInfo* mutable_cost_revise();
  ::proto::GCGCostReviseInfo* release_cost_revise();
  void set_allocated_cost_revise(::proto::GCGCostReviseInfo* cost_revise);

  // uint32 game_type = 2;
  void clear_game_type();
  static const int kGameTypeFieldNumber = 2;
  ::google::protobuf::uint32 game_type() const;
  void set_game_type(::google::protobuf::uint32 value);

  // uint32 server_seq = 3;
  void clear_server_seq();
  static const int kServerSeqFieldNumber = 3;
  ::google::protobuf::uint32 server_seq() const;
  void set_server_seq(::google::protobuf::uint32 value);

  // uint32 game_id = 11;
  void clear_game_id();
  static const int kGameIdFieldNumber = 11;
  ::google::protobuf::uint32 game_id() const;
  void set_game_id(::google::protobuf::uint32 value);

  // uint32 cur_controller_id = 12;
  void clear_cur_controller_id();
  static const int kCurControllerIdFieldNumber = 12;
  ::google::protobuf::uint32 cur_controller_id() const;
  void set_cur_controller_id(::google::protobuf::uint32 value);

  // uint32 controller_id = 13;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 13;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // .proto.GCGGameBusinessType business_type = 14;
  void clear_business_type();
  static const int kBusinessTypeFieldNumber = 14;
  ::proto::GCGGameBusinessType business_type() const;
  void set_business_type(::proto::GCGGameBusinessType value);

  // uint32 round = 15;
  void clear_round();
  static const int kRoundFieldNumber = 15;
  ::google::protobuf::uint32 round() const;
  void set_round(::google::protobuf::uint32 value);

  // uint32 operation_seq = 1210;
  void clear_operation_seq();
  static const int kOperationSeqFieldNumber = 1210;
  ::google::protobuf::uint32 operation_seq() const;
  void set_operation_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDuel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention > intetion_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_id_list_;
  mutable int _card_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDuelChallenge > challenge_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGControllerShowInfo > show_info_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerField > field_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGCard > card_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGCard > history_card_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > forbid_finish_challenge_list_;
  mutable int _forbid_finish_challenge_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack > history_msg_pack_list_;
  ::proto::GCGPhase* phase_;
  ::proto::GCGCostReviseInfo* cost_revise_;
  ::google::protobuf::uint32 game_type_;
  ::google::protobuf::uint32 server_seq_;
  ::google::protobuf::uint32 game_id_;
  ::google::protobuf::uint32 cur_controller_id_;
  ::google::protobuf::uint32 controller_id_;
  int business_type_;
  ::google::protobuf::uint32 round_;
  ::google::protobuf::uint32 operation_seq_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationReq) */ {
 public:
  GCGOperationReq();
  virtual ~GCGOperationReq();

  GCGOperationReq(const GCGOperationReq& from);

  inline GCGOperationReq& operator=(const GCGOperationReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationReq(GCGOperationReq&& from) noexcept
    : GCGOperationReq() {
    *this = ::std::move(from);
  }

  inline GCGOperationReq& operator=(GCGOperationReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationReq& default_instance();

  static inline const GCGOperationReq* internal_default_instance() {
    return reinterpret_cast<const GCGOperationReq*>(
               &_GCGOperationReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    78;

  void Swap(GCGOperationReq* other);
  friend void swap(GCGOperationReq& a, GCGOperationReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationReq& from);
  void MergeFrom(const GCGOperationReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGOperation op = 15;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 15;
  const ::proto::GCGOperation& op() const;
  ::proto::GCGOperation* mutable_op();
  ::proto::GCGOperation* release_op();
  void set_allocated_op(::proto::GCGOperation* op);

  // uint32 op_seq = 2;
  void clear_op_seq();
  static const int kOpSeqFieldNumber = 2;
  ::google::protobuf::uint32 op_seq() const;
  void set_op_seq(::google::protobuf::uint32 value);

  // uint32 redirect_uid = 7;
  void clear_redirect_uid();
  static const int kRedirectUidFieldNumber = 7;
  ::google::protobuf::uint32 redirect_uid() const;
  void set_redirect_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGOperationReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGOperation* op_;
  ::google::protobuf::uint32 op_seq_;
  ::google::protobuf::uint32 redirect_uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGOperationRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGOperationRsp) */ {
 public:
  GCGOperationRsp();
  virtual ~GCGOperationRsp();

  GCGOperationRsp(const GCGOperationRsp& from);

  inline GCGOperationRsp& operator=(const GCGOperationRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGOperationRsp(GCGOperationRsp&& from) noexcept
    : GCGOperationRsp() {
    *this = ::std::move(from);
  }

  inline GCGOperationRsp& operator=(GCGOperationRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGOperationRsp& default_instance();

  static inline const GCGOperationRsp* internal_default_instance() {
    return reinterpret_cast<const GCGOperationRsp*>(
               &_GCGOperationRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    79;

  void Swap(GCGOperationRsp* other);
  friend void swap(GCGOperationRsp& a, GCGOperationRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGOperationRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGOperationRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGOperationRsp& from);
  void MergeFrom(const GCGOperationRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGOperationRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 op_seq = 4;
  void clear_op_seq();
  static const int kOpSeqFieldNumber = 4;
  ::google::protobuf::uint32 op_seq() const;
  void set_op_seq(::google::protobuf::uint32 value);

  // int32 retcode = 8;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 8;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGOperationRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 op_seq_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGMessagePackNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGMessagePackNotify) */ {
 public:
  GCGMessagePackNotify();
  virtual ~GCGMessagePackNotify();

  GCGMessagePackNotify(const GCGMessagePackNotify& from);

  inline GCGMessagePackNotify& operator=(const GCGMessagePackNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGMessagePackNotify(GCGMessagePackNotify&& from) noexcept
    : GCGMessagePackNotify() {
    *this = ::std::move(from);
  }

  inline GCGMessagePackNotify& operator=(GCGMessagePackNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGMessagePackNotify& default_instance();

  static inline const GCGMessagePackNotify* internal_default_instance() {
    return reinterpret_cast<const GCGMessagePackNotify*>(
               &_GCGMessagePackNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    80;

  void Swap(GCGMessagePackNotify* other);
  friend void swap(GCGMessagePackNotify& a, GCGMessagePackNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGMessagePackNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGMessagePackNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGMessagePackNotify& from);
  void MergeFrom(const GCGMessagePackNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGMessagePackNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGMessagePack msg_pack_list = 11;
  int msg_pack_list_size() const;
  void clear_msg_pack_list();
  static const int kMsgPackListFieldNumber = 11;
  const ::proto::GCGMessagePack& msg_pack_list(int index) const;
  ::proto::GCGMessagePack* mutable_msg_pack_list(int index);
  ::proto::GCGMessagePack* add_msg_pack_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >*
      mutable_msg_pack_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >&
      msg_pack_list() const;

  // uint32 server_seq = 5;
  void clear_server_seq();
  static const int kServerSeqFieldNumber = 5;
  ::google::protobuf::uint32 server_seq() const;
  void set_server_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGMessagePackNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack > msg_pack_list_;
  ::google::protobuf::uint32 server_seq_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGAskDuelReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGAskDuelReq) */ {
 public:
  GCGAskDuelReq();
  virtual ~GCGAskDuelReq();

  GCGAskDuelReq(const GCGAskDuelReq& from);

  inline GCGAskDuelReq& operator=(const GCGAskDuelReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGAskDuelReq(GCGAskDuelReq&& from) noexcept
    : GCGAskDuelReq() {
    *this = ::std::move(from);
  }

  inline GCGAskDuelReq& operator=(GCGAskDuelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGAskDuelReq& default_instance();

  static inline const GCGAskDuelReq* internal_default_instance() {
    return reinterpret_cast<const GCGAskDuelReq*>(
               &_GCGAskDuelReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    81;

  void Swap(GCGAskDuelReq* other);
  friend void swap(GCGAskDuelReq& a, GCGAskDuelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGAskDuelReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGAskDuelReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGAskDuelReq& from);
  void MergeFrom(const GCGAskDuelReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGAskDuelReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGAskDuelReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGAskDuelRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGAskDuelRsp) */ {
 public:
  GCGAskDuelRsp();
  virtual ~GCGAskDuelRsp();

  GCGAskDuelRsp(const GCGAskDuelRsp& from);

  inline GCGAskDuelRsp& operator=(const GCGAskDuelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGAskDuelRsp(GCGAskDuelRsp&& from) noexcept
    : GCGAskDuelRsp() {
    *this = ::std::move(from);
  }

  inline GCGAskDuelRsp& operator=(GCGAskDuelRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGAskDuelRsp& default_instance();

  static inline const GCGAskDuelRsp* internal_default_instance() {
    return reinterpret_cast<const GCGAskDuelRsp*>(
               &_GCGAskDuelRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    82;

  void Swap(GCGAskDuelRsp* other);
  friend void swap(GCGAskDuelRsp& a, GCGAskDuelRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGAskDuelRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGAskDuelRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGAskDuelRsp& from);
  void MergeFrom(const GCGAskDuelRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGAskDuelRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGDuel duel = 13;
  bool has_duel() const;
  void clear_duel();
  static const int kDuelFieldNumber = 13;
  const ::proto::GCGDuel& duel() const;
  ::proto::GCGDuel* mutable_duel();
  ::proto::GCGDuel* release_duel();
  void set_allocated_duel(::proto::GCGDuel* duel);

  // int32 retcode = 3;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGAskDuelRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGDuel* duel_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGPlayerBriefData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGPlayerBriefData) */ {
 public:
  GCGPlayerBriefData();
  virtual ~GCGPlayerBriefData();

  GCGPlayerBriefData(const GCGPlayerBriefData& from);

  inline GCGPlayerBriefData& operator=(const GCGPlayerBriefData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGPlayerBriefData(GCGPlayerBriefData&& from) noexcept
    : GCGPlayerBriefData() {
    *this = ::std::move(from);
  }

  inline GCGPlayerBriefData& operator=(GCGPlayerBriefData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGPlayerBriefData& default_instance();

  static inline const GCGPlayerBriefData* internal_default_instance() {
    return reinterpret_cast<const GCGPlayerBriefData*>(
               &_GCGPlayerBriefData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    84;

  void Swap(GCGPlayerBriefData* other);
  friend void swap(GCGPlayerBriefData& a, GCGPlayerBriefData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGPlayerBriefData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGPlayerBriefData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGPlayerBriefData& from);
  void MergeFrom(const GCGPlayerBriefData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGPlayerBriefData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated uint32 card_id_list = 3;
  int card_id_list_size() const;
  void clear_card_id_list();
  static const int kCardIdListFieldNumber = 3;
  ::google::protobuf::uint32 card_id_list(int index) const;
  void set_card_id_list(int index, ::google::protobuf::uint32 value);
  void add_card_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_id_list();

  // map<uint32, uint32> card_face_map = 8;
  int card_face_map_size() const;
  void clear_card_face_map();
  static const int kCardFaceMapFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
      card_face_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
      mutable_card_face_map();

  // string nick_name = 9;
  void clear_nick_name();
  static const int kNickNameFieldNumber = 9;
  const ::std::string& nick_name() const;
  void set_nick_name(const ::std::string& value);
  #if LANG_CXX11
  void set_nick_name(::std::string&& value);
  #endif
  void set_nick_name(const char* value);
  void set_nick_name(const char* value, size_t size);
  ::std::string* mutable_nick_name();
  ::std::string* release_nick_name();
  void set_allocated_nick_name(::std::string* nick_name);

  // .proto.ProfilePicture profile_picture = 12;
  bool has_profile_picture() const;
  void clear_profile_picture();
  static const int kProfilePictureFieldNumber = 12;
  const ::proto::ProfilePicture& profile_picture() const;
  ::proto::ProfilePicture* mutable_profile_picture();
  ::proto::ProfilePicture* release_profile_picture();
  void set_allocated_profile_picture(::proto::ProfilePicture* profile_picture);

  // uint32 controller_id = 5;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 5;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 uid = 10;
  void clear_uid();
  static const int kUidFieldNumber = 10;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGPlayerBriefData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_id_list_;
  mutable int _card_id_list_cached_byte_size_;
  public:
  class GCGPlayerBriefData_CardFaceMapEntry : public ::google::protobuf::internal::MapEntry<GCGPlayerBriefData_CardFaceMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGPlayerBriefData_CardFaceMapEntry, 
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > SuperType;
    GCGPlayerBriefData_CardFaceMapEntry();
    GCGPlayerBriefData_CardFaceMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGPlayerBriefData_CardFaceMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGPlayerBriefData_CardFaceMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGPlayerBriefData_CardFaceMapEntry,
      ::google::protobuf::uint32, ::google::protobuf::uint32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      0 > card_face_map_;
  private:
  ::google::protobuf::internal::ArenaStringPtr nick_name_;
  ::proto::ProfilePicture* profile_picture_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGameBriefData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGameBriefData) */ {
 public:
  GCGGameBriefData();
  virtual ~GCGGameBriefData();

  GCGGameBriefData(const GCGGameBriefData& from);

  inline GCGGameBriefData& operator=(const GCGGameBriefData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGameBriefData(GCGGameBriefData&& from) noexcept
    : GCGGameBriefData() {
    *this = ::std::move(from);
  }

  inline GCGGameBriefData& operator=(GCGGameBriefData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGameBriefData& default_instance();

  static inline const GCGGameBriefData* internal_default_instance() {
    return reinterpret_cast<const GCGGameBriefData*>(
               &_GCGGameBriefData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    85;

  void Swap(GCGGameBriefData* other);
  friend void swap(GCGGameBriefData& a, GCGGameBriefData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGameBriefData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGameBriefData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGameBriefData& from);
  void MergeFrom(const GCGGameBriefData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGameBriefData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGPlayerBriefData player_brief_list = 12;
  int player_brief_list_size() const;
  void clear_player_brief_list();
  static const int kPlayerBriefListFieldNumber = 12;
  const ::proto::GCGPlayerBriefData& player_brief_list(int index) const;
  ::proto::GCGPlayerBriefData* mutable_player_brief_list(int index);
  ::proto::GCGPlayerBriefData* add_player_brief_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerBriefData >*
      mutable_player_brief_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerBriefData >&
      player_brief_list() const;

  // uint32 verify_code = 5;
  void clear_verify_code();
  static const int kVerifyCodeFieldNumber = 5;
  ::google::protobuf::uint32 verify_code() const;
  void set_verify_code(::google::protobuf::uint32 value);

  // uint32 game_uid = 9;
  void clear_game_uid();
  static const int kGameUidFieldNumber = 9;
  ::google::protobuf::uint32 game_uid() const;
  void set_game_uid(::google::protobuf::uint32 value);

  // .proto.GCGGameBusinessType business_type = 13;
  void clear_business_type();
  static const int kBusinessTypeFieldNumber = 13;
  ::proto::GCGGameBusinessType business_type() const;
  void set_business_type(::proto::GCGGameBusinessType value);

  // uint32 game_id = 14;
  void clear_game_id();
  static const int kGameIdFieldNumber = 14;
  ::google::protobuf::uint32 game_id() const;
  void set_game_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGGameBriefData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerBriefData > player_brief_list_;
  ::google::protobuf::uint32 verify_code_;
  ::google::protobuf::uint32 game_uid_;
  int business_type_;
  ::google::protobuf::uint32 game_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGameBriefDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGameBriefDataNotify) */ {
 public:
  GCGGameBriefDataNotify();
  virtual ~GCGGameBriefDataNotify();

  GCGGameBriefDataNotify(const GCGGameBriefDataNotify& from);

  inline GCGGameBriefDataNotify& operator=(const GCGGameBriefDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGameBriefDataNotify(GCGGameBriefDataNotify&& from) noexcept
    : GCGGameBriefDataNotify() {
    *this = ::std::move(from);
  }

  inline GCGGameBriefDataNotify& operator=(GCGGameBriefDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGameBriefDataNotify& default_instance();

  static inline const GCGGameBriefDataNotify* internal_default_instance() {
    return reinterpret_cast<const GCGGameBriefDataNotify*>(
               &_GCGGameBriefDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    86;

  void Swap(GCGGameBriefDataNotify* other);
  friend void swap(GCGGameBriefDataNotify& a, GCGGameBriefDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGameBriefDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGameBriefDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGameBriefDataNotify& from);
  void MergeFrom(const GCGGameBriefDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGameBriefDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGGameBriefData gcg_brief_data = 10;
  bool has_gcg_brief_data() const;
  void clear_gcg_brief_data();
  static const int kGcgBriefDataFieldNumber = 10;
  const ::proto::GCGGameBriefData& gcg_brief_data() const;
  ::proto::GCGGameBriefData* mutable_gcg_brief_data();
  ::proto::GCGGameBriefData* release_gcg_brief_data();
  void set_allocated_gcg_brief_data(::proto::GCGGameBriefData* gcg_brief_data);

  // bool is_new_game = 11;
  void clear_is_new_game();
  static const int kIsNewGameFieldNumber = 11;
  bool is_new_game() const;
  void set_is_new_game(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGGameBriefDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGGameBriefData* gcg_brief_data_;
  bool is_new_game_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGInitFinishReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGInitFinishReq) */ {
 public:
  GCGInitFinishReq();
  virtual ~GCGInitFinishReq();

  GCGInitFinishReq(const GCGInitFinishReq& from);

  inline GCGInitFinishReq& operator=(const GCGInitFinishReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGInitFinishReq(GCGInitFinishReq&& from) noexcept
    : GCGInitFinishReq() {
    *this = ::std::move(from);
  }

  inline GCGInitFinishReq& operator=(GCGInitFinishReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGInitFinishReq& default_instance();

  static inline const GCGInitFinishReq* internal_default_instance() {
    return reinterpret_cast<const GCGInitFinishReq*>(
               &_GCGInitFinishReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    87;

  void Swap(GCGInitFinishReq* other);
  friend void swap(GCGInitFinishReq& a, GCGInitFinishReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGInitFinishReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGInitFinishReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGInitFinishReq& from);
  void MergeFrom(const GCGInitFinishReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGInitFinishReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGInitFinishReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGInitFinishRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGInitFinishRsp) */ {
 public:
  GCGInitFinishRsp();
  virtual ~GCGInitFinishRsp();

  GCGInitFinishRsp(const GCGInitFinishRsp& from);

  inline GCGInitFinishRsp& operator=(const GCGInitFinishRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGInitFinishRsp(GCGInitFinishRsp&& from) noexcept
    : GCGInitFinishRsp() {
    *this = ::std::move(from);
  }

  inline GCGInitFinishRsp& operator=(GCGInitFinishRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGInitFinishRsp& default_instance();

  static inline const GCGInitFinishRsp* internal_default_instance() {
    return reinterpret_cast<const GCGInitFinishRsp*>(
               &_GCGInitFinishRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    88;

  void Swap(GCGInitFinishRsp* other);
  friend void swap(GCGInitFinishRsp& a, GCGInitFinishRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGInitFinishRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGInitFinishRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGInitFinishRsp& from);
  void MergeFrom(const GCGInitFinishRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGInitFinishRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 2;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGInitFinishRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGHeartBeatNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGHeartBeatNotify) */ {
 public:
  GCGHeartBeatNotify();
  virtual ~GCGHeartBeatNotify();

  GCGHeartBeatNotify(const GCGHeartBeatNotify& from);

  inline GCGHeartBeatNotify& operator=(const GCGHeartBeatNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGHeartBeatNotify(GCGHeartBeatNotify&& from) noexcept
    : GCGHeartBeatNotify() {
    *this = ::std::move(from);
  }

  inline GCGHeartBeatNotify& operator=(GCGHeartBeatNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGHeartBeatNotify& default_instance();

  static inline const GCGHeartBeatNotify* internal_default_instance() {
    return reinterpret_cast<const GCGHeartBeatNotify*>(
               &_GCGHeartBeatNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    89;

  void Swap(GCGHeartBeatNotify* other);
  friend void swap(GCGHeartBeatNotify& a, GCGHeartBeatNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGHeartBeatNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGHeartBeatNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGHeartBeatNotify& from);
  void MergeFrom(const GCGHeartBeatNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGHeartBeatNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 server_seq = 6;
  void clear_server_seq();
  static const int kServerSeqFieldNumber = 6;
  ::google::protobuf::uint32 server_seq() const;
  void set_server_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGHeartBeatNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 server_seq_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewHpInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewHpInfo) */ {
 public:
  GCGSkillPreviewHpInfo();
  virtual ~GCGSkillPreviewHpInfo();

  GCGSkillPreviewHpInfo(const GCGSkillPreviewHpInfo& from);

  inline GCGSkillPreviewHpInfo& operator=(const GCGSkillPreviewHpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewHpInfo(GCGSkillPreviewHpInfo&& from) noexcept
    : GCGSkillPreviewHpInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewHpInfo& operator=(GCGSkillPreviewHpInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewHpInfo& default_instance();

  static inline const GCGSkillPreviewHpInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewHpInfo*>(
               &_GCGSkillPreviewHpInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    90;

  void Swap(GCGSkillPreviewHpInfo* other);
  friend void swap(GCGSkillPreviewHpInfo& a, GCGSkillPreviewHpInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewHpInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewHpInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewHpInfo& from);
  void MergeFrom(const GCGSkillPreviewHpInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewHpInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGSkillHpChangeType change_type = 4;
  void clear_change_type();
  static const int kChangeTypeFieldNumber = 4;
  ::proto::GCGSkillHpChangeType change_type() const;
  void set_change_type(::proto::GCGSkillHpChangeType value);

  // uint32 hp_change_value = 13;
  void clear_hp_change_value();
  static const int kHpChangeValueFieldNumber = 13;
  ::google::protobuf::uint32 hp_change_value() const;
  void set_hp_change_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewHpInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int change_type_;
  ::google::protobuf::uint32 hp_change_value_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewReactionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewReactionInfo) */ {
 public:
  GCGSkillPreviewReactionInfo();
  virtual ~GCGSkillPreviewReactionInfo();

  GCGSkillPreviewReactionInfo(const GCGSkillPreviewReactionInfo& from);

  inline GCGSkillPreviewReactionInfo& operator=(const GCGSkillPreviewReactionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewReactionInfo(GCGSkillPreviewReactionInfo&& from) noexcept
    : GCGSkillPreviewReactionInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewReactionInfo& operator=(GCGSkillPreviewReactionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewReactionInfo& default_instance();

  static inline const GCGSkillPreviewReactionInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewReactionInfo*>(
               &_GCGSkillPreviewReactionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    91;

  void Swap(GCGSkillPreviewReactionInfo* other);
  friend void swap(GCGSkillPreviewReactionInfo& a, GCGSkillPreviewReactionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewReactionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewReactionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewReactionInfo& from);
  void MergeFrom(const GCGSkillPreviewReactionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewReactionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 target_element = 1;
  void clear_target_element();
  static const int kTargetElementFieldNumber = 1;
  ::google::protobuf::uint32 target_element() const;
  void set_target_element(::google::protobuf::uint32 value);

  // uint32 source_element = 13;
  void clear_source_element();
  static const int kSourceElementFieldNumber = 13;
  ::google::protobuf::uint32 source_element() const;
  void set_source_element(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewReactionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_element_;
  ::google::protobuf::uint32 source_element_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewElementReactionInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewElementReactionInfo) */ {
 public:
  GCGSkillPreviewElementReactionInfo();
  virtual ~GCGSkillPreviewElementReactionInfo();

  GCGSkillPreviewElementReactionInfo(const GCGSkillPreviewElementReactionInfo& from);

  inline GCGSkillPreviewElementReactionInfo& operator=(const GCGSkillPreviewElementReactionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewElementReactionInfo(GCGSkillPreviewElementReactionInfo&& from) noexcept
    : GCGSkillPreviewElementReactionInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewElementReactionInfo& operator=(GCGSkillPreviewElementReactionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewElementReactionInfo& default_instance();

  static inline const GCGSkillPreviewElementReactionInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewElementReactionInfo*>(
               &_GCGSkillPreviewElementReactionInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    92;

  void Swap(GCGSkillPreviewElementReactionInfo* other);
  friend void swap(GCGSkillPreviewElementReactionInfo& a, GCGSkillPreviewElementReactionInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewElementReactionInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewElementReactionInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewElementReactionInfo& from);
  void MergeFrom(const GCGSkillPreviewElementReactionInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewElementReactionInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 source_list = 2;
  int source_list_size() const;
  void clear_source_list();
  static const int kSourceListFieldNumber = 2;
  ::google::protobuf::uint32 source_list(int index) const;
  void set_source_list(int index, ::google::protobuf::uint32 value);
  void add_source_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      source_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_source_list();

  // repeated uint32 fresh_list = 8;
  int fresh_list_size() const;
  void clear_fresh_list();
  static const int kFreshListFieldNumber = 8;
  ::google::protobuf::uint32 fresh_list(int index) const;
  void set_fresh_list(int index, ::google::protobuf::uint32 value);
  void add_fresh_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fresh_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fresh_list();

  // repeated .proto.GCGSkillPreviewReactionInfo reaction_list = 14;
  int reaction_list_size() const;
  void clear_reaction_list();
  static const int kReactionListFieldNumber = 14;
  const ::proto::GCGSkillPreviewReactionInfo& reaction_list(int index) const;
  ::proto::GCGSkillPreviewReactionInfo* mutable_reaction_list(int index);
  ::proto::GCGSkillPreviewReactionInfo* add_reaction_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewReactionInfo >*
      mutable_reaction_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewReactionInfo >&
      reaction_list() const;

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewElementReactionInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > source_list_;
  mutable int _source_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fresh_list_;
  mutable int _fresh_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewReactionInfo > reaction_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewCardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewCardInfo) */ {
 public:
  GCGSkillPreviewCardInfo();
  virtual ~GCGSkillPreviewCardInfo();

  GCGSkillPreviewCardInfo(const GCGSkillPreviewCardInfo& from);

  inline GCGSkillPreviewCardInfo& operator=(const GCGSkillPreviewCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewCardInfo(GCGSkillPreviewCardInfo&& from) noexcept
    : GCGSkillPreviewCardInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewCardInfo& operator=(GCGSkillPreviewCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewCardInfo& default_instance();

  static inline const GCGSkillPreviewCardInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewCardInfo*>(
               &_GCGSkillPreviewCardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    93;

  void Swap(GCGSkillPreviewCardInfo* other);
  friend void swap(GCGSkillPreviewCardInfo& a, GCGSkillPreviewCardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewCardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewCardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewCardInfo& from);
  void MergeFrom(const GCGSkillPreviewCardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 controller_id = 3;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 3;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // uint32 card_guid = 6;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 6;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // .proto.GCGZoneType zone_type = 14;
  void clear_zone_type();
  static const int kZoneTypeFieldNumber = 14;
  ::proto::GCGZoneType zone_type() const;
  void set_zone_type(::proto::GCGZoneType value);

  // uint32 owner_card_guid = 11;
  void clear_owner_card_guid();
  static const int kOwnerCardGuidFieldNumber = 11;
  ::google::protobuf::uint32 owner_card_guid() const;
  void set_owner_card_guid(::google::protobuf::uint32 value);

  // uint32 card_id = 13;
  void clear_card_id();
  static const int kCardIdFieldNumber = 13;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewCardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 controller_id_;
  ::google::protobuf::uint32 card_guid_;
  int zone_type_;
  ::google::protobuf::uint32 owner_card_guid_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewOnstageChangeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewOnstageChangeInfo) */ {
 public:
  GCGSkillPreviewOnstageChangeInfo();
  virtual ~GCGSkillPreviewOnstageChangeInfo();

  GCGSkillPreviewOnstageChangeInfo(const GCGSkillPreviewOnstageChangeInfo& from);

  inline GCGSkillPreviewOnstageChangeInfo& operator=(const GCGSkillPreviewOnstageChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewOnstageChangeInfo(GCGSkillPreviewOnstageChangeInfo&& from) noexcept
    : GCGSkillPreviewOnstageChangeInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewOnstageChangeInfo& operator=(GCGSkillPreviewOnstageChangeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewOnstageChangeInfo& default_instance();

  static inline const GCGSkillPreviewOnstageChangeInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewOnstageChangeInfo*>(
               &_GCGSkillPreviewOnstageChangeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    94;

  void Swap(GCGSkillPreviewOnstageChangeInfo* other);
  friend void swap(GCGSkillPreviewOnstageChangeInfo& a, GCGSkillPreviewOnstageChangeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewOnstageChangeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewOnstageChangeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewOnstageChangeInfo& from);
  void MergeFrom(const GCGSkillPreviewOnstageChangeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewOnstageChangeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 target_onstage_card_guid = 6;
  void clear_target_onstage_card_guid();
  static const int kTargetOnstageCardGuidFieldNumber = 6;
  ::google::protobuf::uint32 target_onstage_card_guid() const;
  void set_target_onstage_card_guid(::google::protobuf::uint32 value);

  // uint32 source_onstage_card_guid = 15;
  void clear_source_onstage_card_guid();
  static const int kSourceOnstageCardGuidFieldNumber = 15;
  ::google::protobuf::uint32 source_onstage_card_guid() const;
  void set_source_onstage_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewOnstageChangeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 target_onstage_card_guid_;
  ::google::protobuf::uint32 source_onstage_card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewTokenInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewTokenInfo) */ {
 public:
  GCGSkillPreviewTokenInfo();
  virtual ~GCGSkillPreviewTokenInfo();

  GCGSkillPreviewTokenInfo(const GCGSkillPreviewTokenInfo& from);

  inline GCGSkillPreviewTokenInfo& operator=(const GCGSkillPreviewTokenInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewTokenInfo(GCGSkillPreviewTokenInfo&& from) noexcept
    : GCGSkillPreviewTokenInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewTokenInfo& operator=(GCGSkillPreviewTokenInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewTokenInfo& default_instance();

  static inline const GCGSkillPreviewTokenInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewTokenInfo*>(
               &_GCGSkillPreviewTokenInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    95;

  void Swap(GCGSkillPreviewTokenInfo* other);
  friend void swap(GCGSkillPreviewTokenInfo& a, GCGSkillPreviewTokenInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewTokenInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewTokenInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewTokenInfo& from);
  void MergeFrom(const GCGSkillPreviewTokenInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewTokenInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 before_value = 15;
  void clear_before_value();
  static const int kBeforeValueFieldNumber = 15;
  ::google::protobuf::uint32 before_value() const;
  void set_before_value(::google::protobuf::uint32 value);

  // uint32 token_type = 3;
  void clear_token_type();
  static const int kTokenTypeFieldNumber = 3;
  ::google::protobuf::uint32 token_type() const;
  void set_token_type(::google::protobuf::uint32 value);

  // uint32 after_value = 12;
  void clear_after_value();
  static const int kAfterValueFieldNumber = 12;
  ::google::protobuf::uint32 after_value() const;
  void set_after_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewTokenInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 before_value_;
  ::google::protobuf::uint32 token_type_;
  ::google::protobuf::uint32 after_value_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewTokenChangeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewTokenChangeInfo) */ {
 public:
  GCGSkillPreviewTokenChangeInfo();
  virtual ~GCGSkillPreviewTokenChangeInfo();

  GCGSkillPreviewTokenChangeInfo(const GCGSkillPreviewTokenChangeInfo& from);

  inline GCGSkillPreviewTokenChangeInfo& operator=(const GCGSkillPreviewTokenChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewTokenChangeInfo(GCGSkillPreviewTokenChangeInfo&& from) noexcept
    : GCGSkillPreviewTokenChangeInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewTokenChangeInfo& operator=(GCGSkillPreviewTokenChangeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewTokenChangeInfo& default_instance();

  static inline const GCGSkillPreviewTokenChangeInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewTokenChangeInfo*>(
               &_GCGSkillPreviewTokenChangeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    96;

  void Swap(GCGSkillPreviewTokenChangeInfo* other);
  friend void swap(GCGSkillPreviewTokenChangeInfo& a, GCGSkillPreviewTokenChangeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewTokenChangeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewTokenChangeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewTokenChangeInfo& from);
  void MergeFrom(const GCGSkillPreviewTokenChangeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewTokenChangeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGSkillPreviewTokenInfo token_change_list = 14;
  int token_change_list_size() const;
  void clear_token_change_list();
  static const int kTokenChangeListFieldNumber = 14;
  const ::proto::GCGSkillPreviewTokenInfo& token_change_list(int index) const;
  ::proto::GCGSkillPreviewTokenInfo* mutable_token_change_list(int index);
  ::proto::GCGSkillPreviewTokenInfo* add_token_change_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewTokenInfo >*
      mutable_token_change_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewTokenInfo >&
      token_change_list() const;

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewTokenChangeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewTokenInfo > token_change_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewExtraInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewExtraInfo) */ {
 public:
  GCGSkillPreviewExtraInfo();
  virtual ~GCGSkillPreviewExtraInfo();

  GCGSkillPreviewExtraInfo(const GCGSkillPreviewExtraInfo& from);

  inline GCGSkillPreviewExtraInfo& operator=(const GCGSkillPreviewExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewExtraInfo(GCGSkillPreviewExtraInfo&& from) noexcept
    : GCGSkillPreviewExtraInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewExtraInfo& operator=(GCGSkillPreviewExtraInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewExtraInfo& default_instance();

  static inline const GCGSkillPreviewExtraInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewExtraInfo*>(
               &_GCGSkillPreviewExtraInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    97;

  void Swap(GCGSkillPreviewExtraInfo* other);
  friend void swap(GCGSkillPreviewExtraInfo& a, GCGSkillPreviewExtraInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewExtraInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewExtraInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewExtraInfo& from);
  void MergeFrom(const GCGSkillPreviewExtraInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewExtraInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6;
  int refresh_card_when_exist_list_size() const;
  void clear_refresh_card_when_exist_list();
  static const int kRefreshCardWhenExistListFieldNumber = 6;
  const ::proto::GCGSkillPreviewCardInfo& refresh_card_when_exist_list(int index) const;
  ::proto::GCGSkillPreviewCardInfo* mutable_refresh_card_when_exist_list(int index);
  ::proto::GCGSkillPreviewCardInfo* add_refresh_card_when_exist_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
      mutable_refresh_card_when_exist_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
      refresh_card_when_exist_list() const;

  // repeated .proto.GCGSkillPreviewCardInfo fail_added_when_full_list = 14;
  int fail_added_when_full_list_size() const;
  void clear_fail_added_when_full_list();
  static const int kFailAddedWhenFullListFieldNumber = 14;
  const ::proto::GCGSkillPreviewCardInfo& fail_added_when_full_list(int index) const;
  ::proto::GCGSkillPreviewCardInfo* mutable_fail_added_when_full_list(int index);
  ::proto::GCGSkillPreviewCardInfo* add_fail_added_when_full_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
      mutable_fail_added_when_full_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
      fail_added_when_full_list() const;

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewExtraInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo > refresh_card_when_exist_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo > fail_added_when_full_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class GCGSkillPreviewInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewInfo) */ {
 public:
  GCGSkillPreviewInfo();
  virtual ~GCGSkillPreviewInfo();

  GCGSkillPreviewInfo(const GCGSkillPreviewInfo& from);

  inline GCGSkillPreviewInfo& operator=(const GCGSkillPreviewInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewInfo(GCGSkillPreviewInfo&& from) noexcept
    : GCGSkillPreviewInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewInfo& operator=(GCGSkillPreviewInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewInfo& default_instance();

  static inline const GCGSkillPreviewInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewInfo*>(
               &_GCGSkillPreviewInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    101;

  void Swap(GCGSkillPreviewInfo* other);
  friend void swap(GCGSkillPreviewInfo& a, GCGSkillPreviewInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewInfo& from);
  void MergeFrom(const GCGSkillPreviewInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<uint32, .proto.GCGSkillPreviewTokenChangeInfo> card_token_change_map = 3;
  int card_token_change_map_size() const;
  void clear_card_token_change_map();
  static const int kCardTokenChangeMapFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >&
      card_token_change_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >*
      mutable_card_token_change_map();

  // map<uint32, .proto.GCGSkillPreviewElementReactionInfo> reaction_info_map = 5;
  int reaction_info_map_size() const;
  void clear_reaction_info_map();
  static const int kReactionInfoMapFieldNumber = 5;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >&
      reaction_info_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >*
      mutable_reaction_info_map();

  // map<uint32, .proto.GCGSkillPreviewHpInfo> hp_info_map = 8;
  int hp_info_map_size() const;
  void clear_hp_info_map();
  static const int kHpInfoMapFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >&
      hp_info_map() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >*
      mutable_hp_info_map();

  // repeated .proto.GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 9;
  int change_onstage_character_list_size() const;
  void clear_change_onstage_character_list();
  static const int kChangeOnstageCharacterListFieldNumber = 9;
  const ::proto::GCGSkillPreviewOnstageChangeInfo& change_onstage_character_list(int index) const;
  ::proto::GCGSkillPreviewOnstageChangeInfo* mutable_change_onstage_character_list(int index);
  ::proto::GCGSkillPreviewOnstageChangeInfo* add_change_onstage_character_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewOnstageChangeInfo >*
      mutable_change_onstage_character_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewOnstageChangeInfo >&
      change_onstage_character_list() const;

  // repeated .proto.GCGSkillPreviewCardInfo add_card_list = 11;
  int add_card_list_size() const;
  void clear_add_card_list();
  static const int kAddCardListFieldNumber = 11;
  const ::proto::GCGSkillPreviewCardInfo& add_card_list(int index) const;
  ::proto::GCGSkillPreviewCardInfo* mutable_add_card_list(int index);
  ::proto::GCGSkillPreviewCardInfo* add_add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
      mutable_add_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
      add_card_list() const;

  // repeated .proto.GCGSkillPreviewCardInfo rm_card_list = 12;
  int rm_card_list_size() const;
  void clear_rm_card_list();
  static const int kRmCardListFieldNumber = 12;
  const ::proto::GCGSkillPreviewCardInfo& rm_card_list(int index) const;
  ::proto::GCGSkillPreviewCardInfo* mutable_rm_card_list(int index);
  ::proto::GCGSkillPreviewCardInfo* add_rm_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
      mutable_rm_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
      rm_card_list() const;

  // .proto.GCGSkillPreviewExtraInfo extra_info = 10;
  bool has_extra_info() const;
  void clear_extra_info();
  static const int kExtraInfoFieldNumber = 10;
  const ::proto::GCGSkillPreviewExtraInfo& extra_info() const;
  ::proto::GCGSkillPreviewExtraInfo* mutable_extra_info();
  ::proto::GCGSkillPreviewExtraInfo* release_extra_info();
  void set_allocated_extra_info(::proto::GCGSkillPreviewExtraInfo* extra_info);

  // uint32 skill_id = 6;
  void clear_skill_id();
  static const int kSkillIdFieldNumber = 6;
  ::google::protobuf::uint32 skill_id() const;
  void set_skill_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class GCGSkillPreviewInfo_CardTokenChangeMapEntry : public ::google::protobuf::internal::MapEntry<GCGSkillPreviewInfo_CardTokenChangeMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGSkillPreviewInfo_CardTokenChangeMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GCGSkillPreviewInfo_CardTokenChangeMapEntry();
    GCGSkillPreviewInfo_CardTokenChangeMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGSkillPreviewInfo_CardTokenChangeMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGSkillPreviewInfo_CardTokenChangeMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGSkillPreviewInfo_CardTokenChangeMapEntry,
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > card_token_change_map_;
  private:
  public:
  class GCGSkillPreviewInfo_ReactionInfoMapEntry : public ::google::protobuf::internal::MapEntry<GCGSkillPreviewInfo_ReactionInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGSkillPreviewInfo_ReactionInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GCGSkillPreviewInfo_ReactionInfoMapEntry();
    GCGSkillPreviewInfo_ReactionInfoMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGSkillPreviewInfo_ReactionInfoMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGSkillPreviewInfo_ReactionInfoMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGSkillPreviewInfo_ReactionInfoMapEntry,
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > reaction_info_map_;
  private:
  public:
  class GCGSkillPreviewInfo_HpInfoMapEntry : public ::google::protobuf::internal::MapEntry<GCGSkillPreviewInfo_HpInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<GCGSkillPreviewInfo_HpInfoMapEntry, 
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    GCGSkillPreviewInfo_HpInfoMapEntry();
    GCGSkillPreviewInfo_HpInfoMapEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const GCGSkillPreviewInfo_HpInfoMapEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_GCGSkillPreviewInfo_HpInfoMapEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      GCGSkillPreviewInfo_HpInfoMapEntry,
      ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > hp_info_map_;
  private:
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewOnstageChangeInfo > change_onstage_character_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo > add_card_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo > rm_card_list_;
  ::proto::GCGSkillPreviewExtraInfo* extra_info_;
  ::google::protobuf::uint32 skill_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGChangeOnstageInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGChangeOnstageInfo) */ {
 public:
  GCGChangeOnstageInfo();
  virtual ~GCGChangeOnstageInfo();

  GCGChangeOnstageInfo(const GCGChangeOnstageInfo& from);

  inline GCGChangeOnstageInfo& operator=(const GCGChangeOnstageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGChangeOnstageInfo(GCGChangeOnstageInfo&& from) noexcept
    : GCGChangeOnstageInfo() {
    *this = ::std::move(from);
  }

  inline GCGChangeOnstageInfo& operator=(GCGChangeOnstageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGChangeOnstageInfo& default_instance();

  static inline const GCGChangeOnstageInfo* internal_default_instance() {
    return reinterpret_cast<const GCGChangeOnstageInfo*>(
               &_GCGChangeOnstageInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    102;

  void Swap(GCGChangeOnstageInfo* other);
  friend void swap(GCGChangeOnstageInfo& a, GCGChangeOnstageInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGChangeOnstageInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGChangeOnstageInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGChangeOnstageInfo& from);
  void MergeFrom(const GCGChangeOnstageInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGChangeOnstageInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGSkillPreviewInfo change_onstage_preview_info = 12;
  bool has_change_onstage_preview_info() const;
  void clear_change_onstage_preview_info();
  static const int kChangeOnstagePreviewInfoFieldNumber = 12;
  const ::proto::GCGSkillPreviewInfo& change_onstage_preview_info() const;
  ::proto::GCGSkillPreviewInfo* mutable_change_onstage_preview_info();
  ::proto::GCGSkillPreviewInfo* release_change_onstage_preview_info();
  void set_allocated_change_onstage_preview_info(::proto::GCGSkillPreviewInfo* change_onstage_preview_info);

  // uint32 card_guid = 6;
  void clear_card_guid();
  static const int kCardGuidFieldNumber = 6;
  ::google::protobuf::uint32 card_guid() const;
  void set_card_guid(::google::protobuf::uint32 value);

  // bool is_quick = 7;
  void clear_is_quick();
  static const int kIsQuickFieldNumber = 7;
  bool is_quick() const;
  void set_is_quick(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGChangeOnstageInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGSkillPreviewInfo* change_onstage_preview_info_;
  ::google::protobuf::uint32 card_guid_;
  bool is_quick_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewPlayCardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewPlayCardInfo) */ {
 public:
  GCGSkillPreviewPlayCardInfo();
  virtual ~GCGSkillPreviewPlayCardInfo();

  GCGSkillPreviewPlayCardInfo(const GCGSkillPreviewPlayCardInfo& from);

  inline GCGSkillPreviewPlayCardInfo& operator=(const GCGSkillPreviewPlayCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewPlayCardInfo(GCGSkillPreviewPlayCardInfo&& from) noexcept
    : GCGSkillPreviewPlayCardInfo() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewPlayCardInfo& operator=(GCGSkillPreviewPlayCardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewPlayCardInfo& default_instance();

  static inline const GCGSkillPreviewPlayCardInfo* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewPlayCardInfo*>(
               &_GCGSkillPreviewPlayCardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    103;

  void Swap(GCGSkillPreviewPlayCardInfo* other);
  friend void swap(GCGSkillPreviewPlayCardInfo& a, GCGSkillPreviewPlayCardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewPlayCardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewPlayCardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewPlayCardInfo& from);
  void MergeFrom(const GCGSkillPreviewPlayCardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewPlayCardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGSkillPreviewInfo play_card_info = 6;
  bool has_play_card_info() const;
  void clear_play_card_info();
  static const int kPlayCardInfoFieldNumber = 6;
  const ::proto::GCGSkillPreviewInfo& play_card_info() const;
  ::proto::GCGSkillPreviewInfo* mutable_play_card_info();
  ::proto::GCGSkillPreviewInfo* release_play_card_info();
  void set_allocated_play_card_info(::proto::GCGSkillPreviewInfo* play_card_info);

  // uint32 target_card_guid = 9;
  void clear_target_card_guid();
  static const int kTargetCardGuidFieldNumber = 9;
  ::google::protobuf::uint32 target_card_guid() const;
  void set_target_card_guid(::google::protobuf::uint32 value);

  // uint32 hand_card_guid = 15;
  void clear_hand_card_guid();
  static const int kHandCardGuidFieldNumber = 15;
  ::google::protobuf::uint32 hand_card_guid() const;
  void set_hand_card_guid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewPlayCardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGSkillPreviewInfo* play_card_info_;
  ::google::protobuf::uint32 target_card_guid_;
  ::google::protobuf::uint32 hand_card_guid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewNotify) */ {
 public:
  GCGSkillPreviewNotify();
  virtual ~GCGSkillPreviewNotify();

  GCGSkillPreviewNotify(const GCGSkillPreviewNotify& from);

  inline GCGSkillPreviewNotify& operator=(const GCGSkillPreviewNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewNotify(GCGSkillPreviewNotify&& from) noexcept
    : GCGSkillPreviewNotify() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewNotify& operator=(GCGSkillPreviewNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewNotify& default_instance();

  static inline const GCGSkillPreviewNotify* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewNotify*>(
               &_GCGSkillPreviewNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    104;

  void Swap(GCGSkillPreviewNotify* other);
  friend void swap(GCGSkillPreviewNotify& a, GCGSkillPreviewNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewNotify& from);
  void MergeFrom(const GCGSkillPreviewNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 1;
  int change_onstage_preview_list_size() const;
  void clear_change_onstage_preview_list();
  static const int kChangeOnstagePreviewListFieldNumber = 1;
  const ::proto::GCGChangeOnstageInfo& change_onstage_preview_list(int index) const;
  ::proto::GCGChangeOnstageInfo* mutable_change_onstage_preview_list(int index);
  ::proto::GCGChangeOnstageInfo* add_change_onstage_preview_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >*
      mutable_change_onstage_preview_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >&
      change_onstage_preview_list() const;

  // repeated .proto.GCGSkillPreviewInfo skill_preview_list = 9;
  int skill_preview_list_size() const;
  void clear_skill_preview_list();
  static const int kSkillPreviewListFieldNumber = 9;
  const ::proto::GCGSkillPreviewInfo& skill_preview_list(int index) const;
  ::proto::GCGSkillPreviewInfo* mutable_skill_preview_list(int index);
  ::proto::GCGSkillPreviewInfo* add_skill_preview_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >*
      mutable_skill_preview_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >&
      skill_preview_list() const;

  // repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 11;
  int play_card_list_size() const;
  void clear_play_card_list();
  static const int kPlayCardListFieldNumber = 11;
  const ::proto::GCGSkillPreviewPlayCardInfo& play_card_list(int index) const;
  ::proto::GCGSkillPreviewPlayCardInfo* mutable_play_card_list(int index);
  ::proto::GCGSkillPreviewPlayCardInfo* add_play_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >*
      mutable_play_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >&
      play_card_list() const;

  // uint32 onstage_card_guid = 5;
  void clear_onstage_card_guid();
  static const int kOnstageCardGuidFieldNumber = 5;
  ::google::protobuf::uint32 onstage_card_guid() const;
  void set_onstage_card_guid(::google::protobuf::uint32 value);

  // uint32 controller_id = 15;
  void clear_controller_id();
  static const int kControllerIdFieldNumber = 15;
  ::google::protobuf::uint32 controller_id() const;
  void set_controller_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo > change_onstage_preview_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo > skill_preview_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo > play_card_list_;
  ::google::protobuf::uint32 onstage_card_guid_;
  ::google::protobuf::uint32 controller_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewAskReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewAskReq) */ {
 public:
  GCGSkillPreviewAskReq();
  virtual ~GCGSkillPreviewAskReq();

  GCGSkillPreviewAskReq(const GCGSkillPreviewAskReq& from);

  inline GCGSkillPreviewAskReq& operator=(const GCGSkillPreviewAskReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewAskReq(GCGSkillPreviewAskReq&& from) noexcept
    : GCGSkillPreviewAskReq() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewAskReq& operator=(GCGSkillPreviewAskReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewAskReq& default_instance();

  static inline const GCGSkillPreviewAskReq* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewAskReq*>(
               &_GCGSkillPreviewAskReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    105;

  void Swap(GCGSkillPreviewAskReq* other);
  friend void swap(GCGSkillPreviewAskReq& a, GCGSkillPreviewAskReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewAskReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewAskReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewAskReq& from);
  void MergeFrom(const GCGSkillPreviewAskReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewAskReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewAskReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSkillPreviewAskRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSkillPreviewAskRsp) */ {
 public:
  GCGSkillPreviewAskRsp();
  virtual ~GCGSkillPreviewAskRsp();

  GCGSkillPreviewAskRsp(const GCGSkillPreviewAskRsp& from);

  inline GCGSkillPreviewAskRsp& operator=(const GCGSkillPreviewAskRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSkillPreviewAskRsp(GCGSkillPreviewAskRsp&& from) noexcept
    : GCGSkillPreviewAskRsp() {
    *this = ::std::move(from);
  }

  inline GCGSkillPreviewAskRsp& operator=(GCGSkillPreviewAskRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSkillPreviewAskRsp& default_instance();

  static inline const GCGSkillPreviewAskRsp* internal_default_instance() {
    return reinterpret_cast<const GCGSkillPreviewAskRsp*>(
               &_GCGSkillPreviewAskRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    106;

  void Swap(GCGSkillPreviewAskRsp* other);
  friend void swap(GCGSkillPreviewAskRsp& a, GCGSkillPreviewAskRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSkillPreviewAskRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSkillPreviewAskRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSkillPreviewAskRsp& from);
  void MergeFrom(const GCGSkillPreviewAskRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSkillPreviewAskRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSkillPreviewAskRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGChallengeUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGChallengeUpdateNotify) */ {
 public:
  GCGChallengeUpdateNotify();
  virtual ~GCGChallengeUpdateNotify();

  GCGChallengeUpdateNotify(const GCGChallengeUpdateNotify& from);

  inline GCGChallengeUpdateNotify& operator=(const GCGChallengeUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGChallengeUpdateNotify(GCGChallengeUpdateNotify&& from) noexcept
    : GCGChallengeUpdateNotify() {
    *this = ::std::move(from);
  }

  inline GCGChallengeUpdateNotify& operator=(GCGChallengeUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGChallengeUpdateNotify& default_instance();

  static inline const GCGChallengeUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const GCGChallengeUpdateNotify*>(
               &_GCGChallengeUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    107;

  void Swap(GCGChallengeUpdateNotify* other);
  friend void swap(GCGChallengeUpdateNotify& a, GCGChallengeUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGChallengeUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGChallengeUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGChallengeUpdateNotify& from);
  void MergeFrom(const GCGChallengeUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGChallengeUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGDuelChallenge challenge = 13;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 13;
  const ::proto::GCGDuelChallenge& challenge() const;
  ::proto::GCGDuelChallenge* mutable_challenge();
  ::proto::GCGDuelChallenge* release_challenge();
  void set_allocated_challenge(::proto::GCGDuelChallenge* challenge);

  // uint32 server_seq = 12;
  void clear_server_seq();
  static const int kServerSeqFieldNumber = 12;
  ::google::protobuf::uint32 server_seq() const;
  void set_server_seq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGChallengeUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGDuelChallenge* challenge_;
  ::google::protobuf::uint32 server_seq_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGBackToDuelReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGBackToDuelReq) */ {
 public:
  GCGBackToDuelReq();
  virtual ~GCGBackToDuelReq();

  GCGBackToDuelReq(const GCGBackToDuelReq& from);

  inline GCGBackToDuelReq& operator=(const GCGBackToDuelReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGBackToDuelReq(GCGBackToDuelReq&& from) noexcept
    : GCGBackToDuelReq() {
    *this = ::std::move(from);
  }

  inline GCGBackToDuelReq& operator=(GCGBackToDuelReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGBackToDuelReq& default_instance();

  static inline const GCGBackToDuelReq* internal_default_instance() {
    return reinterpret_cast<const GCGBackToDuelReq*>(
               &_GCGBackToDuelReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    108;

  void Swap(GCGBackToDuelReq* other);
  friend void swap(GCGBackToDuelReq& a, GCGBackToDuelReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGBackToDuelReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGBackToDuelReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGBackToDuelReq& from);
  void MergeFrom(const GCGBackToDuelReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGBackToDuelReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_back = 14;
  void clear_is_back();
  static const int kIsBackFieldNumber = 14;
  bool is_back() const;
  void set_is_back(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGBackToDuelReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_back_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGBackToDuelRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGBackToDuelRsp) */ {
 public:
  GCGBackToDuelRsp();
  virtual ~GCGBackToDuelRsp();

  GCGBackToDuelRsp(const GCGBackToDuelRsp& from);

  inline GCGBackToDuelRsp& operator=(const GCGBackToDuelRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGBackToDuelRsp(GCGBackToDuelRsp&& from) noexcept
    : GCGBackToDuelRsp() {
    *this = ::std::move(from);
  }

  inline GCGBackToDuelRsp& operator=(GCGBackToDuelRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGBackToDuelRsp& default_instance();

  static inline const GCGBackToDuelRsp* internal_default_instance() {
    return reinterpret_cast<const GCGBackToDuelRsp*>(
               &_GCGBackToDuelRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    109;

  void Swap(GCGBackToDuelRsp* other);
  friend void swap(GCGBackToDuelRsp& a, GCGBackToDuelRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGBackToDuelRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGBackToDuelRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGBackToDuelRsp& from);
  void MergeFrom(const GCGBackToDuelRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGBackToDuelRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGBackToDuelRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDebugReplayNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDebugReplayNotify) */ {
 public:
  GCGDebugReplayNotify();
  virtual ~GCGDebugReplayNotify();

  GCGDebugReplayNotify(const GCGDebugReplayNotify& from);

  inline GCGDebugReplayNotify& operator=(const GCGDebugReplayNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDebugReplayNotify(GCGDebugReplayNotify&& from) noexcept
    : GCGDebugReplayNotify() {
    *this = ::std::move(from);
  }

  inline GCGDebugReplayNotify& operator=(GCGDebugReplayNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDebugReplayNotify& default_instance();

  static inline const GCGDebugReplayNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDebugReplayNotify*>(
               &_GCGDebugReplayNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    110;

  void Swap(GCGDebugReplayNotify* other);
  friend void swap(GCGDebugReplayNotify& a, GCGDebugReplayNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDebugReplayNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDebugReplayNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDebugReplayNotify& from);
  void MergeFrom(const GCGDebugReplayNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDebugReplayNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string json_str = 9;
  void clear_json_str();
  static const int kJsonStrFieldNumber = 9;
  const ::std::string& json_str() const;
  void set_json_str(const ::std::string& value);
  #if LANG_CXX11
  void set_json_str(::std::string&& value);
  #endif
  void set_json_str(const char* value);
  void set_json_str(const char* value, size_t size);
  ::std::string* mutable_json_str();
  ::std::string* release_json_str();
  void set_allocated_json_str(::std::string* json_str);

  // @@protoc_insertion_point(class_scope:proto.GCGDebugReplayNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr json_str_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGameMaxNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGameMaxNotify) */ {
 public:
  GCGGameMaxNotify();
  virtual ~GCGGameMaxNotify();

  GCGGameMaxNotify(const GCGGameMaxNotify& from);

  inline GCGGameMaxNotify& operator=(const GCGGameMaxNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGameMaxNotify(GCGGameMaxNotify&& from) noexcept
    : GCGGameMaxNotify() {
    *this = ::std::move(from);
  }

  inline GCGGameMaxNotify& operator=(GCGGameMaxNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGameMaxNotify& default_instance();

  static inline const GCGGameMaxNotify* internal_default_instance() {
    return reinterpret_cast<const GCGGameMaxNotify*>(
               &_GCGGameMaxNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    111;

  void Swap(GCGGameMaxNotify* other);
  friend void swap(GCGGameMaxNotify& a, GCGGameMaxNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGameMaxNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGameMaxNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGameMaxNotify& from);
  void MergeFrom(const GCGGameMaxNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGameMaxNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGGameMaxNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGameCreateFailReasonNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGameCreateFailReasonNotify) */ {
 public:
  GCGGameCreateFailReasonNotify();
  virtual ~GCGGameCreateFailReasonNotify();

  GCGGameCreateFailReasonNotify(const GCGGameCreateFailReasonNotify& from);

  inline GCGGameCreateFailReasonNotify& operator=(const GCGGameCreateFailReasonNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGameCreateFailReasonNotify(GCGGameCreateFailReasonNotify&& from) noexcept
    : GCGGameCreateFailReasonNotify() {
    *this = ::std::move(from);
  }

  inline GCGGameCreateFailReasonNotify& operator=(GCGGameCreateFailReasonNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGameCreateFailReasonNotify& default_instance();

  static inline const GCGGameCreateFailReasonNotify* internal_default_instance() {
    return reinterpret_cast<const GCGGameCreateFailReasonNotify*>(
               &_GCGGameCreateFailReasonNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    112;

  void Swap(GCGGameCreateFailReasonNotify* other);
  friend void swap(GCGGameCreateFailReasonNotify& a, GCGGameCreateFailReasonNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGameCreateFailReasonNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGameCreateFailReasonNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGameCreateFailReasonNotify& from);
  void MergeFrom(const GCGGameCreateFailReasonNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGameCreateFailReasonNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateReason;
  static const GCGGameCreateReason REASON_NONE =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_NONE;
  static const GCGGameCreateReason REASON_GAME_MAX =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_GAME_MAX;
  static const GCGGameCreateReason REASON_CLIENT_VERSION_NOT_LASTEST =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_CLIENT_VERSION_NOT_LASTEST;
  static const GCGGameCreateReason REASON_RESOURCE_NOT_COMPLETE =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_RESOURCE_NOT_COMPLETE;
  static const GCGGameCreateReason REASON_TIMEOUT =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_REASON_TIMEOUT;
  static inline bool GCGGameCreateReason_IsValid(int value) {
    return GCGGameCreateFailReasonNotify_GCGGameCreateReason_IsValid(value);
  }
  static const GCGGameCreateReason GCGGameCreateReason_MIN =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateReason_MIN;
  static const GCGGameCreateReason GCGGameCreateReason_MAX =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateReason_MAX;
  static const int GCGGameCreateReason_ARRAYSIZE =
    GCGGameCreateFailReasonNotify_GCGGameCreateReason_GCGGameCreateReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GCGGameCreateReason_descriptor() {
    return GCGGameCreateFailReasonNotify_GCGGameCreateReason_descriptor();
  }
  static inline const ::std::string& GCGGameCreateReason_Name(GCGGameCreateReason value) {
    return GCGGameCreateFailReasonNotify_GCGGameCreateReason_Name(value);
  }
  static inline bool GCGGameCreateReason_Parse(const ::std::string& name,
      GCGGameCreateReason* value) {
    return GCGGameCreateFailReasonNotify_GCGGameCreateReason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason reason = 15;
  void clear_reason();
  static const int kReasonFieldNumber = 15;
  ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason reason() const;
  void set_reason(::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason value);

  // @@protoc_insertion_point(class_scope:proto.GCGGameCreateFailReasonNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDeckData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDeckData) */ {
 public:
  GCGDSDeckData();
  virtual ~GCGDSDeckData();

  GCGDSDeckData(const GCGDSDeckData& from);

  inline GCGDSDeckData& operator=(const GCGDSDeckData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDeckData(GCGDSDeckData&& from) noexcept
    : GCGDSDeckData() {
    *this = ::std::move(from);
  }

  inline GCGDSDeckData& operator=(GCGDSDeckData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDeckData& default_instance();

  static inline const GCGDSDeckData* internal_default_instance() {
    return reinterpret_cast<const GCGDSDeckData*>(
               &_GCGDSDeckData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    113;

  void Swap(GCGDSDeckData* other);
  friend void swap(GCGDSDeckData& a, GCGDSDeckData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDeckData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDeckData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDeckData& from);
  void MergeFrom(const GCGDSDeckData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDeckData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_list = 1;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 1;
  ::google::protobuf::uint32 card_list(int index) const;
  void set_card_list(int index, ::google::protobuf::uint32 value);
  void add_card_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_list();

  // repeated uint32 character_card_list = 10;
  int character_card_list_size() const;
  void clear_character_card_list();
  static const int kCharacterCardListFieldNumber = 10;
  ::google::protobuf::uint32 character_card_list(int index) const;
  void set_character_card_list(int index, ::google::protobuf::uint32 value);
  void add_character_card_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      character_card_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_character_card_list();

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool is_valid = 4;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 4;
  bool is_valid() const;
  void set_is_valid(bool value);

  // uint32 card_back_id = 15;
  void clear_card_back_id();
  static const int kCardBackIdFieldNumber = 15;
  ::google::protobuf::uint32 card_back_id() const;
  void set_card_back_id(::google::protobuf::uint32 value);

  // uint32 field_id = 7;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 7;
  ::google::protobuf::uint32 field_id() const;
  void set_field_id(::google::protobuf::uint32 value);

  // fixed32 create_time = 13;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 13;
  ::google::protobuf::uint32 create_time() const;
  void set_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDeckData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_list_;
  mutable int _card_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > character_card_list_;
  mutable int _character_card_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 id_;
  bool is_valid_;
  ::google::protobuf::uint32 card_back_id_;
  ::google::protobuf::uint32 field_id_;
  ::google::protobuf::uint32 create_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSCardData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSCardData) */ {
 public:
  GCGDSCardData();
  virtual ~GCGDSCardData();

  GCGDSCardData(const GCGDSCardData& from);

  inline GCGDSCardData& operator=(const GCGDSCardData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSCardData(GCGDSCardData&& from) noexcept
    : GCGDSCardData() {
    *this = ::std::move(from);
  }

  inline GCGDSCardData& operator=(GCGDSCardData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSCardData& default_instance();

  static inline const GCGDSCardData* internal_default_instance() {
    return reinterpret_cast<const GCGDSCardData*>(
               &_GCGDSCardData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    114;

  void Swap(GCGDSCardData* other);
  friend void swap(GCGDSCardData& a, GCGDSCardData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSCardData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSCardData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSCardData& from);
  void MergeFrom(const GCGDSCardData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSCardData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 proficiency_reward_taken_idx_list = 7;
  int proficiency_reward_taken_idx_list_size() const;
  void clear_proficiency_reward_taken_idx_list();
  static const int kProficiencyRewardTakenIdxListFieldNumber = 7;
  ::google::protobuf::uint32 proficiency_reward_taken_idx_list(int index) const;
  void set_proficiency_reward_taken_idx_list(int index, ::google::protobuf::uint32 value);
  void add_proficiency_reward_taken_idx_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      proficiency_reward_taken_idx_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_proficiency_reward_taken_idx_list();

  // repeated uint32 unlock_face_type_list = 9;
  int unlock_face_type_list_size() const;
  void clear_unlock_face_type_list();
  static const int kUnlockFaceTypeListFieldNumber = 9;
  ::google::protobuf::uint32 unlock_face_type_list(int index) const;
  void set_unlock_face_type_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_face_type_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_face_type_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_face_type_list();

  // uint32 face_type = 6;
  void clear_face_type();
  static const int kFaceTypeFieldNumber = 6;
  ::google::protobuf::uint32 face_type() const;
  void set_face_type(::google::protobuf::uint32 value);

  // uint32 proficiency = 8;
  void clear_proficiency();
  static const int kProficiencyFieldNumber = 8;
  ::google::protobuf::uint32 proficiency() const;
  void set_proficiency(::google::protobuf::uint32 value);

  // uint32 num = 12;
  void clear_num();
  static const int kNumFieldNumber = 12;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // uint32 card_id = 14;
  void clear_card_id();
  static const int kCardIdFieldNumber = 14;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSCardData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > proficiency_reward_taken_idx_list_;
  mutable int _proficiency_reward_taken_idx_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_face_type_list_;
  mutable int _unlock_face_type_list_cached_byte_size_;
  ::google::protobuf::uint32 face_type_;
  ::google::protobuf::uint32 proficiency_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDataNotify) */ {
 public:
  GCGDSDataNotify();
  virtual ~GCGDSDataNotify();

  GCGDSDataNotify(const GCGDSDataNotify& from);

  inline GCGDSDataNotify& operator=(const GCGDSDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDataNotify(GCGDSDataNotify&& from) noexcept
    : GCGDSDataNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSDataNotify& operator=(GCGDSDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDataNotify& default_instance();

  static inline const GCGDSDataNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSDataNotify*>(
               &_GCGDSDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    115;

  void Swap(GCGDSDataNotify* other);
  friend void swap(GCGDSDataNotify& a, GCGDSDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDataNotify& from);
  void MergeFrom(const GCGDSDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 unlock_deck_id_list = 1;
  int unlock_deck_id_list_size() const;
  void clear_unlock_deck_id_list();
  static const int kUnlockDeckIdListFieldNumber = 1;
  ::google::protobuf::uint32 unlock_deck_id_list(int index) const;
  void set_unlock_deck_id_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_deck_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_deck_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_deck_id_list();

  // repeated .proto.GCGDSCardData card_list = 3;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 3;
  const ::proto::GCGDSCardData& card_list(int index) const;
  ::proto::GCGDSCardData* mutable_card_list(int index);
  ::proto::GCGDSCardData* add_card_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDSCardData >*
      mutable_card_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGDSCardData >&
      card_list() const;

  // repeated .proto.GCGDSDeckData deck_list = 4;
  int deck_list_size() const;
  void clear_deck_list();
  static const int kDeckListFieldNumber = 4;
  const ::proto::GCGDSDeckData& deck_list(int index) const;
  ::proto::GCGDSDeckData* mutable_deck_list(int index);
  ::proto::GCGDSDeckData* add_deck_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDSDeckData >*
      mutable_deck_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGDSDeckData >&
      deck_list() const;

  // repeated uint32 unlock_card_back_id_list = 5;
  int unlock_card_back_id_list_size() const;
  void clear_unlock_card_back_id_list();
  static const int kUnlockCardBackIdListFieldNumber = 5;
  ::google::protobuf::uint32 unlock_card_back_id_list(int index) const;
  void set_unlock_card_back_id_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_card_back_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_card_back_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_card_back_id_list();

  // repeated uint32 unlock_field_id_list = 6;
  int unlock_field_id_list_size() const;
  void clear_unlock_field_id_list();
  static const int kUnlockFieldIdListFieldNumber = 6;
  ::google::protobuf::uint32 unlock_field_id_list(int index) const;
  void set_unlock_field_id_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_field_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_field_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_field_id_list();

  // uint32 cur_deck_id = 10;
  void clear_cur_deck_id();
  static const int kCurDeckIdFieldNumber = 10;
  ::google::protobuf::uint32 cur_deck_id() const;
  void set_cur_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_deck_id_list_;
  mutable int _unlock_deck_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDSCardData > card_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGDSDeckData > deck_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_card_back_id_list_;
  mutable int _unlock_card_back_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_field_id_list_;
  mutable int _unlock_field_id_list_cached_byte_size_;
  ::google::protobuf::uint32 cur_deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSCardBackUnlockNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSCardBackUnlockNotify) */ {
 public:
  GCGDSCardBackUnlockNotify();
  virtual ~GCGDSCardBackUnlockNotify();

  GCGDSCardBackUnlockNotify(const GCGDSCardBackUnlockNotify& from);

  inline GCGDSCardBackUnlockNotify& operator=(const GCGDSCardBackUnlockNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSCardBackUnlockNotify(GCGDSCardBackUnlockNotify&& from) noexcept
    : GCGDSCardBackUnlockNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSCardBackUnlockNotify& operator=(GCGDSCardBackUnlockNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSCardBackUnlockNotify& default_instance();

  static inline const GCGDSCardBackUnlockNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSCardBackUnlockNotify*>(
               &_GCGDSCardBackUnlockNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    116;

  void Swap(GCGDSCardBackUnlockNotify* other);
  friend void swap(GCGDSCardBackUnlockNotify& a, GCGDSCardBackUnlockNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSCardBackUnlockNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSCardBackUnlockNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSCardBackUnlockNotify& from);
  void MergeFrom(const GCGDSCardBackUnlockNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSCardBackUnlockNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_back_id = 6;
  void clear_card_back_id();
  static const int kCardBackIdFieldNumber = 6;
  ::google::protobuf::uint32 card_back_id() const;
  void set_card_back_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSCardBackUnlockNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_back_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSFieldUnlockNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSFieldUnlockNotify) */ {
 public:
  GCGDSFieldUnlockNotify();
  virtual ~GCGDSFieldUnlockNotify();

  GCGDSFieldUnlockNotify(const GCGDSFieldUnlockNotify& from);

  inline GCGDSFieldUnlockNotify& operator=(const GCGDSFieldUnlockNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSFieldUnlockNotify(GCGDSFieldUnlockNotify&& from) noexcept
    : GCGDSFieldUnlockNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSFieldUnlockNotify& operator=(GCGDSFieldUnlockNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSFieldUnlockNotify& default_instance();

  static inline const GCGDSFieldUnlockNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSFieldUnlockNotify*>(
               &_GCGDSFieldUnlockNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    117;

  void Swap(GCGDSFieldUnlockNotify* other);
  friend void swap(GCGDSFieldUnlockNotify& a, GCGDSFieldUnlockNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSFieldUnlockNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSFieldUnlockNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSFieldUnlockNotify& from);
  void MergeFrom(const GCGDSFieldUnlockNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSFieldUnlockNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 field_id = 1;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 1;
  ::google::protobuf::uint32 field_id() const;
  void set_field_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSFieldUnlockNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 field_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSCardFaceUnlockNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSCardFaceUnlockNotify) */ {
 public:
  GCGDSCardFaceUnlockNotify();
  virtual ~GCGDSCardFaceUnlockNotify();

  GCGDSCardFaceUnlockNotify(const GCGDSCardFaceUnlockNotify& from);

  inline GCGDSCardFaceUnlockNotify& operator=(const GCGDSCardFaceUnlockNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSCardFaceUnlockNotify(GCGDSCardFaceUnlockNotify&& from) noexcept
    : GCGDSCardFaceUnlockNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSCardFaceUnlockNotify& operator=(GCGDSCardFaceUnlockNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSCardFaceUnlockNotify& default_instance();

  static inline const GCGDSCardFaceUnlockNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSCardFaceUnlockNotify*>(
               &_GCGDSCardFaceUnlockNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    118;

  void Swap(GCGDSCardFaceUnlockNotify* other);
  friend void swap(GCGDSCardFaceUnlockNotify& a, GCGDSCardFaceUnlockNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSCardFaceUnlockNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSCardFaceUnlockNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSCardFaceUnlockNotify& from);
  void MergeFrom(const GCGDSCardFaceUnlockNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSCardFaceUnlockNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 face_type = 1;
  void clear_face_type();
  static const int kFaceTypeFieldNumber = 1;
  ::google::protobuf::uint32 face_type() const;
  void set_face_type(::google::protobuf::uint32 value);

  // uint32 card_id = 13;
  void clear_card_id();
  static const int kCardIdFieldNumber = 13;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSCardFaceUnlockNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 face_type_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSCardNumChangeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSCardNumChangeNotify) */ {
 public:
  GCGDSCardNumChangeNotify();
  virtual ~GCGDSCardNumChangeNotify();

  GCGDSCardNumChangeNotify(const GCGDSCardNumChangeNotify& from);

  inline GCGDSCardNumChangeNotify& operator=(const GCGDSCardNumChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSCardNumChangeNotify(GCGDSCardNumChangeNotify&& from) noexcept
    : GCGDSCardNumChangeNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSCardNumChangeNotify& operator=(GCGDSCardNumChangeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSCardNumChangeNotify& default_instance();

  static inline const GCGDSCardNumChangeNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSCardNumChangeNotify*>(
               &_GCGDSCardNumChangeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    119;

  void Swap(GCGDSCardNumChangeNotify* other);
  friend void swap(GCGDSCardNumChangeNotify& a, GCGDSCardNumChangeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSCardNumChangeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSCardNumChangeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSCardNumChangeNotify& from);
  void MergeFrom(const GCGDSCardNumChangeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSCardNumChangeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 4;
  void clear_card_id();
  static const int kCardIdFieldNumber = 4;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 num = 10;
  void clear_num();
  static const int kNumFieldNumber = 10;
  ::google::protobuf::uint32 num() const;
  void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSCardNumChangeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 num_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeCardFaceReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeCardFaceReq) */ {
 public:
  GCGDSChangeCardFaceReq();
  virtual ~GCGDSChangeCardFaceReq();

  GCGDSChangeCardFaceReq(const GCGDSChangeCardFaceReq& from);

  inline GCGDSChangeCardFaceReq& operator=(const GCGDSChangeCardFaceReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeCardFaceReq(GCGDSChangeCardFaceReq&& from) noexcept
    : GCGDSChangeCardFaceReq() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeCardFaceReq& operator=(GCGDSChangeCardFaceReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeCardFaceReq& default_instance();

  static inline const GCGDSChangeCardFaceReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeCardFaceReq*>(
               &_GCGDSChangeCardFaceReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    120;

  void Swap(GCGDSChangeCardFaceReq* other);
  friend void swap(GCGDSChangeCardFaceReq& a, GCGDSChangeCardFaceReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeCardFaceReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeCardFaceReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeCardFaceReq& from);
  void MergeFrom(const GCGDSChangeCardFaceReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeCardFaceReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 3;
  void clear_card_id();
  static const int kCardIdFieldNumber = 3;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 face_type = 6;
  void clear_face_type();
  static const int kFaceTypeFieldNumber = 6;
  ::google::protobuf::uint32 face_type() const;
  void set_face_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeCardFaceReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 face_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeCardFaceRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeCardFaceRsp) */ {
 public:
  GCGDSChangeCardFaceRsp();
  virtual ~GCGDSChangeCardFaceRsp();

  GCGDSChangeCardFaceRsp(const GCGDSChangeCardFaceRsp& from);

  inline GCGDSChangeCardFaceRsp& operator=(const GCGDSChangeCardFaceRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeCardFaceRsp(GCGDSChangeCardFaceRsp&& from) noexcept
    : GCGDSChangeCardFaceRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeCardFaceRsp& operator=(GCGDSChangeCardFaceRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeCardFaceRsp& default_instance();

  static inline const GCGDSChangeCardFaceRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeCardFaceRsp*>(
               &_GCGDSChangeCardFaceRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    121;

  void Swap(GCGDSChangeCardFaceRsp* other);
  friend void swap(GCGDSChangeCardFaceRsp& a, GCGDSChangeCardFaceRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeCardFaceRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeCardFaceRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeCardFaceRsp& from);
  void MergeFrom(const GCGDSChangeCardFaceRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeCardFaceRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 9;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 9;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 card_id = 4;
  void clear_card_id();
  static const int kCardIdFieldNumber = 4;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 face_type = 8;
  void clear_face_type();
  static const int kFaceTypeFieldNumber = 8;
  ::google::protobuf::uint32 face_type() const;
  void set_face_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeCardFaceRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 face_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeCardBackReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeCardBackReq) */ {
 public:
  GCGDSChangeCardBackReq();
  virtual ~GCGDSChangeCardBackReq();

  GCGDSChangeCardBackReq(const GCGDSChangeCardBackReq& from);

  inline GCGDSChangeCardBackReq& operator=(const GCGDSChangeCardBackReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeCardBackReq(GCGDSChangeCardBackReq&& from) noexcept
    : GCGDSChangeCardBackReq() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeCardBackReq& operator=(GCGDSChangeCardBackReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeCardBackReq& default_instance();

  static inline const GCGDSChangeCardBackReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeCardBackReq*>(
               &_GCGDSChangeCardBackReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    122;

  void Swap(GCGDSChangeCardBackReq* other);
  friend void swap(GCGDSChangeCardBackReq& a, GCGDSChangeCardBackReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeCardBackReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeCardBackReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeCardBackReq& from);
  void MergeFrom(const GCGDSChangeCardBackReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeCardBackReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deck_id = 10;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 10;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // uint32 card_back_id = 12;
  void clear_card_back_id();
  static const int kCardBackIdFieldNumber = 12;
  ::google::protobuf::uint32 card_back_id() const;
  void set_card_back_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeCardBackReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deck_id_;
  ::google::protobuf::uint32 card_back_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeCardBackRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeCardBackRsp) */ {
 public:
  GCGDSChangeCardBackRsp();
  virtual ~GCGDSChangeCardBackRsp();

  GCGDSChangeCardBackRsp(const GCGDSChangeCardBackRsp& from);

  inline GCGDSChangeCardBackRsp& operator=(const GCGDSChangeCardBackRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeCardBackRsp(GCGDSChangeCardBackRsp&& from) noexcept
    : GCGDSChangeCardBackRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeCardBackRsp& operator=(GCGDSChangeCardBackRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeCardBackRsp& default_instance();

  static inline const GCGDSChangeCardBackRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeCardBackRsp*>(
               &_GCGDSChangeCardBackRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    123;

  void Swap(GCGDSChangeCardBackRsp* other);
  friend void swap(GCGDSChangeCardBackRsp& a, GCGDSChangeCardBackRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeCardBackRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeCardBackRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeCardBackRsp& from);
  void MergeFrom(const GCGDSChangeCardBackRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeCardBackRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 15;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 15;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 deck_id = 5;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 5;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // uint32 card_back_id = 6;
  void clear_card_back_id();
  static const int kCardBackIdFieldNumber = 6;
  ::google::protobuf::uint32 card_back_id() const;
  void set_card_back_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeCardBackRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 deck_id_;
  ::google::protobuf::uint32 card_back_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeFieldReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeFieldReq) */ {
 public:
  GCGDSChangeFieldReq();
  virtual ~GCGDSChangeFieldReq();

  GCGDSChangeFieldReq(const GCGDSChangeFieldReq& from);

  inline GCGDSChangeFieldReq& operator=(const GCGDSChangeFieldReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeFieldReq(GCGDSChangeFieldReq&& from) noexcept
    : GCGDSChangeFieldReq() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeFieldReq& operator=(GCGDSChangeFieldReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeFieldReq& default_instance();

  static inline const GCGDSChangeFieldReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeFieldReq*>(
               &_GCGDSChangeFieldReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    124;

  void Swap(GCGDSChangeFieldReq* other);
  friend void swap(GCGDSChangeFieldReq& a, GCGDSChangeFieldReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeFieldReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeFieldReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeFieldReq& from);
  void MergeFrom(const GCGDSChangeFieldReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeFieldReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 field_id = 6;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 6;
  ::google::protobuf::uint32 field_id() const;
  void set_field_id(::google::protobuf::uint32 value);

  // uint32 deck_id = 11;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 11;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeFieldReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 field_id_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeFieldRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeFieldRsp) */ {
 public:
  GCGDSChangeFieldRsp();
  virtual ~GCGDSChangeFieldRsp();

  GCGDSChangeFieldRsp(const GCGDSChangeFieldRsp& from);

  inline GCGDSChangeFieldRsp& operator=(const GCGDSChangeFieldRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeFieldRsp(GCGDSChangeFieldRsp&& from) noexcept
    : GCGDSChangeFieldRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeFieldRsp& operator=(GCGDSChangeFieldRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeFieldRsp& default_instance();

  static inline const GCGDSChangeFieldRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeFieldRsp*>(
               &_GCGDSChangeFieldRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    125;

  void Swap(GCGDSChangeFieldRsp* other);
  friend void swap(GCGDSChangeFieldRsp& a, GCGDSChangeFieldRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeFieldRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeFieldRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeFieldRsp& from);
  void MergeFrom(const GCGDSChangeFieldRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeFieldRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 deck_id = 2;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 2;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // uint32 field_id = 3;
  void clear_field_id();
  static const int kFieldIdFieldNumber = 3;
  ::google::protobuf::uint32 field_id() const;
  void set_field_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeFieldRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 deck_id_;
  ::google::protobuf::uint32 field_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeDeckNameReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeDeckNameReq) */ {
 public:
  GCGDSChangeDeckNameReq();
  virtual ~GCGDSChangeDeckNameReq();

  GCGDSChangeDeckNameReq(const GCGDSChangeDeckNameReq& from);

  inline GCGDSChangeDeckNameReq& operator=(const GCGDSChangeDeckNameReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeDeckNameReq(GCGDSChangeDeckNameReq&& from) noexcept
    : GCGDSChangeDeckNameReq() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeDeckNameReq& operator=(GCGDSChangeDeckNameReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeDeckNameReq& default_instance();

  static inline const GCGDSChangeDeckNameReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeDeckNameReq*>(
               &_GCGDSChangeDeckNameReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    126;

  void Swap(GCGDSChangeDeckNameReq* other);
  friend void swap(GCGDSChangeDeckNameReq& a, GCGDSChangeDeckNameReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeDeckNameReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeDeckNameReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeDeckNameReq& from);
  void MergeFrom(const GCGDSChangeDeckNameReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeDeckNameReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 deck_id = 13;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 13;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeDeckNameReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeDeckNameRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeDeckNameRsp) */ {
 public:
  GCGDSChangeDeckNameRsp();
  virtual ~GCGDSChangeDeckNameRsp();

  GCGDSChangeDeckNameRsp(const GCGDSChangeDeckNameRsp& from);

  inline GCGDSChangeDeckNameRsp& operator=(const GCGDSChangeDeckNameRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeDeckNameRsp(GCGDSChangeDeckNameRsp&& from) noexcept
    : GCGDSChangeDeckNameRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeDeckNameRsp& operator=(GCGDSChangeDeckNameRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeDeckNameRsp& default_instance();

  static inline const GCGDSChangeDeckNameRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeDeckNameRsp*>(
               &_GCGDSChangeDeckNameRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    127;

  void Swap(GCGDSChangeDeckNameRsp* other);
  friend void swap(GCGDSChangeDeckNameRsp& a, GCGDSChangeDeckNameRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeDeckNameRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeDeckNameRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeDeckNameRsp& from);
  void MergeFrom(const GCGDSChangeDeckNameRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeDeckNameRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 deck_id = 13;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 13;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // int32 retcode = 14;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 14;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeDeckNameRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 deck_id_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDeckSaveReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDeckSaveReq) */ {
 public:
  GCGDSDeckSaveReq();
  virtual ~GCGDSDeckSaveReq();

  GCGDSDeckSaveReq(const GCGDSDeckSaveReq& from);

  inline GCGDSDeckSaveReq& operator=(const GCGDSDeckSaveReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDeckSaveReq(GCGDSDeckSaveReq&& from) noexcept
    : GCGDSDeckSaveReq() {
    *this = ::std::move(from);
  }

  inline GCGDSDeckSaveReq& operator=(GCGDSDeckSaveReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDeckSaveReq& default_instance();

  static inline const GCGDSDeckSaveReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSDeckSaveReq*>(
               &_GCGDSDeckSaveReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    128;

  void Swap(GCGDSDeckSaveReq* other);
  friend void swap(GCGDSDeckSaveReq& a, GCGDSDeckSaveReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDeckSaveReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDeckSaveReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDeckSaveReq& from);
  void MergeFrom(const GCGDSDeckSaveReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDeckSaveReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_list = 4;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 4;
  ::google::protobuf::uint32 card_list(int index) const;
  void set_card_list(int index, ::google::protobuf::uint32 value);
  void add_card_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_list();

  // repeated uint32 character_card_list = 9;
  int character_card_list_size() const;
  void clear_character_card_list();
  static const int kCharacterCardListFieldNumber = 9;
  ::google::protobuf::uint32 character_card_list(int index) const;
  void set_character_card_list(int index, ::google::protobuf::uint32 value);
  void add_character_card_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      character_card_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_character_card_list();

  // string name = 14;
  void clear_name();
  static const int kNameFieldNumber = 14;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // uint32 deck_id = 1;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 1;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDeckSaveReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_list_;
  mutable int _card_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > character_card_list_;
  mutable int _character_card_list_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDeckSaveRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDeckSaveRsp) */ {
 public:
  GCGDSDeckSaveRsp();
  virtual ~GCGDSDeckSaveRsp();

  GCGDSDeckSaveRsp(const GCGDSDeckSaveRsp& from);

  inline GCGDSDeckSaveRsp& operator=(const GCGDSDeckSaveRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDeckSaveRsp(GCGDSDeckSaveRsp&& from) noexcept
    : GCGDSDeckSaveRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSDeckSaveRsp& operator=(GCGDSDeckSaveRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDeckSaveRsp& default_instance();

  static inline const GCGDSDeckSaveRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSDeckSaveRsp*>(
               &_GCGDSDeckSaveRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    129;

  void Swap(GCGDSDeckSaveRsp* other);
  friend void swap(GCGDSDeckSaveRsp& a, GCGDSDeckSaveRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDeckSaveRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDeckSaveRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDeckSaveRsp& from);
  void MergeFrom(const GCGDSDeckSaveRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDeckSaveRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_valid = 4;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 4;
  bool is_valid() const;
  void set_is_valid(bool value);

  // int32 retcode = 8;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 8;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 deck_id = 11;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 11;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // fixed32 create_time = 14;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 14;
  ::google::protobuf::uint32 create_time() const;
  void set_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDeckSaveRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_valid_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 deck_id_;
  ::google::protobuf::uint32 create_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeCurDeckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeCurDeckReq) */ {
 public:
  GCGDSChangeCurDeckReq();
  virtual ~GCGDSChangeCurDeckReq();

  GCGDSChangeCurDeckReq(const GCGDSChangeCurDeckReq& from);

  inline GCGDSChangeCurDeckReq& operator=(const GCGDSChangeCurDeckReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeCurDeckReq(GCGDSChangeCurDeckReq&& from) noexcept
    : GCGDSChangeCurDeckReq() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeCurDeckReq& operator=(GCGDSChangeCurDeckReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeCurDeckReq& default_instance();

  static inline const GCGDSChangeCurDeckReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeCurDeckReq*>(
               &_GCGDSChangeCurDeckReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    130;

  void Swap(GCGDSChangeCurDeckReq* other);
  friend void swap(GCGDSChangeCurDeckReq& a, GCGDSChangeCurDeckReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeCurDeckReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeCurDeckReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeCurDeckReq& from);
  void MergeFrom(const GCGDSChangeCurDeckReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeCurDeckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deck_id = 3;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 3;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeCurDeckReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSChangeCurDeckRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSChangeCurDeckRsp) */ {
 public:
  GCGDSChangeCurDeckRsp();
  virtual ~GCGDSChangeCurDeckRsp();

  GCGDSChangeCurDeckRsp(const GCGDSChangeCurDeckRsp& from);

  inline GCGDSChangeCurDeckRsp& operator=(const GCGDSChangeCurDeckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSChangeCurDeckRsp(GCGDSChangeCurDeckRsp&& from) noexcept
    : GCGDSChangeCurDeckRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSChangeCurDeckRsp& operator=(GCGDSChangeCurDeckRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSChangeCurDeckRsp& default_instance();

  static inline const GCGDSChangeCurDeckRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSChangeCurDeckRsp*>(
               &_GCGDSChangeCurDeckRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    131;

  void Swap(GCGDSChangeCurDeckRsp* other);
  friend void swap(GCGDSChangeCurDeckRsp& a, GCGDSChangeCurDeckRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSChangeCurDeckRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSChangeCurDeckRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSChangeCurDeckRsp& from);
  void MergeFrom(const GCGDSChangeCurDeckRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSChangeCurDeckRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 8;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 8;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 deck_id = 14;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 14;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSChangeCurDeckRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSCurDeckChangeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSCurDeckChangeNotify) */ {
 public:
  GCGDSCurDeckChangeNotify();
  virtual ~GCGDSCurDeckChangeNotify();

  GCGDSCurDeckChangeNotify(const GCGDSCurDeckChangeNotify& from);

  inline GCGDSCurDeckChangeNotify& operator=(const GCGDSCurDeckChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSCurDeckChangeNotify(GCGDSCurDeckChangeNotify&& from) noexcept
    : GCGDSCurDeckChangeNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSCurDeckChangeNotify& operator=(GCGDSCurDeckChangeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSCurDeckChangeNotify& default_instance();

  static inline const GCGDSCurDeckChangeNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSCurDeckChangeNotify*>(
               &_GCGDSCurDeckChangeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    132;

  void Swap(GCGDSCurDeckChangeNotify* other);
  friend void swap(GCGDSCurDeckChangeNotify& a, GCGDSCurDeckChangeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSCurDeckChangeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSCurDeckChangeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSCurDeckChangeNotify& from);
  void MergeFrom(const GCGDSCurDeckChangeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSCurDeckChangeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deck_id = 6;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 6;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSCurDeckChangeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDeleteDeckReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDeleteDeckReq) */ {
 public:
  GCGDSDeleteDeckReq();
  virtual ~GCGDSDeleteDeckReq();

  GCGDSDeleteDeckReq(const GCGDSDeleteDeckReq& from);

  inline GCGDSDeleteDeckReq& operator=(const GCGDSDeleteDeckReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDeleteDeckReq(GCGDSDeleteDeckReq&& from) noexcept
    : GCGDSDeleteDeckReq() {
    *this = ::std::move(from);
  }

  inline GCGDSDeleteDeckReq& operator=(GCGDSDeleteDeckReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDeleteDeckReq& default_instance();

  static inline const GCGDSDeleteDeckReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSDeleteDeckReq*>(
               &_GCGDSDeleteDeckReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    133;

  void Swap(GCGDSDeleteDeckReq* other);
  friend void swap(GCGDSDeleteDeckReq& a, GCGDSDeleteDeckReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDeleteDeckReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDeleteDeckReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDeleteDeckReq& from);
  void MergeFrom(const GCGDSDeleteDeckReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDeleteDeckReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deck_id = 15;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 15;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDeleteDeckReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDeleteDeckRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDeleteDeckRsp) */ {
 public:
  GCGDSDeleteDeckRsp();
  virtual ~GCGDSDeleteDeckRsp();

  GCGDSDeleteDeckRsp(const GCGDSDeleteDeckRsp& from);

  inline GCGDSDeleteDeckRsp& operator=(const GCGDSDeleteDeckRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDeleteDeckRsp(GCGDSDeleteDeckRsp&& from) noexcept
    : GCGDSDeleteDeckRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSDeleteDeckRsp& operator=(GCGDSDeleteDeckRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDeleteDeckRsp& default_instance();

  static inline const GCGDSDeleteDeckRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSDeleteDeckRsp*>(
               &_GCGDSDeleteDeckRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    134;

  void Swap(GCGDSDeleteDeckRsp* other);
  friend void swap(GCGDSDeleteDeckRsp& a, GCGDSDeleteDeckRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDeleteDeckRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDeleteDeckRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDeleteDeckRsp& from);
  void MergeFrom(const GCGDSDeleteDeckRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDeleteDeckRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deck_id = 7;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 7;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // int32 retcode = 14;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 14;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDeleteDeckRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deck_id_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDeckUnlockNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDeckUnlockNotify) */ {
 public:
  GCGDSDeckUnlockNotify();
  virtual ~GCGDSDeckUnlockNotify();

  GCGDSDeckUnlockNotify(const GCGDSDeckUnlockNotify& from);

  inline GCGDSDeckUnlockNotify& operator=(const GCGDSDeckUnlockNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDeckUnlockNotify(GCGDSDeckUnlockNotify&& from) noexcept
    : GCGDSDeckUnlockNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSDeckUnlockNotify& operator=(GCGDSDeckUnlockNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDeckUnlockNotify& default_instance();

  static inline const GCGDSDeckUnlockNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSDeckUnlockNotify*>(
               &_GCGDSDeckUnlockNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    135;

  void Swap(GCGDSDeckUnlockNotify* other);
  friend void swap(GCGDSDeckUnlockNotify& a, GCGDSDeckUnlockNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDeckUnlockNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDeckUnlockNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDeckUnlockNotify& from);
  void MergeFrom(const GCGDSDeckUnlockNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDeckUnlockNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deck_id = 15;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 15;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDeckUnlockNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deck_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSCardProficiencyNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSCardProficiencyNotify) */ {
 public:
  GCGDSCardProficiencyNotify();
  virtual ~GCGDSCardProficiencyNotify();

  GCGDSCardProficiencyNotify(const GCGDSCardProficiencyNotify& from);

  inline GCGDSCardProficiencyNotify& operator=(const GCGDSCardProficiencyNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSCardProficiencyNotify(GCGDSCardProficiencyNotify&& from) noexcept
    : GCGDSCardProficiencyNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSCardProficiencyNotify& operator=(GCGDSCardProficiencyNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSCardProficiencyNotify& default_instance();

  static inline const GCGDSCardProficiencyNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSCardProficiencyNotify*>(
               &_GCGDSCardProficiencyNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    136;

  void Swap(GCGDSCardProficiencyNotify* other);
  friend void swap(GCGDSCardProficiencyNotify& a, GCGDSCardProficiencyNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSCardProficiencyNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSCardProficiencyNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSCardProficiencyNotify& from);
  void MergeFrom(const GCGDSCardProficiencyNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSCardProficiencyNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 proficiency = 2;
  void clear_proficiency();
  static const int kProficiencyFieldNumber = 2;
  ::google::protobuf::uint32 proficiency() const;
  void set_proficiency(::google::protobuf::uint32 value);

  // uint32 card_id = 12;
  void clear_card_id();
  static const int kCardIdFieldNumber = 12;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSCardProficiencyNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 proficiency_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSDeckUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSDeckUpdateNotify) */ {
 public:
  GCGDSDeckUpdateNotify();
  virtual ~GCGDSDeckUpdateNotify();

  GCGDSDeckUpdateNotify(const GCGDSDeckUpdateNotify& from);

  inline GCGDSDeckUpdateNotify& operator=(const GCGDSDeckUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSDeckUpdateNotify(GCGDSDeckUpdateNotify&& from) noexcept
    : GCGDSDeckUpdateNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSDeckUpdateNotify& operator=(GCGDSDeckUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSDeckUpdateNotify& default_instance();

  static inline const GCGDSDeckUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSDeckUpdateNotify*>(
               &_GCGDSDeckUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    137;

  void Swap(GCGDSDeckUpdateNotify* other);
  friend void swap(GCGDSDeckUpdateNotify& a, GCGDSDeckUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSDeckUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSDeckUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSDeckUpdateNotify& from);
  void MergeFrom(const GCGDSDeckUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSDeckUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 deck_id = 6;
  void clear_deck_id();
  static const int kDeckIdFieldNumber = 6;
  ::google::protobuf::uint32 deck_id() const;
  void set_deck_id(::google::protobuf::uint32 value);

  // bool is_valid = 12;
  void clear_is_valid();
  static const int kIsValidFieldNumber = 12;
  bool is_valid() const;
  void set_is_valid(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSDeckUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 deck_id_;
  bool is_valid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSCardFaceUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSCardFaceUpdateNotify) */ {
 public:
  GCGDSCardFaceUpdateNotify();
  virtual ~GCGDSCardFaceUpdateNotify();

  GCGDSCardFaceUpdateNotify(const GCGDSCardFaceUpdateNotify& from);

  inline GCGDSCardFaceUpdateNotify& operator=(const GCGDSCardFaceUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSCardFaceUpdateNotify(GCGDSCardFaceUpdateNotify&& from) noexcept
    : GCGDSCardFaceUpdateNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSCardFaceUpdateNotify& operator=(GCGDSCardFaceUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSCardFaceUpdateNotify& default_instance();

  static inline const GCGDSCardFaceUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSCardFaceUpdateNotify*>(
               &_GCGDSCardFaceUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    138;

  void Swap(GCGDSCardFaceUpdateNotify* other);
  friend void swap(GCGDSCardFaceUpdateNotify& a, GCGDSCardFaceUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSCardFaceUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSCardFaceUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSCardFaceUpdateNotify& from);
  void MergeFrom(const GCGDSCardFaceUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSCardFaceUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 card_id = 14;
  void clear_card_id();
  static const int kCardIdFieldNumber = 14;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // uint32 face_type = 15;
  void clear_face_type();
  static const int kFaceTypeFieldNumber = 15;
  ::google::protobuf::uint32 face_type() const;
  void set_face_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSCardFaceUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 face_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSTakeCardProficiencyRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSTakeCardProficiencyRewardReq) */ {
 public:
  GCGDSTakeCardProficiencyRewardReq();
  virtual ~GCGDSTakeCardProficiencyRewardReq();

  GCGDSTakeCardProficiencyRewardReq(const GCGDSTakeCardProficiencyRewardReq& from);

  inline GCGDSTakeCardProficiencyRewardReq& operator=(const GCGDSTakeCardProficiencyRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSTakeCardProficiencyRewardReq(GCGDSTakeCardProficiencyRewardReq&& from) noexcept
    : GCGDSTakeCardProficiencyRewardReq() {
    *this = ::std::move(from);
  }

  inline GCGDSTakeCardProficiencyRewardReq& operator=(GCGDSTakeCardProficiencyRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSTakeCardProficiencyRewardReq& default_instance();

  static inline const GCGDSTakeCardProficiencyRewardReq* internal_default_instance() {
    return reinterpret_cast<const GCGDSTakeCardProficiencyRewardReq*>(
               &_GCGDSTakeCardProficiencyRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    139;

  void Swap(GCGDSTakeCardProficiencyRewardReq* other);
  friend void swap(GCGDSTakeCardProficiencyRewardReq& a, GCGDSTakeCardProficiencyRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSTakeCardProficiencyRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSTakeCardProficiencyRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSTakeCardProficiencyRewardReq& from);
  void MergeFrom(const GCGDSTakeCardProficiencyRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSTakeCardProficiencyRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 reward_index = 7;
  void clear_reward_index();
  static const int kRewardIndexFieldNumber = 7;
  ::google::protobuf::uint32 reward_index() const;
  void set_reward_index(::google::protobuf::uint32 value);

  // uint32 card_id = 14;
  void clear_card_id();
  static const int kCardIdFieldNumber = 14;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSTakeCardProficiencyRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 reward_index_;
  ::google::protobuf::uint32 card_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSTakeCardProficiencyRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSTakeCardProficiencyRewardRsp) */ {
 public:
  GCGDSTakeCardProficiencyRewardRsp();
  virtual ~GCGDSTakeCardProficiencyRewardRsp();

  GCGDSTakeCardProficiencyRewardRsp(const GCGDSTakeCardProficiencyRewardRsp& from);

  inline GCGDSTakeCardProficiencyRewardRsp& operator=(const GCGDSTakeCardProficiencyRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSTakeCardProficiencyRewardRsp(GCGDSTakeCardProficiencyRewardRsp&& from) noexcept
    : GCGDSTakeCardProficiencyRewardRsp() {
    *this = ::std::move(from);
  }

  inline GCGDSTakeCardProficiencyRewardRsp& operator=(GCGDSTakeCardProficiencyRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSTakeCardProficiencyRewardRsp& default_instance();

  static inline const GCGDSTakeCardProficiencyRewardRsp* internal_default_instance() {
    return reinterpret_cast<const GCGDSTakeCardProficiencyRewardRsp*>(
               &_GCGDSTakeCardProficiencyRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    140;

  void Swap(GCGDSTakeCardProficiencyRewardRsp* other);
  friend void swap(GCGDSTakeCardProficiencyRewardRsp& a, GCGDSTakeCardProficiencyRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSTakeCardProficiencyRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSTakeCardProficiencyRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSTakeCardProficiencyRewardRsp& from);
  void MergeFrom(const GCGDSTakeCardProficiencyRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSTakeCardProficiencyRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 reward_index = 10;
  void clear_reward_index();
  static const int kRewardIndexFieldNumber = 10;
  ::google::protobuf::uint32 reward_index() const;
  void set_reward_index(::google::protobuf::uint32 value);

  // uint32 card_id = 7;
  void clear_card_id();
  static const int kCardIdFieldNumber = 7;
  ::google::protobuf::uint32 card_id() const;
  void set_card_id(::google::protobuf::uint32 value);

  // int32 retcode = 8;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 8;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGDSTakeCardProficiencyRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 reward_index_;
  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGDSBanCardNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGDSBanCardNotify) */ {
 public:
  GCGDSBanCardNotify();
  virtual ~GCGDSBanCardNotify();

  GCGDSBanCardNotify(const GCGDSBanCardNotify& from);

  inline GCGDSBanCardNotify& operator=(const GCGDSBanCardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGDSBanCardNotify(GCGDSBanCardNotify&& from) noexcept
    : GCGDSBanCardNotify() {
    *this = ::std::move(from);
  }

  inline GCGDSBanCardNotify& operator=(GCGDSBanCardNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGDSBanCardNotify& default_instance();

  static inline const GCGDSBanCardNotify* internal_default_instance() {
    return reinterpret_cast<const GCGDSBanCardNotify*>(
               &_GCGDSBanCardNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    141;

  void Swap(GCGDSBanCardNotify* other);
  friend void swap(GCGDSBanCardNotify& a, GCGDSBanCardNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGDSBanCardNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGDSBanCardNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGDSBanCardNotify& from);
  void MergeFrom(const GCGDSBanCardNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGDSBanCardNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 card_list = 4;
  int card_list_size() const;
  void clear_card_list();
  static const int kCardListFieldNumber = 4;
  ::google::protobuf::uint32 card_list(int index) const;
  void set_card_list(int index, ::google::protobuf::uint32 value);
  void add_card_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_list();

  // @@protoc_insertion_point(class_scope:proto.GCGDSBanCardNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_list_;
  mutable int _card_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTCTavernInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTCTavernInfoNotify) */ {
 public:
  GCGTCTavernInfoNotify();
  virtual ~GCGTCTavernInfoNotify();

  GCGTCTavernInfoNotify(const GCGTCTavernInfoNotify& from);

  inline GCGTCTavernInfoNotify& operator=(const GCGTCTavernInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTCTavernInfoNotify(GCGTCTavernInfoNotify&& from) noexcept
    : GCGTCTavernInfoNotify() {
    *this = ::std::move(from);
  }

  inline GCGTCTavernInfoNotify& operator=(GCGTCTavernInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTCTavernInfoNotify& default_instance();

  static inline const GCGTCTavernInfoNotify* internal_default_instance() {
    return reinterpret_cast<const GCGTCTavernInfoNotify*>(
               &_GCGTCTavernInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    142;

  void Swap(GCGTCTavernInfoNotify* other);
  friend void swap(GCGTCTavernInfoNotify& a, GCGTCTavernInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTCTavernInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTCTavernInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTCTavernInfoNotify& from);
  void MergeFrom(const GCGTCTavernInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTCTavernInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 point_id = 3;
  void clear_point_id();
  static const int kPointIdFieldNumber = 3;
  ::google::protobuf::uint32 point_id() const;
  void set_point_id(::google::protobuf::uint32 value);

  // uint32 character_id = 7;
  void clear_character_id();
  static const int kCharacterIdFieldNumber = 7;
  ::google::protobuf::uint32 character_id() const;
  void set_character_id(::google::protobuf::uint32 value);

  // bool is_last_duel_win = 14;
  void clear_is_last_duel_win();
  static const int kIsLastDuelWinFieldNumber = 14;
  bool is_last_duel_win() const;
  void set_is_last_duel_win(bool value);

  // bool is_owner_in_duel = 5;
  void clear_is_owner_in_duel();
  static const int kIsOwnerInDuelFieldNumber = 5;
  bool is_owner_in_duel() const;
  void set_is_owner_in_duel(bool value);

  // uint32 element_type = 10;
  void clear_element_type();
  static const int kElementTypeFieldNumber = 10;
  ::google::protobuf::uint32 element_type() const;
  void set_element_type(::google::protobuf::uint32 value);

  // uint32 level_id = 11;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 11;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // uint32 avatar_id = 12;
  void clear_avatar_id();
  static const int kAvatarIdFieldNumber = 12;
  ::google::protobuf::uint32 avatar_id() const;
  void set_avatar_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGTCTavernInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 point_id_;
  ::google::protobuf::uint32 character_id_;
  bool is_last_duel_win_;
  bool is_owner_in_duel_;
  ::google::protobuf::uint32 element_type_;
  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 avatar_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTCInviteReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTCInviteReq) */ {
 public:
  GCGTCInviteReq();
  virtual ~GCGTCInviteReq();

  GCGTCInviteReq(const GCGTCInviteReq& from);

  inline GCGTCInviteReq& operator=(const GCGTCInviteReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTCInviteReq(GCGTCInviteReq&& from) noexcept
    : GCGTCInviteReq() {
    *this = ::std::move(from);
  }

  inline GCGTCInviteReq& operator=(GCGTCInviteReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTCInviteReq& default_instance();

  static inline const GCGTCInviteReq* internal_default_instance() {
    return reinterpret_cast<const GCGTCInviteReq*>(
               &_GCGTCInviteReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    143;

  void Swap(GCGTCInviteReq* other);
  friend void swap(GCGTCInviteReq& a, GCGTCInviteReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTCInviteReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTCInviteReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTCInviteReq& from);
  void MergeFrom(const GCGTCInviteReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTCInviteReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 level_id = 3;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 3;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // uint32 character_id = 6;
  void clear_character_id();
  static const int kCharacterIdFieldNumber = 6;
  ::google::protobuf::uint32 character_id() const;
  void set_character_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGTCInviteReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 character_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTCInviteRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTCInviteRsp) */ {
 public:
  GCGTCInviteRsp();
  virtual ~GCGTCInviteRsp();

  GCGTCInviteRsp(const GCGTCInviteRsp& from);

  inline GCGTCInviteRsp& operator=(const GCGTCInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTCInviteRsp(GCGTCInviteRsp&& from) noexcept
    : GCGTCInviteRsp() {
    *this = ::std::move(from);
  }

  inline GCGTCInviteRsp& operator=(GCGTCInviteRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTCInviteRsp& default_instance();

  static inline const GCGTCInviteRsp* internal_default_instance() {
    return reinterpret_cast<const GCGTCInviteRsp*>(
               &_GCGTCInviteRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    144;

  void Swap(GCGTCInviteRsp* other);
  friend void swap(GCGTCInviteRsp& a, GCGTCInviteRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTCInviteRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTCInviteRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTCInviteRsp& from);
  void MergeFrom(const GCGTCInviteRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTCInviteRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 character_id = 12;
  void clear_character_id();
  static const int kCharacterIdFieldNumber = 12;
  ::google::protobuf::uint32 character_id() const;
  void set_character_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGTCInviteRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 character_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTCTavernChallengeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTCTavernChallengeData) */ {
 public:
  GCGTCTavernChallengeData();
  virtual ~GCGTCTavernChallengeData();

  GCGTCTavernChallengeData(const GCGTCTavernChallengeData& from);

  inline GCGTCTavernChallengeData& operator=(const GCGTCTavernChallengeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTCTavernChallengeData(GCGTCTavernChallengeData&& from) noexcept
    : GCGTCTavernChallengeData() {
    *this = ::std::move(from);
  }

  inline GCGTCTavernChallengeData& operator=(GCGTCTavernChallengeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTCTavernChallengeData& default_instance();

  static inline const GCGTCTavernChallengeData* internal_default_instance() {
    return reinterpret_cast<const GCGTCTavernChallengeData*>(
               &_GCGTCTavernChallengeData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    145;

  void Swap(GCGTCTavernChallengeData* other);
  friend void swap(GCGTCTavernChallengeData& a, GCGTCTavernChallengeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTCTavernChallengeData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTCTavernChallengeData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTCTavernChallengeData& from);
  void MergeFrom(const GCGTCTavernChallengeData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTCTavernChallengeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 unlock_level_id_list = 1;
  int unlock_level_id_list_size() const;
  void clear_unlock_level_id_list();
  static const int kUnlockLevelIdListFieldNumber = 1;
  ::google::protobuf::uint32 unlock_level_id_list(int index) const;
  void set_unlock_level_id_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_level_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_level_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_level_id_list();

  // uint32 character_id = 8;
  void clear_character_id();
  static const int kCharacterIdFieldNumber = 8;
  ::google::protobuf::uint32 character_id() const;
  void set_character_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGTCTavernChallengeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_level_id_list_;
  mutable int _unlock_level_id_list_cached_byte_size_;
  ::google::protobuf::uint32 character_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTCTavernChallengeDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTCTavernChallengeDataNotify) */ {
 public:
  GCGTCTavernChallengeDataNotify();
  virtual ~GCGTCTavernChallengeDataNotify();

  GCGTCTavernChallengeDataNotify(const GCGTCTavernChallengeDataNotify& from);

  inline GCGTCTavernChallengeDataNotify& operator=(const GCGTCTavernChallengeDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTCTavernChallengeDataNotify(GCGTCTavernChallengeDataNotify&& from) noexcept
    : GCGTCTavernChallengeDataNotify() {
    *this = ::std::move(from);
  }

  inline GCGTCTavernChallengeDataNotify& operator=(GCGTCTavernChallengeDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTCTavernChallengeDataNotify& default_instance();

  static inline const GCGTCTavernChallengeDataNotify* internal_default_instance() {
    return reinterpret_cast<const GCGTCTavernChallengeDataNotify*>(
               &_GCGTCTavernChallengeDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    146;

  void Swap(GCGTCTavernChallengeDataNotify* other);
  friend void swap(GCGTCTavernChallengeDataNotify& a, GCGTCTavernChallengeDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTCTavernChallengeDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTCTavernChallengeDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTCTavernChallengeDataNotify& from);
  void MergeFrom(const GCGTCTavernChallengeDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTCTavernChallengeDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGTCTavernChallengeData tavern_challenge_list = 13;
  int tavern_challenge_list_size() const;
  void clear_tavern_challenge_list();
  static const int kTavernChallengeListFieldNumber = 13;
  const ::proto::GCGTCTavernChallengeData& tavern_challenge_list(int index) const;
  ::proto::GCGTCTavernChallengeData* mutable_tavern_challenge_list(int index);
  ::proto::GCGTCTavernChallengeData* add_tavern_challenge_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGTCTavernChallengeData >*
      mutable_tavern_challenge_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGTCTavernChallengeData >&
      tavern_challenge_list() const;

  // @@protoc_insertion_point(class_scope:proto.GCGTCTavernChallengeDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGTCTavernChallengeData > tavern_challenge_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTCTavernChallengeUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTCTavernChallengeUpdateNotify) */ {
 public:
  GCGTCTavernChallengeUpdateNotify();
  virtual ~GCGTCTavernChallengeUpdateNotify();

  GCGTCTavernChallengeUpdateNotify(const GCGTCTavernChallengeUpdateNotify& from);

  inline GCGTCTavernChallengeUpdateNotify& operator=(const GCGTCTavernChallengeUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTCTavernChallengeUpdateNotify(GCGTCTavernChallengeUpdateNotify&& from) noexcept
    : GCGTCTavernChallengeUpdateNotify() {
    *this = ::std::move(from);
  }

  inline GCGTCTavernChallengeUpdateNotify& operator=(GCGTCTavernChallengeUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTCTavernChallengeUpdateNotify& default_instance();

  static inline const GCGTCTavernChallengeUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const GCGTCTavernChallengeUpdateNotify*>(
               &_GCGTCTavernChallengeUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    147;

  void Swap(GCGTCTavernChallengeUpdateNotify* other);
  friend void swap(GCGTCTavernChallengeUpdateNotify& a, GCGTCTavernChallengeUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTCTavernChallengeUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTCTavernChallengeUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTCTavernChallengeUpdateNotify& from);
  void MergeFrom(const GCGTCTavernChallengeUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTCTavernChallengeUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGTCTavernChallengeData tavern_challenge = 5;
  bool has_tavern_challenge() const;
  void clear_tavern_challenge();
  static const int kTavernChallengeFieldNumber = 5;
  const ::proto::GCGTCTavernChallengeData& tavern_challenge() const;
  ::proto::GCGTCTavernChallengeData* mutable_tavern_challenge();
  ::proto::GCGTCTavernChallengeData* release_tavern_challenge();
  void set_allocated_tavern_challenge(::proto::GCGTCTavernChallengeData* tavern_challenge);

  // @@protoc_insertion_point(class_scope:proto.GCGTCTavernChallengeUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGTCTavernChallengeData* tavern_challenge_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGrowthLevelNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGrowthLevelNotify) */ {
 public:
  GCGGrowthLevelNotify();
  virtual ~GCGGrowthLevelNotify();

  GCGGrowthLevelNotify(const GCGGrowthLevelNotify& from);

  inline GCGGrowthLevelNotify& operator=(const GCGGrowthLevelNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGrowthLevelNotify(GCGGrowthLevelNotify&& from) noexcept
    : GCGGrowthLevelNotify() {
    *this = ::std::move(from);
  }

  inline GCGGrowthLevelNotify& operator=(GCGGrowthLevelNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGrowthLevelNotify& default_instance();

  static inline const GCGGrowthLevelNotify* internal_default_instance() {
    return reinterpret_cast<const GCGGrowthLevelNotify*>(
               &_GCGGrowthLevelNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    148;

  void Swap(GCGGrowthLevelNotify* other);
  friend void swap(GCGGrowthLevelNotify& a, GCGGrowthLevelNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGrowthLevelNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGrowthLevelNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGrowthLevelNotify& from);
  void MergeFrom(const GCGGrowthLevelNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGrowthLevelNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 exp = 7;
  void clear_exp();
  static const int kExpFieldNumber = 7;
  ::google::protobuf::uint32 exp() const;
  void set_exp(::google::protobuf::uint32 value);

  // uint32 level = 11;
  void clear_level();
  static const int kLevelFieldNumber = 11;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGGrowthLevelNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGrowthLevelRewardNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGrowthLevelRewardNotify) */ {
 public:
  GCGGrowthLevelRewardNotify();
  virtual ~GCGGrowthLevelRewardNotify();

  GCGGrowthLevelRewardNotify(const GCGGrowthLevelRewardNotify& from);

  inline GCGGrowthLevelRewardNotify& operator=(const GCGGrowthLevelRewardNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGrowthLevelRewardNotify(GCGGrowthLevelRewardNotify&& from) noexcept
    : GCGGrowthLevelRewardNotify() {
    *this = ::std::move(from);
  }

  inline GCGGrowthLevelRewardNotify& operator=(GCGGrowthLevelRewardNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGrowthLevelRewardNotify& default_instance();

  static inline const GCGGrowthLevelRewardNotify* internal_default_instance() {
    return reinterpret_cast<const GCGGrowthLevelRewardNotify*>(
               &_GCGGrowthLevelRewardNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    149;

  void Swap(GCGGrowthLevelRewardNotify* other);
  friend void swap(GCGGrowthLevelRewardNotify& a, GCGGrowthLevelRewardNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGrowthLevelRewardNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGrowthLevelRewardNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGrowthLevelRewardNotify& from);
  void MergeFrom(const GCGGrowthLevelRewardNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGrowthLevelRewardNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 level_reward_taken_list = 8;
  int level_reward_taken_list_size() const;
  void clear_level_reward_taken_list();
  static const int kLevelRewardTakenListFieldNumber = 8;
  ::google::protobuf::uint32 level_reward_taken_list(int index) const;
  void set_level_reward_taken_list(int index, ::google::protobuf::uint32 value);
  void add_level_reward_taken_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level_reward_taken_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level_reward_taken_list();

  // @@protoc_insertion_point(class_scope:proto.GCGGrowthLevelRewardNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_reward_taken_list_;
  mutable int _level_reward_taken_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGrowthLevelTakeRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGrowthLevelTakeRewardReq) */ {
 public:
  GCGGrowthLevelTakeRewardReq();
  virtual ~GCGGrowthLevelTakeRewardReq();

  GCGGrowthLevelTakeRewardReq(const GCGGrowthLevelTakeRewardReq& from);

  inline GCGGrowthLevelTakeRewardReq& operator=(const GCGGrowthLevelTakeRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGrowthLevelTakeRewardReq(GCGGrowthLevelTakeRewardReq&& from) noexcept
    : GCGGrowthLevelTakeRewardReq() {
    *this = ::std::move(from);
  }

  inline GCGGrowthLevelTakeRewardReq& operator=(GCGGrowthLevelTakeRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGrowthLevelTakeRewardReq& default_instance();

  static inline const GCGGrowthLevelTakeRewardReq* internal_default_instance() {
    return reinterpret_cast<const GCGGrowthLevelTakeRewardReq*>(
               &_GCGGrowthLevelTakeRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    150;

  void Swap(GCGGrowthLevelTakeRewardReq* other);
  friend void swap(GCGGrowthLevelTakeRewardReq& a, GCGGrowthLevelTakeRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGrowthLevelTakeRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGrowthLevelTakeRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGrowthLevelTakeRewardReq& from);
  void MergeFrom(const GCGGrowthLevelTakeRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGrowthLevelTakeRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 level = 4;
  void clear_level();
  static const int kLevelFieldNumber = 4;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGGrowthLevelTakeRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGGrowthLevelTakeRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGGrowthLevelTakeRewardRsp) */ {
 public:
  GCGGrowthLevelTakeRewardRsp();
  virtual ~GCGGrowthLevelTakeRewardRsp();

  GCGGrowthLevelTakeRewardRsp(const GCGGrowthLevelTakeRewardRsp& from);

  inline GCGGrowthLevelTakeRewardRsp& operator=(const GCGGrowthLevelTakeRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGGrowthLevelTakeRewardRsp(GCGGrowthLevelTakeRewardRsp&& from) noexcept
    : GCGGrowthLevelTakeRewardRsp() {
    *this = ::std::move(from);
  }

  inline GCGGrowthLevelTakeRewardRsp& operator=(GCGGrowthLevelTakeRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGGrowthLevelTakeRewardRsp& default_instance();

  static inline const GCGGrowthLevelTakeRewardRsp* internal_default_instance() {
    return reinterpret_cast<const GCGGrowthLevelTakeRewardRsp*>(
               &_GCGGrowthLevelTakeRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    151;

  void Swap(GCGGrowthLevelTakeRewardRsp* other);
  friend void swap(GCGGrowthLevelTakeRewardRsp& a, GCGGrowthLevelTakeRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGGrowthLevelTakeRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGGrowthLevelTakeRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGGrowthLevelTakeRewardRsp& from);
  void MergeFrom(const GCGGrowthLevelTakeRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGGrowthLevelTakeRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 level = 1;
  void clear_level();
  static const int kLevelFieldNumber = 1;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // int32 retcode = 13;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 13;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGGrowthLevelTakeRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGInviteGuestBattleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGInviteGuestBattleReq) */ {
 public:
  GCGInviteGuestBattleReq();
  virtual ~GCGInviteGuestBattleReq();

  GCGInviteGuestBattleReq(const GCGInviteGuestBattleReq& from);

  inline GCGInviteGuestBattleReq& operator=(const GCGInviteGuestBattleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGInviteGuestBattleReq(GCGInviteGuestBattleReq&& from) noexcept
    : GCGInviteGuestBattleReq() {
    *this = ::std::move(from);
  }

  inline GCGInviteGuestBattleReq& operator=(GCGInviteGuestBattleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGInviteGuestBattleReq& default_instance();

  static inline const GCGInviteGuestBattleReq* internal_default_instance() {
    return reinterpret_cast<const GCGInviteGuestBattleReq*>(
               &_GCGInviteGuestBattleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    152;

  void Swap(GCGInviteGuestBattleReq* other);
  friend void swap(GCGInviteGuestBattleReq& a, GCGInviteGuestBattleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGInviteGuestBattleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGInviteGuestBattleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGInviteGuestBattleReq& from);
  void MergeFrom(const GCGInviteGuestBattleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGInviteGuestBattleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 uid = 11;
  void clear_uid();
  static const int kUidFieldNumber = 11;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGInviteGuestBattleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGInviteGuestBattleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGInviteGuestBattleRsp) */ {
 public:
  GCGInviteGuestBattleRsp();
  virtual ~GCGInviteGuestBattleRsp();

  GCGInviteGuestBattleRsp(const GCGInviteGuestBattleRsp& from);

  inline GCGInviteGuestBattleRsp& operator=(const GCGInviteGuestBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGInviteGuestBattleRsp(GCGInviteGuestBattleRsp&& from) noexcept
    : GCGInviteGuestBattleRsp() {
    *this = ::std::move(from);
  }

  inline GCGInviteGuestBattleRsp& operator=(GCGInviteGuestBattleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGInviteGuestBattleRsp& default_instance();

  static inline const GCGInviteGuestBattleRsp* internal_default_instance() {
    return reinterpret_cast<const GCGInviteGuestBattleRsp*>(
               &_GCGInviteGuestBattleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    153;

  void Swap(GCGInviteGuestBattleRsp* other);
  friend void swap(GCGInviteGuestBattleRsp& a, GCGInviteGuestBattleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGInviteGuestBattleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGInviteGuestBattleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGInviteGuestBattleRsp& from);
  void MergeFrom(const GCGInviteGuestBattleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGInviteGuestBattleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 confirm_end_time = 2;
  void clear_confirm_end_time();
  static const int kConfirmEndTimeFieldNumber = 2;
  ::google::protobuf::uint32 confirm_end_time() const;
  void set_confirm_end_time(::google::protobuf::uint32 value);

  // int32 retcode = 3;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 punish_end_time = 9;
  void clear_punish_end_time();
  static const int kPunishEndTimeFieldNumber = 9;
  ::google::protobuf::uint32 punish_end_time() const;
  void set_punish_end_time(::google::protobuf::uint32 value);

  // uint32 uid = 11;
  void clear_uid();
  static const int kUidFieldNumber = 11;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGInviteGuestBattleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 confirm_end_time_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 punish_end_time_;
  ::google::protobuf::uint32 uid_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGInviteBattleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGInviteBattleNotify) */ {
 public:
  GCGInviteBattleNotify();
  virtual ~GCGInviteBattleNotify();

  GCGInviteBattleNotify(const GCGInviteBattleNotify& from);

  inline GCGInviteBattleNotify& operator=(const GCGInviteBattleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGInviteBattleNotify(GCGInviteBattleNotify&& from) noexcept
    : GCGInviteBattleNotify() {
    *this = ::std::move(from);
  }

  inline GCGInviteBattleNotify& operator=(GCGInviteBattleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGInviteBattleNotify& default_instance();

  static inline const GCGInviteBattleNotify* internal_default_instance() {
    return reinterpret_cast<const GCGInviteBattleNotify*>(
               &_GCGInviteBattleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    154;

  void Swap(GCGInviteBattleNotify* other);
  friend void swap(GCGInviteBattleNotify& a, GCGInviteBattleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGInviteBattleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGInviteBattleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGInviteBattleNotify& from);
  void MergeFrom(const GCGInviteBattleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGInviteBattleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 confirm_end_time = 10;
  void clear_confirm_end_time();
  static const int kConfirmEndTimeFieldNumber = 10;
  ::google::protobuf::uint32 confirm_end_time() const;
  void set_confirm_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGInviteBattleNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 confirm_end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGApplyInviteBattleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGApplyInviteBattleReq) */ {
 public:
  GCGApplyInviteBattleReq();
  virtual ~GCGApplyInviteBattleReq();

  GCGApplyInviteBattleReq(const GCGApplyInviteBattleReq& from);

  inline GCGApplyInviteBattleReq& operator=(const GCGApplyInviteBattleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGApplyInviteBattleReq(GCGApplyInviteBattleReq&& from) noexcept
    : GCGApplyInviteBattleReq() {
    *this = ::std::move(from);
  }

  inline GCGApplyInviteBattleReq& operator=(GCGApplyInviteBattleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGApplyInviteBattleReq& default_instance();

  static inline const GCGApplyInviteBattleReq* internal_default_instance() {
    return reinterpret_cast<const GCGApplyInviteBattleReq*>(
               &_GCGApplyInviteBattleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    155;

  void Swap(GCGApplyInviteBattleReq* other);
  friend void swap(GCGApplyInviteBattleReq& a, GCGApplyInviteBattleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGApplyInviteBattleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGApplyInviteBattleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGApplyInviteBattleReq& from);
  void MergeFrom(const GCGApplyInviteBattleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGApplyInviteBattleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_agree = 9;
  void clear_is_agree();
  static const int kIsAgreeFieldNumber = 9;
  bool is_agree() const;
  void set_is_agree(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGApplyInviteBattleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_agree_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGApplyInviteBattleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGApplyInviteBattleRsp) */ {
 public:
  GCGApplyInviteBattleRsp();
  virtual ~GCGApplyInviteBattleRsp();

  GCGApplyInviteBattleRsp(const GCGApplyInviteBattleRsp& from);

  inline GCGApplyInviteBattleRsp& operator=(const GCGApplyInviteBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGApplyInviteBattleRsp(GCGApplyInviteBattleRsp&& from) noexcept
    : GCGApplyInviteBattleRsp() {
    *this = ::std::move(from);
  }

  inline GCGApplyInviteBattleRsp& operator=(GCGApplyInviteBattleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGApplyInviteBattleRsp& default_instance();

  static inline const GCGApplyInviteBattleRsp* internal_default_instance() {
    return reinterpret_cast<const GCGApplyInviteBattleRsp*>(
               &_GCGApplyInviteBattleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    156;

  void Swap(GCGApplyInviteBattleRsp* other);
  friend void swap(GCGApplyInviteBattleRsp& a, GCGApplyInviteBattleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGApplyInviteBattleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGApplyInviteBattleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGApplyInviteBattleRsp& from);
  void MergeFrom(const GCGApplyInviteBattleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGApplyInviteBattleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 5;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 5;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 punish_end_time = 7;
  void clear_punish_end_time();
  static const int kPunishEndTimeFieldNumber = 7;
  ::google::protobuf::uint32 punish_end_time() const;
  void set_punish_end_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGApplyInviteBattleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 punish_end_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGApplyInviteBattleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGApplyInviteBattleNotify) */ {
 public:
  GCGApplyInviteBattleNotify();
  virtual ~GCGApplyInviteBattleNotify();

  GCGApplyInviteBattleNotify(const GCGApplyInviteBattleNotify& from);

  inline GCGApplyInviteBattleNotify& operator=(const GCGApplyInviteBattleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGApplyInviteBattleNotify(GCGApplyInviteBattleNotify&& from) noexcept
    : GCGApplyInviteBattleNotify() {
    *this = ::std::move(from);
  }

  inline GCGApplyInviteBattleNotify& operator=(GCGApplyInviteBattleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGApplyInviteBattleNotify& default_instance();

  static inline const GCGApplyInviteBattleNotify* internal_default_instance() {
    return reinterpret_cast<const GCGApplyInviteBattleNotify*>(
               &_GCGApplyInviteBattleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    157;

  void Swap(GCGApplyInviteBattleNotify* other);
  friend void swap(GCGApplyInviteBattleNotify& a, GCGApplyInviteBattleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGApplyInviteBattleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGApplyInviteBattleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGApplyInviteBattleNotify& from);
  void MergeFrom(const GCGApplyInviteBattleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGApplyInviteBattleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 6;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 6;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // bool is_agree = 14;
  void clear_is_agree();
  static const int kIsAgreeFieldNumber = 14;
  bool is_agree() const;
  void set_is_agree(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGApplyInviteBattleNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  bool is_agree_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGWorldPlayerGCGStateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGWorldPlayerGCGStateReq) */ {
 public:
  GCGWorldPlayerGCGStateReq();
  virtual ~GCGWorldPlayerGCGStateReq();

  GCGWorldPlayerGCGStateReq(const GCGWorldPlayerGCGStateReq& from);

  inline GCGWorldPlayerGCGStateReq& operator=(const GCGWorldPlayerGCGStateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGWorldPlayerGCGStateReq(GCGWorldPlayerGCGStateReq&& from) noexcept
    : GCGWorldPlayerGCGStateReq() {
    *this = ::std::move(from);
  }

  inline GCGWorldPlayerGCGStateReq& operator=(GCGWorldPlayerGCGStateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGWorldPlayerGCGStateReq& default_instance();

  static inline const GCGWorldPlayerGCGStateReq* internal_default_instance() {
    return reinterpret_cast<const GCGWorldPlayerGCGStateReq*>(
               &_GCGWorldPlayerGCGStateReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    158;

  void Swap(GCGWorldPlayerGCGStateReq* other);
  friend void swap(GCGWorldPlayerGCGStateReq& a, GCGWorldPlayerGCGStateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGWorldPlayerGCGStateReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGWorldPlayerGCGStateReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGWorldPlayerGCGStateReq& from);
  void MergeFrom(const GCGWorldPlayerGCGStateReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGWorldPlayerGCGStateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGWorldPlayerGCGStateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGPlayerGCGState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGPlayerGCGState) */ {
 public:
  GCGPlayerGCGState();
  virtual ~GCGPlayerGCGState();

  GCGPlayerGCGState(const GCGPlayerGCGState& from);

  inline GCGPlayerGCGState& operator=(const GCGPlayerGCGState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGPlayerGCGState(GCGPlayerGCGState&& from) noexcept
    : GCGPlayerGCGState() {
    *this = ::std::move(from);
  }

  inline GCGPlayerGCGState& operator=(GCGPlayerGCGState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGPlayerGCGState& default_instance();

  static inline const GCGPlayerGCGState* internal_default_instance() {
    return reinterpret_cast<const GCGPlayerGCGState*>(
               &_GCGPlayerGCGState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    159;

  void Swap(GCGPlayerGCGState* other);
  friend void swap(GCGPlayerGCGState& a, GCGPlayerGCGState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGPlayerGCGState* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGPlayerGCGState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGPlayerGCGState& from);
  void MergeFrom(const GCGPlayerGCGState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGPlayerGCGState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  ::google::protobuf::uint32 uid() const;
  void set_uid(::google::protobuf::uint32 value);

  // bool is_reasouce_complete = 7;
  void clear_is_reasouce_complete();
  static const int kIsReasouceCompleteFieldNumber = 7;
  bool is_reasouce_complete() const;
  void set_is_reasouce_complete(bool value);

  // bool is_gcg_state_open = 5;
  void clear_is_gcg_state_open();
  static const int kIsGcgStateOpenFieldNumber = 5;
  bool is_gcg_state_open() const;
  void set_is_gcg_state_open(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGPlayerGCGState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 uid_;
  bool is_reasouce_complete_;
  bool is_gcg_state_open_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGWorldPlayerGCGStateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGWorldPlayerGCGStateRsp) */ {
 public:
  GCGWorldPlayerGCGStateRsp();
  virtual ~GCGWorldPlayerGCGStateRsp();

  GCGWorldPlayerGCGStateRsp(const GCGWorldPlayerGCGStateRsp& from);

  inline GCGWorldPlayerGCGStateRsp& operator=(const GCGWorldPlayerGCGStateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGWorldPlayerGCGStateRsp(GCGWorldPlayerGCGStateRsp&& from) noexcept
    : GCGWorldPlayerGCGStateRsp() {
    *this = ::std::move(from);
  }

  inline GCGWorldPlayerGCGStateRsp& operator=(GCGWorldPlayerGCGStateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGWorldPlayerGCGStateRsp& default_instance();

  static inline const GCGWorldPlayerGCGStateRsp* internal_default_instance() {
    return reinterpret_cast<const GCGWorldPlayerGCGStateRsp*>(
               &_GCGWorldPlayerGCGStateRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    160;

  void Swap(GCGWorldPlayerGCGStateRsp* other);
  friend void swap(GCGWorldPlayerGCGStateRsp& a, GCGWorldPlayerGCGStateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGWorldPlayerGCGStateRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGWorldPlayerGCGStateRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGWorldPlayerGCGStateRsp& from);
  void MergeFrom(const GCGWorldPlayerGCGStateRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGWorldPlayerGCGStateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGPlayerGCGState player_state = 12;
  int player_state_size() const;
  void clear_player_state();
  static const int kPlayerStateFieldNumber = 12;
  const ::proto::GCGPlayerGCGState& player_state(int index) const;
  ::proto::GCGPlayerGCGState* mutable_player_state(int index);
  ::proto::GCGPlayerGCGState* add_player_state();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerGCGState >*
      mutable_player_state();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerGCGState >&
      player_state() const;

  // int32 retcode = 10;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 10;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGWorldPlayerGCGStateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerGCGState > player_state_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSettleNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSettleNotify) */ {
 public:
  GCGSettleNotify();
  virtual ~GCGSettleNotify();

  GCGSettleNotify(const GCGSettleNotify& from);

  inline GCGSettleNotify& operator=(const GCGSettleNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSettleNotify(GCGSettleNotify&& from) noexcept
    : GCGSettleNotify() {
    *this = ::std::move(from);
  }

  inline GCGSettleNotify& operator=(GCGSettleNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSettleNotify& default_instance();

  static inline const GCGSettleNotify* internal_default_instance() {
    return reinterpret_cast<const GCGSettleNotify*>(
               &_GCGSettleNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    161;

  void Swap(GCGSettleNotify* other);
  friend void swap(GCGSettleNotify& a, GCGSettleNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSettleNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSettleNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSettleNotify& from);
  void MergeFrom(const GCGSettleNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSettleNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 finished_challenge_id_list = 6;
  int finished_challenge_id_list_size() const;
  void clear_finished_challenge_id_list();
  static const int kFinishedChallengeIdListFieldNumber = 6;
  ::google::protobuf::uint32 finished_challenge_id_list(int index) const;
  void set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value);
  void add_finished_challenge_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      finished_challenge_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_finished_challenge_id_list();

  // repeated .proto.ItemParam reward_item_list = 9;
  int reward_item_list_size() const;
  void clear_reward_item_list();
  static const int kRewardItemListFieldNumber = 9;
  const ::proto::ItemParam& reward_item_list(int index) const;
  ::proto::ItemParam* mutable_reward_item_list(int index);
  ::proto::ItemParam* add_reward_item_list();
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
      mutable_reward_item_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
      reward_item_list() const;

  // repeated uint32 forbid_finish_challenge_list = 12;
  int forbid_finish_challenge_list_size() const;
  void clear_forbid_finish_challenge_list();
  static const int kForbidFinishChallengeListFieldNumber = 12;
  ::google::protobuf::uint32 forbid_finish_challenge_list(int index) const;
  void set_forbid_finish_challenge_list(int index, ::google::protobuf::uint32 value);
  void add_forbid_finish_challenge_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      forbid_finish_challenge_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_forbid_finish_challenge_list();

  // .proto.GCGGameBusinessType business_type = 2;
  void clear_business_type();
  static const int kBusinessTypeFieldNumber = 2;
  ::proto::GCGGameBusinessType business_type() const;
  void set_business_type(::proto::GCGGameBusinessType value);

  // .proto.GCGEndReason reason = 3;
  void clear_reason();
  static const int kReasonFieldNumber = 3;
  ::proto::GCGEndReason reason() const;
  void set_reason(::proto::GCGEndReason value);

  // uint32 win_controller_id = 15;
  void clear_win_controller_id();
  static const int kWinControllerIdFieldNumber = 15;
  ::google::protobuf::uint32 win_controller_id() const;
  void set_win_controller_id(::google::protobuf::uint32 value);

  // uint32 game_id = 7;
  void clear_game_id();
  static const int kGameIdFieldNumber = 7;
  ::google::protobuf::uint32 game_id() const;
  void set_game_id(::google::protobuf::uint32 value);

  // bool is_win = 13;
  void clear_is_win();
  static const int kIsWinFieldNumber = 13;
  bool is_win() const;
  void set_is_win(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGSettleNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > finished_challenge_id_list_;
  mutable int _finished_challenge_id_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::ItemParam > reward_item_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > forbid_finish_challenge_list_;
  mutable int _forbid_finish_challenge_list_cached_byte_size_;
  int business_type_;
  int reason_;
  ::google::protobuf::uint32 win_controller_id_;
  ::google::protobuf::uint32 game_id_;
  bool is_win_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGResourceStateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGResourceStateNotify) */ {
 public:
  GCGResourceStateNotify();
  virtual ~GCGResourceStateNotify();

  GCGResourceStateNotify(const GCGResourceStateNotify& from);

  inline GCGResourceStateNotify& operator=(const GCGResourceStateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGResourceStateNotify(GCGResourceStateNotify&& from) noexcept
    : GCGResourceStateNotify() {
    *this = ::std::move(from);
  }

  inline GCGResourceStateNotify& operator=(GCGResourceStateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGResourceStateNotify& default_instance();

  static inline const GCGResourceStateNotify* internal_default_instance() {
    return reinterpret_cast<const GCGResourceStateNotify*>(
               &_GCGResourceStateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    162;

  void Swap(GCGResourceStateNotify* other);
  friend void swap(GCGResourceStateNotify& a, GCGResourceStateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGResourceStateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGResourceStateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGResourceStateNotify& from);
  void MergeFrom(const GCGResourceStateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGResourceStateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool is_complete = 5;
  void clear_is_complete();
  static const int kIsCompleteFieldNumber = 5;
  bool is_complete() const;
  void set_is_complete(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGResourceStateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool is_complete_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGClientSettleReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGClientSettleReq) */ {
 public:
  GCGClientSettleReq();
  virtual ~GCGClientSettleReq();

  GCGClientSettleReq(const GCGClientSettleReq& from);

  inline GCGClientSettleReq& operator=(const GCGClientSettleReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGClientSettleReq(GCGClientSettleReq&& from) noexcept
    : GCGClientSettleReq() {
    *this = ::std::move(from);
  }

  inline GCGClientSettleReq& operator=(GCGClientSettleReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGClientSettleReq& default_instance();

  static inline const GCGClientSettleReq* internal_default_instance() {
    return reinterpret_cast<const GCGClientSettleReq*>(
               &_GCGClientSettleReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    163;

  void Swap(GCGClientSettleReq* other);
  friend void swap(GCGClientSettleReq& a, GCGClientSettleReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGClientSettleReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGClientSettleReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGClientSettleReq& from);
  void MergeFrom(const GCGClientSettleReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGClientSettleReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto.GCGClientSettleReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGClientSettleRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGClientSettleRsp) */ {
 public:
  GCGClientSettleRsp();
  virtual ~GCGClientSettleRsp();

  GCGClientSettleRsp(const GCGClientSettleRsp& from);

  inline GCGClientSettleRsp& operator=(const GCGClientSettleRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGClientSettleRsp(GCGClientSettleRsp&& from) noexcept
    : GCGClientSettleRsp() {
    *this = ::std::move(from);
  }

  inline GCGClientSettleRsp& operator=(GCGClientSettleRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGClientSettleRsp& default_instance();

  static inline const GCGClientSettleRsp* internal_default_instance() {
    return reinterpret_cast<const GCGClientSettleRsp*>(
               &_GCGClientSettleRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    164;

  void Swap(GCGClientSettleRsp* other);
  friend void swap(GCGClientSettleRsp& a, GCGClientSettleRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGClientSettleRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGClientSettleRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGClientSettleRsp& from);
  void MergeFrom(const GCGClientSettleRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGClientSettleRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 retcode = 1;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 close_time = 4;
  void clear_close_time();
  static const int kCloseTimeFieldNumber = 4;
  ::google::protobuf::uint32 close_time() const;
  void set_close_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGClientSettleRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 close_time_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSettleOptionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSettleOptionReq) */ {
 public:
  GCGSettleOptionReq();
  virtual ~GCGSettleOptionReq();

  GCGSettleOptionReq(const GCGSettleOptionReq& from);

  inline GCGSettleOptionReq& operator=(const GCGSettleOptionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSettleOptionReq(GCGSettleOptionReq&& from) noexcept
    : GCGSettleOptionReq() {
    *this = ::std::move(from);
  }

  inline GCGSettleOptionReq& operator=(GCGSettleOptionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSettleOptionReq& default_instance();

  static inline const GCGSettleOptionReq* internal_default_instance() {
    return reinterpret_cast<const GCGSettleOptionReq*>(
               &_GCGSettleOptionReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    165;

  void Swap(GCGSettleOptionReq* other);
  friend void swap(GCGSettleOptionReq& a, GCGSettleOptionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSettleOptionReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSettleOptionReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSettleOptionReq& from);
  void MergeFrom(const GCGSettleOptionReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSettleOptionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGSettleOption option = 5;
  void clear_option();
  static const int kOptionFieldNumber = 5;
  ::proto::GCGSettleOption option() const;
  void set_option(::proto::GCGSettleOption value);

  // @@protoc_insertion_point(class_scope:proto.GCGSettleOptionReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int option_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGSettleOptionRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGSettleOptionRsp) */ {
 public:
  GCGSettleOptionRsp();
  virtual ~GCGSettleOptionRsp();

  GCGSettleOptionRsp(const GCGSettleOptionRsp& from);

  inline GCGSettleOptionRsp& operator=(const GCGSettleOptionRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGSettleOptionRsp(GCGSettleOptionRsp&& from) noexcept
    : GCGSettleOptionRsp() {
    *this = ::std::move(from);
  }

  inline GCGSettleOptionRsp& operator=(GCGSettleOptionRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGSettleOptionRsp& default_instance();

  static inline const GCGSettleOptionRsp* internal_default_instance() {
    return reinterpret_cast<const GCGSettleOptionRsp*>(
               &_GCGSettleOptionRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    166;

  void Swap(GCGSettleOptionRsp* other);
  friend void swap(GCGSettleOptionRsp& a, GCGSettleOptionRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGSettleOptionRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGSettleOptionRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGSettleOptionRsp& from);
  void MergeFrom(const GCGSettleOptionRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGSettleOptionRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGSettleOption option = 13;
  void clear_option();
  static const int kOptionFieldNumber = 13;
  ::proto::GCGSettleOption option() const;
  void set_option(::proto::GCGSettleOption value);

  // int32 retcode = 14;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 14;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGSettleOptionRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int option_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGBasicDataNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGBasicDataNotify) */ {
 public:
  GCGBasicDataNotify();
  virtual ~GCGBasicDataNotify();

  GCGBasicDataNotify(const GCGBasicDataNotify& from);

  inline GCGBasicDataNotify& operator=(const GCGBasicDataNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGBasicDataNotify(GCGBasicDataNotify&& from) noexcept
    : GCGBasicDataNotify() {
    *this = ::std::move(from);
  }

  inline GCGBasicDataNotify& operator=(GCGBasicDataNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGBasicDataNotify& default_instance();

  static inline const GCGBasicDataNotify* internal_default_instance() {
    return reinterpret_cast<const GCGBasicDataNotify*>(
               &_GCGBasicDataNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    167;

  void Swap(GCGBasicDataNotify* other);
  friend void swap(GCGBasicDataNotify& a, GCGBasicDataNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGBasicDataNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGBasicDataNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGBasicDataNotify& from);
  void MergeFrom(const GCGBasicDataNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGBasicDataNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 level_reward_taken_list = 12;
  int level_reward_taken_list_size() const;
  void clear_level_reward_taken_list();
  static const int kLevelRewardTakenListFieldNumber = 12;
  ::google::protobuf::uint32 level_reward_taken_list(int index) const;
  void set_level_reward_taken_list(int index, ::google::protobuf::uint32 value);
  void add_level_reward_taken_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level_reward_taken_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level_reward_taken_list();

  // uint32 exp = 4;
  void clear_exp();
  static const int kExpFieldNumber = 4;
  ::google::protobuf::uint32 exp() const;
  void set_exp(::google::protobuf::uint32 value);

  // uint32 level = 9;
  void clear_level();
  static const int kLevelFieldNumber = 9;
  ::google::protobuf::uint32 level() const;
  void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGBasicDataNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_reward_taken_list_;
  mutable int _level_reward_taken_list_cached_byte_size_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 level_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTavernNpcInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTavernNpcInfo) */ {
 public:
  GCGTavernNpcInfo();
  virtual ~GCGTavernNpcInfo();

  GCGTavernNpcInfo(const GCGTavernNpcInfo& from);

  inline GCGTavernNpcInfo& operator=(const GCGTavernNpcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTavernNpcInfo(GCGTavernNpcInfo&& from) noexcept
    : GCGTavernNpcInfo() {
    *this = ::std::move(from);
  }

  inline GCGTavernNpcInfo& operator=(GCGTavernNpcInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTavernNpcInfo& default_instance();

  static inline const GCGTavernNpcInfo* internal_default_instance() {
    return reinterpret_cast<const GCGTavernNpcInfo*>(
               &_GCGTavernNpcInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    168;

  void Swap(GCGTavernNpcInfo* other);
  friend void swap(GCGTavernNpcInfo& a, GCGTavernNpcInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTavernNpcInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTavernNpcInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTavernNpcInfo& from);
  void MergeFrom(const GCGTavernNpcInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTavernNpcInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 level_id = 10;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 10;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // uint32 scene_point_id = 3;
  void clear_scene_point_id();
  static const int kScenePointIdFieldNumber = 3;
  ::google::protobuf::uint32 scene_point_id() const;
  void set_scene_point_id(::google::protobuf::uint32 value);

  // uint32 id = 6;
  void clear_id();
  static const int kIdFieldNumber = 6;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGTavernNpcInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 scene_point_id_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGTavernNpcInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGTavernNpcInfoNotify) */ {
 public:
  GCGTavernNpcInfoNotify();
  virtual ~GCGTavernNpcInfoNotify();

  GCGTavernNpcInfoNotify(const GCGTavernNpcInfoNotify& from);

  inline GCGTavernNpcInfoNotify& operator=(const GCGTavernNpcInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGTavernNpcInfoNotify(GCGTavernNpcInfoNotify&& from) noexcept
    : GCGTavernNpcInfoNotify() {
    *this = ::std::move(from);
  }

  inline GCGTavernNpcInfoNotify& operator=(GCGTavernNpcInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGTavernNpcInfoNotify& default_instance();

  static inline const GCGTavernNpcInfoNotify* internal_default_instance() {
    return reinterpret_cast<const GCGTavernNpcInfoNotify*>(
               &_GCGTavernNpcInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    169;

  void Swap(GCGTavernNpcInfoNotify* other);
  friend void swap(GCGTavernNpcInfoNotify& a, GCGTavernNpcInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGTavernNpcInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGTavernNpcInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGTavernNpcInfoNotify& from);
  void MergeFrom(const GCGTavernNpcInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGTavernNpcInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGTavernNpcInfo week_npc_list = 1;
  int week_npc_list_size() const;
  void clear_week_npc_list();
  static const int kWeekNpcListFieldNumber = 1;
  const ::proto::GCGTavernNpcInfo& week_npc_list(int index) const;
  ::proto::GCGTavernNpcInfo* mutable_week_npc_list(int index);
  ::proto::GCGTavernNpcInfo* add_week_npc_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >*
      mutable_week_npc_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >&
      week_npc_list() const;

  // repeated .proto.GCGTavernNpcInfo const_npc_list = 15;
  int const_npc_list_size() const;
  void clear_const_npc_list();
  static const int kConstNpcListFieldNumber = 15;
  const ::proto::GCGTavernNpcInfo& const_npc_list(int index) const;
  ::proto::GCGTavernNpcInfo* mutable_const_npc_list(int index);
  ::proto::GCGTavernNpcInfo* add_const_npc_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >*
      mutable_const_npc_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >&
      const_npc_list() const;

  // .proto.GCGTavernNpcInfo character_npc = 5;
  bool has_character_npc() const;
  void clear_character_npc();
  static const int kCharacterNpcFieldNumber = 5;
  const ::proto::GCGTavernNpcInfo& character_npc() const;
  ::proto::GCGTavernNpcInfo* mutable_character_npc();
  ::proto::GCGTavernNpcInfo* release_character_npc();
  void set_allocated_character_npc(::proto::GCGTavernNpcInfo* character_npc);

  // @@protoc_insertion_point(class_scope:proto.GCGTavernNpcInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo > week_npc_list_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo > const_npc_list_;
  ::proto::GCGTavernNpcInfo* character_npc_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGStartChallengeReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGStartChallengeReq) */ {
 public:
  GCGStartChallengeReq();
  virtual ~GCGStartChallengeReq();

  GCGStartChallengeReq(const GCGStartChallengeReq& from);

  inline GCGStartChallengeReq& operator=(const GCGStartChallengeReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGStartChallengeReq(GCGStartChallengeReq&& from) noexcept
    : GCGStartChallengeReq() {
    *this = ::std::move(from);
  }

  inline GCGStartChallengeReq& operator=(GCGStartChallengeReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGStartChallengeReq& default_instance();

  static inline const GCGStartChallengeReq* internal_default_instance() {
    return reinterpret_cast<const GCGStartChallengeReq*>(
               &_GCGStartChallengeReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    170;

  void Swap(GCGStartChallengeReq* other);
  friend void swap(GCGStartChallengeReq& a, GCGStartChallengeReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGStartChallengeReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGStartChallengeReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGStartChallengeReq& from);
  void MergeFrom(const GCGStartChallengeReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGStartChallengeReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 config_id = 13;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 13;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // .proto.GCGLevelType level_type = 5;
  void clear_level_type();
  static const int kLevelTypeFieldNumber = 5;
  ::proto::GCGLevelType level_type() const;
  void set_level_type(::proto::GCGLevelType value);

  // uint32 level_id = 12;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 12;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGStartChallengeReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 config_id_;
  int level_type_;
  ::google::protobuf::uint32 level_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGStartChallengeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGStartChallengeRsp) */ {
 public:
  GCGStartChallengeRsp();
  virtual ~GCGStartChallengeRsp();

  GCGStartChallengeRsp(const GCGStartChallengeRsp& from);

  inline GCGStartChallengeRsp& operator=(const GCGStartChallengeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGStartChallengeRsp(GCGStartChallengeRsp&& from) noexcept
    : GCGStartChallengeRsp() {
    *this = ::std::move(from);
  }

  inline GCGStartChallengeRsp& operator=(GCGStartChallengeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGStartChallengeRsp& default_instance();

  static inline const GCGStartChallengeRsp* internal_default_instance() {
    return reinterpret_cast<const GCGStartChallengeRsp*>(
               &_GCGStartChallengeRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    171;

  void Swap(GCGStartChallengeRsp* other);
  friend void swap(GCGStartChallengeRsp& a, GCGStartChallengeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGStartChallengeRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGStartChallengeRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGStartChallengeRsp& from);
  void MergeFrom(const GCGStartChallengeRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGStartChallengeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 level_id = 1;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 1;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // uint32 config_id = 6;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 6;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // .proto.GCGLevelType level_type = 12;
  void clear_level_type();
  static const int kLevelTypeFieldNumber = 12;
  ::proto::GCGLevelType level_type() const;
  void set_level_type(::proto::GCGLevelType value);

  // int32 retcode = 15;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 15;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGStartChallengeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::uint32 config_id_;
  int level_type_;
  ::google::protobuf::int32 retcode_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGWeekChallengeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGWeekChallengeInfo) */ {
 public:
  GCGWeekChallengeInfo();
  virtual ~GCGWeekChallengeInfo();

  GCGWeekChallengeInfo(const GCGWeekChallengeInfo& from);

  inline GCGWeekChallengeInfo& operator=(const GCGWeekChallengeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGWeekChallengeInfo(GCGWeekChallengeInfo&& from) noexcept
    : GCGWeekChallengeInfo() {
    *this = ::std::move(from);
  }

  inline GCGWeekChallengeInfo& operator=(GCGWeekChallengeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGWeekChallengeInfo& default_instance();

  static inline const GCGWeekChallengeInfo* internal_default_instance() {
    return reinterpret_cast<const GCGWeekChallengeInfo*>(
               &_GCGWeekChallengeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    172;

  void Swap(GCGWeekChallengeInfo* other);
  friend void swap(GCGWeekChallengeInfo& a, GCGWeekChallengeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGWeekChallengeInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGWeekChallengeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGWeekChallengeInfo& from);
  void MergeFrom(const GCGWeekChallengeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGWeekChallengeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 unlock_time = 1;
  void clear_unlock_time();
  static const int kUnlockTimeFieldNumber = 1;
  ::google::protobuf::uint32 unlock_time() const;
  void set_unlock_time(::google::protobuf::uint32 value);

  // uint32 npc_id = 4;
  void clear_npc_id();
  static const int kNpcIdFieldNumber = 4;
  ::google::protobuf::uint32 npc_id() const;
  void set_npc_id(::google::protobuf::uint32 value);

  // bool is_finished = 7;
  void clear_is_finished();
  static const int kIsFinishedFieldNumber = 7;
  bool is_finished() const;
  void set_is_finished(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGWeekChallengeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 unlock_time_;
  ::google::protobuf::uint32 npc_id_;
  bool is_finished_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGWeekChallengeInfoNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGWeekChallengeInfoNotify) */ {
 public:
  GCGWeekChallengeInfoNotify();
  virtual ~GCGWeekChallengeInfoNotify();

  GCGWeekChallengeInfoNotify(const GCGWeekChallengeInfoNotify& from);

  inline GCGWeekChallengeInfoNotify& operator=(const GCGWeekChallengeInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGWeekChallengeInfoNotify(GCGWeekChallengeInfoNotify&& from) noexcept
    : GCGWeekChallengeInfoNotify() {
    *this = ::std::move(from);
  }

  inline GCGWeekChallengeInfoNotify& operator=(GCGWeekChallengeInfoNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGWeekChallengeInfoNotify& default_instance();

  static inline const GCGWeekChallengeInfoNotify* internal_default_instance() {
    return reinterpret_cast<const GCGWeekChallengeInfoNotify*>(
               &_GCGWeekChallengeInfoNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    173;

  void Swap(GCGWeekChallengeInfoNotify* other);
  friend void swap(GCGWeekChallengeInfoNotify& a, GCGWeekChallengeInfoNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGWeekChallengeInfoNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGWeekChallengeInfoNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGWeekChallengeInfoNotify& from);
  void MergeFrom(const GCGWeekChallengeInfoNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGWeekChallengeInfoNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGWeekChallengeInfo challenge_info_list = 15;
  int challenge_info_list_size() const;
  void clear_challenge_info_list();
  static const int kChallengeInfoListFieldNumber = 15;
  const ::proto::GCGWeekChallengeInfo& challenge_info_list(int index) const;
  ::proto::GCGWeekChallengeInfo* mutable_challenge_info_list(int index);
  ::proto::GCGWeekChallengeInfo* add_challenge_info_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGWeekChallengeInfo >*
      mutable_challenge_info_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGWeekChallengeInfo >&
      challenge_info_list() const;

  // uint32 next_refresh_time = 7;
  void clear_next_refresh_time();
  static const int kNextRefreshTimeFieldNumber = 7;
  ::google::protobuf::uint32 next_refresh_time() const;
  void set_next_refresh_time(::google::protobuf::uint32 value);

  // bool is_notify_npc_change = 9;
  void clear_is_notify_npc_change();
  static const int kIsNotifyNpcChangeFieldNumber = 9;
  bool is_notify_npc_change() const;
  void set_is_notify_npc_change(bool value);

  // @@protoc_insertion_point(class_scope:proto.GCGWeekChallengeInfoNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGWeekChallengeInfo > challenge_info_list_;
  ::google::protobuf::uint32 next_refresh_time_;
  bool is_notify_npc_change_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGStartChallengeByCheckRewardReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGStartChallengeByCheckRewardReq) */ {
 public:
  GCGStartChallengeByCheckRewardReq();
  virtual ~GCGStartChallengeByCheckRewardReq();

  GCGStartChallengeByCheckRewardReq(const GCGStartChallengeByCheckRewardReq& from);

  inline GCGStartChallengeByCheckRewardReq& operator=(const GCGStartChallengeByCheckRewardReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGStartChallengeByCheckRewardReq(GCGStartChallengeByCheckRewardReq&& from) noexcept
    : GCGStartChallengeByCheckRewardReq() {
    *this = ::std::move(from);
  }

  inline GCGStartChallengeByCheckRewardReq& operator=(GCGStartChallengeByCheckRewardReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGStartChallengeByCheckRewardReq& default_instance();

  static inline const GCGStartChallengeByCheckRewardReq* internal_default_instance() {
    return reinterpret_cast<const GCGStartChallengeByCheckRewardReq*>(
               &_GCGStartChallengeByCheckRewardReq_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    174;

  void Swap(GCGStartChallengeByCheckRewardReq* other);
  friend void swap(GCGStartChallengeByCheckRewardReq& a, GCGStartChallengeByCheckRewardReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGStartChallengeByCheckRewardReq* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGStartChallengeByCheckRewardReq* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGStartChallengeByCheckRewardReq& from);
  void MergeFrom(const GCGStartChallengeByCheckRewardReq& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGStartChallengeByCheckRewardReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 config_id = 13;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 13;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // .proto.GCGLevelType level_type = 5;
  void clear_level_type();
  static const int kLevelTypeFieldNumber = 5;
  ::proto::GCGLevelType level_type() const;
  void set_level_type(::proto::GCGLevelType value);

  // uint32 level_id = 9;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 9;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGStartChallengeByCheckRewardReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 config_id_;
  int level_type_;
  ::google::protobuf::uint32 level_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGStartChallengeByCheckRewardRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGStartChallengeByCheckRewardRsp) */ {
 public:
  GCGStartChallengeByCheckRewardRsp();
  virtual ~GCGStartChallengeByCheckRewardRsp();

  GCGStartChallengeByCheckRewardRsp(const GCGStartChallengeByCheckRewardRsp& from);

  inline GCGStartChallengeByCheckRewardRsp& operator=(const GCGStartChallengeByCheckRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGStartChallengeByCheckRewardRsp(GCGStartChallengeByCheckRewardRsp&& from) noexcept
    : GCGStartChallengeByCheckRewardRsp() {
    *this = ::std::move(from);
  }

  inline GCGStartChallengeByCheckRewardRsp& operator=(GCGStartChallengeByCheckRewardRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGStartChallengeByCheckRewardRsp& default_instance();

  static inline const GCGStartChallengeByCheckRewardRsp* internal_default_instance() {
    return reinterpret_cast<const GCGStartChallengeByCheckRewardRsp*>(
               &_GCGStartChallengeByCheckRewardRsp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    175;

  void Swap(GCGStartChallengeByCheckRewardRsp* other);
  friend void swap(GCGStartChallengeByCheckRewardRsp& a, GCGStartChallengeByCheckRewardRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGStartChallengeByCheckRewardRsp* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGStartChallengeByCheckRewardRsp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGStartChallengeByCheckRewardRsp& from);
  void MergeFrom(const GCGStartChallengeByCheckRewardRsp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGStartChallengeByCheckRewardRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 exceeded_item_list = 1;
  int exceeded_item_list_size() const;
  void clear_exceeded_item_list();
  static const int kExceededItemListFieldNumber = 1;
  ::google::protobuf::uint32 exceeded_item_list(int index) const;
  void set_exceeded_item_list(int index, ::google::protobuf::uint32 value);
  void add_exceeded_item_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      exceeded_item_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_exceeded_item_list();

  // repeated uint32 exceeded_item_type_list = 14;
  int exceeded_item_type_list_size() const;
  void clear_exceeded_item_type_list();
  static const int kExceededItemTypeListFieldNumber = 14;
  ::google::protobuf::uint32 exceeded_item_type_list(int index) const;
  void set_exceeded_item_type_list(int index, ::google::protobuf::uint32 value);
  void add_exceeded_item_type_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      exceeded_item_type_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_exceeded_item_type_list();

  // uint32 level_id = 2;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 2;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // int32 retcode = 4;
  void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  ::google::protobuf::int32 retcode() const;
  void set_retcode(::google::protobuf::int32 value);

  // uint32 config_id = 10;
  void clear_config_id();
  static const int kConfigIdFieldNumber = 10;
  ::google::protobuf::uint32 config_id() const;
  void set_config_id(::google::protobuf::uint32 value);

  // .proto.GCGLevelType level_type = 11;
  void clear_level_type();
  static const int kLevelTypeFieldNumber = 11;
  ::proto::GCGLevelType level_type() const;
  void set_level_type(::proto::GCGLevelType value);

  // @@protoc_insertion_point(class_scope:proto.GCGStartChallengeByCheckRewardRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > exceeded_item_list_;
  mutable int _exceeded_item_list_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > exceeded_item_type_list_;
  mutable int _exceeded_item_type_list_cached_byte_size_;
  ::google::protobuf::uint32 level_id_;
  ::google::protobuf::int32 retcode_;
  ::google::protobuf::uint32 config_id_;
  int level_type_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGLevelData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGLevelData) */ {
 public:
  GCGLevelData();
  virtual ~GCGLevelData();

  GCGLevelData(const GCGLevelData& from);

  inline GCGLevelData& operator=(const GCGLevelData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGLevelData(GCGLevelData&& from) noexcept
    : GCGLevelData() {
    *this = ::std::move(from);
  }

  inline GCGLevelData& operator=(GCGLevelData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGLevelData& default_instance();

  static inline const GCGLevelData* internal_default_instance() {
    return reinterpret_cast<const GCGLevelData*>(
               &_GCGLevelData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    176;

  void Swap(GCGLevelData* other);
  friend void swap(GCGLevelData& a, GCGLevelData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGLevelData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGLevelData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGLevelData& from);
  void MergeFrom(const GCGLevelData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGLevelData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 finished_challenge_id_list = 10;
  int finished_challenge_id_list_size() const;
  void clear_finished_challenge_id_list();
  static const int kFinishedChallengeIdListFieldNumber = 10;
  ::google::protobuf::uint32 finished_challenge_id_list(int index) const;
  void set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value);
  void add_finished_challenge_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      finished_challenge_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_finished_challenge_id_list();

  // uint32 level_id = 9;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 9;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGLevelData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > finished_challenge_id_list_;
  mutable int _finished_challenge_id_list_cached_byte_size_;
  ::google::protobuf::uint32 level_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGBossChallengeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGBossChallengeData) */ {
 public:
  GCGBossChallengeData();
  virtual ~GCGBossChallengeData();

  GCGBossChallengeData(const GCGBossChallengeData& from);

  inline GCGBossChallengeData& operator=(const GCGBossChallengeData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGBossChallengeData(GCGBossChallengeData&& from) noexcept
    : GCGBossChallengeData() {
    *this = ::std::move(from);
  }

  inline GCGBossChallengeData& operator=(GCGBossChallengeData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGBossChallengeData& default_instance();

  static inline const GCGBossChallengeData* internal_default_instance() {
    return reinterpret_cast<const GCGBossChallengeData*>(
               &_GCGBossChallengeData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    177;

  void Swap(GCGBossChallengeData* other);
  friend void swap(GCGBossChallengeData& a, GCGBossChallengeData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGBossChallengeData* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGBossChallengeData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGBossChallengeData& from);
  void MergeFrom(const GCGBossChallengeData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGBossChallengeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 unlock_level_id_list = 14;
  int unlock_level_id_list_size() const;
  void clear_unlock_level_id_list();
  static const int kUnlockLevelIdListFieldNumber = 14;
  ::google::protobuf::uint32 unlock_level_id_list(int index) const;
  void set_unlock_level_id_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_level_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_level_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_level_id_list();

  // uint32 id = 9;
  void clear_id();
  static const int kIdFieldNumber = 9;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGBossChallengeData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_level_id_list_;
  mutable int _unlock_level_id_list_cached_byte_size_;
  ::google::protobuf::uint32 id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGLevelChallengeNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGLevelChallengeNotify) */ {
 public:
  GCGLevelChallengeNotify();
  virtual ~GCGLevelChallengeNotify();

  GCGLevelChallengeNotify(const GCGLevelChallengeNotify& from);

  inline GCGLevelChallengeNotify& operator=(const GCGLevelChallengeNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGLevelChallengeNotify(GCGLevelChallengeNotify&& from) noexcept
    : GCGLevelChallengeNotify() {
    *this = ::std::move(from);
  }

  inline GCGLevelChallengeNotify& operator=(GCGLevelChallengeNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGLevelChallengeNotify& default_instance();

  static inline const GCGLevelChallengeNotify* internal_default_instance() {
    return reinterpret_cast<const GCGLevelChallengeNotify*>(
               &_GCGLevelChallengeNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    178;

  void Swap(GCGLevelChallengeNotify* other);
  friend void swap(GCGLevelChallengeNotify& a, GCGLevelChallengeNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGLevelChallengeNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGLevelChallengeNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGLevelChallengeNotify& from);
  void MergeFrom(const GCGLevelChallengeNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGLevelChallengeNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.GCGBossChallengeData unlock_boss_challenge_list = 3;
  int unlock_boss_challenge_list_size() const;
  void clear_unlock_boss_challenge_list();
  static const int kUnlockBossChallengeListFieldNumber = 3;
  const ::proto::GCGBossChallengeData& unlock_boss_challenge_list(int index) const;
  ::proto::GCGBossChallengeData* mutable_unlock_boss_challenge_list(int index);
  ::proto::GCGBossChallengeData* add_unlock_boss_challenge_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGBossChallengeData >*
      mutable_unlock_boss_challenge_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGBossChallengeData >&
      unlock_boss_challenge_list() const;

  // repeated uint32 unlock_world_challenge_list = 8;
  int unlock_world_challenge_list_size() const;
  void clear_unlock_world_challenge_list();
  static const int kUnlockWorldChallengeListFieldNumber = 8;
  ::google::protobuf::uint32 unlock_world_challenge_list(int index) const;
  void set_unlock_world_challenge_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_world_challenge_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_world_challenge_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_world_challenge_list();

  // repeated .proto.GCGLevelData level_list = 10;
  int level_list_size() const;
  void clear_level_list();
  static const int kLevelListFieldNumber = 10;
  const ::proto::GCGLevelData& level_list(int index) const;
  ::proto::GCGLevelData* mutable_level_list(int index);
  ::proto::GCGLevelData* add_level_list();
  ::google::protobuf::RepeatedPtrField< ::proto::GCGLevelData >*
      mutable_level_list();
  const ::google::protobuf::RepeatedPtrField< ::proto::GCGLevelData >&
      level_list() const;

  // @@protoc_insertion_point(class_scope:proto.GCGLevelChallengeNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGBossChallengeData > unlock_boss_challenge_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_world_challenge_list_;
  mutable int _unlock_world_challenge_list_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::GCGLevelData > level_list_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGLevelChallengeFinishNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGLevelChallengeFinishNotify) */ {
 public:
  GCGLevelChallengeFinishNotify();
  virtual ~GCGLevelChallengeFinishNotify();

  GCGLevelChallengeFinishNotify(const GCGLevelChallengeFinishNotify& from);

  inline GCGLevelChallengeFinishNotify& operator=(const GCGLevelChallengeFinishNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGLevelChallengeFinishNotify(GCGLevelChallengeFinishNotify&& from) noexcept
    : GCGLevelChallengeFinishNotify() {
    *this = ::std::move(from);
  }

  inline GCGLevelChallengeFinishNotify& operator=(GCGLevelChallengeFinishNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGLevelChallengeFinishNotify& default_instance();

  static inline const GCGLevelChallengeFinishNotify* internal_default_instance() {
    return reinterpret_cast<const GCGLevelChallengeFinishNotify*>(
               &_GCGLevelChallengeFinishNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    179;

  void Swap(GCGLevelChallengeFinishNotify* other);
  friend void swap(GCGLevelChallengeFinishNotify& a, GCGLevelChallengeFinishNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGLevelChallengeFinishNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGLevelChallengeFinishNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGLevelChallengeFinishNotify& from);
  void MergeFrom(const GCGLevelChallengeFinishNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGLevelChallengeFinishNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 finished_challenge_id_list = 10;
  int finished_challenge_id_list_size() const;
  void clear_finished_challenge_id_list();
  static const int kFinishedChallengeIdListFieldNumber = 10;
  ::google::protobuf::uint32 finished_challenge_id_list(int index) const;
  void set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value);
  void add_finished_challenge_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      finished_challenge_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_finished_challenge_id_list();

  // uint32 level_id = 15;
  void clear_level_id();
  static const int kLevelIdFieldNumber = 15;
  ::google::protobuf::uint32 level_id() const;
  void set_level_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.GCGLevelChallengeFinishNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > finished_challenge_id_list_;
  mutable int _finished_challenge_id_list_cached_byte_size_;
  ::google::protobuf::uint32 level_id_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGWorldChallengeUnlockNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGWorldChallengeUnlockNotify) */ {
 public:
  GCGWorldChallengeUnlockNotify();
  virtual ~GCGWorldChallengeUnlockNotify();

  GCGWorldChallengeUnlockNotify(const GCGWorldChallengeUnlockNotify& from);

  inline GCGWorldChallengeUnlockNotify& operator=(const GCGWorldChallengeUnlockNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGWorldChallengeUnlockNotify(GCGWorldChallengeUnlockNotify&& from) noexcept
    : GCGWorldChallengeUnlockNotify() {
    *this = ::std::move(from);
  }

  inline GCGWorldChallengeUnlockNotify& operator=(GCGWorldChallengeUnlockNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGWorldChallengeUnlockNotify& default_instance();

  static inline const GCGWorldChallengeUnlockNotify* internal_default_instance() {
    return reinterpret_cast<const GCGWorldChallengeUnlockNotify*>(
               &_GCGWorldChallengeUnlockNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    180;

  void Swap(GCGWorldChallengeUnlockNotify* other);
  friend void swap(GCGWorldChallengeUnlockNotify& a, GCGWorldChallengeUnlockNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGWorldChallengeUnlockNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGWorldChallengeUnlockNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGWorldChallengeUnlockNotify& from);
  void MergeFrom(const GCGWorldChallengeUnlockNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGWorldChallengeUnlockNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 unlock_id_list = 8;
  int unlock_id_list_size() const;
  void clear_unlock_id_list();
  static const int kUnlockIdListFieldNumber = 8;
  ::google::protobuf::uint32 unlock_id_list(int index) const;
  void set_unlock_id_list(int index, ::google::protobuf::uint32 value);
  void add_unlock_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_id_list();

  // @@protoc_insertion_point(class_scope:proto.GCGWorldChallengeUnlockNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_id_list_;
  mutable int _unlock_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGBossChallengeUpdateNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGBossChallengeUpdateNotify) */ {
 public:
  GCGBossChallengeUpdateNotify();
  virtual ~GCGBossChallengeUpdateNotify();

  GCGBossChallengeUpdateNotify(const GCGBossChallengeUpdateNotify& from);

  inline GCGBossChallengeUpdateNotify& operator=(const GCGBossChallengeUpdateNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGBossChallengeUpdateNotify(GCGBossChallengeUpdateNotify&& from) noexcept
    : GCGBossChallengeUpdateNotify() {
    *this = ::std::move(from);
  }

  inline GCGBossChallengeUpdateNotify& operator=(GCGBossChallengeUpdateNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGBossChallengeUpdateNotify& default_instance();

  static inline const GCGBossChallengeUpdateNotify* internal_default_instance() {
    return reinterpret_cast<const GCGBossChallengeUpdateNotify*>(
               &_GCGBossChallengeUpdateNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    181;

  void Swap(GCGBossChallengeUpdateNotify* other);
  friend void swap(GCGBossChallengeUpdateNotify& a, GCGBossChallengeUpdateNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGBossChallengeUpdateNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGBossChallengeUpdateNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGBossChallengeUpdateNotify& from);
  void MergeFrom(const GCGBossChallengeUpdateNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGBossChallengeUpdateNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.GCGBossChallengeData boss_challenge = 11;
  bool has_boss_challenge() const;
  void clear_boss_challenge();
  static const int kBossChallengeFieldNumber = 11;
  const ::proto::GCGBossChallengeData& boss_challenge() const;
  ::proto::GCGBossChallengeData* mutable_boss_challenge();
  ::proto::GCGBossChallengeData* release_boss_challenge();
  void set_allocated_boss_challenge(::proto::GCGBossChallengeData* boss_challenge);

  // @@protoc_insertion_point(class_scope:proto.GCGBossChallengeUpdateNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::proto::GCGBossChallengeData* boss_challenge_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GCGLevelChallengeDeleteNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.GCGLevelChallengeDeleteNotify) */ {
 public:
  GCGLevelChallengeDeleteNotify();
  virtual ~GCGLevelChallengeDeleteNotify();

  GCGLevelChallengeDeleteNotify(const GCGLevelChallengeDeleteNotify& from);

  inline GCGLevelChallengeDeleteNotify& operator=(const GCGLevelChallengeDeleteNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GCGLevelChallengeDeleteNotify(GCGLevelChallengeDeleteNotify&& from) noexcept
    : GCGLevelChallengeDeleteNotify() {
    *this = ::std::move(from);
  }

  inline GCGLevelChallengeDeleteNotify& operator=(GCGLevelChallengeDeleteNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GCGLevelChallengeDeleteNotify& default_instance();

  static inline const GCGLevelChallengeDeleteNotify* internal_default_instance() {
    return reinterpret_cast<const GCGLevelChallengeDeleteNotify*>(
               &_GCGLevelChallengeDeleteNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    182;

  void Swap(GCGLevelChallengeDeleteNotify* other);
  friend void swap(GCGLevelChallengeDeleteNotify& a, GCGLevelChallengeDeleteNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GCGLevelChallengeDeleteNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  GCGLevelChallengeDeleteNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GCGLevelChallengeDeleteNotify& from);
  void MergeFrom(const GCGLevelChallengeDeleteNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GCGLevelChallengeDeleteNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 level_id_list = 13;
  int level_id_list_size() const;
  void clear_level_id_list();
  static const int kLevelIdListFieldNumber = 13;
  ::google::protobuf::uint32 level_id_list(int index) const;
  void set_level_id_list(int index, ::google::protobuf::uint32 value);
  void add_level_id_list(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level_id_list() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level_id_list();

  // @@protoc_insertion_point(class_scope:proto.GCGLevelChallengeDeleteNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_id_list_;
  mutable int _level_id_list_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_cmd_2fcmd_5fgcg_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GCGAttackCostInfo

// uint32 skill_id = 8;
inline void GCGAttackCostInfo::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGAttackCostInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGAttackCostInfo.skill_id)
  return skill_id_;
}
inline void GCGAttackCostInfo::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGAttackCostInfo.skill_id)
}

// map<uint32, uint32> cost_map = 3;
inline int GCGAttackCostInfo::cost_map_size() const {
  return cost_map_.size();
}
inline void GCGAttackCostInfo::clear_cost_map() {
  cost_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGAttackCostInfo::cost_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGAttackCostInfo.cost_map)
  return cost_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGAttackCostInfo::mutable_cost_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGAttackCostInfo.cost_map)
  return cost_map_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGPlayCardCostInfo

// map<uint32, uint32> cost_map = 14;
inline int GCGPlayCardCostInfo::cost_map_size() const {
  return cost_map_.size();
}
inline void GCGPlayCardCostInfo::clear_cost_map() {
  cost_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGPlayCardCostInfo::cost_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPlayCardCostInfo.cost_map)
  return cost_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGPlayCardCostInfo::mutable_cost_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPlayCardCostInfo.cost_map)
  return cost_map_.MutableMap();
}

// uint32 card_id = 1;
inline void GCGPlayCardCostInfo::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayCardCostInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayCardCostInfo.card_id)
  return card_id_;
}
inline void GCGPlayCardCostInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayCardCostInfo.card_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGSelectOnStageCostInfo

// map<uint32, uint32> cost_map = 8;
inline int GCGSelectOnStageCostInfo::cost_map_size() const {
  return cost_map_.size();
}
inline void GCGSelectOnStageCostInfo::clear_cost_map() {
  cost_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGSelectOnStageCostInfo::cost_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSelectOnStageCostInfo.cost_map)
  return cost_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGSelectOnStageCostInfo::mutable_cost_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSelectOnStageCostInfo.cost_map)
  return cost_map_.MutableMap();
}

// uint32 card_guid = 9;
inline void GCGSelectOnStageCostInfo::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSelectOnStageCostInfo::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSelectOnStageCostInfo.card_guid)
  return card_guid_;
}
inline void GCGSelectOnStageCostInfo::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSelectOnStageCostInfo.card_guid)
}

// -------------------------------------------------------------------

// GCGCostReviseInfo

// bool is_can_attack = 4;
inline void GCGCostReviseInfo::clear_is_can_attack() {
  is_can_attack_ = false;
}
inline bool GCGCostReviseInfo::is_can_attack() const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.is_can_attack)
  return is_can_attack_;
}
inline void GCGCostReviseInfo::set_is_can_attack(bool value) {
  
  is_can_attack_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCostReviseInfo.is_can_attack)
}

// repeated uint32 can_use_hand_card_id_list = 11;
inline int GCGCostReviseInfo::can_use_hand_card_id_list_size() const {
  return can_use_hand_card_id_list_.size();
}
inline void GCGCostReviseInfo::clear_can_use_hand_card_id_list() {
  can_use_hand_card_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGCostReviseInfo::can_use_hand_card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
  return can_use_hand_card_id_list_.Get(index);
}
inline void GCGCostReviseInfo::set_can_use_hand_card_id_list(int index, ::google::protobuf::uint32 value) {
  can_use_hand_card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
}
inline void GCGCostReviseInfo::add_can_use_hand_card_id_list(::google::protobuf::uint32 value) {
  can_use_hand_card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGCostReviseInfo::can_use_hand_card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
  return can_use_hand_card_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGCostReviseInfo::mutable_can_use_hand_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.can_use_hand_card_id_list)
  return &can_use_hand_card_id_list_;
}

// repeated .proto.GCGPlayCardCostInfo play_card_cost_list = 5;
inline int GCGCostReviseInfo::play_card_cost_list_size() const {
  return play_card_cost_list_.size();
}
inline void GCGCostReviseInfo::clear_play_card_cost_list() {
  play_card_cost_list_.Clear();
}
inline const ::proto::GCGPlayCardCostInfo& GCGCostReviseInfo::play_card_cost_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_.Get(index);
}
inline ::proto::GCGPlayCardCostInfo* GCGCostReviseInfo::mutable_play_card_cost_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_.Mutable(index);
}
inline ::proto::GCGPlayCardCostInfo* GCGCostReviseInfo::add_play_card_cost_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayCardCostInfo >*
GCGCostReviseInfo::mutable_play_card_cost_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.play_card_cost_list)
  return &play_card_cost_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayCardCostInfo >&
GCGCostReviseInfo::play_card_cost_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.play_card_cost_list)
  return play_card_cost_list_;
}

// repeated .proto.GCGSelectOnStageCostInfo select_on_stage_cost_list = 10;
inline int GCGCostReviseInfo::select_on_stage_cost_list_size() const {
  return select_on_stage_cost_list_.size();
}
inline void GCGCostReviseInfo::clear_select_on_stage_cost_list() {
  select_on_stage_cost_list_.Clear();
}
inline const ::proto::GCGSelectOnStageCostInfo& GCGCostReviseInfo::select_on_stage_cost_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_.Get(index);
}
inline ::proto::GCGSelectOnStageCostInfo* GCGCostReviseInfo::mutable_select_on_stage_cost_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_.Mutable(index);
}
inline ::proto::GCGSelectOnStageCostInfo* GCGCostReviseInfo::add_select_on_stage_cost_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSelectOnStageCostInfo >*
GCGCostReviseInfo::mutable_select_on_stage_cost_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return &select_on_stage_cost_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSelectOnStageCostInfo >&
GCGCostReviseInfo::select_on_stage_cost_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.select_on_stage_cost_list)
  return select_on_stage_cost_list_;
}

// repeated .proto.GCGAttackCostInfo attack_cost_list = 2;
inline int GCGCostReviseInfo::attack_cost_list_size() const {
  return attack_cost_list_.size();
}
inline void GCGCostReviseInfo::clear_attack_cost_list() {
  attack_cost_list_.Clear();
}
inline const ::proto::GCGAttackCostInfo& GCGCostReviseInfo::attack_cost_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_.Get(index);
}
inline ::proto::GCGAttackCostInfo* GCGCostReviseInfo::mutable_attack_cost_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_.Mutable(index);
}
inline ::proto::GCGAttackCostInfo* GCGCostReviseInfo::add_attack_cost_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGAttackCostInfo >*
GCGCostReviseInfo::mutable_attack_cost_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCostReviseInfo.attack_cost_list)
  return &attack_cost_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGAttackCostInfo >&
GCGCostReviseInfo::attack_cost_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCostReviseInfo.attack_cost_list)
  return attack_cost_list_;
}

// -------------------------------------------------------------------

// GCGMsgTokenChange

// uint32 before = 13;
inline void GCGMsgTokenChange::clear_before() {
  before_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgTokenChange::before() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.before)
  return before_;
}
inline void GCGMsgTokenChange::set_before(::google::protobuf::uint32 value) {
  
  before_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.before)
}

// uint32 token_type = 4;
inline void GCGMsgTokenChange::clear_token_type() {
  token_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgTokenChange::token_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.token_type)
  return token_type_;
}
inline void GCGMsgTokenChange::set_token_type(::google::protobuf::uint32 value) {
  
  token_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.token_type)
}

// uint32 card_guid = 2;
inline void GCGMsgTokenChange::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgTokenChange::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.card_guid)
  return card_guid_;
}
inline void GCGMsgTokenChange::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.card_guid)
}

// uint32 after = 11;
inline void GCGMsgTokenChange::clear_after() {
  after_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgTokenChange::after() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.after)
  return after_;
}
inline void GCGMsgTokenChange::set_after(::google::protobuf::uint32 value) {
  
  after_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.after)
}

// .proto.GCGReason reason = 7;
inline void GCGMsgTokenChange::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgTokenChange::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgTokenChange.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgTokenChange::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgTokenChange.reason)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGMsgPhaseChange

// map<uint32, uint32> allow_controller_map = 15;
inline int GCGMsgPhaseChange::allow_controller_map_size() const {
  return allow_controller_map_.size();
}
inline void GCGMsgPhaseChange::clear_allow_controller_map() {
  allow_controller_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGMsgPhaseChange::allow_controller_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgPhaseChange.allow_controller_map)
  return allow_controller_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGMsgPhaseChange::mutable_allow_controller_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgPhaseChange.allow_controller_map)
  return allow_controller_map_.MutableMap();
}

// .proto.GCGPhaseType before_phase = 12;
inline void GCGMsgPhaseChange::clear_before_phase() {
  before_phase_ = 0;
}
inline ::proto::GCGPhaseType GCGMsgPhaseChange::before_phase() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPhaseChange.before_phase)
  return static_cast< ::proto::GCGPhaseType >(before_phase_);
}
inline void GCGMsgPhaseChange::set_before_phase(::proto::GCGPhaseType value) {
  
  before_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPhaseChange.before_phase)
}

// .proto.GCGPhaseType after_phase = 5;
inline void GCGMsgPhaseChange::clear_after_phase() {
  after_phase_ = 0;
}
inline ::proto::GCGPhaseType GCGMsgPhaseChange::after_phase() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPhaseChange.after_phase)
  return static_cast< ::proto::GCGPhaseType >(after_phase_);
}
inline void GCGMsgPhaseChange::set_after_phase(::proto::GCGPhaseType value) {
  
  after_phase_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPhaseChange.after_phase)
}

// -------------------------------------------------------------------

// GCGMsgAddCards

// uint32 pos = 11;
inline void GCGMsgAddCards::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgAddCards::pos() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.pos)
  return pos_;
}
inline void GCGMsgAddCards::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.pos)
}

// .proto.GCGZoneType zone = 2;
inline void GCGMsgAddCards::clear_zone() {
  zone_ = 0;
}
inline ::proto::GCGZoneType GCGMsgAddCards::zone() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.zone)
  return static_cast< ::proto::GCGZoneType >(zone_);
}
inline void GCGMsgAddCards::set_zone(::proto::GCGZoneType value) {
  
  zone_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.zone)
}

// .proto.GCGReason reason = 15;
inline void GCGMsgAddCards::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgAddCards::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgAddCards::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.reason)
}

// uint32 controller_id = 13;
inline void GCGMsgAddCards::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgAddCards::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.controller_id)
  return controller_id_;
}
inline void GCGMsgAddCards::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.controller_id)
}

// repeated uint32 card_guid_list = 14;
inline int GCGMsgAddCards::card_guid_list_size() const {
  return card_guid_list_.size();
}
inline void GCGMsgAddCards::clear_card_guid_list() {
  card_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgAddCards::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddCards.card_guid_list)
  return card_guid_list_.Get(index);
}
inline void GCGMsgAddCards::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddCards.card_guid_list)
}
inline void GCGMsgAddCards::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgAddCards.card_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgAddCards::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgAddCards.card_guid_list)
  return card_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgAddCards::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgAddCards.card_guid_list)
  return &card_guid_list_;
}

// -------------------------------------------------------------------

// GCGMsgRemoveCards

// uint32 controller_id = 15;
inline void GCGMsgRemoveCards::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgRemoveCards::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.controller_id)
  return controller_id_;
}
inline void GCGMsgRemoveCards::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.controller_id)
}

// .proto.GCGZoneType zone = 10;
inline void GCGMsgRemoveCards::clear_zone() {
  zone_ = 0;
}
inline ::proto::GCGZoneType GCGMsgRemoveCards::zone() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.zone)
  return static_cast< ::proto::GCGZoneType >(zone_);
}
inline void GCGMsgRemoveCards::set_zone(::proto::GCGZoneType value) {
  
  zone_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.zone)
}

// .proto.GCGReason reason = 5;
inline void GCGMsgRemoveCards::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgRemoveCards::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgRemoveCards::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.reason)
}

// repeated uint32 card_guid_list = 1;
inline int GCGMsgRemoveCards::card_guid_list_size() const {
  return card_guid_list_.size();
}
inline void GCGMsgRemoveCards::clear_card_guid_list() {
  card_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgRemoveCards::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgRemoveCards.card_guid_list)
  return card_guid_list_.Get(index);
}
inline void GCGMsgRemoveCards::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgRemoveCards.card_guid_list)
}
inline void GCGMsgRemoveCards::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgRemoveCards.card_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgRemoveCards::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgRemoveCards.card_guid_list)
  return card_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgRemoveCards::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgRemoveCards.card_guid_list)
  return &card_guid_list_;
}

// -------------------------------------------------------------------

// GCGMsgMoveCard

// uint32 controller_id = 14;
inline void GCGMsgMoveCard::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgMoveCard::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.controller_id)
  return controller_id_;
}
inline void GCGMsgMoveCard::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.controller_id)
}

// .proto.GCGZoneType to = 5;
inline void GCGMsgMoveCard::clear_to() {
  to_ = 0;
}
inline ::proto::GCGZoneType GCGMsgMoveCard::to() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.to)
  return static_cast< ::proto::GCGZoneType >(to_);
}
inline void GCGMsgMoveCard::set_to(::proto::GCGZoneType value) {
  
  to_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.to)
}

// .proto.GCGZoneType from = 12;
inline void GCGMsgMoveCard::clear_from() {
  from_ = 0;
}
inline ::proto::GCGZoneType GCGMsgMoveCard::from() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.from)
  return static_cast< ::proto::GCGZoneType >(from_);
}
inline void GCGMsgMoveCard::set_from(::proto::GCGZoneType value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.from)
}

// repeated uint32 card_guid_list = 8;
inline int GCGMsgMoveCard::card_guid_list_size() const {
  return card_guid_list_.size();
}
inline void GCGMsgMoveCard::clear_card_guid_list() {
  card_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgMoveCard::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.card_guid_list)
  return card_guid_list_.Get(index);
}
inline void GCGMsgMoveCard::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.card_guid_list)
}
inline void GCGMsgMoveCard::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgMoveCard.card_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgMoveCard::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgMoveCard.card_guid_list)
  return card_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgMoveCard::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgMoveCard.card_guid_list)
  return &card_guid_list_;
}

// .proto.GCGReason reason = 6;
inline void GCGMsgMoveCard::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgMoveCard::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgMoveCard::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.reason)
}

// repeated uint32 fail_guid_list = 11;
inline int GCGMsgMoveCard::fail_guid_list_size() const {
  return fail_guid_list_.size();
}
inline void GCGMsgMoveCard::clear_fail_guid_list() {
  fail_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgMoveCard::fail_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgMoveCard.fail_guid_list)
  return fail_guid_list_.Get(index);
}
inline void GCGMsgMoveCard::set_fail_guid_list(int index, ::google::protobuf::uint32 value) {
  fail_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgMoveCard.fail_guid_list)
}
inline void GCGMsgMoveCard::add_fail_guid_list(::google::protobuf::uint32 value) {
  fail_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgMoveCard.fail_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgMoveCard::fail_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgMoveCard.fail_guid_list)
  return fail_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgMoveCard::mutable_fail_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgMoveCard.fail_guid_list)
  return &fail_guid_list_;
}

// -------------------------------------------------------------------

// GCGMsgSelectOnStage

// uint32 controller_id = 6;
inline void GCGMsgSelectOnStage::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSelectOnStage::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStage.controller_id)
  return controller_id_;
}
inline void GCGMsgSelectOnStage::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStage.controller_id)
}

// .proto.GCGReason reason = 10;
inline void GCGMsgSelectOnStage::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgSelectOnStage::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStage.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgSelectOnStage::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStage.reason)
}

// uint32 card_guid = 4;
inline void GCGMsgSelectOnStage::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSelectOnStage::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStage.card_guid)
  return card_guid_;
}
inline void GCGMsgSelectOnStage::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStage.card_guid)
}

// -------------------------------------------------------------------

// GCGMsgSelectOnStageByEffect

// uint32 skill_id = 12;
inline void GCGMsgSelectOnStageByEffect::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSelectOnStageByEffect::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStageByEffect.skill_id)
  return skill_id_;
}
inline void GCGMsgSelectOnStageByEffect::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStageByEffect.skill_id)
}

// uint32 controller_id = 15;
inline void GCGMsgSelectOnStageByEffect::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSelectOnStageByEffect::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStageByEffect.controller_id)
  return controller_id_;
}
inline void GCGMsgSelectOnStageByEffect::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStageByEffect.controller_id)
}

// uint32 card_guid = 1;
inline void GCGMsgSelectOnStageByEffect::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSelectOnStageByEffect::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSelectOnStageByEffect.card_guid)
  return card_guid_;
}
inline void GCGMsgSelectOnStageByEffect::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSelectOnStageByEffect.card_guid)
}

// -------------------------------------------------------------------

// GCGMsgDiceRoll

// repeated .proto.GCGDiceSideType dice_side_list = 10;
inline int GCGMsgDiceRoll::dice_side_list_size() const {
  return dice_side_list_.size();
}
inline void GCGMsgDiceRoll::clear_dice_side_list() {
  dice_side_list_.Clear();
}
inline ::proto::GCGDiceSideType GCGMsgDiceRoll::dice_side_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceRoll.dice_side_list)
  return static_cast< ::proto::GCGDiceSideType >(dice_side_list_.Get(index));
}
inline void GCGMsgDiceRoll::set_dice_side_list(int index, ::proto::GCGDiceSideType value) {
  dice_side_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceRoll.dice_side_list)
}
inline void GCGMsgDiceRoll::add_dice_side_list(::proto::GCGDiceSideType value) {
  dice_side_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgDiceRoll.dice_side_list)
}
inline const ::google::protobuf::RepeatedField<int>&
GCGMsgDiceRoll::dice_side_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgDiceRoll.dice_side_list)
  return dice_side_list_;
}
inline ::google::protobuf::RepeatedField<int>*
GCGMsgDiceRoll::mutable_dice_side_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgDiceRoll.dice_side_list)
  return &dice_side_list_;
}

// uint32 dice_num = 15;
inline void GCGMsgDiceRoll::clear_dice_num() {
  dice_num_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgDiceRoll::dice_num() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceRoll.dice_num)
  return dice_num_;
}
inline void GCGMsgDiceRoll::set_dice_num(::google::protobuf::uint32 value) {
  
  dice_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceRoll.dice_num)
}

// uint32 controller_id = 5;
inline void GCGMsgDiceRoll::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgDiceRoll::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceRoll.controller_id)
  return controller_id_;
}
inline void GCGMsgDiceRoll::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceRoll.controller_id)
}

// -------------------------------------------------------------------

// GCGMsgDiceReroll

// uint32 controller_id = 2;
inline void GCGMsgDiceReroll::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgDiceReroll::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceReroll.controller_id)
  return controller_id_;
}
inline void GCGMsgDiceReroll::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceReroll.controller_id)
}

// repeated uint32 select_dice_index_list = 1;
inline int GCGMsgDiceReroll::select_dice_index_list_size() const {
  return select_dice_index_list_.size();
}
inline void GCGMsgDiceReroll::clear_select_dice_index_list() {
  select_dice_index_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgDiceReroll::select_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceReroll.select_dice_index_list)
  return select_dice_index_list_.Get(index);
}
inline void GCGMsgDiceReroll::set_select_dice_index_list(int index, ::google::protobuf::uint32 value) {
  select_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceReroll.select_dice_index_list)
}
inline void GCGMsgDiceReroll::add_select_dice_index_list(::google::protobuf::uint32 value) {
  select_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgDiceReroll.select_dice_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgDiceReroll::select_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgDiceReroll.select_dice_index_list)
  return select_dice_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgDiceReroll::mutable_select_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgDiceReroll.select_dice_index_list)
  return &select_dice_index_list_;
}

// repeated .proto.GCGDiceSideType dice_side_list = 6;
inline int GCGMsgDiceReroll::dice_side_list_size() const {
  return dice_side_list_.size();
}
inline void GCGMsgDiceReroll::clear_dice_side_list() {
  dice_side_list_.Clear();
}
inline ::proto::GCGDiceSideType GCGMsgDiceReroll::dice_side_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDiceReroll.dice_side_list)
  return static_cast< ::proto::GCGDiceSideType >(dice_side_list_.Get(index));
}
inline void GCGMsgDiceReroll::set_dice_side_list(int index, ::proto::GCGDiceSideType value) {
  dice_side_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgDiceReroll.dice_side_list)
}
inline void GCGMsgDiceReroll::add_dice_side_list(::proto::GCGDiceSideType value) {
  dice_side_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgDiceReroll.dice_side_list)
}
inline const ::google::protobuf::RepeatedField<int>&
GCGMsgDiceReroll::dice_side_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgDiceReroll.dice_side_list)
  return dice_side_list_;
}
inline ::google::protobuf::RepeatedField<int>*
GCGMsgDiceReroll::mutable_dice_side_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgDiceReroll.dice_side_list)
  return &dice_side_list_;
}

// -------------------------------------------------------------------

// GCGMsgPass

// uint32 controller_id = 14;
inline void GCGMsgPass::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgPass::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPass.controller_id)
  return controller_id_;
}
inline void GCGMsgPass::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPass.controller_id)
}

// -------------------------------------------------------------------

// GCGMsgCharDie

// uint32 controller_id = 5;
inline void GCGMsgCharDie::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgCharDie::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCharDie.controller_id)
  return controller_id_;
}
inline void GCGMsgCharDie::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCharDie.controller_id)
}

// uint32 card_guid = 11;
inline void GCGMsgCharDie::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgCharDie::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCharDie.card_guid)
  return card_guid_;
}
inline void GCGMsgCharDie::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCharDie.card_guid)
}

// -------------------------------------------------------------------

// GCGMsgUseSkill

// uint32 skill_id = 9;
inline void GCGMsgUseSkill::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgUseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkill.skill_id)
  return skill_id_;
}
inline void GCGMsgUseSkill::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkill.skill_id)
}

// uint32 card_guid = 6;
inline void GCGMsgUseSkill::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgUseSkill::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkill.card_guid)
  return card_guid_;
}
inline void GCGMsgUseSkill::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkill.card_guid)
}

// -------------------------------------------------------------------

// GCGMsgUseSkillEnd

// uint32 card_guid = 11;
inline void GCGMsgUseSkillEnd::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgUseSkillEnd::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkillEnd.card_guid)
  return card_guid_;
}
inline void GCGMsgUseSkillEnd::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkillEnd.card_guid)
}

// uint32 skill_id = 12;
inline void GCGMsgUseSkillEnd::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgUseSkillEnd::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgUseSkillEnd.skill_id)
  return skill_id_;
}
inline void GCGMsgUseSkillEnd::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgUseSkillEnd.skill_id)
}

// -------------------------------------------------------------------

// GCGDamageDetail

// uint32 skill_id = 10;
inline void GCGDamageDetail::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDamageDetail::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDamageDetail.skill_id)
  return skill_id_;
}
inline void GCGDamageDetail::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDamageDetail.skill_id)
}

// uint32 card_guid = 7;
inline void GCGDamageDetail::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGDamageDetail::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDamageDetail.card_guid)
  return card_guid_;
}
inline void GCGDamageDetail::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDamageDetail.card_guid)
}

// -------------------------------------------------------------------

// GCGMsgSkillResult

// uint32 skill_id = 12;
inline void GCGMsgSkillResult::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.skill_id)
  return skill_id_;
}
inline void GCGMsgSkillResult::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.skill_id)
}

// uint32 last_hp = 14;
inline void GCGMsgSkillResult::clear_last_hp() {
  last_hp_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::last_hp() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.last_hp)
  return last_hp_;
}
inline void GCGMsgSkillResult::set_last_hp(::google::protobuf::uint32 value) {
  
  last_hp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.last_hp)
}

// repeated .proto.GCGDamageDetail detail_list = 2;
inline int GCGMsgSkillResult::detail_list_size() const {
  return detail_list_.size();
}
inline void GCGMsgSkillResult::clear_detail_list() {
  detail_list_.Clear();
}
inline const ::proto::GCGDamageDetail& GCGMsgSkillResult::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.detail_list)
  return detail_list_.Get(index);
}
inline ::proto::GCGDamageDetail* GCGMsgSkillResult::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgSkillResult.detail_list)
  return detail_list_.Mutable(index);
}
inline ::proto::GCGDamageDetail* GCGMsgSkillResult::add_detail_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMsgSkillResult.detail_list)
  return detail_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >*
GCGMsgSkillResult::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgSkillResult.detail_list)
  return &detail_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >&
GCGMsgSkillResult::detail_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgSkillResult.detail_list)
  return detail_list_;
}

// uint32 target_card_guid = 7;
inline void GCGMsgSkillResult::clear_target_card_guid() {
  target_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::target_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.target_card_guid)
  return target_card_guid_;
}
inline void GCGMsgSkillResult::set_target_card_guid(::google::protobuf::uint32 value) {
  
  target_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.target_card_guid)
}

// uint32 effect_element = 5;
inline void GCGMsgSkillResult::clear_effect_element() {
  effect_element_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::effect_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.effect_element)
  return effect_element_;
}
inline void GCGMsgSkillResult::set_effect_element(::google::protobuf::uint32 value) {
  
  effect_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.effect_element)
}

// uint32 from_result_seq = 15;
inline void GCGMsgSkillResult::clear_from_result_seq() {
  from_result_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::from_result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.from_result_seq)
  return from_result_seq_;
}
inline void GCGMsgSkillResult::set_from_result_seq(::google::protobuf::uint32 value) {
  
  from_result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.from_result_seq)
}

// uint32 damage = 6;
inline void GCGMsgSkillResult::clear_damage() {
  damage_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::damage() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.damage)
  return damage_;
}
inline void GCGMsgSkillResult::set_damage(::google::protobuf::uint32 value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.damage)
}

// uint32 result_seq = 4;
inline void GCGMsgSkillResult::clear_result_seq() {
  result_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.result_seq)
  return result_seq_;
}
inline void GCGMsgSkillResult::set_result_seq(::google::protobuf::uint32 value) {
  
  result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.result_seq)
}

// uint32 src_card_guid = 8;
inline void GCGMsgSkillResult::clear_src_card_guid() {
  src_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgSkillResult::src_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgSkillResult.src_card_guid)
  return src_card_guid_;
}
inline void GCGMsgSkillResult::set_src_card_guid(::google::protobuf::uint32 value) {
  
  src_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgSkillResult.src_card_guid)
}

// -------------------------------------------------------------------

// GCGLimitsInfo

// uint32 limit_type = 7;
inline void GCGLimitsInfo::clear_limit_type() {
  limit_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGLimitsInfo::limit_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGLimitsInfo.limit_type)
  return limit_type_;
}
inline void GCGLimitsInfo::set_limit_type(::google::protobuf::uint32 value) {
  
  limit_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLimitsInfo.limit_type)
}

// uint32 limit_value = 1;
inline void GCGLimitsInfo::clear_limit_value() {
  limit_value_ = 0u;
}
inline ::google::protobuf::uint32 GCGLimitsInfo::limit_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGLimitsInfo.limit_value)
  return limit_value_;
}
inline void GCGLimitsInfo::set_limit_value(::google::protobuf::uint32 value) {
  
  limit_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLimitsInfo.limit_value)
}

// -------------------------------------------------------------------

// GCGSkillLimitsInfo

// uint32 skill_id = 5;
inline void GCGSkillLimitsInfo::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillLimitsInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillLimitsInfo.skill_id)
  return skill_id_;
}
inline void GCGSkillLimitsInfo::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillLimitsInfo.skill_id)
}

// repeated .proto.GCGLimitsInfo limits_list = 15;
inline int GCGSkillLimitsInfo::limits_list_size() const {
  return limits_list_.size();
}
inline void GCGSkillLimitsInfo::clear_limits_list() {
  limits_list_.Clear();
}
inline const ::proto::GCGLimitsInfo& GCGSkillLimitsInfo::limits_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_.Get(index);
}
inline ::proto::GCGLimitsInfo* GCGSkillLimitsInfo::mutable_limits_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_.Mutable(index);
}
inline ::proto::GCGLimitsInfo* GCGSkillLimitsInfo::add_limits_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGLimitsInfo >*
GCGSkillLimitsInfo::mutable_limits_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillLimitsInfo.limits_list)
  return &limits_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGLimitsInfo >&
GCGSkillLimitsInfo::limits_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillLimitsInfo.limits_list)
  return limits_list_;
}

// -------------------------------------------------------------------

// GCGCardSkillLimitsInfo

// repeated .proto.GCGSkillLimitsInfo skill_limits_list = 12;
inline int GCGCardSkillLimitsInfo::skill_limits_list_size() const {
  return skill_limits_list_.size();
}
inline void GCGCardSkillLimitsInfo::clear_skill_limits_list() {
  skill_limits_list_.Clear();
}
inline const ::proto::GCGSkillLimitsInfo& GCGCardSkillLimitsInfo::skill_limits_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_.Get(index);
}
inline ::proto::GCGSkillLimitsInfo* GCGCardSkillLimitsInfo::mutable_skill_limits_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_.Mutable(index);
}
inline ::proto::GCGSkillLimitsInfo* GCGCardSkillLimitsInfo::add_skill_limits_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >*
GCGCardSkillLimitsInfo::mutable_skill_limits_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return &skill_limits_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >&
GCGCardSkillLimitsInfo::skill_limits_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCardSkillLimitsInfo.skill_limits_list)
  return skill_limits_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGMsgSkillLimitsChange

// map<uint32, .proto.GCGCardSkillLimitsInfo> card_limits_change_map = 15;
inline int GCGMsgSkillLimitsChange::card_limits_change_map_size() const {
  return card_limits_change_map_.size();
}
inline void GCGMsgSkillLimitsChange::clear_card_limits_change_map() {
  card_limits_change_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >&
GCGMsgSkillLimitsChange::card_limits_change_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgSkillLimitsChange.card_limits_change_map)
  return card_limits_change_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGCardSkillLimitsInfo >*
GCGMsgSkillLimitsChange::mutable_card_limits_change_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgSkillLimitsChange.card_limits_change_map)
  return card_limits_change_map_.MutableMap();
}

// -------------------------------------------------------------------

// GCGMsgCostDice

// uint32 controller_id = 6;
inline void GCGMsgCostDice::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgCostDice::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostDice.controller_id)
  return controller_id_;
}
inline void GCGMsgCostDice::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostDice.controller_id)
}

// repeated uint32 select_dice_index_list = 13;
inline int GCGMsgCostDice::select_dice_index_list_size() const {
  return select_dice_index_list_.size();
}
inline void GCGMsgCostDice::clear_select_dice_index_list() {
  select_dice_index_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgCostDice::select_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostDice.select_dice_index_list)
  return select_dice_index_list_.Get(index);
}
inline void GCGMsgCostDice::set_select_dice_index_list(int index, ::google::protobuf::uint32 value) {
  select_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostDice.select_dice_index_list)
}
inline void GCGMsgCostDice::add_select_dice_index_list(::google::protobuf::uint32 value) {
  select_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgCostDice.select_dice_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgCostDice::select_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgCostDice.select_dice_index_list)
  return select_dice_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgCostDice::mutable_select_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgCostDice.select_dice_index_list)
  return &select_dice_index_list_;
}

// .proto.GCGReason reason = 9;
inline void GCGMsgCostDice::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgCostDice::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostDice.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgCostDice::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostDice.reason)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGMsgAddDice

// map<uint32, .proto.GCGDiceSideType> before_dice_map = 12;
inline int GCGMsgAddDice::before_dice_map_size() const {
  return before_dice_map_.size();
}
inline void GCGMsgAddDice::clear_before_dice_map() {
  before_dice_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >&
GCGMsgAddDice::before_dice_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgAddDice.before_dice_map)
  return before_dice_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >*
GCGMsgAddDice::mutable_before_dice_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgAddDice.before_dice_map)
  return before_dice_map_.MutableMap();
}

// int32 change_count = 1;
inline void GCGMsgAddDice::clear_change_count() {
  change_count_ = 0;
}
inline ::google::protobuf::int32 GCGMsgAddDice::change_count() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddDice.change_count)
  return change_count_;
}
inline void GCGMsgAddDice::set_change_count(::google::protobuf::int32 value) {
  
  change_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddDice.change_count)
}

// map<uint32, .proto.GCGDiceSideType> dice_map = 8;
inline int GCGMsgAddDice::dice_map_size() const {
  return dice_map_.size();
}
inline void GCGMsgAddDice::clear_dice_map() {
  dice_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >&
GCGMsgAddDice::dice_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgAddDice.dice_map)
  return dice_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGDiceSideType >*
GCGMsgAddDice::mutable_dice_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgAddDice.dice_map)
  return dice_map_.MutableMap();
}

// .proto.GCGReason reason = 4;
inline void GCGMsgAddDice::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgAddDice::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddDice.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgAddDice::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddDice.reason)
}

// uint32 controller_id = 10;
inline void GCGMsgAddDice::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgAddDice::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgAddDice.controller_id)
  return controller_id_;
}
inline void GCGMsgAddDice::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgAddDice.controller_id)
}

// -------------------------------------------------------------------

// GCGMsgNewCard

// .proto.GCGCard card = 15;
inline bool GCGMsgNewCard::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
inline void GCGMsgNewCard::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) delete card_;
  card_ = NULL;
}
inline const ::proto::GCGCard& GCGMsgNewCard::card() const {
  const ::proto::GCGCard* p = card_;
  // @@protoc_insertion_point(field_get:proto.GCGMsgNewCard.card)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCard*>(
      &::proto::_GCGCard_default_instance_);
}
inline ::proto::GCGCard* GCGMsgNewCard::mutable_card() {
  
  if (card_ == NULL) {
    card_ = new ::proto::GCGCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgNewCard.card)
  return card_;
}
inline ::proto::GCGCard* GCGMsgNewCard::release_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMsgNewCard.card)
  
  ::proto::GCGCard* temp = card_;
  card_ = NULL;
  return temp;
}
inline void GCGMsgNewCard::set_allocated_card(::proto::GCGCard* card) {
  delete card_;
  card_ = card;
  if (card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMsgNewCard.card)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGMsgUpdateController

// map<uint32, uint32> allow_controller_map = 7;
inline int GCGMsgUpdateController::allow_controller_map_size() const {
  return allow_controller_map_.size();
}
inline void GCGMsgUpdateController::clear_allow_controller_map() {
  allow_controller_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGMsgUpdateController::allow_controller_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgUpdateController.allow_controller_map)
  return allow_controller_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGMsgUpdateController::mutable_allow_controller_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgUpdateController.allow_controller_map)
  return allow_controller_map_.MutableMap();
}

// -------------------------------------------------------------------

// GCGMsgModifyAdd

// uint32 pos = 9;
inline void GCGMsgModifyAdd::clear_pos() {
  pos_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgModifyAdd::pos() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.pos)
  return pos_;
}
inline void GCGMsgModifyAdd::set_pos(::google::protobuf::uint32 value) {
  
  pos_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.pos)
}

// uint32 owner_card_guid = 10;
inline void GCGMsgModifyAdd::clear_owner_card_guid() {
  owner_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgModifyAdd::owner_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.owner_card_guid)
  return owner_card_guid_;
}
inline void GCGMsgModifyAdd::set_owner_card_guid(::google::protobuf::uint32 value) {
  
  owner_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.owner_card_guid)
}

// repeated uint32 card_guid_list = 15;
inline int GCGMsgModifyAdd::card_guid_list_size() const {
  return card_guid_list_.size();
}
inline void GCGMsgModifyAdd::clear_card_guid_list() {
  card_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgModifyAdd::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.card_guid_list)
  return card_guid_list_.Get(index);
}
inline void GCGMsgModifyAdd::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.card_guid_list)
}
inline void GCGMsgModifyAdd::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgModifyAdd.card_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgModifyAdd::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgModifyAdd.card_guid_list)
  return card_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgModifyAdd::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgModifyAdd.card_guid_list)
  return &card_guid_list_;
}

// uint32 controller_id = 14;
inline void GCGMsgModifyAdd::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgModifyAdd::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.controller_id)
  return controller_id_;
}
inline void GCGMsgModifyAdd::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.controller_id)
}

// .proto.GCGReason reason = 11;
inline void GCGMsgModifyAdd::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgModifyAdd::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyAdd.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgModifyAdd::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyAdd.reason)
}

// -------------------------------------------------------------------

// GCGMsgModifyRemove

// uint32 controller_id = 14;
inline void GCGMsgModifyRemove::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgModifyRemove::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.controller_id)
  return controller_id_;
}
inline void GCGMsgModifyRemove::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.controller_id)
}

// .proto.GCGReason reason = 12;
inline void GCGMsgModifyRemove::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGReason GCGMsgModifyRemove::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.reason)
  return static_cast< ::proto::GCGReason >(reason_);
}
inline void GCGMsgModifyRemove::set_reason(::proto::GCGReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.reason)
}

// uint32 owner_card_guid = 5;
inline void GCGMsgModifyRemove::clear_owner_card_guid() {
  owner_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgModifyRemove::owner_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.owner_card_guid)
  return owner_card_guid_;
}
inline void GCGMsgModifyRemove::set_owner_card_guid(::google::protobuf::uint32 value) {
  
  owner_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.owner_card_guid)
}

// repeated uint32 card_guid_list = 4;
inline int GCGMsgModifyRemove::card_guid_list_size() const {
  return card_guid_list_.size();
}
inline void GCGMsgModifyRemove::clear_card_guid_list() {
  card_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgModifyRemove::card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgModifyRemove.card_guid_list)
  return card_guid_list_.Get(index);
}
inline void GCGMsgModifyRemove::set_card_guid_list(int index, ::google::protobuf::uint32 value) {
  card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgModifyRemove.card_guid_list)
}
inline void GCGMsgModifyRemove::add_card_guid_list(::google::protobuf::uint32 value) {
  card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgModifyRemove.card_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgModifyRemove::card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgModifyRemove.card_guid_list)
  return card_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgModifyRemove::mutable_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgModifyRemove.card_guid_list)
  return &card_guid_list_;
}

// -------------------------------------------------------------------

// GCGMsgPVEIntention

// repeated uint32 skill_id_list = 8;
inline int GCGMsgPVEIntention::skill_id_list_size() const {
  return skill_id_list_.size();
}
inline void GCGMsgPVEIntention::clear_skill_id_list() {
  skill_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgPVEIntention::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntention.skill_id_list)
  return skill_id_list_.Get(index);
}
inline void GCGMsgPVEIntention::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgPVEIntention.skill_id_list)
}
inline void GCGMsgPVEIntention::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgPVEIntention.skill_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgPVEIntention::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgPVEIntention.skill_id_list)
  return skill_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgPVEIntention::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgPVEIntention.skill_id_list)
  return &skill_id_list_;
}

// uint32 card_guid = 13;
inline void GCGMsgPVEIntention::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgPVEIntention::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntention.card_guid)
  return card_guid_;
}
inline void GCGMsgPVEIntention::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPVEIntention.card_guid)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGMsgPVEIntentionInfo

// map<uint32, .proto.GCGMsgPVEIntention> intention_map = 2;
inline int GCGMsgPVEIntentionInfo::intention_map_size() const {
  return intention_map_.size();
}
inline void GCGMsgPVEIntentionInfo::clear_intention_map() {
  intention_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >&
GCGMsgPVEIntentionInfo::intention_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGMsgPVEIntentionInfo.intention_map)
  return intention_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGMsgPVEIntention >*
GCGMsgPVEIntentionInfo::mutable_intention_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGMsgPVEIntentionInfo.intention_map)
  return intention_map_.MutableMap();
}

// -------------------------------------------------------------------

// GCGMsgPVEIntentionChange

// repeated .proto.GCGMsgPVEIntention change_intention_list = 4;
inline int GCGMsgPVEIntentionChange::change_intention_list_size() const {
  return change_intention_list_.size();
}
inline void GCGMsgPVEIntentionChange::clear_change_intention_list() {
  change_intention_list_.Clear();
}
inline const ::proto::GCGMsgPVEIntention& GCGMsgPVEIntentionChange::change_intention_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_.Get(index);
}
inline ::proto::GCGMsgPVEIntention* GCGMsgPVEIntentionChange::mutable_change_intention_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_.Mutable(index);
}
inline ::proto::GCGMsgPVEIntention* GCGMsgPVEIntentionChange::add_change_intention_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGMsgPVEIntention >*
GCGMsgPVEIntentionChange::mutable_change_intention_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return &change_intention_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGMsgPVEIntention >&
GCGMsgPVEIntentionChange::change_intention_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgPVEIntentionChange.change_intention_list)
  return change_intention_list_;
}

// .proto.GCGIntentionChangeType change_type = 1;
inline void GCGMsgPVEIntentionChange::clear_change_type() {
  change_type_ = 0;
}
inline ::proto::GCGIntentionChangeType GCGMsgPVEIntentionChange::change_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgPVEIntentionChange.change_type)
  return static_cast< ::proto::GCGIntentionChangeType >(change_type_);
}
inline void GCGMsgPVEIntentionChange::set_change_type(::proto::GCGIntentionChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgPVEIntentionChange.change_type)
}

// -------------------------------------------------------------------

// GCGMsgDuelDataChange

// uint32 round = 14;
inline void GCGMsgDuelDataChange::clear_round() {
  round_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgDuelDataChange::round() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgDuelDataChange.round)
  return round_;
}
inline void GCGMsgDuelDataChange::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgDuelDataChange.round)
}

// -------------------------------------------------------------------

// GCGMsgClientPerform

// repeated uint32 param_list = 2;
inline int GCGMsgClientPerform::param_list_size() const {
  return param_list_.size();
}
inline void GCGMsgClientPerform::clear_param_list() {
  param_list_.Clear();
}
inline ::google::protobuf::uint32 GCGMsgClientPerform::param_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgClientPerform.param_list)
  return param_list_.Get(index);
}
inline void GCGMsgClientPerform::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGMsgClientPerform.param_list)
}
inline void GCGMsgClientPerform::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGMsgClientPerform.param_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGMsgClientPerform::param_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgClientPerform.param_list)
  return param_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGMsgClientPerform::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgClientPerform.param_list)
  return &param_list_;
}

// .proto.GCGClientPerformType perform_type = 5;
inline void GCGMsgClientPerform::clear_perform_type() {
  perform_type_ = 0;
}
inline ::proto::GCGClientPerformType GCGMsgClientPerform::perform_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgClientPerform.perform_type)
  return static_cast< ::proto::GCGClientPerformType >(perform_type_);
}
inline void GCGMsgClientPerform::set_perform_type(::proto::GCGClientPerformType value) {
  
  perform_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgClientPerform.perform_type)
}

// -------------------------------------------------------------------

// GCGMsgGameOver

// .proto.GCGEndReason end_reason = 13;
inline void GCGMsgGameOver::clear_end_reason() {
  end_reason_ = 0;
}
inline ::proto::GCGEndReason GCGMsgGameOver::end_reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgGameOver.end_reason)
  return static_cast< ::proto::GCGEndReason >(end_reason_);
}
inline void GCGMsgGameOver::set_end_reason(::proto::GCGEndReason value) {
  
  end_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgGameOver.end_reason)
}

// uint32 win_controller_id = 6;
inline void GCGMsgGameOver::clear_win_controller_id() {
  win_controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgGameOver::win_controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgGameOver.win_controller_id)
  return win_controller_id_;
}
inline void GCGMsgGameOver::set_win_controller_id(::google::protobuf::uint32 value) {
  
  win_controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgGameOver.win_controller_id)
}

// -------------------------------------------------------------------

// GCGMsgOpTimer

// fixed64 begin_time = 9;
inline void GCGMsgOpTimer::clear_begin_time() {
  begin_time_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GCGMsgOpTimer::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.begin_time)
  return begin_time_;
}
inline void GCGMsgOpTimer::set_begin_time(::google::protobuf::uint64 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.begin_time)
}

// .proto.GCGPhaseType phase = 3;
inline void GCGMsgOpTimer::clear_phase() {
  phase_ = 0;
}
inline ::proto::GCGPhaseType GCGMsgOpTimer::phase() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.phase)
  return static_cast< ::proto::GCGPhaseType >(phase_);
}
inline void GCGMsgOpTimer::set_phase(::proto::GCGPhaseType value) {
  
  phase_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.phase)
}

// fixed64 time_stamp = 13;
inline void GCGMsgOpTimer::clear_time_stamp() {
  time_stamp_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 GCGMsgOpTimer::time_stamp() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.time_stamp)
  return time_stamp_;
}
inline void GCGMsgOpTimer::set_time_stamp(::google::protobuf::uint64 value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.time_stamp)
}

// uint32 controller_id = 8;
inline void GCGMsgOpTimer::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgOpTimer::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgOpTimer.controller_id)
  return controller_id_;
}
inline void GCGMsgOpTimer::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgOpTimer.controller_id)
}

// -------------------------------------------------------------------

// GCGMsgWaitingListChange

// uint32 cur_index = 6;
inline void GCGMsgWaitingListChange::clear_cur_index() {
  cur_index_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgWaitingListChange::cur_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgWaitingListChange.cur_index)
  return cur_index_;
}
inline void GCGMsgWaitingListChange::set_cur_index(::google::protobuf::uint32 value) {
  
  cur_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgWaitingListChange.cur_index)
}

// uint32 controller_id = 4;
inline void GCGMsgWaitingListChange::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgWaitingListChange::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgWaitingListChange.controller_id)
  return controller_id_;
}
inline void GCGMsgWaitingListChange::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgWaitingListChange.controller_id)
}

// -------------------------------------------------------------------

// GCGMsgCardUpdate

// .proto.GCGCard card = 7;
inline bool GCGMsgCardUpdate::has_card() const {
  return this != internal_default_instance() && card_ != NULL;
}
inline void GCGMsgCardUpdate::clear_card() {
  if (GetArenaNoVirtual() == NULL && card_ != NULL) delete card_;
  card_ = NULL;
}
inline const ::proto::GCGCard& GCGMsgCardUpdate::card() const {
  const ::proto::GCGCard* p = card_;
  // @@protoc_insertion_point(field_get:proto.GCGMsgCardUpdate.card)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCard*>(
      &::proto::_GCGCard_default_instance_);
}
inline ::proto::GCGCard* GCGMsgCardUpdate::mutable_card() {
  
  if (card_ == NULL) {
    card_ = new ::proto::GCGCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgCardUpdate.card)
  return card_;
}
inline ::proto::GCGCard* GCGMsgCardUpdate::release_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMsgCardUpdate.card)
  
  ::proto::GCGCard* temp = card_;
  card_ = NULL;
  return temp;
}
inline void GCGMsgCardUpdate::set_allocated_card(::proto::GCGCard* card) {
  delete card_;
  card_ = card;
  if (card) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMsgCardUpdate.card)
}

// -------------------------------------------------------------------

// GCGMsgCostRevise

// uint32 controller_id = 5;
inline void GCGMsgCostRevise::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgCostRevise::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostRevise.controller_id)
  return controller_id_;
}
inline void GCGMsgCostRevise::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgCostRevise.controller_id)
}

// .proto.GCGCostReviseInfo cost_revise = 13;
inline bool GCGMsgCostRevise::has_cost_revise() const {
  return this != internal_default_instance() && cost_revise_ != NULL;
}
inline void GCGMsgCostRevise::clear_cost_revise() {
  if (GetArenaNoVirtual() == NULL && cost_revise_ != NULL) delete cost_revise_;
  cost_revise_ = NULL;
}
inline const ::proto::GCGCostReviseInfo& GCGMsgCostRevise::cost_revise() const {
  const ::proto::GCGCostReviseInfo* p = cost_revise_;
  // @@protoc_insertion_point(field_get:proto.GCGMsgCostRevise.cost_revise)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCostReviseInfo*>(
      &::proto::_GCGCostReviseInfo_default_instance_);
}
inline ::proto::GCGCostReviseInfo* GCGMsgCostRevise::mutable_cost_revise() {
  
  if (cost_revise_ == NULL) {
    cost_revise_ = new ::proto::GCGCostReviseInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgCostRevise.cost_revise)
  return cost_revise_;
}
inline ::proto::GCGCostReviseInfo* GCGMsgCostRevise::release_cost_revise() {
  // @@protoc_insertion_point(field_release:proto.GCGMsgCostRevise.cost_revise)
  
  ::proto::GCGCostReviseInfo* temp = cost_revise_;
  cost_revise_ = NULL;
  return temp;
}
inline void GCGMsgCostRevise::set_allocated_cost_revise(::proto::GCGCostReviseInfo* cost_revise) {
  delete cost_revise_;
  cost_revise_ = cost_revise;
  if (cost_revise) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMsgCostRevise.cost_revise)
}

// -------------------------------------------------------------------

// GCGMsgPhaseContinue

// -------------------------------------------------------------------

// GCGMsgNoDamageSkillResult

// uint32 result_seq = 8;
inline void GCGMsgNoDamageSkillResult::clear_result_seq() {
  result_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgNoDamageSkillResult::result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.result_seq)
  return result_seq_;
}
inline void GCGMsgNoDamageSkillResult::set_result_seq(::google::protobuf::uint32 value) {
  
  result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.result_seq)
}

// uint32 from_result_seq = 4;
inline void GCGMsgNoDamageSkillResult::clear_from_result_seq() {
  from_result_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgNoDamageSkillResult::from_result_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.from_result_seq)
  return from_result_seq_;
}
inline void GCGMsgNoDamageSkillResult::set_from_result_seq(::google::protobuf::uint32 value) {
  
  from_result_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.from_result_seq)
}

// uint32 effect_element = 9;
inline void GCGMsgNoDamageSkillResult::clear_effect_element() {
  effect_element_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgNoDamageSkillResult::effect_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.effect_element)
  return effect_element_;
}
inline void GCGMsgNoDamageSkillResult::set_effect_element(::google::protobuf::uint32 value) {
  
  effect_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.effect_element)
}

// uint32 target_card_guid = 5;
inline void GCGMsgNoDamageSkillResult::clear_target_card_guid() {
  target_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgNoDamageSkillResult::target_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.target_card_guid)
  return target_card_guid_;
}
inline void GCGMsgNoDamageSkillResult::set_target_card_guid(::google::protobuf::uint32 value) {
  
  target_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.target_card_guid)
}

// repeated .proto.GCGDamageDetail detail_list = 13;
inline int GCGMsgNoDamageSkillResult::detail_list_size() const {
  return detail_list_.size();
}
inline void GCGMsgNoDamageSkillResult::clear_detail_list() {
  detail_list_.Clear();
}
inline const ::proto::GCGDamageDetail& GCGMsgNoDamageSkillResult::detail_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_.Get(index);
}
inline ::proto::GCGDamageDetail* GCGMsgNoDamageSkillResult::mutable_detail_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_.Mutable(index);
}
inline ::proto::GCGDamageDetail* GCGMsgNoDamageSkillResult::add_detail_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >*
GCGMsgNoDamageSkillResult::mutable_detail_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMsgNoDamageSkillResult.detail_list)
  return &detail_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGDamageDetail >&
GCGMsgNoDamageSkillResult::detail_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMsgNoDamageSkillResult.detail_list)
  return detail_list_;
}

// uint32 skill_id = 10;
inline void GCGMsgNoDamageSkillResult::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgNoDamageSkillResult::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.skill_id)
  return skill_id_;
}
inline void GCGMsgNoDamageSkillResult::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.skill_id)
}

// uint32 src_card_guid = 12;
inline void GCGMsgNoDamageSkillResult::clear_src_card_guid() {
  src_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgNoDamageSkillResult::src_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgNoDamageSkillResult.src_card_guid)
  return src_card_guid_;
}
inline void GCGMsgNoDamageSkillResult::set_src_card_guid(::google::protobuf::uint32 value) {
  
  src_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgNoDamageSkillResult.src_card_guid)
}

// -------------------------------------------------------------------

// GCGMsgReactionBegin

// uint32 card_guid = 13;
inline void GCGMsgReactionBegin::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgReactionBegin::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgReactionBegin.card_guid)
  return card_guid_;
}
inline void GCGMsgReactionBegin::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgReactionBegin.card_guid)
}

// uint32 skill_id = 3;
inline void GCGMsgReactionBegin::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgReactionBegin::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgReactionBegin.skill_id)
  return skill_id_;
}
inline void GCGMsgReactionBegin::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgReactionBegin.skill_id)
}

// -------------------------------------------------------------------

// GCGMsgReactionEnd

// uint32 skill_id = 4;
inline void GCGMsgReactionEnd::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMsgReactionEnd::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMsgReactionEnd.skill_id)
  return skill_id_;
}
inline void GCGMsgReactionEnd::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMsgReactionEnd.skill_id)
}

// -------------------------------------------------------------------

// GCGMessage

// .proto.GCGMsgTokenChange token_change = 12;
inline bool GCGMessage::has_token_change() const {
  return message_case() == kTokenChange;
}
inline void GCGMessage::set_has_token_change() {
  _oneof_case_[0] = kTokenChange;
}
inline void GCGMessage::clear_token_change() {
  if (has_token_change()) {
    delete message_.token_change_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgTokenChange& GCGMessage::token_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.token_change)
  return has_token_change()
      ? *message_.token_change_
      : ::proto::GCGMsgTokenChange::default_instance();
}
inline ::proto::GCGMsgTokenChange* GCGMessage::mutable_token_change() {
  if (!has_token_change()) {
    clear_message();
    set_has_token_change();
    message_.token_change_ = new ::proto::GCGMsgTokenChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.token_change)
  return message_.token_change_;
}
inline ::proto::GCGMsgTokenChange* GCGMessage::release_token_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.token_change)
  if (has_token_change()) {
    clear_has_message();
    ::proto::GCGMsgTokenChange* temp = message_.token_change_;
    message_.token_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_token_change(::proto::GCGMsgTokenChange* token_change) {
  clear_message();
  if (token_change) {
    set_has_token_change();
    message_.token_change_ = token_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.token_change)
}

// .proto.GCGMsgPhaseChange phase_change = 13;
inline bool GCGMessage::has_phase_change() const {
  return message_case() == kPhaseChange;
}
inline void GCGMessage::set_has_phase_change() {
  _oneof_case_[0] = kPhaseChange;
}
inline void GCGMessage::clear_phase_change() {
  if (has_phase_change()) {
    delete message_.phase_change_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgPhaseChange& GCGMessage::phase_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.phase_change)
  return has_phase_change()
      ? *message_.phase_change_
      : ::proto::GCGMsgPhaseChange::default_instance();
}
inline ::proto::GCGMsgPhaseChange* GCGMessage::mutable_phase_change() {
  if (!has_phase_change()) {
    clear_message();
    set_has_phase_change();
    message_.phase_change_ = new ::proto::GCGMsgPhaseChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.phase_change)
  return message_.phase_change_;
}
inline ::proto::GCGMsgPhaseChange* GCGMessage::release_phase_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.phase_change)
  if (has_phase_change()) {
    clear_has_message();
    ::proto::GCGMsgPhaseChange* temp = message_.phase_change_;
    message_.phase_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_phase_change(::proto::GCGMsgPhaseChange* phase_change) {
  clear_message();
  if (phase_change) {
    set_has_phase_change();
    message_.phase_change_ = phase_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.phase_change)
}

// .proto.GCGMsgAddCards add_cards = 10;
inline bool GCGMessage::has_add_cards() const {
  return message_case() == kAddCards;
}
inline void GCGMessage::set_has_add_cards() {
  _oneof_case_[0] = kAddCards;
}
inline void GCGMessage::clear_add_cards() {
  if (has_add_cards()) {
    delete message_.add_cards_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgAddCards& GCGMessage::add_cards() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.add_cards)
  return has_add_cards()
      ? *message_.add_cards_
      : ::proto::GCGMsgAddCards::default_instance();
}
inline ::proto::GCGMsgAddCards* GCGMessage::mutable_add_cards() {
  if (!has_add_cards()) {
    clear_message();
    set_has_add_cards();
    message_.add_cards_ = new ::proto::GCGMsgAddCards;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.add_cards)
  return message_.add_cards_;
}
inline ::proto::GCGMsgAddCards* GCGMessage::release_add_cards() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.add_cards)
  if (has_add_cards()) {
    clear_has_message();
    ::proto::GCGMsgAddCards* temp = message_.add_cards_;
    message_.add_cards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_add_cards(::proto::GCGMsgAddCards* add_cards) {
  clear_message();
  if (add_cards) {
    set_has_add_cards();
    message_.add_cards_ = add_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.add_cards)
}

// .proto.GCGMsgRemoveCards remove_cards = 14;
inline bool GCGMessage::has_remove_cards() const {
  return message_case() == kRemoveCards;
}
inline void GCGMessage::set_has_remove_cards() {
  _oneof_case_[0] = kRemoveCards;
}
inline void GCGMessage::clear_remove_cards() {
  if (has_remove_cards()) {
    delete message_.remove_cards_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgRemoveCards& GCGMessage::remove_cards() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.remove_cards)
  return has_remove_cards()
      ? *message_.remove_cards_
      : ::proto::GCGMsgRemoveCards::default_instance();
}
inline ::proto::GCGMsgRemoveCards* GCGMessage::mutable_remove_cards() {
  if (!has_remove_cards()) {
    clear_message();
    set_has_remove_cards();
    message_.remove_cards_ = new ::proto::GCGMsgRemoveCards;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.remove_cards)
  return message_.remove_cards_;
}
inline ::proto::GCGMsgRemoveCards* GCGMessage::release_remove_cards() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.remove_cards)
  if (has_remove_cards()) {
    clear_has_message();
    ::proto::GCGMsgRemoveCards* temp = message_.remove_cards_;
    message_.remove_cards_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_remove_cards(::proto::GCGMsgRemoveCards* remove_cards) {
  clear_message();
  if (remove_cards) {
    set_has_remove_cards();
    message_.remove_cards_ = remove_cards;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.remove_cards)
}

// .proto.GCGMsgSelectOnStage select_on_stage = 6;
inline bool GCGMessage::has_select_on_stage() const {
  return message_case() == kSelectOnStage;
}
inline void GCGMessage::set_has_select_on_stage() {
  _oneof_case_[0] = kSelectOnStage;
}
inline void GCGMessage::clear_select_on_stage() {
  if (has_select_on_stage()) {
    delete message_.select_on_stage_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgSelectOnStage& GCGMessage::select_on_stage() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.select_on_stage)
  return has_select_on_stage()
      ? *message_.select_on_stage_
      : ::proto::GCGMsgSelectOnStage::default_instance();
}
inline ::proto::GCGMsgSelectOnStage* GCGMessage::mutable_select_on_stage() {
  if (!has_select_on_stage()) {
    clear_message();
    set_has_select_on_stage();
    message_.select_on_stage_ = new ::proto::GCGMsgSelectOnStage;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.select_on_stage)
  return message_.select_on_stage_;
}
inline ::proto::GCGMsgSelectOnStage* GCGMessage::release_select_on_stage() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.select_on_stage)
  if (has_select_on_stage()) {
    clear_has_message();
    ::proto::GCGMsgSelectOnStage* temp = message_.select_on_stage_;
    message_.select_on_stage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_select_on_stage(::proto::GCGMsgSelectOnStage* select_on_stage) {
  clear_message();
  if (select_on_stage) {
    set_has_select_on_stage();
    message_.select_on_stage_ = select_on_stage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.select_on_stage)
}

// .proto.GCGMsgDiceRoll dice_roll = 9;
inline bool GCGMessage::has_dice_roll() const {
  return message_case() == kDiceRoll;
}
inline void GCGMessage::set_has_dice_roll() {
  _oneof_case_[0] = kDiceRoll;
}
inline void GCGMessage::clear_dice_roll() {
  if (has_dice_roll()) {
    delete message_.dice_roll_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgDiceRoll& GCGMessage::dice_roll() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.dice_roll)
  return has_dice_roll()
      ? *message_.dice_roll_
      : ::proto::GCGMsgDiceRoll::default_instance();
}
inline ::proto::GCGMsgDiceRoll* GCGMessage::mutable_dice_roll() {
  if (!has_dice_roll()) {
    clear_message();
    set_has_dice_roll();
    message_.dice_roll_ = new ::proto::GCGMsgDiceRoll;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.dice_roll)
  return message_.dice_roll_;
}
inline ::proto::GCGMsgDiceRoll* GCGMessage::release_dice_roll() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.dice_roll)
  if (has_dice_roll()) {
    clear_has_message();
    ::proto::GCGMsgDiceRoll* temp = message_.dice_roll_;
    message_.dice_roll_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_dice_roll(::proto::GCGMsgDiceRoll* dice_roll) {
  clear_message();
  if (dice_roll) {
    set_has_dice_roll();
    message_.dice_roll_ = dice_roll;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.dice_roll)
}

// .proto.GCGMsgDiceReroll dice_reroll = 11;
inline bool GCGMessage::has_dice_reroll() const {
  return message_case() == kDiceReroll;
}
inline void GCGMessage::set_has_dice_reroll() {
  _oneof_case_[0] = kDiceReroll;
}
inline void GCGMessage::clear_dice_reroll() {
  if (has_dice_reroll()) {
    delete message_.dice_reroll_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgDiceReroll& GCGMessage::dice_reroll() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.dice_reroll)
  return has_dice_reroll()
      ? *message_.dice_reroll_
      : ::proto::GCGMsgDiceReroll::default_instance();
}
inline ::proto::GCGMsgDiceReroll* GCGMessage::mutable_dice_reroll() {
  if (!has_dice_reroll()) {
    clear_message();
    set_has_dice_reroll();
    message_.dice_reroll_ = new ::proto::GCGMsgDiceReroll;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.dice_reroll)
  return message_.dice_reroll_;
}
inline ::proto::GCGMsgDiceReroll* GCGMessage::release_dice_reroll() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.dice_reroll)
  if (has_dice_reroll()) {
    clear_has_message();
    ::proto::GCGMsgDiceReroll* temp = message_.dice_reroll_;
    message_.dice_reroll_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_dice_reroll(::proto::GCGMsgDiceReroll* dice_reroll) {
  clear_message();
  if (dice_reroll) {
    set_has_dice_reroll();
    message_.dice_reroll_ = dice_reroll;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.dice_reroll)
}

// .proto.GCGMsgPass pass = 5;
inline bool GCGMessage::has_pass() const {
  return message_case() == kPass;
}
inline void GCGMessage::set_has_pass() {
  _oneof_case_[0] = kPass;
}
inline void GCGMessage::clear_pass() {
  if (has_pass()) {
    delete message_.pass_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgPass& GCGMessage::pass() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.pass)
  return has_pass()
      ? *message_.pass_
      : ::proto::GCGMsgPass::default_instance();
}
inline ::proto::GCGMsgPass* GCGMessage::mutable_pass() {
  if (!has_pass()) {
    clear_message();
    set_has_pass();
    message_.pass_ = new ::proto::GCGMsgPass;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.pass)
  return message_.pass_;
}
inline ::proto::GCGMsgPass* GCGMessage::release_pass() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.pass)
  if (has_pass()) {
    clear_has_message();
    ::proto::GCGMsgPass* temp = message_.pass_;
    message_.pass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_pass(::proto::GCGMsgPass* pass) {
  clear_message();
  if (pass) {
    set_has_pass();
    message_.pass_ = pass;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.pass)
}

// .proto.GCGMsgCharDie char_die = 2;
inline bool GCGMessage::has_char_die() const {
  return message_case() == kCharDie;
}
inline void GCGMessage::set_has_char_die() {
  _oneof_case_[0] = kCharDie;
}
inline void GCGMessage::clear_char_die() {
  if (has_char_die()) {
    delete message_.char_die_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgCharDie& GCGMessage::char_die() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.char_die)
  return has_char_die()
      ? *message_.char_die_
      : ::proto::GCGMsgCharDie::default_instance();
}
inline ::proto::GCGMsgCharDie* GCGMessage::mutable_char_die() {
  if (!has_char_die()) {
    clear_message();
    set_has_char_die();
    message_.char_die_ = new ::proto::GCGMsgCharDie;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.char_die)
  return message_.char_die_;
}
inline ::proto::GCGMsgCharDie* GCGMessage::release_char_die() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.char_die)
  if (has_char_die()) {
    clear_has_message();
    ::proto::GCGMsgCharDie* temp = message_.char_die_;
    message_.char_die_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_char_die(::proto::GCGMsgCharDie* char_die) {
  clear_message();
  if (char_die) {
    set_has_char_die();
    message_.char_die_ = char_die;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.char_die)
}

// .proto.GCGMsgSkillResult skill_result = 1;
inline bool GCGMessage::has_skill_result() const {
  return message_case() == kSkillResult;
}
inline void GCGMessage::set_has_skill_result() {
  _oneof_case_[0] = kSkillResult;
}
inline void GCGMessage::clear_skill_result() {
  if (has_skill_result()) {
    delete message_.skill_result_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgSkillResult& GCGMessage::skill_result() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.skill_result)
  return has_skill_result()
      ? *message_.skill_result_
      : ::proto::GCGMsgSkillResult::default_instance();
}
inline ::proto::GCGMsgSkillResult* GCGMessage::mutable_skill_result() {
  if (!has_skill_result()) {
    clear_message();
    set_has_skill_result();
    message_.skill_result_ = new ::proto::GCGMsgSkillResult;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.skill_result)
  return message_.skill_result_;
}
inline ::proto::GCGMsgSkillResult* GCGMessage::release_skill_result() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.skill_result)
  if (has_skill_result()) {
    clear_has_message();
    ::proto::GCGMsgSkillResult* temp = message_.skill_result_;
    message_.skill_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_skill_result(::proto::GCGMsgSkillResult* skill_result) {
  clear_message();
  if (skill_result) {
    set_has_skill_result();
    message_.skill_result_ = skill_result;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.skill_result)
}

// .proto.GCGMsgCostDice cost_dice = 7;
inline bool GCGMessage::has_cost_dice() const {
  return message_case() == kCostDice;
}
inline void GCGMessage::set_has_cost_dice() {
  _oneof_case_[0] = kCostDice;
}
inline void GCGMessage::clear_cost_dice() {
  if (has_cost_dice()) {
    delete message_.cost_dice_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgCostDice& GCGMessage::cost_dice() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.cost_dice)
  return has_cost_dice()
      ? *message_.cost_dice_
      : ::proto::GCGMsgCostDice::default_instance();
}
inline ::proto::GCGMsgCostDice* GCGMessage::mutable_cost_dice() {
  if (!has_cost_dice()) {
    clear_message();
    set_has_cost_dice();
    message_.cost_dice_ = new ::proto::GCGMsgCostDice;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.cost_dice)
  return message_.cost_dice_;
}
inline ::proto::GCGMsgCostDice* GCGMessage::release_cost_dice() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.cost_dice)
  if (has_cost_dice()) {
    clear_has_message();
    ::proto::GCGMsgCostDice* temp = message_.cost_dice_;
    message_.cost_dice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_cost_dice(::proto::GCGMsgCostDice* cost_dice) {
  clear_message();
  if (cost_dice) {
    set_has_cost_dice();
    message_.cost_dice_ = cost_dice;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.cost_dice)
}

// .proto.GCGMsgAddDice add_dice = 3;
inline bool GCGMessage::has_add_dice() const {
  return message_case() == kAddDice;
}
inline void GCGMessage::set_has_add_dice() {
  _oneof_case_[0] = kAddDice;
}
inline void GCGMessage::clear_add_dice() {
  if (has_add_dice()) {
    delete message_.add_dice_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgAddDice& GCGMessage::add_dice() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.add_dice)
  return has_add_dice()
      ? *message_.add_dice_
      : ::proto::GCGMsgAddDice::default_instance();
}
inline ::proto::GCGMsgAddDice* GCGMessage::mutable_add_dice() {
  if (!has_add_dice()) {
    clear_message();
    set_has_add_dice();
    message_.add_dice_ = new ::proto::GCGMsgAddDice;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.add_dice)
  return message_.add_dice_;
}
inline ::proto::GCGMsgAddDice* GCGMessage::release_add_dice() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.add_dice)
  if (has_add_dice()) {
    clear_has_message();
    ::proto::GCGMsgAddDice* temp = message_.add_dice_;
    message_.add_dice_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_add_dice(::proto::GCGMsgAddDice* add_dice) {
  clear_message();
  if (add_dice) {
    set_has_add_dice();
    message_.add_dice_ = add_dice;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.add_dice)
}

// .proto.GCGMsgMoveCard move_card = 15;
inline bool GCGMessage::has_move_card() const {
  return message_case() == kMoveCard;
}
inline void GCGMessage::set_has_move_card() {
  _oneof_case_[0] = kMoveCard;
}
inline void GCGMessage::clear_move_card() {
  if (has_move_card()) {
    delete message_.move_card_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgMoveCard& GCGMessage::move_card() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.move_card)
  return has_move_card()
      ? *message_.move_card_
      : ::proto::GCGMsgMoveCard::default_instance();
}
inline ::proto::GCGMsgMoveCard* GCGMessage::mutable_move_card() {
  if (!has_move_card()) {
    clear_message();
    set_has_move_card();
    message_.move_card_ = new ::proto::GCGMsgMoveCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.move_card)
  return message_.move_card_;
}
inline ::proto::GCGMsgMoveCard* GCGMessage::release_move_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.move_card)
  if (has_move_card()) {
    clear_has_message();
    ::proto::GCGMsgMoveCard* temp = message_.move_card_;
    message_.move_card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_move_card(::proto::GCGMsgMoveCard* move_card) {
  clear_message();
  if (move_card) {
    set_has_move_card();
    message_.move_card_ = move_card;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.move_card)
}

// .proto.GCGMsgUseSkill use_skill = 4;
inline bool GCGMessage::has_use_skill() const {
  return message_case() == kUseSkill;
}
inline void GCGMessage::set_has_use_skill() {
  _oneof_case_[0] = kUseSkill;
}
inline void GCGMessage::clear_use_skill() {
  if (has_use_skill()) {
    delete message_.use_skill_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgUseSkill& GCGMessage::use_skill() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.use_skill)
  return has_use_skill()
      ? *message_.use_skill_
      : ::proto::GCGMsgUseSkill::default_instance();
}
inline ::proto::GCGMsgUseSkill* GCGMessage::mutable_use_skill() {
  if (!has_use_skill()) {
    clear_message();
    set_has_use_skill();
    message_.use_skill_ = new ::proto::GCGMsgUseSkill;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.use_skill)
  return message_.use_skill_;
}
inline ::proto::GCGMsgUseSkill* GCGMessage::release_use_skill() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.use_skill)
  if (has_use_skill()) {
    clear_has_message();
    ::proto::GCGMsgUseSkill* temp = message_.use_skill_;
    message_.use_skill_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_use_skill(::proto::GCGMsgUseSkill* use_skill) {
  clear_message();
  if (use_skill) {
    set_has_use_skill();
    message_.use_skill_ = use_skill;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.use_skill)
}

// .proto.GCGMsgNewCard new_card = 1848;
inline bool GCGMessage::has_new_card() const {
  return message_case() == kNewCard;
}
inline void GCGMessage::set_has_new_card() {
  _oneof_case_[0] = kNewCard;
}
inline void GCGMessage::clear_new_card() {
  if (has_new_card()) {
    delete message_.new_card_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgNewCard& GCGMessage::new_card() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.new_card)
  return has_new_card()
      ? *message_.new_card_
      : ::proto::GCGMsgNewCard::default_instance();
}
inline ::proto::GCGMsgNewCard* GCGMessage::mutable_new_card() {
  if (!has_new_card()) {
    clear_message();
    set_has_new_card();
    message_.new_card_ = new ::proto::GCGMsgNewCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.new_card)
  return message_.new_card_;
}
inline ::proto::GCGMsgNewCard* GCGMessage::release_new_card() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.new_card)
  if (has_new_card()) {
    clear_has_message();
    ::proto::GCGMsgNewCard* temp = message_.new_card_;
    message_.new_card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_new_card(::proto::GCGMsgNewCard* new_card) {
  clear_message();
  if (new_card) {
    set_has_new_card();
    message_.new_card_ = new_card;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.new_card)
}

// .proto.GCGMsgUpdateController update_controller = 429;
inline bool GCGMessage::has_update_controller() const {
  return message_case() == kUpdateController;
}
inline void GCGMessage::set_has_update_controller() {
  _oneof_case_[0] = kUpdateController;
}
inline void GCGMessage::clear_update_controller() {
  if (has_update_controller()) {
    delete message_.update_controller_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgUpdateController& GCGMessage::update_controller() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.update_controller)
  return has_update_controller()
      ? *message_.update_controller_
      : ::proto::GCGMsgUpdateController::default_instance();
}
inline ::proto::GCGMsgUpdateController* GCGMessage::mutable_update_controller() {
  if (!has_update_controller()) {
    clear_message();
    set_has_update_controller();
    message_.update_controller_ = new ::proto::GCGMsgUpdateController;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.update_controller)
  return message_.update_controller_;
}
inline ::proto::GCGMsgUpdateController* GCGMessage::release_update_controller() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.update_controller)
  if (has_update_controller()) {
    clear_has_message();
    ::proto::GCGMsgUpdateController* temp = message_.update_controller_;
    message_.update_controller_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_update_controller(::proto::GCGMsgUpdateController* update_controller) {
  clear_message();
  if (update_controller) {
    set_has_update_controller();
    message_.update_controller_ = update_controller;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.update_controller)
}

// .proto.GCGMsgModifyAdd modify_add = 1851;
inline bool GCGMessage::has_modify_add() const {
  return message_case() == kModifyAdd;
}
inline void GCGMessage::set_has_modify_add() {
  _oneof_case_[0] = kModifyAdd;
}
inline void GCGMessage::clear_modify_add() {
  if (has_modify_add()) {
    delete message_.modify_add_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgModifyAdd& GCGMessage::modify_add() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.modify_add)
  return has_modify_add()
      ? *message_.modify_add_
      : ::proto::GCGMsgModifyAdd::default_instance();
}
inline ::proto::GCGMsgModifyAdd* GCGMessage::mutable_modify_add() {
  if (!has_modify_add()) {
    clear_message();
    set_has_modify_add();
    message_.modify_add_ = new ::proto::GCGMsgModifyAdd;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.modify_add)
  return message_.modify_add_;
}
inline ::proto::GCGMsgModifyAdd* GCGMessage::release_modify_add() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.modify_add)
  if (has_modify_add()) {
    clear_has_message();
    ::proto::GCGMsgModifyAdd* temp = message_.modify_add_;
    message_.modify_add_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_modify_add(::proto::GCGMsgModifyAdd* modify_add) {
  clear_message();
  if (modify_add) {
    set_has_modify_add();
    message_.modify_add_ = modify_add;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.modify_add)
}

// .proto.GCGMsgModifyRemove modify_remove = 471;
inline bool GCGMessage::has_modify_remove() const {
  return message_case() == kModifyRemove;
}
inline void GCGMessage::set_has_modify_remove() {
  _oneof_case_[0] = kModifyRemove;
}
inline void GCGMessage::clear_modify_remove() {
  if (has_modify_remove()) {
    delete message_.modify_remove_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgModifyRemove& GCGMessage::modify_remove() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.modify_remove)
  return has_modify_remove()
      ? *message_.modify_remove_
      : ::proto::GCGMsgModifyRemove::default_instance();
}
inline ::proto::GCGMsgModifyRemove* GCGMessage::mutable_modify_remove() {
  if (!has_modify_remove()) {
    clear_message();
    set_has_modify_remove();
    message_.modify_remove_ = new ::proto::GCGMsgModifyRemove;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.modify_remove)
  return message_.modify_remove_;
}
inline ::proto::GCGMsgModifyRemove* GCGMessage::release_modify_remove() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.modify_remove)
  if (has_modify_remove()) {
    clear_has_message();
    ::proto::GCGMsgModifyRemove* temp = message_.modify_remove_;
    message_.modify_remove_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_modify_remove(::proto::GCGMsgModifyRemove* modify_remove) {
  clear_message();
  if (modify_remove) {
    set_has_modify_remove();
    message_.modify_remove_ = modify_remove;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.modify_remove)
}

// .proto.GCGMsgUseSkillEnd use_skill_end = 1411;
inline bool GCGMessage::has_use_skill_end() const {
  return message_case() == kUseSkillEnd;
}
inline void GCGMessage::set_has_use_skill_end() {
  _oneof_case_[0] = kUseSkillEnd;
}
inline void GCGMessage::clear_use_skill_end() {
  if (has_use_skill_end()) {
    delete message_.use_skill_end_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgUseSkillEnd& GCGMessage::use_skill_end() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.use_skill_end)
  return has_use_skill_end()
      ? *message_.use_skill_end_
      : ::proto::GCGMsgUseSkillEnd::default_instance();
}
inline ::proto::GCGMsgUseSkillEnd* GCGMessage::mutable_use_skill_end() {
  if (!has_use_skill_end()) {
    clear_message();
    set_has_use_skill_end();
    message_.use_skill_end_ = new ::proto::GCGMsgUseSkillEnd;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.use_skill_end)
  return message_.use_skill_end_;
}
inline ::proto::GCGMsgUseSkillEnd* GCGMessage::release_use_skill_end() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.use_skill_end)
  if (has_use_skill_end()) {
    clear_has_message();
    ::proto::GCGMsgUseSkillEnd* temp = message_.use_skill_end_;
    message_.use_skill_end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_use_skill_end(::proto::GCGMsgUseSkillEnd* use_skill_end) {
  clear_message();
  if (use_skill_end) {
    set_has_use_skill_end();
    message_.use_skill_end_ = use_skill_end;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.use_skill_end)
}

// .proto.GCGMsgDuelDataChange duel_data_change = 1008;
inline bool GCGMessage::has_duel_data_change() const {
  return message_case() == kDuelDataChange;
}
inline void GCGMessage::set_has_duel_data_change() {
  _oneof_case_[0] = kDuelDataChange;
}
inline void GCGMessage::clear_duel_data_change() {
  if (has_duel_data_change()) {
    delete message_.duel_data_change_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgDuelDataChange& GCGMessage::duel_data_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.duel_data_change)
  return has_duel_data_change()
      ? *message_.duel_data_change_
      : ::proto::GCGMsgDuelDataChange::default_instance();
}
inline ::proto::GCGMsgDuelDataChange* GCGMessage::mutable_duel_data_change() {
  if (!has_duel_data_change()) {
    clear_message();
    set_has_duel_data_change();
    message_.duel_data_change_ = new ::proto::GCGMsgDuelDataChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.duel_data_change)
  return message_.duel_data_change_;
}
inline ::proto::GCGMsgDuelDataChange* GCGMessage::release_duel_data_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.duel_data_change)
  if (has_duel_data_change()) {
    clear_has_message();
    ::proto::GCGMsgDuelDataChange* temp = message_.duel_data_change_;
    message_.duel_data_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_duel_data_change(::proto::GCGMsgDuelDataChange* duel_data_change) {
  clear_message();
  if (duel_data_change) {
    set_has_duel_data_change();
    message_.duel_data_change_ = duel_data_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.duel_data_change)
}

// .proto.GCGMsgClientPerform client_perform = 1035;
inline bool GCGMessage::has_client_perform() const {
  return message_case() == kClientPerform;
}
inline void GCGMessage::set_has_client_perform() {
  _oneof_case_[0] = kClientPerform;
}
inline void GCGMessage::clear_client_perform() {
  if (has_client_perform()) {
    delete message_.client_perform_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgClientPerform& GCGMessage::client_perform() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.client_perform)
  return has_client_perform()
      ? *message_.client_perform_
      : ::proto::GCGMsgClientPerform::default_instance();
}
inline ::proto::GCGMsgClientPerform* GCGMessage::mutable_client_perform() {
  if (!has_client_perform()) {
    clear_message();
    set_has_client_perform();
    message_.client_perform_ = new ::proto::GCGMsgClientPerform;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.client_perform)
  return message_.client_perform_;
}
inline ::proto::GCGMsgClientPerform* GCGMessage::release_client_perform() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.client_perform)
  if (has_client_perform()) {
    clear_has_message();
    ::proto::GCGMsgClientPerform* temp = message_.client_perform_;
    message_.client_perform_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_client_perform(::proto::GCGMsgClientPerform* client_perform) {
  clear_message();
  if (client_perform) {
    set_has_client_perform();
    message_.client_perform_ = client_perform;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.client_perform)
}

// .proto.GCGMsgGameOver game_over = 714;
inline bool GCGMessage::has_game_over() const {
  return message_case() == kGameOver;
}
inline void GCGMessage::set_has_game_over() {
  _oneof_case_[0] = kGameOver;
}
inline void GCGMessage::clear_game_over() {
  if (has_game_over()) {
    delete message_.game_over_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgGameOver& GCGMessage::game_over() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.game_over)
  return has_game_over()
      ? *message_.game_over_
      : ::proto::GCGMsgGameOver::default_instance();
}
inline ::proto::GCGMsgGameOver* GCGMessage::mutable_game_over() {
  if (!has_game_over()) {
    clear_message();
    set_has_game_over();
    message_.game_over_ = new ::proto::GCGMsgGameOver;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.game_over)
  return message_.game_over_;
}
inline ::proto::GCGMsgGameOver* GCGMessage::release_game_over() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.game_over)
  if (has_game_over()) {
    clear_has_message();
    ::proto::GCGMsgGameOver* temp = message_.game_over_;
    message_.game_over_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_game_over(::proto::GCGMsgGameOver* game_over) {
  clear_message();
  if (game_over) {
    set_has_game_over();
    message_.game_over_ = game_over;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.game_over)
}

// .proto.GCGMsgOpTimer op_timer = 1862;
inline bool GCGMessage::has_op_timer() const {
  return message_case() == kOpTimer;
}
inline void GCGMessage::set_has_op_timer() {
  _oneof_case_[0] = kOpTimer;
}
inline void GCGMessage::clear_op_timer() {
  if (has_op_timer()) {
    delete message_.op_timer_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgOpTimer& GCGMessage::op_timer() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.op_timer)
  return has_op_timer()
      ? *message_.op_timer_
      : ::proto::GCGMsgOpTimer::default_instance();
}
inline ::proto::GCGMsgOpTimer* GCGMessage::mutable_op_timer() {
  if (!has_op_timer()) {
    clear_message();
    set_has_op_timer();
    message_.op_timer_ = new ::proto::GCGMsgOpTimer;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.op_timer)
  return message_.op_timer_;
}
inline ::proto::GCGMsgOpTimer* GCGMessage::release_op_timer() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.op_timer)
  if (has_op_timer()) {
    clear_has_message();
    ::proto::GCGMsgOpTimer* temp = message_.op_timer_;
    message_.op_timer_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_op_timer(::proto::GCGMsgOpTimer* op_timer) {
  clear_message();
  if (op_timer) {
    set_has_op_timer();
    message_.op_timer_ = op_timer;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.op_timer)
}

// .proto.GCGMsgWaitingListChange waiting_list_change = 1678;
inline bool GCGMessage::has_waiting_list_change() const {
  return message_case() == kWaitingListChange;
}
inline void GCGMessage::set_has_waiting_list_change() {
  _oneof_case_[0] = kWaitingListChange;
}
inline void GCGMessage::clear_waiting_list_change() {
  if (has_waiting_list_change()) {
    delete message_.waiting_list_change_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgWaitingListChange& GCGMessage::waiting_list_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.waiting_list_change)
  return has_waiting_list_change()
      ? *message_.waiting_list_change_
      : ::proto::GCGMsgWaitingListChange::default_instance();
}
inline ::proto::GCGMsgWaitingListChange* GCGMessage::mutable_waiting_list_change() {
  if (!has_waiting_list_change()) {
    clear_message();
    set_has_waiting_list_change();
    message_.waiting_list_change_ = new ::proto::GCGMsgWaitingListChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.waiting_list_change)
  return message_.waiting_list_change_;
}
inline ::proto::GCGMsgWaitingListChange* GCGMessage::release_waiting_list_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.waiting_list_change)
  if (has_waiting_list_change()) {
    clear_has_message();
    ::proto::GCGMsgWaitingListChange* temp = message_.waiting_list_change_;
    message_.waiting_list_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_waiting_list_change(::proto::GCGMsgWaitingListChange* waiting_list_change) {
  clear_message();
  if (waiting_list_change) {
    set_has_waiting_list_change();
    message_.waiting_list_change_ = waiting_list_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.waiting_list_change)
}

// .proto.GCGMsgCardUpdate card_update = 1879;
inline bool GCGMessage::has_card_update() const {
  return message_case() == kCardUpdate;
}
inline void GCGMessage::set_has_card_update() {
  _oneof_case_[0] = kCardUpdate;
}
inline void GCGMessage::clear_card_update() {
  if (has_card_update()) {
    delete message_.card_update_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgCardUpdate& GCGMessage::card_update() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.card_update)
  return has_card_update()
      ? *message_.card_update_
      : ::proto::GCGMsgCardUpdate::default_instance();
}
inline ::proto::GCGMsgCardUpdate* GCGMessage::mutable_card_update() {
  if (!has_card_update()) {
    clear_message();
    set_has_card_update();
    message_.card_update_ = new ::proto::GCGMsgCardUpdate;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.card_update)
  return message_.card_update_;
}
inline ::proto::GCGMsgCardUpdate* GCGMessage::release_card_update() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.card_update)
  if (has_card_update()) {
    clear_has_message();
    ::proto::GCGMsgCardUpdate* temp = message_.card_update_;
    message_.card_update_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_card_update(::proto::GCGMsgCardUpdate* card_update) {
  clear_message();
  if (card_update) {
    set_has_card_update();
    message_.card_update_ = card_update;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.card_update)
}

// .proto.GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 2042;
inline bool GCGMessage::has_select_on_stage_by_effect() const {
  return message_case() == kSelectOnStageByEffect;
}
inline void GCGMessage::set_has_select_on_stage_by_effect() {
  _oneof_case_[0] = kSelectOnStageByEffect;
}
inline void GCGMessage::clear_select_on_stage_by_effect() {
  if (has_select_on_stage_by_effect()) {
    delete message_.select_on_stage_by_effect_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgSelectOnStageByEffect& GCGMessage::select_on_stage_by_effect() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.select_on_stage_by_effect)
  return has_select_on_stage_by_effect()
      ? *message_.select_on_stage_by_effect_
      : ::proto::GCGMsgSelectOnStageByEffect::default_instance();
}
inline ::proto::GCGMsgSelectOnStageByEffect* GCGMessage::mutable_select_on_stage_by_effect() {
  if (!has_select_on_stage_by_effect()) {
    clear_message();
    set_has_select_on_stage_by_effect();
    message_.select_on_stage_by_effect_ = new ::proto::GCGMsgSelectOnStageByEffect;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.select_on_stage_by_effect)
  return message_.select_on_stage_by_effect_;
}
inline ::proto::GCGMsgSelectOnStageByEffect* GCGMessage::release_select_on_stage_by_effect() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.select_on_stage_by_effect)
  if (has_select_on_stage_by_effect()) {
    clear_has_message();
    ::proto::GCGMsgSelectOnStageByEffect* temp = message_.select_on_stage_by_effect_;
    message_.select_on_stage_by_effect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_select_on_stage_by_effect(::proto::GCGMsgSelectOnStageByEffect* select_on_stage_by_effect) {
  clear_message();
  if (select_on_stage_by_effect) {
    set_has_select_on_stage_by_effect();
    message_.select_on_stage_by_effect_ = select_on_stage_by_effect;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.select_on_stage_by_effect)
}

// .proto.GCGMsgCostRevise cost_revise = 1350;
inline bool GCGMessage::has_cost_revise() const {
  return message_case() == kCostRevise;
}
inline void GCGMessage::set_has_cost_revise() {
  _oneof_case_[0] = kCostRevise;
}
inline void GCGMessage::clear_cost_revise() {
  if (has_cost_revise()) {
    delete message_.cost_revise_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgCostRevise& GCGMessage::cost_revise() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.cost_revise)
  return has_cost_revise()
      ? *message_.cost_revise_
      : ::proto::GCGMsgCostRevise::default_instance();
}
inline ::proto::GCGMsgCostRevise* GCGMessage::mutable_cost_revise() {
  if (!has_cost_revise()) {
    clear_message();
    set_has_cost_revise();
    message_.cost_revise_ = new ::proto::GCGMsgCostRevise;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.cost_revise)
  return message_.cost_revise_;
}
inline ::proto::GCGMsgCostRevise* GCGMessage::release_cost_revise() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.cost_revise)
  if (has_cost_revise()) {
    clear_has_message();
    ::proto::GCGMsgCostRevise* temp = message_.cost_revise_;
    message_.cost_revise_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_cost_revise(::proto::GCGMsgCostRevise* cost_revise) {
  clear_message();
  if (cost_revise) {
    set_has_cost_revise();
    message_.cost_revise_ = cost_revise;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.cost_revise)
}

// .proto.GCGMsgPhaseContinue phase_continue = 1474;
inline bool GCGMessage::has_phase_continue() const {
  return message_case() == kPhaseContinue;
}
inline void GCGMessage::set_has_phase_continue() {
  _oneof_case_[0] = kPhaseContinue;
}
inline void GCGMessage::clear_phase_continue() {
  if (has_phase_continue()) {
    delete message_.phase_continue_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgPhaseContinue& GCGMessage::phase_continue() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.phase_continue)
  return has_phase_continue()
      ? *message_.phase_continue_
      : ::proto::GCGMsgPhaseContinue::default_instance();
}
inline ::proto::GCGMsgPhaseContinue* GCGMessage::mutable_phase_continue() {
  if (!has_phase_continue()) {
    clear_message();
    set_has_phase_continue();
    message_.phase_continue_ = new ::proto::GCGMsgPhaseContinue;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.phase_continue)
  return message_.phase_continue_;
}
inline ::proto::GCGMsgPhaseContinue* GCGMessage::release_phase_continue() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.phase_continue)
  if (has_phase_continue()) {
    clear_has_message();
    ::proto::GCGMsgPhaseContinue* temp = message_.phase_continue_;
    message_.phase_continue_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_phase_continue(::proto::GCGMsgPhaseContinue* phase_continue) {
  clear_message();
  if (phase_continue) {
    set_has_phase_continue();
    message_.phase_continue_ = phase_continue;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.phase_continue)
}

// .proto.GCGMsgPVEIntentionInfo pve_intention_info = 1252;
inline bool GCGMessage::has_pve_intention_info() const {
  return message_case() == kPveIntentionInfo;
}
inline void GCGMessage::set_has_pve_intention_info() {
  _oneof_case_[0] = kPveIntentionInfo;
}
inline void GCGMessage::clear_pve_intention_info() {
  if (has_pve_intention_info()) {
    delete message_.pve_intention_info_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgPVEIntentionInfo& GCGMessage::pve_intention_info() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.pve_intention_info)
  return has_pve_intention_info()
      ? *message_.pve_intention_info_
      : ::proto::GCGMsgPVEIntentionInfo::default_instance();
}
inline ::proto::GCGMsgPVEIntentionInfo* GCGMessage::mutable_pve_intention_info() {
  if (!has_pve_intention_info()) {
    clear_message();
    set_has_pve_intention_info();
    message_.pve_intention_info_ = new ::proto::GCGMsgPVEIntentionInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.pve_intention_info)
  return message_.pve_intention_info_;
}
inline ::proto::GCGMsgPVEIntentionInfo* GCGMessage::release_pve_intention_info() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.pve_intention_info)
  if (has_pve_intention_info()) {
    clear_has_message();
    ::proto::GCGMsgPVEIntentionInfo* temp = message_.pve_intention_info_;
    message_.pve_intention_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_pve_intention_info(::proto::GCGMsgPVEIntentionInfo* pve_intention_info) {
  clear_message();
  if (pve_intention_info) {
    set_has_pve_intention_info();
    message_.pve_intention_info_ = pve_intention_info;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.pve_intention_info)
}

// .proto.GCGMsgPVEIntentionChange pve_intention_change = 893;
inline bool GCGMessage::has_pve_intention_change() const {
  return message_case() == kPveIntentionChange;
}
inline void GCGMessage::set_has_pve_intention_change() {
  _oneof_case_[0] = kPveIntentionChange;
}
inline void GCGMessage::clear_pve_intention_change() {
  if (has_pve_intention_change()) {
    delete message_.pve_intention_change_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgPVEIntentionChange& GCGMessage::pve_intention_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.pve_intention_change)
  return has_pve_intention_change()
      ? *message_.pve_intention_change_
      : ::proto::GCGMsgPVEIntentionChange::default_instance();
}
inline ::proto::GCGMsgPVEIntentionChange* GCGMessage::mutable_pve_intention_change() {
  if (!has_pve_intention_change()) {
    clear_message();
    set_has_pve_intention_change();
    message_.pve_intention_change_ = new ::proto::GCGMsgPVEIntentionChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.pve_intention_change)
  return message_.pve_intention_change_;
}
inline ::proto::GCGMsgPVEIntentionChange* GCGMessage::release_pve_intention_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.pve_intention_change)
  if (has_pve_intention_change()) {
    clear_has_message();
    ::proto::GCGMsgPVEIntentionChange* temp = message_.pve_intention_change_;
    message_.pve_intention_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_pve_intention_change(::proto::GCGMsgPVEIntentionChange* pve_intention_change) {
  clear_message();
  if (pve_intention_change) {
    set_has_pve_intention_change();
    message_.pve_intention_change_ = pve_intention_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.pve_intention_change)
}

// .proto.GCGMsgSkillLimitsChange skill_limits_change = 259;
inline bool GCGMessage::has_skill_limits_change() const {
  return message_case() == kSkillLimitsChange;
}
inline void GCGMessage::set_has_skill_limits_change() {
  _oneof_case_[0] = kSkillLimitsChange;
}
inline void GCGMessage::clear_skill_limits_change() {
  if (has_skill_limits_change()) {
    delete message_.skill_limits_change_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgSkillLimitsChange& GCGMessage::skill_limits_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.skill_limits_change)
  return has_skill_limits_change()
      ? *message_.skill_limits_change_
      : ::proto::GCGMsgSkillLimitsChange::default_instance();
}
inline ::proto::GCGMsgSkillLimitsChange* GCGMessage::mutable_skill_limits_change() {
  if (!has_skill_limits_change()) {
    clear_message();
    set_has_skill_limits_change();
    message_.skill_limits_change_ = new ::proto::GCGMsgSkillLimitsChange;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.skill_limits_change)
  return message_.skill_limits_change_;
}
inline ::proto::GCGMsgSkillLimitsChange* GCGMessage::release_skill_limits_change() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.skill_limits_change)
  if (has_skill_limits_change()) {
    clear_has_message();
    ::proto::GCGMsgSkillLimitsChange* temp = message_.skill_limits_change_;
    message_.skill_limits_change_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_skill_limits_change(::proto::GCGMsgSkillLimitsChange* skill_limits_change) {
  clear_message();
  if (skill_limits_change) {
    set_has_skill_limits_change();
    message_.skill_limits_change_ = skill_limits_change;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.skill_limits_change)
}

// .proto.GCGMsgNoDamageSkillResult no_damage_skill_result = 24;
inline bool GCGMessage::has_no_damage_skill_result() const {
  return message_case() == kNoDamageSkillResult;
}
inline void GCGMessage::set_has_no_damage_skill_result() {
  _oneof_case_[0] = kNoDamageSkillResult;
}
inline void GCGMessage::clear_no_damage_skill_result() {
  if (has_no_damage_skill_result()) {
    delete message_.no_damage_skill_result_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgNoDamageSkillResult& GCGMessage::no_damage_skill_result() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.no_damage_skill_result)
  return has_no_damage_skill_result()
      ? *message_.no_damage_skill_result_
      : ::proto::GCGMsgNoDamageSkillResult::default_instance();
}
inline ::proto::GCGMsgNoDamageSkillResult* GCGMessage::mutable_no_damage_skill_result() {
  if (!has_no_damage_skill_result()) {
    clear_message();
    set_has_no_damage_skill_result();
    message_.no_damage_skill_result_ = new ::proto::GCGMsgNoDamageSkillResult;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.no_damage_skill_result)
  return message_.no_damage_skill_result_;
}
inline ::proto::GCGMsgNoDamageSkillResult* GCGMessage::release_no_damage_skill_result() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.no_damage_skill_result)
  if (has_no_damage_skill_result()) {
    clear_has_message();
    ::proto::GCGMsgNoDamageSkillResult* temp = message_.no_damage_skill_result_;
    message_.no_damage_skill_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_no_damage_skill_result(::proto::GCGMsgNoDamageSkillResult* no_damage_skill_result) {
  clear_message();
  if (no_damage_skill_result) {
    set_has_no_damage_skill_result();
    message_.no_damage_skill_result_ = no_damage_skill_result;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.no_damage_skill_result)
}

// .proto.GCGMsgReactionBegin reaction_begin = 859;
inline bool GCGMessage::has_reaction_begin() const {
  return message_case() == kReactionBegin;
}
inline void GCGMessage::set_has_reaction_begin() {
  _oneof_case_[0] = kReactionBegin;
}
inline void GCGMessage::clear_reaction_begin() {
  if (has_reaction_begin()) {
    delete message_.reaction_begin_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgReactionBegin& GCGMessage::reaction_begin() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.reaction_begin)
  return has_reaction_begin()
      ? *message_.reaction_begin_
      : ::proto::GCGMsgReactionBegin::default_instance();
}
inline ::proto::GCGMsgReactionBegin* GCGMessage::mutable_reaction_begin() {
  if (!has_reaction_begin()) {
    clear_message();
    set_has_reaction_begin();
    message_.reaction_begin_ = new ::proto::GCGMsgReactionBegin;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.reaction_begin)
  return message_.reaction_begin_;
}
inline ::proto::GCGMsgReactionBegin* GCGMessage::release_reaction_begin() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.reaction_begin)
  if (has_reaction_begin()) {
    clear_has_message();
    ::proto::GCGMsgReactionBegin* temp = message_.reaction_begin_;
    message_.reaction_begin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_reaction_begin(::proto::GCGMsgReactionBegin* reaction_begin) {
  clear_message();
  if (reaction_begin) {
    set_has_reaction_begin();
    message_.reaction_begin_ = reaction_begin;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.reaction_begin)
}

// .proto.GCGMsgReactionEnd reaction_end = 1395;
inline bool GCGMessage::has_reaction_end() const {
  return message_case() == kReactionEnd;
}
inline void GCGMessage::set_has_reaction_end() {
  _oneof_case_[0] = kReactionEnd;
}
inline void GCGMessage::clear_reaction_end() {
  if (has_reaction_end()) {
    delete message_.reaction_end_;
    clear_has_message();
  }
}
inline  const ::proto::GCGMsgReactionEnd& GCGMessage::reaction_end() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessage.reaction_end)
  return has_reaction_end()
      ? *message_.reaction_end_
      : ::proto::GCGMsgReactionEnd::default_instance();
}
inline ::proto::GCGMsgReactionEnd* GCGMessage::mutable_reaction_end() {
  if (!has_reaction_end()) {
    clear_message();
    set_has_reaction_end();
    message_.reaction_end_ = new ::proto::GCGMsgReactionEnd;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGMessage.reaction_end)
  return message_.reaction_end_;
}
inline ::proto::GCGMsgReactionEnd* GCGMessage::release_reaction_end() {
  // @@protoc_insertion_point(field_release:proto.GCGMessage.reaction_end)
  if (has_reaction_end()) {
    clear_has_message();
    ::proto::GCGMsgReactionEnd* temp = message_.reaction_end_;
    message_.reaction_end_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGMessage::set_allocated_reaction_end(::proto::GCGMsgReactionEnd* reaction_end) {
  clear_message();
  if (reaction_end) {
    set_has_reaction_end();
    message_.reaction_end_ = reaction_end;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGMessage.reaction_end)
}

inline bool GCGMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void GCGMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline GCGMessage::MessageCase GCGMessage::message_case() const {
  return GCGMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GCGMessagePack

// .proto.GCGActionType action_type = 3;
inline void GCGMessagePack::clear_action_type() {
  action_type_ = 0;
}
inline ::proto::GCGActionType GCGMessagePack::action_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePack.action_type)
  return static_cast< ::proto::GCGActionType >(action_type_);
}
inline void GCGMessagePack::set_action_type(::proto::GCGActionType value) {
  
  action_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMessagePack.action_type)
}

// uint32 controller_id = 6;
inline void GCGMessagePack::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGMessagePack::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePack.controller_id)
  return controller_id_;
}
inline void GCGMessagePack::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMessagePack.controller_id)
}

// repeated .proto.GCGMessage msg_list = 13;
inline int GCGMessagePack::msg_list_size() const {
  return msg_list_.size();
}
inline void GCGMessagePack::clear_msg_list() {
  msg_list_.Clear();
}
inline const ::proto::GCGMessage& GCGMessagePack::msg_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePack.msg_list)
  return msg_list_.Get(index);
}
inline ::proto::GCGMessage* GCGMessagePack::mutable_msg_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMessagePack.msg_list)
  return msg_list_.Mutable(index);
}
inline ::proto::GCGMessage* GCGMessagePack::add_msg_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMessagePack.msg_list)
  return msg_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGMessage >*
GCGMessagePack::mutable_msg_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMessagePack.msg_list)
  return &msg_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessage >&
GCGMessagePack::msg_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMessagePack.msg_list)
  return msg_list_;
}

// -------------------------------------------------------------------

// GCGOperationRedraw

// repeated uint32 card_list = 2;
inline int GCGOperationRedraw::card_list_size() const {
  return card_list_.size();
}
inline void GCGOperationRedraw::clear_card_list() {
  card_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationRedraw::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationRedraw.card_list)
  return card_list_.Get(index);
}
inline void GCGOperationRedraw::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationRedraw.card_list)
}
inline void GCGOperationRedraw::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationRedraw.card_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationRedraw::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationRedraw.card_list)
  return card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationRedraw::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationRedraw.card_list)
  return &card_list_;
}

// -------------------------------------------------------------------

// GCGOperationOnStageSelect

// uint32 card_guid = 5;
inline void GCGOperationOnStageSelect::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationOnStageSelect::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationOnStageSelect.card_guid)
  return card_guid_;
}
inline void GCGOperationOnStageSelect::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationOnStageSelect.card_guid)
}

// repeated uint32 cost_dice_index_list = 4;
inline int GCGOperationOnStageSelect::cost_dice_index_list_size() const {
  return cost_dice_index_list_.size();
}
inline void GCGOperationOnStageSelect::clear_cost_dice_index_list() {
  cost_dice_index_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationOnStageSelect::cost_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationOnStageSelect.cost_dice_index_list)
  return cost_dice_index_list_.Get(index);
}
inline void GCGOperationOnStageSelect::set_cost_dice_index_list(int index, ::google::protobuf::uint32 value) {
  cost_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationOnStageSelect.cost_dice_index_list)
}
inline void GCGOperationOnStageSelect::add_cost_dice_index_list(::google::protobuf::uint32 value) {
  cost_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationOnStageSelect.cost_dice_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationOnStageSelect::cost_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationOnStageSelect.cost_dice_index_list)
  return cost_dice_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationOnStageSelect::mutable_cost_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationOnStageSelect.cost_dice_index_list)
  return &cost_dice_index_list_;
}

// -------------------------------------------------------------------

// GCGOperationReroll

// repeated uint32 dice_index_list = 12;
inline int GCGOperationReroll::dice_index_list_size() const {
  return dice_index_list_.size();
}
inline void GCGOperationReroll::clear_dice_index_list() {
  dice_index_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationReroll::dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReroll.dice_index_list)
  return dice_index_list_.Get(index);
}
inline void GCGOperationReroll::set_dice_index_list(int index, ::google::protobuf::uint32 value) {
  dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationReroll.dice_index_list)
}
inline void GCGOperationReroll::add_dice_index_list(::google::protobuf::uint32 value) {
  dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationReroll.dice_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationReroll::dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReroll.dice_index_list)
  return dice_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationReroll::mutable_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReroll.dice_index_list)
  return &dice_index_list_;
}

// -------------------------------------------------------------------

// GCGOperationAttack

// repeated uint32 cost_dice_index_list = 8;
inline int GCGOperationAttack::cost_dice_index_list_size() const {
  return cost_dice_index_list_.size();
}
inline void GCGOperationAttack::clear_cost_dice_index_list() {
  cost_dice_index_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationAttack::cost_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationAttack.cost_dice_index_list)
  return cost_dice_index_list_.Get(index);
}
inline void GCGOperationAttack::set_cost_dice_index_list(int index, ::google::protobuf::uint32 value) {
  cost_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationAttack.cost_dice_index_list)
}
inline void GCGOperationAttack::add_cost_dice_index_list(::google::protobuf::uint32 value) {
  cost_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationAttack.cost_dice_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationAttack::cost_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationAttack.cost_dice_index_list)
  return cost_dice_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationAttack::mutable_cost_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationAttack.cost_dice_index_list)
  return &cost_dice_index_list_;
}

// uint32 skill_id = 2;
inline void GCGOperationAttack::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationAttack::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationAttack.skill_id)
  return skill_id_;
}
inline void GCGOperationAttack::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationAttack.skill_id)
}

// -------------------------------------------------------------------

// GCGOperationPass

// -------------------------------------------------------------------

// GCGOperationPlayCard

// uint32 card_guid = 12;
inline void GCGOperationPlayCard::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationPlayCard::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.card_guid)
  return card_guid_;
}
inline void GCGOperationPlayCard::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.card_guid)
}

// repeated uint32 cost_dice_index_list = 4;
inline int GCGOperationPlayCard::cost_dice_index_list_size() const {
  return cost_dice_index_list_.size();
}
inline void GCGOperationPlayCard::clear_cost_dice_index_list() {
  cost_dice_index_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationPlayCard::cost_dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.cost_dice_index_list)
  return cost_dice_index_list_.Get(index);
}
inline void GCGOperationPlayCard::set_cost_dice_index_list(int index, ::google::protobuf::uint32 value) {
  cost_dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.cost_dice_index_list)
}
inline void GCGOperationPlayCard::add_cost_dice_index_list(::google::protobuf::uint32 value) {
  cost_dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationPlayCard.cost_dice_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationPlayCard::cost_dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationPlayCard.cost_dice_index_list)
  return cost_dice_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationPlayCard::mutable_cost_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationPlayCard.cost_dice_index_list)
  return &cost_dice_index_list_;
}

// repeated uint32 target_card_guid_list = 10;
inline int GCGOperationPlayCard::target_card_guid_list_size() const {
  return target_card_guid_list_.size();
}
inline void GCGOperationPlayCard::clear_target_card_guid_list() {
  target_card_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationPlayCard::target_card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.target_card_guid_list)
  return target_card_guid_list_.Get(index);
}
inline void GCGOperationPlayCard::set_target_card_guid_list(int index, ::google::protobuf::uint32 value) {
  target_card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.target_card_guid_list)
}
inline void GCGOperationPlayCard::add_target_card_guid_list(::google::protobuf::uint32 value) {
  target_card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationPlayCard.target_card_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationPlayCard::target_card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationPlayCard.target_card_guid_list)
  return target_card_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationPlayCard::mutable_target_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationPlayCard.target_card_guid_list)
  return &target_card_guid_list_;
}

// uint32 replace_card_guid = 8;
inline void GCGOperationPlayCard::clear_replace_card_guid() {
  replace_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationPlayCard::replace_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationPlayCard.replace_card_guid)
  return replace_card_guid_;
}
inline void GCGOperationPlayCard::set_replace_card_guid(::google::protobuf::uint32 value) {
  
  replace_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationPlayCard.replace_card_guid)
}

// -------------------------------------------------------------------

// GCGOperationReboot

// repeated uint32 cost_card_guid_list = 7;
inline int GCGOperationReboot::cost_card_guid_list_size() const {
  return cost_card_guid_list_.size();
}
inline void GCGOperationReboot::clear_cost_card_guid_list() {
  cost_card_guid_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationReboot::cost_card_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReboot.cost_card_guid_list)
  return cost_card_guid_list_.Get(index);
}
inline void GCGOperationReboot::set_cost_card_guid_list(int index, ::google::protobuf::uint32 value) {
  cost_card_guid_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationReboot.cost_card_guid_list)
}
inline void GCGOperationReboot::add_cost_card_guid_list(::google::protobuf::uint32 value) {
  cost_card_guid_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationReboot.cost_card_guid_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationReboot::cost_card_guid_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReboot.cost_card_guid_list)
  return cost_card_guid_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationReboot::mutable_cost_card_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReboot.cost_card_guid_list)
  return &cost_card_guid_list_;
}

// repeated uint32 dice_index_list = 6;
inline int GCGOperationReboot::dice_index_list_size() const {
  return dice_index_list_.size();
}
inline void GCGOperationReboot::clear_dice_index_list() {
  dice_index_list_.Clear();
}
inline ::google::protobuf::uint32 GCGOperationReboot::dice_index_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReboot.dice_index_list)
  return dice_index_list_.Get(index);
}
inline void GCGOperationReboot::set_dice_index_list(int index, ::google::protobuf::uint32 value) {
  dice_index_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGOperationReboot.dice_index_list)
}
inline void GCGOperationReboot::add_dice_index_list(::google::protobuf::uint32 value) {
  dice_index_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGOperationReboot.dice_index_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGOperationReboot::dice_index_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReboot.dice_index_list)
  return dice_index_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGOperationReboot::mutable_dice_index_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReboot.dice_index_list)
  return &dice_index_list_;
}

// -------------------------------------------------------------------

// GCGOperationSurrender

// -------------------------------------------------------------------

// GCGOperation

// .proto.GCGOperationRedraw op_redraw = 10;
inline bool GCGOperation::has_op_redraw() const {
  return op_case() == kOpRedraw;
}
inline void GCGOperation::set_has_op_redraw() {
  _oneof_case_[0] = kOpRedraw;
}
inline void GCGOperation::clear_op_redraw() {
  if (has_op_redraw()) {
    delete op_.op_redraw_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationRedraw& GCGOperation::op_redraw() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_redraw)
  return has_op_redraw()
      ? *op_.op_redraw_
      : ::proto::GCGOperationRedraw::default_instance();
}
inline ::proto::GCGOperationRedraw* GCGOperation::mutable_op_redraw() {
  if (!has_op_redraw()) {
    clear_op();
    set_has_op_redraw();
    op_.op_redraw_ = new ::proto::GCGOperationRedraw;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_redraw)
  return op_.op_redraw_;
}
inline ::proto::GCGOperationRedraw* GCGOperation::release_op_redraw() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_redraw)
  if (has_op_redraw()) {
    clear_has_op();
    ::proto::GCGOperationRedraw* temp = op_.op_redraw_;
    op_.op_redraw_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_redraw(::proto::GCGOperationRedraw* op_redraw) {
  clear_op();
  if (op_redraw) {
    set_has_op_redraw();
    op_.op_redraw_ = op_redraw;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_redraw)
}

// .proto.GCGOperationOnStageSelect op_select_on_stage = 4;
inline bool GCGOperation::has_op_select_on_stage() const {
  return op_case() == kOpSelectOnStage;
}
inline void GCGOperation::set_has_op_select_on_stage() {
  _oneof_case_[0] = kOpSelectOnStage;
}
inline void GCGOperation::clear_op_select_on_stage() {
  if (has_op_select_on_stage()) {
    delete op_.op_select_on_stage_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationOnStageSelect& GCGOperation::op_select_on_stage() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_select_on_stage)
  return has_op_select_on_stage()
      ? *op_.op_select_on_stage_
      : ::proto::GCGOperationOnStageSelect::default_instance();
}
inline ::proto::GCGOperationOnStageSelect* GCGOperation::mutable_op_select_on_stage() {
  if (!has_op_select_on_stage()) {
    clear_op();
    set_has_op_select_on_stage();
    op_.op_select_on_stage_ = new ::proto::GCGOperationOnStageSelect;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_select_on_stage)
  return op_.op_select_on_stage_;
}
inline ::proto::GCGOperationOnStageSelect* GCGOperation::release_op_select_on_stage() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_select_on_stage)
  if (has_op_select_on_stage()) {
    clear_has_op();
    ::proto::GCGOperationOnStageSelect* temp = op_.op_select_on_stage_;
    op_.op_select_on_stage_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_select_on_stage(::proto::GCGOperationOnStageSelect* op_select_on_stage) {
  clear_op();
  if (op_select_on_stage) {
    set_has_op_select_on_stage();
    op_.op_select_on_stage_ = op_select_on_stage;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_select_on_stage)
}

// .proto.GCGOperationReroll op_reroll = 9;
inline bool GCGOperation::has_op_reroll() const {
  return op_case() == kOpReroll;
}
inline void GCGOperation::set_has_op_reroll() {
  _oneof_case_[0] = kOpReroll;
}
inline void GCGOperation::clear_op_reroll() {
  if (has_op_reroll()) {
    delete op_.op_reroll_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationReroll& GCGOperation::op_reroll() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_reroll)
  return has_op_reroll()
      ? *op_.op_reroll_
      : ::proto::GCGOperationReroll::default_instance();
}
inline ::proto::GCGOperationReroll* GCGOperation::mutable_op_reroll() {
  if (!has_op_reroll()) {
    clear_op();
    set_has_op_reroll();
    op_.op_reroll_ = new ::proto::GCGOperationReroll;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_reroll)
  return op_.op_reroll_;
}
inline ::proto::GCGOperationReroll* GCGOperation::release_op_reroll() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_reroll)
  if (has_op_reroll()) {
    clear_has_op();
    ::proto::GCGOperationReroll* temp = op_.op_reroll_;
    op_.op_reroll_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_reroll(::proto::GCGOperationReroll* op_reroll) {
  clear_op();
  if (op_reroll) {
    set_has_op_reroll();
    op_.op_reroll_ = op_reroll;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_reroll)
}

// .proto.GCGOperationAttack op_attack = 11;
inline bool GCGOperation::has_op_attack() const {
  return op_case() == kOpAttack;
}
inline void GCGOperation::set_has_op_attack() {
  _oneof_case_[0] = kOpAttack;
}
inline void GCGOperation::clear_op_attack() {
  if (has_op_attack()) {
    delete op_.op_attack_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationAttack& GCGOperation::op_attack() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_attack)
  return has_op_attack()
      ? *op_.op_attack_
      : ::proto::GCGOperationAttack::default_instance();
}
inline ::proto::GCGOperationAttack* GCGOperation::mutable_op_attack() {
  if (!has_op_attack()) {
    clear_op();
    set_has_op_attack();
    op_.op_attack_ = new ::proto::GCGOperationAttack;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_attack)
  return op_.op_attack_;
}
inline ::proto::GCGOperationAttack* GCGOperation::release_op_attack() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_attack)
  if (has_op_attack()) {
    clear_has_op();
    ::proto::GCGOperationAttack* temp = op_.op_attack_;
    op_.op_attack_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_attack(::proto::GCGOperationAttack* op_attack) {
  clear_op();
  if (op_attack) {
    set_has_op_attack();
    op_.op_attack_ = op_attack;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_attack)
}

// .proto.GCGOperationPass op_pass = 15;
inline bool GCGOperation::has_op_pass() const {
  return op_case() == kOpPass;
}
inline void GCGOperation::set_has_op_pass() {
  _oneof_case_[0] = kOpPass;
}
inline void GCGOperation::clear_op_pass() {
  if (has_op_pass()) {
    delete op_.op_pass_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationPass& GCGOperation::op_pass() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_pass)
  return has_op_pass()
      ? *op_.op_pass_
      : ::proto::GCGOperationPass::default_instance();
}
inline ::proto::GCGOperationPass* GCGOperation::mutable_op_pass() {
  if (!has_op_pass()) {
    clear_op();
    set_has_op_pass();
    op_.op_pass_ = new ::proto::GCGOperationPass;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_pass)
  return op_.op_pass_;
}
inline ::proto::GCGOperationPass* GCGOperation::release_op_pass() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_pass)
  if (has_op_pass()) {
    clear_has_op();
    ::proto::GCGOperationPass* temp = op_.op_pass_;
    op_.op_pass_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_pass(::proto::GCGOperationPass* op_pass) {
  clear_op();
  if (op_pass) {
    set_has_op_pass();
    op_.op_pass_ = op_pass;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_pass)
}

// .proto.GCGOperationPlayCard op_play_card = 2;
inline bool GCGOperation::has_op_play_card() const {
  return op_case() == kOpPlayCard;
}
inline void GCGOperation::set_has_op_play_card() {
  _oneof_case_[0] = kOpPlayCard;
}
inline void GCGOperation::clear_op_play_card() {
  if (has_op_play_card()) {
    delete op_.op_play_card_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationPlayCard& GCGOperation::op_play_card() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_play_card)
  return has_op_play_card()
      ? *op_.op_play_card_
      : ::proto::GCGOperationPlayCard::default_instance();
}
inline ::proto::GCGOperationPlayCard* GCGOperation::mutable_op_play_card() {
  if (!has_op_play_card()) {
    clear_op();
    set_has_op_play_card();
    op_.op_play_card_ = new ::proto::GCGOperationPlayCard;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_play_card)
  return op_.op_play_card_;
}
inline ::proto::GCGOperationPlayCard* GCGOperation::release_op_play_card() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_play_card)
  if (has_op_play_card()) {
    clear_has_op();
    ::proto::GCGOperationPlayCard* temp = op_.op_play_card_;
    op_.op_play_card_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_play_card(::proto::GCGOperationPlayCard* op_play_card) {
  clear_op();
  if (op_play_card) {
    set_has_op_play_card();
    op_.op_play_card_ = op_play_card;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_play_card)
}

// .proto.GCGOperationReboot op_reboot = 5;
inline bool GCGOperation::has_op_reboot() const {
  return op_case() == kOpReboot;
}
inline void GCGOperation::set_has_op_reboot() {
  _oneof_case_[0] = kOpReboot;
}
inline void GCGOperation::clear_op_reboot() {
  if (has_op_reboot()) {
    delete op_.op_reboot_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationReboot& GCGOperation::op_reboot() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_reboot)
  return has_op_reboot()
      ? *op_.op_reboot_
      : ::proto::GCGOperationReboot::default_instance();
}
inline ::proto::GCGOperationReboot* GCGOperation::mutable_op_reboot() {
  if (!has_op_reboot()) {
    clear_op();
    set_has_op_reboot();
    op_.op_reboot_ = new ::proto::GCGOperationReboot;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_reboot)
  return op_.op_reboot_;
}
inline ::proto::GCGOperationReboot* GCGOperation::release_op_reboot() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_reboot)
  if (has_op_reboot()) {
    clear_has_op();
    ::proto::GCGOperationReboot* temp = op_.op_reboot_;
    op_.op_reboot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_reboot(::proto::GCGOperationReboot* op_reboot) {
  clear_op();
  if (op_reboot) {
    set_has_op_reboot();
    op_.op_reboot_ = op_reboot;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_reboot)
}

// .proto.GCGOperationSurrender op_surrender = 1;
inline bool GCGOperation::has_op_surrender() const {
  return op_case() == kOpSurrender;
}
inline void GCGOperation::set_has_op_surrender() {
  _oneof_case_[0] = kOpSurrender;
}
inline void GCGOperation::clear_op_surrender() {
  if (has_op_surrender()) {
    delete op_.op_surrender_;
    clear_has_op();
  }
}
inline  const ::proto::GCGOperationSurrender& GCGOperation::op_surrender() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperation.op_surrender)
  return has_op_surrender()
      ? *op_.op_surrender_
      : ::proto::GCGOperationSurrender::default_instance();
}
inline ::proto::GCGOperationSurrender* GCGOperation::mutable_op_surrender() {
  if (!has_op_surrender()) {
    clear_op();
    set_has_op_surrender();
    op_.op_surrender_ = new ::proto::GCGOperationSurrender;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperation.op_surrender)
  return op_.op_surrender_;
}
inline ::proto::GCGOperationSurrender* GCGOperation::release_op_surrender() {
  // @@protoc_insertion_point(field_release:proto.GCGOperation.op_surrender)
  if (has_op_surrender()) {
    clear_has_op();
    ::proto::GCGOperationSurrender* temp = op_.op_surrender_;
    op_.op_surrender_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void GCGOperation::set_allocated_op_surrender(::proto::GCGOperationSurrender* op_surrender) {
  clear_op();
  if (op_surrender) {
    set_has_op_surrender();
    op_.op_surrender_ = op_surrender;
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperation.op_surrender)
}

inline bool GCGOperation::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void GCGOperation::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline GCGOperation::OpCase GCGOperation::op_case() const {
  return GCGOperation::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GCGReplayOperationData

// uint32 controller_id = 8;
inline void GCGReplayOperationData::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGReplayOperationData::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGReplayOperationData.controller_id)
  return controller_id_;
}
inline void GCGReplayOperationData::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGReplayOperationData.controller_id)
}

// .proto.GCGOperation op = 5;
inline bool GCGReplayOperationData::has_op() const {
  return this != internal_default_instance() && op_ != NULL;
}
inline void GCGReplayOperationData::clear_op() {
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
}
inline const ::proto::GCGOperation& GCGReplayOperationData::op() const {
  const ::proto::GCGOperation* p = op_;
  // @@protoc_insertion_point(field_get:proto.GCGReplayOperationData.op)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGOperation*>(
      &::proto::_GCGOperation_default_instance_);
}
inline ::proto::GCGOperation* GCGReplayOperationData::mutable_op() {
  
  if (op_ == NULL) {
    op_ = new ::proto::GCGOperation;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGReplayOperationData.op)
  return op_;
}
inline ::proto::GCGOperation* GCGReplayOperationData::release_op() {
  // @@protoc_insertion_point(field_release:proto.GCGReplayOperationData.op)
  
  ::proto::GCGOperation* temp = op_;
  op_ = NULL;
  return temp;
}
inline void GCGReplayOperationData::set_allocated_op(::proto::GCGOperation* op) {
  delete op_;
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGReplayOperationData.op)
}

// -------------------------------------------------------------------

// GCGReplayControllerData

// uint32 controller_id = 13;
inline void GCGReplayControllerData::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGReplayControllerData::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGReplayControllerData.controller_id)
  return controller_id_;
}
inline void GCGReplayControllerData::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGReplayControllerData.controller_id)
}

// repeated uint32 card_id_list = 5;
inline int GCGReplayControllerData::card_id_list_size() const {
  return card_id_list_.size();
}
inline void GCGReplayControllerData::clear_card_id_list() {
  card_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGReplayControllerData::card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGReplayControllerData.card_id_list)
  return card_id_list_.Get(index);
}
inline void GCGReplayControllerData::set_card_id_list(int index, ::google::protobuf::uint32 value) {
  card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGReplayControllerData.card_id_list)
}
inline void GCGReplayControllerData::add_card_id_list(::google::protobuf::uint32 value) {
  card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGReplayControllerData.card_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGReplayControllerData::card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGReplayControllerData.card_id_list)
  return card_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGReplayControllerData::mutable_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGReplayControllerData.card_id_list)
  return &card_id_list_;
}

// -------------------------------------------------------------------

// GCGOperationReplay

// uint32 seed = 11;
inline void GCGOperationReplay::clear_seed() {
  seed_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationReplay::seed() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.seed)
  return seed_;
}
inline void GCGOperationReplay::set_seed(::google::protobuf::uint32 value) {
  
  seed_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReplay.seed)
}

// repeated .proto.GCGReplayOperationData operation_data_list = 9;
inline int GCGOperationReplay::operation_data_list_size() const {
  return operation_data_list_.size();
}
inline void GCGOperationReplay::clear_operation_data_list() {
  operation_data_list_.Clear();
}
inline const ::proto::GCGReplayOperationData& GCGOperationReplay::operation_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_.Get(index);
}
inline ::proto::GCGReplayOperationData* GCGOperationReplay::mutable_operation_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_.Mutable(index);
}
inline ::proto::GCGReplayOperationData* GCGOperationReplay::add_operation_data_list() {
  // @@protoc_insertion_point(field_add:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayOperationData >*
GCGOperationReplay::mutable_operation_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReplay.operation_data_list)
  return &operation_data_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayOperationData >&
GCGOperationReplay::operation_data_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReplay.operation_data_list)
  return operation_data_list_;
}

// repeated .proto.GCGReplayControllerData controller_data_list = 13;
inline int GCGOperationReplay::controller_data_list_size() const {
  return controller_data_list_.size();
}
inline void GCGOperationReplay::clear_controller_data_list() {
  controller_data_list_.Clear();
}
inline const ::proto::GCGReplayControllerData& GCGOperationReplay::controller_data_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_.Get(index);
}
inline ::proto::GCGReplayControllerData* GCGOperationReplay::mutable_controller_data_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_.Mutable(index);
}
inline ::proto::GCGReplayControllerData* GCGOperationReplay::add_controller_data_list() {
  // @@protoc_insertion_point(field_add:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayControllerData >*
GCGOperationReplay::mutable_controller_data_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGOperationReplay.controller_data_list)
  return &controller_data_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGReplayControllerData >&
GCGOperationReplay::controller_data_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGOperationReplay.controller_data_list)
  return controller_data_list_;
}

// uint32 game_id = 1;
inline void GCGOperationReplay::clear_game_id() {
  game_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationReplay::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReplay.game_id)
  return game_id_;
}
inline void GCGOperationReplay::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReplay.game_id)
}

// -------------------------------------------------------------------

// GCGToken

// uint32 value = 11;
inline void GCGToken::clear_value() {
  value_ = 0u;
}
inline ::google::protobuf::uint32 GCGToken::value() const {
  // @@protoc_insertion_point(field_get:proto.GCGToken.value)
  return value_;
}
inline void GCGToken::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGToken.value)
}

// uint32 key = 4;
inline void GCGToken::clear_key() {
  key_ = 0u;
}
inline ::google::protobuf::uint32 GCGToken::key() const {
  // @@protoc_insertion_point(field_get:proto.GCGToken.key)
  return key_;
}
inline void GCGToken::set_key(::google::protobuf::uint32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGToken.key)
}

// -------------------------------------------------------------------

// GCGCard

// bool is_show = 14;
inline void GCGCard::clear_is_show() {
  is_show_ = false;
}
inline bool GCGCard::is_show() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.is_show)
  return is_show_;
}
inline void GCGCard::set_is_show(bool value) {
  
  is_show_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.is_show)
}

// uint32 face_type = 5;
inline void GCGCard::clear_face_type() {
  face_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGCard::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.face_type)
  return face_type_;
}
inline void GCGCard::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.face_type)
}

// uint32 id = 6;
inline void GCGCard::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GCGCard::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.id)
  return id_;
}
inline void GCGCard::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.id)
}

// repeated .proto.GCGToken token_list = 2;
inline int GCGCard::token_list_size() const {
  return token_list_.size();
}
inline void GCGCard::clear_token_list() {
  token_list_.Clear();
}
inline const ::proto::GCGToken& GCGCard::token_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.token_list)
  return token_list_.Get(index);
}
inline ::proto::GCGToken* GCGCard::mutable_token_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCard.token_list)
  return token_list_.Mutable(index);
}
inline ::proto::GCGToken* GCGCard::add_token_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCard.token_list)
  return token_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGToken >*
GCGCard::mutable_token_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.token_list)
  return &token_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGToken >&
GCGCard::token_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.token_list)
  return token_list_;
}

// repeated uint32 skill_id_list = 11;
inline int GCGCard::skill_id_list_size() const {
  return skill_id_list_.size();
}
inline void GCGCard::clear_skill_id_list() {
  skill_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGCard::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.skill_id_list)
  return skill_id_list_.Get(index);
}
inline void GCGCard::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGCard.skill_id_list)
}
inline void GCGCard::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGCard.skill_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGCard::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.skill_id_list)
  return skill_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGCard::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.skill_id_list)
  return &skill_id_list_;
}

// repeated .proto.GCGSkillLimitsInfo skill_limits_list = 8;
inline int GCGCard::skill_limits_list_size() const {
  return skill_limits_list_.size();
}
inline void GCGCard::clear_skill_limits_list() {
  skill_limits_list_.Clear();
}
inline const ::proto::GCGSkillLimitsInfo& GCGCard::skill_limits_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.skill_limits_list)
  return skill_limits_list_.Get(index);
}
inline ::proto::GCGSkillLimitsInfo* GCGCard::mutable_skill_limits_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGCard.skill_limits_list)
  return skill_limits_list_.Mutable(index);
}
inline ::proto::GCGSkillLimitsInfo* GCGCard::add_skill_limits_list() {
  // @@protoc_insertion_point(field_add:proto.GCGCard.skill_limits_list)
  return skill_limits_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >*
GCGCard::mutable_skill_limits_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.skill_limits_list)
  return &skill_limits_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillLimitsInfo >&
GCGCard::skill_limits_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.skill_limits_list)
  return skill_limits_list_;
}

// uint32 guid = 15;
inline void GCGCard::clear_guid() {
  guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGCard::guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.guid)
  return guid_;
}
inline void GCGCard::set_guid(::google::protobuf::uint32 value) {
  
  guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.guid)
}

// repeated uint32 tag_list = 3;
inline int GCGCard::tag_list_size() const {
  return tag_list_.size();
}
inline void GCGCard::clear_tag_list() {
  tag_list_.Clear();
}
inline ::google::protobuf::uint32 GCGCard::tag_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.tag_list)
  return tag_list_.Get(index);
}
inline void GCGCard::set_tag_list(int index, ::google::protobuf::uint32 value) {
  tag_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGCard.tag_list)
}
inline void GCGCard::add_tag_list(::google::protobuf::uint32 value) {
  tag_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGCard.tag_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGCard::tag_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGCard.tag_list)
  return tag_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGCard::mutable_tag_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGCard.tag_list)
  return &tag_list_;
}

// uint32 controller_id = 7;
inline void GCGCard::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGCard::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGCard.controller_id)
  return controller_id_;
}
inline void GCGCard::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGCard.controller_id)
}

// -------------------------------------------------------------------

// GCGZone

// repeated uint32 card_list = 4;
inline int GCGZone::card_list_size() const {
  return card_list_.size();
}
inline void GCGZone::clear_card_list() {
  card_list_.Clear();
}
inline ::google::protobuf::uint32 GCGZone::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGZone.card_list)
  return card_list_.Get(index);
}
inline void GCGZone::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGZone.card_list)
}
inline void GCGZone::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGZone.card_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGZone::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGZone.card_list)
  return card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGZone::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGZone.card_list)
  return &card_list_;
}

// -------------------------------------------------------------------

// GCGWaitingCharacter

// uint32 card_id = 2;
inline void GCGWaitingCharacter::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGWaitingCharacter::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGWaitingCharacter.card_id)
  return card_id_;
}
inline void GCGWaitingCharacter::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWaitingCharacter.card_id)
}

// uint32 cond_count = 14;
inline void GCGWaitingCharacter::clear_cond_count() {
  cond_count_ = 0u;
}
inline ::google::protobuf::uint32 GCGWaitingCharacter::cond_count() const {
  // @@protoc_insertion_point(field_get:proto.GCGWaitingCharacter.cond_count)
  return cond_count_;
}
inline void GCGWaitingCharacter::set_cond_count(::google::protobuf::uint32 value) {
  
  cond_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWaitingCharacter.cond_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGPlayerField

// map<uint32, .proto.GCGZone> modify_zone_map = 2;
inline int GCGPlayerField::modify_zone_map_size() const {
  return modify_zone_map_.size();
}
inline void GCGPlayerField::clear_modify_zone_map() {
  modify_zone_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >&
GCGPlayerField::modify_zone_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPlayerField.modify_zone_map)
  return modify_zone_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGZone >*
GCGPlayerField::mutable_modify_zone_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPlayerField.modify_zone_map)
  return modify_zone_map_.MutableMap();
}

// uint32 cur_waiting_index = 383;
inline void GCGPlayerField::clear_cur_waiting_index() {
  cur_waiting_index_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerField::cur_waiting_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.cur_waiting_index)
  return cur_waiting_index_;
}
inline void GCGPlayerField::set_cur_waiting_index(::google::protobuf::uint32 value) {
  
  cur_waiting_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.cur_waiting_index)
}

// .proto.GCGZone summon_zone = 1;
inline bool GCGPlayerField::has_summon_zone() const {
  return this != internal_default_instance() && summon_zone_ != NULL;
}
inline void GCGPlayerField::clear_summon_zone() {
  if (GetArenaNoVirtual() == NULL && summon_zone_ != NULL) delete summon_zone_;
  summon_zone_ = NULL;
}
inline const ::proto::GCGZone& GCGPlayerField::summon_zone() const {
  const ::proto::GCGZone* p = summon_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.summon_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
inline ::proto::GCGZone* GCGPlayerField::mutable_summon_zone() {
  
  if (summon_zone_ == NULL) {
    summon_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.summon_zone)
  return summon_zone_;
}
inline ::proto::GCGZone* GCGPlayerField::release_summon_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.summon_zone)
  
  ::proto::GCGZone* temp = summon_zone_;
  summon_zone_ = NULL;
  return temp;
}
inline void GCGPlayerField::set_allocated_summon_zone(::proto::GCGZone* summon_zone) {
  delete summon_zone_;
  summon_zone_ = summon_zone;
  if (summon_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.summon_zone)
}

// uint32 field_show_id = 8;
inline void GCGPlayerField::clear_field_show_id() {
  field_show_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerField::field_show_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.field_show_id)
  return field_show_id_;
}
inline void GCGPlayerField::set_field_show_id(::google::protobuf::uint32 value) {
  
  field_show_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.field_show_id)
}

// uint32 card_back_show_id = 12;
inline void GCGPlayerField::clear_card_back_show_id() {
  card_back_show_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerField::card_back_show_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.card_back_show_id)
  return card_back_show_id_;
}
inline void GCGPlayerField::set_card_back_show_id(::google::protobuf::uint32 value) {
  
  card_back_show_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.card_back_show_id)
}

// uint32 dice_count = 3;
inline void GCGPlayerField::clear_dice_count() {
  dice_count_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerField::dice_count() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.dice_count)
  return dice_count_;
}
inline void GCGPlayerField::set_dice_count(::google::protobuf::uint32 value) {
  
  dice_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.dice_count)
}

// uint32 controller_id = 10;
inline void GCGPlayerField::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerField::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.controller_id)
  return controller_id_;
}
inline void GCGPlayerField::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.controller_id)
}

// .proto.GCGZone on_stage_zone = 14;
inline bool GCGPlayerField::has_on_stage_zone() const {
  return this != internal_default_instance() && on_stage_zone_ != NULL;
}
inline void GCGPlayerField::clear_on_stage_zone() {
  if (GetArenaNoVirtual() == NULL && on_stage_zone_ != NULL) delete on_stage_zone_;
  on_stage_zone_ = NULL;
}
inline const ::proto::GCGZone& GCGPlayerField::on_stage_zone() const {
  const ::proto::GCGZone* p = on_stage_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.on_stage_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
inline ::proto::GCGZone* GCGPlayerField::mutable_on_stage_zone() {
  
  if (on_stage_zone_ == NULL) {
    on_stage_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.on_stage_zone)
  return on_stage_zone_;
}
inline ::proto::GCGZone* GCGPlayerField::release_on_stage_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.on_stage_zone)
  
  ::proto::GCGZone* temp = on_stage_zone_;
  on_stage_zone_ = NULL;
  return temp;
}
inline void GCGPlayerField::set_allocated_on_stage_zone(::proto::GCGZone* on_stage_zone) {
  delete on_stage_zone_;
  on_stage_zone_ = on_stage_zone;
  if (on_stage_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.on_stage_zone)
}

// bool is_passed = 7;
inline void GCGPlayerField::clear_is_passed() {
  is_passed_ = false;
}
inline bool GCGPlayerField::is_passed() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.is_passed)
  return is_passed_;
}
inline void GCGPlayerField::set_is_passed(bool value) {
  
  is_passed_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.is_passed)
}

// .proto.GCGZone character_zone = 5;
inline bool GCGPlayerField::has_character_zone() const {
  return this != internal_default_instance() && character_zone_ != NULL;
}
inline void GCGPlayerField::clear_character_zone() {
  if (GetArenaNoVirtual() == NULL && character_zone_ != NULL) delete character_zone_;
  character_zone_ = NULL;
}
inline const ::proto::GCGZone& GCGPlayerField::character_zone() const {
  const ::proto::GCGZone* p = character_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.character_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
inline ::proto::GCGZone* GCGPlayerField::mutable_character_zone() {
  
  if (character_zone_ == NULL) {
    character_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.character_zone)
  return character_zone_;
}
inline ::proto::GCGZone* GCGPlayerField::release_character_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.character_zone)
  
  ::proto::GCGZone* temp = character_zone_;
  character_zone_ = NULL;
  return temp;
}
inline void GCGPlayerField::set_allocated_character_zone(::proto::GCGZone* character_zone) {
  delete character_zone_;
  character_zone_ = character_zone;
  if (character_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.character_zone)
}

// uint32 on_stage_character_guid = 6;
inline void GCGPlayerField::clear_on_stage_character_guid() {
  on_stage_character_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerField::on_stage_character_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.on_stage_character_guid)
  return on_stage_character_guid_;
}
inline void GCGPlayerField::set_on_stage_character_guid(::google::protobuf::uint32 value) {
  
  on_stage_character_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.on_stage_character_guid)
}

// .proto.GCGZone assist_zone = 15;
inline bool GCGPlayerField::has_assist_zone() const {
  return this != internal_default_instance() && assist_zone_ != NULL;
}
inline void GCGPlayerField::clear_assist_zone() {
  if (GetArenaNoVirtual() == NULL && assist_zone_ != NULL) delete assist_zone_;
  assist_zone_ = NULL;
}
inline const ::proto::GCGZone& GCGPlayerField::assist_zone() const {
  const ::proto::GCGZone* p = assist_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.assist_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
inline ::proto::GCGZone* GCGPlayerField::mutable_assist_zone() {
  
  if (assist_zone_ == NULL) {
    assist_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.assist_zone)
  return assist_zone_;
}
inline ::proto::GCGZone* GCGPlayerField::release_assist_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.assist_zone)
  
  ::proto::GCGZone* temp = assist_zone_;
  assist_zone_ = NULL;
  return temp;
}
inline void GCGPlayerField::set_allocated_assist_zone(::proto::GCGZone* assist_zone) {
  delete assist_zone_;
  assist_zone_ = assist_zone;
  if (assist_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.assist_zone)
}

// uint32 deck_card_num = 13;
inline void GCGPlayerField::clear_deck_card_num() {
  deck_card_num_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerField::deck_card_num() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.deck_card_num)
  return deck_card_num_;
}
inline void GCGPlayerField::set_deck_card_num(::google::protobuf::uint32 value) {
  
  deck_card_num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.deck_card_num)
}

// repeated .proto.GCGDiceSideType dice_side_list = 11;
inline int GCGPlayerField::dice_side_list_size() const {
  return dice_side_list_.size();
}
inline void GCGPlayerField::clear_dice_side_list() {
  dice_side_list_.Clear();
}
inline ::proto::GCGDiceSideType GCGPlayerField::dice_side_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.dice_side_list)
  return static_cast< ::proto::GCGDiceSideType >(dice_side_list_.Get(index));
}
inline void GCGPlayerField::set_dice_side_list(int index, ::proto::GCGDiceSideType value) {
  dice_side_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGPlayerField.dice_side_list)
}
inline void GCGPlayerField::add_dice_side_list(::proto::GCGDiceSideType value) {
  dice_side_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGPlayerField.dice_side_list)
}
inline const ::google::protobuf::RepeatedField<int>&
GCGPlayerField::dice_side_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerField.dice_side_list)
  return dice_side_list_;
}
inline ::google::protobuf::RepeatedField<int>*
GCGPlayerField::mutable_dice_side_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerField.dice_side_list)
  return &dice_side_list_;
}

// .proto.GCGZone hand_zone = 9;
inline bool GCGPlayerField::has_hand_zone() const {
  return this != internal_default_instance() && hand_zone_ != NULL;
}
inline void GCGPlayerField::clear_hand_zone() {
  if (GetArenaNoVirtual() == NULL && hand_zone_ != NULL) delete hand_zone_;
  hand_zone_ = NULL;
}
inline const ::proto::GCGZone& GCGPlayerField::hand_zone() const {
  const ::proto::GCGZone* p = hand_zone_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.hand_zone)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGZone*>(
      &::proto::_GCGZone_default_instance_);
}
inline ::proto::GCGZone* GCGPlayerField::mutable_hand_zone() {
  
  if (hand_zone_ == NULL) {
    hand_zone_ = new ::proto::GCGZone;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.hand_zone)
  return hand_zone_;
}
inline ::proto::GCGZone* GCGPlayerField::release_hand_zone() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerField.hand_zone)
  
  ::proto::GCGZone* temp = hand_zone_;
  hand_zone_ = NULL;
  return temp;
}
inline void GCGPlayerField::set_allocated_hand_zone(::proto::GCGZone* hand_zone) {
  delete hand_zone_;
  hand_zone_ = hand_zone;
  if (hand_zone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerField.hand_zone)
}

// repeated .proto.GCGPVEIntention intention_list = 1192;
inline int GCGPlayerField::intention_list_size() const {
  return intention_list_.size();
}
inline void GCGPlayerField::clear_intention_list() {
  intention_list_.Clear();
}
inline const ::proto::GCGPVEIntention& GCGPlayerField::intention_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.intention_list)
  return intention_list_.Get(index);
}
inline ::proto::GCGPVEIntention* GCGPlayerField::mutable_intention_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.intention_list)
  return intention_list_.Mutable(index);
}
inline ::proto::GCGPVEIntention* GCGPlayerField::add_intention_list() {
  // @@protoc_insertion_point(field_add:proto.GCGPlayerField.intention_list)
  return intention_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >*
GCGPlayerField::mutable_intention_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerField.intention_list)
  return &intention_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >&
GCGPlayerField::intention_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerField.intention_list)
  return intention_list_;
}

// repeated .proto.GCGWaitingCharacter waiting_list = 4;
inline int GCGPlayerField::waiting_list_size() const {
  return waiting_list_.size();
}
inline void GCGPlayerField::clear_waiting_list() {
  waiting_list_.Clear();
}
inline const ::proto::GCGWaitingCharacter& GCGPlayerField::waiting_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerField.waiting_list)
  return waiting_list_.Get(index);
}
inline ::proto::GCGWaitingCharacter* GCGPlayerField::mutable_waiting_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerField.waiting_list)
  return waiting_list_.Mutable(index);
}
inline ::proto::GCGWaitingCharacter* GCGPlayerField::add_waiting_list() {
  // @@protoc_insertion_point(field_add:proto.GCGPlayerField.waiting_list)
  return waiting_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGWaitingCharacter >*
GCGPlayerField::mutable_waiting_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerField.waiting_list)
  return &waiting_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGWaitingCharacter >&
GCGPlayerField::waiting_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerField.waiting_list)
  return waiting_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGPhase

// .proto.GCGPhaseType phase_type = 5;
inline void GCGPhase::clear_phase_type() {
  phase_type_ = 0;
}
inline ::proto::GCGPhaseType GCGPhase::phase_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGPhase.phase_type)
  return static_cast< ::proto::GCGPhaseType >(phase_type_);
}
inline void GCGPhase::set_phase_type(::proto::GCGPhaseType value) {
  
  phase_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPhase.phase_type)
}

// map<uint32, uint32> allow_controller_map = 6;
inline int GCGPhase::allow_controller_map_size() const {
  return allow_controller_map_.size();
}
inline void GCGPhase::clear_allow_controller_map() {
  allow_controller_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGPhase::allow_controller_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPhase.allow_controller_map)
  return allow_controller_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGPhase::mutable_allow_controller_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPhase.allow_controller_map)
  return allow_controller_map_.MutableMap();
}

// -------------------------------------------------------------------

// GCGControllerShowInfo

// .proto.ProfilePicture profile_picture = 11;
inline bool GCGControllerShowInfo::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
inline void GCGControllerShowInfo::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
inline const ::proto::ProfilePicture& GCGControllerShowInfo::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.GCGControllerShowInfo.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
inline ::proto::ProfilePicture* GCGControllerShowInfo::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGControllerShowInfo.profile_picture)
  return profile_picture_;
}
inline ::proto::ProfilePicture* GCGControllerShowInfo::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.GCGControllerShowInfo.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
inline void GCGControllerShowInfo::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGControllerShowInfo.profile_picture)
}

// string nick_name = 14;
inline void GCGControllerShowInfo::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCGControllerShowInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:proto.GCGControllerShowInfo.nick_name)
  return nick_name_.GetNoArena();
}
inline void GCGControllerShowInfo::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGControllerShowInfo.nick_name)
}
#if LANG_CXX11
inline void GCGControllerShowInfo::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGControllerShowInfo.nick_name)
}
#endif
inline void GCGControllerShowInfo::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGControllerShowInfo.nick_name)
}
inline void GCGControllerShowInfo::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGControllerShowInfo.nick_name)
}
inline ::std::string* GCGControllerShowInfo::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGControllerShowInfo.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCGControllerShowInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:proto.GCGControllerShowInfo.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCGControllerShowInfo::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGControllerShowInfo.nick_name)
}

// uint32 controller_id = 9;
inline void GCGControllerShowInfo::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGControllerShowInfo::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGControllerShowInfo.controller_id)
  return controller_id_;
}
inline void GCGControllerShowInfo::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGControllerShowInfo.controller_id)
}

// -------------------------------------------------------------------

// GCGPVEIntention

// uint32 card_guid = 9;
inline void GCGPVEIntention::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGPVEIntention::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPVEIntention.card_guid)
  return card_guid_;
}
inline void GCGPVEIntention::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPVEIntention.card_guid)
}

// repeated uint32 skill_id_list = 7;
inline int GCGPVEIntention::skill_id_list_size() const {
  return skill_id_list_.size();
}
inline void GCGPVEIntention::clear_skill_id_list() {
  skill_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGPVEIntention::skill_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPVEIntention.skill_id_list)
  return skill_id_list_.Get(index);
}
inline void GCGPVEIntention::set_skill_id_list(int index, ::google::protobuf::uint32 value) {
  skill_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGPVEIntention.skill_id_list)
}
inline void GCGPVEIntention::add_skill_id_list(::google::protobuf::uint32 value) {
  skill_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGPVEIntention.skill_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGPVEIntention::skill_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPVEIntention.skill_id_list)
  return skill_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGPVEIntention::mutable_skill_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPVEIntention.skill_id_list)
  return &skill_id_list_;
}

// -------------------------------------------------------------------

// GCGDuelChallenge

// uint32 total_progress = 7;
inline void GCGDuelChallenge::clear_total_progress() {
  total_progress_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuelChallenge::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelChallenge.total_progress)
  return total_progress_;
}
inline void GCGDuelChallenge::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelChallenge.total_progress)
}

// uint32 challenge_id = 10;
inline void GCGDuelChallenge::clear_challenge_id() {
  challenge_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuelChallenge::challenge_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelChallenge.challenge_id)
  return challenge_id_;
}
inline void GCGDuelChallenge::set_challenge_id(::google::protobuf::uint32 value) {
  
  challenge_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelChallenge.challenge_id)
}

// uint32 cur_progress = 12;
inline void GCGDuelChallenge::clear_cur_progress() {
  cur_progress_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuelChallenge::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuelChallenge.cur_progress)
  return cur_progress_;
}
inline void GCGDuelChallenge::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuelChallenge.cur_progress)
}

// -------------------------------------------------------------------

// GCGDuel

// .proto.GCGCostReviseInfo cost_revise = 10;
inline bool GCGDuel::has_cost_revise() const {
  return this != internal_default_instance() && cost_revise_ != NULL;
}
inline void GCGDuel::clear_cost_revise() {
  if (GetArenaNoVirtual() == NULL && cost_revise_ != NULL) delete cost_revise_;
  cost_revise_ = NULL;
}
inline const ::proto::GCGCostReviseInfo& GCGDuel::cost_revise() const {
  const ::proto::GCGCostReviseInfo* p = cost_revise_;
  // @@protoc_insertion_point(field_get:proto.GCGDuel.cost_revise)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGCostReviseInfo*>(
      &::proto::_GCGCostReviseInfo_default_instance_);
}
inline ::proto::GCGCostReviseInfo* GCGDuel::mutable_cost_revise() {
  
  if (cost_revise_ == NULL) {
    cost_revise_ = new ::proto::GCGCostReviseInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.cost_revise)
  return cost_revise_;
}
inline ::proto::GCGCostReviseInfo* GCGDuel::release_cost_revise() {
  // @@protoc_insertion_point(field_release:proto.GCGDuel.cost_revise)
  
  ::proto::GCGCostReviseInfo* temp = cost_revise_;
  cost_revise_ = NULL;
  return temp;
}
inline void GCGDuel::set_allocated_cost_revise(::proto::GCGCostReviseInfo* cost_revise) {
  delete cost_revise_;
  cost_revise_ = cost_revise;
  if (cost_revise) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDuel.cost_revise)
}

// .proto.GCGGameBusinessType business_type = 14;
inline void GCGDuel::clear_business_type() {
  business_type_ = 0;
}
inline ::proto::GCGGameBusinessType GCGDuel::business_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
inline void GCGDuel::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.business_type)
}

// repeated .proto.GCGCard history_card_list = 121;
inline int GCGDuel::history_card_list_size() const {
  return history_card_list_.size();
}
inline void GCGDuel::clear_history_card_list() {
  history_card_list_.Clear();
}
inline const ::proto::GCGCard& GCGDuel::history_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.history_card_list)
  return history_card_list_.Get(index);
}
inline ::proto::GCGCard* GCGDuel::mutable_history_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.history_card_list)
  return history_card_list_.Mutable(index);
}
inline ::proto::GCGCard* GCGDuel::add_history_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.history_card_list)
  return history_card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >*
GCGDuel::mutable_history_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.history_card_list)
  return &history_card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >&
GCGDuel::history_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.history_card_list)
  return history_card_list_;
}

// uint32 operation_seq = 1210;
inline void GCGDuel::clear_operation_seq() {
  operation_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuel::operation_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.operation_seq)
  return operation_seq_;
}
inline void GCGDuel::set_operation_seq(::google::protobuf::uint32 value) {
  
  operation_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.operation_seq)
}

// uint32 game_id = 11;
inline void GCGDuel::clear_game_id() {
  game_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuel::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.game_id)
  return game_id_;
}
inline void GCGDuel::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.game_id)
}

// uint32 game_type = 2;
inline void GCGDuel::clear_game_type() {
  game_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuel::game_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.game_type)
  return game_type_;
}
inline void GCGDuel::set_game_type(::google::protobuf::uint32 value) {
  
  game_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.game_type)
}

// repeated .proto.GCGCard card_list = 9;
inline int GCGDuel::card_list_size() const {
  return card_list_.size();
}
inline void GCGDuel::clear_card_list() {
  card_list_.Clear();
}
inline const ::proto::GCGCard& GCGDuel::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.card_list)
  return card_list_.Get(index);
}
inline ::proto::GCGCard* GCGDuel::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.card_list)
  return card_list_.Mutable(index);
}
inline ::proto::GCGCard* GCGDuel::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.card_list)
  return card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >*
GCGDuel::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.card_list)
  return &card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGCard >&
GCGDuel::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.card_list)
  return card_list_;
}

// uint32 server_seq = 3;
inline void GCGDuel::clear_server_seq() {
  server_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuel::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.server_seq)
  return server_seq_;
}
inline void GCGDuel::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.server_seq)
}

// repeated .proto.GCGMessagePack history_msg_pack_list = 796;
inline int GCGDuel::history_msg_pack_list_size() const {
  return history_msg_pack_list_.size();
}
inline void GCGDuel::clear_history_msg_pack_list() {
  history_msg_pack_list_.Clear();
}
inline const ::proto::GCGMessagePack& GCGDuel::history_msg_pack_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_.Get(index);
}
inline ::proto::GCGMessagePack* GCGDuel::mutable_history_msg_pack_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_.Mutable(index);
}
inline ::proto::GCGMessagePack* GCGDuel::add_history_msg_pack_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >*
GCGDuel::mutable_history_msg_pack_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.history_msg_pack_list)
  return &history_msg_pack_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >&
GCGDuel::history_msg_pack_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.history_msg_pack_list)
  return history_msg_pack_list_;
}

// uint32 round = 15;
inline void GCGDuel::clear_round() {
  round_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuel::round() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.round)
  return round_;
}
inline void GCGDuel::set_round(::google::protobuf::uint32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.round)
}

// repeated .proto.GCGPlayerField field_list = 7;
inline int GCGDuel::field_list_size() const {
  return field_list_.size();
}
inline void GCGDuel::clear_field_list() {
  field_list_.Clear();
}
inline const ::proto::GCGPlayerField& GCGDuel::field_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.field_list)
  return field_list_.Get(index);
}
inline ::proto::GCGPlayerField* GCGDuel::mutable_field_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.field_list)
  return field_list_.Mutable(index);
}
inline ::proto::GCGPlayerField* GCGDuel::add_field_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.field_list)
  return field_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerField >*
GCGDuel::mutable_field_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.field_list)
  return &field_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerField >&
GCGDuel::field_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.field_list)
  return field_list_;
}

// uint32 controller_id = 13;
inline void GCGDuel::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuel::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.controller_id)
  return controller_id_;
}
inline void GCGDuel::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.controller_id)
}

// .proto.GCGPhase phase = 8;
inline bool GCGDuel::has_phase() const {
  return this != internal_default_instance() && phase_ != NULL;
}
inline void GCGDuel::clear_phase() {
  if (GetArenaNoVirtual() == NULL && phase_ != NULL) delete phase_;
  phase_ = NULL;
}
inline const ::proto::GCGPhase& GCGDuel::phase() const {
  const ::proto::GCGPhase* p = phase_;
  // @@protoc_insertion_point(field_get:proto.GCGDuel.phase)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGPhase*>(
      &::proto::_GCGPhase_default_instance_);
}
inline ::proto::GCGPhase* GCGDuel::mutable_phase() {
  
  if (phase_ == NULL) {
    phase_ = new ::proto::GCGPhase;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.phase)
  return phase_;
}
inline ::proto::GCGPhase* GCGDuel::release_phase() {
  // @@protoc_insertion_point(field_release:proto.GCGDuel.phase)
  
  ::proto::GCGPhase* temp = phase_;
  phase_ = NULL;
  return temp;
}
inline void GCGDuel::set_allocated_phase(::proto::GCGPhase* phase) {
  delete phase_;
  phase_ = phase;
  if (phase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDuel.phase)
}

// repeated uint32 card_id_list = 4;
inline int GCGDuel::card_id_list_size() const {
  return card_id_list_.size();
}
inline void GCGDuel::clear_card_id_list() {
  card_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDuel::card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.card_id_list)
  return card_id_list_.Get(index);
}
inline void GCGDuel::set_card_id_list(int index, ::google::protobuf::uint32 value) {
  card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDuel.card_id_list)
}
inline void GCGDuel::add_card_id_list(::google::protobuf::uint32 value) {
  card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDuel.card_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDuel::card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.card_id_list)
  return card_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDuel::mutable_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.card_id_list)
  return &card_id_list_;
}

// repeated .proto.GCGPVEIntention intetion_list = 1;
inline int GCGDuel::intetion_list_size() const {
  return intetion_list_.size();
}
inline void GCGDuel::clear_intetion_list() {
  intetion_list_.Clear();
}
inline const ::proto::GCGPVEIntention& GCGDuel::intetion_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.intetion_list)
  return intetion_list_.Get(index);
}
inline ::proto::GCGPVEIntention* GCGDuel::mutable_intetion_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.intetion_list)
  return intetion_list_.Mutable(index);
}
inline ::proto::GCGPVEIntention* GCGDuel::add_intetion_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.intetion_list)
  return intetion_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >*
GCGDuel::mutable_intetion_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.intetion_list)
  return &intetion_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGPVEIntention >&
GCGDuel::intetion_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.intetion_list)
  return intetion_list_;
}

// repeated uint32 forbid_finish_challenge_list = 647;
inline int GCGDuel::forbid_finish_challenge_list_size() const {
  return forbid_finish_challenge_list_.size();
}
inline void GCGDuel::clear_forbid_finish_challenge_list() {
  forbid_finish_challenge_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDuel::forbid_finish_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_.Get(index);
}
inline void GCGDuel::set_forbid_finish_challenge_list(int index, ::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDuel.forbid_finish_challenge_list)
}
inline void GCGDuel::add_forbid_finish_challenge_list(::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDuel.forbid_finish_challenge_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDuel::forbid_finish_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDuel::mutable_forbid_finish_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.forbid_finish_challenge_list)
  return &forbid_finish_challenge_list_;
}

// repeated .proto.GCGDuelChallenge challenge_list = 5;
inline int GCGDuel::challenge_list_size() const {
  return challenge_list_.size();
}
inline void GCGDuel::clear_challenge_list() {
  challenge_list_.Clear();
}
inline const ::proto::GCGDuelChallenge& GCGDuel::challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.challenge_list)
  return challenge_list_.Get(index);
}
inline ::proto::GCGDuelChallenge* GCGDuel::mutable_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.challenge_list)
  return challenge_list_.Mutable(index);
}
inline ::proto::GCGDuelChallenge* GCGDuel::add_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.challenge_list)
  return challenge_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGDuelChallenge >*
GCGDuel::mutable_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.challenge_list)
  return &challenge_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGDuelChallenge >&
GCGDuel::challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.challenge_list)
  return challenge_list_;
}

// uint32 cur_controller_id = 12;
inline void GCGDuel::clear_cur_controller_id() {
  cur_controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDuel::cur_controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.cur_controller_id)
  return cur_controller_id_;
}
inline void GCGDuel::set_cur_controller_id(::google::protobuf::uint32 value) {
  
  cur_controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDuel.cur_controller_id)
}

// repeated .proto.GCGControllerShowInfo show_info_list = 6;
inline int GCGDuel::show_info_list_size() const {
  return show_info_list_.size();
}
inline void GCGDuel::clear_show_info_list() {
  show_info_list_.Clear();
}
inline const ::proto::GCGControllerShowInfo& GCGDuel::show_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDuel.show_info_list)
  return show_info_list_.Get(index);
}
inline ::proto::GCGControllerShowInfo* GCGDuel::mutable_show_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDuel.show_info_list)
  return show_info_list_.Mutable(index);
}
inline ::proto::GCGControllerShowInfo* GCGDuel::add_show_info_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDuel.show_info_list)
  return show_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGControllerShowInfo >*
GCGDuel::mutable_show_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDuel.show_info_list)
  return &show_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGControllerShowInfo >&
GCGDuel::show_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDuel.show_info_list)
  return show_info_list_;
}

// -------------------------------------------------------------------

// GCGOperationReq

// uint32 op_seq = 2;
inline void GCGOperationReq::clear_op_seq() {
  op_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationReq::op_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReq.op_seq)
  return op_seq_;
}
inline void GCGOperationReq::set_op_seq(::google::protobuf::uint32 value) {
  
  op_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReq.op_seq)
}

// uint32 redirect_uid = 7;
inline void GCGOperationReq::clear_redirect_uid() {
  redirect_uid_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationReq::redirect_uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationReq.redirect_uid)
  return redirect_uid_;
}
inline void GCGOperationReq::set_redirect_uid(::google::protobuf::uint32 value) {
  
  redirect_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationReq.redirect_uid)
}

// .proto.GCGOperation op = 15;
inline bool GCGOperationReq::has_op() const {
  return this != internal_default_instance() && op_ != NULL;
}
inline void GCGOperationReq::clear_op() {
  if (GetArenaNoVirtual() == NULL && op_ != NULL) delete op_;
  op_ = NULL;
}
inline const ::proto::GCGOperation& GCGOperationReq::op() const {
  const ::proto::GCGOperation* p = op_;
  // @@protoc_insertion_point(field_get:proto.GCGOperationReq.op)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGOperation*>(
      &::proto::_GCGOperation_default_instance_);
}
inline ::proto::GCGOperation* GCGOperationReq::mutable_op() {
  
  if (op_ == NULL) {
    op_ = new ::proto::GCGOperation;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGOperationReq.op)
  return op_;
}
inline ::proto::GCGOperation* GCGOperationReq::release_op() {
  // @@protoc_insertion_point(field_release:proto.GCGOperationReq.op)
  
  ::proto::GCGOperation* temp = op_;
  op_ = NULL;
  return temp;
}
inline void GCGOperationReq::set_allocated_op(::proto::GCGOperation* op) {
  delete op_;
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGOperationReq.op)
}

// -------------------------------------------------------------------

// GCGOperationRsp

// int32 retcode = 8;
inline void GCGOperationRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGOperationRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationRsp.retcode)
  return retcode_;
}
inline void GCGOperationRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationRsp.retcode)
}

// uint32 op_seq = 4;
inline void GCGOperationRsp::clear_op_seq() {
  op_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGOperationRsp::op_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGOperationRsp.op_seq)
  return op_seq_;
}
inline void GCGOperationRsp::set_op_seq(::google::protobuf::uint32 value) {
  
  op_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGOperationRsp.op_seq)
}

// -------------------------------------------------------------------

// GCGMessagePackNotify

// repeated .proto.GCGMessagePack msg_pack_list = 11;
inline int GCGMessagePackNotify::msg_pack_list_size() const {
  return msg_pack_list_.size();
}
inline void GCGMessagePackNotify::clear_msg_pack_list() {
  msg_pack_list_.Clear();
}
inline const ::proto::GCGMessagePack& GCGMessagePackNotify::msg_pack_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Get(index);
}
inline ::proto::GCGMessagePack* GCGMessagePackNotify::mutable_msg_pack_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Mutable(index);
}
inline ::proto::GCGMessagePack* GCGMessagePackNotify::add_msg_pack_list() {
  // @@protoc_insertion_point(field_add:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >*
GCGMessagePackNotify::mutable_msg_pack_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGMessagePackNotify.msg_pack_list)
  return &msg_pack_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGMessagePack >&
GCGMessagePackNotify::msg_pack_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGMessagePackNotify.msg_pack_list)
  return msg_pack_list_;
}

// uint32 server_seq = 5;
inline void GCGMessagePackNotify::clear_server_seq() {
  server_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGMessagePackNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGMessagePackNotify.server_seq)
  return server_seq_;
}
inline void GCGMessagePackNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGMessagePackNotify.server_seq)
}

// -------------------------------------------------------------------

// GCGAskDuelReq

// -------------------------------------------------------------------

// GCGAskDuelRsp

// int32 retcode = 3;
inline void GCGAskDuelRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGAskDuelRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGAskDuelRsp.retcode)
  return retcode_;
}
inline void GCGAskDuelRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGAskDuelRsp.retcode)
}

// .proto.GCGDuel duel = 13;
inline bool GCGAskDuelRsp::has_duel() const {
  return this != internal_default_instance() && duel_ != NULL;
}
inline void GCGAskDuelRsp::clear_duel() {
  if (GetArenaNoVirtual() == NULL && duel_ != NULL) delete duel_;
  duel_ = NULL;
}
inline const ::proto::GCGDuel& GCGAskDuelRsp::duel() const {
  const ::proto::GCGDuel* p = duel_;
  // @@protoc_insertion_point(field_get:proto.GCGAskDuelRsp.duel)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGDuel*>(
      &::proto::_GCGDuel_default_instance_);
}
inline ::proto::GCGDuel* GCGAskDuelRsp::mutable_duel() {
  
  if (duel_ == NULL) {
    duel_ = new ::proto::GCGDuel;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGAskDuelRsp.duel)
  return duel_;
}
inline ::proto::GCGDuel* GCGAskDuelRsp::release_duel() {
  // @@protoc_insertion_point(field_release:proto.GCGAskDuelRsp.duel)
  
  ::proto::GCGDuel* temp = duel_;
  duel_ = NULL;
  return temp;
}
inline void GCGAskDuelRsp::set_allocated_duel(::proto::GCGDuel* duel) {
  delete duel_;
  duel_ = duel;
  if (duel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGAskDuelRsp.duel)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGPlayerBriefData

// map<uint32, uint32> card_face_map = 8;
inline int GCGPlayerBriefData::card_face_map_size() const {
  return card_face_map_.size();
}
inline void GCGPlayerBriefData::clear_card_face_map() {
  card_face_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >&
GCGPlayerBriefData::card_face_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGPlayerBriefData.card_face_map)
  return card_face_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::google::protobuf::uint32 >*
GCGPlayerBriefData::mutable_card_face_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGPlayerBriefData.card_face_map)
  return card_face_map_.MutableMap();
}

// string nick_name = 9;
inline void GCGPlayerBriefData::clear_nick_name() {
  nick_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCGPlayerBriefData::nick_name() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.nick_name)
  return nick_name_.GetNoArena();
}
inline void GCGPlayerBriefData::set_nick_name(const ::std::string& value) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.nick_name)
}
#if LANG_CXX11
inline void GCGPlayerBriefData::set_nick_name(::std::string&& value) {
  
  nick_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGPlayerBriefData.nick_name)
}
#endif
inline void GCGPlayerBriefData::set_nick_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGPlayerBriefData.nick_name)
}
inline void GCGPlayerBriefData::set_nick_name(const char* value, size_t size) {
  
  nick_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGPlayerBriefData.nick_name)
}
inline ::std::string* GCGPlayerBriefData::mutable_nick_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerBriefData.nick_name)
  return nick_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCGPlayerBriefData::release_nick_name() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerBriefData.nick_name)
  
  return nick_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCGPlayerBriefData::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name != NULL) {
    
  } else {
    
  }
  nick_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nick_name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerBriefData.nick_name)
}

// .proto.ProfilePicture profile_picture = 12;
inline bool GCGPlayerBriefData::has_profile_picture() const {
  return this != internal_default_instance() && profile_picture_ != NULL;
}
inline void GCGPlayerBriefData::clear_profile_picture() {
  if (GetArenaNoVirtual() == NULL && profile_picture_ != NULL) delete profile_picture_;
  profile_picture_ = NULL;
}
inline const ::proto::ProfilePicture& GCGPlayerBriefData::profile_picture() const {
  const ::proto::ProfilePicture* p = profile_picture_;
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.profile_picture)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::ProfilePicture*>(
      &::proto::_ProfilePicture_default_instance_);
}
inline ::proto::ProfilePicture* GCGPlayerBriefData::mutable_profile_picture() {
  
  if (profile_picture_ == NULL) {
    profile_picture_ = new ::proto::ProfilePicture;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGPlayerBriefData.profile_picture)
  return profile_picture_;
}
inline ::proto::ProfilePicture* GCGPlayerBriefData::release_profile_picture() {
  // @@protoc_insertion_point(field_release:proto.GCGPlayerBriefData.profile_picture)
  
  ::proto::ProfilePicture* temp = profile_picture_;
  profile_picture_ = NULL;
  return temp;
}
inline void GCGPlayerBriefData::set_allocated_profile_picture(::proto::ProfilePicture* profile_picture) {
  delete profile_picture_;
  profile_picture_ = profile_picture;
  if (profile_picture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGPlayerBriefData.profile_picture)
}

// repeated uint32 card_id_list = 3;
inline int GCGPlayerBriefData::card_id_list_size() const {
  return card_id_list_.size();
}
inline void GCGPlayerBriefData::clear_card_id_list() {
  card_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGPlayerBriefData::card_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.card_id_list)
  return card_id_list_.Get(index);
}
inline void GCGPlayerBriefData::set_card_id_list(int index, ::google::protobuf::uint32 value) {
  card_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.card_id_list)
}
inline void GCGPlayerBriefData::add_card_id_list(::google::protobuf::uint32 value) {
  card_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGPlayerBriefData.card_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGPlayerBriefData::card_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGPlayerBriefData.card_id_list)
  return card_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGPlayerBriefData::mutable_card_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGPlayerBriefData.card_id_list)
  return &card_id_list_;
}

// uint32 controller_id = 5;
inline void GCGPlayerBriefData::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerBriefData::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.controller_id)
  return controller_id_;
}
inline void GCGPlayerBriefData::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.controller_id)
}

// uint32 uid = 10;
inline void GCGPlayerBriefData::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerBriefData::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerBriefData.uid)
  return uid_;
}
inline void GCGPlayerBriefData::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerBriefData.uid)
}

// -------------------------------------------------------------------

// GCGGameBriefData

// uint32 game_id = 14;
inline void GCGGameBriefData::clear_game_id() {
  game_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGGameBriefData::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.game_id)
  return game_id_;
}
inline void GCGGameBriefData::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.game_id)
}

// uint32 game_uid = 9;
inline void GCGGameBriefData::clear_game_uid() {
  game_uid_ = 0u;
}
inline ::google::protobuf::uint32 GCGGameBriefData::game_uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.game_uid)
  return game_uid_;
}
inline void GCGGameBriefData::set_game_uid(::google::protobuf::uint32 value) {
  
  game_uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.game_uid)
}

// .proto.GCGGameBusinessType business_type = 13;
inline void GCGGameBriefData::clear_business_type() {
  business_type_ = 0;
}
inline ::proto::GCGGameBusinessType GCGGameBriefData::business_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
inline void GCGGameBriefData::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.business_type)
}

// uint32 verify_code = 5;
inline void GCGGameBriefData::clear_verify_code() {
  verify_code_ = 0u;
}
inline ::google::protobuf::uint32 GCGGameBriefData::verify_code() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.verify_code)
  return verify_code_;
}
inline void GCGGameBriefData::set_verify_code(::google::protobuf::uint32 value) {
  
  verify_code_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefData.verify_code)
}

// repeated .proto.GCGPlayerBriefData player_brief_list = 12;
inline int GCGGameBriefData::player_brief_list_size() const {
  return player_brief_list_.size();
}
inline void GCGGameBriefData::clear_player_brief_list() {
  player_brief_list_.Clear();
}
inline const ::proto::GCGPlayerBriefData& GCGGameBriefData::player_brief_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_.Get(index);
}
inline ::proto::GCGPlayerBriefData* GCGGameBriefData::mutable_player_brief_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_.Mutable(index);
}
inline ::proto::GCGPlayerBriefData* GCGGameBriefData::add_player_brief_list() {
  // @@protoc_insertion_point(field_add:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerBriefData >*
GCGGameBriefData::mutable_player_brief_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGGameBriefData.player_brief_list)
  return &player_brief_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerBriefData >&
GCGGameBriefData::player_brief_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGGameBriefData.player_brief_list)
  return player_brief_list_;
}

// -------------------------------------------------------------------

// GCGGameBriefDataNotify

// bool is_new_game = 11;
inline void GCGGameBriefDataNotify::clear_is_new_game() {
  is_new_game_ = false;
}
inline bool GCGGameBriefDataNotify::is_new_game() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefDataNotify.is_new_game)
  return is_new_game_;
}
inline void GCGGameBriefDataNotify::set_is_new_game(bool value) {
  
  is_new_game_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameBriefDataNotify.is_new_game)
}

// .proto.GCGGameBriefData gcg_brief_data = 10;
inline bool GCGGameBriefDataNotify::has_gcg_brief_data() const {
  return this != internal_default_instance() && gcg_brief_data_ != NULL;
}
inline void GCGGameBriefDataNotify::clear_gcg_brief_data() {
  if (GetArenaNoVirtual() == NULL && gcg_brief_data_ != NULL) delete gcg_brief_data_;
  gcg_brief_data_ = NULL;
}
inline const ::proto::GCGGameBriefData& GCGGameBriefDataNotify::gcg_brief_data() const {
  const ::proto::GCGGameBriefData* p = gcg_brief_data_;
  // @@protoc_insertion_point(field_get:proto.GCGGameBriefDataNotify.gcg_brief_data)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGGameBriefData*>(
      &::proto::_GCGGameBriefData_default_instance_);
}
inline ::proto::GCGGameBriefData* GCGGameBriefDataNotify::mutable_gcg_brief_data() {
  
  if (gcg_brief_data_ == NULL) {
    gcg_brief_data_ = new ::proto::GCGGameBriefData;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGGameBriefDataNotify.gcg_brief_data)
  return gcg_brief_data_;
}
inline ::proto::GCGGameBriefData* GCGGameBriefDataNotify::release_gcg_brief_data() {
  // @@protoc_insertion_point(field_release:proto.GCGGameBriefDataNotify.gcg_brief_data)
  
  ::proto::GCGGameBriefData* temp = gcg_brief_data_;
  gcg_brief_data_ = NULL;
  return temp;
}
inline void GCGGameBriefDataNotify::set_allocated_gcg_brief_data(::proto::GCGGameBriefData* gcg_brief_data) {
  delete gcg_brief_data_;
  gcg_brief_data_ = gcg_brief_data;
  if (gcg_brief_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGGameBriefDataNotify.gcg_brief_data)
}

// -------------------------------------------------------------------

// GCGInitFinishReq

// -------------------------------------------------------------------

// GCGInitFinishRsp

// int32 retcode = 2;
inline void GCGInitFinishRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGInitFinishRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGInitFinishRsp.retcode)
  return retcode_;
}
inline void GCGInitFinishRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInitFinishRsp.retcode)
}

// -------------------------------------------------------------------

// GCGHeartBeatNotify

// uint32 server_seq = 6;
inline void GCGHeartBeatNotify::clear_server_seq() {
  server_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGHeartBeatNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGHeartBeatNotify.server_seq)
  return server_seq_;
}
inline void GCGHeartBeatNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGHeartBeatNotify.server_seq)
}

// -------------------------------------------------------------------

// GCGSkillPreviewHpInfo

// .proto.GCGSkillHpChangeType change_type = 4;
inline void GCGSkillPreviewHpInfo::clear_change_type() {
  change_type_ = 0;
}
inline ::proto::GCGSkillHpChangeType GCGSkillPreviewHpInfo::change_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewHpInfo.change_type)
  return static_cast< ::proto::GCGSkillHpChangeType >(change_type_);
}
inline void GCGSkillPreviewHpInfo::set_change_type(::proto::GCGSkillHpChangeType value) {
  
  change_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewHpInfo.change_type)
}

// uint32 hp_change_value = 13;
inline void GCGSkillPreviewHpInfo::clear_hp_change_value() {
  hp_change_value_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewHpInfo::hp_change_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewHpInfo.hp_change_value)
  return hp_change_value_;
}
inline void GCGSkillPreviewHpInfo::set_hp_change_value(::google::protobuf::uint32 value) {
  
  hp_change_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewHpInfo.hp_change_value)
}

// -------------------------------------------------------------------

// GCGSkillPreviewReactionInfo

// uint32 source_element = 13;
inline void GCGSkillPreviewReactionInfo::clear_source_element() {
  source_element_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewReactionInfo::source_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewReactionInfo.source_element)
  return source_element_;
}
inline void GCGSkillPreviewReactionInfo::set_source_element(::google::protobuf::uint32 value) {
  
  source_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewReactionInfo.source_element)
}

// uint32 target_element = 1;
inline void GCGSkillPreviewReactionInfo::clear_target_element() {
  target_element_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewReactionInfo::target_element() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewReactionInfo.target_element)
  return target_element_;
}
inline void GCGSkillPreviewReactionInfo::set_target_element(::google::protobuf::uint32 value) {
  
  target_element_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewReactionInfo.target_element)
}

// -------------------------------------------------------------------

// GCGSkillPreviewElementReactionInfo

// repeated uint32 fresh_list = 8;
inline int GCGSkillPreviewElementReactionInfo::fresh_list_size() const {
  return fresh_list_.size();
}
inline void GCGSkillPreviewElementReactionInfo::clear_fresh_list() {
  fresh_list_.Clear();
}
inline ::google::protobuf::uint32 GCGSkillPreviewElementReactionInfo::fresh_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
  return fresh_list_.Get(index);
}
inline void GCGSkillPreviewElementReactionInfo::set_fresh_list(int index, ::google::protobuf::uint32 value) {
  fresh_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
}
inline void GCGSkillPreviewElementReactionInfo::add_fresh_list(::google::protobuf::uint32 value) {
  fresh_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSkillPreviewElementReactionInfo::fresh_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
  return fresh_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSkillPreviewElementReactionInfo::mutable_fresh_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewElementReactionInfo.fresh_list)
  return &fresh_list_;
}

// repeated uint32 source_list = 2;
inline int GCGSkillPreviewElementReactionInfo::source_list_size() const {
  return source_list_.size();
}
inline void GCGSkillPreviewElementReactionInfo::clear_source_list() {
  source_list_.Clear();
}
inline ::google::protobuf::uint32 GCGSkillPreviewElementReactionInfo::source_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewElementReactionInfo.source_list)
  return source_list_.Get(index);
}
inline void GCGSkillPreviewElementReactionInfo::set_source_list(int index, ::google::protobuf::uint32 value) {
  source_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewElementReactionInfo.source_list)
}
inline void GCGSkillPreviewElementReactionInfo::add_source_list(::google::protobuf::uint32 value) {
  source_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewElementReactionInfo.source_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSkillPreviewElementReactionInfo::source_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewElementReactionInfo.source_list)
  return source_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSkillPreviewElementReactionInfo::mutable_source_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewElementReactionInfo.source_list)
  return &source_list_;
}

// repeated .proto.GCGSkillPreviewReactionInfo reaction_list = 14;
inline int GCGSkillPreviewElementReactionInfo::reaction_list_size() const {
  return reaction_list_.size();
}
inline void GCGSkillPreviewElementReactionInfo::clear_reaction_list() {
  reaction_list_.Clear();
}
inline const ::proto::GCGSkillPreviewReactionInfo& GCGSkillPreviewElementReactionInfo::reaction_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_.Get(index);
}
inline ::proto::GCGSkillPreviewReactionInfo* GCGSkillPreviewElementReactionInfo::mutable_reaction_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewReactionInfo* GCGSkillPreviewElementReactionInfo::add_reaction_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewReactionInfo >*
GCGSkillPreviewElementReactionInfo::mutable_reaction_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return &reaction_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewReactionInfo >&
GCGSkillPreviewElementReactionInfo::reaction_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewElementReactionInfo.reaction_list)
  return reaction_list_;
}

// -------------------------------------------------------------------

// GCGSkillPreviewCardInfo

// uint32 controller_id = 3;
inline void GCGSkillPreviewCardInfo::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewCardInfo::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.controller_id)
  return controller_id_;
}
inline void GCGSkillPreviewCardInfo::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.controller_id)
}

// uint32 owner_card_guid = 11;
inline void GCGSkillPreviewCardInfo::clear_owner_card_guid() {
  owner_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewCardInfo::owner_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.owner_card_guid)
  return owner_card_guid_;
}
inline void GCGSkillPreviewCardInfo::set_owner_card_guid(::google::protobuf::uint32 value) {
  
  owner_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.owner_card_guid)
}

// .proto.GCGZoneType zone_type = 14;
inline void GCGSkillPreviewCardInfo::clear_zone_type() {
  zone_type_ = 0;
}
inline ::proto::GCGZoneType GCGSkillPreviewCardInfo::zone_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.zone_type)
  return static_cast< ::proto::GCGZoneType >(zone_type_);
}
inline void GCGSkillPreviewCardInfo::set_zone_type(::proto::GCGZoneType value) {
  
  zone_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.zone_type)
}

// uint32 card_id = 13;
inline void GCGSkillPreviewCardInfo::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewCardInfo::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.card_id)
  return card_id_;
}
inline void GCGSkillPreviewCardInfo::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.card_id)
}

// uint32 card_guid = 6;
inline void GCGSkillPreviewCardInfo::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewCardInfo::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewCardInfo.card_guid)
  return card_guid_;
}
inline void GCGSkillPreviewCardInfo::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewCardInfo.card_guid)
}

// -------------------------------------------------------------------

// GCGSkillPreviewOnstageChangeInfo

// uint32 target_onstage_card_guid = 6;
inline void GCGSkillPreviewOnstageChangeInfo::clear_target_onstage_card_guid() {
  target_onstage_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewOnstageChangeInfo::target_onstage_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewOnstageChangeInfo.target_onstage_card_guid)
  return target_onstage_card_guid_;
}
inline void GCGSkillPreviewOnstageChangeInfo::set_target_onstage_card_guid(::google::protobuf::uint32 value) {
  
  target_onstage_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewOnstageChangeInfo.target_onstage_card_guid)
}

// uint32 source_onstage_card_guid = 15;
inline void GCGSkillPreviewOnstageChangeInfo::clear_source_onstage_card_guid() {
  source_onstage_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewOnstageChangeInfo::source_onstage_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewOnstageChangeInfo.source_onstage_card_guid)
  return source_onstage_card_guid_;
}
inline void GCGSkillPreviewOnstageChangeInfo::set_source_onstage_card_guid(::google::protobuf::uint32 value) {
  
  source_onstage_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewOnstageChangeInfo.source_onstage_card_guid)
}

// -------------------------------------------------------------------

// GCGSkillPreviewTokenInfo

// uint32 token_type = 3;
inline void GCGSkillPreviewTokenInfo::clear_token_type() {
  token_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewTokenInfo::token_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenInfo.token_type)
  return token_type_;
}
inline void GCGSkillPreviewTokenInfo::set_token_type(::google::protobuf::uint32 value) {
  
  token_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewTokenInfo.token_type)
}

// uint32 after_value = 12;
inline void GCGSkillPreviewTokenInfo::clear_after_value() {
  after_value_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewTokenInfo::after_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenInfo.after_value)
  return after_value_;
}
inline void GCGSkillPreviewTokenInfo::set_after_value(::google::protobuf::uint32 value) {
  
  after_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewTokenInfo.after_value)
}

// uint32 before_value = 15;
inline void GCGSkillPreviewTokenInfo::clear_before_value() {
  before_value_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewTokenInfo::before_value() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenInfo.before_value)
  return before_value_;
}
inline void GCGSkillPreviewTokenInfo::set_before_value(::google::protobuf::uint32 value) {
  
  before_value_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewTokenInfo.before_value)
}

// -------------------------------------------------------------------

// GCGSkillPreviewTokenChangeInfo

// repeated .proto.GCGSkillPreviewTokenInfo token_change_list = 14;
inline int GCGSkillPreviewTokenChangeInfo::token_change_list_size() const {
  return token_change_list_.size();
}
inline void GCGSkillPreviewTokenChangeInfo::clear_token_change_list() {
  token_change_list_.Clear();
}
inline const ::proto::GCGSkillPreviewTokenInfo& GCGSkillPreviewTokenChangeInfo::token_change_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_.Get(index);
}
inline ::proto::GCGSkillPreviewTokenInfo* GCGSkillPreviewTokenChangeInfo::mutable_token_change_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewTokenInfo* GCGSkillPreviewTokenChangeInfo::add_token_change_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewTokenInfo >*
GCGSkillPreviewTokenChangeInfo::mutable_token_change_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return &token_change_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewTokenInfo >&
GCGSkillPreviewTokenChangeInfo::token_change_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewTokenChangeInfo.token_change_list)
  return token_change_list_;
}

// -------------------------------------------------------------------

// GCGSkillPreviewExtraInfo

// repeated .proto.GCGSkillPreviewCardInfo fail_added_when_full_list = 14;
inline int GCGSkillPreviewExtraInfo::fail_added_when_full_list_size() const {
  return fail_added_when_full_list_.size();
}
inline void GCGSkillPreviewExtraInfo::clear_fail_added_when_full_list() {
  fail_added_when_full_list_.Clear();
}
inline const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewExtraInfo::fail_added_when_full_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_.Get(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::mutable_fail_added_when_full_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::add_fail_added_when_full_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewExtraInfo::mutable_fail_added_when_full_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return &fail_added_when_full_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewExtraInfo::fail_added_when_full_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewExtraInfo.fail_added_when_full_list)
  return fail_added_when_full_list_;
}

// repeated .proto.GCGSkillPreviewCardInfo refresh_card_when_exist_list = 6;
inline int GCGSkillPreviewExtraInfo::refresh_card_when_exist_list_size() const {
  return refresh_card_when_exist_list_.size();
}
inline void GCGSkillPreviewExtraInfo::clear_refresh_card_when_exist_list() {
  refresh_card_when_exist_list_.Clear();
}
inline const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewExtraInfo::refresh_card_when_exist_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_.Get(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::mutable_refresh_card_when_exist_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewExtraInfo::add_refresh_card_when_exist_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewExtraInfo::mutable_refresh_card_when_exist_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return &refresh_card_when_exist_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewExtraInfo::refresh_card_when_exist_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewExtraInfo.refresh_card_when_exist_list)
  return refresh_card_when_exist_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GCGSkillPreviewInfo

// map<uint32, .proto.GCGSkillPreviewTokenChangeInfo> card_token_change_map = 3;
inline int GCGSkillPreviewInfo::card_token_change_map_size() const {
  return card_token_change_map_.size();
}
inline void GCGSkillPreviewInfo::clear_card_token_change_map() {
  card_token_change_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >&
GCGSkillPreviewInfo::card_token_change_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSkillPreviewInfo.card_token_change_map)
  return card_token_change_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewTokenChangeInfo >*
GCGSkillPreviewInfo::mutable_card_token_change_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSkillPreviewInfo.card_token_change_map)
  return card_token_change_map_.MutableMap();
}

// map<uint32, .proto.GCGSkillPreviewElementReactionInfo> reaction_info_map = 5;
inline int GCGSkillPreviewInfo::reaction_info_map_size() const {
  return reaction_info_map_.size();
}
inline void GCGSkillPreviewInfo::clear_reaction_info_map() {
  reaction_info_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >&
GCGSkillPreviewInfo::reaction_info_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSkillPreviewInfo.reaction_info_map)
  return reaction_info_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewElementReactionInfo >*
GCGSkillPreviewInfo::mutable_reaction_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSkillPreviewInfo.reaction_info_map)
  return reaction_info_map_.MutableMap();
}

// map<uint32, .proto.GCGSkillPreviewHpInfo> hp_info_map = 8;
inline int GCGSkillPreviewInfo::hp_info_map_size() const {
  return hp_info_map_.size();
}
inline void GCGSkillPreviewInfo::clear_hp_info_map() {
  hp_info_map_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >&
GCGSkillPreviewInfo::hp_info_map() const {
  // @@protoc_insertion_point(field_map:proto.GCGSkillPreviewInfo.hp_info_map)
  return hp_info_map_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::proto::GCGSkillPreviewHpInfo >*
GCGSkillPreviewInfo::mutable_hp_info_map() {
  // @@protoc_insertion_point(field_mutable_map:proto.GCGSkillPreviewInfo.hp_info_map)
  return hp_info_map_.MutableMap();
}

// repeated .proto.GCGSkillPreviewCardInfo add_card_list = 11;
inline int GCGSkillPreviewInfo::add_card_list_size() const {
  return add_card_list_.size();
}
inline void GCGSkillPreviewInfo::clear_add_card_list() {
  add_card_list_.Clear();
}
inline const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewInfo::add_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_.Get(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::mutable_add_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::add_add_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewInfo::mutable_add_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewInfo.add_card_list)
  return &add_card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewInfo::add_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewInfo.add_card_list)
  return add_card_list_;
}

// .proto.GCGSkillPreviewExtraInfo extra_info = 10;
inline bool GCGSkillPreviewInfo::has_extra_info() const {
  return this != internal_default_instance() && extra_info_ != NULL;
}
inline void GCGSkillPreviewInfo::clear_extra_info() {
  if (GetArenaNoVirtual() == NULL && extra_info_ != NULL) delete extra_info_;
  extra_info_ = NULL;
}
inline const ::proto::GCGSkillPreviewExtraInfo& GCGSkillPreviewInfo::extra_info() const {
  const ::proto::GCGSkillPreviewExtraInfo* p = extra_info_;
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.extra_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGSkillPreviewExtraInfo*>(
      &::proto::_GCGSkillPreviewExtraInfo_default_instance_);
}
inline ::proto::GCGSkillPreviewExtraInfo* GCGSkillPreviewInfo::mutable_extra_info() {
  
  if (extra_info_ == NULL) {
    extra_info_ = new ::proto::GCGSkillPreviewExtraInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.extra_info)
  return extra_info_;
}
inline ::proto::GCGSkillPreviewExtraInfo* GCGSkillPreviewInfo::release_extra_info() {
  // @@protoc_insertion_point(field_release:proto.GCGSkillPreviewInfo.extra_info)
  
  ::proto::GCGSkillPreviewExtraInfo* temp = extra_info_;
  extra_info_ = NULL;
  return temp;
}
inline void GCGSkillPreviewInfo::set_allocated_extra_info(::proto::GCGSkillPreviewExtraInfo* extra_info) {
  delete extra_info_;
  extra_info_ = extra_info;
  if (extra_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGSkillPreviewInfo.extra_info)
}

// uint32 skill_id = 6;
inline void GCGSkillPreviewInfo::clear_skill_id() {
  skill_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewInfo::skill_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.skill_id)
  return skill_id_;
}
inline void GCGSkillPreviewInfo::set_skill_id(::google::protobuf::uint32 value) {
  
  skill_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewInfo.skill_id)
}

// repeated .proto.GCGSkillPreviewOnstageChangeInfo change_onstage_character_list = 9;
inline int GCGSkillPreviewInfo::change_onstage_character_list_size() const {
  return change_onstage_character_list_.size();
}
inline void GCGSkillPreviewInfo::clear_change_onstage_character_list() {
  change_onstage_character_list_.Clear();
}
inline const ::proto::GCGSkillPreviewOnstageChangeInfo& GCGSkillPreviewInfo::change_onstage_character_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_.Get(index);
}
inline ::proto::GCGSkillPreviewOnstageChangeInfo* GCGSkillPreviewInfo::mutable_change_onstage_character_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewOnstageChangeInfo* GCGSkillPreviewInfo::add_change_onstage_character_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewOnstageChangeInfo >*
GCGSkillPreviewInfo::mutable_change_onstage_character_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return &change_onstage_character_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewOnstageChangeInfo >&
GCGSkillPreviewInfo::change_onstage_character_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewInfo.change_onstage_character_list)
  return change_onstage_character_list_;
}

// repeated .proto.GCGSkillPreviewCardInfo rm_card_list = 12;
inline int GCGSkillPreviewInfo::rm_card_list_size() const {
  return rm_card_list_.size();
}
inline void GCGSkillPreviewInfo::clear_rm_card_list() {
  rm_card_list_.Clear();
}
inline const ::proto::GCGSkillPreviewCardInfo& GCGSkillPreviewInfo::rm_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_.Get(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::mutable_rm_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewCardInfo* GCGSkillPreviewInfo::add_rm_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >*
GCGSkillPreviewInfo::mutable_rm_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewInfo.rm_card_list)
  return &rm_card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewCardInfo >&
GCGSkillPreviewInfo::rm_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewInfo.rm_card_list)
  return rm_card_list_;
}

// -------------------------------------------------------------------

// GCGChangeOnstageInfo

// uint32 card_guid = 6;
inline void GCGChangeOnstageInfo::clear_card_guid() {
  card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGChangeOnstageInfo::card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGChangeOnstageInfo.card_guid)
  return card_guid_;
}
inline void GCGChangeOnstageInfo::set_card_guid(::google::protobuf::uint32 value) {
  
  card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChangeOnstageInfo.card_guid)
}

// bool is_quick = 7;
inline void GCGChangeOnstageInfo::clear_is_quick() {
  is_quick_ = false;
}
inline bool GCGChangeOnstageInfo::is_quick() const {
  // @@protoc_insertion_point(field_get:proto.GCGChangeOnstageInfo.is_quick)
  return is_quick_;
}
inline void GCGChangeOnstageInfo::set_is_quick(bool value) {
  
  is_quick_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChangeOnstageInfo.is_quick)
}

// .proto.GCGSkillPreviewInfo change_onstage_preview_info = 12;
inline bool GCGChangeOnstageInfo::has_change_onstage_preview_info() const {
  return this != internal_default_instance() && change_onstage_preview_info_ != NULL;
}
inline void GCGChangeOnstageInfo::clear_change_onstage_preview_info() {
  if (GetArenaNoVirtual() == NULL && change_onstage_preview_info_ != NULL) delete change_onstage_preview_info_;
  change_onstage_preview_info_ = NULL;
}
inline const ::proto::GCGSkillPreviewInfo& GCGChangeOnstageInfo::change_onstage_preview_info() const {
  const ::proto::GCGSkillPreviewInfo* p = change_onstage_preview_info_;
  // @@protoc_insertion_point(field_get:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGSkillPreviewInfo*>(
      &::proto::_GCGSkillPreviewInfo_default_instance_);
}
inline ::proto::GCGSkillPreviewInfo* GCGChangeOnstageInfo::mutable_change_onstage_preview_info() {
  
  if (change_onstage_preview_info_ == NULL) {
    change_onstage_preview_info_ = new ::proto::GCGSkillPreviewInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
  return change_onstage_preview_info_;
}
inline ::proto::GCGSkillPreviewInfo* GCGChangeOnstageInfo::release_change_onstage_preview_info() {
  // @@protoc_insertion_point(field_release:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
  
  ::proto::GCGSkillPreviewInfo* temp = change_onstage_preview_info_;
  change_onstage_preview_info_ = NULL;
  return temp;
}
inline void GCGChangeOnstageInfo::set_allocated_change_onstage_preview_info(::proto::GCGSkillPreviewInfo* change_onstage_preview_info) {
  delete change_onstage_preview_info_;
  change_onstage_preview_info_ = change_onstage_preview_info;
  if (change_onstage_preview_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGChangeOnstageInfo.change_onstage_preview_info)
}

// -------------------------------------------------------------------

// GCGSkillPreviewPlayCardInfo

// uint32 target_card_guid = 9;
inline void GCGSkillPreviewPlayCardInfo::clear_target_card_guid() {
  target_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewPlayCardInfo::target_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewPlayCardInfo.target_card_guid)
  return target_card_guid_;
}
inline void GCGSkillPreviewPlayCardInfo::set_target_card_guid(::google::protobuf::uint32 value) {
  
  target_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewPlayCardInfo.target_card_guid)
}

// uint32 hand_card_guid = 15;
inline void GCGSkillPreviewPlayCardInfo::clear_hand_card_guid() {
  hand_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewPlayCardInfo::hand_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewPlayCardInfo.hand_card_guid)
  return hand_card_guid_;
}
inline void GCGSkillPreviewPlayCardInfo::set_hand_card_guid(::google::protobuf::uint32 value) {
  
  hand_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewPlayCardInfo.hand_card_guid)
}

// .proto.GCGSkillPreviewInfo play_card_info = 6;
inline bool GCGSkillPreviewPlayCardInfo::has_play_card_info() const {
  return this != internal_default_instance() && play_card_info_ != NULL;
}
inline void GCGSkillPreviewPlayCardInfo::clear_play_card_info() {
  if (GetArenaNoVirtual() == NULL && play_card_info_ != NULL) delete play_card_info_;
  play_card_info_ = NULL;
}
inline const ::proto::GCGSkillPreviewInfo& GCGSkillPreviewPlayCardInfo::play_card_info() const {
  const ::proto::GCGSkillPreviewInfo* p = play_card_info_;
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGSkillPreviewInfo*>(
      &::proto::_GCGSkillPreviewInfo_default_instance_);
}
inline ::proto::GCGSkillPreviewInfo* GCGSkillPreviewPlayCardInfo::mutable_play_card_info() {
  
  if (play_card_info_ == NULL) {
    play_card_info_ = new ::proto::GCGSkillPreviewInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
  return play_card_info_;
}
inline ::proto::GCGSkillPreviewInfo* GCGSkillPreviewPlayCardInfo::release_play_card_info() {
  // @@protoc_insertion_point(field_release:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
  
  ::proto::GCGSkillPreviewInfo* temp = play_card_info_;
  play_card_info_ = NULL;
  return temp;
}
inline void GCGSkillPreviewPlayCardInfo::set_allocated_play_card_info(::proto::GCGSkillPreviewInfo* play_card_info) {
  delete play_card_info_;
  play_card_info_ = play_card_info;
  if (play_card_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGSkillPreviewPlayCardInfo.play_card_info)
}

// -------------------------------------------------------------------

// GCGSkillPreviewNotify

// uint32 controller_id = 15;
inline void GCGSkillPreviewNotify::clear_controller_id() {
  controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewNotify::controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.controller_id)
  return controller_id_;
}
inline void GCGSkillPreviewNotify::set_controller_id(::google::protobuf::uint32 value) {
  
  controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewNotify.controller_id)
}

// repeated .proto.GCGSkillPreviewPlayCardInfo play_card_list = 11;
inline int GCGSkillPreviewNotify::play_card_list_size() const {
  return play_card_list_.size();
}
inline void GCGSkillPreviewNotify::clear_play_card_list() {
  play_card_list_.Clear();
}
inline const ::proto::GCGSkillPreviewPlayCardInfo& GCGSkillPreviewNotify::play_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Get(index);
}
inline ::proto::GCGSkillPreviewPlayCardInfo* GCGSkillPreviewNotify::mutable_play_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewPlayCardInfo* GCGSkillPreviewNotify::add_play_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >*
GCGSkillPreviewNotify::mutable_play_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewNotify.play_card_list)
  return &play_card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewPlayCardInfo >&
GCGSkillPreviewNotify::play_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewNotify.play_card_list)
  return play_card_list_;
}

// repeated .proto.GCGSkillPreviewInfo skill_preview_list = 9;
inline int GCGSkillPreviewNotify::skill_preview_list_size() const {
  return skill_preview_list_.size();
}
inline void GCGSkillPreviewNotify::clear_skill_preview_list() {
  skill_preview_list_.Clear();
}
inline const ::proto::GCGSkillPreviewInfo& GCGSkillPreviewNotify::skill_preview_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Get(index);
}
inline ::proto::GCGSkillPreviewInfo* GCGSkillPreviewNotify::mutable_skill_preview_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Mutable(index);
}
inline ::proto::GCGSkillPreviewInfo* GCGSkillPreviewNotify::add_skill_preview_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >*
GCGSkillPreviewNotify::mutable_skill_preview_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewNotify.skill_preview_list)
  return &skill_preview_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGSkillPreviewInfo >&
GCGSkillPreviewNotify::skill_preview_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewNotify.skill_preview_list)
  return skill_preview_list_;
}

// repeated .proto.GCGChangeOnstageInfo change_onstage_preview_list = 1;
inline int GCGSkillPreviewNotify::change_onstage_preview_list_size() const {
  return change_onstage_preview_list_.size();
}
inline void GCGSkillPreviewNotify::clear_change_onstage_preview_list() {
  change_onstage_preview_list_.Clear();
}
inline const ::proto::GCGChangeOnstageInfo& GCGSkillPreviewNotify::change_onstage_preview_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Get(index);
}
inline ::proto::GCGChangeOnstageInfo* GCGSkillPreviewNotify::mutable_change_onstage_preview_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Mutable(index);
}
inline ::proto::GCGChangeOnstageInfo* GCGSkillPreviewNotify::add_change_onstage_preview_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >*
GCGSkillPreviewNotify::mutable_change_onstage_preview_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return &change_onstage_preview_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGChangeOnstageInfo >&
GCGSkillPreviewNotify::change_onstage_preview_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSkillPreviewNotify.change_onstage_preview_list)
  return change_onstage_preview_list_;
}

// uint32 onstage_card_guid = 5;
inline void GCGSkillPreviewNotify::clear_onstage_card_guid() {
  onstage_card_guid_ = 0u;
}
inline ::google::protobuf::uint32 GCGSkillPreviewNotify::onstage_card_guid() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewNotify.onstage_card_guid)
  return onstage_card_guid_;
}
inline void GCGSkillPreviewNotify::set_onstage_card_guid(::google::protobuf::uint32 value) {
  
  onstage_card_guid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewNotify.onstage_card_guid)
}

// -------------------------------------------------------------------

// GCGSkillPreviewAskReq

// -------------------------------------------------------------------

// GCGSkillPreviewAskRsp

// int32 retcode = 1;
inline void GCGSkillPreviewAskRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGSkillPreviewAskRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGSkillPreviewAskRsp.retcode)
  return retcode_;
}
inline void GCGSkillPreviewAskRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSkillPreviewAskRsp.retcode)
}

// -------------------------------------------------------------------

// GCGChallengeUpdateNotify

// uint32 server_seq = 12;
inline void GCGChallengeUpdateNotify::clear_server_seq() {
  server_seq_ = 0u;
}
inline ::google::protobuf::uint32 GCGChallengeUpdateNotify::server_seq() const {
  // @@protoc_insertion_point(field_get:proto.GCGChallengeUpdateNotify.server_seq)
  return server_seq_;
}
inline void GCGChallengeUpdateNotify::set_server_seq(::google::protobuf::uint32 value) {
  
  server_seq_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGChallengeUpdateNotify.server_seq)
}

// .proto.GCGDuelChallenge challenge = 13;
inline bool GCGChallengeUpdateNotify::has_challenge() const {
  return this != internal_default_instance() && challenge_ != NULL;
}
inline void GCGChallengeUpdateNotify::clear_challenge() {
  if (GetArenaNoVirtual() == NULL && challenge_ != NULL) delete challenge_;
  challenge_ = NULL;
}
inline const ::proto::GCGDuelChallenge& GCGChallengeUpdateNotify::challenge() const {
  const ::proto::GCGDuelChallenge* p = challenge_;
  // @@protoc_insertion_point(field_get:proto.GCGChallengeUpdateNotify.challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGDuelChallenge*>(
      &::proto::_GCGDuelChallenge_default_instance_);
}
inline ::proto::GCGDuelChallenge* GCGChallengeUpdateNotify::mutable_challenge() {
  
  if (challenge_ == NULL) {
    challenge_ = new ::proto::GCGDuelChallenge;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGChallengeUpdateNotify.challenge)
  return challenge_;
}
inline ::proto::GCGDuelChallenge* GCGChallengeUpdateNotify::release_challenge() {
  // @@protoc_insertion_point(field_release:proto.GCGChallengeUpdateNotify.challenge)
  
  ::proto::GCGDuelChallenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
inline void GCGChallengeUpdateNotify::set_allocated_challenge(::proto::GCGDuelChallenge* challenge) {
  delete challenge_;
  challenge_ = challenge;
  if (challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGChallengeUpdateNotify.challenge)
}

// -------------------------------------------------------------------

// GCGBackToDuelReq

// bool is_back = 14;
inline void GCGBackToDuelReq::clear_is_back() {
  is_back_ = false;
}
inline bool GCGBackToDuelReq::is_back() const {
  // @@protoc_insertion_point(field_get:proto.GCGBackToDuelReq.is_back)
  return is_back_;
}
inline void GCGBackToDuelReq::set_is_back(bool value) {
  
  is_back_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBackToDuelReq.is_back)
}

// -------------------------------------------------------------------

// GCGBackToDuelRsp

// int32 retcode = 1;
inline void GCGBackToDuelRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGBackToDuelRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGBackToDuelRsp.retcode)
  return retcode_;
}
inline void GCGBackToDuelRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBackToDuelRsp.retcode)
}

// -------------------------------------------------------------------

// GCGDebugReplayNotify

// string json_str = 9;
inline void GCGDebugReplayNotify::clear_json_str() {
  json_str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCGDebugReplayNotify::json_str() const {
  // @@protoc_insertion_point(field_get:proto.GCGDebugReplayNotify.json_str)
  return json_str_.GetNoArena();
}
inline void GCGDebugReplayNotify::set_json_str(const ::std::string& value) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDebugReplayNotify.json_str)
}
#if LANG_CXX11
inline void GCGDebugReplayNotify::set_json_str(::std::string&& value) {
  
  json_str_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDebugReplayNotify.json_str)
}
#endif
inline void GCGDebugReplayNotify::set_json_str(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDebugReplayNotify.json_str)
}
inline void GCGDebugReplayNotify::set_json_str(const char* value, size_t size) {
  
  json_str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDebugReplayNotify.json_str)
}
inline ::std::string* GCGDebugReplayNotify::mutable_json_str() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDebugReplayNotify.json_str)
  return json_str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCGDebugReplayNotify::release_json_str() {
  // @@protoc_insertion_point(field_release:proto.GCGDebugReplayNotify.json_str)
  
  return json_str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCGDebugReplayNotify::set_allocated_json_str(::std::string* json_str) {
  if (json_str != NULL) {
    
  } else {
    
  }
  json_str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), json_str);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDebugReplayNotify.json_str)
}

// -------------------------------------------------------------------

// GCGGameMaxNotify

// -------------------------------------------------------------------

// GCGGameCreateFailReasonNotify

// .proto.GCGGameCreateFailReasonNotify.GCGGameCreateReason reason = 15;
inline void GCGGameCreateFailReasonNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason GCGGameCreateFailReasonNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGGameCreateFailReasonNotify.reason)
  return static_cast< ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason >(reason_);
}
inline void GCGGameCreateFailReasonNotify::set_reason(::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGameCreateFailReasonNotify.reason)
}

// -------------------------------------------------------------------

// GCGDSDeckData

// repeated uint32 card_list = 1;
inline int GCGDSDeckData::card_list_size() const {
  return card_list_.size();
}
inline void GCGDSDeckData::clear_card_list() {
  card_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSDeckData::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.card_list)
  return card_list_.Get(index);
}
inline void GCGDSDeckData::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.card_list)
}
inline void GCGDSDeckData::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckData.card_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckData::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckData.card_list)
  return card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckData::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckData.card_list)
  return &card_list_;
}

// uint32 card_back_id = 15;
inline void GCGDSDeckData::clear_card_back_id() {
  card_back_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckData::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.card_back_id)
  return card_back_id_;
}
inline void GCGDSDeckData::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.card_back_id)
}

// repeated uint32 character_card_list = 10;
inline int GCGDSDeckData::character_card_list_size() const {
  return character_card_list_.size();
}
inline void GCGDSDeckData::clear_character_card_list() {
  character_card_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSDeckData::character_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.character_card_list)
  return character_card_list_.Get(index);
}
inline void GCGDSDeckData::set_character_card_list(int index, ::google::protobuf::uint32 value) {
  character_card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.character_card_list)
}
inline void GCGDSDeckData::add_character_card_list(::google::protobuf::uint32 value) {
  character_card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckData.character_card_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckData::character_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckData.character_card_list)
  return character_card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckData::mutable_character_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckData.character_card_list)
  return &character_card_list_;
}

// string name = 5;
inline void GCGDSDeckData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCGDSDeckData::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.name)
  return name_.GetNoArena();
}
inline void GCGDSDeckData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.name)
}
#if LANG_CXX11
inline void GCGDSDeckData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSDeckData.name)
}
#endif
inline void GCGDSDeckData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSDeckData.name)
}
inline void GCGDSDeckData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSDeckData.name)
}
inline ::std::string* GCGDSDeckData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDeckData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCGDSDeckData::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSDeckData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCGDSDeckData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSDeckData.name)
}

// uint32 id = 3;
inline void GCGDSDeckData::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckData::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.id)
  return id_;
}
inline void GCGDSDeckData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.id)
}

// fixed32 create_time = 13;
inline void GCGDSDeckData::clear_create_time() {
  create_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckData::create_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.create_time)
  return create_time_;
}
inline void GCGDSDeckData::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.create_time)
}

// bool is_valid = 4;
inline void GCGDSDeckData::clear_is_valid() {
  is_valid_ = false;
}
inline bool GCGDSDeckData::is_valid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.is_valid)
  return is_valid_;
}
inline void GCGDSDeckData::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.is_valid)
}

// uint32 field_id = 7;
inline void GCGDSDeckData::clear_field_id() {
  field_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckData::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckData.field_id)
  return field_id_;
}
inline void GCGDSDeckData::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckData.field_id)
}

// -------------------------------------------------------------------

// GCGDSCardData

// uint32 card_id = 14;
inline void GCGDSCardData::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardData::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.card_id)
  return card_id_;
}
inline void GCGDSCardData::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.card_id)
}

// uint32 face_type = 6;
inline void GCGDSCardData::clear_face_type() {
  face_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardData::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.face_type)
  return face_type_;
}
inline void GCGDSCardData::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.face_type)
}

// uint32 num = 12;
inline void GCGDSCardData::clear_num() {
  num_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardData::num() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.num)
  return num_;
}
inline void GCGDSCardData::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.num)
}

// repeated uint32 unlock_face_type_list = 9;
inline int GCGDSCardData::unlock_face_type_list_size() const {
  return unlock_face_type_list_.size();
}
inline void GCGDSCardData::clear_unlock_face_type_list() {
  unlock_face_type_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSCardData::unlock_face_type_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.unlock_face_type_list)
  return unlock_face_type_list_.Get(index);
}
inline void GCGDSCardData::set_unlock_face_type_list(int index, ::google::protobuf::uint32 value) {
  unlock_face_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.unlock_face_type_list)
}
inline void GCGDSCardData::add_unlock_face_type_list(::google::protobuf::uint32 value) {
  unlock_face_type_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSCardData.unlock_face_type_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSCardData::unlock_face_type_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSCardData.unlock_face_type_list)
  return unlock_face_type_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSCardData::mutable_unlock_face_type_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSCardData.unlock_face_type_list)
  return &unlock_face_type_list_;
}

// repeated uint32 proficiency_reward_taken_idx_list = 7;
inline int GCGDSCardData::proficiency_reward_taken_idx_list_size() const {
  return proficiency_reward_taken_idx_list_.size();
}
inline void GCGDSCardData::clear_proficiency_reward_taken_idx_list() {
  proficiency_reward_taken_idx_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSCardData::proficiency_reward_taken_idx_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
  return proficiency_reward_taken_idx_list_.Get(index);
}
inline void GCGDSCardData::set_proficiency_reward_taken_idx_list(int index, ::google::protobuf::uint32 value) {
  proficiency_reward_taken_idx_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
}
inline void GCGDSCardData::add_proficiency_reward_taken_idx_list(::google::protobuf::uint32 value) {
  proficiency_reward_taken_idx_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSCardData::proficiency_reward_taken_idx_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
  return proficiency_reward_taken_idx_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSCardData::mutable_proficiency_reward_taken_idx_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSCardData.proficiency_reward_taken_idx_list)
  return &proficiency_reward_taken_idx_list_;
}

// uint32 proficiency = 8;
inline void GCGDSCardData::clear_proficiency() {
  proficiency_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardData::proficiency() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardData.proficiency)
  return proficiency_;
}
inline void GCGDSCardData::set_proficiency(::google::protobuf::uint32 value) {
  
  proficiency_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardData.proficiency)
}

// -------------------------------------------------------------------

// GCGDSDataNotify

// repeated .proto.GCGDSDeckData deck_list = 4;
inline int GCGDSDataNotify::deck_list_size() const {
  return deck_list_.size();
}
inline void GCGDSDataNotify::clear_deck_list() {
  deck_list_.Clear();
}
inline const ::proto::GCGDSDeckData& GCGDSDataNotify::deck_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.deck_list)
  return deck_list_.Get(index);
}
inline ::proto::GCGDSDeckData* GCGDSDataNotify::mutable_deck_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDataNotify.deck_list)
  return deck_list_.Mutable(index);
}
inline ::proto::GCGDSDeckData* GCGDSDataNotify::add_deck_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.deck_list)
  return deck_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGDSDeckData >*
GCGDSDataNotify::mutable_deck_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.deck_list)
  return &deck_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGDSDeckData >&
GCGDSDataNotify::deck_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.deck_list)
  return deck_list_;
}

// repeated uint32 unlock_card_back_id_list = 5;
inline int GCGDSDataNotify::unlock_card_back_id_list_size() const {
  return unlock_card_back_id_list_.size();
}
inline void GCGDSDataNotify::clear_unlock_card_back_id_list() {
  unlock_card_back_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSDataNotify::unlock_card_back_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.unlock_card_back_id_list)
  return unlock_card_back_id_list_.Get(index);
}
inline void GCGDSDataNotify::set_unlock_card_back_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_card_back_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.unlock_card_back_id_list)
}
inline void GCGDSDataNotify::add_unlock_card_back_id_list(::google::protobuf::uint32 value) {
  unlock_card_back_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.unlock_card_back_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDataNotify::unlock_card_back_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.unlock_card_back_id_list)
  return unlock_card_back_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDataNotify::mutable_unlock_card_back_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.unlock_card_back_id_list)
  return &unlock_card_back_id_list_;
}

// repeated uint32 unlock_field_id_list = 6;
inline int GCGDSDataNotify::unlock_field_id_list_size() const {
  return unlock_field_id_list_.size();
}
inline void GCGDSDataNotify::clear_unlock_field_id_list() {
  unlock_field_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSDataNotify::unlock_field_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.unlock_field_id_list)
  return unlock_field_id_list_.Get(index);
}
inline void GCGDSDataNotify::set_unlock_field_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_field_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.unlock_field_id_list)
}
inline void GCGDSDataNotify::add_unlock_field_id_list(::google::protobuf::uint32 value) {
  unlock_field_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.unlock_field_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDataNotify::unlock_field_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.unlock_field_id_list)
  return unlock_field_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDataNotify::mutable_unlock_field_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.unlock_field_id_list)
  return &unlock_field_id_list_;
}

// uint32 cur_deck_id = 10;
inline void GCGDSDataNotify::clear_cur_deck_id() {
  cur_deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDataNotify::cur_deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.cur_deck_id)
  return cur_deck_id_;
}
inline void GCGDSDataNotify::set_cur_deck_id(::google::protobuf::uint32 value) {
  
  cur_deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.cur_deck_id)
}

// repeated .proto.GCGDSCardData card_list = 3;
inline int GCGDSDataNotify::card_list_size() const {
  return card_list_.size();
}
inline void GCGDSDataNotify::clear_card_list() {
  card_list_.Clear();
}
inline const ::proto::GCGDSCardData& GCGDSDataNotify::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.card_list)
  return card_list_.Get(index);
}
inline ::proto::GCGDSCardData* GCGDSDataNotify::mutable_card_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDataNotify.card_list)
  return card_list_.Mutable(index);
}
inline ::proto::GCGDSCardData* GCGDSDataNotify::add_card_list() {
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.card_list)
  return card_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGDSCardData >*
GCGDSDataNotify::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.card_list)
  return &card_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGDSCardData >&
GCGDSDataNotify::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.card_list)
  return card_list_;
}

// repeated uint32 unlock_deck_id_list = 1;
inline int GCGDSDataNotify::unlock_deck_id_list_size() const {
  return unlock_deck_id_list_.size();
}
inline void GCGDSDataNotify::clear_unlock_deck_id_list() {
  unlock_deck_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSDataNotify::unlock_deck_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDataNotify.unlock_deck_id_list)
  return unlock_deck_id_list_.Get(index);
}
inline void GCGDSDataNotify::set_unlock_deck_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_deck_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDataNotify.unlock_deck_id_list)
}
inline void GCGDSDataNotify::add_unlock_deck_id_list(::google::protobuf::uint32 value) {
  unlock_deck_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDataNotify.unlock_deck_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDataNotify::unlock_deck_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDataNotify.unlock_deck_id_list)
  return unlock_deck_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDataNotify::mutable_unlock_deck_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDataNotify.unlock_deck_id_list)
  return &unlock_deck_id_list_;
}

// -------------------------------------------------------------------

// GCGDSCardBackUnlockNotify

// uint32 card_back_id = 6;
inline void GCGDSCardBackUnlockNotify::clear_card_back_id() {
  card_back_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardBackUnlockNotify::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardBackUnlockNotify.card_back_id)
  return card_back_id_;
}
inline void GCGDSCardBackUnlockNotify::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardBackUnlockNotify.card_back_id)
}

// -------------------------------------------------------------------

// GCGDSFieldUnlockNotify

// uint32 field_id = 1;
inline void GCGDSFieldUnlockNotify::clear_field_id() {
  field_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSFieldUnlockNotify::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSFieldUnlockNotify.field_id)
  return field_id_;
}
inline void GCGDSFieldUnlockNotify::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSFieldUnlockNotify.field_id)
}

// -------------------------------------------------------------------

// GCGDSCardFaceUnlockNotify

// uint32 card_id = 13;
inline void GCGDSCardFaceUnlockNotify::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardFaceUnlockNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUnlockNotify.card_id)
  return card_id_;
}
inline void GCGDSCardFaceUnlockNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUnlockNotify.card_id)
}

// uint32 face_type = 1;
inline void GCGDSCardFaceUnlockNotify::clear_face_type() {
  face_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardFaceUnlockNotify::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUnlockNotify.face_type)
  return face_type_;
}
inline void GCGDSCardFaceUnlockNotify::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUnlockNotify.face_type)
}

// -------------------------------------------------------------------

// GCGDSCardNumChangeNotify

// uint32 card_id = 4;
inline void GCGDSCardNumChangeNotify::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardNumChangeNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardNumChangeNotify.card_id)
  return card_id_;
}
inline void GCGDSCardNumChangeNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardNumChangeNotify.card_id)
}

// uint32 num = 10;
inline void GCGDSCardNumChangeNotify::clear_num() {
  num_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardNumChangeNotify::num() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardNumChangeNotify.num)
  return num_;
}
inline void GCGDSCardNumChangeNotify::set_num(::google::protobuf::uint32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardNumChangeNotify.num)
}

// -------------------------------------------------------------------

// GCGDSChangeCardFaceReq

// uint32 face_type = 6;
inline void GCGDSChangeCardFaceReq::clear_face_type() {
  face_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardFaceReq::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceReq.face_type)
  return face_type_;
}
inline void GCGDSChangeCardFaceReq::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceReq.face_type)
}

// uint32 card_id = 3;
inline void GCGDSChangeCardFaceReq::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardFaceReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceReq.card_id)
  return card_id_;
}
inline void GCGDSChangeCardFaceReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceReq.card_id)
}

// -------------------------------------------------------------------

// GCGDSChangeCardFaceRsp

// uint32 face_type = 8;
inline void GCGDSChangeCardFaceRsp::clear_face_type() {
  face_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardFaceRsp::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceRsp.face_type)
  return face_type_;
}
inline void GCGDSChangeCardFaceRsp::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceRsp.face_type)
}

// uint32 card_id = 4;
inline void GCGDSChangeCardFaceRsp::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardFaceRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceRsp.card_id)
  return card_id_;
}
inline void GCGDSChangeCardFaceRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceRsp.card_id)
}

// int32 retcode = 9;
inline void GCGDSChangeCardFaceRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSChangeCardFaceRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardFaceRsp.retcode)
  return retcode_;
}
inline void GCGDSChangeCardFaceRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardFaceRsp.retcode)
}

// -------------------------------------------------------------------

// GCGDSChangeCardBackReq

// uint32 deck_id = 10;
inline void GCGDSChangeCardBackReq::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardBackReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackReq.deck_id)
  return deck_id_;
}
inline void GCGDSChangeCardBackReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackReq.deck_id)
}

// uint32 card_back_id = 12;
inline void GCGDSChangeCardBackReq::clear_card_back_id() {
  card_back_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardBackReq::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackReq.card_back_id)
  return card_back_id_;
}
inline void GCGDSChangeCardBackReq::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackReq.card_back_id)
}

// -------------------------------------------------------------------

// GCGDSChangeCardBackRsp

// int32 retcode = 15;
inline void GCGDSChangeCardBackRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSChangeCardBackRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackRsp.retcode)
  return retcode_;
}
inline void GCGDSChangeCardBackRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackRsp.retcode)
}

// uint32 card_back_id = 6;
inline void GCGDSChangeCardBackRsp::clear_card_back_id() {
  card_back_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardBackRsp::card_back_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackRsp.card_back_id)
  return card_back_id_;
}
inline void GCGDSChangeCardBackRsp::set_card_back_id(::google::protobuf::uint32 value) {
  
  card_back_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackRsp.card_back_id)
}

// uint32 deck_id = 5;
inline void GCGDSChangeCardBackRsp::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCardBackRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCardBackRsp.deck_id)
  return deck_id_;
}
inline void GCGDSChangeCardBackRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCardBackRsp.deck_id)
}

// -------------------------------------------------------------------

// GCGDSChangeFieldReq

// uint32 field_id = 6;
inline void GCGDSChangeFieldReq::clear_field_id() {
  field_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeFieldReq::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldReq.field_id)
  return field_id_;
}
inline void GCGDSChangeFieldReq::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldReq.field_id)
}

// uint32 deck_id = 11;
inline void GCGDSChangeFieldReq::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeFieldReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldReq.deck_id)
  return deck_id_;
}
inline void GCGDSChangeFieldReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldReq.deck_id)
}

// -------------------------------------------------------------------

// GCGDSChangeFieldRsp

// int32 retcode = 1;
inline void GCGDSChangeFieldRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSChangeFieldRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldRsp.retcode)
  return retcode_;
}
inline void GCGDSChangeFieldRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldRsp.retcode)
}

// uint32 field_id = 3;
inline void GCGDSChangeFieldRsp::clear_field_id() {
  field_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeFieldRsp::field_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldRsp.field_id)
  return field_id_;
}
inline void GCGDSChangeFieldRsp::set_field_id(::google::protobuf::uint32 value) {
  
  field_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldRsp.field_id)
}

// uint32 deck_id = 2;
inline void GCGDSChangeFieldRsp::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeFieldRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeFieldRsp.deck_id)
  return deck_id_;
}
inline void GCGDSChangeFieldRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeFieldRsp.deck_id)
}

// -------------------------------------------------------------------

// GCGDSChangeDeckNameReq

// uint32 deck_id = 13;
inline void GCGDSChangeDeckNameReq::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeDeckNameReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameReq.deck_id)
  return deck_id_;
}
inline void GCGDSChangeDeckNameReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameReq.deck_id)
}

// string name = 7;
inline void GCGDSChangeDeckNameReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCGDSChangeDeckNameReq::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameReq.name)
  return name_.GetNoArena();
}
inline void GCGDSChangeDeckNameReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameReq.name)
}
#if LANG_CXX11
inline void GCGDSChangeDeckNameReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSChangeDeckNameReq.name)
}
#endif
inline void GCGDSChangeDeckNameReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSChangeDeckNameReq.name)
}
inline void GCGDSChangeDeckNameReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSChangeDeckNameReq.name)
}
inline ::std::string* GCGDSChangeDeckNameReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSChangeDeckNameReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCGDSChangeDeckNameReq::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSChangeDeckNameReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCGDSChangeDeckNameReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSChangeDeckNameReq.name)
}

// -------------------------------------------------------------------

// GCGDSChangeDeckNameRsp

// uint32 deck_id = 13;
inline void GCGDSChangeDeckNameRsp::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeDeckNameRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameRsp.deck_id)
  return deck_id_;
}
inline void GCGDSChangeDeckNameRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameRsp.deck_id)
}

// int32 retcode = 14;
inline void GCGDSChangeDeckNameRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSChangeDeckNameRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameRsp.retcode)
  return retcode_;
}
inline void GCGDSChangeDeckNameRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameRsp.retcode)
}

// string name = 1;
inline void GCGDSChangeDeckNameRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCGDSChangeDeckNameRsp::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeDeckNameRsp.name)
  return name_.GetNoArena();
}
inline void GCGDSChangeDeckNameRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeDeckNameRsp.name)
}
#if LANG_CXX11
inline void GCGDSChangeDeckNameRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSChangeDeckNameRsp.name)
}
#endif
inline void GCGDSChangeDeckNameRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSChangeDeckNameRsp.name)
}
inline void GCGDSChangeDeckNameRsp::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSChangeDeckNameRsp.name)
}
inline ::std::string* GCGDSChangeDeckNameRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSChangeDeckNameRsp.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCGDSChangeDeckNameRsp::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSChangeDeckNameRsp.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCGDSChangeDeckNameRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSChangeDeckNameRsp.name)
}

// -------------------------------------------------------------------

// GCGDSDeckSaveReq

// uint32 deck_id = 1;
inline void GCGDSDeckSaveReq::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckSaveReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.deck_id)
  return deck_id_;
}
inline void GCGDSDeckSaveReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.deck_id)
}

// repeated uint32 card_list = 4;
inline int GCGDSDeckSaveReq::card_list_size() const {
  return card_list_.size();
}
inline void GCGDSDeckSaveReq::clear_card_list() {
  card_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSDeckSaveReq::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.card_list)
  return card_list_.Get(index);
}
inline void GCGDSDeckSaveReq::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.card_list)
}
inline void GCGDSDeckSaveReq::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckSaveReq.card_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckSaveReq::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckSaveReq.card_list)
  return card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckSaveReq::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckSaveReq.card_list)
  return &card_list_;
}

// repeated uint32 character_card_list = 9;
inline int GCGDSDeckSaveReq::character_card_list_size() const {
  return character_card_list_.size();
}
inline void GCGDSDeckSaveReq::clear_character_card_list() {
  character_card_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSDeckSaveReq::character_card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.character_card_list)
  return character_card_list_.Get(index);
}
inline void GCGDSDeckSaveReq::set_character_card_list(int index, ::google::protobuf::uint32 value) {
  character_card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.character_card_list)
}
inline void GCGDSDeckSaveReq::add_character_card_list(::google::protobuf::uint32 value) {
  character_card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSDeckSaveReq.character_card_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSDeckSaveReq::character_card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSDeckSaveReq.character_card_list)
  return character_card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSDeckSaveReq::mutable_character_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSDeckSaveReq.character_card_list)
  return &character_card_list_;
}

// string name = 14;
inline void GCGDSDeckSaveReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GCGDSDeckSaveReq::name() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveReq.name)
  return name_.GetNoArena();
}
inline void GCGDSDeckSaveReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveReq.name)
}
#if LANG_CXX11
inline void GCGDSDeckSaveReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GCGDSDeckSaveReq.name)
}
#endif
inline void GCGDSDeckSaveReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GCGDSDeckSaveReq.name)
}
inline void GCGDSDeckSaveReq::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GCGDSDeckSaveReq.name)
}
inline ::std::string* GCGDSDeckSaveReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.GCGDSDeckSaveReq.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GCGDSDeckSaveReq::release_name() {
  // @@protoc_insertion_point(field_release:proto.GCGDSDeckSaveReq.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GCGDSDeckSaveReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.GCGDSDeckSaveReq.name)
}

// -------------------------------------------------------------------

// GCGDSDeckSaveRsp

// fixed32 create_time = 14;
inline void GCGDSDeckSaveRsp::clear_create_time() {
  create_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckSaveRsp::create_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.create_time)
  return create_time_;
}
inline void GCGDSDeckSaveRsp::set_create_time(::google::protobuf::uint32 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.create_time)
}

// uint32 deck_id = 11;
inline void GCGDSDeckSaveRsp::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckSaveRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.deck_id)
  return deck_id_;
}
inline void GCGDSDeckSaveRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.deck_id)
}

// int32 retcode = 8;
inline void GCGDSDeckSaveRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSDeckSaveRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.retcode)
  return retcode_;
}
inline void GCGDSDeckSaveRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.retcode)
}

// bool is_valid = 4;
inline void GCGDSDeckSaveRsp::clear_is_valid() {
  is_valid_ = false;
}
inline bool GCGDSDeckSaveRsp::is_valid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckSaveRsp.is_valid)
  return is_valid_;
}
inline void GCGDSDeckSaveRsp::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckSaveRsp.is_valid)
}

// -------------------------------------------------------------------

// GCGDSChangeCurDeckReq

// uint32 deck_id = 3;
inline void GCGDSChangeCurDeckReq::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCurDeckReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCurDeckReq.deck_id)
  return deck_id_;
}
inline void GCGDSChangeCurDeckReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCurDeckReq.deck_id)
}

// -------------------------------------------------------------------

// GCGDSChangeCurDeckRsp

// int32 retcode = 8;
inline void GCGDSChangeCurDeckRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSChangeCurDeckRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCurDeckRsp.retcode)
  return retcode_;
}
inline void GCGDSChangeCurDeckRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCurDeckRsp.retcode)
}

// uint32 deck_id = 14;
inline void GCGDSChangeCurDeckRsp::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSChangeCurDeckRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSChangeCurDeckRsp.deck_id)
  return deck_id_;
}
inline void GCGDSChangeCurDeckRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSChangeCurDeckRsp.deck_id)
}

// -------------------------------------------------------------------

// GCGDSCurDeckChangeNotify

// uint32 deck_id = 6;
inline void GCGDSCurDeckChangeNotify::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCurDeckChangeNotify::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCurDeckChangeNotify.deck_id)
  return deck_id_;
}
inline void GCGDSCurDeckChangeNotify::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCurDeckChangeNotify.deck_id)
}

// -------------------------------------------------------------------

// GCGDSDeleteDeckReq

// uint32 deck_id = 15;
inline void GCGDSDeleteDeckReq::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeleteDeckReq::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeleteDeckReq.deck_id)
  return deck_id_;
}
inline void GCGDSDeleteDeckReq::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeleteDeckReq.deck_id)
}

// -------------------------------------------------------------------

// GCGDSDeleteDeckRsp

// int32 retcode = 14;
inline void GCGDSDeleteDeckRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSDeleteDeckRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeleteDeckRsp.retcode)
  return retcode_;
}
inline void GCGDSDeleteDeckRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeleteDeckRsp.retcode)
}

// uint32 deck_id = 7;
inline void GCGDSDeleteDeckRsp::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeleteDeckRsp::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeleteDeckRsp.deck_id)
  return deck_id_;
}
inline void GCGDSDeleteDeckRsp::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeleteDeckRsp.deck_id)
}

// -------------------------------------------------------------------

// GCGDSDeckUnlockNotify

// uint32 deck_id = 15;
inline void GCGDSDeckUnlockNotify::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckUnlockNotify::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckUnlockNotify.deck_id)
  return deck_id_;
}
inline void GCGDSDeckUnlockNotify::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckUnlockNotify.deck_id)
}

// -------------------------------------------------------------------

// GCGDSCardProficiencyNotify

// uint32 proficiency = 2;
inline void GCGDSCardProficiencyNotify::clear_proficiency() {
  proficiency_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardProficiencyNotify::proficiency() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardProficiencyNotify.proficiency)
  return proficiency_;
}
inline void GCGDSCardProficiencyNotify::set_proficiency(::google::protobuf::uint32 value) {
  
  proficiency_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardProficiencyNotify.proficiency)
}

// uint32 card_id = 12;
inline void GCGDSCardProficiencyNotify::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardProficiencyNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardProficiencyNotify.card_id)
  return card_id_;
}
inline void GCGDSCardProficiencyNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardProficiencyNotify.card_id)
}

// -------------------------------------------------------------------

// GCGDSDeckUpdateNotify

// uint32 deck_id = 6;
inline void GCGDSDeckUpdateNotify::clear_deck_id() {
  deck_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSDeckUpdateNotify::deck_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckUpdateNotify.deck_id)
  return deck_id_;
}
inline void GCGDSDeckUpdateNotify::set_deck_id(::google::protobuf::uint32 value) {
  
  deck_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckUpdateNotify.deck_id)
}

// bool is_valid = 12;
inline void GCGDSDeckUpdateNotify::clear_is_valid() {
  is_valid_ = false;
}
inline bool GCGDSDeckUpdateNotify::is_valid() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSDeckUpdateNotify.is_valid)
  return is_valid_;
}
inline void GCGDSDeckUpdateNotify::set_is_valid(bool value) {
  
  is_valid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSDeckUpdateNotify.is_valid)
}

// -------------------------------------------------------------------

// GCGDSCardFaceUpdateNotify

// uint32 card_id = 14;
inline void GCGDSCardFaceUpdateNotify::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardFaceUpdateNotify::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUpdateNotify.card_id)
  return card_id_;
}
inline void GCGDSCardFaceUpdateNotify::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUpdateNotify.card_id)
}

// uint32 face_type = 15;
inline void GCGDSCardFaceUpdateNotify::clear_face_type() {
  face_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSCardFaceUpdateNotify::face_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSCardFaceUpdateNotify.face_type)
  return face_type_;
}
inline void GCGDSCardFaceUpdateNotify::set_face_type(::google::protobuf::uint32 value) {
  
  face_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSCardFaceUpdateNotify.face_type)
}

// -------------------------------------------------------------------

// GCGDSTakeCardProficiencyRewardReq

// uint32 reward_index = 7;
inline void GCGDSTakeCardProficiencyRewardReq::clear_reward_index() {
  reward_index_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardReq::reward_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardReq.reward_index)
  return reward_index_;
}
inline void GCGDSTakeCardProficiencyRewardReq::set_reward_index(::google::protobuf::uint32 value) {
  
  reward_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardReq.reward_index)
}

// uint32 card_id = 14;
inline void GCGDSTakeCardProficiencyRewardReq::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardReq::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardReq.card_id)
  return card_id_;
}
inline void GCGDSTakeCardProficiencyRewardReq::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardReq.card_id)
}

// -------------------------------------------------------------------

// GCGDSTakeCardProficiencyRewardRsp

// int32 retcode = 8;
inline void GCGDSTakeCardProficiencyRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGDSTakeCardProficiencyRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardRsp.retcode)
  return retcode_;
}
inline void GCGDSTakeCardProficiencyRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardRsp.retcode)
}

// uint32 reward_index = 10;
inline void GCGDSTakeCardProficiencyRewardRsp::clear_reward_index() {
  reward_index_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardRsp::reward_index() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardRsp.reward_index)
  return reward_index_;
}
inline void GCGDSTakeCardProficiencyRewardRsp::set_reward_index(::google::protobuf::uint32 value) {
  
  reward_index_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardRsp.reward_index)
}

// uint32 card_id = 7;
inline void GCGDSTakeCardProficiencyRewardRsp::clear_card_id() {
  card_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGDSTakeCardProficiencyRewardRsp::card_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGDSTakeCardProficiencyRewardRsp.card_id)
  return card_id_;
}
inline void GCGDSTakeCardProficiencyRewardRsp::set_card_id(::google::protobuf::uint32 value) {
  
  card_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGDSTakeCardProficiencyRewardRsp.card_id)
}

// -------------------------------------------------------------------

// GCGDSBanCardNotify

// repeated uint32 card_list = 4;
inline int GCGDSBanCardNotify::card_list_size() const {
  return card_list_.size();
}
inline void GCGDSBanCardNotify::clear_card_list() {
  card_list_.Clear();
}
inline ::google::protobuf::uint32 GCGDSBanCardNotify::card_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGDSBanCardNotify.card_list)
  return card_list_.Get(index);
}
inline void GCGDSBanCardNotify::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGDSBanCardNotify.card_list)
}
inline void GCGDSBanCardNotify::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGDSBanCardNotify.card_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGDSBanCardNotify::card_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGDSBanCardNotify.card_list)
  return card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGDSBanCardNotify::mutable_card_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGDSBanCardNotify.card_list)
  return &card_list_;
}

// -------------------------------------------------------------------

// GCGTCTavernInfoNotify

// bool is_last_duel_win = 14;
inline void GCGTCTavernInfoNotify::clear_is_last_duel_win() {
  is_last_duel_win_ = false;
}
inline bool GCGTCTavernInfoNotify::is_last_duel_win() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.is_last_duel_win)
  return is_last_duel_win_;
}
inline void GCGTCTavernInfoNotify::set_is_last_duel_win(bool value) {
  
  is_last_duel_win_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.is_last_duel_win)
}

// uint32 level_id = 11;
inline void GCGTCTavernInfoNotify::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCTavernInfoNotify::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.level_id)
  return level_id_;
}
inline void GCGTCTavernInfoNotify::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.level_id)
}

// bool is_owner_in_duel = 5;
inline void GCGTCTavernInfoNotify::clear_is_owner_in_duel() {
  is_owner_in_duel_ = false;
}
inline bool GCGTCTavernInfoNotify::is_owner_in_duel() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.is_owner_in_duel)
  return is_owner_in_duel_;
}
inline void GCGTCTavernInfoNotify::set_is_owner_in_duel(bool value) {
  
  is_owner_in_duel_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.is_owner_in_duel)
}

// uint32 point_id = 3;
inline void GCGTCTavernInfoNotify::clear_point_id() {
  point_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCTavernInfoNotify::point_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.point_id)
  return point_id_;
}
inline void GCGTCTavernInfoNotify::set_point_id(::google::protobuf::uint32 value) {
  
  point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.point_id)
}

// uint32 avatar_id = 12;
inline void GCGTCTavernInfoNotify::clear_avatar_id() {
  avatar_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCTavernInfoNotify::avatar_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.avatar_id)
  return avatar_id_;
}
inline void GCGTCTavernInfoNotify::set_avatar_id(::google::protobuf::uint32 value) {
  
  avatar_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.avatar_id)
}

// uint32 character_id = 7;
inline void GCGTCTavernInfoNotify::clear_character_id() {
  character_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCTavernInfoNotify::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.character_id)
  return character_id_;
}
inline void GCGTCTavernInfoNotify::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.character_id)
}

// uint32 element_type = 10;
inline void GCGTCTavernInfoNotify::clear_element_type() {
  element_type_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCTavernInfoNotify::element_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernInfoNotify.element_type)
  return element_type_;
}
inline void GCGTCTavernInfoNotify::set_element_type(::google::protobuf::uint32 value) {
  
  element_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernInfoNotify.element_type)
}

// -------------------------------------------------------------------

// GCGTCInviteReq

// uint32 level_id = 3;
inline void GCGTCInviteReq::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCInviteReq::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteReq.level_id)
  return level_id_;
}
inline void GCGTCInviteReq::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteReq.level_id)
}

// uint32 character_id = 6;
inline void GCGTCInviteReq::clear_character_id() {
  character_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCInviteReq::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteReq.character_id)
  return character_id_;
}
inline void GCGTCInviteReq::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteReq.character_id)
}

// -------------------------------------------------------------------

// GCGTCInviteRsp

// uint32 character_id = 12;
inline void GCGTCInviteRsp::clear_character_id() {
  character_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCInviteRsp::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteRsp.character_id)
  return character_id_;
}
inline void GCGTCInviteRsp::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteRsp.character_id)
}

// int32 retcode = 5;
inline void GCGTCInviteRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGTCInviteRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCInviteRsp.retcode)
  return retcode_;
}
inline void GCGTCInviteRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCInviteRsp.retcode)
}

// -------------------------------------------------------------------

// GCGTCTavernChallengeData

// repeated uint32 unlock_level_id_list = 1;
inline int GCGTCTavernChallengeData::unlock_level_id_list_size() const {
  return unlock_level_id_list_.size();
}
inline void GCGTCTavernChallengeData::clear_unlock_level_id_list() {
  unlock_level_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGTCTavernChallengeData::unlock_level_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeData.unlock_level_id_list)
  return unlock_level_id_list_.Get(index);
}
inline void GCGTCTavernChallengeData::set_unlock_level_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_level_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernChallengeData.unlock_level_id_list)
}
inline void GCGTCTavernChallengeData::add_unlock_level_id_list(::google::protobuf::uint32 value) {
  unlock_level_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGTCTavernChallengeData.unlock_level_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGTCTavernChallengeData::unlock_level_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTCTavernChallengeData.unlock_level_id_list)
  return unlock_level_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGTCTavernChallengeData::mutable_unlock_level_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTCTavernChallengeData.unlock_level_id_list)
  return &unlock_level_id_list_;
}

// uint32 character_id = 8;
inline void GCGTCTavernChallengeData::clear_character_id() {
  character_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTCTavernChallengeData::character_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeData.character_id)
  return character_id_;
}
inline void GCGTCTavernChallengeData::set_character_id(::google::protobuf::uint32 value) {
  
  character_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTCTavernChallengeData.character_id)
}

// -------------------------------------------------------------------

// GCGTCTavernChallengeDataNotify

// repeated .proto.GCGTCTavernChallengeData tavern_challenge_list = 13;
inline int GCGTCTavernChallengeDataNotify::tavern_challenge_list_size() const {
  return tavern_challenge_list_.size();
}
inline void GCGTCTavernChallengeDataNotify::clear_tavern_challenge_list() {
  tavern_challenge_list_.Clear();
}
inline const ::proto::GCGTCTavernChallengeData& GCGTCTavernChallengeDataNotify::tavern_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_.Get(index);
}
inline ::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeDataNotify::mutable_tavern_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_.Mutable(index);
}
inline ::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeDataNotify::add_tavern_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGTCTavernChallengeData >*
GCGTCTavernChallengeDataNotify::mutable_tavern_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return &tavern_challenge_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGTCTavernChallengeData >&
GCGTCTavernChallengeDataNotify::tavern_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTCTavernChallengeDataNotify.tavern_challenge_list)
  return tavern_challenge_list_;
}

// -------------------------------------------------------------------

// GCGTCTavernChallengeUpdateNotify

// .proto.GCGTCTavernChallengeData tavern_challenge = 5;
inline bool GCGTCTavernChallengeUpdateNotify::has_tavern_challenge() const {
  return this != internal_default_instance() && tavern_challenge_ != NULL;
}
inline void GCGTCTavernChallengeUpdateNotify::clear_tavern_challenge() {
  if (GetArenaNoVirtual() == NULL && tavern_challenge_ != NULL) delete tavern_challenge_;
  tavern_challenge_ = NULL;
}
inline const ::proto::GCGTCTavernChallengeData& GCGTCTavernChallengeUpdateNotify::tavern_challenge() const {
  const ::proto::GCGTCTavernChallengeData* p = tavern_challenge_;
  // @@protoc_insertion_point(field_get:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGTCTavernChallengeData*>(
      &::proto::_GCGTCTavernChallengeData_default_instance_);
}
inline ::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeUpdateNotify::mutable_tavern_challenge() {
  
  if (tavern_challenge_ == NULL) {
    tavern_challenge_ = new ::proto::GCGTCTavernChallengeData;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
  return tavern_challenge_;
}
inline ::proto::GCGTCTavernChallengeData* GCGTCTavernChallengeUpdateNotify::release_tavern_challenge() {
  // @@protoc_insertion_point(field_release:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
  
  ::proto::GCGTCTavernChallengeData* temp = tavern_challenge_;
  tavern_challenge_ = NULL;
  return temp;
}
inline void GCGTCTavernChallengeUpdateNotify::set_allocated_tavern_challenge(::proto::GCGTCTavernChallengeData* tavern_challenge) {
  delete tavern_challenge_;
  tavern_challenge_ = tavern_challenge;
  if (tavern_challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGTCTavernChallengeUpdateNotify.tavern_challenge)
}

// -------------------------------------------------------------------

// GCGGrowthLevelNotify

// uint32 exp = 7;
inline void GCGGrowthLevelNotify::clear_exp() {
  exp_ = 0u;
}
inline ::google::protobuf::uint32 GCGGrowthLevelNotify::exp() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelNotify.exp)
  return exp_;
}
inline void GCGGrowthLevelNotify::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelNotify.exp)
}

// uint32 level = 11;
inline void GCGGrowthLevelNotify::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 GCGGrowthLevelNotify::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelNotify.level)
  return level_;
}
inline void GCGGrowthLevelNotify::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelNotify.level)
}

// -------------------------------------------------------------------

// GCGGrowthLevelRewardNotify

// repeated uint32 level_reward_taken_list = 8;
inline int GCGGrowthLevelRewardNotify::level_reward_taken_list_size() const {
  return level_reward_taken_list_.size();
}
inline void GCGGrowthLevelRewardNotify::clear_level_reward_taken_list() {
  level_reward_taken_list_.Clear();
}
inline ::google::protobuf::uint32 GCGGrowthLevelRewardNotify::level_reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
  return level_reward_taken_list_.Get(index);
}
inline void GCGGrowthLevelRewardNotify::set_level_reward_taken_list(int index, ::google::protobuf::uint32 value) {
  level_reward_taken_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
}
inline void GCGGrowthLevelRewardNotify::add_level_reward_taken_list(::google::protobuf::uint32 value) {
  level_reward_taken_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGGrowthLevelRewardNotify::level_reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
  return level_reward_taken_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGGrowthLevelRewardNotify::mutable_level_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGGrowthLevelRewardNotify.level_reward_taken_list)
  return &level_reward_taken_list_;
}

// -------------------------------------------------------------------

// GCGGrowthLevelTakeRewardReq

// uint32 level = 4;
inline void GCGGrowthLevelTakeRewardReq::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 GCGGrowthLevelTakeRewardReq::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelTakeRewardReq.level)
  return level_;
}
inline void GCGGrowthLevelTakeRewardReq::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelTakeRewardReq.level)
}

// -------------------------------------------------------------------

// GCGGrowthLevelTakeRewardRsp

// uint32 level = 1;
inline void GCGGrowthLevelTakeRewardRsp::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 GCGGrowthLevelTakeRewardRsp::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelTakeRewardRsp.level)
  return level_;
}
inline void GCGGrowthLevelTakeRewardRsp::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelTakeRewardRsp.level)
}

// int32 retcode = 13;
inline void GCGGrowthLevelTakeRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGGrowthLevelTakeRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGGrowthLevelTakeRewardRsp.retcode)
  return retcode_;
}
inline void GCGGrowthLevelTakeRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGGrowthLevelTakeRewardRsp.retcode)
}

// -------------------------------------------------------------------

// GCGInviteGuestBattleReq

// uint32 uid = 11;
inline void GCGInviteGuestBattleReq::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 GCGInviteGuestBattleReq::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleReq.uid)
  return uid_;
}
inline void GCGInviteGuestBattleReq::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleReq.uid)
}

// -------------------------------------------------------------------

// GCGInviteGuestBattleRsp

// int32 retcode = 3;
inline void GCGInviteGuestBattleRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGInviteGuestBattleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.retcode)
  return retcode_;
}
inline void GCGInviteGuestBattleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.retcode)
}

// uint32 confirm_end_time = 2;
inline void GCGInviteGuestBattleRsp::clear_confirm_end_time() {
  confirm_end_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGInviteGuestBattleRsp::confirm_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.confirm_end_time)
  return confirm_end_time_;
}
inline void GCGInviteGuestBattleRsp::set_confirm_end_time(::google::protobuf::uint32 value) {
  
  confirm_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.confirm_end_time)
}

// uint32 punish_end_time = 9;
inline void GCGInviteGuestBattleRsp::clear_punish_end_time() {
  punish_end_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGInviteGuestBattleRsp::punish_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.punish_end_time)
  return punish_end_time_;
}
inline void GCGInviteGuestBattleRsp::set_punish_end_time(::google::protobuf::uint32 value) {
  
  punish_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.punish_end_time)
}

// uint32 uid = 11;
inline void GCGInviteGuestBattleRsp::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 GCGInviteGuestBattleRsp::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteGuestBattleRsp.uid)
  return uid_;
}
inline void GCGInviteGuestBattleRsp::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteGuestBattleRsp.uid)
}

// -------------------------------------------------------------------

// GCGInviteBattleNotify

// uint32 confirm_end_time = 10;
inline void GCGInviteBattleNotify::clear_confirm_end_time() {
  confirm_end_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGInviteBattleNotify::confirm_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGInviteBattleNotify.confirm_end_time)
  return confirm_end_time_;
}
inline void GCGInviteBattleNotify::set_confirm_end_time(::google::protobuf::uint32 value) {
  
  confirm_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGInviteBattleNotify.confirm_end_time)
}

// -------------------------------------------------------------------

// GCGApplyInviteBattleReq

// bool is_agree = 9;
inline void GCGApplyInviteBattleReq::clear_is_agree() {
  is_agree_ = false;
}
inline bool GCGApplyInviteBattleReq::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleReq.is_agree)
  return is_agree_;
}
inline void GCGApplyInviteBattleReq::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleReq.is_agree)
}

// -------------------------------------------------------------------

// GCGApplyInviteBattleRsp

// uint32 punish_end_time = 7;
inline void GCGApplyInviteBattleRsp::clear_punish_end_time() {
  punish_end_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGApplyInviteBattleRsp::punish_end_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleRsp.punish_end_time)
  return punish_end_time_;
}
inline void GCGApplyInviteBattleRsp::set_punish_end_time(::google::protobuf::uint32 value) {
  
  punish_end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleRsp.punish_end_time)
}

// int32 retcode = 5;
inline void GCGApplyInviteBattleRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGApplyInviteBattleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleRsp.retcode)
  return retcode_;
}
inline void GCGApplyInviteBattleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleRsp.retcode)
}

// -------------------------------------------------------------------

// GCGApplyInviteBattleNotify

// bool is_agree = 14;
inline void GCGApplyInviteBattleNotify::clear_is_agree() {
  is_agree_ = false;
}
inline bool GCGApplyInviteBattleNotify::is_agree() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleNotify.is_agree)
  return is_agree_;
}
inline void GCGApplyInviteBattleNotify::set_is_agree(bool value) {
  
  is_agree_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleNotify.is_agree)
}

// int32 retcode = 6;
inline void GCGApplyInviteBattleNotify::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGApplyInviteBattleNotify::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGApplyInviteBattleNotify.retcode)
  return retcode_;
}
inline void GCGApplyInviteBattleNotify::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGApplyInviteBattleNotify.retcode)
}

// -------------------------------------------------------------------

// GCGWorldPlayerGCGStateReq

// -------------------------------------------------------------------

// GCGPlayerGCGState

// bool is_reasouce_complete = 7;
inline void GCGPlayerGCGState::clear_is_reasouce_complete() {
  is_reasouce_complete_ = false;
}
inline bool GCGPlayerGCGState::is_reasouce_complete() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerGCGState.is_reasouce_complete)
  return is_reasouce_complete_;
}
inline void GCGPlayerGCGState::set_is_reasouce_complete(bool value) {
  
  is_reasouce_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerGCGState.is_reasouce_complete)
}

// bool is_gcg_state_open = 5;
inline void GCGPlayerGCGState::clear_is_gcg_state_open() {
  is_gcg_state_open_ = false;
}
inline bool GCGPlayerGCGState::is_gcg_state_open() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerGCGState.is_gcg_state_open)
  return is_gcg_state_open_;
}
inline void GCGPlayerGCGState::set_is_gcg_state_open(bool value) {
  
  is_gcg_state_open_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerGCGState.is_gcg_state_open)
}

// uint32 uid = 2;
inline void GCGPlayerGCGState::clear_uid() {
  uid_ = 0u;
}
inline ::google::protobuf::uint32 GCGPlayerGCGState::uid() const {
  // @@protoc_insertion_point(field_get:proto.GCGPlayerGCGState.uid)
  return uid_;
}
inline void GCGPlayerGCGState::set_uid(::google::protobuf::uint32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGPlayerGCGState.uid)
}

// -------------------------------------------------------------------

// GCGWorldPlayerGCGStateRsp

// repeated .proto.GCGPlayerGCGState player_state = 12;
inline int GCGWorldPlayerGCGStateRsp::player_state_size() const {
  return player_state_.size();
}
inline void GCGWorldPlayerGCGStateRsp::clear_player_state() {
  player_state_.Clear();
}
inline const ::proto::GCGPlayerGCGState& GCGWorldPlayerGCGStateRsp::player_state(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_.Get(index);
}
inline ::proto::GCGPlayerGCGState* GCGWorldPlayerGCGStateRsp::mutable_player_state(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_.Mutable(index);
}
inline ::proto::GCGPlayerGCGState* GCGWorldPlayerGCGStateRsp::add_player_state() {
  // @@protoc_insertion_point(field_add:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerGCGState >*
GCGWorldPlayerGCGStateRsp::mutable_player_state() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return &player_state_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGPlayerGCGState >&
GCGWorldPlayerGCGStateRsp::player_state() const {
  // @@protoc_insertion_point(field_list:proto.GCGWorldPlayerGCGStateRsp.player_state)
  return player_state_;
}

// int32 retcode = 10;
inline void GCGWorldPlayerGCGStateRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGWorldPlayerGCGStateRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGWorldPlayerGCGStateRsp.retcode)
  return retcode_;
}
inline void GCGWorldPlayerGCGStateRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWorldPlayerGCGStateRsp.retcode)
}

// -------------------------------------------------------------------

// GCGSettleNotify

// bool is_win = 13;
inline void GCGSettleNotify::clear_is_win() {
  is_win_ = false;
}
inline bool GCGSettleNotify::is_win() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.is_win)
  return is_win_;
}
inline void GCGSettleNotify::set_is_win(bool value) {
  
  is_win_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.is_win)
}

// uint32 game_id = 7;
inline void GCGSettleNotify::clear_game_id() {
  game_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGSettleNotify::game_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.game_id)
  return game_id_;
}
inline void GCGSettleNotify::set_game_id(::google::protobuf::uint32 value) {
  
  game_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.game_id)
}

// .proto.GCGEndReason reason = 3;
inline void GCGSettleNotify::clear_reason() {
  reason_ = 0;
}
inline ::proto::GCGEndReason GCGSettleNotify::reason() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.reason)
  return static_cast< ::proto::GCGEndReason >(reason_);
}
inline void GCGSettleNotify::set_reason(::proto::GCGEndReason value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.reason)
}

// .proto.GCGGameBusinessType business_type = 2;
inline void GCGSettleNotify::clear_business_type() {
  business_type_ = 0;
}
inline ::proto::GCGGameBusinessType GCGSettleNotify::business_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.business_type)
  return static_cast< ::proto::GCGGameBusinessType >(business_type_);
}
inline void GCGSettleNotify::set_business_type(::proto::GCGGameBusinessType value) {
  
  business_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.business_type)
}

// repeated uint32 finished_challenge_id_list = 6;
inline int GCGSettleNotify::finished_challenge_id_list_size() const {
  return finished_challenge_id_list_.size();
}
inline void GCGSettleNotify::clear_finished_challenge_id_list() {
  finished_challenge_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGSettleNotify::finished_challenge_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.finished_challenge_id_list)
  return finished_challenge_id_list_.Get(index);
}
inline void GCGSettleNotify::set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.finished_challenge_id_list)
}
inline void GCGSettleNotify::add_finished_challenge_id_list(::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSettleNotify.finished_challenge_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSettleNotify::finished_challenge_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSettleNotify.finished_challenge_id_list)
  return finished_challenge_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSettleNotify::mutable_finished_challenge_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSettleNotify.finished_challenge_id_list)
  return &finished_challenge_id_list_;
}

// uint32 win_controller_id = 15;
inline void GCGSettleNotify::clear_win_controller_id() {
  win_controller_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGSettleNotify::win_controller_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.win_controller_id)
  return win_controller_id_;
}
inline void GCGSettleNotify::set_win_controller_id(::google::protobuf::uint32 value) {
  
  win_controller_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.win_controller_id)
}

// repeated uint32 forbid_finish_challenge_list = 12;
inline int GCGSettleNotify::forbid_finish_challenge_list_size() const {
  return forbid_finish_challenge_list_.size();
}
inline void GCGSettleNotify::clear_forbid_finish_challenge_list() {
  forbid_finish_challenge_list_.Clear();
}
inline ::google::protobuf::uint32 GCGSettleNotify::forbid_finish_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_.Get(index);
}
inline void GCGSettleNotify::set_forbid_finish_challenge_list(int index, ::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGSettleNotify.forbid_finish_challenge_list)
}
inline void GCGSettleNotify::add_forbid_finish_challenge_list(::google::protobuf::uint32 value) {
  forbid_finish_challenge_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGSettleNotify.forbid_finish_challenge_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGSettleNotify::forbid_finish_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSettleNotify.forbid_finish_challenge_list)
  return forbid_finish_challenge_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGSettleNotify::mutable_forbid_finish_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSettleNotify.forbid_finish_challenge_list)
  return &forbid_finish_challenge_list_;
}

// repeated .proto.ItemParam reward_item_list = 9;
inline int GCGSettleNotify::reward_item_list_size() const {
  return reward_item_list_.size();
}
inline void GCGSettleNotify::clear_reward_item_list() {
  reward_item_list_.Clear();
}
inline const ::proto::ItemParam& GCGSettleNotify::reward_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_.Get(index);
}
inline ::proto::ItemParam* GCGSettleNotify::mutable_reward_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_.Mutable(index);
}
inline ::proto::ItemParam* GCGSettleNotify::add_reward_item_list() {
  // @@protoc_insertion_point(field_add:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
GCGSettleNotify::mutable_reward_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGSettleNotify.reward_item_list)
  return &reward_item_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
GCGSettleNotify::reward_item_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGSettleNotify.reward_item_list)
  return reward_item_list_;
}

// -------------------------------------------------------------------

// GCGResourceStateNotify

// bool is_complete = 5;
inline void GCGResourceStateNotify::clear_is_complete() {
  is_complete_ = false;
}
inline bool GCGResourceStateNotify::is_complete() const {
  // @@protoc_insertion_point(field_get:proto.GCGResourceStateNotify.is_complete)
  return is_complete_;
}
inline void GCGResourceStateNotify::set_is_complete(bool value) {
  
  is_complete_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGResourceStateNotify.is_complete)
}

// -------------------------------------------------------------------

// GCGClientSettleReq

// -------------------------------------------------------------------

// GCGClientSettleRsp

// uint32 close_time = 4;
inline void GCGClientSettleRsp::clear_close_time() {
  close_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGClientSettleRsp::close_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGClientSettleRsp.close_time)
  return close_time_;
}
inline void GCGClientSettleRsp::set_close_time(::google::protobuf::uint32 value) {
  
  close_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGClientSettleRsp.close_time)
}

// int32 retcode = 1;
inline void GCGClientSettleRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGClientSettleRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGClientSettleRsp.retcode)
  return retcode_;
}
inline void GCGClientSettleRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGClientSettleRsp.retcode)
}

// -------------------------------------------------------------------

// GCGSettleOptionReq

// .proto.GCGSettleOption option = 5;
inline void GCGSettleOptionReq::clear_option() {
  option_ = 0;
}
inline ::proto::GCGSettleOption GCGSettleOptionReq::option() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleOptionReq.option)
  return static_cast< ::proto::GCGSettleOption >(option_);
}
inline void GCGSettleOptionReq::set_option(::proto::GCGSettleOption value) {
  
  option_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleOptionReq.option)
}

// -------------------------------------------------------------------

// GCGSettleOptionRsp

// .proto.GCGSettleOption option = 13;
inline void GCGSettleOptionRsp::clear_option() {
  option_ = 0;
}
inline ::proto::GCGSettleOption GCGSettleOptionRsp::option() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleOptionRsp.option)
  return static_cast< ::proto::GCGSettleOption >(option_);
}
inline void GCGSettleOptionRsp::set_option(::proto::GCGSettleOption value) {
  
  option_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleOptionRsp.option)
}

// int32 retcode = 14;
inline void GCGSettleOptionRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGSettleOptionRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGSettleOptionRsp.retcode)
  return retcode_;
}
inline void GCGSettleOptionRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGSettleOptionRsp.retcode)
}

// -------------------------------------------------------------------

// GCGBasicDataNotify

// uint32 level = 9;
inline void GCGBasicDataNotify::clear_level() {
  level_ = 0u;
}
inline ::google::protobuf::uint32 GCGBasicDataNotify::level() const {
  // @@protoc_insertion_point(field_get:proto.GCGBasicDataNotify.level)
  return level_;
}
inline void GCGBasicDataNotify::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBasicDataNotify.level)
}

// uint32 exp = 4;
inline void GCGBasicDataNotify::clear_exp() {
  exp_ = 0u;
}
inline ::google::protobuf::uint32 GCGBasicDataNotify::exp() const {
  // @@protoc_insertion_point(field_get:proto.GCGBasicDataNotify.exp)
  return exp_;
}
inline void GCGBasicDataNotify::set_exp(::google::protobuf::uint32 value) {
  
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBasicDataNotify.exp)
}

// repeated uint32 level_reward_taken_list = 12;
inline int GCGBasicDataNotify::level_reward_taken_list_size() const {
  return level_reward_taken_list_.size();
}
inline void GCGBasicDataNotify::clear_level_reward_taken_list() {
  level_reward_taken_list_.Clear();
}
inline ::google::protobuf::uint32 GCGBasicDataNotify::level_reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGBasicDataNotify.level_reward_taken_list)
  return level_reward_taken_list_.Get(index);
}
inline void GCGBasicDataNotify::set_level_reward_taken_list(int index, ::google::protobuf::uint32 value) {
  level_reward_taken_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGBasicDataNotify.level_reward_taken_list)
}
inline void GCGBasicDataNotify::add_level_reward_taken_list(::google::protobuf::uint32 value) {
  level_reward_taken_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGBasicDataNotify.level_reward_taken_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGBasicDataNotify::level_reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGBasicDataNotify.level_reward_taken_list)
  return level_reward_taken_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGBasicDataNotify::mutable_level_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGBasicDataNotify.level_reward_taken_list)
  return &level_reward_taken_list_;
}

// -------------------------------------------------------------------

// GCGTavernNpcInfo

// uint32 id = 6;
inline void GCGTavernNpcInfo::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTavernNpcInfo::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfo.id)
  return id_;
}
inline void GCGTavernNpcInfo::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTavernNpcInfo.id)
}

// uint32 level_id = 10;
inline void GCGTavernNpcInfo::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTavernNpcInfo::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfo.level_id)
  return level_id_;
}
inline void GCGTavernNpcInfo::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTavernNpcInfo.level_id)
}

// uint32 scene_point_id = 3;
inline void GCGTavernNpcInfo::clear_scene_point_id() {
  scene_point_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGTavernNpcInfo::scene_point_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfo.scene_point_id)
  return scene_point_id_;
}
inline void GCGTavernNpcInfo::set_scene_point_id(::google::protobuf::uint32 value) {
  
  scene_point_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGTavernNpcInfo.scene_point_id)
}

// -------------------------------------------------------------------

// GCGTavernNpcInfoNotify

// repeated .proto.GCGTavernNpcInfo week_npc_list = 1;
inline int GCGTavernNpcInfoNotify::week_npc_list_size() const {
  return week_npc_list_.size();
}
inline void GCGTavernNpcInfoNotify::clear_week_npc_list() {
  week_npc_list_.Clear();
}
inline const ::proto::GCGTavernNpcInfo& GCGTavernNpcInfoNotify::week_npc_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_.Get(index);
}
inline ::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::mutable_week_npc_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_.Mutable(index);
}
inline ::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::add_week_npc_list() {
  // @@protoc_insertion_point(field_add:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >*
GCGTavernNpcInfoNotify::mutable_week_npc_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return &week_npc_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >&
GCGTavernNpcInfoNotify::week_npc_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTavernNpcInfoNotify.week_npc_list)
  return week_npc_list_;
}

// .proto.GCGTavernNpcInfo character_npc = 5;
inline bool GCGTavernNpcInfoNotify::has_character_npc() const {
  return this != internal_default_instance() && character_npc_ != NULL;
}
inline void GCGTavernNpcInfoNotify::clear_character_npc() {
  if (GetArenaNoVirtual() == NULL && character_npc_ != NULL) delete character_npc_;
  character_npc_ = NULL;
}
inline const ::proto::GCGTavernNpcInfo& GCGTavernNpcInfoNotify::character_npc() const {
  const ::proto::GCGTavernNpcInfo* p = character_npc_;
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfoNotify.character_npc)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGTavernNpcInfo*>(
      &::proto::_GCGTavernNpcInfo_default_instance_);
}
inline ::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::mutable_character_npc() {
  
  if (character_npc_ == NULL) {
    character_npc_ = new ::proto::GCGTavernNpcInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGTavernNpcInfoNotify.character_npc)
  return character_npc_;
}
inline ::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::release_character_npc() {
  // @@protoc_insertion_point(field_release:proto.GCGTavernNpcInfoNotify.character_npc)
  
  ::proto::GCGTavernNpcInfo* temp = character_npc_;
  character_npc_ = NULL;
  return temp;
}
inline void GCGTavernNpcInfoNotify::set_allocated_character_npc(::proto::GCGTavernNpcInfo* character_npc) {
  delete character_npc_;
  character_npc_ = character_npc;
  if (character_npc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGTavernNpcInfoNotify.character_npc)
}

// repeated .proto.GCGTavernNpcInfo const_npc_list = 15;
inline int GCGTavernNpcInfoNotify::const_npc_list_size() const {
  return const_npc_list_.size();
}
inline void GCGTavernNpcInfoNotify::clear_const_npc_list() {
  const_npc_list_.Clear();
}
inline const ::proto::GCGTavernNpcInfo& GCGTavernNpcInfoNotify::const_npc_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_.Get(index);
}
inline ::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::mutable_const_npc_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_.Mutable(index);
}
inline ::proto::GCGTavernNpcInfo* GCGTavernNpcInfoNotify::add_const_npc_list() {
  // @@protoc_insertion_point(field_add:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >*
GCGTavernNpcInfoNotify::mutable_const_npc_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return &const_npc_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGTavernNpcInfo >&
GCGTavernNpcInfoNotify::const_npc_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGTavernNpcInfoNotify.const_npc_list)
  return const_npc_list_;
}

// -------------------------------------------------------------------

// GCGStartChallengeReq

// .proto.GCGLevelType level_type = 5;
inline void GCGStartChallengeReq::clear_level_type() {
  level_type_ = 0;
}
inline ::proto::GCGLevelType GCGStartChallengeReq::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeReq.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
inline void GCGStartChallengeReq::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeReq.level_type)
}

// uint32 config_id = 13;
inline void GCGStartChallengeReq::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeReq::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeReq.config_id)
  return config_id_;
}
inline void GCGStartChallengeReq::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeReq.config_id)
}

// uint32 level_id = 12;
inline void GCGStartChallengeReq::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeReq::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeReq.level_id)
  return level_id_;
}
inline void GCGStartChallengeReq::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeReq.level_id)
}

// -------------------------------------------------------------------

// GCGStartChallengeRsp

// .proto.GCGLevelType level_type = 12;
inline void GCGStartChallengeRsp::clear_level_type() {
  level_type_ = 0;
}
inline ::proto::GCGLevelType GCGStartChallengeRsp::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
inline void GCGStartChallengeRsp::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.level_type)
}

// int32 retcode = 15;
inline void GCGStartChallengeRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGStartChallengeRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.retcode)
  return retcode_;
}
inline void GCGStartChallengeRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.retcode)
}

// uint32 config_id = 6;
inline void GCGStartChallengeRsp::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeRsp::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.config_id)
  return config_id_;
}
inline void GCGStartChallengeRsp::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.config_id)
}

// uint32 level_id = 1;
inline void GCGStartChallengeRsp::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeRsp::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeRsp.level_id)
  return level_id_;
}
inline void GCGStartChallengeRsp::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeRsp.level_id)
}

// -------------------------------------------------------------------

// GCGWeekChallengeInfo

// uint32 npc_id = 4;
inline void GCGWeekChallengeInfo::clear_npc_id() {
  npc_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGWeekChallengeInfo::npc_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfo.npc_id)
  return npc_id_;
}
inline void GCGWeekChallengeInfo::set_npc_id(::google::protobuf::uint32 value) {
  
  npc_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfo.npc_id)
}

// bool is_finished = 7;
inline void GCGWeekChallengeInfo::clear_is_finished() {
  is_finished_ = false;
}
inline bool GCGWeekChallengeInfo::is_finished() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfo.is_finished)
  return is_finished_;
}
inline void GCGWeekChallengeInfo::set_is_finished(bool value) {
  
  is_finished_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfo.is_finished)
}

// uint32 unlock_time = 1;
inline void GCGWeekChallengeInfo::clear_unlock_time() {
  unlock_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGWeekChallengeInfo::unlock_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfo.unlock_time)
  return unlock_time_;
}
inline void GCGWeekChallengeInfo::set_unlock_time(::google::protobuf::uint32 value) {
  
  unlock_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfo.unlock_time)
}

// -------------------------------------------------------------------

// GCGWeekChallengeInfoNotify

// repeated .proto.GCGWeekChallengeInfo challenge_info_list = 15;
inline int GCGWeekChallengeInfoNotify::challenge_info_list_size() const {
  return challenge_info_list_.size();
}
inline void GCGWeekChallengeInfoNotify::clear_challenge_info_list() {
  challenge_info_list_.Clear();
}
inline const ::proto::GCGWeekChallengeInfo& GCGWeekChallengeInfoNotify::challenge_info_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_.Get(index);
}
inline ::proto::GCGWeekChallengeInfo* GCGWeekChallengeInfoNotify::mutable_challenge_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_.Mutable(index);
}
inline ::proto::GCGWeekChallengeInfo* GCGWeekChallengeInfoNotify::add_challenge_info_list() {
  // @@protoc_insertion_point(field_add:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGWeekChallengeInfo >*
GCGWeekChallengeInfoNotify::mutable_challenge_info_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return &challenge_info_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGWeekChallengeInfo >&
GCGWeekChallengeInfoNotify::challenge_info_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGWeekChallengeInfoNotify.challenge_info_list)
  return challenge_info_list_;
}

// uint32 next_refresh_time = 7;
inline void GCGWeekChallengeInfoNotify::clear_next_refresh_time() {
  next_refresh_time_ = 0u;
}
inline ::google::protobuf::uint32 GCGWeekChallengeInfoNotify::next_refresh_time() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfoNotify.next_refresh_time)
  return next_refresh_time_;
}
inline void GCGWeekChallengeInfoNotify::set_next_refresh_time(::google::protobuf::uint32 value) {
  
  next_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfoNotify.next_refresh_time)
}

// bool is_notify_npc_change = 9;
inline void GCGWeekChallengeInfoNotify::clear_is_notify_npc_change() {
  is_notify_npc_change_ = false;
}
inline bool GCGWeekChallengeInfoNotify::is_notify_npc_change() const {
  // @@protoc_insertion_point(field_get:proto.GCGWeekChallengeInfoNotify.is_notify_npc_change)
  return is_notify_npc_change_;
}
inline void GCGWeekChallengeInfoNotify::set_is_notify_npc_change(bool value) {
  
  is_notify_npc_change_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGWeekChallengeInfoNotify.is_notify_npc_change)
}

// -------------------------------------------------------------------

// GCGStartChallengeByCheckRewardReq

// uint32 level_id = 9;
inline void GCGStartChallengeByCheckRewardReq::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeByCheckRewardReq::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardReq.level_id)
  return level_id_;
}
inline void GCGStartChallengeByCheckRewardReq::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardReq.level_id)
}

// uint32 config_id = 13;
inline void GCGStartChallengeByCheckRewardReq::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeByCheckRewardReq::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardReq.config_id)
  return config_id_;
}
inline void GCGStartChallengeByCheckRewardReq::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardReq.config_id)
}

// .proto.GCGLevelType level_type = 5;
inline void GCGStartChallengeByCheckRewardReq::clear_level_type() {
  level_type_ = 0;
}
inline ::proto::GCGLevelType GCGStartChallengeByCheckRewardReq::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardReq.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
inline void GCGStartChallengeByCheckRewardReq::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardReq.level_type)
}

// -------------------------------------------------------------------

// GCGStartChallengeByCheckRewardRsp

// .proto.GCGLevelType level_type = 11;
inline void GCGStartChallengeByCheckRewardRsp::clear_level_type() {
  level_type_ = 0;
}
inline ::proto::GCGLevelType GCGStartChallengeByCheckRewardRsp::level_type() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.level_type)
  return static_cast< ::proto::GCGLevelType >(level_type_);
}
inline void GCGStartChallengeByCheckRewardRsp::set_level_type(::proto::GCGLevelType value) {
  
  level_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.level_type)
}

// uint32 level_id = 2;
inline void GCGStartChallengeByCheckRewardRsp::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.level_id)
  return level_id_;
}
inline void GCGStartChallengeByCheckRewardRsp::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.level_id)
}

// int32 retcode = 4;
inline void GCGStartChallengeByCheckRewardRsp::clear_retcode() {
  retcode_ = 0;
}
inline ::google::protobuf::int32 GCGStartChallengeByCheckRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.retcode)
  return retcode_;
}
inline void GCGStartChallengeByCheckRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.retcode)
}

// repeated uint32 exceeded_item_list = 1;
inline int GCGStartChallengeByCheckRewardRsp::exceeded_item_list_size() const {
  return exceeded_item_list_.size();
}
inline void GCGStartChallengeByCheckRewardRsp::clear_exceeded_item_list() {
  exceeded_item_list_.Clear();
}
inline ::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::exceeded_item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
  return exceeded_item_list_.Get(index);
}
inline void GCGStartChallengeByCheckRewardRsp::set_exceeded_item_list(int index, ::google::protobuf::uint32 value) {
  exceeded_item_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
}
inline void GCGStartChallengeByCheckRewardRsp::add_exceeded_item_list(::google::protobuf::uint32 value) {
  exceeded_item_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGStartChallengeByCheckRewardRsp::exceeded_item_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
  return exceeded_item_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGStartChallengeByCheckRewardRsp::mutable_exceeded_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_list)
  return &exceeded_item_list_;
}

// uint32 config_id = 10;
inline void GCGStartChallengeByCheckRewardRsp::clear_config_id() {
  config_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::config_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.config_id)
  return config_id_;
}
inline void GCGStartChallengeByCheckRewardRsp::set_config_id(::google::protobuf::uint32 value) {
  
  config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.config_id)
}

// repeated uint32 exceeded_item_type_list = 14;
inline int GCGStartChallengeByCheckRewardRsp::exceeded_item_type_list_size() const {
  return exceeded_item_type_list_.size();
}
inline void GCGStartChallengeByCheckRewardRsp::clear_exceeded_item_type_list() {
  exceeded_item_type_list_.Clear();
}
inline ::google::protobuf::uint32 GCGStartChallengeByCheckRewardRsp::exceeded_item_type_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
  return exceeded_item_type_list_.Get(index);
}
inline void GCGStartChallengeByCheckRewardRsp::set_exceeded_item_type_list(int index, ::google::protobuf::uint32 value) {
  exceeded_item_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
}
inline void GCGStartChallengeByCheckRewardRsp::add_exceeded_item_type_list(::google::protobuf::uint32 value) {
  exceeded_item_type_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGStartChallengeByCheckRewardRsp::exceeded_item_type_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
  return exceeded_item_type_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGStartChallengeByCheckRewardRsp::mutable_exceeded_item_type_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGStartChallengeByCheckRewardRsp.exceeded_item_type_list)
  return &exceeded_item_type_list_;
}

// -------------------------------------------------------------------

// GCGLevelData

// repeated uint32 finished_challenge_id_list = 10;
inline int GCGLevelData::finished_challenge_id_list_size() const {
  return finished_challenge_id_list_.size();
}
inline void GCGLevelData::clear_finished_challenge_id_list() {
  finished_challenge_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGLevelData::finished_challenge_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelData.finished_challenge_id_list)
  return finished_challenge_id_list_.Get(index);
}
inline void GCGLevelData::set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelData.finished_challenge_id_list)
}
inline void GCGLevelData::add_finished_challenge_id_list(::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelData.finished_challenge_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelData::finished_challenge_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelData.finished_challenge_id_list)
  return finished_challenge_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelData::mutable_finished_challenge_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelData.finished_challenge_id_list)
  return &finished_challenge_id_list_;
}

// uint32 level_id = 9;
inline void GCGLevelData::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGLevelData::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelData.level_id)
  return level_id_;
}
inline void GCGLevelData::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLevelData.level_id)
}

// -------------------------------------------------------------------

// GCGBossChallengeData

// uint32 id = 9;
inline void GCGBossChallengeData::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 GCGBossChallengeData::id() const {
  // @@protoc_insertion_point(field_get:proto.GCGBossChallengeData.id)
  return id_;
}
inline void GCGBossChallengeData::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGBossChallengeData.id)
}

// repeated uint32 unlock_level_id_list = 14;
inline int GCGBossChallengeData::unlock_level_id_list_size() const {
  return unlock_level_id_list_.size();
}
inline void GCGBossChallengeData::clear_unlock_level_id_list() {
  unlock_level_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGBossChallengeData::unlock_level_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGBossChallengeData.unlock_level_id_list)
  return unlock_level_id_list_.Get(index);
}
inline void GCGBossChallengeData::set_unlock_level_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_level_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGBossChallengeData.unlock_level_id_list)
}
inline void GCGBossChallengeData::add_unlock_level_id_list(::google::protobuf::uint32 value) {
  unlock_level_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGBossChallengeData.unlock_level_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGBossChallengeData::unlock_level_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGBossChallengeData.unlock_level_id_list)
  return unlock_level_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGBossChallengeData::mutable_unlock_level_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGBossChallengeData.unlock_level_id_list)
  return &unlock_level_id_list_;
}

// -------------------------------------------------------------------

// GCGLevelChallengeNotify

// repeated .proto.GCGBossChallengeData unlock_boss_challenge_list = 3;
inline int GCGLevelChallengeNotify::unlock_boss_challenge_list_size() const {
  return unlock_boss_challenge_list_.size();
}
inline void GCGLevelChallengeNotify::clear_unlock_boss_challenge_list() {
  unlock_boss_challenge_list_.Clear();
}
inline const ::proto::GCGBossChallengeData& GCGLevelChallengeNotify::unlock_boss_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_.Get(index);
}
inline ::proto::GCGBossChallengeData* GCGLevelChallengeNotify::mutable_unlock_boss_challenge_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_.Mutable(index);
}
inline ::proto::GCGBossChallengeData* GCGLevelChallengeNotify::add_unlock_boss_challenge_list() {
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGBossChallengeData >*
GCGLevelChallengeNotify::mutable_unlock_boss_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return &unlock_boss_challenge_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGBossChallengeData >&
GCGLevelChallengeNotify::unlock_boss_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeNotify.unlock_boss_challenge_list)
  return unlock_boss_challenge_list_;
}

// repeated uint32 unlock_world_challenge_list = 8;
inline int GCGLevelChallengeNotify::unlock_world_challenge_list_size() const {
  return unlock_world_challenge_list_.size();
}
inline void GCGLevelChallengeNotify::clear_unlock_world_challenge_list() {
  unlock_world_challenge_list_.Clear();
}
inline ::google::protobuf::uint32 GCGLevelChallengeNotify::unlock_world_challenge_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
  return unlock_world_challenge_list_.Get(index);
}
inline void GCGLevelChallengeNotify::set_unlock_world_challenge_list(int index, ::google::protobuf::uint32 value) {
  unlock_world_challenge_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
}
inline void GCGLevelChallengeNotify::add_unlock_world_challenge_list(::google::protobuf::uint32 value) {
  unlock_world_challenge_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelChallengeNotify::unlock_world_challenge_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
  return unlock_world_challenge_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelChallengeNotify::mutable_unlock_world_challenge_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeNotify.unlock_world_challenge_list)
  return &unlock_world_challenge_list_;
}

// repeated .proto.GCGLevelData level_list = 10;
inline int GCGLevelChallengeNotify::level_list_size() const {
  return level_list_.size();
}
inline void GCGLevelChallengeNotify::clear_level_list() {
  level_list_.Clear();
}
inline const ::proto::GCGLevelData& GCGLevelChallengeNotify::level_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeNotify.level_list)
  return level_list_.Get(index);
}
inline ::proto::GCGLevelData* GCGLevelChallengeNotify::mutable_level_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GCGLevelChallengeNotify.level_list)
  return level_list_.Mutable(index);
}
inline ::proto::GCGLevelData* GCGLevelChallengeNotify::add_level_list() {
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeNotify.level_list)
  return level_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::GCGLevelData >*
GCGLevelChallengeNotify::mutable_level_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeNotify.level_list)
  return &level_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::GCGLevelData >&
GCGLevelChallengeNotify::level_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeNotify.level_list)
  return level_list_;
}

// -------------------------------------------------------------------

// GCGLevelChallengeFinishNotify

// repeated uint32 finished_challenge_id_list = 10;
inline int GCGLevelChallengeFinishNotify::finished_challenge_id_list_size() const {
  return finished_challenge_id_list_.size();
}
inline void GCGLevelChallengeFinishNotify::clear_finished_challenge_id_list() {
  finished_challenge_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGLevelChallengeFinishNotify::finished_challenge_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
  return finished_challenge_id_list_.Get(index);
}
inline void GCGLevelChallengeFinishNotify::set_finished_challenge_id_list(int index, ::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
}
inline void GCGLevelChallengeFinishNotify::add_finished_challenge_id_list(::google::protobuf::uint32 value) {
  finished_challenge_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelChallengeFinishNotify::finished_challenge_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
  return finished_challenge_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelChallengeFinishNotify::mutable_finished_challenge_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeFinishNotify.finished_challenge_id_list)
  return &finished_challenge_id_list_;
}

// uint32 level_id = 15;
inline void GCGLevelChallengeFinishNotify::clear_level_id() {
  level_id_ = 0u;
}
inline ::google::protobuf::uint32 GCGLevelChallengeFinishNotify::level_id() const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeFinishNotify.level_id)
  return level_id_;
}
inline void GCGLevelChallengeFinishNotify::set_level_id(::google::protobuf::uint32 value) {
  
  level_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeFinishNotify.level_id)
}

// -------------------------------------------------------------------

// GCGWorldChallengeUnlockNotify

// repeated uint32 unlock_id_list = 8;
inline int GCGWorldChallengeUnlockNotify::unlock_id_list_size() const {
  return unlock_id_list_.size();
}
inline void GCGWorldChallengeUnlockNotify::clear_unlock_id_list() {
  unlock_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGWorldChallengeUnlockNotify::unlock_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
  return unlock_id_list_.Get(index);
}
inline void GCGWorldChallengeUnlockNotify::set_unlock_id_list(int index, ::google::protobuf::uint32 value) {
  unlock_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
}
inline void GCGWorldChallengeUnlockNotify::add_unlock_id_list(::google::protobuf::uint32 value) {
  unlock_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGWorldChallengeUnlockNotify::unlock_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
  return unlock_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGWorldChallengeUnlockNotify::mutable_unlock_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGWorldChallengeUnlockNotify.unlock_id_list)
  return &unlock_id_list_;
}

// -------------------------------------------------------------------

// GCGBossChallengeUpdateNotify

// .proto.GCGBossChallengeData boss_challenge = 11;
inline bool GCGBossChallengeUpdateNotify::has_boss_challenge() const {
  return this != internal_default_instance() && boss_challenge_ != NULL;
}
inline void GCGBossChallengeUpdateNotify::clear_boss_challenge() {
  if (GetArenaNoVirtual() == NULL && boss_challenge_ != NULL) delete boss_challenge_;
  boss_challenge_ = NULL;
}
inline const ::proto::GCGBossChallengeData& GCGBossChallengeUpdateNotify::boss_challenge() const {
  const ::proto::GCGBossChallengeData* p = boss_challenge_;
  // @@protoc_insertion_point(field_get:proto.GCGBossChallengeUpdateNotify.boss_challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::GCGBossChallengeData*>(
      &::proto::_GCGBossChallengeData_default_instance_);
}
inline ::proto::GCGBossChallengeData* GCGBossChallengeUpdateNotify::mutable_boss_challenge() {
  
  if (boss_challenge_ == NULL) {
    boss_challenge_ = new ::proto::GCGBossChallengeData;
  }
  // @@protoc_insertion_point(field_mutable:proto.GCGBossChallengeUpdateNotify.boss_challenge)
  return boss_challenge_;
}
inline ::proto::GCGBossChallengeData* GCGBossChallengeUpdateNotify::release_boss_challenge() {
  // @@protoc_insertion_point(field_release:proto.GCGBossChallengeUpdateNotify.boss_challenge)
  
  ::proto::GCGBossChallengeData* temp = boss_challenge_;
  boss_challenge_ = NULL;
  return temp;
}
inline void GCGBossChallengeUpdateNotify::set_allocated_boss_challenge(::proto::GCGBossChallengeData* boss_challenge) {
  delete boss_challenge_;
  boss_challenge_ = boss_challenge;
  if (boss_challenge) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GCGBossChallengeUpdateNotify.boss_challenge)
}

// -------------------------------------------------------------------

// GCGLevelChallengeDeleteNotify

// repeated uint32 level_id_list = 13;
inline int GCGLevelChallengeDeleteNotify::level_id_list_size() const {
  return level_id_list_.size();
}
inline void GCGLevelChallengeDeleteNotify::clear_level_id_list() {
  level_id_list_.Clear();
}
inline ::google::protobuf::uint32 GCGLevelChallengeDeleteNotify::level_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GCGLevelChallengeDeleteNotify.level_id_list)
  return level_id_list_.Get(index);
}
inline void GCGLevelChallengeDeleteNotify::set_level_id_list(int index, ::google::protobuf::uint32 value) {
  level_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.GCGLevelChallengeDeleteNotify.level_id_list)
}
inline void GCGLevelChallengeDeleteNotify::add_level_id_list(::google::protobuf::uint32 value) {
  level_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.GCGLevelChallengeDeleteNotify.level_id_list)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GCGLevelChallengeDeleteNotify::level_id_list() const {
  // @@protoc_insertion_point(field_list:proto.GCGLevelChallengeDeleteNotify.level_id_list)
  return level_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GCGLevelChallengeDeleteNotify::mutable_level_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GCGLevelChallengeDeleteNotify.level_id_list)
  return &level_id_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason>() {
  return ::proto::GCGGameCreateFailReasonNotify_GCGGameCreateReason_descriptor();
}
template <> struct is_proto_enum< ::proto::GCGSkillHpChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GCGSkillHpChangeType>() {
  return ::proto::GCGSkillHpChangeType_descriptor();
}
template <> struct is_proto_enum< ::proto::GCGSettleOption> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::GCGSettleOption>() {
  return ::proto::GCGSettleOption_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cmd_2fcmd_5fgcg_2eproto__INCLUDED
