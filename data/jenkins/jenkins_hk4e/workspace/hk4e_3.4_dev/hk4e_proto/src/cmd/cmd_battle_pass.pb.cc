// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_battle_pass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_battle_pass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class BattlePassCycleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassCycle>
     _instance;
} _BattlePassCycle_default_instance_;
class BattlePassMissionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassMission>
     _instance;
} _BattlePassMission_default_instance_;
class BattlePassRewardTagDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassRewardTag>
     _instance;
} _BattlePassRewardTag_default_instance_;
class BattlePassProductDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassProduct>
     _instance;
} _BattlePassProduct_default_instance_;
class BattlePassScheduleDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassSchedule>
     _instance;
} _BattlePassSchedule_default_instance_;
class BattlePassAllDataNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassAllDataNotify>
     _instance;
} _BattlePassAllDataNotify_default_instance_;
class BattlePassMissionUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassMissionUpdateNotify>
     _instance;
} _BattlePassMissionUpdateNotify_default_instance_;
class BattlePassMissionDelNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassMissionDelNotify>
     _instance;
} _BattlePassMissionDelNotify_default_instance_;
class BattlePassCurScheduleUpdateNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassCurScheduleUpdateNotify>
     _instance;
} _BattlePassCurScheduleUpdateNotify_default_instance_;
class BattlePassRewardTakeOptionDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassRewardTakeOption>
     _instance;
} _BattlePassRewardTakeOption_default_instance_;
class TakeBattlePassRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassRewardReq>
     _instance;
} _TakeBattlePassRewardReq_default_instance_;
class TakeBattlePassRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassRewardRsp>
     _instance;
} _TakeBattlePassRewardRsp_default_instance_;
class TakeBattlePassMissionPointReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassMissionPointReq>
     _instance;
} _TakeBattlePassMissionPointReq_default_instance_;
class TakeBattlePassMissionPointRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeBattlePassMissionPointRsp>
     _instance;
} _TakeBattlePassMissionPointRsp_default_instance_;
class GetBattlePassProductReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetBattlePassProductReq>
     _instance;
} _GetBattlePassProductReq_default_instance_;
class GetBattlePassProductRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetBattlePassProductRsp>
     _instance;
} _GetBattlePassProductRsp_default_instance_;
class SetBattlePassViewedReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetBattlePassViewedReq>
     _instance;
} _SetBattlePassViewedReq_default_instance_;
class SetBattlePassViewedRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SetBattlePassViewedRsp>
     _instance;
} _SetBattlePassViewedRsp_default_instance_;
class BattlePassBuySuccNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BattlePassBuySuccNotify>
     _instance;
} _BattlePassBuySuccNotify_default_instance_;
class BuyBattlePassLevelReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BuyBattlePassLevelReq>
     _instance;
} _BuyBattlePassLevelReq_default_instance_;
class BuyBattlePassLevelRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<BuyBattlePassLevelRsp>
     _instance;
} _BuyBattlePassLevelRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[21];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, cycle_idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCycle, begin_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, cur_progress_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, mission_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, mission_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, reward_battle_pass_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, mission_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMission, total_progress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, unlock_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTag, reward_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassProduct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassProduct, normal_product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassProduct, extra_product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassProduct, upgrade_product_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, end_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, cur_cycle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, unlock_status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, reward_taken_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, cur_cycle_points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, paid_platform_flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, product_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, is_extra_paid_reward_taken_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, is_viewed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassSchedule, schedule_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, have_cur_schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, mission_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassAllDataNotify, cur_schedule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionUpdateNotify, mission_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionDelNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassMissionDelNotify, del_mission_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCurScheduleUpdateNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCurScheduleUpdateNotify, have_cur_schedule_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassCurScheduleUpdateNotify, cur_schedule_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTakeOption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTakeOption, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassRewardTakeOption, option_idx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardReq, take_option_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, item_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassRewardRsp, take_option_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointReq, mission_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeBattlePassMissionPointRsp, mission_id_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductReq, battle_pass_product_play_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductRsp, price_tier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductRsp, battle_pass_product_play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductRsp, product_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBattlePassProductRsp, cur_schedule_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBattlePassViewedReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBattlePassViewedReq, schedule_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBattlePassViewedRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBattlePassViewedRsp, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetBattlePassViewedRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBuySuccNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBuySuccNotify, schedule_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBuySuccNotify, product_play_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBuySuccNotify, add_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattlePassBuySuccNotify, item_list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBattlePassLevelReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBattlePassLevelReq, buy_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBattlePassLevelRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBattlePassLevelRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyBattlePassLevelRsp, buy_level_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(BattlePassCycle)},
  { 8, -1, sizeof(BattlePassMission)},
  { 19, -1, sizeof(BattlePassRewardTag)},
  { 27, -1, sizeof(BattlePassProduct)},
  { 35, -1, sizeof(BattlePassSchedule)},
  { 53, -1, sizeof(BattlePassAllDataNotify)},
  { 61, -1, sizeof(BattlePassMissionUpdateNotify)},
  { 67, -1, sizeof(BattlePassMissionDelNotify)},
  { 73, -1, sizeof(BattlePassCurScheduleUpdateNotify)},
  { 80, -1, sizeof(BattlePassRewardTakeOption)},
  { 87, -1, sizeof(TakeBattlePassRewardReq)},
  { 93, -1, sizeof(TakeBattlePassRewardRsp)},
  { 101, -1, sizeof(TakeBattlePassMissionPointReq)},
  { 107, -1, sizeof(TakeBattlePassMissionPointRsp)},
  { 114, -1, sizeof(GetBattlePassProductReq)},
  { 120, -1, sizeof(GetBattlePassProductRsp)},
  { 130, -1, sizeof(SetBattlePassViewedReq)},
  { 136, -1, sizeof(SetBattlePassViewedRsp)},
  { 143, -1, sizeof(BattlePassBuySuccNotify)},
  { 152, -1, sizeof(BuyBattlePassLevelReq)},
  { 158, -1, sizeof(BuyBattlePassLevelRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassCycle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassMission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassRewardTag_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassProduct_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassSchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassAllDataNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassMissionUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassMissionDelNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassCurScheduleUpdateNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassRewardTakeOption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassMissionPointReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeBattlePassMissionPointRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetBattlePassProductReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetBattlePassProductRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetBattlePassViewedReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetBattlePassViewedRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BattlePassBuySuccNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuyBattlePassLevelReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BuyBattlePassLevelRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_battle_pass.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 21);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _BattlePassCycle_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassCycle_default_instance_);_BattlePassMission_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassMission_default_instance_);_BattlePassRewardTag_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassRewardTag_default_instance_);_BattlePassProduct_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassProduct_default_instance_);_BattlePassSchedule_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassSchedule_default_instance_);_BattlePassAllDataNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassAllDataNotify_default_instance_);_BattlePassMissionUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassMissionUpdateNotify_default_instance_);_BattlePassMissionDelNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassMissionDelNotify_default_instance_);_BattlePassCurScheduleUpdateNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassCurScheduleUpdateNotify_default_instance_);_BattlePassRewardTakeOption_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassRewardTakeOption_default_instance_);_TakeBattlePassRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassRewardReq_default_instance_);_TakeBattlePassRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassRewardRsp_default_instance_);_TakeBattlePassMissionPointReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassMissionPointReq_default_instance_);_TakeBattlePassMissionPointRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeBattlePassMissionPointRsp_default_instance_);_GetBattlePassProductReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetBattlePassProductReq_default_instance_);_GetBattlePassProductRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetBattlePassProductRsp_default_instance_);_SetBattlePassViewedReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetBattlePassViewedReq_default_instance_);_SetBattlePassViewedRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SetBattlePassViewedRsp_default_instance_);_BattlePassBuySuccNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BattlePassBuySuccNotify_default_instance_);_BuyBattlePassLevelReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BuyBattlePassLevelReq_default_instance_);_BuyBattlePassLevelRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_BuyBattlePassLevelRsp_default_instance_);_BattlePassSchedule_default_instance_._instance.get_mutable()->cur_cycle_ = const_cast< ::proto::BattlePassCycle*>(
      ::proto::BattlePassCycle::internal_default_instance());
  _BattlePassSchedule_default_instance_._instance.get_mutable()->product_info_ = const_cast< ::proto::BattlePassProduct*>(
      ::proto::BattlePassProduct::internal_default_instance());
  _BattlePassAllDataNotify_default_instance_._instance.get_mutable()->cur_schedule_ = const_cast< ::proto::BattlePassSchedule*>(
      ::proto::BattlePassSchedule::internal_default_instance());
  _BattlePassCurScheduleUpdateNotify_default_instance_._instance.get_mutable()->cur_schedule_ = const_cast< ::proto::BattlePassSchedule*>(
      ::proto::BattlePassSchedule::internal_default_instance());
  _BattlePassRewardTakeOption_default_instance_._instance.get_mutable()->tag_ = const_cast< ::proto::BattlePassRewardTag*>(
      ::proto::BattlePassRewardTag::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031cmd/cmd_battle_pass.proto\022\005proto\032\014defi"
      "ne.proto\"J\n\017BattlePassCycle\022\021\n\tcycle_idx"
      "\030\003 \001(\r\022\020\n\010end_time\030\n \001(\r\022\022\n\nbegin_time\030\r"
      " \001(\r\"\272\002\n\021BattlePassMission\022\024\n\014cur_progre"
      "ss\030\r \001(\r\022>\n\016mission_status\030\017 \001(\0162&.proto"
      ".BattlePassMission.MissionStatus\022\022\n\nmiss"
      "ion_id\030\013 \001(\r\022 \n\030reward_battle_pass_point"
      "\030\003 \001(\r\022\024\n\014mission_type\030\014 \001(\r\022\026\n\016total_pr"
      "ogress\030\006 \001(\r\"k\n\rMissionStatus\022\023\n\017MISSION"
      "_INVALID\020\000\022\026\n\022MISSION_UNFINISHED\020\001\022\024\n\020MI"
      "SSION_FINISHED\020\002\022\027\n\023MISSION_POINT_TAKEN\020"
      "\003\"m\n\023BattlePassRewardTag\022\r\n\005level\030\004 \001(\r\022"
      "4\n\runlock_status\030\002 \001(\0162\035.proto.BattlePas"
      "sUnlockStatus\022\021\n\treward_id\030\007 \001(\r\"d\n\021Batt"
      "lePassProduct\022\031\n\021normal_product_id\030\r \001(\t"
      "\022\030\n\020extra_product_id\030\n \001(\t\022\032\n\022upgrade_pr"
      "oduct_id\030\006 \001(\t\"\243\003\n\022BattlePassSchedule\022\r\n"
      "\005level\030\016 \001(\r\022\022\n\nbegin_time\030\002 \001(\r\022\020\n\010end_"
      "time\030\017 \001(\r\022\r\n\005point\030\001 \001(\r\022)\n\tcur_cycle\030\004"
      " \001(\0132\026.proto.BattlePassCycle\0224\n\runlock_s"
      "tatus\030\007 \001(\0162\035.proto.BattlePassUnlockStat"
      "us\0225\n\021reward_taken_list\030\013 \003(\0132\032.proto.Ba"
      "ttlePassRewardTag\022\030\n\020cur_cycle_points\030\n "
      "\001(\r\022\033\n\023paid_platform_flags\030\014 \001(\r\022.\n\014prod"
      "uct_info\030\r \001(\0132\030.proto.BattlePassProduct"
      "\022\"\n\032is_extra_paid_reward_taken\030\006 \001(\010\022\021\n\t"
      "is_viewed\030\003 \001(\010\022\023\n\013schedule_id\030\t \001(\r\"\225\001\n"
      "\027BattlePassAllDataNotify\022\031\n\021have_cur_sch"
      "edule\030\002 \001(\010\022.\n\014mission_list\030\004 \003(\0132\030.prot"
      "o.BattlePassMission\022/\n\014cur_schedule\030\001 \001("
      "\0132\031.proto.BattlePassSchedule\"O\n\035BattlePa"
      "ssMissionUpdateNotify\022.\n\014mission_list\030\001 "
      "\003(\0132\030.proto.BattlePassMission\"9\n\032BattleP"
      "assMissionDelNotify\022\033\n\023del_mission_id_li"
      "st\030\n \003(\r\"o\n!BattlePassCurScheduleUpdateN"
      "otify\022\031\n\021have_cur_schedule\030\013 \001(\010\022/\n\014cur_"
      "schedule\030\001 \001(\0132\031.proto.BattlePassSchedul"
      "e\"Y\n\032BattlePassRewardTakeOption\022\'\n\003tag\030\n"
      " \001(\0132\032.proto.BattlePassRewardTag\022\022\n\nopti"
      "on_idx\030\016 \001(\r\"V\n\027TakeBattlePassRewardReq\022"
      ";\n\020take_option_list\030\014 \003(\0132!.proto.Battle"
      "PassRewardTakeOption\"\214\001\n\027TakeBattlePassR"
      "ewardRsp\022#\n\titem_list\030\007 \003(\0132\020.proto.Item"
      "Param\022\017\n\007retcode\030\r \001(\005\022;\n\020take_option_li"
      "st\030\t \003(\0132!.proto.BattlePassRewardTakeOpt"
      "ion\"8\n\035TakeBattlePassMissionPointReq\022\027\n\017"
      "mission_id_list\030\005 \003(\r\"I\n\035TakeBattlePassM"
      "issionPointRsp\022\017\n\007retcode\030\004 \001(\005\022\027\n\017missi"
      "on_id_list\030\013 \003(\r\"@\n\027GetBattlePassProduct"
      "Req\022%\n\035battle_pass_product_play_type\030\n \001"
      "(\r\"\222\001\n\027GetBattlePassProductRsp\022\017\n\007retcod"
      "e\030\016 \001(\005\022\022\n\nprice_tier\030\006 \001(\t\022%\n\035battle_pa"
      "ss_product_play_type\030\002 \001(\r\022\022\n\nproduct_id"
      "\030\001 \001(\t\022\027\n\017cur_schedule_id\030\013 \001(\r\"-\n\026SetBa"
      "ttlePassViewedReq\022\023\n\013schedule_id\030\006 \001(\r\">"
      "\n\026SetBattlePassViewedRsp\022\023\n\013schedule_id\030"
      "\002 \001(\r\022\017\n\007retcode\030\003 \001(\005\"\201\001\n\027BattlePassBuy"
      "SuccNotify\022\023\n\013schedule_id\030\004 \001(\r\022\031\n\021produ"
      "ct_play_type\030\013 \001(\r\022\021\n\tadd_point\030\014 \001(\r\022#\n"
      "\titem_list\030\t \003(\0132\020.proto.ItemParam\"*\n\025Bu"
      "yBattlePassLevelReq\022\021\n\tbuy_level\030\010 \001(\r\";"
      "\n\025BuyBattlePassLevelRsp\022\017\n\007retcode\030\005 \001(\005"
      "\022\021\n\tbuy_level\030\r \001(\r*r\n\026BattlePassUnlockS"
      "tatus\022\036\n\032BATTLE_PASS_UNLOCK_INVALID\020\000\022\033\n"
      "\027BATTLE_PASS_UNLOCK_FREE\020\001\022\033\n\027BATTLE_PAS"
      "S_UNLOCK_PAID\020\002B(Z&github.com/teyvat-hel"
      "per/hk4e-proto/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2665);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_battle_pass.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto

const ::google::protobuf::EnumDescriptor* BattlePassMission_MissionStatus_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[0];
}
bool BattlePassMission_MissionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BattlePassMission_MissionStatus BattlePassMission::MISSION_INVALID;
const BattlePassMission_MissionStatus BattlePassMission::MISSION_UNFINISHED;
const BattlePassMission_MissionStatus BattlePassMission::MISSION_FINISHED;
const BattlePassMission_MissionStatus BattlePassMission::MISSION_POINT_TAKEN;
const BattlePassMission_MissionStatus BattlePassMission::MissionStatus_MIN;
const BattlePassMission_MissionStatus BattlePassMission::MissionStatus_MAX;
const int BattlePassMission::MissionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* BattlePassUnlockStatus_descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_enum_descriptors[1];
}
bool BattlePassUnlockStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassCycle::kCycleIdxFieldNumber;
const int BattlePassCycle::kEndTimeFieldNumber;
const int BattlePassCycle::kBeginTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassCycle::BattlePassCycle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassCycle)
}
BattlePassCycle::BattlePassCycle(const BattlePassCycle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&begin_time_, &from.begin_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&begin_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassCycle)
}

void BattlePassCycle::SharedCtor() {
  ::memset(&begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

BattlePassCycle::~BattlePassCycle() {
  // @@protoc_insertion_point(destructor:proto.BattlePassCycle)
  SharedDtor();
}

void BattlePassCycle::SharedDtor() {
}

void BattlePassCycle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassCycle::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassCycle& BattlePassCycle::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassCycle* BattlePassCycle::New(::google::protobuf::Arena* arena) const {
  BattlePassCycle* n = new BattlePassCycle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassCycle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassCycle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&begin_time_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool BattlePassCycle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassCycle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cycle_idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cycle_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassCycle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassCycle)
  return false;
#undef DO_
}

void BattlePassCycle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassCycle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cycle_idx = 3;
  if (this->cycle_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cycle_idx(), output);
  }

  // uint32 end_time = 10;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->end_time(), output);
  }

  // uint32 begin_time = 13;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->begin_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassCycle)
}

::google::protobuf::uint8* BattlePassCycle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassCycle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cycle_idx = 3;
  if (this->cycle_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cycle_idx(), target);
  }

  // uint32 end_time = 10;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->end_time(), target);
  }

  // uint32 begin_time = 13;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->begin_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassCycle)
  return target;
}

size_t BattlePassCycle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassCycle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 begin_time = 13;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // uint32 cycle_idx = 3;
  if (this->cycle_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cycle_idx());
  }

  // uint32 end_time = 10;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassCycle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassCycle)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassCycle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassCycle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassCycle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassCycle)
    MergeFrom(*source);
  }
}

void BattlePassCycle::MergeFrom(const BattlePassCycle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassCycle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.cycle_idx() != 0) {
    set_cycle_idx(from.cycle_idx());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void BattlePassCycle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassCycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassCycle::CopyFrom(const BattlePassCycle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassCycle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassCycle::IsInitialized() const {
  return true;
}

void BattlePassCycle::Swap(BattlePassCycle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassCycle::InternalSwap(BattlePassCycle* other) {
  using std::swap;
  swap(begin_time_, other->begin_time_);
  swap(cycle_idx_, other->cycle_idx_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassCycle::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassCycle

// uint32 cycle_idx = 3;
void BattlePassCycle::clear_cycle_idx() {
  cycle_idx_ = 0u;
}
::google::protobuf::uint32 BattlePassCycle::cycle_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.cycle_idx)
  return cycle_idx_;
}
void BattlePassCycle::set_cycle_idx(::google::protobuf::uint32 value) {
  
  cycle_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.cycle_idx)
}

// uint32 end_time = 10;
void BattlePassCycle::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 BattlePassCycle::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.end_time)
  return end_time_;
}
void BattlePassCycle::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.end_time)
}

// uint32 begin_time = 13;
void BattlePassCycle::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 BattlePassCycle::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCycle.begin_time)
  return begin_time_;
}
void BattlePassCycle::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCycle.begin_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassMission::kCurProgressFieldNumber;
const int BattlePassMission::kMissionStatusFieldNumber;
const int BattlePassMission::kMissionIdFieldNumber;
const int BattlePassMission::kRewardBattlePassPointFieldNumber;
const int BattlePassMission::kMissionTypeFieldNumber;
const int BattlePassMission::kTotalProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassMission::BattlePassMission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassMission)
}
BattlePassMission::BattlePassMission(const BattlePassMission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&reward_battle_pass_point_, &from.reward_battle_pass_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&mission_status_) -
    reinterpret_cast<char*>(&reward_battle_pass_point_)) + sizeof(mission_status_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassMission)
}

void BattlePassMission::SharedCtor() {
  ::memset(&reward_battle_pass_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_status_) -
      reinterpret_cast<char*>(&reward_battle_pass_point_)) + sizeof(mission_status_));
  _cached_size_ = 0;
}

BattlePassMission::~BattlePassMission() {
  // @@protoc_insertion_point(destructor:proto.BattlePassMission)
  SharedDtor();
}

void BattlePassMission::SharedDtor() {
}

void BattlePassMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassMission::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassMission& BattlePassMission::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassMission* BattlePassMission::New(::google::protobuf::Arena* arena) const {
  BattlePassMission* n = new BattlePassMission;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassMission::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&reward_battle_pass_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mission_status_) -
      reinterpret_cast<char*>(&reward_battle_pass_point_)) + sizeof(mission_status_));
  _internal_metadata_.Clear();
}

bool BattlePassMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 reward_battle_pass_point = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_battle_pass_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 total_progress = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mission_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 mission_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_progress = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_progress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassMission.MissionStatus mission_status = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mission_status(static_cast< ::proto::BattlePassMission_MissionStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassMission)
  return false;
#undef DO_
}

void BattlePassMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reward_battle_pass_point = 3;
  if (this->reward_battle_pass_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reward_battle_pass_point(), output);
  }

  // uint32 total_progress = 6;
  if (this->total_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_progress(), output);
  }

  // uint32 mission_id = 11;
  if (this->mission_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->mission_id(), output);
  }

  // uint32 mission_type = 12;
  if (this->mission_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mission_type(), output);
  }

  // uint32 cur_progress = 13;
  if (this->cur_progress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cur_progress(), output);
  }

  // .proto.BattlePassMission.MissionStatus mission_status = 15;
  if (this->mission_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->mission_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassMission)
}

::google::protobuf::uint8* BattlePassMission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassMission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 reward_battle_pass_point = 3;
  if (this->reward_battle_pass_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reward_battle_pass_point(), target);
  }

  // uint32 total_progress = 6;
  if (this->total_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_progress(), target);
  }

  // uint32 mission_id = 11;
  if (this->mission_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->mission_id(), target);
  }

  // uint32 mission_type = 12;
  if (this->mission_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mission_type(), target);
  }

  // uint32 cur_progress = 13;
  if (this->cur_progress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cur_progress(), target);
  }

  // .proto.BattlePassMission.MissionStatus mission_status = 15;
  if (this->mission_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->mission_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassMission)
  return target;
}

size_t BattlePassMission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassMission)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 reward_battle_pass_point = 3;
  if (this->reward_battle_pass_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_battle_pass_point());
  }

  // uint32 total_progress = 6;
  if (this->total_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_progress());
  }

  // uint32 mission_id = 11;
  if (this->mission_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mission_id());
  }

  // uint32 mission_type = 12;
  if (this->mission_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mission_type());
  }

  // uint32 cur_progress = 13;
  if (this->cur_progress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_progress());
  }

  // .proto.BattlePassMission.MissionStatus mission_status = 15;
  if (this->mission_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mission_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassMission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassMission)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassMission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassMission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassMission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassMission)
    MergeFrom(*source);
  }
}

void BattlePassMission::MergeFrom(const BattlePassMission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassMission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reward_battle_pass_point() != 0) {
    set_reward_battle_pass_point(from.reward_battle_pass_point());
  }
  if (from.total_progress() != 0) {
    set_total_progress(from.total_progress());
  }
  if (from.mission_id() != 0) {
    set_mission_id(from.mission_id());
  }
  if (from.mission_type() != 0) {
    set_mission_type(from.mission_type());
  }
  if (from.cur_progress() != 0) {
    set_cur_progress(from.cur_progress());
  }
  if (from.mission_status() != 0) {
    set_mission_status(from.mission_status());
  }
}

void BattlePassMission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassMission::CopyFrom(const BattlePassMission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassMission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassMission::IsInitialized() const {
  return true;
}

void BattlePassMission::Swap(BattlePassMission* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassMission::InternalSwap(BattlePassMission* other) {
  using std::swap;
  swap(reward_battle_pass_point_, other->reward_battle_pass_point_);
  swap(total_progress_, other->total_progress_);
  swap(mission_id_, other->mission_id_);
  swap(mission_type_, other->mission_type_);
  swap(cur_progress_, other->cur_progress_);
  swap(mission_status_, other->mission_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassMission::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassMission

// uint32 cur_progress = 13;
void BattlePassMission::clear_cur_progress() {
  cur_progress_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::cur_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.cur_progress)
  return cur_progress_;
}
void BattlePassMission::set_cur_progress(::google::protobuf::uint32 value) {
  
  cur_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.cur_progress)
}

// .proto.BattlePassMission.MissionStatus mission_status = 15;
void BattlePassMission::clear_mission_status() {
  mission_status_ = 0;
}
::proto::BattlePassMission_MissionStatus BattlePassMission::mission_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_status)
  return static_cast< ::proto::BattlePassMission_MissionStatus >(mission_status_);
}
void BattlePassMission::set_mission_status(::proto::BattlePassMission_MissionStatus value) {
  
  mission_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_status)
}

// uint32 mission_id = 11;
void BattlePassMission::clear_mission_id() {
  mission_id_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::mission_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_id)
  return mission_id_;
}
void BattlePassMission::set_mission_id(::google::protobuf::uint32 value) {
  
  mission_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_id)
}

// uint32 reward_battle_pass_point = 3;
void BattlePassMission::clear_reward_battle_pass_point() {
  reward_battle_pass_point_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::reward_battle_pass_point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.reward_battle_pass_point)
  return reward_battle_pass_point_;
}
void BattlePassMission::set_reward_battle_pass_point(::google::protobuf::uint32 value) {
  
  reward_battle_pass_point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.reward_battle_pass_point)
}

// uint32 mission_type = 12;
void BattlePassMission::clear_mission_type() {
  mission_type_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::mission_type() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.mission_type)
  return mission_type_;
}
void BattlePassMission::set_mission_type(::google::protobuf::uint32 value) {
  
  mission_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.mission_type)
}

// uint32 total_progress = 6;
void BattlePassMission::clear_total_progress() {
  total_progress_ = 0u;
}
::google::protobuf::uint32 BattlePassMission::total_progress() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMission.total_progress)
  return total_progress_;
}
void BattlePassMission::set_total_progress(::google::protobuf::uint32 value) {
  
  total_progress_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassMission.total_progress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassRewardTag::kLevelFieldNumber;
const int BattlePassRewardTag::kUnlockStatusFieldNumber;
const int BattlePassRewardTag::kRewardIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassRewardTag::BattlePassRewardTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassRewardTag)
}
BattlePassRewardTag::BattlePassRewardTag(const BattlePassRewardTag& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&unlock_status_, &from.unlock_status_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_id_) -
    reinterpret_cast<char*>(&unlock_status_)) + sizeof(reward_id_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassRewardTag)
}

void BattlePassRewardTag::SharedCtor() {
  ::memset(&unlock_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_id_) -
      reinterpret_cast<char*>(&unlock_status_)) + sizeof(reward_id_));
  _cached_size_ = 0;
}

BattlePassRewardTag::~BattlePassRewardTag() {
  // @@protoc_insertion_point(destructor:proto.BattlePassRewardTag)
  SharedDtor();
}

void BattlePassRewardTag::SharedDtor() {
}

void BattlePassRewardTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassRewardTag::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassRewardTag& BattlePassRewardTag::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassRewardTag* BattlePassRewardTag::New(::google::protobuf::Arena* arena) const {
  BattlePassRewardTag* n = new BattlePassRewardTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassRewardTag::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassRewardTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unlock_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_id_) -
      reinterpret_cast<char*>(&unlock_status_)) + sizeof(reward_id_));
  _internal_metadata_.Clear();
}

bool BattlePassRewardTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassRewardTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BattlePassUnlockStatus unlock_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unlock_status(static_cast< ::proto::BattlePassUnlockStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 reward_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassRewardTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassRewardTag)
  return false;
#undef DO_
}

void BattlePassRewardTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassRewardTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassUnlockStatus unlock_status = 2;
  if (this->unlock_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->unlock_status(), output);
  }

  // uint32 level = 4;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // uint32 reward_id = 7;
  if (this->reward_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->reward_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassRewardTag)
}

::google::protobuf::uint8* BattlePassRewardTag::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassRewardTag)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassUnlockStatus unlock_status = 2;
  if (this->unlock_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->unlock_status(), target);
  }

  // uint32 level = 4;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // uint32 reward_id = 7;
  if (this->reward_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->reward_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassRewardTag)
  return target;
}

size_t BattlePassRewardTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassRewardTag)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.BattlePassUnlockStatus unlock_status = 2;
  if (this->unlock_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unlock_status());
  }

  // uint32 level = 4;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 reward_id = 7;
  if (this->reward_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->reward_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassRewardTag::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassRewardTag)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassRewardTag* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassRewardTag>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassRewardTag)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassRewardTag)
    MergeFrom(*source);
  }
}

void BattlePassRewardTag::MergeFrom(const BattlePassRewardTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassRewardTag)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unlock_status() != 0) {
    set_unlock_status(from.unlock_status());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.reward_id() != 0) {
    set_reward_id(from.reward_id());
  }
}

void BattlePassRewardTag::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassRewardTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassRewardTag::CopyFrom(const BattlePassRewardTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassRewardTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassRewardTag::IsInitialized() const {
  return true;
}

void BattlePassRewardTag::Swap(BattlePassRewardTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassRewardTag::InternalSwap(BattlePassRewardTag* other) {
  using std::swap;
  swap(unlock_status_, other->unlock_status_);
  swap(level_, other->level_);
  swap(reward_id_, other->reward_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassRewardTag::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassRewardTag

// uint32 level = 4;
void BattlePassRewardTag::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 BattlePassRewardTag::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.level)
  return level_;
}
void BattlePassRewardTag::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.level)
}

// .proto.BattlePassUnlockStatus unlock_status = 2;
void BattlePassRewardTag::clear_unlock_status() {
  unlock_status_ = 0;
}
::proto::BattlePassUnlockStatus BattlePassRewardTag::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
void BattlePassRewardTag::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.unlock_status)
}

// uint32 reward_id = 7;
void BattlePassRewardTag::clear_reward_id() {
  reward_id_ = 0u;
}
::google::protobuf::uint32 BattlePassRewardTag::reward_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTag.reward_id)
  return reward_id_;
}
void BattlePassRewardTag::set_reward_id(::google::protobuf::uint32 value) {
  
  reward_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTag.reward_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassProduct::kNormalProductIdFieldNumber;
const int BattlePassProduct::kExtraProductIdFieldNumber;
const int BattlePassProduct::kUpgradeProductIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassProduct::BattlePassProduct()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassProduct)
}
BattlePassProduct::BattlePassProduct(const BattlePassProduct& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  upgrade_product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.upgrade_product_id().size() > 0) {
    upgrade_product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upgrade_product_id_);
  }
  extra_product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extra_product_id().size() > 0) {
    extra_product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_product_id_);
  }
  normal_product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.normal_product_id().size() > 0) {
    normal_product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_product_id_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassProduct)
}

void BattlePassProduct::SharedCtor() {
  upgrade_product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

BattlePassProduct::~BattlePassProduct() {
  // @@protoc_insertion_point(destructor:proto.BattlePassProduct)
  SharedDtor();
}

void BattlePassProduct::SharedDtor() {
  upgrade_product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BattlePassProduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassProduct::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassProduct& BattlePassProduct::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassProduct* BattlePassProduct::New(::google::protobuf::Arena* arena) const {
  BattlePassProduct* n = new BattlePassProduct;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  upgrade_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extra_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  normal_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BattlePassProduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassProduct)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string upgrade_product_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_upgrade_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->upgrade_product_id().data(), static_cast<int>(this->upgrade_product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.BattlePassProduct.upgrade_product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string extra_product_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extra_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extra_product_id().data(), static_cast<int>(this->extra_product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.BattlePassProduct.extra_product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string normal_product_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->normal_product_id().data(), static_cast<int>(this->normal_product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.BattlePassProduct.normal_product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassProduct)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassProduct)
  return false;
#undef DO_
}

void BattlePassProduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string upgrade_product_id = 6;
  if (this->upgrade_product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upgrade_product_id().data(), static_cast<int>(this->upgrade_product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BattlePassProduct.upgrade_product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->upgrade_product_id(), output);
  }

  // string extra_product_id = 10;
  if (this->extra_product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_product_id().data(), static_cast<int>(this->extra_product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BattlePassProduct.extra_product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->extra_product_id(), output);
  }

  // string normal_product_id = 13;
  if (this->normal_product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal_product_id().data(), static_cast<int>(this->normal_product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BattlePassProduct.normal_product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->normal_product_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassProduct)
}

::google::protobuf::uint8* BattlePassProduct::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassProduct)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string upgrade_product_id = 6;
  if (this->upgrade_product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->upgrade_product_id().data(), static_cast<int>(this->upgrade_product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BattlePassProduct.upgrade_product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->upgrade_product_id(), target);
  }

  // string extra_product_id = 10;
  if (this->extra_product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extra_product_id().data(), static_cast<int>(this->extra_product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BattlePassProduct.extra_product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->extra_product_id(), target);
  }

  // string normal_product_id = 13;
  if (this->normal_product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->normal_product_id().data(), static_cast<int>(this->normal_product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.BattlePassProduct.normal_product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->normal_product_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassProduct)
  return target;
}

size_t BattlePassProduct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassProduct)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string upgrade_product_id = 6;
  if (this->upgrade_product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->upgrade_product_id());
  }

  // string extra_product_id = 10;
  if (this->extra_product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extra_product_id());
  }

  // string normal_product_id = 13;
  if (this->normal_product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->normal_product_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassProduct::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassProduct)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassProduct* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassProduct>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassProduct)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassProduct)
    MergeFrom(*source);
  }
}

void BattlePassProduct::MergeFrom(const BattlePassProduct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassProduct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.upgrade_product_id().size() > 0) {

    upgrade_product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.upgrade_product_id_);
  }
  if (from.extra_product_id().size() > 0) {

    extra_product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extra_product_id_);
  }
  if (from.normal_product_id().size() > 0) {

    normal_product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.normal_product_id_);
  }
}

void BattlePassProduct::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassProduct::CopyFrom(const BattlePassProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassProduct::IsInitialized() const {
  return true;
}

void BattlePassProduct::Swap(BattlePassProduct* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassProduct::InternalSwap(BattlePassProduct* other) {
  using std::swap;
  upgrade_product_id_.Swap(&other->upgrade_product_id_);
  extra_product_id_.Swap(&other->extra_product_id_);
  normal_product_id_.Swap(&other->normal_product_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassProduct::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassProduct

// string normal_product_id = 13;
void BattlePassProduct::clear_normal_product_id() {
  normal_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BattlePassProduct::normal_product_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassProduct.normal_product_id)
  return normal_product_id_.GetNoArena();
}
void BattlePassProduct::set_normal_product_id(const ::std::string& value) {
  
  normal_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BattlePassProduct.normal_product_id)
}
#if LANG_CXX11
void BattlePassProduct::set_normal_product_id(::std::string&& value) {
  
  normal_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BattlePassProduct.normal_product_id)
}
#endif
void BattlePassProduct::set_normal_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  normal_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BattlePassProduct.normal_product_id)
}
void BattlePassProduct::set_normal_product_id(const char* value, size_t size) {
  
  normal_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BattlePassProduct.normal_product_id)
}
::std::string* BattlePassProduct::mutable_normal_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.BattlePassProduct.normal_product_id)
  return normal_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BattlePassProduct::release_normal_product_id() {
  // @@protoc_insertion_point(field_release:proto.BattlePassProduct.normal_product_id)
  
  return normal_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BattlePassProduct::set_allocated_normal_product_id(::std::string* normal_product_id) {
  if (normal_product_id != NULL) {
    
  } else {
    
  }
  normal_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), normal_product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassProduct.normal_product_id)
}

// string extra_product_id = 10;
void BattlePassProduct::clear_extra_product_id() {
  extra_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BattlePassProduct::extra_product_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassProduct.extra_product_id)
  return extra_product_id_.GetNoArena();
}
void BattlePassProduct::set_extra_product_id(const ::std::string& value) {
  
  extra_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BattlePassProduct.extra_product_id)
}
#if LANG_CXX11
void BattlePassProduct::set_extra_product_id(::std::string&& value) {
  
  extra_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BattlePassProduct.extra_product_id)
}
#endif
void BattlePassProduct::set_extra_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  extra_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BattlePassProduct.extra_product_id)
}
void BattlePassProduct::set_extra_product_id(const char* value, size_t size) {
  
  extra_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BattlePassProduct.extra_product_id)
}
::std::string* BattlePassProduct::mutable_extra_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.BattlePassProduct.extra_product_id)
  return extra_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BattlePassProduct::release_extra_product_id() {
  // @@protoc_insertion_point(field_release:proto.BattlePassProduct.extra_product_id)
  
  return extra_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BattlePassProduct::set_allocated_extra_product_id(::std::string* extra_product_id) {
  if (extra_product_id != NULL) {
    
  } else {
    
  }
  extra_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extra_product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassProduct.extra_product_id)
}

// string upgrade_product_id = 6;
void BattlePassProduct::clear_upgrade_product_id() {
  upgrade_product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& BattlePassProduct::upgrade_product_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassProduct.upgrade_product_id)
  return upgrade_product_id_.GetNoArena();
}
void BattlePassProduct::set_upgrade_product_id(const ::std::string& value) {
  
  upgrade_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.BattlePassProduct.upgrade_product_id)
}
#if LANG_CXX11
void BattlePassProduct::set_upgrade_product_id(::std::string&& value) {
  
  upgrade_product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.BattlePassProduct.upgrade_product_id)
}
#endif
void BattlePassProduct::set_upgrade_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upgrade_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.BattlePassProduct.upgrade_product_id)
}
void BattlePassProduct::set_upgrade_product_id(const char* value, size_t size) {
  
  upgrade_product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.BattlePassProduct.upgrade_product_id)
}
::std::string* BattlePassProduct::mutable_upgrade_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.BattlePassProduct.upgrade_product_id)
  return upgrade_product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BattlePassProduct::release_upgrade_product_id() {
  // @@protoc_insertion_point(field_release:proto.BattlePassProduct.upgrade_product_id)
  
  return upgrade_product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BattlePassProduct::set_allocated_upgrade_product_id(::std::string* upgrade_product_id) {
  if (upgrade_product_id != NULL) {
    
  } else {
    
  }
  upgrade_product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upgrade_product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassProduct.upgrade_product_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassSchedule::kLevelFieldNumber;
const int BattlePassSchedule::kBeginTimeFieldNumber;
const int BattlePassSchedule::kEndTimeFieldNumber;
const int BattlePassSchedule::kPointFieldNumber;
const int BattlePassSchedule::kCurCycleFieldNumber;
const int BattlePassSchedule::kUnlockStatusFieldNumber;
const int BattlePassSchedule::kRewardTakenListFieldNumber;
const int BattlePassSchedule::kCurCyclePointsFieldNumber;
const int BattlePassSchedule::kPaidPlatformFlagsFieldNumber;
const int BattlePassSchedule::kProductInfoFieldNumber;
const int BattlePassSchedule::kIsExtraPaidRewardTakenFieldNumber;
const int BattlePassSchedule::kIsViewedFieldNumber;
const int BattlePassSchedule::kScheduleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassSchedule::BattlePassSchedule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassSchedule)
}
BattlePassSchedule::BattlePassSchedule(const BattlePassSchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reward_taken_list_(from.reward_taken_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_cycle()) {
    cur_cycle_ = new ::proto::BattlePassCycle(*from.cur_cycle_);
  } else {
    cur_cycle_ = NULL;
  }
  if (from.has_product_info()) {
    product_info_ = new ::proto::BattlePassProduct(*from.product_info_);
  } else {
    product_info_ = NULL;
  }
  ::memcpy(&point_, &from.point_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&point_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassSchedule)
}

void BattlePassSchedule::SharedCtor() {
  ::memset(&cur_cycle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&cur_cycle_)) + sizeof(end_time_));
  _cached_size_ = 0;
}

BattlePassSchedule::~BattlePassSchedule() {
  // @@protoc_insertion_point(destructor:proto.BattlePassSchedule)
  SharedDtor();
}

void BattlePassSchedule::SharedDtor() {
  if (this != internal_default_instance()) delete cur_cycle_;
  if (this != internal_default_instance()) delete product_info_;
}

void BattlePassSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassSchedule::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassSchedule& BattlePassSchedule::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassSchedule* BattlePassSchedule::New(::google::protobuf::Arena* arena) const {
  BattlePassSchedule* n = new BattlePassSchedule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reward_taken_list_.Clear();
  if (GetArenaNoVirtual() == NULL && cur_cycle_ != NULL) {
    delete cur_cycle_;
  }
  cur_cycle_ = NULL;
  if (GetArenaNoVirtual() == NULL && product_info_ != NULL) {
    delete product_info_;
  }
  product_info_ = NULL;
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&point_)) + sizeof(end_time_));
  _internal_metadata_.Clear();
}

bool BattlePassSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassSchedule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 begin_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_viewed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_viewed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassCycle cur_cycle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_cycle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_extra_paid_reward_taken = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_extra_paid_reward_taken_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassUnlockStatus unlock_status = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_unlock_status(static_cast< ::proto::BattlePassUnlockStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 schedule_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_cycle_points = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_cycle_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BattlePassRewardTag reward_taken_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_taken_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 paid_platform_flags = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paid_platform_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.BattlePassProduct product_info = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_product_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 level = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 end_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassSchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassSchedule)
  return false;
#undef DO_
}

void BattlePassSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point = 1;
  if (this->point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begin_time(), output);
  }

  // bool is_viewed = 3;
  if (this->is_viewed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_viewed(), output);
  }

  // .proto.BattlePassCycle cur_cycle = 4;
  if (this->has_cur_cycle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->cur_cycle_, output);
  }

  // bool is_extra_paid_reward_taken = 6;
  if (this->is_extra_paid_reward_taken() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_extra_paid_reward_taken(), output);
  }

  // .proto.BattlePassUnlockStatus unlock_status = 7;
  if (this->unlock_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->unlock_status(), output);
  }

  // uint32 schedule_id = 9;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->schedule_id(), output);
  }

  // uint32 cur_cycle_points = 10;
  if (this->cur_cycle_points() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cur_cycle_points(), output);
  }

  // repeated .proto.BattlePassRewardTag reward_taken_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_taken_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->reward_taken_list(static_cast<int>(i)), output);
  }

  // uint32 paid_platform_flags = 12;
  if (this->paid_platform_flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->paid_platform_flags(), output);
  }

  // .proto.BattlePassProduct product_info = 13;
  if (this->has_product_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->product_info_, output);
  }

  // uint32 level = 14;
  if (this->level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->level(), output);
  }

  // uint32 end_time = 15;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->end_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassSchedule)
}

::google::protobuf::uint8* BattlePassSchedule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassSchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 point = 1;
  if (this->point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begin_time(), target);
  }

  // bool is_viewed = 3;
  if (this->is_viewed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_viewed(), target);
  }

  // .proto.BattlePassCycle cur_cycle = 4;
  if (this->has_cur_cycle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->cur_cycle_, deterministic, target);
  }

  // bool is_extra_paid_reward_taken = 6;
  if (this->is_extra_paid_reward_taken() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_extra_paid_reward_taken(), target);
  }

  // .proto.BattlePassUnlockStatus unlock_status = 7;
  if (this->unlock_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->unlock_status(), target);
  }

  // uint32 schedule_id = 9;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->schedule_id(), target);
  }

  // uint32 cur_cycle_points = 10;
  if (this->cur_cycle_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cur_cycle_points(), target);
  }

  // repeated .proto.BattlePassRewardTag reward_taken_list = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reward_taken_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->reward_taken_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 paid_platform_flags = 12;
  if (this->paid_platform_flags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->paid_platform_flags(), target);
  }

  // .proto.BattlePassProduct product_info = 13;
  if (this->has_product_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->product_info_, deterministic, target);
  }

  // uint32 level = 14;
  if (this->level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->level(), target);
  }

  // uint32 end_time = 15;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->end_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassSchedule)
  return target;
}

size_t BattlePassSchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassSchedule)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassRewardTag reward_taken_list = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->reward_taken_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward_taken_list(static_cast<int>(i)));
    }
  }

  // .proto.BattlePassCycle cur_cycle = 4;
  if (this->has_cur_cycle()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_cycle_);
  }

  // .proto.BattlePassProduct product_info = 13;
  if (this->has_product_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->product_info_);
  }

  // uint32 point = 1;
  if (this->point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->point());
  }

  // uint32 begin_time = 2;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->begin_time());
  }

  // bool is_extra_paid_reward_taken = 6;
  if (this->is_extra_paid_reward_taken() != 0) {
    total_size += 1 + 1;
  }

  // bool is_viewed = 3;
  if (this->is_viewed() != 0) {
    total_size += 1 + 1;
  }

  // .proto.BattlePassUnlockStatus unlock_status = 7;
  if (this->unlock_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->unlock_status());
  }

  // uint32 schedule_id = 9;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 cur_cycle_points = 10;
  if (this->cur_cycle_points() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_cycle_points());
  }

  // uint32 paid_platform_flags = 12;
  if (this->paid_platform_flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->paid_platform_flags());
  }

  // uint32 level = 14;
  if (this->level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->level());
  }

  // uint32 end_time = 15;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassSchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassSchedule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassSchedule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassSchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassSchedule)
    MergeFrom(*source);
  }
}

void BattlePassSchedule::MergeFrom(const BattlePassSchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassSchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reward_taken_list_.MergeFrom(from.reward_taken_list_);
  if (from.has_cur_cycle()) {
    mutable_cur_cycle()->::proto::BattlePassCycle::MergeFrom(from.cur_cycle());
  }
  if (from.has_product_info()) {
    mutable_product_info()->::proto::BattlePassProduct::MergeFrom(from.product_info());
  }
  if (from.point() != 0) {
    set_point(from.point());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.is_extra_paid_reward_taken() != 0) {
    set_is_extra_paid_reward_taken(from.is_extra_paid_reward_taken());
  }
  if (from.is_viewed() != 0) {
    set_is_viewed(from.is_viewed());
  }
  if (from.unlock_status() != 0) {
    set_unlock_status(from.unlock_status());
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.cur_cycle_points() != 0) {
    set_cur_cycle_points(from.cur_cycle_points());
  }
  if (from.paid_platform_flags() != 0) {
    set_paid_platform_flags(from.paid_platform_flags());
  }
  if (from.level() != 0) {
    set_level(from.level());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
}

void BattlePassSchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassSchedule::CopyFrom(const BattlePassSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassSchedule::IsInitialized() const {
  return true;
}

void BattlePassSchedule::Swap(BattlePassSchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassSchedule::InternalSwap(BattlePassSchedule* other) {
  using std::swap;
  reward_taken_list_.InternalSwap(&other->reward_taken_list_);
  swap(cur_cycle_, other->cur_cycle_);
  swap(product_info_, other->product_info_);
  swap(point_, other->point_);
  swap(begin_time_, other->begin_time_);
  swap(is_extra_paid_reward_taken_, other->is_extra_paid_reward_taken_);
  swap(is_viewed_, other->is_viewed_);
  swap(unlock_status_, other->unlock_status_);
  swap(schedule_id_, other->schedule_id_);
  swap(cur_cycle_points_, other->cur_cycle_points_);
  swap(paid_platform_flags_, other->paid_platform_flags_);
  swap(level_, other->level_);
  swap(end_time_, other->end_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassSchedule::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassSchedule

// uint32 level = 14;
void BattlePassSchedule::clear_level() {
  level_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::level() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.level)
  return level_;
}
void BattlePassSchedule::set_level(::google::protobuf::uint32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.level)
}

// uint32 begin_time = 2;
void BattlePassSchedule::clear_begin_time() {
  begin_time_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::begin_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.begin_time)
  return begin_time_;
}
void BattlePassSchedule::set_begin_time(::google::protobuf::uint32 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.begin_time)
}

// uint32 end_time = 15;
void BattlePassSchedule::clear_end_time() {
  end_time_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::end_time() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.end_time)
  return end_time_;
}
void BattlePassSchedule::set_end_time(::google::protobuf::uint32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.end_time)
}

// uint32 point = 1;
void BattlePassSchedule::clear_point() {
  point_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.point)
  return point_;
}
void BattlePassSchedule::set_point(::google::protobuf::uint32 value) {
  
  point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.point)
}

// .proto.BattlePassCycle cur_cycle = 4;
bool BattlePassSchedule::has_cur_cycle() const {
  return this != internal_default_instance() && cur_cycle_ != NULL;
}
void BattlePassSchedule::clear_cur_cycle() {
  if (GetArenaNoVirtual() == NULL && cur_cycle_ != NULL) delete cur_cycle_;
  cur_cycle_ = NULL;
}
const ::proto::BattlePassCycle& BattlePassSchedule::cur_cycle() const {
  const ::proto::BattlePassCycle* p = cur_cycle_;
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.cur_cycle)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassCycle*>(
      &::proto::_BattlePassCycle_default_instance_);
}
::proto::BattlePassCycle* BattlePassSchedule::mutable_cur_cycle() {
  
  if (cur_cycle_ == NULL) {
    cur_cycle_ = new ::proto::BattlePassCycle;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.cur_cycle)
  return cur_cycle_;
}
::proto::BattlePassCycle* BattlePassSchedule::release_cur_cycle() {
  // @@protoc_insertion_point(field_release:proto.BattlePassSchedule.cur_cycle)
  
  ::proto::BattlePassCycle* temp = cur_cycle_;
  cur_cycle_ = NULL;
  return temp;
}
void BattlePassSchedule::set_allocated_cur_cycle(::proto::BattlePassCycle* cur_cycle) {
  delete cur_cycle_;
  cur_cycle_ = cur_cycle;
  if (cur_cycle) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassSchedule.cur_cycle)
}

// .proto.BattlePassUnlockStatus unlock_status = 7;
void BattlePassSchedule::clear_unlock_status() {
  unlock_status_ = 0;
}
::proto::BattlePassUnlockStatus BattlePassSchedule::unlock_status() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.unlock_status)
  return static_cast< ::proto::BattlePassUnlockStatus >(unlock_status_);
}
void BattlePassSchedule::set_unlock_status(::proto::BattlePassUnlockStatus value) {
  
  unlock_status_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.unlock_status)
}

// repeated .proto.BattlePassRewardTag reward_taken_list = 11;
int BattlePassSchedule::reward_taken_list_size() const {
  return reward_taken_list_.size();
}
void BattlePassSchedule::clear_reward_taken_list() {
  reward_taken_list_.Clear();
}
const ::proto::BattlePassRewardTag& BattlePassSchedule::reward_taken_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Get(index);
}
::proto::BattlePassRewardTag* BattlePassSchedule::mutable_reward_taken_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Mutable(index);
}
::proto::BattlePassRewardTag* BattlePassSchedule::add_reward_taken_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >*
BattlePassSchedule::mutable_reward_taken_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassSchedule.reward_taken_list)
  return &reward_taken_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTag >&
BattlePassSchedule::reward_taken_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassSchedule.reward_taken_list)
  return reward_taken_list_;
}

// uint32 cur_cycle_points = 10;
void BattlePassSchedule::clear_cur_cycle_points() {
  cur_cycle_points_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::cur_cycle_points() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.cur_cycle_points)
  return cur_cycle_points_;
}
void BattlePassSchedule::set_cur_cycle_points(::google::protobuf::uint32 value) {
  
  cur_cycle_points_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.cur_cycle_points)
}

// uint32 paid_platform_flags = 12;
void BattlePassSchedule::clear_paid_platform_flags() {
  paid_platform_flags_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::paid_platform_flags() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.paid_platform_flags)
  return paid_platform_flags_;
}
void BattlePassSchedule::set_paid_platform_flags(::google::protobuf::uint32 value) {
  
  paid_platform_flags_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.paid_platform_flags)
}

// .proto.BattlePassProduct product_info = 13;
bool BattlePassSchedule::has_product_info() const {
  return this != internal_default_instance() && product_info_ != NULL;
}
void BattlePassSchedule::clear_product_info() {
  if (GetArenaNoVirtual() == NULL && product_info_ != NULL) delete product_info_;
  product_info_ = NULL;
}
const ::proto::BattlePassProduct& BattlePassSchedule::product_info() const {
  const ::proto::BattlePassProduct* p = product_info_;
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.product_info)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassProduct*>(
      &::proto::_BattlePassProduct_default_instance_);
}
::proto::BattlePassProduct* BattlePassSchedule::mutable_product_info() {
  
  if (product_info_ == NULL) {
    product_info_ = new ::proto::BattlePassProduct;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassSchedule.product_info)
  return product_info_;
}
::proto::BattlePassProduct* BattlePassSchedule::release_product_info() {
  // @@protoc_insertion_point(field_release:proto.BattlePassSchedule.product_info)
  
  ::proto::BattlePassProduct* temp = product_info_;
  product_info_ = NULL;
  return temp;
}
void BattlePassSchedule::set_allocated_product_info(::proto::BattlePassProduct* product_info) {
  delete product_info_;
  product_info_ = product_info;
  if (product_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassSchedule.product_info)
}

// bool is_extra_paid_reward_taken = 6;
void BattlePassSchedule::clear_is_extra_paid_reward_taken() {
  is_extra_paid_reward_taken_ = false;
}
bool BattlePassSchedule::is_extra_paid_reward_taken() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.is_extra_paid_reward_taken)
  return is_extra_paid_reward_taken_;
}
void BattlePassSchedule::set_is_extra_paid_reward_taken(bool value) {
  
  is_extra_paid_reward_taken_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.is_extra_paid_reward_taken)
}

// bool is_viewed = 3;
void BattlePassSchedule::clear_is_viewed() {
  is_viewed_ = false;
}
bool BattlePassSchedule::is_viewed() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.is_viewed)
  return is_viewed_;
}
void BattlePassSchedule::set_is_viewed(bool value) {
  
  is_viewed_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.is_viewed)
}

// uint32 schedule_id = 9;
void BattlePassSchedule::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 BattlePassSchedule::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassSchedule.schedule_id)
  return schedule_id_;
}
void BattlePassSchedule::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassSchedule.schedule_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassAllDataNotify::kHaveCurScheduleFieldNumber;
const int BattlePassAllDataNotify::kMissionListFieldNumber;
const int BattlePassAllDataNotify::kCurScheduleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassAllDataNotify::BattlePassAllDataNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassAllDataNotify)
}
BattlePassAllDataNotify::BattlePassAllDataNotify(const BattlePassAllDataNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_list_(from.mission_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_schedule()) {
    cur_schedule_ = new ::proto::BattlePassSchedule(*from.cur_schedule_);
  } else {
    cur_schedule_ = NULL;
  }
  have_cur_schedule_ = from.have_cur_schedule_;
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassAllDataNotify)
}

void BattlePassAllDataNotify::SharedCtor() {
  ::memset(&cur_schedule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&have_cur_schedule_) -
      reinterpret_cast<char*>(&cur_schedule_)) + sizeof(have_cur_schedule_));
  _cached_size_ = 0;
}

BattlePassAllDataNotify::~BattlePassAllDataNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassAllDataNotify)
  SharedDtor();
}

void BattlePassAllDataNotify::SharedDtor() {
  if (this != internal_default_instance()) delete cur_schedule_;
}

void BattlePassAllDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassAllDataNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassAllDataNotify& BattlePassAllDataNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassAllDataNotify* BattlePassAllDataNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassAllDataNotify* n = new BattlePassAllDataNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassAllDataNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassAllDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_list_.Clear();
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) {
    delete cur_schedule_;
  }
  cur_schedule_ = NULL;
  have_cur_schedule_ = false;
  _internal_metadata_.Clear();
}

bool BattlePassAllDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassAllDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BattlePassSchedule cur_schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool have_cur_schedule = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_cur_schedule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BattlePassMission mission_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassAllDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassAllDataNotify)
  return false;
#undef DO_
}

void BattlePassAllDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassAllDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassSchedule cur_schedule = 1;
  if (this->has_cur_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cur_schedule_, output);
  }

  // bool have_cur_schedule = 2;
  if (this->have_cur_schedule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->have_cur_schedule(), output);
  }

  // repeated .proto.BattlePassMission mission_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mission_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassAllDataNotify)
}

::google::protobuf::uint8* BattlePassAllDataNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassAllDataNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassSchedule cur_schedule = 1;
  if (this->has_cur_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cur_schedule_, deterministic, target);
  }

  // bool have_cur_schedule = 2;
  if (this->have_cur_schedule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->have_cur_schedule(), target);
  }

  // repeated .proto.BattlePassMission mission_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->mission_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassAllDataNotify)
  return target;
}

size_t BattlePassAllDataNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassAllDataNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassMission mission_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_list(static_cast<int>(i)));
    }
  }

  // .proto.BattlePassSchedule cur_schedule = 1;
  if (this->has_cur_schedule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_schedule_);
  }

  // bool have_cur_schedule = 2;
  if (this->have_cur_schedule() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassAllDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassAllDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassAllDataNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassAllDataNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassAllDataNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassAllDataNotify)
    MergeFrom(*source);
  }
}

void BattlePassAllDataNotify::MergeFrom(const BattlePassAllDataNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassAllDataNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_list_.MergeFrom(from.mission_list_);
  if (from.has_cur_schedule()) {
    mutable_cur_schedule()->::proto::BattlePassSchedule::MergeFrom(from.cur_schedule());
  }
  if (from.have_cur_schedule() != 0) {
    set_have_cur_schedule(from.have_cur_schedule());
  }
}

void BattlePassAllDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassAllDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassAllDataNotify::CopyFrom(const BattlePassAllDataNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassAllDataNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassAllDataNotify::IsInitialized() const {
  return true;
}

void BattlePassAllDataNotify::Swap(BattlePassAllDataNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassAllDataNotify::InternalSwap(BattlePassAllDataNotify* other) {
  using std::swap;
  mission_list_.InternalSwap(&other->mission_list_);
  swap(cur_schedule_, other->cur_schedule_);
  swap(have_cur_schedule_, other->have_cur_schedule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassAllDataNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassAllDataNotify

// bool have_cur_schedule = 2;
void BattlePassAllDataNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
bool BattlePassAllDataNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.have_cur_schedule)
  return have_cur_schedule_;
}
void BattlePassAllDataNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassAllDataNotify.have_cur_schedule)
}

// repeated .proto.BattlePassMission mission_list = 4;
int BattlePassAllDataNotify::mission_list_size() const {
  return mission_list_.size();
}
void BattlePassAllDataNotify::clear_mission_list() {
  mission_list_.Clear();
}
const ::proto::BattlePassMission& BattlePassAllDataNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Get(index);
}
::proto::BattlePassMission* BattlePassAllDataNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Mutable(index);
}
::proto::BattlePassMission* BattlePassAllDataNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassAllDataNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassAllDataNotify.mission_list)
  return &mission_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassAllDataNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassAllDataNotify.mission_list)
  return mission_list_;
}

// .proto.BattlePassSchedule cur_schedule = 1;
bool BattlePassAllDataNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
void BattlePassAllDataNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
const ::proto::BattlePassSchedule& BattlePassAllDataNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassAllDataNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
::proto::BattlePassSchedule* BattlePassAllDataNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassAllDataNotify.cur_schedule)
  return cur_schedule_;
}
::proto::BattlePassSchedule* BattlePassAllDataNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassAllDataNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
void BattlePassAllDataNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassAllDataNotify.cur_schedule)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassMissionUpdateNotify::kMissionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassMissionUpdateNotify::BattlePassMissionUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassMissionUpdateNotify)
}
BattlePassMissionUpdateNotify::BattlePassMissionUpdateNotify(const BattlePassMissionUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_list_(from.mission_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassMissionUpdateNotify)
}

void BattlePassMissionUpdateNotify::SharedCtor() {
  _cached_size_ = 0;
}

BattlePassMissionUpdateNotify::~BattlePassMissionUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassMissionUpdateNotify)
  SharedDtor();
}

void BattlePassMissionUpdateNotify::SharedDtor() {
}

void BattlePassMissionUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassMissionUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassMissionUpdateNotify& BattlePassMissionUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassMissionUpdateNotify* BattlePassMissionUpdateNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassMissionUpdateNotify* n = new BattlePassMissionUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassMissionUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassMissionUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_list_.Clear();
  _internal_metadata_.Clear();
}

bool BattlePassMissionUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassMissionUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.BattlePassMission mission_list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassMissionUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassMissionUpdateNotify)
  return false;
#undef DO_
}

void BattlePassMissionUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassMissionUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassMission mission_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mission_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassMissionUpdateNotify)
}

::google::protobuf::uint8* BattlePassMissionUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassMissionUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassMission mission_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mission_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->mission_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassMissionUpdateNotify)
  return target;
}

size_t BattlePassMissionUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassMissionUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassMission mission_list = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->mission_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mission_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassMissionUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassMissionUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassMissionUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassMissionUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassMissionUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassMissionUpdateNotify)
    MergeFrom(*source);
  }
}

void BattlePassMissionUpdateNotify::MergeFrom(const BattlePassMissionUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassMissionUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_list_.MergeFrom(from.mission_list_);
}

void BattlePassMissionUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassMissionUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassMissionUpdateNotify::CopyFrom(const BattlePassMissionUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassMissionUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassMissionUpdateNotify::IsInitialized() const {
  return true;
}

void BattlePassMissionUpdateNotify::Swap(BattlePassMissionUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassMissionUpdateNotify::InternalSwap(BattlePassMissionUpdateNotify* other) {
  using std::swap;
  mission_list_.InternalSwap(&other->mission_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassMissionUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassMissionUpdateNotify

// repeated .proto.BattlePassMission mission_list = 1;
int BattlePassMissionUpdateNotify::mission_list_size() const {
  return mission_list_.size();
}
void BattlePassMissionUpdateNotify::clear_mission_list() {
  mission_list_.Clear();
}
const ::proto::BattlePassMission& BattlePassMissionUpdateNotify::mission_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Get(index);
}
::proto::BattlePassMission* BattlePassMissionUpdateNotify::mutable_mission_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Mutable(index);
}
::proto::BattlePassMission* BattlePassMissionUpdateNotify::add_mission_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >*
BattlePassMissionUpdateNotify::mutable_mission_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return &mission_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassMission >&
BattlePassMissionUpdateNotify::mission_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionUpdateNotify.mission_list)
  return mission_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassMissionDelNotify::kDelMissionIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassMissionDelNotify::BattlePassMissionDelNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassMissionDelNotify)
}
BattlePassMissionDelNotify::BattlePassMissionDelNotify(const BattlePassMissionDelNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      del_mission_id_list_(from.del_mission_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassMissionDelNotify)
}

void BattlePassMissionDelNotify::SharedCtor() {
  _cached_size_ = 0;
}

BattlePassMissionDelNotify::~BattlePassMissionDelNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassMissionDelNotify)
  SharedDtor();
}

void BattlePassMissionDelNotify::SharedDtor() {
}

void BattlePassMissionDelNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassMissionDelNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassMissionDelNotify& BattlePassMissionDelNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassMissionDelNotify* BattlePassMissionDelNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassMissionDelNotify* n = new BattlePassMissionDelNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassMissionDelNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassMissionDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  del_mission_id_list_.Clear();
  _internal_metadata_.Clear();
}

bool BattlePassMissionDelNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassMissionDelNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 del_mission_id_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_del_mission_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_del_mission_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassMissionDelNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassMissionDelNotify)
  return false;
#undef DO_
}

void BattlePassMissionDelNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassMissionDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 del_mission_id_list = 10;
  if (this->del_mission_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _del_mission_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->del_mission_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->del_mission_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassMissionDelNotify)
}

::google::protobuf::uint8* BattlePassMissionDelNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassMissionDelNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 del_mission_id_list = 10;
  if (this->del_mission_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _del_mission_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->del_mission_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassMissionDelNotify)
  return target;
}

size_t BattlePassMissionDelNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassMissionDelNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 del_mission_id_list = 10;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->del_mission_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _del_mission_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassMissionDelNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassMissionDelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassMissionDelNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassMissionDelNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassMissionDelNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassMissionDelNotify)
    MergeFrom(*source);
  }
}

void BattlePassMissionDelNotify::MergeFrom(const BattlePassMissionDelNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassMissionDelNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  del_mission_id_list_.MergeFrom(from.del_mission_id_list_);
}

void BattlePassMissionDelNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassMissionDelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassMissionDelNotify::CopyFrom(const BattlePassMissionDelNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassMissionDelNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassMissionDelNotify::IsInitialized() const {
  return true;
}

void BattlePassMissionDelNotify::Swap(BattlePassMissionDelNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassMissionDelNotify::InternalSwap(BattlePassMissionDelNotify* other) {
  using std::swap;
  del_mission_id_list_.InternalSwap(&other->del_mission_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassMissionDelNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassMissionDelNotify

// repeated uint32 del_mission_id_list = 10;
int BattlePassMissionDelNotify::del_mission_id_list_size() const {
  return del_mission_id_list_.size();
}
void BattlePassMissionDelNotify::clear_del_mission_id_list() {
  del_mission_id_list_.Clear();
}
::google::protobuf::uint32 BattlePassMissionDelNotify::del_mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_.Get(index);
}
void BattlePassMissionDelNotify::set_del_mission_id_list(int index, ::google::protobuf::uint32 value) {
  del_mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
void BattlePassMissionDelNotify::add_del_mission_id_list(::google::protobuf::uint32 value) {
  del_mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.BattlePassMissionDelNotify.del_mission_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BattlePassMissionDelNotify::del_mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return del_mission_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BattlePassMissionDelNotify::mutable_del_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassMissionDelNotify.del_mission_id_list)
  return &del_mission_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassCurScheduleUpdateNotify::kHaveCurScheduleFieldNumber;
const int BattlePassCurScheduleUpdateNotify::kCurScheduleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassCurScheduleUpdateNotify::BattlePassCurScheduleUpdateNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassCurScheduleUpdateNotify)
}
BattlePassCurScheduleUpdateNotify::BattlePassCurScheduleUpdateNotify(const BattlePassCurScheduleUpdateNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cur_schedule()) {
    cur_schedule_ = new ::proto::BattlePassSchedule(*from.cur_schedule_);
  } else {
    cur_schedule_ = NULL;
  }
  have_cur_schedule_ = from.have_cur_schedule_;
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassCurScheduleUpdateNotify)
}

void BattlePassCurScheduleUpdateNotify::SharedCtor() {
  ::memset(&cur_schedule_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&have_cur_schedule_) -
      reinterpret_cast<char*>(&cur_schedule_)) + sizeof(have_cur_schedule_));
  _cached_size_ = 0;
}

BattlePassCurScheduleUpdateNotify::~BattlePassCurScheduleUpdateNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassCurScheduleUpdateNotify)
  SharedDtor();
}

void BattlePassCurScheduleUpdateNotify::SharedDtor() {
  if (this != internal_default_instance()) delete cur_schedule_;
}

void BattlePassCurScheduleUpdateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassCurScheduleUpdateNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassCurScheduleUpdateNotify& BattlePassCurScheduleUpdateNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassCurScheduleUpdateNotify* BattlePassCurScheduleUpdateNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassCurScheduleUpdateNotify* n = new BattlePassCurScheduleUpdateNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassCurScheduleUpdateNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassCurScheduleUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) {
    delete cur_schedule_;
  }
  cur_schedule_ = NULL;
  have_cur_schedule_ = false;
  _internal_metadata_.Clear();
}

bool BattlePassCurScheduleUpdateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassCurScheduleUpdateNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BattlePassSchedule cur_schedule = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cur_schedule()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool have_cur_schedule = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_cur_schedule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassCurScheduleUpdateNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassCurScheduleUpdateNotify)
  return false;
#undef DO_
}

void BattlePassCurScheduleUpdateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassCurScheduleUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassSchedule cur_schedule = 1;
  if (this->has_cur_schedule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cur_schedule_, output);
  }

  // bool have_cur_schedule = 11;
  if (this->have_cur_schedule() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->have_cur_schedule(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassCurScheduleUpdateNotify)
}

::google::protobuf::uint8* BattlePassCurScheduleUpdateNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassCurScheduleUpdateNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassSchedule cur_schedule = 1;
  if (this->has_cur_schedule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cur_schedule_, deterministic, target);
  }

  // bool have_cur_schedule = 11;
  if (this->have_cur_schedule() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->have_cur_schedule(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassCurScheduleUpdateNotify)
  return target;
}

size_t BattlePassCurScheduleUpdateNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassCurScheduleUpdateNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.BattlePassSchedule cur_schedule = 1;
  if (this->has_cur_schedule()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cur_schedule_);
  }

  // bool have_cur_schedule = 11;
  if (this->have_cur_schedule() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassCurScheduleUpdateNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassCurScheduleUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassCurScheduleUpdateNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassCurScheduleUpdateNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassCurScheduleUpdateNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassCurScheduleUpdateNotify)
    MergeFrom(*source);
  }
}

void BattlePassCurScheduleUpdateNotify::MergeFrom(const BattlePassCurScheduleUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassCurScheduleUpdateNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cur_schedule()) {
    mutable_cur_schedule()->::proto::BattlePassSchedule::MergeFrom(from.cur_schedule());
  }
  if (from.have_cur_schedule() != 0) {
    set_have_cur_schedule(from.have_cur_schedule());
  }
}

void BattlePassCurScheduleUpdateNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassCurScheduleUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassCurScheduleUpdateNotify::CopyFrom(const BattlePassCurScheduleUpdateNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassCurScheduleUpdateNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassCurScheduleUpdateNotify::IsInitialized() const {
  return true;
}

void BattlePassCurScheduleUpdateNotify::Swap(BattlePassCurScheduleUpdateNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassCurScheduleUpdateNotify::InternalSwap(BattlePassCurScheduleUpdateNotify* other) {
  using std::swap;
  swap(cur_schedule_, other->cur_schedule_);
  swap(have_cur_schedule_, other->have_cur_schedule_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassCurScheduleUpdateNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassCurScheduleUpdateNotify

// bool have_cur_schedule = 11;
void BattlePassCurScheduleUpdateNotify::clear_have_cur_schedule() {
  have_cur_schedule_ = false;
}
bool BattlePassCurScheduleUpdateNotify::have_cur_schedule() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
  return have_cur_schedule_;
}
void BattlePassCurScheduleUpdateNotify::set_have_cur_schedule(bool value) {
  
  have_cur_schedule_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassCurScheduleUpdateNotify.have_cur_schedule)
}

// .proto.BattlePassSchedule cur_schedule = 1;
bool BattlePassCurScheduleUpdateNotify::has_cur_schedule() const {
  return this != internal_default_instance() && cur_schedule_ != NULL;
}
void BattlePassCurScheduleUpdateNotify::clear_cur_schedule() {
  if (GetArenaNoVirtual() == NULL && cur_schedule_ != NULL) delete cur_schedule_;
  cur_schedule_ = NULL;
}
const ::proto::BattlePassSchedule& BattlePassCurScheduleUpdateNotify::cur_schedule() const {
  const ::proto::BattlePassSchedule* p = cur_schedule_;
  // @@protoc_insertion_point(field_get:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassSchedule*>(
      &::proto::_BattlePassSchedule_default_instance_);
}
::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::mutable_cur_schedule() {
  
  if (cur_schedule_ == NULL) {
    cur_schedule_ = new ::proto::BattlePassSchedule;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  return cur_schedule_;
}
::proto::BattlePassSchedule* BattlePassCurScheduleUpdateNotify::release_cur_schedule() {
  // @@protoc_insertion_point(field_release:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
  
  ::proto::BattlePassSchedule* temp = cur_schedule_;
  cur_schedule_ = NULL;
  return temp;
}
void BattlePassCurScheduleUpdateNotify::set_allocated_cur_schedule(::proto::BattlePassSchedule* cur_schedule) {
  delete cur_schedule_;
  cur_schedule_ = cur_schedule;
  if (cur_schedule) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassCurScheduleUpdateNotify.cur_schedule)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassRewardTakeOption::kTagFieldNumber;
const int BattlePassRewardTakeOption::kOptionIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassRewardTakeOption::BattlePassRewardTakeOption()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassRewardTakeOption)
}
BattlePassRewardTakeOption::BattlePassRewardTakeOption(const BattlePassRewardTakeOption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tag()) {
    tag_ = new ::proto::BattlePassRewardTag(*from.tag_);
  } else {
    tag_ = NULL;
  }
  option_idx_ = from.option_idx_;
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassRewardTakeOption)
}

void BattlePassRewardTakeOption::SharedCtor() {
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&option_idx_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(option_idx_));
  _cached_size_ = 0;
}

BattlePassRewardTakeOption::~BattlePassRewardTakeOption() {
  // @@protoc_insertion_point(destructor:proto.BattlePassRewardTakeOption)
  SharedDtor();
}

void BattlePassRewardTakeOption::SharedDtor() {
  if (this != internal_default_instance()) delete tag_;
}

void BattlePassRewardTakeOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassRewardTakeOption::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassRewardTakeOption& BattlePassRewardTakeOption::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassRewardTakeOption* BattlePassRewardTakeOption::New(::google::protobuf::Arena* arena) const {
  BattlePassRewardTakeOption* n = new BattlePassRewardTakeOption;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassRewardTakeOption::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassRewardTakeOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && tag_ != NULL) {
    delete tag_;
  }
  tag_ = NULL;
  option_idx_ = 0u;
  _internal_metadata_.Clear();
}

bool BattlePassRewardTakeOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassRewardTakeOption)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.BattlePassRewardTag tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 option_idx = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &option_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassRewardTakeOption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassRewardTakeOption)
  return false;
#undef DO_
}

void BattlePassRewardTakeOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassRewardTakeOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassRewardTag tag = 10;
  if (this->has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->tag_, output);
  }

  // uint32 option_idx = 14;
  if (this->option_idx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->option_idx(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassRewardTakeOption)
}

::google::protobuf::uint8* BattlePassRewardTakeOption::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassRewardTakeOption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.BattlePassRewardTag tag = 10;
  if (this->has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->tag_, deterministic, target);
  }

  // uint32 option_idx = 14;
  if (this->option_idx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->option_idx(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassRewardTakeOption)
  return target;
}

size_t BattlePassRewardTakeOption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassRewardTakeOption)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.BattlePassRewardTag tag = 10;
  if (this->has_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->tag_);
  }

  // uint32 option_idx = 14;
  if (this->option_idx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->option_idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassRewardTakeOption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassRewardTakeOption)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassRewardTakeOption* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassRewardTakeOption>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassRewardTakeOption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassRewardTakeOption)
    MergeFrom(*source);
  }
}

void BattlePassRewardTakeOption::MergeFrom(const BattlePassRewardTakeOption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassRewardTakeOption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    mutable_tag()->::proto::BattlePassRewardTag::MergeFrom(from.tag());
  }
  if (from.option_idx() != 0) {
    set_option_idx(from.option_idx());
  }
}

void BattlePassRewardTakeOption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassRewardTakeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassRewardTakeOption::CopyFrom(const BattlePassRewardTakeOption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassRewardTakeOption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassRewardTakeOption::IsInitialized() const {
  return true;
}

void BattlePassRewardTakeOption::Swap(BattlePassRewardTakeOption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassRewardTakeOption::InternalSwap(BattlePassRewardTakeOption* other) {
  using std::swap;
  swap(tag_, other->tag_);
  swap(option_idx_, other->option_idx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassRewardTakeOption::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassRewardTakeOption

// .proto.BattlePassRewardTag tag = 10;
bool BattlePassRewardTakeOption::has_tag() const {
  return this != internal_default_instance() && tag_ != NULL;
}
void BattlePassRewardTakeOption::clear_tag() {
  if (GetArenaNoVirtual() == NULL && tag_ != NULL) delete tag_;
  tag_ = NULL;
}
const ::proto::BattlePassRewardTag& BattlePassRewardTakeOption::tag() const {
  const ::proto::BattlePassRewardTag* p = tag_;
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.tag)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::BattlePassRewardTag*>(
      &::proto::_BattlePassRewardTag_default_instance_);
}
::proto::BattlePassRewardTag* BattlePassRewardTakeOption::mutable_tag() {
  
  if (tag_ == NULL) {
    tag_ = new ::proto::BattlePassRewardTag;
  }
  // @@protoc_insertion_point(field_mutable:proto.BattlePassRewardTakeOption.tag)
  return tag_;
}
::proto::BattlePassRewardTag* BattlePassRewardTakeOption::release_tag() {
  // @@protoc_insertion_point(field_release:proto.BattlePassRewardTakeOption.tag)
  
  ::proto::BattlePassRewardTag* temp = tag_;
  tag_ = NULL;
  return temp;
}
void BattlePassRewardTakeOption::set_allocated_tag(::proto::BattlePassRewardTag* tag) {
  delete tag_;
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.BattlePassRewardTakeOption.tag)
}

// uint32 option_idx = 14;
void BattlePassRewardTakeOption::clear_option_idx() {
  option_idx_ = 0u;
}
::google::protobuf::uint32 BattlePassRewardTakeOption::option_idx() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassRewardTakeOption.option_idx)
  return option_idx_;
}
void BattlePassRewardTakeOption::set_option_idx(::google::protobuf::uint32 value) {
  
  option_idx_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassRewardTakeOption.option_idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassRewardReq::kTakeOptionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassRewardReq::TakeBattlePassRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassRewardReq)
}
TakeBattlePassRewardReq::TakeBattlePassRewardReq(const TakeBattlePassRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      take_option_list_(from.take_option_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassRewardReq)
}

void TakeBattlePassRewardReq::SharedCtor() {
  _cached_size_ = 0;
}

TakeBattlePassRewardReq::~TakeBattlePassRewardReq() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassRewardReq)
  SharedDtor();
}

void TakeBattlePassRewardReq::SharedDtor() {
}

void TakeBattlePassRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassRewardReq& TakeBattlePassRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassRewardReq* TakeBattlePassRewardReq::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassRewardReq* n = new TakeBattlePassRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  take_option_list_.Clear();
  _internal_metadata_.Clear();
}

bool TakeBattlePassRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.BattlePassRewardTakeOption take_option_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_take_option_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassRewardReq)
  return false;
#undef DO_
}

void TakeBattlePassRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->take_option_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassRewardReq)
}

::google::protobuf::uint8* TakeBattlePassRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, this->take_option_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassRewardReq)
  return target;
}

size_t TakeBattlePassRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.BattlePassRewardTakeOption take_option_list = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->take_option_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->take_option_list(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassRewardReq)
    MergeFrom(*source);
  }
}

void TakeBattlePassRewardReq::MergeFrom(const TakeBattlePassRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  take_option_list_.MergeFrom(from.take_option_list_);
}

void TakeBattlePassRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassRewardReq::CopyFrom(const TakeBattlePassRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassRewardReq::IsInitialized() const {
  return true;
}

void TakeBattlePassRewardReq::Swap(TakeBattlePassRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassRewardReq::InternalSwap(TakeBattlePassRewardReq* other) {
  using std::swap;
  take_option_list_.InternalSwap(&other->take_option_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassRewardReq

// repeated .proto.BattlePassRewardTakeOption take_option_list = 12;
int TakeBattlePassRewardReq::take_option_list_size() const {
  return take_option_list_.size();
}
void TakeBattlePassRewardReq::clear_take_option_list() {
  take_option_list_.Clear();
}
const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardReq::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Get(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Mutable(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardReq::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardReq::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardReq.take_option_list)
  return &take_option_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardReq::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardReq.take_option_list)
  return take_option_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassRewardRsp::kItemListFieldNumber;
const int TakeBattlePassRewardRsp::kRetcodeFieldNumber;
const int TakeBattlePassRewardRsp::kTakeOptionListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassRewardRsp::TakeBattlePassRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassRewardRsp)
}
TakeBattlePassRewardRsp::TakeBattlePassRewardRsp(const TakeBattlePassRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      take_option_list_(from.take_option_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassRewardRsp)
}

void TakeBattlePassRewardRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

TakeBattlePassRewardRsp::~TakeBattlePassRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassRewardRsp)
  SharedDtor();
}

void TakeBattlePassRewardRsp::SharedDtor() {
}

void TakeBattlePassRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassRewardRsp& TakeBattlePassRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassRewardRsp* TakeBattlePassRewardRsp::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassRewardRsp* n = new TakeBattlePassRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  take_option_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool TakeBattlePassRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.ItemParam item_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.BattlePassRewardTakeOption take_option_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_take_option_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassRewardRsp)
  return false;
#undef DO_
}

void TakeBattlePassRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ItemParam item_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item_list(static_cast<int>(i)), output);
  }

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->take_option_list(static_cast<int>(i)), output);
  }

  // int32 retcode = 13;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassRewardRsp)
}

::google::protobuf::uint8* TakeBattlePassRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.ItemParam item_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->take_option_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->take_option_list(static_cast<int>(i)), deterministic, target);
  }

  // int32 retcode = 13;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassRewardRsp)
  return target;
}

size_t TakeBattlePassRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ItemParam item_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.BattlePassRewardTakeOption take_option_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->take_option_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->take_option_list(static_cast<int>(i)));
    }
  }

  // int32 retcode = 13;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassRewardRsp)
    MergeFrom(*source);
  }
}

void TakeBattlePassRewardRsp::MergeFrom(const TakeBattlePassRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  take_option_list_.MergeFrom(from.take_option_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void TakeBattlePassRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassRewardRsp::CopyFrom(const TakeBattlePassRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassRewardRsp::IsInitialized() const {
  return true;
}

void TakeBattlePassRewardRsp::Swap(TakeBattlePassRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassRewardRsp::InternalSwap(TakeBattlePassRewardRsp* other) {
  using std::swap;
  item_list_.InternalSwap(&other->item_list_);
  take_option_list_.InternalSwap(&other->take_option_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassRewardRsp

// repeated .proto.ItemParam item_list = 7;
int TakeBattlePassRewardRsp::item_list_size() const {
  return item_list_.size();
}
void TakeBattlePassRewardRsp::clear_item_list() {
  item_list_.Clear();
}
const ::proto::ItemParam& TakeBattlePassRewardRsp::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_.Get(index);
}
::proto::ItemParam* TakeBattlePassRewardRsp::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_.Mutable(index);
}
::proto::ItemParam* TakeBattlePassRewardRsp::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
TakeBattlePassRewardRsp::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
TakeBattlePassRewardRsp::item_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.item_list)
  return item_list_;
}

// int32 retcode = 13;
void TakeBattlePassRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 TakeBattlePassRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.retcode)
  return retcode_;
}
void TakeBattlePassRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassRewardRsp.retcode)
}

// repeated .proto.BattlePassRewardTakeOption take_option_list = 9;
int TakeBattlePassRewardRsp::take_option_list_size() const {
  return take_option_list_.size();
}
void TakeBattlePassRewardRsp::clear_take_option_list() {
  take_option_list_.Clear();
}
const ::proto::BattlePassRewardTakeOption& TakeBattlePassRewardRsp::take_option_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Get(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::mutable_take_option_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Mutable(index);
}
::proto::BattlePassRewardTakeOption* TakeBattlePassRewardRsp::add_take_option_list() {
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >*
TakeBattlePassRewardRsp::mutable_take_option_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return &take_option_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::BattlePassRewardTakeOption >&
TakeBattlePassRewardRsp::take_option_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassRewardRsp.take_option_list)
  return take_option_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassMissionPointReq::kMissionIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassMissionPointReq::TakeBattlePassMissionPointReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassMissionPointReq)
}
TakeBattlePassMissionPointReq::TakeBattlePassMissionPointReq(const TakeBattlePassMissionPointReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_id_list_(from.mission_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassMissionPointReq)
}

void TakeBattlePassMissionPointReq::SharedCtor() {
  _cached_size_ = 0;
}

TakeBattlePassMissionPointReq::~TakeBattlePassMissionPointReq() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassMissionPointReq)
  SharedDtor();
}

void TakeBattlePassMissionPointReq::SharedDtor() {
}

void TakeBattlePassMissionPointReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassMissionPointReq::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassMissionPointReq& TakeBattlePassMissionPointReq::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassMissionPointReq* TakeBattlePassMissionPointReq::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassMissionPointReq* n = new TakeBattlePassMissionPointReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassMissionPointReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassMissionPointReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_id_list_.Clear();
  _internal_metadata_.Clear();
}

bool TakeBattlePassMissionPointReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassMissionPointReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mission_id_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mission_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_mission_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassMissionPointReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassMissionPointReq)
  return false;
#undef DO_
}

void TakeBattlePassMissionPointReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassMissionPointReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 mission_id_list = 5;
  if (this->mission_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mission_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->mission_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->mission_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassMissionPointReq)
}

::google::protobuf::uint8* TakeBattlePassMissionPointReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassMissionPointReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 mission_id_list = 5;
  if (this->mission_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _mission_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->mission_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassMissionPointReq)
  return target;
}

size_t TakeBattlePassMissionPointReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassMissionPointReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 mission_id_list = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mission_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mission_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassMissionPointReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassMissionPointReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassMissionPointReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassMissionPointReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassMissionPointReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassMissionPointReq)
    MergeFrom(*source);
  }
}

void TakeBattlePassMissionPointReq::MergeFrom(const TakeBattlePassMissionPointReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassMissionPointReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_id_list_.MergeFrom(from.mission_id_list_);
}

void TakeBattlePassMissionPointReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassMissionPointReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassMissionPointReq::CopyFrom(const TakeBattlePassMissionPointReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassMissionPointReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassMissionPointReq::IsInitialized() const {
  return true;
}

void TakeBattlePassMissionPointReq::Swap(TakeBattlePassMissionPointReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassMissionPointReq::InternalSwap(TakeBattlePassMissionPointReq* other) {
  using std::swap;
  mission_id_list_.InternalSwap(&other->mission_id_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassMissionPointReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassMissionPointReq

// repeated uint32 mission_id_list = 5;
int TakeBattlePassMissionPointReq::mission_id_list_size() const {
  return mission_id_list_.size();
}
void TakeBattlePassMissionPointReq::clear_mission_id_list() {
  mission_id_list_.Clear();
}
::google::protobuf::uint32 TakeBattlePassMissionPointReq::mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointReq.mission_id_list)
  return mission_id_list_.Get(index);
}
void TakeBattlePassMissionPointReq::set_mission_id_list(int index, ::google::protobuf::uint32 value) {
  mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointReq.mission_id_list)
}
void TakeBattlePassMissionPointReq::add_mission_id_list(::google::protobuf::uint32 value) {
  mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassMissionPointReq.mission_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeBattlePassMissionPointReq::mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassMissionPointReq.mission_id_list)
  return mission_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeBattlePassMissionPointReq::mutable_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassMissionPointReq.mission_id_list)
  return &mission_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeBattlePassMissionPointRsp::kRetcodeFieldNumber;
const int TakeBattlePassMissionPointRsp::kMissionIdListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeBattlePassMissionPointRsp::TakeBattlePassMissionPointRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeBattlePassMissionPointRsp)
}
TakeBattlePassMissionPointRsp::TakeBattlePassMissionPointRsp(const TakeBattlePassMissionPointRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mission_id_list_(from.mission_id_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.TakeBattlePassMissionPointRsp)
}

void TakeBattlePassMissionPointRsp::SharedCtor() {
  retcode_ = 0;
  _cached_size_ = 0;
}

TakeBattlePassMissionPointRsp::~TakeBattlePassMissionPointRsp() {
  // @@protoc_insertion_point(destructor:proto.TakeBattlePassMissionPointRsp)
  SharedDtor();
}

void TakeBattlePassMissionPointRsp::SharedDtor() {
}

void TakeBattlePassMissionPointRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeBattlePassMissionPointRsp::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeBattlePassMissionPointRsp& TakeBattlePassMissionPointRsp::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeBattlePassMissionPointRsp* TakeBattlePassMissionPointRsp::New(::google::protobuf::Arena* arena) const {
  TakeBattlePassMissionPointRsp* n = new TakeBattlePassMissionPointRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeBattlePassMissionPointRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeBattlePassMissionPointRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mission_id_list_.Clear();
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool TakeBattlePassMissionPointRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeBattlePassMissionPointRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 mission_id_list = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mission_id_list())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90u, input, this->mutable_mission_id_list())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeBattlePassMissionPointRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeBattlePassMissionPointRsp)
  return false;
#undef DO_
}

void TakeBattlePassMissionPointRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeBattlePassMissionPointRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // repeated uint32 mission_id_list = 11;
  if (this->mission_id_list_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _mission_id_list_cached_byte_size_));
  }
  for (int i = 0, n = this->mission_id_list_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->mission_id_list(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeBattlePassMissionPointRsp)
}

::google::protobuf::uint8* TakeBattlePassMissionPointRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeBattlePassMissionPointRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // repeated uint32 mission_id_list = 11;
  if (this->mission_id_list_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _mission_id_list_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->mission_id_list_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeBattlePassMissionPointRsp)
  return target;
}

size_t TakeBattlePassMissionPointRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeBattlePassMissionPointRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 mission_id_list = 11;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->mission_id_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mission_id_list_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 retcode = 4;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeBattlePassMissionPointRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeBattlePassMissionPointRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeBattlePassMissionPointRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeBattlePassMissionPointRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeBattlePassMissionPointRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeBattlePassMissionPointRsp)
    MergeFrom(*source);
  }
}

void TakeBattlePassMissionPointRsp::MergeFrom(const TakeBattlePassMissionPointRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeBattlePassMissionPointRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mission_id_list_.MergeFrom(from.mission_id_list_);
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void TakeBattlePassMissionPointRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeBattlePassMissionPointRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeBattlePassMissionPointRsp::CopyFrom(const TakeBattlePassMissionPointRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeBattlePassMissionPointRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeBattlePassMissionPointRsp::IsInitialized() const {
  return true;
}

void TakeBattlePassMissionPointRsp::Swap(TakeBattlePassMissionPointRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeBattlePassMissionPointRsp::InternalSwap(TakeBattlePassMissionPointRsp* other) {
  using std::swap;
  mission_id_list_.InternalSwap(&other->mission_id_list_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeBattlePassMissionPointRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeBattlePassMissionPointRsp

// int32 retcode = 4;
void TakeBattlePassMissionPointRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 TakeBattlePassMissionPointRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.retcode)
  return retcode_;
}
void TakeBattlePassMissionPointRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.retcode)
}

// repeated uint32 mission_id_list = 11;
int TakeBattlePassMissionPointRsp::mission_id_list_size() const {
  return mission_id_list_.size();
}
void TakeBattlePassMissionPointRsp::clear_mission_id_list() {
  mission_id_list_.Clear();
}
::google::protobuf::uint32 TakeBattlePassMissionPointRsp::mission_id_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.TakeBattlePassMissionPointRsp.mission_id_list)
  return mission_id_list_.Get(index);
}
void TakeBattlePassMissionPointRsp::set_mission_id_list(int index, ::google::protobuf::uint32 value) {
  mission_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.TakeBattlePassMissionPointRsp.mission_id_list)
}
void TakeBattlePassMissionPointRsp::add_mission_id_list(::google::protobuf::uint32 value) {
  mission_id_list_.Add(value);
  // @@protoc_insertion_point(field_add:proto.TakeBattlePassMissionPointRsp.mission_id_list)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TakeBattlePassMissionPointRsp::mission_id_list() const {
  // @@protoc_insertion_point(field_list:proto.TakeBattlePassMissionPointRsp.mission_id_list)
  return mission_id_list_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TakeBattlePassMissionPointRsp::mutable_mission_id_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.TakeBattlePassMissionPointRsp.mission_id_list)
  return &mission_id_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBattlePassProductReq::kBattlePassProductPlayTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBattlePassProductReq::GetBattlePassProductReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetBattlePassProductReq)
}
GetBattlePassProductReq::GetBattlePassProductReq(const GetBattlePassProductReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  battle_pass_product_play_type_ = from.battle_pass_product_play_type_;
  // @@protoc_insertion_point(copy_constructor:proto.GetBattlePassProductReq)
}

void GetBattlePassProductReq::SharedCtor() {
  battle_pass_product_play_type_ = 0u;
  _cached_size_ = 0;
}

GetBattlePassProductReq::~GetBattlePassProductReq() {
  // @@protoc_insertion_point(destructor:proto.GetBattlePassProductReq)
  SharedDtor();
}

void GetBattlePassProductReq::SharedDtor() {
}

void GetBattlePassProductReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBattlePassProductReq::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetBattlePassProductReq& GetBattlePassProductReq::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetBattlePassProductReq* GetBattlePassProductReq::New(::google::protobuf::Arena* arena) const {
  GetBattlePassProductReq* n = new GetBattlePassProductReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBattlePassProductReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetBattlePassProductReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_pass_product_play_type_ = 0u;
  _internal_metadata_.Clear();
}

bool GetBattlePassProductReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetBattlePassProductReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 battle_pass_product_play_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_pass_product_play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetBattlePassProductReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetBattlePassProductReq)
  return false;
#undef DO_
}

void GetBattlePassProductReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetBattlePassProductReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 battle_pass_product_play_type = 10;
  if (this->battle_pass_product_play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->battle_pass_product_play_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetBattlePassProductReq)
}

::google::protobuf::uint8* GetBattlePassProductReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetBattlePassProductReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 battle_pass_product_play_type = 10;
  if (this->battle_pass_product_play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->battle_pass_product_play_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetBattlePassProductReq)
  return target;
}

size_t GetBattlePassProductReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetBattlePassProductReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 battle_pass_product_play_type = 10;
  if (this->battle_pass_product_play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->battle_pass_product_play_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBattlePassProductReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetBattlePassProductReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBattlePassProductReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBattlePassProductReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetBattlePassProductReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetBattlePassProductReq)
    MergeFrom(*source);
  }
}

void GetBattlePassProductReq::MergeFrom(const GetBattlePassProductReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetBattlePassProductReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.battle_pass_product_play_type() != 0) {
    set_battle_pass_product_play_type(from.battle_pass_product_play_type());
  }
}

void GetBattlePassProductReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetBattlePassProductReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBattlePassProductReq::CopyFrom(const GetBattlePassProductReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetBattlePassProductReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBattlePassProductReq::IsInitialized() const {
  return true;
}

void GetBattlePassProductReq::Swap(GetBattlePassProductReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBattlePassProductReq::InternalSwap(GetBattlePassProductReq* other) {
  using std::swap;
  swap(battle_pass_product_play_type_, other->battle_pass_product_play_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBattlePassProductReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBattlePassProductReq

// uint32 battle_pass_product_play_type = 10;
void GetBattlePassProductReq::clear_battle_pass_product_play_type() {
  battle_pass_product_play_type_ = 0u;
}
::google::protobuf::uint32 GetBattlePassProductReq::battle_pass_product_play_type() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductReq.battle_pass_product_play_type)
  return battle_pass_product_play_type_;
}
void GetBattlePassProductReq::set_battle_pass_product_play_type(::google::protobuf::uint32 value) {
  
  battle_pass_product_play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductReq.battle_pass_product_play_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetBattlePassProductRsp::kRetcodeFieldNumber;
const int GetBattlePassProductRsp::kPriceTierFieldNumber;
const int GetBattlePassProductRsp::kBattlePassProductPlayTypeFieldNumber;
const int GetBattlePassProductRsp::kProductIdFieldNumber;
const int GetBattlePassProductRsp::kCurScheduleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetBattlePassProductRsp::GetBattlePassProductRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetBattlePassProductRsp)
}
GetBattlePassProductRsp::GetBattlePassProductRsp(const GetBattlePassProductRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.product_id().size() > 0) {
    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.price_tier().size() > 0) {
    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&cur_schedule_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(cur_schedule_id_));
  // @@protoc_insertion_point(copy_constructor:proto.GetBattlePassProductRsp)
}

void GetBattlePassProductRsp::SharedCtor() {
  product_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_schedule_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_schedule_id_));
  _cached_size_ = 0;
}

GetBattlePassProductRsp::~GetBattlePassProductRsp() {
  // @@protoc_insertion_point(destructor:proto.GetBattlePassProductRsp)
  SharedDtor();
}

void GetBattlePassProductRsp::SharedDtor() {
  product_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetBattlePassProductRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBattlePassProductRsp::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetBattlePassProductRsp& GetBattlePassProductRsp::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetBattlePassProductRsp* GetBattlePassProductRsp::New(::google::protobuf::Arena* arena) const {
  GetBattlePassProductRsp* n = new GetBattlePassProductRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetBattlePassProductRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetBattlePassProductRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_schedule_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(cur_schedule_id_));
  _internal_metadata_.Clear();
}

bool GetBattlePassProductRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetBattlePassProductRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string product_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->product_id().data(), static_cast<int>(this->product_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GetBattlePassProductRsp.product_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 battle_pass_product_play_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_pass_product_play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string price_tier = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_tier()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->price_tier().data(), static_cast<int>(this->price_tier().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.GetBattlePassProductRsp.price_tier"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cur_schedule_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetBattlePassProductRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetBattlePassProductRsp)
  return false;
#undef DO_
}

void GetBattlePassProductRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetBattlePassProductRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetBattlePassProductRsp.product_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->product_id(), output);
  }

  // uint32 battle_pass_product_play_type = 2;
  if (this->battle_pass_product_play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_pass_product_play_type(), output);
  }

  // string price_tier = 6;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetBattlePassProductRsp.price_tier");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->price_tier(), output);
  }

  // uint32 cur_schedule_id = 11;
  if (this->cur_schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cur_schedule_id(), output);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetBattlePassProductRsp)
}

::google::protobuf::uint8* GetBattlePassProductRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetBattlePassProductRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string product_id = 1;
  if (this->product_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->product_id().data(), static_cast<int>(this->product_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetBattlePassProductRsp.product_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->product_id(), target);
  }

  // uint32 battle_pass_product_play_type = 2;
  if (this->battle_pass_product_play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battle_pass_product_play_type(), target);
  }

  // string price_tier = 6;
  if (this->price_tier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->price_tier().data(), static_cast<int>(this->price_tier().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.GetBattlePassProductRsp.price_tier");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->price_tier(), target);
  }

  // uint32 cur_schedule_id = 11;
  if (this->cur_schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cur_schedule_id(), target);
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetBattlePassProductRsp)
  return target;
}

size_t GetBattlePassProductRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetBattlePassProductRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string product_id = 1;
  if (this->product_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->product_id());
  }

  // string price_tier = 6;
  if (this->price_tier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price_tier());
  }

  // int32 retcode = 14;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 battle_pass_product_play_type = 2;
  if (this->battle_pass_product_play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->battle_pass_product_play_type());
  }

  // uint32 cur_schedule_id = 11;
  if (this->cur_schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_schedule_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBattlePassProductRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetBattlePassProductRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBattlePassProductRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetBattlePassProductRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetBattlePassProductRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetBattlePassProductRsp)
    MergeFrom(*source);
  }
}

void GetBattlePassProductRsp::MergeFrom(const GetBattlePassProductRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetBattlePassProductRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.product_id().size() > 0) {

    product_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_id_);
  }
  if (from.price_tier().size() > 0) {

    price_tier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_tier_);
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.battle_pass_product_play_type() != 0) {
    set_battle_pass_product_play_type(from.battle_pass_product_play_type());
  }
  if (from.cur_schedule_id() != 0) {
    set_cur_schedule_id(from.cur_schedule_id());
  }
}

void GetBattlePassProductRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetBattlePassProductRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBattlePassProductRsp::CopyFrom(const GetBattlePassProductRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetBattlePassProductRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBattlePassProductRsp::IsInitialized() const {
  return true;
}

void GetBattlePassProductRsp::Swap(GetBattlePassProductRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetBattlePassProductRsp::InternalSwap(GetBattlePassProductRsp* other) {
  using std::swap;
  product_id_.Swap(&other->product_id_);
  price_tier_.Swap(&other->price_tier_);
  swap(retcode_, other->retcode_);
  swap(battle_pass_product_play_type_, other->battle_pass_product_play_type_);
  swap(cur_schedule_id_, other->cur_schedule_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetBattlePassProductRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetBattlePassProductRsp

// int32 retcode = 14;
void GetBattlePassProductRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetBattlePassProductRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.retcode)
  return retcode_;
}
void GetBattlePassProductRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.retcode)
}

// string price_tier = 6;
void GetBattlePassProductRsp::clear_price_tier() {
  price_tier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetBattlePassProductRsp::price_tier() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.price_tier)
  return price_tier_.GetNoArena();
}
void GetBattlePassProductRsp::set_price_tier(const ::std::string& value) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.price_tier)
}
#if LANG_CXX11
void GetBattlePassProductRsp::set_price_tier(::std::string&& value) {
  
  price_tier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetBattlePassProductRsp.price_tier)
}
#endif
void GetBattlePassProductRsp::set_price_tier(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetBattlePassProductRsp.price_tier)
}
void GetBattlePassProductRsp::set_price_tier(const char* value, size_t size) {
  
  price_tier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetBattlePassProductRsp.price_tier)
}
::std::string* GetBattlePassProductRsp::mutable_price_tier() {
  
  // @@protoc_insertion_point(field_mutable:proto.GetBattlePassProductRsp.price_tier)
  return price_tier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetBattlePassProductRsp::release_price_tier() {
  // @@protoc_insertion_point(field_release:proto.GetBattlePassProductRsp.price_tier)
  
  return price_tier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetBattlePassProductRsp::set_allocated_price_tier(::std::string* price_tier) {
  if (price_tier != NULL) {
    
  } else {
    
  }
  price_tier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_tier);
  // @@protoc_insertion_point(field_set_allocated:proto.GetBattlePassProductRsp.price_tier)
}

// uint32 battle_pass_product_play_type = 2;
void GetBattlePassProductRsp::clear_battle_pass_product_play_type() {
  battle_pass_product_play_type_ = 0u;
}
::google::protobuf::uint32 GetBattlePassProductRsp::battle_pass_product_play_type() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.battle_pass_product_play_type)
  return battle_pass_product_play_type_;
}
void GetBattlePassProductRsp::set_battle_pass_product_play_type(::google::protobuf::uint32 value) {
  
  battle_pass_product_play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.battle_pass_product_play_type)
}

// string product_id = 1;
void GetBattlePassProductRsp::clear_product_id() {
  product_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& GetBattlePassProductRsp::product_id() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.product_id)
  return product_id_.GetNoArena();
}
void GetBattlePassProductRsp::set_product_id(const ::std::string& value) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.product_id)
}
#if LANG_CXX11
void GetBattlePassProductRsp::set_product_id(::std::string&& value) {
  
  product_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.GetBattlePassProductRsp.product_id)
}
#endif
void GetBattlePassProductRsp::set_product_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.GetBattlePassProductRsp.product_id)
}
void GetBattlePassProductRsp::set_product_id(const char* value, size_t size) {
  
  product_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.GetBattlePassProductRsp.product_id)
}
::std::string* GetBattlePassProductRsp::mutable_product_id() {
  
  // @@protoc_insertion_point(field_mutable:proto.GetBattlePassProductRsp.product_id)
  return product_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetBattlePassProductRsp::release_product_id() {
  // @@protoc_insertion_point(field_release:proto.GetBattlePassProductRsp.product_id)
  
  return product_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetBattlePassProductRsp::set_allocated_product_id(::std::string* product_id) {
  if (product_id != NULL) {
    
  } else {
    
  }
  product_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_id);
  // @@protoc_insertion_point(field_set_allocated:proto.GetBattlePassProductRsp.product_id)
}

// uint32 cur_schedule_id = 11;
void GetBattlePassProductRsp::clear_cur_schedule_id() {
  cur_schedule_id_ = 0u;
}
::google::protobuf::uint32 GetBattlePassProductRsp::cur_schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.GetBattlePassProductRsp.cur_schedule_id)
  return cur_schedule_id_;
}
void GetBattlePassProductRsp::set_cur_schedule_id(::google::protobuf::uint32 value) {
  
  cur_schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetBattlePassProductRsp.cur_schedule_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetBattlePassViewedReq::kScheduleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetBattlePassViewedReq::SetBattlePassViewedReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SetBattlePassViewedReq)
}
SetBattlePassViewedReq::SetBattlePassViewedReq(const SetBattlePassViewedReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  schedule_id_ = from.schedule_id_;
  // @@protoc_insertion_point(copy_constructor:proto.SetBattlePassViewedReq)
}

void SetBattlePassViewedReq::SharedCtor() {
  schedule_id_ = 0u;
  _cached_size_ = 0;
}

SetBattlePassViewedReq::~SetBattlePassViewedReq() {
  // @@protoc_insertion_point(destructor:proto.SetBattlePassViewedReq)
  SharedDtor();
}

void SetBattlePassViewedReq::SharedDtor() {
}

void SetBattlePassViewedReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBattlePassViewedReq::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetBattlePassViewedReq& SetBattlePassViewedReq::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetBattlePassViewedReq* SetBattlePassViewedReq::New(::google::protobuf::Arena* arena) const {
  SetBattlePassViewedReq* n = new SetBattlePassViewedReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetBattlePassViewedReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SetBattlePassViewedReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schedule_id_ = 0u;
  _internal_metadata_.Clear();
}

bool SetBattlePassViewedReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SetBattlePassViewedReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 schedule_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SetBattlePassViewedReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SetBattlePassViewedReq)
  return false;
#undef DO_
}

void SetBattlePassViewedReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SetBattlePassViewedReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 6;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->schedule_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SetBattlePassViewedReq)
}

::google::protobuf::uint8* SetBattlePassViewedReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SetBattlePassViewedReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 6;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->schedule_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SetBattlePassViewedReq)
  return target;
}

size_t SetBattlePassViewedReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SetBattlePassViewedReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 schedule_id = 6;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBattlePassViewedReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SetBattlePassViewedReq)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBattlePassViewedReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetBattlePassViewedReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SetBattlePassViewedReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SetBattlePassViewedReq)
    MergeFrom(*source);
  }
}

void SetBattlePassViewedReq::MergeFrom(const SetBattlePassViewedReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SetBattlePassViewedReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
}

void SetBattlePassViewedReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SetBattlePassViewedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBattlePassViewedReq::CopyFrom(const SetBattlePassViewedReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SetBattlePassViewedReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBattlePassViewedReq::IsInitialized() const {
  return true;
}

void SetBattlePassViewedReq::Swap(SetBattlePassViewedReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetBattlePassViewedReq::InternalSwap(SetBattlePassViewedReq* other) {
  using std::swap;
  swap(schedule_id_, other->schedule_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetBattlePassViewedReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetBattlePassViewedReq

// uint32 schedule_id = 6;
void SetBattlePassViewedReq::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 SetBattlePassViewedReq::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SetBattlePassViewedReq.schedule_id)
  return schedule_id_;
}
void SetBattlePassViewedReq::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SetBattlePassViewedReq.schedule_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetBattlePassViewedRsp::kScheduleIdFieldNumber;
const int SetBattlePassViewedRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetBattlePassViewedRsp::SetBattlePassViewedRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SetBattlePassViewedRsp)
}
SetBattlePassViewedRsp::SetBattlePassViewedRsp(const SetBattlePassViewedRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&schedule_id_, &from.schedule_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&schedule_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.SetBattlePassViewedRsp)
}

void SetBattlePassViewedRsp::SharedCtor() {
  ::memset(&schedule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&schedule_id_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

SetBattlePassViewedRsp::~SetBattlePassViewedRsp() {
  // @@protoc_insertion_point(destructor:proto.SetBattlePassViewedRsp)
  SharedDtor();
}

void SetBattlePassViewedRsp::SharedDtor() {
}

void SetBattlePassViewedRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetBattlePassViewedRsp::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SetBattlePassViewedRsp& SetBattlePassViewedRsp::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetBattlePassViewedRsp* SetBattlePassViewedRsp::New(::google::protobuf::Arena* arena) const {
  SetBattlePassViewedRsp* n = new SetBattlePassViewedRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetBattlePassViewedRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SetBattlePassViewedRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&schedule_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&schedule_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool SetBattlePassViewedRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SetBattlePassViewedRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 schedule_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SetBattlePassViewedRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SetBattlePassViewedRsp)
  return false;
#undef DO_
}

void SetBattlePassViewedRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SetBattlePassViewedRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->schedule_id(), output);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.SetBattlePassViewedRsp)
}

::google::protobuf::uint8* SetBattlePassViewedRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.SetBattlePassViewedRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->schedule_id(), target);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.SetBattlePassViewedRsp)
  return target;
}

size_t SetBattlePassViewedRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SetBattlePassViewedRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 schedule_id = 2;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetBattlePassViewedRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.SetBattlePassViewedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetBattlePassViewedRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetBattlePassViewedRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.SetBattlePassViewedRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.SetBattlePassViewedRsp)
    MergeFrom(*source);
  }
}

void SetBattlePassViewedRsp::MergeFrom(const SetBattlePassViewedRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SetBattlePassViewedRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void SetBattlePassViewedRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.SetBattlePassViewedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetBattlePassViewedRsp::CopyFrom(const SetBattlePassViewedRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SetBattlePassViewedRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetBattlePassViewedRsp::IsInitialized() const {
  return true;
}

void SetBattlePassViewedRsp::Swap(SetBattlePassViewedRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetBattlePassViewedRsp::InternalSwap(SetBattlePassViewedRsp* other) {
  using std::swap;
  swap(schedule_id_, other->schedule_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetBattlePassViewedRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetBattlePassViewedRsp

// uint32 schedule_id = 2;
void SetBattlePassViewedRsp::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 SetBattlePassViewedRsp::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.SetBattlePassViewedRsp.schedule_id)
  return schedule_id_;
}
void SetBattlePassViewedRsp::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SetBattlePassViewedRsp.schedule_id)
}

// int32 retcode = 3;
void SetBattlePassViewedRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 SetBattlePassViewedRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.SetBattlePassViewedRsp.retcode)
  return retcode_;
}
void SetBattlePassViewedRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.SetBattlePassViewedRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BattlePassBuySuccNotify::kScheduleIdFieldNumber;
const int BattlePassBuySuccNotify::kProductPlayTypeFieldNumber;
const int BattlePassBuySuccNotify::kAddPointFieldNumber;
const int BattlePassBuySuccNotify::kItemListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BattlePassBuySuccNotify::BattlePassBuySuccNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BattlePassBuySuccNotify)
}
BattlePassBuySuccNotify::BattlePassBuySuccNotify(const BattlePassBuySuccNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      item_list_(from.item_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&add_point_, &from.add_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_play_type_) -
    reinterpret_cast<char*>(&add_point_)) + sizeof(product_play_type_));
  // @@protoc_insertion_point(copy_constructor:proto.BattlePassBuySuccNotify)
}

void BattlePassBuySuccNotify::SharedCtor() {
  ::memset(&add_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_play_type_) -
      reinterpret_cast<char*>(&add_point_)) + sizeof(product_play_type_));
  _cached_size_ = 0;
}

BattlePassBuySuccNotify::~BattlePassBuySuccNotify() {
  // @@protoc_insertion_point(destructor:proto.BattlePassBuySuccNotify)
  SharedDtor();
}

void BattlePassBuySuccNotify::SharedDtor() {
}

void BattlePassBuySuccNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattlePassBuySuccNotify::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BattlePassBuySuccNotify& BattlePassBuySuccNotify::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BattlePassBuySuccNotify* BattlePassBuySuccNotify::New(::google::protobuf::Arena* arena) const {
  BattlePassBuySuccNotify* n = new BattlePassBuySuccNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BattlePassBuySuccNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BattlePassBuySuccNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_list_.Clear();
  ::memset(&add_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&product_play_type_) -
      reinterpret_cast<char*>(&add_point_)) + sizeof(product_play_type_));
  _internal_metadata_.Clear();
}

bool BattlePassBuySuccNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BattlePassBuySuccNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 schedule_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.ItemParam item_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 product_play_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &product_play_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 add_point = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &add_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BattlePassBuySuccNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BattlePassBuySuccNotify)
  return false;
#undef DO_
}

void BattlePassBuySuccNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BattlePassBuySuccNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 4;
  if (this->schedule_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->schedule_id(), output);
  }

  // repeated .proto.ItemParam item_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->item_list(static_cast<int>(i)), output);
  }

  // uint32 product_play_type = 11;
  if (this->product_play_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->product_play_type(), output);
  }

  // uint32 add_point = 12;
  if (this->add_point() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->add_point(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BattlePassBuySuccNotify)
}

::google::protobuf::uint8* BattlePassBuySuccNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BattlePassBuySuccNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 schedule_id = 4;
  if (this->schedule_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->schedule_id(), target);
  }

  // repeated .proto.ItemParam item_list = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->item_list(static_cast<int>(i)), deterministic, target);
  }

  // uint32 product_play_type = 11;
  if (this->product_play_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->product_play_type(), target);
  }

  // uint32 add_point = 12;
  if (this->add_point() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->add_point(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BattlePassBuySuccNotify)
  return target;
}

size_t BattlePassBuySuccNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BattlePassBuySuccNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.ItemParam item_list = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->item_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_list(static_cast<int>(i)));
    }
  }

  // uint32 add_point = 12;
  if (this->add_point() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->add_point());
  }

  // uint32 schedule_id = 4;
  if (this->schedule_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->schedule_id());
  }

  // uint32 product_play_type = 11;
  if (this->product_play_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->product_play_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePassBuySuccNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BattlePassBuySuccNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const BattlePassBuySuccNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BattlePassBuySuccNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BattlePassBuySuccNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BattlePassBuySuccNotify)
    MergeFrom(*source);
  }
}

void BattlePassBuySuccNotify::MergeFrom(const BattlePassBuySuccNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BattlePassBuySuccNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_list_.MergeFrom(from.item_list_);
  if (from.add_point() != 0) {
    set_add_point(from.add_point());
  }
  if (from.schedule_id() != 0) {
    set_schedule_id(from.schedule_id());
  }
  if (from.product_play_type() != 0) {
    set_product_play_type(from.product_play_type());
  }
}

void BattlePassBuySuccNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BattlePassBuySuccNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattlePassBuySuccNotify::CopyFrom(const BattlePassBuySuccNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BattlePassBuySuccNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePassBuySuccNotify::IsInitialized() const {
  return true;
}

void BattlePassBuySuccNotify::Swap(BattlePassBuySuccNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BattlePassBuySuccNotify::InternalSwap(BattlePassBuySuccNotify* other) {
  using std::swap;
  item_list_.InternalSwap(&other->item_list_);
  swap(add_point_, other->add_point_);
  swap(schedule_id_, other->schedule_id_);
  swap(product_play_type_, other->product_play_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BattlePassBuySuccNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BattlePassBuySuccNotify

// uint32 schedule_id = 4;
void BattlePassBuySuccNotify::clear_schedule_id() {
  schedule_id_ = 0u;
}
::google::protobuf::uint32 BattlePassBuySuccNotify::schedule_id() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.schedule_id)
  return schedule_id_;
}
void BattlePassBuySuccNotify::set_schedule_id(::google::protobuf::uint32 value) {
  
  schedule_id_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassBuySuccNotify.schedule_id)
}

// uint32 product_play_type = 11;
void BattlePassBuySuccNotify::clear_product_play_type() {
  product_play_type_ = 0u;
}
::google::protobuf::uint32 BattlePassBuySuccNotify::product_play_type() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.product_play_type)
  return product_play_type_;
}
void BattlePassBuySuccNotify::set_product_play_type(::google::protobuf::uint32 value) {
  
  product_play_type_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassBuySuccNotify.product_play_type)
}

// uint32 add_point = 12;
void BattlePassBuySuccNotify::clear_add_point() {
  add_point_ = 0u;
}
::google::protobuf::uint32 BattlePassBuySuccNotify::add_point() const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.add_point)
  return add_point_;
}
void BattlePassBuySuccNotify::set_add_point(::google::protobuf::uint32 value) {
  
  add_point_ = value;
  // @@protoc_insertion_point(field_set:proto.BattlePassBuySuccNotify.add_point)
}

// repeated .proto.ItemParam item_list = 9;
int BattlePassBuySuccNotify::item_list_size() const {
  return item_list_.size();
}
void BattlePassBuySuccNotify::clear_item_list() {
  item_list_.Clear();
}
const ::proto::ItemParam& BattlePassBuySuccNotify::item_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.BattlePassBuySuccNotify.item_list)
  return item_list_.Get(index);
}
::proto::ItemParam* BattlePassBuySuccNotify::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.BattlePassBuySuccNotify.item_list)
  return item_list_.Mutable(index);
}
::proto::ItemParam* BattlePassBuySuccNotify::add_item_list() {
  // @@protoc_insertion_point(field_add:proto.BattlePassBuySuccNotify.item_list)
  return item_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::ItemParam >*
BattlePassBuySuccNotify::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.BattlePassBuySuccNotify.item_list)
  return &item_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::ItemParam >&
BattlePassBuySuccNotify::item_list() const {
  // @@protoc_insertion_point(field_list:proto.BattlePassBuySuccNotify.item_list)
  return item_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuyBattlePassLevelReq::kBuyLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuyBattlePassLevelReq::BuyBattlePassLevelReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BuyBattlePassLevelReq)
}
BuyBattlePassLevelReq::BuyBattlePassLevelReq(const BuyBattlePassLevelReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buy_level_ = from.buy_level_;
  // @@protoc_insertion_point(copy_constructor:proto.BuyBattlePassLevelReq)
}

void BuyBattlePassLevelReq::SharedCtor() {
  buy_level_ = 0u;
  _cached_size_ = 0;
}

BuyBattlePassLevelReq::~BuyBattlePassLevelReq() {
  // @@protoc_insertion_point(destructor:proto.BuyBattlePassLevelReq)
  SharedDtor();
}

void BuyBattlePassLevelReq::SharedDtor() {
}

void BuyBattlePassLevelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyBattlePassLevelReq::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuyBattlePassLevelReq& BuyBattlePassLevelReq::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuyBattlePassLevelReq* BuyBattlePassLevelReq::New(::google::protobuf::Arena* arena) const {
  BuyBattlePassLevelReq* n = new BuyBattlePassLevelReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuyBattlePassLevelReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BuyBattlePassLevelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buy_level_ = 0u;
  _internal_metadata_.Clear();
}

bool BuyBattlePassLevelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BuyBattlePassLevelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 buy_level = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BuyBattlePassLevelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BuyBattlePassLevelReq)
  return false;
#undef DO_
}

void BuyBattlePassLevelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BuyBattlePassLevelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 buy_level = 8;
  if (this->buy_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->buy_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BuyBattlePassLevelReq)
}

::google::protobuf::uint8* BuyBattlePassLevelReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BuyBattlePassLevelReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 buy_level = 8;
  if (this->buy_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->buy_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BuyBattlePassLevelReq)
  return target;
}

size_t BuyBattlePassLevelReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BuyBattlePassLevelReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 buy_level = 8;
  if (this->buy_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buy_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyBattlePassLevelReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BuyBattlePassLevelReq)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyBattlePassLevelReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuyBattlePassLevelReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BuyBattlePassLevelReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BuyBattlePassLevelReq)
    MergeFrom(*source);
  }
}

void BuyBattlePassLevelReq::MergeFrom(const BuyBattlePassLevelReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BuyBattlePassLevelReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buy_level() != 0) {
    set_buy_level(from.buy_level());
  }
}

void BuyBattlePassLevelReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BuyBattlePassLevelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBattlePassLevelReq::CopyFrom(const BuyBattlePassLevelReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BuyBattlePassLevelReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBattlePassLevelReq::IsInitialized() const {
  return true;
}

void BuyBattlePassLevelReq::Swap(BuyBattlePassLevelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuyBattlePassLevelReq::InternalSwap(BuyBattlePassLevelReq* other) {
  using std::swap;
  swap(buy_level_, other->buy_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuyBattlePassLevelReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuyBattlePassLevelReq

// uint32 buy_level = 8;
void BuyBattlePassLevelReq::clear_buy_level() {
  buy_level_ = 0u;
}
::google::protobuf::uint32 BuyBattlePassLevelReq::buy_level() const {
  // @@protoc_insertion_point(field_get:proto.BuyBattlePassLevelReq.buy_level)
  return buy_level_;
}
void BuyBattlePassLevelReq::set_buy_level(::google::protobuf::uint32 value) {
  
  buy_level_ = value;
  // @@protoc_insertion_point(field_set:proto.BuyBattlePassLevelReq.buy_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuyBattlePassLevelRsp::kRetcodeFieldNumber;
const int BuyBattlePassLevelRsp::kBuyLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuyBattlePassLevelRsp::BuyBattlePassLevelRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.BuyBattlePassLevelRsp)
}
BuyBattlePassLevelRsp::BuyBattlePassLevelRsp(const BuyBattlePassLevelRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&buy_level_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(buy_level_));
  // @@protoc_insertion_point(copy_constructor:proto.BuyBattlePassLevelRsp)
}

void BuyBattlePassLevelRsp::SharedCtor() {
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_level_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(buy_level_));
  _cached_size_ = 0;
}

BuyBattlePassLevelRsp::~BuyBattlePassLevelRsp() {
  // @@protoc_insertion_point(destructor:proto.BuyBattlePassLevelRsp)
  SharedDtor();
}

void BuyBattlePassLevelRsp::SharedDtor() {
}

void BuyBattlePassLevelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyBattlePassLevelRsp::descriptor() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BuyBattlePassLevelRsp& BuyBattlePassLevelRsp::default_instance() {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::InitDefaults();
  return *internal_default_instance();
}

BuyBattlePassLevelRsp* BuyBattlePassLevelRsp::New(::google::protobuf::Arena* arena) const {
  BuyBattlePassLevelRsp* n = new BuyBattlePassLevelRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuyBattlePassLevelRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.BuyBattlePassLevelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&buy_level_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(buy_level_));
  _internal_metadata_.Clear();
}

bool BuyBattlePassLevelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.BuyBattlePassLevelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 buy_level = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.BuyBattlePassLevelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.BuyBattlePassLevelRsp)
  return false;
#undef DO_
}

void BuyBattlePassLevelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.BuyBattlePassLevelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->retcode(), output);
  }

  // uint32 buy_level = 13;
  if (this->buy_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->buy_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.BuyBattlePassLevelRsp)
}

::google::protobuf::uint8* BuyBattlePassLevelRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.BuyBattlePassLevelRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 5;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->retcode(), target);
  }

  // uint32 buy_level = 13;
  if (this->buy_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->buy_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.BuyBattlePassLevelRsp)
  return target;
}

size_t BuyBattlePassLevelRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.BuyBattlePassLevelRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 retcode = 5;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 buy_level = 13;
  if (this->buy_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->buy_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyBattlePassLevelRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.BuyBattlePassLevelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const BuyBattlePassLevelRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BuyBattlePassLevelRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.BuyBattlePassLevelRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.BuyBattlePassLevelRsp)
    MergeFrom(*source);
  }
}

void BuyBattlePassLevelRsp::MergeFrom(const BuyBattlePassLevelRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.BuyBattlePassLevelRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.buy_level() != 0) {
    set_buy_level(from.buy_level());
  }
}

void BuyBattlePassLevelRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.BuyBattlePassLevelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyBattlePassLevelRsp::CopyFrom(const BuyBattlePassLevelRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.BuyBattlePassLevelRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyBattlePassLevelRsp::IsInitialized() const {
  return true;
}

void BuyBattlePassLevelRsp::Swap(BuyBattlePassLevelRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuyBattlePassLevelRsp::InternalSwap(BuyBattlePassLevelRsp* other) {
  using std::swap;
  swap(retcode_, other->retcode_);
  swap(buy_level_, other->buy_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuyBattlePassLevelRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fbattle_5fpass_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuyBattlePassLevelRsp

// int32 retcode = 5;
void BuyBattlePassLevelRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 BuyBattlePassLevelRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.BuyBattlePassLevelRsp.retcode)
  return retcode_;
}
void BuyBattlePassLevelRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.BuyBattlePassLevelRsp.retcode)
}

// uint32 buy_level = 13;
void BuyBattlePassLevelRsp::clear_buy_level() {
  buy_level_ = 0u;
}
::google::protobuf::uint32 BuyBattlePassLevelRsp::buy_level() const {
  // @@protoc_insertion_point(field_get:proto.BuyBattlePassLevelRsp.buy_level)
  return buy_level_;
}
void BuyBattlePassLevelRsp::set_buy_level(::google::protobuf::uint32 value) {
  
  buy_level_ = value;
  // @@protoc_insertion_point(field_set:proto.BuyBattlePassLevelRsp.buy_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
