// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd/cmd_hunting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd/cmd_hunting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
class HuntingPairDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingPair>
     _instance;
} _HuntingPair_default_instance_;
class TakeHuntingOfferReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeHuntingOfferReq>
     _instance;
} _TakeHuntingOfferReq_default_instance_;
class TakeHuntingOfferRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TakeHuntingOfferRsp>
     _instance;
} _TakeHuntingOfferRsp_default_instance_;
class HuntingOfferDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingOfferData>
     _instance;
} _HuntingOfferData_default_instance_;
class GetCityHuntingOfferReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetCityHuntingOfferReq>
     _instance;
} _GetCityHuntingOfferReq_default_instance_;
class GetCityHuntingOfferRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetCityHuntingOfferRsp>
     _instance;
} _GetCityHuntingOfferRsp_default_instance_;
class GetHuntingOfferRewardReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetHuntingOfferRewardReq>
     _instance;
} _GetHuntingOfferRewardReq_default_instance_;
class GetHuntingOfferRewardRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetHuntingOfferRewardRsp>
     _instance;
} _GetHuntingOfferRewardRsp_default_instance_;
class HuntingStartNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingStartNotify>
     _instance;
} _HuntingStartNotify_default_instance_;
class HuntingRevealClueNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingRevealClueNotify>
     _instance;
} _HuntingRevealClueNotify_default_instance_;
class HuntingRevealFinalNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingRevealFinalNotify>
     _instance;
} _HuntingRevealFinalNotify_default_instance_;
class HuntingSuccessNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingSuccessNotify>
     _instance;
} _HuntingSuccessNotify_default_instance_;
class HuntingFailNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingFailNotify>
     _instance;
} _HuntingFailNotify_default_instance_;
class HuntingOngoingNotifyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingOngoingNotify>
     _instance;
} _HuntingOngoingNotify_default_instance_;
class HuntingGiveUpReqDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingGiveUpReq>
     _instance;
} _HuntingGiveUpReq_default_instance_;
class HuntingGiveUpRspDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HuntingGiveUpRsp>
     _instance;
} _HuntingGiveUpRsp_default_instance_;

namespace protobuf_cmd_2fcmd_5fhunting_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[16];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingPair, refresh_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingPair, monster_config_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHuntingOfferReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHuntingOfferReq, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHuntingOfferReq, city_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHuntingOfferRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHuntingOfferRsp, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHuntingOfferRsp, city_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TakeHuntingOfferRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOfferData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOfferData, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOfferData, city_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOfferData, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferReq, city_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferRsp, hunting_offer_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferRsp, city_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferRsp, ongoing_hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferRsp, cur_week_finished_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCityHuntingOfferRsp, next_refresh_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuntingOfferRewardReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuntingOfferRewardReq, city_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuntingOfferRewardReq, hunting_pair_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuntingOfferRewardRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuntingOfferRewardRsp, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuntingOfferRewardRsp, city_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHuntingOfferRewardRsp, retcode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingStartNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingStartNotify, clue_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingStartNotify, fail_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingStartNotify, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingStartNotify, is_final_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealClueNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealClueNotify, finish_clue_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealClueNotify, clue_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealClueNotify, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealClueNotify, finished_group_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealFinalNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealFinalNotify, finished_group_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealFinalNotify, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingRevealFinalNotify, final_position_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingSuccessNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingSuccessNotify, hunting_pair_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingFailNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingFailNotify, hunting_pair_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOngoingNotify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOngoingNotify, hunting_pair_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOngoingNotify, is_started_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOngoingNotify, next_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOngoingNotify, finish_clue_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOngoingNotify, is_final_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingOngoingNotify, fail_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingGiveUpReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingGiveUpReq, hunting_pair_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingGiveUpRsp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingGiveUpRsp, retcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HuntingGiveUpRsp, hunting_pair_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(HuntingPair)},
  { 7, -1, sizeof(TakeHuntingOfferReq)},
  { 14, -1, sizeof(TakeHuntingOfferRsp)},
  { 22, -1, sizeof(HuntingOfferData)},
  { 30, -1, sizeof(GetCityHuntingOfferReq)},
  { 36, -1, sizeof(GetCityHuntingOfferRsp)},
  { 47, -1, sizeof(GetHuntingOfferRewardReq)},
  { 54, -1, sizeof(GetHuntingOfferRewardRsp)},
  { 62, -1, sizeof(HuntingStartNotify)},
  { 71, -1, sizeof(HuntingRevealClueNotify)},
  { 80, -1, sizeof(HuntingRevealFinalNotify)},
  { 88, -1, sizeof(HuntingSuccessNotify)},
  { 94, -1, sizeof(HuntingFailNotify)},
  { 100, -1, sizeof(HuntingOngoingNotify)},
  { 111, -1, sizeof(HuntingGiveUpReq)},
  { 117, -1, sizeof(HuntingGiveUpRsp)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeHuntingOfferReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TakeHuntingOfferRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingOfferData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCityHuntingOfferReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetCityHuntingOfferRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetHuntingOfferRewardReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetHuntingOfferRewardRsp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingStartNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingRevealClueNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingRevealFinalNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingSuccessNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingFailNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingOngoingNotify_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingGiveUpReq_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HuntingGiveUpRsp_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "cmd/cmd_hunting.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 16);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_define_2eproto::InitDefaults();
  _HuntingPair_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingPair_default_instance_);_TakeHuntingOfferReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeHuntingOfferReq_default_instance_);_TakeHuntingOfferRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TakeHuntingOfferRsp_default_instance_);_HuntingOfferData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingOfferData_default_instance_);_GetCityHuntingOfferReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetCityHuntingOfferReq_default_instance_);_GetCityHuntingOfferRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetCityHuntingOfferRsp_default_instance_);_GetHuntingOfferRewardReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetHuntingOfferRewardReq_default_instance_);_GetHuntingOfferRewardRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetHuntingOfferRewardRsp_default_instance_);_HuntingStartNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingStartNotify_default_instance_);_HuntingRevealClueNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingRevealClueNotify_default_instance_);_HuntingRevealFinalNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingRevealFinalNotify_default_instance_);_HuntingSuccessNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingSuccessNotify_default_instance_);_HuntingFailNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingFailNotify_default_instance_);_HuntingOngoingNotify_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingOngoingNotify_default_instance_);_HuntingGiveUpReq_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingGiveUpReq_default_instance_);_HuntingGiveUpRsp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HuntingGiveUpRsp_default_instance_);_TakeHuntingOfferReq_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _TakeHuntingOfferRsp_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingOfferData_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _GetCityHuntingOfferRsp_default_instance_._instance.get_mutable()->ongoing_hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _GetHuntingOfferRewardReq_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _GetHuntingOfferRewardRsp_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingStartNotify_default_instance_._instance.get_mutable()->clue_position_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _HuntingStartNotify_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingRevealClueNotify_default_instance_._instance.get_mutable()->clue_position_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _HuntingRevealClueNotify_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingRevealFinalNotify_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingRevealFinalNotify_default_instance_._instance.get_mutable()->final_position_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _HuntingSuccessNotify_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingFailNotify_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingOngoingNotify_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingOngoingNotify_default_instance_._instance.get_mutable()->next_position_ = const_cast< ::proto::Vector*>(
      ::proto::Vector::internal_default_instance());
  _HuntingGiveUpReq_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
  _HuntingGiveUpRsp_default_instance_._instance.get_mutable()->hunting_pair_ = const_cast< ::proto::HuntingPair*>(
      ::proto::HuntingPair::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025cmd/cmd_hunting.proto\022\005proto\032\014define.p"
      "roto\"<\n\013HuntingPair\022\022\n\nrefresh_id\030\t \001(\r\022"
      "\031\n\021monster_config_id\030\004 \001(\r\"P\n\023TakeHuntin"
      "gOfferReq\022(\n\014hunting_pair\030\016 \001(\0132\022.proto."
      "HuntingPair\022\017\n\007city_id\030\004 \001(\r\"a\n\023TakeHunt"
      "ingOfferRsp\022(\n\014hunting_pair\030\r \001(\0132\022.prot"
      "o.HuntingPair\022\017\n\007city_id\030\016 \001(\r\022\017\n\007retcod"
      "e\030\003 \001(\005\"v\n\020HuntingOfferData\022(\n\014hunting_p"
      "air\030\004 \001(\0132\022.proto.HuntingPair\022\017\n\007city_id"
      "\030\010 \001(\r\022\'\n\005state\030\001 \001(\0162\030.proto.HuntingOff"
      "erState\")\n\026GetCityHuntingOfferReq\022\017\n\007cit"
      "y_id\030\t \001(\r\"\335\001\n\026GetCityHuntingOfferRsp\022\017\n"
      "\007retcode\030\t \001(\005\0223\n\022hunting_offer_list\030\r \003"
      "(\0132\027.proto.HuntingOfferData\022\017\n\007city_id\030\002"
      " \001(\r\0220\n\024ongoing_hunting_pair\030\010 \001(\0132\022.pro"
      "to.HuntingPair\022\037\n\027cur_week_finished_coun"
      "t\030\001 \001(\r\022\031\n\021next_refresh_time\030\004 \001(\r\"U\n\030Ge"
      "tHuntingOfferRewardReq\022\017\n\007city_id\030\006 \001(\r\022"
      "(\n\014hunting_pair\030\004 \001(\0132\022.proto.HuntingPai"
      "r\"f\n\030GetHuntingOfferRewardRsp\022(\n\014hunting"
      "_pair\030\016 \001(\0132\022.proto.HuntingPair\022\017\n\007city_"
      "id\030\003 \001(\r\022\017\n\007retcode\030\014 \001(\005\"\211\001\n\022HuntingSta"
      "rtNotify\022$\n\rclue_position\030\004 \001(\0132\r.proto."
      "Vector\022\021\n\tfail_time\030\017 \001(\r\022(\n\014hunting_pai"
      "r\030\003 \001(\0132\022.proto.HuntingPair\022\020\n\010is_final\030"
      "\010 \001(\010\"\237\001\n\027HuntingRevealClueNotify\022\031\n\021fin"
      "ish_clue_count\030\005 \001(\r\022$\n\rclue_position\030\004 "
      "\001(\0132\r.proto.Vector\022(\n\014hunting_pair\030\014 \001(\013"
      "2\022.proto.HuntingPair\022\031\n\021finished_group_i"
      "d\030\007 \001(\r\"\206\001\n\030HuntingRevealFinalNotify\022\031\n\021"
      "finished_group_id\030\005 \001(\r\022(\n\014hunting_pair\030"
      "\013 \001(\0132\022.proto.HuntingPair\022%\n\016final_posit"
      "ion\030\002 \001(\0132\r.proto.Vector\"@\n\024HuntingSucce"
      "ssNotify\022(\n\014hunting_pair\030\004 \001(\0132\022.proto.H"
      "untingPair\"=\n\021HuntingFailNotify\022(\n\014hunti"
      "ng_pair\030\014 \001(\0132\022.proto.HuntingPair\"\272\001\n\024Hu"
      "ntingOngoingNotify\022(\n\014hunting_pair\030\017 \001(\013"
      "2\022.proto.HuntingPair\022\022\n\nis_started\030\010 \001(\010"
      "\022$\n\rnext_position\030\003 \001(\0132\r.proto.Vector\022\031"
      "\n\021finish_clue_count\030\n \001(\r\022\020\n\010is_final\030\016 "
      "\001(\010\022\021\n\tfail_time\030\007 \001(\r\"<\n\020HuntingGiveUpR"
      "eq\022(\n\014hunting_pair\030\001 \001(\0132\022.proto.Hunting"
      "Pair\"M\n\020HuntingGiveUpRsp\022\017\n\007retcode\030\003 \001("
      "\005\022(\n\014hunting_pair\030\004 \001(\0132\022.proto.HuntingP"
      "airB(Z&github.com/teyvat-helper/hk4e-pro"
      "to/pbb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1813);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd/cmd_hunting.proto", &protobuf_RegisterTypes);
  ::proto::protobuf_define_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_cmd_2fcmd_5fhunting_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingPair::kRefreshIdFieldNumber;
const int HuntingPair::kMonsterConfigIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingPair::HuntingPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingPair)
}
HuntingPair::HuntingPair(const HuntingPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&monster_config_id_, &from.monster_config_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&refresh_id_) -
    reinterpret_cast<char*>(&monster_config_id_)) + sizeof(refresh_id_));
  // @@protoc_insertion_point(copy_constructor:proto.HuntingPair)
}

void HuntingPair::SharedCtor() {
  ::memset(&monster_config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_id_) -
      reinterpret_cast<char*>(&monster_config_id_)) + sizeof(refresh_id_));
  _cached_size_ = 0;
}

HuntingPair::~HuntingPair() {
  // @@protoc_insertion_point(destructor:proto.HuntingPair)
  SharedDtor();
}

void HuntingPair::SharedDtor() {
}

void HuntingPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingPair::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingPair& HuntingPair::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingPair* HuntingPair::New(::google::protobuf::Arena* arena) const {
  HuntingPair* n = new HuntingPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingPair::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monster_config_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refresh_id_) -
      reinterpret_cast<char*>(&monster_config_id_)) + sizeof(refresh_id_));
  _internal_metadata_.Clear();
}

bool HuntingPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 monster_config_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_config_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 refresh_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingPair)
  return false;
#undef DO_
}

void HuntingPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_config_id = 4;
  if (this->monster_config_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->monster_config_id(), output);
  }

  // uint32 refresh_id = 9;
  if (this->refresh_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->refresh_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingPair)
}

::google::protobuf::uint8* HuntingPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 monster_config_id = 4;
  if (this->monster_config_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->monster_config_id(), target);
  }

  // uint32 refresh_id = 9;
  if (this->refresh_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->refresh_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingPair)
  return target;
}

size_t HuntingPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 monster_config_id = 4;
  if (this->monster_config_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->monster_config_id());
  }

  // uint32 refresh_id = 9;
  if (this->refresh_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->refresh_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingPair)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingPair)
    MergeFrom(*source);
  }
}

void HuntingPair::MergeFrom(const HuntingPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monster_config_id() != 0) {
    set_monster_config_id(from.monster_config_id());
  }
  if (from.refresh_id() != 0) {
    set_refresh_id(from.refresh_id());
  }
}

void HuntingPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingPair::CopyFrom(const HuntingPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingPair::IsInitialized() const {
  return true;
}

void HuntingPair::Swap(HuntingPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingPair::InternalSwap(HuntingPair* other) {
  using std::swap;
  swap(monster_config_id_, other->monster_config_id_);
  swap(refresh_id_, other->refresh_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingPair::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingPair

// uint32 refresh_id = 9;
void HuntingPair::clear_refresh_id() {
  refresh_id_ = 0u;
}
::google::protobuf::uint32 HuntingPair::refresh_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingPair.refresh_id)
  return refresh_id_;
}
void HuntingPair::set_refresh_id(::google::protobuf::uint32 value) {
  
  refresh_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingPair.refresh_id)
}

// uint32 monster_config_id = 4;
void HuntingPair::clear_monster_config_id() {
  monster_config_id_ = 0u;
}
::google::protobuf::uint32 HuntingPair::monster_config_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingPair.monster_config_id)
  return monster_config_id_;
}
void HuntingPair::set_monster_config_id(::google::protobuf::uint32 value) {
  
  monster_config_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingPair.monster_config_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeHuntingOfferReq::kHuntingPairFieldNumber;
const int TakeHuntingOfferReq::kCityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeHuntingOfferReq::TakeHuntingOfferReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeHuntingOfferReq)
}
TakeHuntingOfferReq::TakeHuntingOfferReq(const TakeHuntingOfferReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  city_id_ = from.city_id_;
  // @@protoc_insertion_point(copy_constructor:proto.TakeHuntingOfferReq)
}

void TakeHuntingOfferReq::SharedCtor() {
  ::memset(&hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&hunting_pair_)) + sizeof(city_id_));
  _cached_size_ = 0;
}

TakeHuntingOfferReq::~TakeHuntingOfferReq() {
  // @@protoc_insertion_point(destructor:proto.TakeHuntingOfferReq)
  SharedDtor();
}

void TakeHuntingOfferReq::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void TakeHuntingOfferReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeHuntingOfferReq::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeHuntingOfferReq& TakeHuntingOfferReq::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeHuntingOfferReq* TakeHuntingOfferReq::New(::google::protobuf::Arena* arena) const {
  TakeHuntingOfferReq* n = new TakeHuntingOfferReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeHuntingOfferReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeHuntingOfferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  city_id_ = 0u;
  _internal_metadata_.Clear();
}

bool TakeHuntingOfferReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeHuntingOfferReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 city_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeHuntingOfferReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeHuntingOfferReq)
  return false;
#undef DO_
}

void TakeHuntingOfferReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeHuntingOfferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 city_id = 4;
  if (this->city_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->city_id(), output);
  }

  // .proto.HuntingPair hunting_pair = 14;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeHuntingOfferReq)
}

::google::protobuf::uint8* TakeHuntingOfferReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeHuntingOfferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 city_id = 4;
  if (this->city_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->city_id(), target);
  }

  // .proto.HuntingPair hunting_pair = 14;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeHuntingOfferReq)
  return target;
}

size_t TakeHuntingOfferReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeHuntingOfferReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 14;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // uint32 city_id = 4;
  if (this->city_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeHuntingOfferReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeHuntingOfferReq)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeHuntingOfferReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeHuntingOfferReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeHuntingOfferReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeHuntingOfferReq)
    MergeFrom(*source);
  }
}

void TakeHuntingOfferReq::MergeFrom(const TakeHuntingOfferReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeHuntingOfferReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.city_id() != 0) {
    set_city_id(from.city_id());
  }
}

void TakeHuntingOfferReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeHuntingOfferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeHuntingOfferReq::CopyFrom(const TakeHuntingOfferReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeHuntingOfferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeHuntingOfferReq::IsInitialized() const {
  return true;
}

void TakeHuntingOfferReq::Swap(TakeHuntingOfferReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeHuntingOfferReq::InternalSwap(TakeHuntingOfferReq* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  swap(city_id_, other->city_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeHuntingOfferReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeHuntingOfferReq

// .proto.HuntingPair hunting_pair = 14;
bool TakeHuntingOfferReq::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void TakeHuntingOfferReq::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& TakeHuntingOfferReq::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferReq.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* TakeHuntingOfferReq::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.TakeHuntingOfferReq.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* TakeHuntingOfferReq::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.TakeHuntingOfferReq.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void TakeHuntingOfferReq::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TakeHuntingOfferReq.hunting_pair)
}

// uint32 city_id = 4;
void TakeHuntingOfferReq::clear_city_id() {
  city_id_ = 0u;
}
::google::protobuf::uint32 TakeHuntingOfferReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferReq.city_id)
  return city_id_;
}
void TakeHuntingOfferReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeHuntingOfferReq.city_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TakeHuntingOfferRsp::kHuntingPairFieldNumber;
const int TakeHuntingOfferRsp::kCityIdFieldNumber;
const int TakeHuntingOfferRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TakeHuntingOfferRsp::TakeHuntingOfferRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.TakeHuntingOfferRsp)
}
TakeHuntingOfferRsp::TakeHuntingOfferRsp(const TakeHuntingOfferRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  ::memcpy(&retcode_, &from.retcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&city_id_) -
    reinterpret_cast<char*>(&retcode_)) + sizeof(city_id_));
  // @@protoc_insertion_point(copy_constructor:proto.TakeHuntingOfferRsp)
}

void TakeHuntingOfferRsp::SharedCtor() {
  ::memset(&hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&hunting_pair_)) + sizeof(city_id_));
  _cached_size_ = 0;
}

TakeHuntingOfferRsp::~TakeHuntingOfferRsp() {
  // @@protoc_insertion_point(destructor:proto.TakeHuntingOfferRsp)
  SharedDtor();
}

void TakeHuntingOfferRsp::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void TakeHuntingOfferRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TakeHuntingOfferRsp::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TakeHuntingOfferRsp& TakeHuntingOfferRsp::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

TakeHuntingOfferRsp* TakeHuntingOfferRsp::New(::google::protobuf::Arena* arena) const {
  TakeHuntingOfferRsp* n = new TakeHuntingOfferRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TakeHuntingOfferRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.TakeHuntingOfferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  ::memset(&retcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&retcode_)) + sizeof(city_id_));
  _internal_metadata_.Clear();
}

bool TakeHuntingOfferRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.TakeHuntingOfferRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 city_id = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.TakeHuntingOfferRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.TakeHuntingOfferRsp)
  return false;
#undef DO_
}

void TakeHuntingOfferRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.TakeHuntingOfferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  // .proto.HuntingPair hunting_pair = 13;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->hunting_pair_, output);
  }

  // uint32 city_id = 14;
  if (this->city_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->city_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.TakeHuntingOfferRsp)
}

::google::protobuf::uint8* TakeHuntingOfferRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.TakeHuntingOfferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  // .proto.HuntingPair hunting_pair = 13;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->hunting_pair_, deterministic, target);
  }

  // uint32 city_id = 14;
  if (this->city_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->city_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.TakeHuntingOfferRsp)
  return target;
}

size_t TakeHuntingOfferRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.TakeHuntingOfferRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 13;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  // uint32 city_id = 14;
  if (this->city_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TakeHuntingOfferRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.TakeHuntingOfferRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const TakeHuntingOfferRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TakeHuntingOfferRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.TakeHuntingOfferRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.TakeHuntingOfferRsp)
    MergeFrom(*source);
  }
}

void TakeHuntingOfferRsp::MergeFrom(const TakeHuntingOfferRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.TakeHuntingOfferRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
  if (from.city_id() != 0) {
    set_city_id(from.city_id());
  }
}

void TakeHuntingOfferRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.TakeHuntingOfferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TakeHuntingOfferRsp::CopyFrom(const TakeHuntingOfferRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.TakeHuntingOfferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TakeHuntingOfferRsp::IsInitialized() const {
  return true;
}

void TakeHuntingOfferRsp::Swap(TakeHuntingOfferRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TakeHuntingOfferRsp::InternalSwap(TakeHuntingOfferRsp* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  swap(retcode_, other->retcode_);
  swap(city_id_, other->city_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TakeHuntingOfferRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TakeHuntingOfferRsp

// .proto.HuntingPair hunting_pair = 13;
bool TakeHuntingOfferRsp::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void TakeHuntingOfferRsp::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& TakeHuntingOfferRsp::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferRsp.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* TakeHuntingOfferRsp::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.TakeHuntingOfferRsp.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* TakeHuntingOfferRsp::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.TakeHuntingOfferRsp.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void TakeHuntingOfferRsp::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.TakeHuntingOfferRsp.hunting_pair)
}

// uint32 city_id = 14;
void TakeHuntingOfferRsp::clear_city_id() {
  city_id_ = 0u;
}
::google::protobuf::uint32 TakeHuntingOfferRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferRsp.city_id)
  return city_id_;
}
void TakeHuntingOfferRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeHuntingOfferRsp.city_id)
}

// int32 retcode = 3;
void TakeHuntingOfferRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 TakeHuntingOfferRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.TakeHuntingOfferRsp.retcode)
  return retcode_;
}
void TakeHuntingOfferRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.TakeHuntingOfferRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingOfferData::kHuntingPairFieldNumber;
const int HuntingOfferData::kCityIdFieldNumber;
const int HuntingOfferData::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingOfferData::HuntingOfferData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingOfferData)
}
HuntingOfferData::HuntingOfferData(const HuntingOfferData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&city_id_) -
    reinterpret_cast<char*>(&state_)) + sizeof(city_id_));
  // @@protoc_insertion_point(copy_constructor:proto.HuntingOfferData)
}

void HuntingOfferData::SharedCtor() {
  ::memset(&hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&hunting_pair_)) + sizeof(city_id_));
  _cached_size_ = 0;
}

HuntingOfferData::~HuntingOfferData() {
  // @@protoc_insertion_point(destructor:proto.HuntingOfferData)
  SharedDtor();
}

void HuntingOfferData::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingOfferData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingOfferData::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingOfferData& HuntingOfferData::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingOfferData* HuntingOfferData::New(::google::protobuf::Arena* arena) const {
  HuntingOfferData* n = new HuntingOfferData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingOfferData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingOfferData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&state_)) + sizeof(city_id_));
  _internal_metadata_.Clear();
}

bool HuntingOfferData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingOfferData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HuntingOfferState state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::proto::HuntingOfferState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 city_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingOfferData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingOfferData)
  return false;
#undef DO_
}

void HuntingOfferData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingOfferData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingOfferState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hunting_pair_, output);
  }

  // uint32 city_id = 8;
  if (this->city_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->city_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingOfferData)
}

::google::protobuf::uint8* HuntingOfferData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingOfferData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingOfferState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hunting_pair_, deterministic, target);
  }

  // uint32 city_id = 8;
  if (this->city_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->city_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingOfferData)
  return target;
}

size_t HuntingOfferData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingOfferData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // .proto.HuntingOfferState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // uint32 city_id = 8;
  if (this->city_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingOfferData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingOfferData)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingOfferData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingOfferData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingOfferData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingOfferData)
    MergeFrom(*source);
  }
}

void HuntingOfferData::MergeFrom(const HuntingOfferData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingOfferData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.city_id() != 0) {
    set_city_id(from.city_id());
  }
}

void HuntingOfferData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingOfferData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingOfferData::CopyFrom(const HuntingOfferData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingOfferData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingOfferData::IsInitialized() const {
  return true;
}

void HuntingOfferData::Swap(HuntingOfferData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingOfferData::InternalSwap(HuntingOfferData* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  swap(state_, other->state_);
  swap(city_id_, other->city_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingOfferData::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingOfferData

// .proto.HuntingPair hunting_pair = 4;
bool HuntingOfferData::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingOfferData::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingOfferData::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingOfferData.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingOfferData::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingOfferData.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingOfferData::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingOfferData.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingOfferData::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingOfferData.hunting_pair)
}

// uint32 city_id = 8;
void HuntingOfferData::clear_city_id() {
  city_id_ = 0u;
}
::google::protobuf::uint32 HuntingOfferData::city_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOfferData.city_id)
  return city_id_;
}
void HuntingOfferData::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOfferData.city_id)
}

// .proto.HuntingOfferState state = 1;
void HuntingOfferData::clear_state() {
  state_ = 0;
}
::proto::HuntingOfferState HuntingOfferData::state() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOfferData.state)
  return static_cast< ::proto::HuntingOfferState >(state_);
}
void HuntingOfferData::set_state(::proto::HuntingOfferState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOfferData.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCityHuntingOfferReq::kCityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCityHuntingOfferReq::GetCityHuntingOfferReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetCityHuntingOfferReq)
}
GetCityHuntingOfferReq::GetCityHuntingOfferReq(const GetCityHuntingOfferReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  city_id_ = from.city_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GetCityHuntingOfferReq)
}

void GetCityHuntingOfferReq::SharedCtor() {
  city_id_ = 0u;
  _cached_size_ = 0;
}

GetCityHuntingOfferReq::~GetCityHuntingOfferReq() {
  // @@protoc_insertion_point(destructor:proto.GetCityHuntingOfferReq)
  SharedDtor();
}

void GetCityHuntingOfferReq::SharedDtor() {
}

void GetCityHuntingOfferReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCityHuntingOfferReq::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCityHuntingOfferReq& GetCityHuntingOfferReq::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCityHuntingOfferReq* GetCityHuntingOfferReq::New(::google::protobuf::Arena* arena) const {
  GetCityHuntingOfferReq* n = new GetCityHuntingOfferReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCityHuntingOfferReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetCityHuntingOfferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  city_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GetCityHuntingOfferReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetCityHuntingOfferReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 city_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetCityHuntingOfferReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetCityHuntingOfferReq)
  return false;
#undef DO_
}

void GetCityHuntingOfferReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetCityHuntingOfferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 city_id = 9;
  if (this->city_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->city_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetCityHuntingOfferReq)
}

::google::protobuf::uint8* GetCityHuntingOfferReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetCityHuntingOfferReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 city_id = 9;
  if (this->city_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->city_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetCityHuntingOfferReq)
  return target;
}

size_t GetCityHuntingOfferReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetCityHuntingOfferReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 city_id = 9;
  if (this->city_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCityHuntingOfferReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetCityHuntingOfferReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCityHuntingOfferReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCityHuntingOfferReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetCityHuntingOfferReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetCityHuntingOfferReq)
    MergeFrom(*source);
  }
}

void GetCityHuntingOfferReq::MergeFrom(const GetCityHuntingOfferReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetCityHuntingOfferReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.city_id() != 0) {
    set_city_id(from.city_id());
  }
}

void GetCityHuntingOfferReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetCityHuntingOfferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCityHuntingOfferReq::CopyFrom(const GetCityHuntingOfferReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetCityHuntingOfferReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCityHuntingOfferReq::IsInitialized() const {
  return true;
}

void GetCityHuntingOfferReq::Swap(GetCityHuntingOfferReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCityHuntingOfferReq::InternalSwap(GetCityHuntingOfferReq* other) {
  using std::swap;
  swap(city_id_, other->city_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCityHuntingOfferReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCityHuntingOfferReq

// uint32 city_id = 9;
void GetCityHuntingOfferReq::clear_city_id() {
  city_id_ = 0u;
}
::google::protobuf::uint32 GetCityHuntingOfferReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferReq.city_id)
  return city_id_;
}
void GetCityHuntingOfferReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferReq.city_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetCityHuntingOfferRsp::kRetcodeFieldNumber;
const int GetCityHuntingOfferRsp::kHuntingOfferListFieldNumber;
const int GetCityHuntingOfferRsp::kCityIdFieldNumber;
const int GetCityHuntingOfferRsp::kOngoingHuntingPairFieldNumber;
const int GetCityHuntingOfferRsp::kCurWeekFinishedCountFieldNumber;
const int GetCityHuntingOfferRsp::kNextRefreshTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetCityHuntingOfferRsp::GetCityHuntingOfferRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetCityHuntingOfferRsp)
}
GetCityHuntingOfferRsp::GetCityHuntingOfferRsp(const GetCityHuntingOfferRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hunting_offer_list_(from.hunting_offer_list_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ongoing_hunting_pair()) {
    ongoing_hunting_pair_ = new ::proto::HuntingPair(*from.ongoing_hunting_pair_);
  } else {
    ongoing_hunting_pair_ = NULL;
  }
  ::memcpy(&cur_week_finished_count_, &from.cur_week_finished_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&cur_week_finished_count_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GetCityHuntingOfferRsp)
}

void GetCityHuntingOfferRsp::SharedCtor() {
  ::memset(&ongoing_hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&ongoing_hunting_pair_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GetCityHuntingOfferRsp::~GetCityHuntingOfferRsp() {
  // @@protoc_insertion_point(destructor:proto.GetCityHuntingOfferRsp)
  SharedDtor();
}

void GetCityHuntingOfferRsp::SharedDtor() {
  if (this != internal_default_instance()) delete ongoing_hunting_pair_;
}

void GetCityHuntingOfferRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCityHuntingOfferRsp::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetCityHuntingOfferRsp& GetCityHuntingOfferRsp::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetCityHuntingOfferRsp* GetCityHuntingOfferRsp::New(::google::protobuf::Arena* arena) const {
  GetCityHuntingOfferRsp* n = new GetCityHuntingOfferRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetCityHuntingOfferRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetCityHuntingOfferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hunting_offer_list_.Clear();
  if (GetArenaNoVirtual() == NULL && ongoing_hunting_pair_ != NULL) {
    delete ongoing_hunting_pair_;
  }
  ongoing_hunting_pair_ = NULL;
  ::memset(&cur_week_finished_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&cur_week_finished_count_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GetCityHuntingOfferRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetCityHuntingOfferRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 cur_week_finished_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_week_finished_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 city_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 next_refresh_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &next_refresh_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair ongoing_hunting_pair = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ongoing_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.HuntingOfferData hunting_offer_list = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hunting_offer_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetCityHuntingOfferRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetCityHuntingOfferRsp)
  return false;
#undef DO_
}

void GetCityHuntingOfferRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetCityHuntingOfferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_week_finished_count = 1;
  if (this->cur_week_finished_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_week_finished_count(), output);
  }

  // uint32 city_id = 2;
  if (this->city_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->city_id(), output);
  }

  // uint32 next_refresh_time = 4;
  if (this->next_refresh_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->next_refresh_time(), output);
  }

  // .proto.HuntingPair ongoing_hunting_pair = 8;
  if (this->has_ongoing_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ongoing_hunting_pair_, output);
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->retcode(), output);
  }

  // repeated .proto.HuntingOfferData hunting_offer_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hunting_offer_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->hunting_offer_list(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetCityHuntingOfferRsp)
}

::google::protobuf::uint8* GetCityHuntingOfferRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetCityHuntingOfferRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 cur_week_finished_count = 1;
  if (this->cur_week_finished_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_week_finished_count(), target);
  }

  // uint32 city_id = 2;
  if (this->city_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->city_id(), target);
  }

  // uint32 next_refresh_time = 4;
  if (this->next_refresh_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->next_refresh_time(), target);
  }

  // .proto.HuntingPair ongoing_hunting_pair = 8;
  if (this->has_ongoing_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ongoing_hunting_pair_, deterministic, target);
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->retcode(), target);
  }

  // repeated .proto.HuntingOfferData hunting_offer_list = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hunting_offer_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->hunting_offer_list(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetCityHuntingOfferRsp)
  return target;
}

size_t GetCityHuntingOfferRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetCityHuntingOfferRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .proto.HuntingOfferData hunting_offer_list = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->hunting_offer_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hunting_offer_list(static_cast<int>(i)));
    }
  }

  // .proto.HuntingPair ongoing_hunting_pair = 8;
  if (this->has_ongoing_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ongoing_hunting_pair_);
  }

  // uint32 cur_week_finished_count = 1;
  if (this->cur_week_finished_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cur_week_finished_count());
  }

  // uint32 city_id = 2;
  if (this->city_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city_id());
  }

  // uint32 next_refresh_time = 4;
  if (this->next_refresh_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->next_refresh_time());
  }

  // int32 retcode = 9;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCityHuntingOfferRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetCityHuntingOfferRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCityHuntingOfferRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetCityHuntingOfferRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetCityHuntingOfferRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetCityHuntingOfferRsp)
    MergeFrom(*source);
  }
}

void GetCityHuntingOfferRsp::MergeFrom(const GetCityHuntingOfferRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetCityHuntingOfferRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hunting_offer_list_.MergeFrom(from.hunting_offer_list_);
  if (from.has_ongoing_hunting_pair()) {
    mutable_ongoing_hunting_pair()->::proto::HuntingPair::MergeFrom(from.ongoing_hunting_pair());
  }
  if (from.cur_week_finished_count() != 0) {
    set_cur_week_finished_count(from.cur_week_finished_count());
  }
  if (from.city_id() != 0) {
    set_city_id(from.city_id());
  }
  if (from.next_refresh_time() != 0) {
    set_next_refresh_time(from.next_refresh_time());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetCityHuntingOfferRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetCityHuntingOfferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCityHuntingOfferRsp::CopyFrom(const GetCityHuntingOfferRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetCityHuntingOfferRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCityHuntingOfferRsp::IsInitialized() const {
  return true;
}

void GetCityHuntingOfferRsp::Swap(GetCityHuntingOfferRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetCityHuntingOfferRsp::InternalSwap(GetCityHuntingOfferRsp* other) {
  using std::swap;
  hunting_offer_list_.InternalSwap(&other->hunting_offer_list_);
  swap(ongoing_hunting_pair_, other->ongoing_hunting_pair_);
  swap(cur_week_finished_count_, other->cur_week_finished_count_);
  swap(city_id_, other->city_id_);
  swap(next_refresh_time_, other->next_refresh_time_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetCityHuntingOfferRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetCityHuntingOfferRsp

// int32 retcode = 9;
void GetCityHuntingOfferRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetCityHuntingOfferRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.retcode)
  return retcode_;
}
void GetCityHuntingOfferRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.retcode)
}

// repeated .proto.HuntingOfferData hunting_offer_list = 13;
int GetCityHuntingOfferRsp::hunting_offer_list_size() const {
  return hunting_offer_list_.size();
}
void GetCityHuntingOfferRsp::clear_hunting_offer_list() {
  hunting_offer_list_.Clear();
}
const ::proto::HuntingOfferData& GetCityHuntingOfferRsp::hunting_offer_list(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_.Get(index);
}
::proto::HuntingOfferData* GetCityHuntingOfferRsp::mutable_hunting_offer_list(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_.Mutable(index);
}
::proto::HuntingOfferData* GetCityHuntingOfferRsp::add_hunting_offer_list() {
  // @@protoc_insertion_point(field_add:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::HuntingOfferData >*
GetCityHuntingOfferRsp::mutable_hunting_offer_list() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return &hunting_offer_list_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::HuntingOfferData >&
GetCityHuntingOfferRsp::hunting_offer_list() const {
  // @@protoc_insertion_point(field_list:proto.GetCityHuntingOfferRsp.hunting_offer_list)
  return hunting_offer_list_;
}

// uint32 city_id = 2;
void GetCityHuntingOfferRsp::clear_city_id() {
  city_id_ = 0u;
}
::google::protobuf::uint32 GetCityHuntingOfferRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.city_id)
  return city_id_;
}
void GetCityHuntingOfferRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.city_id)
}

// .proto.HuntingPair ongoing_hunting_pair = 8;
bool GetCityHuntingOfferRsp::has_ongoing_hunting_pair() const {
  return this != internal_default_instance() && ongoing_hunting_pair_ != NULL;
}
void GetCityHuntingOfferRsp::clear_ongoing_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && ongoing_hunting_pair_ != NULL) delete ongoing_hunting_pair_;
  ongoing_hunting_pair_ = NULL;
}
const ::proto::HuntingPair& GetCityHuntingOfferRsp::ongoing_hunting_pair() const {
  const ::proto::HuntingPair* p = ongoing_hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* GetCityHuntingOfferRsp::mutable_ongoing_hunting_pair() {
  
  if (ongoing_hunting_pair_ == NULL) {
    ongoing_hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
  return ongoing_hunting_pair_;
}
::proto::HuntingPair* GetCityHuntingOfferRsp::release_ongoing_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
  
  ::proto::HuntingPair* temp = ongoing_hunting_pair_;
  ongoing_hunting_pair_ = NULL;
  return temp;
}
void GetCityHuntingOfferRsp::set_allocated_ongoing_hunting_pair(::proto::HuntingPair* ongoing_hunting_pair) {
  delete ongoing_hunting_pair_;
  ongoing_hunting_pair_ = ongoing_hunting_pair;
  if (ongoing_hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetCityHuntingOfferRsp.ongoing_hunting_pair)
}

// uint32 cur_week_finished_count = 1;
void GetCityHuntingOfferRsp::clear_cur_week_finished_count() {
  cur_week_finished_count_ = 0u;
}
::google::protobuf::uint32 GetCityHuntingOfferRsp::cur_week_finished_count() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.cur_week_finished_count)
  return cur_week_finished_count_;
}
void GetCityHuntingOfferRsp::set_cur_week_finished_count(::google::protobuf::uint32 value) {
  
  cur_week_finished_count_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.cur_week_finished_count)
}

// uint32 next_refresh_time = 4;
void GetCityHuntingOfferRsp::clear_next_refresh_time() {
  next_refresh_time_ = 0u;
}
::google::protobuf::uint32 GetCityHuntingOfferRsp::next_refresh_time() const {
  // @@protoc_insertion_point(field_get:proto.GetCityHuntingOfferRsp.next_refresh_time)
  return next_refresh_time_;
}
void GetCityHuntingOfferRsp::set_next_refresh_time(::google::protobuf::uint32 value) {
  
  next_refresh_time_ = value;
  // @@protoc_insertion_point(field_set:proto.GetCityHuntingOfferRsp.next_refresh_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHuntingOfferRewardReq::kCityIdFieldNumber;
const int GetHuntingOfferRewardReq::kHuntingPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHuntingOfferRewardReq::GetHuntingOfferRewardReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetHuntingOfferRewardReq)
}
GetHuntingOfferRewardReq::GetHuntingOfferRewardReq(const GetHuntingOfferRewardReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  city_id_ = from.city_id_;
  // @@protoc_insertion_point(copy_constructor:proto.GetHuntingOfferRewardReq)
}

void GetHuntingOfferRewardReq::SharedCtor() {
  ::memset(&hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_id_) -
      reinterpret_cast<char*>(&hunting_pair_)) + sizeof(city_id_));
  _cached_size_ = 0;
}

GetHuntingOfferRewardReq::~GetHuntingOfferRewardReq() {
  // @@protoc_insertion_point(destructor:proto.GetHuntingOfferRewardReq)
  SharedDtor();
}

void GetHuntingOfferRewardReq::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void GetHuntingOfferRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHuntingOfferRewardReq::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetHuntingOfferRewardReq& GetHuntingOfferRewardReq::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetHuntingOfferRewardReq* GetHuntingOfferRewardReq::New(::google::protobuf::Arena* arena) const {
  GetHuntingOfferRewardReq* n = new GetHuntingOfferRewardReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetHuntingOfferRewardReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetHuntingOfferRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  city_id_ = 0u;
  _internal_metadata_.Clear();
}

bool GetHuntingOfferRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetHuntingOfferRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HuntingPair hunting_pair = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 city_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetHuntingOfferRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetHuntingOfferRewardReq)
  return false;
#undef DO_
}

void GetHuntingOfferRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetHuntingOfferRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hunting_pair_, output);
  }

  // uint32 city_id = 6;
  if (this->city_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->city_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetHuntingOfferRewardReq)
}

::google::protobuf::uint8* GetHuntingOfferRewardReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetHuntingOfferRewardReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hunting_pair_, deterministic, target);
  }

  // uint32 city_id = 6;
  if (this->city_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->city_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetHuntingOfferRewardReq)
  return target;
}

size_t GetHuntingOfferRewardReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetHuntingOfferRewardReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // uint32 city_id = 6;
  if (this->city_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHuntingOfferRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetHuntingOfferRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHuntingOfferRewardReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetHuntingOfferRewardReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetHuntingOfferRewardReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetHuntingOfferRewardReq)
    MergeFrom(*source);
  }
}

void GetHuntingOfferRewardReq::MergeFrom(const GetHuntingOfferRewardReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetHuntingOfferRewardReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.city_id() != 0) {
    set_city_id(from.city_id());
  }
}

void GetHuntingOfferRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetHuntingOfferRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHuntingOfferRewardReq::CopyFrom(const GetHuntingOfferRewardReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetHuntingOfferRewardReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHuntingOfferRewardReq::IsInitialized() const {
  return true;
}

void GetHuntingOfferRewardReq::Swap(GetHuntingOfferRewardReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHuntingOfferRewardReq::InternalSwap(GetHuntingOfferRewardReq* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  swap(city_id_, other->city_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetHuntingOfferRewardReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetHuntingOfferRewardReq

// uint32 city_id = 6;
void GetHuntingOfferRewardReq::clear_city_id() {
  city_id_ = 0u;
}
::google::protobuf::uint32 GetHuntingOfferRewardReq::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardReq.city_id)
  return city_id_;
}
void GetHuntingOfferRewardReq::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetHuntingOfferRewardReq.city_id)
}

// .proto.HuntingPair hunting_pair = 4;
bool GetHuntingOfferRewardReq::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void GetHuntingOfferRewardReq::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& GetHuntingOfferRewardReq::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardReq.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* GetHuntingOfferRewardReq::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetHuntingOfferRewardReq.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* GetHuntingOfferRewardReq::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.GetHuntingOfferRewardReq.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void GetHuntingOfferRewardReq::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetHuntingOfferRewardReq.hunting_pair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetHuntingOfferRewardRsp::kHuntingPairFieldNumber;
const int GetHuntingOfferRewardRsp::kCityIdFieldNumber;
const int GetHuntingOfferRewardRsp::kRetcodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetHuntingOfferRewardRsp::GetHuntingOfferRewardRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.GetHuntingOfferRewardRsp)
}
GetHuntingOfferRewardRsp::GetHuntingOfferRewardRsp(const GetHuntingOfferRewardRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  ::memcpy(&city_id_, &from.city_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&retcode_) -
    reinterpret_cast<char*>(&city_id_)) + sizeof(retcode_));
  // @@protoc_insertion_point(copy_constructor:proto.GetHuntingOfferRewardRsp)
}

void GetHuntingOfferRewardRsp::SharedCtor() {
  ::memset(&hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&hunting_pair_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

GetHuntingOfferRewardRsp::~GetHuntingOfferRewardRsp() {
  // @@protoc_insertion_point(destructor:proto.GetHuntingOfferRewardRsp)
  SharedDtor();
}

void GetHuntingOfferRewardRsp::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void GetHuntingOfferRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHuntingOfferRewardRsp::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetHuntingOfferRewardRsp& GetHuntingOfferRewardRsp::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetHuntingOfferRewardRsp* GetHuntingOfferRewardRsp::New(::google::protobuf::Arena* arena) const {
  GetHuntingOfferRewardRsp* n = new GetHuntingOfferRewardRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetHuntingOfferRewardRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.GetHuntingOfferRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  ::memset(&city_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&city_id_)) + sizeof(retcode_));
  _internal_metadata_.Clear();
}

bool GetHuntingOfferRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.GetHuntingOfferRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 city_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 retcode = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.GetHuntingOfferRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.GetHuntingOfferRewardRsp)
  return false;
#undef DO_
}

void GetHuntingOfferRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.GetHuntingOfferRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 city_id = 3;
  if (this->city_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->city_id(), output);
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->retcode(), output);
  }

  // .proto.HuntingPair hunting_pair = 14;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.GetHuntingOfferRewardRsp)
}

::google::protobuf::uint8* GetHuntingOfferRewardRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.GetHuntingOfferRewardRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 city_id = 3;
  if (this->city_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->city_id(), target);
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->retcode(), target);
  }

  // .proto.HuntingPair hunting_pair = 14;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.GetHuntingOfferRewardRsp)
  return target;
}

size_t GetHuntingOfferRewardRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.GetHuntingOfferRewardRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 14;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // uint32 city_id = 3;
  if (this->city_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->city_id());
  }

  // int32 retcode = 12;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHuntingOfferRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.GetHuntingOfferRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHuntingOfferRewardRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetHuntingOfferRewardRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.GetHuntingOfferRewardRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.GetHuntingOfferRewardRsp)
    MergeFrom(*source);
  }
}

void GetHuntingOfferRewardRsp::MergeFrom(const GetHuntingOfferRewardRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.GetHuntingOfferRewardRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.city_id() != 0) {
    set_city_id(from.city_id());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void GetHuntingOfferRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.GetHuntingOfferRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHuntingOfferRewardRsp::CopyFrom(const GetHuntingOfferRewardRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.GetHuntingOfferRewardRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHuntingOfferRewardRsp::IsInitialized() const {
  return true;
}

void GetHuntingOfferRewardRsp::Swap(GetHuntingOfferRewardRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetHuntingOfferRewardRsp::InternalSwap(GetHuntingOfferRewardRsp* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  swap(city_id_, other->city_id_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetHuntingOfferRewardRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetHuntingOfferRewardRsp

// .proto.HuntingPair hunting_pair = 14;
bool GetHuntingOfferRewardRsp::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void GetHuntingOfferRewardRsp::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& GetHuntingOfferRewardRsp::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardRsp.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* GetHuntingOfferRewardRsp::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.GetHuntingOfferRewardRsp.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* GetHuntingOfferRewardRsp::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.GetHuntingOfferRewardRsp.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void GetHuntingOfferRewardRsp::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.GetHuntingOfferRewardRsp.hunting_pair)
}

// uint32 city_id = 3;
void GetHuntingOfferRewardRsp::clear_city_id() {
  city_id_ = 0u;
}
::google::protobuf::uint32 GetHuntingOfferRewardRsp::city_id() const {
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardRsp.city_id)
  return city_id_;
}
void GetHuntingOfferRewardRsp::set_city_id(::google::protobuf::uint32 value) {
  
  city_id_ = value;
  // @@protoc_insertion_point(field_set:proto.GetHuntingOfferRewardRsp.city_id)
}

// int32 retcode = 12;
void GetHuntingOfferRewardRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 GetHuntingOfferRewardRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.GetHuntingOfferRewardRsp.retcode)
  return retcode_;
}
void GetHuntingOfferRewardRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.GetHuntingOfferRewardRsp.retcode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingStartNotify::kCluePositionFieldNumber;
const int HuntingStartNotify::kFailTimeFieldNumber;
const int HuntingStartNotify::kHuntingPairFieldNumber;
const int HuntingStartNotify::kIsFinalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingStartNotify::HuntingStartNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingStartNotify)
}
HuntingStartNotify::HuntingStartNotify(const HuntingStartNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  if (from.has_clue_position()) {
    clue_position_ = new ::proto::Vector(*from.clue_position_);
  } else {
    clue_position_ = NULL;
  }
  ::memcpy(&is_final_, &from.is_final_,
    static_cast<size_t>(reinterpret_cast<char*>(&fail_time_) -
    reinterpret_cast<char*>(&is_final_)) + sizeof(fail_time_));
  // @@protoc_insertion_point(copy_constructor:proto.HuntingStartNotify)
}

void HuntingStartNotify::SharedCtor() {
  ::memset(&hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fail_time_) -
      reinterpret_cast<char*>(&hunting_pair_)) + sizeof(fail_time_));
  _cached_size_ = 0;
}

HuntingStartNotify::~HuntingStartNotify() {
  // @@protoc_insertion_point(destructor:proto.HuntingStartNotify)
  SharedDtor();
}

void HuntingStartNotify::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
  if (this != internal_default_instance()) delete clue_position_;
}

void HuntingStartNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingStartNotify::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingStartNotify& HuntingStartNotify::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingStartNotify* HuntingStartNotify::New(::google::protobuf::Arena* arena) const {
  HuntingStartNotify* n = new HuntingStartNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingStartNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  if (GetArenaNoVirtual() == NULL && clue_position_ != NULL) {
    delete clue_position_;
  }
  clue_position_ = NULL;
  ::memset(&is_final_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fail_time_) -
      reinterpret_cast<char*>(&is_final_)) + sizeof(fail_time_));
  _internal_metadata_.Clear();
}

bool HuntingStartNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingStartNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HuntingPair hunting_pair = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Vector clue_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clue_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fail_time = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fail_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingStartNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingStartNotify)
  return false;
#undef DO_
}

void HuntingStartNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 3;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->hunting_pair_, output);
  }

  // .proto.Vector clue_position = 4;
  if (this->has_clue_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->clue_position_, output);
  }

  // bool is_final = 8;
  if (this->is_final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_final(), output);
  }

  // uint32 fail_time = 15;
  if (this->fail_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fail_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingStartNotify)
}

::google::protobuf::uint8* HuntingStartNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingStartNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 3;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->hunting_pair_, deterministic, target);
  }

  // .proto.Vector clue_position = 4;
  if (this->has_clue_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->clue_position_, deterministic, target);
  }

  // bool is_final = 8;
  if (this->is_final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_final(), target);
  }

  // uint32 fail_time = 15;
  if (this->fail_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fail_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingStartNotify)
  return target;
}

size_t HuntingStartNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingStartNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 3;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // .proto.Vector clue_position = 4;
  if (this->has_clue_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clue_position_);
  }

  // bool is_final = 8;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // uint32 fail_time = 15;
  if (this->fail_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fail_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingStartNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingStartNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingStartNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingStartNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingStartNotify)
    MergeFrom(*source);
  }
}

void HuntingStartNotify::MergeFrom(const HuntingStartNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingStartNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.has_clue_position()) {
    mutable_clue_position()->::proto::Vector::MergeFrom(from.clue_position());
  }
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
  if (from.fail_time() != 0) {
    set_fail_time(from.fail_time());
  }
}

void HuntingStartNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingStartNotify::CopyFrom(const HuntingStartNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingStartNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingStartNotify::IsInitialized() const {
  return true;
}

void HuntingStartNotify::Swap(HuntingStartNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingStartNotify::InternalSwap(HuntingStartNotify* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  swap(clue_position_, other->clue_position_);
  swap(is_final_, other->is_final_);
  swap(fail_time_, other->fail_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingStartNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingStartNotify

// .proto.Vector clue_position = 4;
bool HuntingStartNotify::has_clue_position() const {
  return this != internal_default_instance() && clue_position_ != NULL;
}
void HuntingStartNotify::clear_clue_position() {
  if (GetArenaNoVirtual() == NULL && clue_position_ != NULL) delete clue_position_;
  clue_position_ = NULL;
}
const ::proto::Vector& HuntingStartNotify::clue_position() const {
  const ::proto::Vector* p = clue_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.clue_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* HuntingStartNotify::mutable_clue_position() {
  
  if (clue_position_ == NULL) {
    clue_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingStartNotify.clue_position)
  return clue_position_;
}
::proto::Vector* HuntingStartNotify::release_clue_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingStartNotify.clue_position)
  
  ::proto::Vector* temp = clue_position_;
  clue_position_ = NULL;
  return temp;
}
void HuntingStartNotify::set_allocated_clue_position(::proto::Vector* clue_position) {
  delete clue_position_;
  clue_position_ = clue_position;
  if (clue_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingStartNotify.clue_position)
}

// uint32 fail_time = 15;
void HuntingStartNotify::clear_fail_time() {
  fail_time_ = 0u;
}
::google::protobuf::uint32 HuntingStartNotify::fail_time() const {
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.fail_time)
  return fail_time_;
}
void HuntingStartNotify::set_fail_time(::google::protobuf::uint32 value) {
  
  fail_time_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingStartNotify.fail_time)
}

// .proto.HuntingPair hunting_pair = 3;
bool HuntingStartNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingStartNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingStartNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingStartNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingStartNotify.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingStartNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingStartNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingStartNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingStartNotify.hunting_pair)
}

// bool is_final = 8;
void HuntingStartNotify::clear_is_final() {
  is_final_ = false;
}
bool HuntingStartNotify::is_final() const {
  // @@protoc_insertion_point(field_get:proto.HuntingStartNotify.is_final)
  return is_final_;
}
void HuntingStartNotify::set_is_final(bool value) {
  
  is_final_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingStartNotify.is_final)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingRevealClueNotify::kFinishClueCountFieldNumber;
const int HuntingRevealClueNotify::kCluePositionFieldNumber;
const int HuntingRevealClueNotify::kHuntingPairFieldNumber;
const int HuntingRevealClueNotify::kFinishedGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingRevealClueNotify::HuntingRevealClueNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingRevealClueNotify)
}
HuntingRevealClueNotify::HuntingRevealClueNotify(const HuntingRevealClueNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_clue_position()) {
    clue_position_ = new ::proto::Vector(*from.clue_position_);
  } else {
    clue_position_ = NULL;
  }
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  ::memcpy(&finish_clue_count_, &from.finish_clue_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&finished_group_id_) -
    reinterpret_cast<char*>(&finish_clue_count_)) + sizeof(finished_group_id_));
  // @@protoc_insertion_point(copy_constructor:proto.HuntingRevealClueNotify)
}

void HuntingRevealClueNotify::SharedCtor() {
  ::memset(&clue_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_group_id_) -
      reinterpret_cast<char*>(&clue_position_)) + sizeof(finished_group_id_));
  _cached_size_ = 0;
}

HuntingRevealClueNotify::~HuntingRevealClueNotify() {
  // @@protoc_insertion_point(destructor:proto.HuntingRevealClueNotify)
  SharedDtor();
}

void HuntingRevealClueNotify::SharedDtor() {
  if (this != internal_default_instance()) delete clue_position_;
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingRevealClueNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingRevealClueNotify::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingRevealClueNotify& HuntingRevealClueNotify::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingRevealClueNotify* HuntingRevealClueNotify::New(::google::protobuf::Arena* arena) const {
  HuntingRevealClueNotify* n = new HuntingRevealClueNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingRevealClueNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingRevealClueNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && clue_position_ != NULL) {
    delete clue_position_;
  }
  clue_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  ::memset(&finish_clue_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_group_id_) -
      reinterpret_cast<char*>(&finish_clue_count_)) + sizeof(finished_group_id_));
  _internal_metadata_.Clear();
}

bool HuntingRevealClueNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingRevealClueNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector clue_position = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clue_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finish_clue_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_clue_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finished_group_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingRevealClueNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingRevealClueNotify)
  return false;
#undef DO_
}

void HuntingRevealClueNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingRevealClueNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector clue_position = 4;
  if (this->has_clue_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->clue_position_, output);
  }

  // uint32 finish_clue_count = 5;
  if (this->finish_clue_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->finish_clue_count(), output);
  }

  // uint32 finished_group_id = 7;
  if (this->finished_group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->finished_group_id(), output);
  }

  // .proto.HuntingPair hunting_pair = 12;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingRevealClueNotify)
}

::google::protobuf::uint8* HuntingRevealClueNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingRevealClueNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector clue_position = 4;
  if (this->has_clue_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->clue_position_, deterministic, target);
  }

  // uint32 finish_clue_count = 5;
  if (this->finish_clue_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->finish_clue_count(), target);
  }

  // uint32 finished_group_id = 7;
  if (this->finished_group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->finished_group_id(), target);
  }

  // .proto.HuntingPair hunting_pair = 12;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingRevealClueNotify)
  return target;
}

size_t HuntingRevealClueNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingRevealClueNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector clue_position = 4;
  if (this->has_clue_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clue_position_);
  }

  // .proto.HuntingPair hunting_pair = 12;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // uint32 finish_clue_count = 5;
  if (this->finish_clue_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finish_clue_count());
  }

  // uint32 finished_group_id = 7;
  if (this->finished_group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finished_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingRevealClueNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingRevealClueNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingRevealClueNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingRevealClueNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingRevealClueNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingRevealClueNotify)
    MergeFrom(*source);
  }
}

void HuntingRevealClueNotify::MergeFrom(const HuntingRevealClueNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingRevealClueNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clue_position()) {
    mutable_clue_position()->::proto::Vector::MergeFrom(from.clue_position());
  }
  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.finish_clue_count() != 0) {
    set_finish_clue_count(from.finish_clue_count());
  }
  if (from.finished_group_id() != 0) {
    set_finished_group_id(from.finished_group_id());
  }
}

void HuntingRevealClueNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingRevealClueNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingRevealClueNotify::CopyFrom(const HuntingRevealClueNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingRevealClueNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingRevealClueNotify::IsInitialized() const {
  return true;
}

void HuntingRevealClueNotify::Swap(HuntingRevealClueNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingRevealClueNotify::InternalSwap(HuntingRevealClueNotify* other) {
  using std::swap;
  swap(clue_position_, other->clue_position_);
  swap(hunting_pair_, other->hunting_pair_);
  swap(finish_clue_count_, other->finish_clue_count_);
  swap(finished_group_id_, other->finished_group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingRevealClueNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingRevealClueNotify

// uint32 finish_clue_count = 5;
void HuntingRevealClueNotify::clear_finish_clue_count() {
  finish_clue_count_ = 0u;
}
::google::protobuf::uint32 HuntingRevealClueNotify::finish_clue_count() const {
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.finish_clue_count)
  return finish_clue_count_;
}
void HuntingRevealClueNotify::set_finish_clue_count(::google::protobuf::uint32 value) {
  
  finish_clue_count_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingRevealClueNotify.finish_clue_count)
}

// .proto.Vector clue_position = 4;
bool HuntingRevealClueNotify::has_clue_position() const {
  return this != internal_default_instance() && clue_position_ != NULL;
}
void HuntingRevealClueNotify::clear_clue_position() {
  if (GetArenaNoVirtual() == NULL && clue_position_ != NULL) delete clue_position_;
  clue_position_ = NULL;
}
const ::proto::Vector& HuntingRevealClueNotify::clue_position() const {
  const ::proto::Vector* p = clue_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.clue_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* HuntingRevealClueNotify::mutable_clue_position() {
  
  if (clue_position_ == NULL) {
    clue_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealClueNotify.clue_position)
  return clue_position_;
}
::proto::Vector* HuntingRevealClueNotify::release_clue_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealClueNotify.clue_position)
  
  ::proto::Vector* temp = clue_position_;
  clue_position_ = NULL;
  return temp;
}
void HuntingRevealClueNotify::set_allocated_clue_position(::proto::Vector* clue_position) {
  delete clue_position_;
  clue_position_ = clue_position;
  if (clue_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealClueNotify.clue_position)
}

// .proto.HuntingPair hunting_pair = 12;
bool HuntingRevealClueNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingRevealClueNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingRevealClueNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingRevealClueNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealClueNotify.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingRevealClueNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealClueNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingRevealClueNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealClueNotify.hunting_pair)
}

// uint32 finished_group_id = 7;
void HuntingRevealClueNotify::clear_finished_group_id() {
  finished_group_id_ = 0u;
}
::google::protobuf::uint32 HuntingRevealClueNotify::finished_group_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingRevealClueNotify.finished_group_id)
  return finished_group_id_;
}
void HuntingRevealClueNotify::set_finished_group_id(::google::protobuf::uint32 value) {
  
  finished_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingRevealClueNotify.finished_group_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingRevealFinalNotify::kFinishedGroupIdFieldNumber;
const int HuntingRevealFinalNotify::kHuntingPairFieldNumber;
const int HuntingRevealFinalNotify::kFinalPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingRevealFinalNotify::HuntingRevealFinalNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingRevealFinalNotify)
}
HuntingRevealFinalNotify::HuntingRevealFinalNotify(const HuntingRevealFinalNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_final_position()) {
    final_position_ = new ::proto::Vector(*from.final_position_);
  } else {
    final_position_ = NULL;
  }
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  finished_group_id_ = from.finished_group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HuntingRevealFinalNotify)
}

void HuntingRevealFinalNotify::SharedCtor() {
  ::memset(&final_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finished_group_id_) -
      reinterpret_cast<char*>(&final_position_)) + sizeof(finished_group_id_));
  _cached_size_ = 0;
}

HuntingRevealFinalNotify::~HuntingRevealFinalNotify() {
  // @@protoc_insertion_point(destructor:proto.HuntingRevealFinalNotify)
  SharedDtor();
}

void HuntingRevealFinalNotify::SharedDtor() {
  if (this != internal_default_instance()) delete final_position_;
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingRevealFinalNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingRevealFinalNotify::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingRevealFinalNotify& HuntingRevealFinalNotify::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingRevealFinalNotify* HuntingRevealFinalNotify::New(::google::protobuf::Arena* arena) const {
  HuntingRevealFinalNotify* n = new HuntingRevealFinalNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingRevealFinalNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingRevealFinalNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && final_position_ != NULL) {
    delete final_position_;
  }
  final_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  finished_group_id_ = 0u;
  _internal_metadata_.Clear();
}

bool HuntingRevealFinalNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingRevealFinalNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector final_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_final_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finished_group_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingRevealFinalNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingRevealFinalNotify)
  return false;
#undef DO_
}

void HuntingRevealFinalNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingRevealFinalNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector final_position = 2;
  if (this->has_final_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->final_position_, output);
  }

  // uint32 finished_group_id = 5;
  if (this->finished_group_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->finished_group_id(), output);
  }

  // .proto.HuntingPair hunting_pair = 11;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingRevealFinalNotify)
}

::google::protobuf::uint8* HuntingRevealFinalNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingRevealFinalNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector final_position = 2;
  if (this->has_final_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->final_position_, deterministic, target);
  }

  // uint32 finished_group_id = 5;
  if (this->finished_group_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->finished_group_id(), target);
  }

  // .proto.HuntingPair hunting_pair = 11;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingRevealFinalNotify)
  return target;
}

size_t HuntingRevealFinalNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingRevealFinalNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector final_position = 2;
  if (this->has_final_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->final_position_);
  }

  // .proto.HuntingPair hunting_pair = 11;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // uint32 finished_group_id = 5;
  if (this->finished_group_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finished_group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingRevealFinalNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingRevealFinalNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingRevealFinalNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingRevealFinalNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingRevealFinalNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingRevealFinalNotify)
    MergeFrom(*source);
  }
}

void HuntingRevealFinalNotify::MergeFrom(const HuntingRevealFinalNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingRevealFinalNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_final_position()) {
    mutable_final_position()->::proto::Vector::MergeFrom(from.final_position());
  }
  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.finished_group_id() != 0) {
    set_finished_group_id(from.finished_group_id());
  }
}

void HuntingRevealFinalNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingRevealFinalNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingRevealFinalNotify::CopyFrom(const HuntingRevealFinalNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingRevealFinalNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingRevealFinalNotify::IsInitialized() const {
  return true;
}

void HuntingRevealFinalNotify::Swap(HuntingRevealFinalNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingRevealFinalNotify::InternalSwap(HuntingRevealFinalNotify* other) {
  using std::swap;
  swap(final_position_, other->final_position_);
  swap(hunting_pair_, other->hunting_pair_);
  swap(finished_group_id_, other->finished_group_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingRevealFinalNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingRevealFinalNotify

// uint32 finished_group_id = 5;
void HuntingRevealFinalNotify::clear_finished_group_id() {
  finished_group_id_ = 0u;
}
::google::protobuf::uint32 HuntingRevealFinalNotify::finished_group_id() const {
  // @@protoc_insertion_point(field_get:proto.HuntingRevealFinalNotify.finished_group_id)
  return finished_group_id_;
}
void HuntingRevealFinalNotify::set_finished_group_id(::google::protobuf::uint32 value) {
  
  finished_group_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingRevealFinalNotify.finished_group_id)
}

// .proto.HuntingPair hunting_pair = 11;
bool HuntingRevealFinalNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingRevealFinalNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingRevealFinalNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealFinalNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingRevealFinalNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealFinalNotify.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingRevealFinalNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealFinalNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingRevealFinalNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealFinalNotify.hunting_pair)
}

// .proto.Vector final_position = 2;
bool HuntingRevealFinalNotify::has_final_position() const {
  return this != internal_default_instance() && final_position_ != NULL;
}
void HuntingRevealFinalNotify::clear_final_position() {
  if (GetArenaNoVirtual() == NULL && final_position_ != NULL) delete final_position_;
  final_position_ = NULL;
}
const ::proto::Vector& HuntingRevealFinalNotify::final_position() const {
  const ::proto::Vector* p = final_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingRevealFinalNotify.final_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* HuntingRevealFinalNotify::mutable_final_position() {
  
  if (final_position_ == NULL) {
    final_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingRevealFinalNotify.final_position)
  return final_position_;
}
::proto::Vector* HuntingRevealFinalNotify::release_final_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingRevealFinalNotify.final_position)
  
  ::proto::Vector* temp = final_position_;
  final_position_ = NULL;
  return temp;
}
void HuntingRevealFinalNotify::set_allocated_final_position(::proto::Vector* final_position) {
  delete final_position_;
  final_position_ = final_position;
  if (final_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingRevealFinalNotify.final_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingSuccessNotify::kHuntingPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingSuccessNotify::HuntingSuccessNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingSuccessNotify)
}
HuntingSuccessNotify::HuntingSuccessNotify(const HuntingSuccessNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.HuntingSuccessNotify)
}

void HuntingSuccessNotify::SharedCtor() {
  hunting_pair_ = NULL;
  _cached_size_ = 0;
}

HuntingSuccessNotify::~HuntingSuccessNotify() {
  // @@protoc_insertion_point(destructor:proto.HuntingSuccessNotify)
  SharedDtor();
}

void HuntingSuccessNotify::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingSuccessNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingSuccessNotify::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingSuccessNotify& HuntingSuccessNotify::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingSuccessNotify* HuntingSuccessNotify::New(::google::protobuf::Arena* arena) const {
  HuntingSuccessNotify* n = new HuntingSuccessNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingSuccessNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingSuccessNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  _internal_metadata_.Clear();
}

bool HuntingSuccessNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingSuccessNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HuntingPair hunting_pair = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingSuccessNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingSuccessNotify)
  return false;
#undef DO_
}

void HuntingSuccessNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingSuccessNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingSuccessNotify)
}

::google::protobuf::uint8* HuntingSuccessNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingSuccessNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingSuccessNotify)
  return target;
}

size_t HuntingSuccessNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingSuccessNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingSuccessNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingSuccessNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingSuccessNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingSuccessNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingSuccessNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingSuccessNotify)
    MergeFrom(*source);
  }
}

void HuntingSuccessNotify::MergeFrom(const HuntingSuccessNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingSuccessNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
}

void HuntingSuccessNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingSuccessNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingSuccessNotify::CopyFrom(const HuntingSuccessNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingSuccessNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingSuccessNotify::IsInitialized() const {
  return true;
}

void HuntingSuccessNotify::Swap(HuntingSuccessNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingSuccessNotify::InternalSwap(HuntingSuccessNotify* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingSuccessNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingSuccessNotify

// .proto.HuntingPair hunting_pair = 4;
bool HuntingSuccessNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingSuccessNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingSuccessNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingSuccessNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingSuccessNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingSuccessNotify.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingSuccessNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingSuccessNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingSuccessNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingSuccessNotify.hunting_pair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingFailNotify::kHuntingPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingFailNotify::HuntingFailNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingFailNotify)
}
HuntingFailNotify::HuntingFailNotify(const HuntingFailNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.HuntingFailNotify)
}

void HuntingFailNotify::SharedCtor() {
  hunting_pair_ = NULL;
  _cached_size_ = 0;
}

HuntingFailNotify::~HuntingFailNotify() {
  // @@protoc_insertion_point(destructor:proto.HuntingFailNotify)
  SharedDtor();
}

void HuntingFailNotify::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingFailNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingFailNotify::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingFailNotify& HuntingFailNotify::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingFailNotify* HuntingFailNotify::New(::google::protobuf::Arena* arena) const {
  HuntingFailNotify* n = new HuntingFailNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingFailNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingFailNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  _internal_metadata_.Clear();
}

bool HuntingFailNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingFailNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HuntingPair hunting_pair = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingFailNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingFailNotify)
  return false;
#undef DO_
}

void HuntingFailNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingFailNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 12;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingFailNotify)
}

::google::protobuf::uint8* HuntingFailNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingFailNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 12;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingFailNotify)
  return target;
}

size_t HuntingFailNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingFailNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 12;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingFailNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingFailNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingFailNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingFailNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingFailNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingFailNotify)
    MergeFrom(*source);
  }
}

void HuntingFailNotify::MergeFrom(const HuntingFailNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingFailNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
}

void HuntingFailNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingFailNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingFailNotify::CopyFrom(const HuntingFailNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingFailNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingFailNotify::IsInitialized() const {
  return true;
}

void HuntingFailNotify::Swap(HuntingFailNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingFailNotify::InternalSwap(HuntingFailNotify* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingFailNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingFailNotify

// .proto.HuntingPair hunting_pair = 12;
bool HuntingFailNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingFailNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingFailNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingFailNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingFailNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingFailNotify.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingFailNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingFailNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingFailNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingFailNotify.hunting_pair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingOngoingNotify::kHuntingPairFieldNumber;
const int HuntingOngoingNotify::kIsStartedFieldNumber;
const int HuntingOngoingNotify::kNextPositionFieldNumber;
const int HuntingOngoingNotify::kFinishClueCountFieldNumber;
const int HuntingOngoingNotify::kIsFinalFieldNumber;
const int HuntingOngoingNotify::kFailTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingOngoingNotify::HuntingOngoingNotify()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingOngoingNotify)
}
HuntingOngoingNotify::HuntingOngoingNotify(const HuntingOngoingNotify& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_next_position()) {
    next_position_ = new ::proto::Vector(*from.next_position_);
  } else {
    next_position_ = NULL;
  }
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  ::memcpy(&is_started_, &from.is_started_,
    static_cast<size_t>(reinterpret_cast<char*>(&finish_clue_count_) -
    reinterpret_cast<char*>(&is_started_)) + sizeof(finish_clue_count_));
  // @@protoc_insertion_point(copy_constructor:proto.HuntingOngoingNotify)
}

void HuntingOngoingNotify::SharedCtor() {
  ::memset(&next_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_clue_count_) -
      reinterpret_cast<char*>(&next_position_)) + sizeof(finish_clue_count_));
  _cached_size_ = 0;
}

HuntingOngoingNotify::~HuntingOngoingNotify() {
  // @@protoc_insertion_point(destructor:proto.HuntingOngoingNotify)
  SharedDtor();
}

void HuntingOngoingNotify::SharedDtor() {
  if (this != internal_default_instance()) delete next_position_;
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingOngoingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingOngoingNotify::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingOngoingNotify& HuntingOngoingNotify::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingOngoingNotify* HuntingOngoingNotify::New(::google::protobuf::Arena* arena) const {
  HuntingOngoingNotify* n = new HuntingOngoingNotify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingOngoingNotify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingOngoingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && next_position_ != NULL) {
    delete next_position_;
  }
  next_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  ::memset(&is_started_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&finish_clue_count_) -
      reinterpret_cast<char*>(&is_started_)) + sizeof(finish_clue_count_));
  _internal_metadata_.Clear();
}

bool HuntingOngoingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingOngoingNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Vector next_position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 fail_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fail_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_started = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 finish_clue_count = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_clue_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_final = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingOngoingNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingOngoingNotify)
  return false;
#undef DO_
}

void HuntingOngoingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingOngoingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector next_position = 3;
  if (this->has_next_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->next_position_, output);
  }

  // uint32 fail_time = 7;
  if (this->fail_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fail_time(), output);
  }

  // bool is_started = 8;
  if (this->is_started() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_started(), output);
  }

  // uint32 finish_clue_count = 10;
  if (this->finish_clue_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->finish_clue_count(), output);
  }

  // bool is_final = 14;
  if (this->is_final() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_final(), output);
  }

  // .proto.HuntingPair hunting_pair = 15;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingOngoingNotify)
}

::google::protobuf::uint8* HuntingOngoingNotify::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingOngoingNotify)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.Vector next_position = 3;
  if (this->has_next_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->next_position_, deterministic, target);
  }

  // uint32 fail_time = 7;
  if (this->fail_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fail_time(), target);
  }

  // bool is_started = 8;
  if (this->is_started() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_started(), target);
  }

  // uint32 finish_clue_count = 10;
  if (this->finish_clue_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->finish_clue_count(), target);
  }

  // bool is_final = 14;
  if (this->is_final() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_final(), target);
  }

  // .proto.HuntingPair hunting_pair = 15;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingOngoingNotify)
  return target;
}

size_t HuntingOngoingNotify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingOngoingNotify)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.Vector next_position = 3;
  if (this->has_next_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->next_position_);
  }

  // .proto.HuntingPair hunting_pair = 15;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // bool is_started = 8;
  if (this->is_started() != 0) {
    total_size += 1 + 1;
  }

  // bool is_final = 14;
  if (this->is_final() != 0) {
    total_size += 1 + 1;
  }

  // uint32 fail_time = 7;
  if (this->fail_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fail_time());
  }

  // uint32 finish_clue_count = 10;
  if (this->finish_clue_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->finish_clue_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingOngoingNotify::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingOngoingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingOngoingNotify* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingOngoingNotify>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingOngoingNotify)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingOngoingNotify)
    MergeFrom(*source);
  }
}

void HuntingOngoingNotify::MergeFrom(const HuntingOngoingNotify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingOngoingNotify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_next_position()) {
    mutable_next_position()->::proto::Vector::MergeFrom(from.next_position());
  }
  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.is_started() != 0) {
    set_is_started(from.is_started());
  }
  if (from.is_final() != 0) {
    set_is_final(from.is_final());
  }
  if (from.fail_time() != 0) {
    set_fail_time(from.fail_time());
  }
  if (from.finish_clue_count() != 0) {
    set_finish_clue_count(from.finish_clue_count());
  }
}

void HuntingOngoingNotify::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingOngoingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingOngoingNotify::CopyFrom(const HuntingOngoingNotify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingOngoingNotify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingOngoingNotify::IsInitialized() const {
  return true;
}

void HuntingOngoingNotify::Swap(HuntingOngoingNotify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingOngoingNotify::InternalSwap(HuntingOngoingNotify* other) {
  using std::swap;
  swap(next_position_, other->next_position_);
  swap(hunting_pair_, other->hunting_pair_);
  swap(is_started_, other->is_started_);
  swap(is_final_, other->is_final_);
  swap(fail_time_, other->fail_time_);
  swap(finish_clue_count_, other->finish_clue_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingOngoingNotify::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingOngoingNotify

// .proto.HuntingPair hunting_pair = 15;
bool HuntingOngoingNotify::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingOngoingNotify::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingOngoingNotify::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingOngoingNotify::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingOngoingNotify.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingOngoingNotify::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingOngoingNotify.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingOngoingNotify::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingOngoingNotify.hunting_pair)
}

// bool is_started = 8;
void HuntingOngoingNotify::clear_is_started() {
  is_started_ = false;
}
bool HuntingOngoingNotify::is_started() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.is_started)
  return is_started_;
}
void HuntingOngoingNotify::set_is_started(bool value) {
  
  is_started_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.is_started)
}

// .proto.Vector next_position = 3;
bool HuntingOngoingNotify::has_next_position() const {
  return this != internal_default_instance() && next_position_ != NULL;
}
void HuntingOngoingNotify::clear_next_position() {
  if (GetArenaNoVirtual() == NULL && next_position_ != NULL) delete next_position_;
  next_position_ = NULL;
}
const ::proto::Vector& HuntingOngoingNotify::next_position() const {
  const ::proto::Vector* p = next_position_;
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.next_position)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::Vector*>(
      &::proto::_Vector_default_instance_);
}
::proto::Vector* HuntingOngoingNotify::mutable_next_position() {
  
  if (next_position_ == NULL) {
    next_position_ = new ::proto::Vector;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingOngoingNotify.next_position)
  return next_position_;
}
::proto::Vector* HuntingOngoingNotify::release_next_position() {
  // @@protoc_insertion_point(field_release:proto.HuntingOngoingNotify.next_position)
  
  ::proto::Vector* temp = next_position_;
  next_position_ = NULL;
  return temp;
}
void HuntingOngoingNotify::set_allocated_next_position(::proto::Vector* next_position) {
  delete next_position_;
  next_position_ = next_position;
  if (next_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingOngoingNotify.next_position)
}

// uint32 finish_clue_count = 10;
void HuntingOngoingNotify::clear_finish_clue_count() {
  finish_clue_count_ = 0u;
}
::google::protobuf::uint32 HuntingOngoingNotify::finish_clue_count() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.finish_clue_count)
  return finish_clue_count_;
}
void HuntingOngoingNotify::set_finish_clue_count(::google::protobuf::uint32 value) {
  
  finish_clue_count_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.finish_clue_count)
}

// bool is_final = 14;
void HuntingOngoingNotify::clear_is_final() {
  is_final_ = false;
}
bool HuntingOngoingNotify::is_final() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.is_final)
  return is_final_;
}
void HuntingOngoingNotify::set_is_final(bool value) {
  
  is_final_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.is_final)
}

// uint32 fail_time = 7;
void HuntingOngoingNotify::clear_fail_time() {
  fail_time_ = 0u;
}
::google::protobuf::uint32 HuntingOngoingNotify::fail_time() const {
  // @@protoc_insertion_point(field_get:proto.HuntingOngoingNotify.fail_time)
  return fail_time_;
}
void HuntingOngoingNotify::set_fail_time(::google::protobuf::uint32 value) {
  
  fail_time_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingOngoingNotify.fail_time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingGiveUpReq::kHuntingPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingGiveUpReq::HuntingGiveUpReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingGiveUpReq)
}
HuntingGiveUpReq::HuntingGiveUpReq(const HuntingGiveUpReq& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.HuntingGiveUpReq)
}

void HuntingGiveUpReq::SharedCtor() {
  hunting_pair_ = NULL;
  _cached_size_ = 0;
}

HuntingGiveUpReq::~HuntingGiveUpReq() {
  // @@protoc_insertion_point(destructor:proto.HuntingGiveUpReq)
  SharedDtor();
}

void HuntingGiveUpReq::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingGiveUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingGiveUpReq::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingGiveUpReq& HuntingGiveUpReq::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingGiveUpReq* HuntingGiveUpReq::New(::google::protobuf::Arena* arena) const {
  HuntingGiveUpReq* n = new HuntingGiveUpReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingGiveUpReq::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingGiveUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  _internal_metadata_.Clear();
}

bool HuntingGiveUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingGiveUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HuntingPair hunting_pair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingGiveUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingGiveUpReq)
  return false;
#undef DO_
}

void HuntingGiveUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingGiveUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 1;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingGiveUpReq)
}

::google::protobuf::uint8* HuntingGiveUpReq::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingGiveUpReq)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto.HuntingPair hunting_pair = 1;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingGiveUpReq)
  return target;
}

size_t HuntingGiveUpReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingGiveUpReq)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 1;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingGiveUpReq::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingGiveUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingGiveUpReq* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingGiveUpReq>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingGiveUpReq)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingGiveUpReq)
    MergeFrom(*source);
  }
}

void HuntingGiveUpReq::MergeFrom(const HuntingGiveUpReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingGiveUpReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
}

void HuntingGiveUpReq::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingGiveUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingGiveUpReq::CopyFrom(const HuntingGiveUpReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingGiveUpReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingGiveUpReq::IsInitialized() const {
  return true;
}

void HuntingGiveUpReq::Swap(HuntingGiveUpReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingGiveUpReq::InternalSwap(HuntingGiveUpReq* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingGiveUpReq::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingGiveUpReq

// .proto.HuntingPair hunting_pair = 1;
bool HuntingGiveUpReq::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingGiveUpReq::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingGiveUpReq::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingGiveUpReq.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingGiveUpReq::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingGiveUpReq.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingGiveUpReq::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingGiveUpReq.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingGiveUpReq::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingGiveUpReq.hunting_pair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HuntingGiveUpRsp::kRetcodeFieldNumber;
const int HuntingGiveUpRsp::kHuntingPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HuntingGiveUpRsp::HuntingGiveUpRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HuntingGiveUpRsp)
}
HuntingGiveUpRsp::HuntingGiveUpRsp(const HuntingGiveUpRsp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_hunting_pair()) {
    hunting_pair_ = new ::proto::HuntingPair(*from.hunting_pair_);
  } else {
    hunting_pair_ = NULL;
  }
  retcode_ = from.retcode_;
  // @@protoc_insertion_point(copy_constructor:proto.HuntingGiveUpRsp)
}

void HuntingGiveUpRsp::SharedCtor() {
  ::memset(&hunting_pair_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retcode_) -
      reinterpret_cast<char*>(&hunting_pair_)) + sizeof(retcode_));
  _cached_size_ = 0;
}

HuntingGiveUpRsp::~HuntingGiveUpRsp() {
  // @@protoc_insertion_point(destructor:proto.HuntingGiveUpRsp)
  SharedDtor();
}

void HuntingGiveUpRsp::SharedDtor() {
  if (this != internal_default_instance()) delete hunting_pair_;
}

void HuntingGiveUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HuntingGiveUpRsp::descriptor() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HuntingGiveUpRsp& HuntingGiveUpRsp::default_instance() {
  protobuf_cmd_2fcmd_5fhunting_2eproto::InitDefaults();
  return *internal_default_instance();
}

HuntingGiveUpRsp* HuntingGiveUpRsp::New(::google::protobuf::Arena* arena) const {
  HuntingGiveUpRsp* n = new HuntingGiveUpRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HuntingGiveUpRsp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HuntingGiveUpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) {
    delete hunting_pair_;
  }
  hunting_pair_ = NULL;
  retcode_ = 0;
  _internal_metadata_.Clear();
}

bool HuntingGiveUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HuntingGiveUpRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 retcode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HuntingPair hunting_pair = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hunting_pair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HuntingGiveUpRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HuntingGiveUpRsp)
  return false;
#undef DO_
}

void HuntingGiveUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HuntingGiveUpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->hunting_pair_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.HuntingGiveUpRsp)
}

::google::protobuf::uint8* HuntingGiveUpRsp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.HuntingGiveUpRsp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->hunting_pair_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.HuntingGiveUpRsp)
  return target;
}

size_t HuntingGiveUpRsp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HuntingGiveUpRsp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .proto.HuntingPair hunting_pair = 4;
  if (this->has_hunting_pair()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->hunting_pair_);
  }

  // int32 retcode = 3;
  if (this->retcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->retcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HuntingGiveUpRsp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.HuntingGiveUpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  const HuntingGiveUpRsp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HuntingGiveUpRsp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.HuntingGiveUpRsp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.HuntingGiveUpRsp)
    MergeFrom(*source);
  }
}

void HuntingGiveUpRsp::MergeFrom(const HuntingGiveUpRsp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HuntingGiveUpRsp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_hunting_pair()) {
    mutable_hunting_pair()->::proto::HuntingPair::MergeFrom(from.hunting_pair());
  }
  if (from.retcode() != 0) {
    set_retcode(from.retcode());
  }
}

void HuntingGiveUpRsp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.HuntingGiveUpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HuntingGiveUpRsp::CopyFrom(const HuntingGiveUpRsp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HuntingGiveUpRsp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HuntingGiveUpRsp::IsInitialized() const {
  return true;
}

void HuntingGiveUpRsp::Swap(HuntingGiveUpRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HuntingGiveUpRsp::InternalSwap(HuntingGiveUpRsp* other) {
  using std::swap;
  swap(hunting_pair_, other->hunting_pair_);
  swap(retcode_, other->retcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HuntingGiveUpRsp::GetMetadata() const {
  protobuf_cmd_2fcmd_5fhunting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_cmd_2fcmd_5fhunting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HuntingGiveUpRsp

// int32 retcode = 3;
void HuntingGiveUpRsp::clear_retcode() {
  retcode_ = 0;
}
::google::protobuf::int32 HuntingGiveUpRsp::retcode() const {
  // @@protoc_insertion_point(field_get:proto.HuntingGiveUpRsp.retcode)
  return retcode_;
}
void HuntingGiveUpRsp::set_retcode(::google::protobuf::int32 value) {
  
  retcode_ = value;
  // @@protoc_insertion_point(field_set:proto.HuntingGiveUpRsp.retcode)
}

// .proto.HuntingPair hunting_pair = 4;
bool HuntingGiveUpRsp::has_hunting_pair() const {
  return this != internal_default_instance() && hunting_pair_ != NULL;
}
void HuntingGiveUpRsp::clear_hunting_pair() {
  if (GetArenaNoVirtual() == NULL && hunting_pair_ != NULL) delete hunting_pair_;
  hunting_pair_ = NULL;
}
const ::proto::HuntingPair& HuntingGiveUpRsp::hunting_pair() const {
  const ::proto::HuntingPair* p = hunting_pair_;
  // @@protoc_insertion_point(field_get:proto.HuntingGiveUpRsp.hunting_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::proto::HuntingPair*>(
      &::proto::_HuntingPair_default_instance_);
}
::proto::HuntingPair* HuntingGiveUpRsp::mutable_hunting_pair() {
  
  if (hunting_pair_ == NULL) {
    hunting_pair_ = new ::proto::HuntingPair;
  }
  // @@protoc_insertion_point(field_mutable:proto.HuntingGiveUpRsp.hunting_pair)
  return hunting_pair_;
}
::proto::HuntingPair* HuntingGiveUpRsp::release_hunting_pair() {
  // @@protoc_insertion_point(field_release:proto.HuntingGiveUpRsp.hunting_pair)
  
  ::proto::HuntingPair* temp = hunting_pair_;
  hunting_pair_ = NULL;
  return temp;
}
void HuntingGiveUpRsp::set_allocated_hunting_pair(::proto::HuntingPair* hunting_pair) {
  delete hunting_pair_;
  hunting_pair_ = hunting_pair;
  if (hunting_pair) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HuntingGiveUpRsp.hunting_pair)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
